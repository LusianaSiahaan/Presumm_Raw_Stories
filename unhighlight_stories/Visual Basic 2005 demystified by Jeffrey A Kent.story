VISUAL BASIC 2005  DEMYSTIFIED   This page intentionally left blank    VISUAL BASIC 2005  DEMYSTIFIED  JEFF KENT  McGraw-Hill  New York   Chicago   San Francisco   Lisbon   London    Madrid   Mexico City   Milan   New Delhi   San Juan    Seoul   Singapore   Sydney   Toronto   Copyright   2006 by The McGraw-Hill Companies. All rights reserved. Manufactured in the United States of America. Except as permitted under the United States Copyright Act of 1976, no part of this publication may be reproduced or distributed in any form or by any means, or stored in a database or retrieval system, without the prior written permission of the publisher.   0-07-148675-5.  The material in this eBook also appears in the print version of this title: 0-07-226171-4.  All trademarks are trademarks of their respective owners. Rather than put a trademark symbol after every occurrence of a trademarked name, we use names in an editorial fashion only, and to the benefit of the trademark owner, with no intention of infringement of the trademark. Where such designations appear in this book, they have been printed with initial caps.   McGraw-Hill eBooks are available at special quantity discounts to use as premiums and sales promotions, or for use in corporate  training programs. For more information, please contact George Hoare, Special Sales, at george_hoare@mcgraw-hill.com or  212  904-4069.   TERMS OF USE   This is a copyrighted work and The McGraw-Hill Companies, Inc.  “McGraw-Hill”  and its licensors reserve all rights in and to the work. Use of this work is subject to these terms. Except as permitted under the Copyright Act of 1976 and the right to store and retrieve one copy of the work, you may not decompile, disassemble, reverse engineer, reproduce, modify, create derivative works based upon, transmit,  distribute,  disseminate,  sell,  publish  or  sublicense  the  work  or  any  part  of  it  without  McGraw-Hill’s  prior  consent. You may use the work for your own noncommercial and personal use; any other use of the work is strictly prohibited. Your right to use the work may be terminated if you fail to comply with these terms.   THE WORK IS PROVIDED “AS IS.” McGRAW-HILL AND ITS LICENSORS MAKE NO GUARANTEES OR WARRANTIES AS TO THE ACCURACY, ADEQUACY OR COMPLETENESS OF OR RESULTS TO BE OBTAINED FROM USING THE WORK, INCLUDING  ANY  INFORMATION  THAT  CAN  BE  ACCESSED  THROUGH  THE  WORK  VIA  HYPERLINK  OR  OTHERWISE, AND EXPRESSLY DISCLAIM ANY WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. McGraw-Hill and its licensors do not warrant or guarantee that the functions contained in the work will meet your requirements or that its operation will be uninterrupted or error free. Neither McGraw-Hill nor its licensors shall be liable to you or anyone else for any inaccuracy, error or omission,  regardless  of  cause,  in  the  work  or  for  any  damages  resulting  therefrom.  McGraw-Hill  has  no  responsibility  for  the  content of any information accessed through the work. Under no circumstances shall McGraw-Hill and or its licensors be liable for any indirect, incidental, special, punitive, consequential or similar damages that result from the use of or inability to use the work, even if any of them has been advised of the possibility of such damages. This limitation of liability shall apply to any claim or cause whatsoever whether such claim or cause arises in contract, tort or otherwise.   DOI: 10.1036 0072261714    Professional  Want to learn more? We hope you enjoy this McGraw-Hill eBook! If  you’d like more information about this book, its author, or related books and websites, please click here.   I would like to dedicate this book to my younger  daughter, Emily Rebecca Kent. Being a teenager  is never easy and even more difﬁ cult during these  times. Emily, I am proud of your recent progress,  and hope it continues as you approach, all too  soon for a parent, becoming a young adult.  I love you very much.  —Dad   ABOUT THE AUTHOR  Jeff Kent is an Associate Professor of Computer Science at Los Angeles Valley  College in Valley Glen, California. He teaches a number of programming languages,  including  Visual  Basic,  C++,  C,  Java,  and,  when  he’s  feeling  masochistic,  Assembler. He also manages a network for a Los Angeles law firm whose employees  are  guinea  pigs  for  his  applications,  and  as  an  attorney  gives  advice  to  young  attorneys whether they want to hear it or not. He also has written several books on  computer programming, recently Visual Basic.NET: A Beginner’s Guide and C++ Demystified  McGraw-Hill Osborne , and, concurrently with this book, Visual C  2005 Demystified  McGraw-Hill .  Jeff  has  had  a  varied  career—or  careers.  He  graduated  from  UCLA  with  a  Bachelor of Science degree in economics and then went on to obtain a Juris Doctor  degree from Loyola  Los Angeles  School of Law and to practice law. During this  time, when personal computers were still a gleam in Bill Gates’s eye, Jeff was also  a professional chess master, earning a third place finish in the United States Under- 21 Championship and, later, an international title.  Jeff does find time to spend with his wife, Devvie, which is not difficult since she  is  also  a  computer  science  professor  at Valley  College.  In  addition  to  his  other  career pursuits, he has a part-time job as personal chauffeur for his teenage daughter  Emily  his older daughter Elise now has her own driver’s license , and in what little  spare  time  he  has,  he  enjoys  watching  international  chess  tournaments  on  the  Internet. His goal is to resume running marathons, since otherwise, given his losing  battle to lose weight, his next book may be Sumo Wrestling Demystified.  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.    CONTENTS AT A GLANCE  PART ONE  CHAPTER 1  CHAPTER 2  CHAPTER 3   PART TWO   CHAPTER 4  CHAPTER 5   INTRODUCTION TO VISUAL BASIC 2005 Getting Started with Your First Windows Program  Writing Your First Code  Controls                3 19 43  PROGRAMMING BUILDING BLOCKS: VARIABLES,  DATA TYPES, AND OPERATORS Storing Information—Data Types and Variables  Letting the Program Do the Math—Arithmetic     65  Operators      CHAPTER 6   Making Comparisons—Comparison   and Logical Operators      PART THREE  CONTROLLING THE FLOW OF THE PROGRAM CHAPTER 7   Making Choices—If and Select Case Control   Structures      CHAPTER 8  CHAPTER 9   Repeating Yourself—Loops and Arrays  Organizing Your Code with Procedures                     79  97  115 139 157  vii   viii   Visual Basic 2005 Demystiﬁ ed  PART FOUR  CHAPTER 10  CHAPTER 11  CHAPTER 12   THE USER INTERFACE Helper Forms  Menus    Toolbars         PART FIVE  CHAPTER 13  CHAPTER 14  CHAPTER 15  Web Applications   ACCESSING DATA Accessing Text Files  Databases            Final Exam  Answers to Quizzes and Final Exam  Index                       179 197 221  239 255 277 301 307 325   For more information about this title, click here  CONTENTS  Acknowledgments  Introduction   PART ONE  CHAPTER 1   INTRODUCTION TO VISUAL BASIC 2005 Getting Started with Your First Windows Program  Obtaining and Installing Visual Basic 2005      System Requirements  Choosing the Right Version  Installing Visual Basic 2005            Starting Your First Visual Basic 2005 Project      Starting the Program  Specifying the Type of New Project  Specifying the Name and Location         of the Project      Integrated Development Environment  IDE   Run the Project!         What Is a Computer Program?      What Is a Programming Language?    Translating the Code for the Computer      Conclusion  Quiz                                             xix xxi    3 4 5 6 6 7 7 7  10 11 12 14 15 16 17 17  ix   x   CHAPTER 2   Visual Basic 2005 Demystiﬁ ed  Writing Your First Code    Starting an Existing Project      Design View and Code View  Object Browser  Classes and Objects              Inherits  Namespaces    .NET Framework      Properties      Properties Window  Changing Properties at Design Time         What Is a Windows Application?      Windows Applications Are Gooey  Windows Applications Are Event-Driven  Classes Have Events        Creating an Event Procedure         Creating an Event Procedure Stub  Writing Code Inside the Event Procedure  Assignment Operator  Comments                  Conclusion  Quiz  Controls  Adding Controls to the Form         Toolbox  Copying a Control from the Toolbox      to the Form      Changing the Control’s Location  Changing the Control’s Size         Important Label Properties      Text Property  Name Property                                                                           19 20 22 25 26 27 27 28 28 29 31 31 32 34 35 35 36 38 39 40 41 41 43 44 44  46 46 48 50 50 51  CHAPTER 3    CONTENTS  xi  The Label Control in Action     Mouse Coordinates  Creating the Application         How the Code Works      Line-Continuation Character  Using Event Procedure Parameters  Handles Clause  What If You Type the Wrong Code?               Conclusion  Quiz         PART TWO   CHAPTER 4   CHAPTER 5            Variables   Numeric Data Types  Text Data Types  Data Types of Visual Basic Properties   PROGRAMMING BUILDING BLOCKS: VARIABLES,  DATA TYPES, AND OPERATORS Storing Information—Data Types and Variables    Data Types                         Conclusion  Quiz  Letting the Program Do the Math—Arithmetic     65 66 67 68 68 70 70 72 75 75 76 77 77  Declaring a Variable  Where Do You Declare a Variable?   Declaring a Constant  Why Use Constants?   Constants                              Operators      Arithmetic Operators      The Addition Operator    The Subtraction Operator    The Multiplication Operator                                      52 52 53 56 56 56 57 57 59 60  79 80 80 81 81   xii   Visual Basic 2005 Demystiﬁ ed  CHAPTER 6   The Exponent Operator  The Division Operators  Operator Precedence    Combining Arithmetic and Assignment        Operators      The Parse and ToString Methods      Class Methods      Change Machine Project  Creating the Project  The Algorithm                 Type Conversions  Conclusion  Quiz  Making Comparisons—Comparison      and Logical Operators      Debugging  Comparison Operators                        Numeric Comparison Operators  String Comparisons  Precedence  Logical Operators  And Operator  AndAlso Operator  Or Operator    OrElse Operator    Xor Operator  Not Operator    Precedence  Why AndAlso and OrElse in Addition            to And and Or?      Conclusion  Quiz                                                                       81 82 83  83 84 86 86 87 90 92 94 95  97 98 100 100 102 105 106 106 107 108 109 109 110 110  111 111 112   CONTENTS  xiii  PART THREE  CONTROLLING THE FLOW OF THE PROGRAM CHAPTER 7   Making Choices—If and Select Case Control   Structures         The InputBox Function  Modal vs. Modeless  Displaying an Input Box  Return Value            If Control Structure      If...Then Statement  If…Then…Else Statement  If…ElseIf Statement            Input Validation  Exceptions        CheckBox Control    RadioButton Control      Pizza Calculator      Creating the Project    How the Project Works  The Code         Select Case Control Structure      Controls Used for If Control Structure         Syntax  The Is Keyword  Select Case Control Structure in Action  Choosing Between If…ElseIf and         Select Case            Conclusion  Quiz  Repeating Yourself—Loops and Arrays  Loops         For...Next Statement                                                                115 116 116 118 118 119 120 121 122 124 124 128 128 130 131 131 132 132 134 135 135 136  137 137 138 139 140 140  CHAPTER 8    xiv   Visual Basic 2005 Demystiﬁ ed  CHAPTER 9   Organizing Your Code with Procedures  Types of Procedures         Built-In vs. Programmer-Deﬁ ned   While...End While Statement  Do Statement  For Each...Next Loop            Arrays      Declaring Arrays    Default Value      Conclusion  Quiz         Procedures      Methods Contrasted      Subroutines      Declaring a Subroutine  Calling the Subroutine  Parameters           Functions         Declaring Functions  Calling Functions    How the Value Is Returned  Why Write Your Own Procedures?  Conclusion  Quiz               PART FOUR  CHAPTER 10   THE USER INTERFACE Helper Forms  Message Boxes        Creating the Project  Message Boxes Are Modal                                                                   147 150 152 152 153 153 155 155  157 158  158 159 159 159 162 163 168 168 170 171 174 175 176  179 180 181 182   CONTENTS  xv  CHAPTER 11      Conclusion  Quiz    Menus  Creating a Main Menu         Show Method  Using the Show Method’s Return Value         Dialog Forms      Creating the Project  Showing the Dialog Form and Returning      Its Result      Accessing Values from the Dialog Form  Modal vs. Modeless            Adding a MenuStrip Control to a Form  Adding Menu Items to the MenuStrip  Enhancing the Menu Items  Adding Functionality to the Menu Items  Disabling Menu Items              Adding a ContextMenuStrip to a Form  Adding Menu Items to the         Creating a Context Menu   ContextMenuStrip     Adding Functionality to  Context Menu Items      Text Editor Project      Creating the Project  Explanation of the Code               Conclusion  Quiz  Toolbars  Creating a Toolbar         Adding a Toolbar to a Form                                                                  182 186 188 188  192 194 194 195 195 197 198 199 200 204 207 208 209 210  211  214 217 217 219 220 220 221 222 222  CHAPTER 12    xvi   Visual Basic 2005 Demystiﬁ ed  Adding Buttons to the Toolbar  Associating Images with Toolbar Buttons      Associating Code with Clicks of Toolbar Buttons  Conclusion  Quiz         PART FIVE  CHAPTER 13   ACCESSING DATA Accessing Text Files  Open and Save File Dialog Boxes         Adding an OpenFileDialog Control   to Your Form      Showing the OpenFileDialog Control  Determining Whether Open or Cancel      Has Been Chosen            Identifying the File to Open  SaveFileDialog Control       Reading from a Text File  StreamReader Class  Reading the Text File into the TextBox  Closing the Text File         Writing to a Text File     StreamWriter Class  Writing from the TextBox to the Text File  Closing the Text File         CHAPTER 14         Conclusion  Quiz  Databases  Installing the Database         Obtaining the Northwind Traders Database  Installing the Northwind Traders Database   Connecting to the Database                                                                     224 227 233 234 234  239 240  240 241  242 243 244 246 246 248 249 250 250 251 252 253 253 255 256 256 256 257   CONTENTS  xvii  CHAPTER 15  Web Applications      Using Server Explorer      Exploring the Database  Exploring the Customers Table         Database Project            What the Project Does  Creating the Form  Importing Data Namespaces  Creating a Connection  Creating a Command    Filling the DataGridView            Conclusion  Quiz         ASP.NET  Internet Information Services               Determining If IIS Is Already Installed  Installing IIS  Start the IIS Admin Service  Starting the Default Website    Your Computer as the Web Server  Virtual and Physical Paths                 Creating a Web Application   URL   ASP.NET Development Server  ASP.NET Application IDE         Creating a Database Web Application      Adding a GridView Control  Locating the Database on the Web Server  Adding Code         Conclusion  Quiz                                                                         260 261 262 264 264 264 266 267 269 271 275 276 277 278 278 279 280 280 282 284 284 285 287 288 290 292 292 295 297 298 298   xviii   Visual Basic 2005 Demystiﬁ ed  Final Exam  Answers to Quizzes and Final Exam  Index          301 307 325   ACKNOWLEDGMENTS  It seems obligatory in acknowledgments for authors to thank their publishers  especially  if they want to write for them again , but I really mean it. This is my fifth book for  McGraw-Hill, and I hope there will be many more. It truly is a pleasure to work with  professionals who are nice people as well as very good at what they do  even when what  they are very good at is keeping accurate track of the deadlines I miss .  I  first  want  to  thank  Wendy  Rinaldi,  who  got  me  started  with  McGraw-Hill  Osborne back in 1998  has it been that long? . Wendy was also my first acquisitions  editor.  She  has  since  received  several  well-deserved  promotions,  but  is  still  my  acquisitions editor. Indeed, this book was launched through a telephone call with  Wendy at the end of a vacation with my wife, Devvie, who, being in earshot and  with  an  are-you-insane  tone  in  her  voice,  asked  incredulously,  “You’re  writing  another book?”  I replied, “Of course not, honey...” She interjected, “That’s a relief!” I then continued, “…I’m writing two books.”  I wrote Visual C 2005 Demystified   concurrently with this book .  I must also thank my acquisitions coordinator, Alexander McDonald, and my  project editor, LeeAnn Pickrell. Both were unfailingly helpful and patient, while  still keeping me on track in this deadline sensitive business  e.g., I’m so sorry you  broke both your arms and legs; you’ll still have the next chapter turned in by this  Friday, right?” .  Bart Reed did the copyediting. He was kind about my obvious failure during my  school days to pay attention to my grammar lessons. He improved what I wrote while  still keeping it in my words  that way if something is wrong it is still my fault .  Ron Petrusha was my technical editor. Ron’s suggestions were quite helpful and   added a lot of value to this book.  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.   xix   xx   Visual Basic 2005 Demystiﬁ ed  There  were  many  other  talented  people  working  behind  the  scenes  who  also  helped get this book out to press, and as in an Academy Award speech, I can’t list  them all. That doesn’t mean I don’t appreciate all their hard work, because I do.  I truly thank my wife, Devvie, who in addition to being my wife, best friend   maybe  my  only  one ,  and  partner   I’m  leaving  out  lover  because  computer  programmers aren’t supposed to be interested in such things , tolerated my incessant  muttering about unreasonable chapter deadlines and merciless editors  sorry, Alex   while excusing myself from what she wanted to do  or wanted me to do . Similarly, I  would like to give thanks to my daughters, Elise and Emily, and my mom, Bea Kent,  for tolerating my absentmindedness while I was preoccupied with unreasonable  chapter deadlines and merciless editors  starting to notice a pattern here? . I also  should thank my family in advance for not having me committed when I talk about  writing my next book.   INTRODUCTION  One  of  my  favorite  movie  lines  was  in  Rocky  III:  Before  their  rematch,  Mr.  T,  playing a boxer called Clubber Lang who had beaten up Rocky badly in their first  fight, said, “Fool, you never should have come back.”  Visual Basic must be saying this to me. A few years ago I wrote a book, Visual Basic  .NET: A Beginner’s Guide, timed to be on the bookshelves for the release of Visual  Basic .NET. Writing such a “day and date” book is added pressure, especially since  Microsoft is famous  or infamous  for last minute changes from their most recent beta. I must have a short memory or be a slow learner. With the next major change in   Visual Basic, Visual Basic 2005, here I go again writing another “day and date” book.  Why Did I Write This Book?  Given my griping about writing another “day and date” book, you may be wondering  why I wrote this book. I assure you that the reason was not because I thought it  would get me riches, fame, or beautiful women. I may be misguided, but I’m not  completely delusional or, in the case of my wife’s reaction to the beautiful women  part, suicidal.  To be sure, there likely will be many introductory-level books on Visual Basic  2005. Nevertheless, I wrote this book because I believe I bring a different and, I  hope, valuable perspective.  As you may know from my author biography, I teach computer science at Los  Angeles Valley College, a community college in the San Fernando Valley area of  Los Angeles, where I grew up and have lived most of my life. I also write computer  programs,  but  teaching  programming  has  provided  me  with  insights  into  how  students learn that I could never obtain from just writing programs. These insights  are gained not just from answering student questions during lectures; I spend hours  each week in our college’s computer lab helping students with their programs and   Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.   xxi   xxii   Visual Basic 2005 Demystiﬁ ed  more hours each week reviewing and grading their assignments. Patterns emerge  regarding  which  teaching  methods  work  and  which  don’t,  the  order  in  which  to  introduce programming topics, the level of difficulty at which to introduce a new  topic, and so on. I joke with my students that they are my beta testers in my never- ending attempt to become a better teacher, but there is much truth in that joke.  Additionally, my beta testers… err, students, seem to complain about the textbook  no matter which book I adopt. Many ask me why I don’t write a book they could  use to learn Visual Basic. They may be saying this to flatter me  I’m not saying it  doesn’t work , or for the more sinister reason that they will then be able to blame  the teacher for a poor book as well as poor instruction. Nevertheless, having written  other books, these questions planted in my mind the idea of writing a book that, in  addition to being sold to the general public, could also be used as a supplement to  a textbook.  Who Should Read This Book  Anyone who will pay for it! Just kidding, though no buyers will be turned away.  It is hardly news that publishers and authors want the largest possible audience  for  their  books. Therefore,  this  section  of  the  introduction  usually  tells  you  this  book  is  for  you—whoever  you  may  be  and  whatever  you  do.  However,  no  programming book is for everyone. For example, if you exclusively create game  programs using Java, this book may not be for you  though being a community  college  teacher  I  may  be  your  next  customer  if  you  create  a  space  beasts  vs.  community college administrators game .  While this book is not for everyone, it may very well be for you. Many people  need or want to learn Visual Basic, either as part of a degree program, job training,  or even as a hobby. Unfortunately many books don’t make learning Visual Basic  any easier, throwing at you a veritable telephone book of complexity and jargon. By  contrast, this book, as its title suggests, is designed to “demystify” Visual Basic.  Therefore, it goes straight to the core concepts and explains them in logical order  and in plain English.  What This Book Covers  I strongly believe that the best way to learn programming is to write programs. The  concepts covered by the chapters are illustrated by programs you can write using  tested and thoroughly explained code. You can run this code yourself, and also use  it as the basis for writing further programs that expand on the covered concepts.   INTRODUCTION  xxiii  The first part of this book is designed to get you up and running with Visual  Basic 2005. Chapter 1 is titled “Getting Started with Your First Windows Program.”  The first step in programming in Visual Basic 2005 is to obtain and install it. This  chapter advises you on how to do that. The chapter then shows you how to create  your first Visual Basic 2005 project and concludes by defining core concepts such  as computer program, programming language, and how your code is translated for  the computer.  Chapter 1 teaches you how to create a working Windows application without  having  to  write  any  code.  However,  you  will  need  to  write  code  for  even  the  simplest  program.  Thus,  Chapter  2  is  about  “Writing Your  First  Code.”  This  chapter  explains  key  programming  concepts,  such  as  classes,  objects,  and  properties,  as  well  as  giving  you  a  tour  of  the  Visual  Basic  2005  Integrated  Development  Environment   IDE .  The  chapter  then  describes  the  event-driven  nature  of  a  Windows  application  and  shows  you  how  to  put  this  theory  into  practice by creating an event procedure.  Chapters 1 and 2 focus on the form, perhaps the most important part of a Windows  application’s  graphical  user  interface,  or  GUI.  However,  a  form  cannot  possibly  meet all the requirements of a Windows application. For example, the form does not  have  the  functionality  to  permit  the  typing  of  text,  listing  of  data,  selecting  of  choices,  and  so  forth.  You  need  other,  specialized  controls  for  that  additional  functionality. Indeed, the form’s primary role is to serve as a host, or container, for  other controls that enrich the GUI of Windows applications, such as menus, toolbars,  buttons,  text  boxes,  and  list  boxes.  Chapter  3,  “Controls,”  explains  how  to  add  controls  to  your  form  and  manipulate  their  properties.  This  chapter  then  uses  a  project to demonstrate how you can use a control’s events in an application.  Now that you are up and running with Visual Basic 2005, the next part of this  book  covers  the  building  blocks  of  your  programs:  variables,  data  types,  and  operators, starting with Chapter 4, “Storing Information—Data Types and Variables.”  Most  computer  programs  store  information,  or  data.  Data  comes  in  different  varieties, such as numeric or text. The type of information, whether numeric, text,  or Boolean, is referred to as the data type and often is stored in a variable, which  not only reserves the amount of memory necessary to store information, but also  provides you with a name by which that information may be retrieved later. Finally,  this chapter covers constants, which are similar to variables, but differ in that their  initial value never changes while the program is running.  As a former professional chess player, I have marveled at the ability of chess  computers to play world champions on even terms. The reason the chess computers  have this ability is because they can calculate far more quickly and accurately than  we  can.  Chapter  5,  “Letting  the  Program  Do  the  Math—Arithmetic  Operators,”  covers  arithmetic  operators,  which  we  use  in  code  to  harness  the  computer’s  calculating ability.   xxiv   Visual Basic 2005 Demystiﬁ ed  Now that we have covered the programming building blocks, we’ll use them in the  next part of this book to control the flow of your program. As programs become more  sophisticated, they often branch in two or more directions based on whether a condition  is true or false. For example, while a calculator program would use the arithmetic  operators  you  learned  about  in  Chapter  5,  your  program  first  needs  to  determine  whether  the  user  chose  addition,  subtraction,  multiplication,  or  division  before  performing the indicated arithmetic operation. Chapter 6, “Making Comparisons— Comparison and Logical Operators,” introduces comparison and logical operators,  which are useful in determining a user’s choice. Chapter 7, “Making Choices—If and  Select Case Control Structures,” introduces the If and Select Case statements, which  are used to direct the path the code will follow based on the user’s choice.  When you were a child, your parents may have told you not to repeat yourself.  However, sometimes your code needs to repeat itself. For example, if an application  user enters invalid data, your code may continue to ask the user whether they want  to retry or quit until the user either enters valid data or quits. Chapter 8, “Repeating  Yourself—Loops  and  Arrays”  introduces  loops,  which  are  used  to  repeat  code  execution until a condition is no longer true. This chapter then discusses arrays.  Unlike the variables we have covered thus far in the book, which may hold only one  value at a time, arrays may hold multiple values at one time. Additionally, arrays  work very well with loops.  This book is several hundred pages long. Imagine how much harder this book  would be to understand if it consisted of only one, very long chapter, rather than  being divided into chapters, with each chapter being divided into sections? Chapter 9,  “Organizing Your Code with Procedures,” shows you how to similarly divide up  your code into separate procedures. This has advantages in addition to making your  code easier to understand. For example, if a method performs a specific task such  as sending output to a printer, which is performed several times in a program, you  only need to write the code necessary to send output to the printer once, and then  you call that method each time you need to perform that task. Otherwise, the code  necessary to send output to the printer would have to be repeated each time that task  had to be performed. Further, if you later have to fix a bug in how you perform that  task, or simply find a better way to perform the task, you have to change the code  in only one place rather than many.  The next part of this book focuses on the graphical user interface  GUI , starting  with Chapter 10, “Helper Forms.” Up until now, our applications have had one form  that serves as the main application window. This one form may be sufficient for a  simple application, but as your applications become more sophisticated, the main  application  form  will  become  unable  to  perform  all  the  tasks  required  by  the  application and need help from other forms. This chapter shows you how to create  and use two helper forms that will be workhorses in your applications: message  boxes  and  dialog  forms.  While  these  helper  forms  are,  well,  helpful,  they  also    INTRODUCTION  xxv  present programming challenges involving communication between the main and  helper form. For example, the main form needs to know which button was clicked  on the helper form so it can execute the appropriate code depending on which button  was clicked. Additionally, since the dialog form contains controls, the main form  needs to know and take actions based on what the application user types, checks, or  selects in the controls in the helper form. This chapter will show you how to solve  these programming challenges.  Through the GUI of the application, users issue commands to an application, such as  to open, save, or close a file, print a document, and so on. Chapter 11, “Menus,” and  Chapter 12, “Toolbars,” cover the three most common GUI elements through which  users  give  commands  to  an  application:  the  menu,  shortcut  or  context  menus,  and  toolbars. Additionally, commands such as cut, copy, and paste are often duplicated in a  menu, a context menu, and a toolbar, providing the user with the convenience of having  three different ways to perform the same command. However, you don’t want to write  the same code three times, so these chapters show you how to connect corresponding  items in menus, context menus, and toolbars so they each execute the same code.  When I was finished writing this book for the evening, I closed Microsoft Word,  and maybe even shut down my computer. Of course, the next evening I did not have  to start over; what I had written the previous evening had been saved. However, up  until now the programs in this book don’t save data so it is available even after the  application exits. The next part of this book shows you how to save data. Chapter  13, “Accessing Text Files,” explains how to write code that reads from and writes to  a text file. This chapter also shows you how to add Open and Save dialog boxes,  such as those used in sophisticated programs like Microsoft Word, so you can open  a text file to read from it and save to a text file to write to it. Chapter 14, “Databases,”  explains how to write programs that access information stored in a database.  Throughout this book we have been writing Windows applications, which to be  sure are used heavily. However, many of us interact ever more frequently with the  subject of Chapter 15, “Web Applications.” This chapter shows you how to create a  Web application that displays information from a database, similar to the Windows  application you’ll create in Chapter 14.  How to Read This Book I have organized this book to be read from beginning to end. While this may seem  patently obvious, my students often express legitimate frustration about books  or  teachers  that, in discussing a programming concept, mention other concepts that  are  covered  several  chapters  later  or,  even  worse,  not  at  all.  Therefore,  I  have  endeavored to present the material in a linear, logical progression. This not only  avoids the frustration of material that is out of order, but also enables you in each  succeeding chapter to build on the skills you learned in the preceding chapters.   xxvi   Visual Basic 2005 Demystiﬁ ed  Special Features Each  chapter  has  detailed  code  listings  so  you  can  put  into  practice  what  you  learned. My overall objective is to get you up to speed quickly, without a lot of dry  theory or unnecessary detail. So let’s get started. It’s easy and fun to write Visual  Basic programs.  Contacting the Author  Hmmm… it depends why. Just kidding. While I always welcome gushing praise  and shameless flattery, comments, suggestions, and yes, even criticism can also be  valuable. The best way to contact me is via email; you can use jkent@genghiskhent  .com  the domain name is based on my students’ fond  ?  nickname for me, Genghis  Khent .  Alternately,  you  can  visit  my  website,  http:  www.genghiskhent.com .  Don’t be thrown off by the entry page; I use this site primarily to support the online  classes and online components of other classes that I teach at the college, but there  will be a link to the section that supports this book.  I hope you enjoy reading this book as much as I enjoyed writing it.   PART ONE  Introduction to  Visual Basic  2005  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.    This page intentionally left blank    CHAPTER  1  Getting Started  with Your First  Windows Program  You probably have seen on television an interviewer ask a victorious athlete for the  secret of their success. Can you imagine the athlete replying that they never trained  but instead just read about their sport a lot? I doubt it. The only way to become a  good swimmer, runner, or weightlifter is to swim, run, or lift weights. Of course,  good coaching helps, but a good swimmer must swim, a good runner must run, and  a good weightlifter must lift weights.  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.   3   4   Visual Basic 2005 Demystiﬁ ed  Although  computer  programming  is  mental  rather  than  physical  exercise,  similarly you cannot become a good computer programmer only by reading about  computer  programming.  Instead,  you  have  to  write  computer  programs—lots  of  them.  Don’t get me wrong, I’m not trying you to discourage you from buying a book,  especially this one! A good book is like a good coach, making your learning more  efficient and less frustrating. However, even with the best book, if you don’t write  computer  programs,  it  will  be  difficult  for  you  to  learn  computer  programming.  Fortunately, it is easy to start writing computer programs; this chapter will show  you how.  Newcomers to programming sometimes shy away from writing programs because  something may go wrong in their program. They may think of a scene in an action  movie where someone has only seconds to defuse a bomb and they have to guess  which  one  of  several  wires  to  cut.  The  consequences  in  those  circumstances  of  making a mistake are life and death.  However, you are not defusing a bomb. You are writing a computer program. If  you  do  make  a  mistake  in  your  program,  neither  you  nor  your  computer  will  disappear in a fireball. You just correct the mistake. Indeed, you learn best from  your mistakes.  Since I have given you this speech on the importance of writing programs, it is  only fair that I help you get started writing programs. The first step is for you to  obtain and install Visual Basic 2005. In this chapter, I first will help you choose the  edition of Visual Basic 2005 that is best for you, and assist you in ensuring that your  computer meets the hardware requirements of Visual Basic 2005. After you install  Visual Basic 2005, I will show you how to use it to create a Windows application.  Finally, you will learn just what a computer program is.  Obtaining and Installing Visual Basic 2005  Visual Basic 2005 comes in several editions. This section will help you choose the  one right for you. However, before you buy any edition of Visual Basic 2005, you  should confirm that the computer on which you will install Visual Basic 2005 meets  the hardware requirements of Visual Basic 2005.  Once  you  have  purchased Visual  Basic  2005  and  verified  that  the  installation  computer meets the hardware requirements, you are ready to install Visual Basic  2005. This section will give you tips on the installation.   CHAPTER 1  Getting Started with Your First Windows Program   5  System Requirements Installing Visual  Basic  2005  requires  not  only  the  right  software,  but  hardware  sufficient to run the software. Therefore, you should first confirm that the computer  on which you are going to install Visual Basic 2005 meets the system requirements,  such as the operating system, processor, RAM, and available hard disk space.  NOTENOTE I will be referring in this chapter to Visual Basic 2005, but my comments  apply whether you are buying Visual Basic 2005 alone or one of the editions  of Visual Studio 2005, as discussed in the next section, “Choosing the Right  Version.”  Here  are  my  recommendations  on  the  key  requirements.  Keep  in  mind  these  system requirements are truly minimum, and therefore Visual Basic 2005 may run  quite slowly if your computer only meets the bare minimum requirements.    Operating system  You must have Windows 2003, XP, or 2000; Windows  NT, 95, 98, or Me will not work. If you have not yet purchased an operating  system and are considering XP, I would recommend the Professional over  the Home Edition, especially if you are developing web applications, which  are discussed in Chapter 15.    Available hard drive space  The requirement varies with the edition  and type of installation and whether other components such as Internet  Explorer  IE  already are installed on your computer. You should  plan on the total installation taking between 2GB and 5GB  gigabytes .  A large  at least 80GB  hard drive is relatively inexpensive and  easy to install, so if remaining space on your existing hard drive  is scarce, you may wish to consider upgrading before installing  Visual Basic 2005.    Processor  According to Microsoft, a processor speed of 600 MHz   megahertz  is the minimum and 1 GHz  gigahertz  is recommended.  Because upgrading a processor by replacing the motherboard is not so  inexpensive or easy, another alternative is boosting your system RAM,  discussed next, if you are on the borderline.    RAM  According to Microsoft, 128MB  megabytes  is the minimum, and  256MB is recommended. I would recommend 512MB, especially if you are  running other programs at the same time.   6   Visual Basic 2005 Demystiﬁ ed  Additionally, Visual Basic 2005, in order to work properly, needs other software  to be on your computer—in particular, Internet Explorer. If you are installing Visual  Basic 2005 at work and your company restricts browsers to Netscape or another  non-IE  browser,  you  should  check  first  with  your  system  administrator  before  attempting to install Visual Basic 2005 there.  Choosing the Right Version You can buy Visual Basic 2005 either by itself or as part of Visual Studio 2005,  which  includes,  in  addition  to  Visual  Basic,  support  for  other  programming  languages such as C++ and C. I recommend Visual Studio 2005 if your budget  allows.  The  additional  cost  usually  is  not  that  substantial  and  you  will  have  a  program  that  works  with  other  commonly  used  languages  if  your  education,  employment, or interests prompt you to work with other programming languages.  This is more likely than you may think. Once you learn one programming language,  learning additional ones becomes much easier because the concepts are essentially  the same. Indeed, most programmers don’t learn just one language.  If you buy Visual Basic 2005 by itself, you have one choice: the Express Edition.  If you instead buy Visual Basic 2005 as part of Visual Studio 2005, you have three  choices: Standard, Professional, and Team System Editions.  If you already have a copy of Visual Basic 2005 through your school or job, any  of these choices should work fine for this course. If you do not already have a copy  of Visual Basic 2005, I recommend that you obtain the Academic version of the  Professional Edition. The Academic version represents a substantial discount for  students and teachers.  Microsoft’s  website  on  Visual  Studio  2005,  http:  lab.msdn.microsoft.com  vs2005  at the time of this writing  Microsoft does reorganize its website from time  to time so this location may change , has a product matrix that lists the differences  between the editions.  Installing Visual Basic 2005 Now you are ready to install Visual Basic 2005! You will find it easy.  The Visual Basic 2005 installation may consist of more than one CD, depending  on the edition. It is a large program, so it takes some time to install. However, Visual  Basic 2005 is not difficult to install. Installation is simply a matter of following  directions and being patient. Patience is important in programming, and so it is with  the installation of Visual Basic 2005.   CHAPTER 1  Getting Started with Your First Windows Program   7  One unusual feature is that the help for Visual Basic 2005 is not built into the  program but instead is a separate program, MSDN Library. MSDN is an acronym  for  Microsoft  Developer  Network.  This  help  also  comes  on  one  or  more  CDs,  depending on the edition.  Starting Your First Visual Basic 2005 Project  Now you’re going to create your first Visual Basic 2005 project. You not only will  use this project for this lesson, but you also will use it as the starting point for the  project in the next lesson.  NOTENOTE The following instructions assume you purchased Visual Studio 2005.  However, the same basic information applies if you purchased Visual Basic 2005  Express Edition, though some of the screenshots may look slightly different.  Starting the Program Although you use Visual Basic 2005 to create programs, it itself is a program. Start  Visual Basic 2005 by choosing All Programs from the Start menu, select the folder  called Microsoft Visual Studio 2005, and then click on the icon of the same name  that appears in the submenu.  When you first start Visual Studio 2005, a form, shown in Figure 1-1, will display,   asking you to choose your default environment settings.  I  chose  the  General  Development  Settings  option,  but  you  can  choose  the  development settings for Visual Basic or one of the other programming languages.  I don’t consider this choice an important issue because the various settings are not  that  different.  I  chose  General  Development  Settings  because  that  setting  is  the  most  generic,  and  would  work  equally  well  if  you  also  programmed  in  another  language supported by Visual Studio 2005 such as Visual C.  The Start Page next will display, as shown in Figure 1-2. Now you are ready to start. So let’s get going!  Specifying the Type of New Project Because we want to create a new project, choose New from the File menu and then  Project from the New submenu to display the New Project dialog box shown in  Figure 1-3.   8   Visual Basic 2005 Demystiﬁ ed  Figure 1-1  Choosing your default environment settings  Figure 1-2  The Start Page   CHAPTER 1  Getting Started with Your First Windows Program   9  Figure 1-3  The New Project dialog box  The left pane of the New Project dialog box lists project types. There are project  types for each of the languages included in Visual Studio 2005. In addition to Visual  Basic, these are Visual C, Visual C++, and Visual J. Because this book is about  Visual Basic 2005, choose Visual Basic.  The right pane of the New Project dialog box lists templates for various types of  Visual Basic applications you can create. A project template helps you get started  by creating the initial files, code, and other settings for the selected project.  There  certainly  are  a  lot  of  templates  to  choose  from. The  ones  starting  with  Windows CE or Pocket PC can be run on handheld computers, and the ones starting  with Smartphone can be run from phones. However, for most of this book, we will  be creating Windows applications, so select Windows Application from the right  pane. I will be discussing in Chapter 2 what a Windows application is. For now,  Microsoft  Word  and  Excel  are  examples  of  Windows  applications.  Each  has  a  window  or  windows  in  which  you  work,  with  a  menu,  toolbar,  and  other  visual  components with which you can interact.  As  shown  in  Figure  1-3,  when  you  choose  the  Windows Application  project  template, the description beneath the Project Types frame becomes “A project for  creating an application with a Windows user interface.”   10   Visual Basic 2005 Demystiﬁ ed  Specifying the Name and Location of the Project The lower part of the New Project dialog box lists the name of and location for your  project. The default project name for your first project is WindowsApplication1.  For the second, the name is WindowsApplication2, and so on. You should change  this default name to one that will help you identify this project later. Otherwise,  after you have created many projects, you may not recall what WindowsApplication52  did as opposed to WindowsApplication53.  The location for your project is up to you; the default location should work fine.  Whatever your decision, I recommend you have a consistent method for where you  store your projects so you can easily find them later.  In Figure 1-4, I have changed the name of the project to FirstProject and the   location of the project to another drive, D, on my computer.  Once you are satisfied with the name and location of the project, click OK. Visual  Studio.NET then generates the files and folders for your first project. A folder with  the same name as the project is also created in the location displayed in the Location   Figure 1-4  Changing the default name of and location for the project   CHAPTER 1  Getting Started with Your First Windows Program   11  field,  which  contains  the  parent  folder  where  your  project  files  will  be  located.  Therefore, because in Figure 1-4 the project will be located in D:\Documents and  Settings\JAK\Visual Studio Projects\Visual Basic, and the name of the project is  FirstProject, a folder named FirstProject will be created at the specified location,  and the project files will be stored at D:\Documents and Settings\JAK\Visual Studio  Projects\Visual Basic\FirstProject.  Integrated Development Environment  IDE  Figure 1-5 shows a view of the Windows application FirstProject that is created  after you click the OK button in the New Project dialog box.  Figure 1-5 displays what is called an Integrated Development Environment, or  IDE. The term “development environment” refers to Visual Studio.NET’s role as an  application to assist you in developing applications. The term “integrated” means  the tools to design your application and write, test, and run your code are all together  under one  software  roof.  Figure 1-5  A new project   12   Visual Basic 2005 Demystiﬁ ed  The IDE is complex, with many windows that perform many different functions.  Don’t  worry;  you  don’t  need  to  know  right  away  what  they  all  do.  Various  components  of  the  IDE  will  be  introduced,  described,  and  explained  in  this  and  succeeding lessons.  Run the Project! We now will use the IDE to run the project. To run this project as an application,  you must build additional files. You do so, naturally enough, from the Build menu,  shown in Figure 1-6. From the Build menu, you choose one of the following four  options:     Build Solution    Rebuild Solution    Build FirstProject    Rebuild FirstProject  As will be explained later in this chapter, “building” means using the compiler to  translate your code into machine language the computer can understand.  NOTENOTE The name following Build in the third choice and Rebuild in the fourth  choice is FirstProject because we changed the name of the project to FirstProject.  If we had kept the default project name of WindowsApplication1, these menu items  instead would be Build WindowsApplication1 and Rebuild WindowsApplication1.  Figure 1-6  The Build menu   CHAPTER 1  Getting Started with Your First Windows Program   13  The  difference  between  the  Build  menu  items  Build  Solution  and  Build  FirstProject is that the first concerns a solution and the second a project. A project  contains  all  the  files  and  links  necessary  for  your  application.  A  solution  may  contain multiple projects. Because the current application is simple and concerns  only one project, there is no practical difference in this instance between the two  menu commands.  The difference between Build and Rebuild is that if you previously have built your  program, Build just builds the changes you made from the previous build, whereas  Rebuild  starts  over  and  rebuilds  the  whole  program.  Rebuild  consequently  takes  longer, so it’s used when there have been extensive changes since the last build.  As a practical matter, there is little difference between the two commands. If you  choose Build and the changes since the last build have been too extensive to avoid  a rebuild, Visual Basic 2005 will perform a rebuild instead. The additional time a  rebuild requires over a build is very minor, especially if you have a fast processor  and ample RAM.  You  now  have  a  working  Windows  program  without  writing  a  single  line  of  code! From the Debug menu, choose either Start or Start Without Debugging. The  result is a window named Form1, shown in Figure 1-7.  The state of your project while it is running is referred to as run time. The state  of your project before you run it, and after it stops running  such as when you click  the close button of the form , is referred to as design time.  You now have created a working computer program. However, just what exactly  is a computer program, and how does a programming language such as Visual Basic  2005 fit in? The next sections answer those questions.  Figure 1-7  A Windows application running   14   Visual Basic 2005 Demystiﬁ ed  What Is a Computer Program?  You probably interact with computer programs many times during an average day.  I certainly do. The other day, I arrived at the community college where I teach and  found that my computer didn’t work, so I called tech support. At the other end of  the telephone line, a computer program forced me to navigate a voicemail menu  maze and then tortured me while I was on perpetual hold with repeated insincere  messages about how important my call was and false promises about how soon I  would get through.  Finally my computer got fixed. To calm down, I decided to take a break and log  on to my now-working computer to launch my favorite game program, in which  community  college  administrators  do  battle  with  hideous  alien  insects  from  the  planet Megazoid. While I was cheering on the insects, the network administrator  caught me goofing off using yet another computer program that monitors employee  computer usage. Fortunately, I was still employed, so an accounts payable program  generated my payroll check.  On my way home I decided I needed some cash and stopped at an ATM, where  a  computer  program  confirmed   hopefully   I  have  enough  money  in  my  bank  account  and  then  instructed  the  machine  to  dispense  the  requested  cash  and   unfortunately  deduct that same amount from my account.  Computers are so widespread in our society because they have three advantages  over us humans. First, computers can store huge amounts of information. Second,  computers can recall that information quickly and accurately. Third, computers can  perform calculations with lightning speed and perfect accuracy.  The advantages that computers have over us even extend to thinking sports such  as chess. I used to be a professional chess player. I have not played seriously for  many years, so am out of practice. However, I still was surprised that the chess  program on my little Pocket PC handheld computer defeated me with ease. Even  worse, the program, Pocket Fritz, taunted me in a German accent: “Dumpkopf, you  have blundered again. You will now be liquidated!” My one victory was finding the  mute button to silence this insolent program.  At least I have good company in defeat. In 1997, the computer Deep Blue beat  the world chess champion, Garry Kasparov, in a chess match. In 2003, Kasparov  was  out  for  revenge  against  another  computer,  Deep  Junior,  but  only  drew  the  match.  Kasparov,  while  perhaps  the  best  chess  player  ever,  is  only  human,  and  therefore no match for the computer’s ability to calculate and to remember prior  games.  However, we have one very significant advantage over computers. We think on  our own, whereas computers don’t—at least not yet, anyway. Indeed, computers  fundamentally  are  far  more  brawn  than  brain.  A  computer  cannot  do  anything    CHAPTER 1  Getting Started with Your First Windows Program   15  without step-by-step instructions from us telling it what to do. These instructions  are called a computer program and of course are written by a human—namely, a  computer  programmer.  Computer  programs  enable  us  to  harness  the  computer’s  tremendous power.  What Is a Programming Language? When you enter a darkened room and want to see what is inside, you turn on a light  switch. When you leave the room, you turn the light switch off.  The first computers were not too different from that light switch. These early  computers consisted of wires and switches in which the electrical current followed  a path dependent on which switches were in the on  one  or off  zero  position.  Indeed, I built such a simple computer when I was a kid  which according to my  kids was when dinosaurs still ruled the earth .  Each switch’s position could be expressed as a number: 1 for the on position, 0  for the off position. Thus, the instructions given to these first computers, in the form  of positions on switches, essentially were a series of ones and zeroes.  Today’s computers of course are far more powerful and sophisticated than these  early  computers.  However,  the  language  computers  understand,  called  machine  language, remains the same, essentially ones and zeroes.  Although computers think in ones and zeroes, the humans who write computer  programs usually don’t. Additionally, a complex program may consist of thousands  or  even  millions  of  step-by-step  machine  language  instructions,  which  would  require  an  inordinately  long  amount  of  time  to  write.  This  is  an  important  consideration because, due to competitive market forces, the amount of time within  which a program has to be written is becoming increasingly less and less.  Fortunately,  we  do  not  have  to  write  instructions  to  computers  in  machine  language.  Instead,  we  can  write  instructions  in  a  “higher-level”  programming  language, such as Visual Basic 2005. The term “higher level” means that Visual  Basic 2005  and other languages such as C, C++, Java, and so on  are far closer to  the structure and syntax of human language than to the ones and zeroes understood  by a computer. By contrast, machine language, although a programming language,  is “low level” because it is far closer to the ones and zeroes understood by a computer  than it is to the structure and syntax of human language. Additionally, code can be  written much faster with programming languages than machine language because  programming  language  instruction can cover many machine language instructions.  instructions;  one  programming   languages  abstract   Visual  Basic  is  but  one  of  many  programming  languages.  Other  popular  programming  languages  include  Java,  C,  and  C++,  and  there  are  many  more.  Indeed, new languages are being created all the time. However, all programming    16   Visual Basic 2005 Demystiﬁ ed  languages  have  essentially  the  same  purpose,  which  is  to  enable  a  human  programmer to give instructions to a computer.  There  really  is  no  one  “best”  programming  language,  but Visual  Basic  is  an  excellent choice, as for years it has been and continues to be widely used in the  industry.  You may be wondering how this discussion of programming language applies  since you didn’t have to write any code to achieve a working application. Although  you didn’t have to write any code, that doesn’t mean code wasn’t written. Remember  when  you  chose  the  project  template? Visual  Basic  2005  wrote  code  for  you  to  create a basic Windows application.  Translating the Code for the Computer Although you will understand the Visual Basic code you will write, the computer  won’t.  Computers  don’t  understand  Visual  Basic  or  any  other  programming  language. They understand only machine language.  Visual Basic 2005 includes a compiler. In general, a compiler translates the code  you  write  into  corresponding  machine  language  instructions. There  are  different  compilers for different programming languages, but the purpose of the compiler is  essentially  the  same,  the  translation  of  a  programming  language  into  machine  language, no matter which programming language is involved.  NOTENOTE As discussed in more detail in Chapter 2, the compiler in Visual Basic  2005 translates the code into an intermediate language that then is translated  into machine language.  A compiler translates the code you write into corresponding machine language  instructions, or into instructions that an operating system can understand and act  on. However, the compiler can perform this translation only if your code is in the  proper  syntax  for  that  programming  language.  Visual  Basic  2005,  like  other  programming  languages,  and  indeed  most  human  languages,  has  rules  for  the  spelling of words and for the grammar of statements. If there is a syntax error, the  compiler cannot translate your code into machine language instructions, and instead  will call your attention to the syntax errors. Thus, in a sense, the compiler acts as a  spell checker and grammar checker.   CHAPTER 1  Getting Started with Your First Windows Program   17  Conclusion  The  way  to  become  a  good  computer  programmer  is  to  write  programs.  To  get  started, you need to obtain and install Visual Basic 2005. In this chapter, you learned  about  the  different  editions  of Visual  Basic  2005  that  are  available,  and  how  to  ensure that your computer meets the hardware requirements of Visual Basic 2005.  After you installed Visual Basic 2005, you learned how to use Visual Basic 2005 to  create a Windows application.  This chapter then discussed what a computer program is. Computers can store  huge amounts of information, recall that information quickly and accurately, and  perform calculations with lightning speed and perfect accuracy. However, computers  cannot think on their own; they need step-by-step instructions from us telling them  what to do. These instructions are called a computer program, written by a human  computer programmer in a programming language such as Visual Basic 2005. A  compiler translates the computer program into machine language that a computer  understands.  The  computer  program  in  this  chapter  simply  displayed  an  empty  form,  or  window. In the next chapter, you will examine that form further. In the process, you  will learn what a Windows application is and then write your first code!  Quiz    1.  What is the difference between Visual Basic 2005 and Visual Studio 2005?   2.  Which operating system do you need to install and run Visual Basic 2005?   3.  Which project template should you use to start creating a Windows application?   4.  What is an IDE?   5.  What is a computer program?   6.  What is a programming language?   7.  What is machine language?   8.  What does “higher level” mean in the context of a programming language?   9.  What does “lower level” mean in the context of a programming language?   10.  What is the purpose of a compiler?   This page intentionally left blank    CHAPTER  2  Writing Your  First Code  When I was an elementary school student  back when dinosaurs roamed the earth,  as far as my daughters are concerned , I learned through countless teacher-imposed  exercises to multiply and divide several-digit numbers in my mind. Fast-forwarding  more decades than I care to count, when I ask my daughters to compute the answers  to less complex math homework problems, they whip out their calculators and tell  me the answers—quite quickly and accurately, to be sure. When I then ask them  instead to calculate the answers in their heads, they look at me as a prehistoric relic  and tell me, “Aw, Dad, no one does that anymore.”  Calculators do make our lives easier. Imagine the long line at your local fast food  outlet  if  orders  had  to  be  calculated  by  pencil  and  paper  rather  than  with  the  calculators built into cash registers. In business, software programs such as Microsoft  Excel enable you to perform spreadsheet calculations in minutes that might take  you hours with pencil and paper.  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.   19   20   Visual Basic 2005 Demystiﬁ ed  Calculators also have a negative side effect, however. Human nature being what  it is, if we don’t need to learn something, we may decide it is not worth the time and  trouble.  Research  suggests  that  the  availability  of  calculators  has  contributed  substantially  to  a  decline  in  students’  computational  skills.  Despite  calculators,  computational skills still are necessary, not just in everyday situations in which a  calculator may not be available, but also as a foundation for students to develop  skills in creating algorithms and analyzing problems—skills essential in, among  other areas, computer programming.  Just  as  calculators  automate  computation,  Visual  Basic  2005  automates  the  creation  of  applications.  For  example,  creating  a  Windows  application  strictly  through  code  is  difficult.  By  contrast,  Chapter  1  shows  that  Visual  Basic  2005  enables you to create a Windows application without writing a single line of code!  Granted, the resulting Windows application was basic, being no more than a window  with  default  functionality.  Nevertheless,  even  creating  such  a  basic  Windows  application strictly through code would be no small undertaking.  There is a danger of Visual Basic 2005 doing too much for beginning programmers.  They may be seduced by how easy Visual Basic 2005 makes creating a Windows  application.  Consequently,  they  may  just  plunge  in  and  start  writing  programs  without really understanding the code they are writing or how the different parts of  the program fit together. I have witnessed this with programming students working  with prior versions of Visual Basic. They try to write more complex programs, are  unable to do so because they don’t understand the necessary foundation, become  frustrated, and quit.  Therefore, to make a long story short  “Too late,” as my daughters would say ,  this chapter will explain what an event-driven Windows application is all about,  including how and why the code you write executes when the user takes an action  such as a mouse click. But don’t worry, this chapter is not all theory. You also will  put in practice what you have learned as well as write your first code!  Starting an Existing Project  Since you learn programming best by writing programs, start Visual Basic 2005. In  Chapter 1 you created a new Windows application project. In this chapter, we will  use that existing project instead of creating a new one. Of course, we could create a  new project, but you already learned in Chapter 1 how to do that. By instead using  an existing project, you will learn something new.   CHAPTER 2  Writing Your First Code   21  Figure 2-1  Opening an existing project  To open an existing project, choose Open from the File menu and then Project  Solution from the Open submenu, as shown in Figure 2-1. This will display the  Open Project dialog box shown in Figure 2-2.  Figure 2-2  The Open Project dialog box   22   Visual Basic 2005 Demystiﬁ ed  Using  the  Look  In  drop-down  box,  navigate  to  the  folder  where  you  saved  FirstProject when you created it in Chapter 1. You then will see a file with an .sln  extension,  named  FirstProject.sln  in  Figure  2-2.  The  .sln  extension  indicates  a  solution file. As explained in Chapter 1, a solution contains one or more projects   here, just one  used for your application.  Choose the .sln file and click the Open button in the Open Project dialog box.  The Open Project dialog box will close and your FirstProject then should open,  appearing as it did when you first created it in Chapter 1.  One of the windows in the project is called Solution Explorer, shown in Figure  2-3. If you don’t see it, you can display it by choosing Solution Explorer from the  View menu, as shown in Figure 2-4.  We will use Solution Explorer and the View menu to further examine features of   this project.  Design View and Code View You learned in Chapter 1 that the state of your program when it is running is referred  to as run time, whereas the state of your program when it is not running is referred  to as design time. In this section, we will be working in design time.  Figure 2-3  Solution Explorer   CHAPTER 2  Writing Your First Code   23  Figure 2-4  The View menu  You can view your application in two different ways during design time: designer  view and code view. You choose designer view when you want to design your form,  such as by resizing it or by adding to it controls such as buttons, labels and text  boxes. You choose code view when you want to view or write the code of your  application.  You implement designer view by first selecting form1.vb  the name of your form  file   in  Solution  Explorer  and  then  choosing  Design  from  the  View  menu.  An  alternative is to right-click the form and choose View Designer from the shortcut  menu. Either way, you will see the form, as in Figure 2-5.  You implement code view by first selecting form1.vb in Solution Explorer and  then  by  choosing  Code  from  the View  menu. An  alternative  is  to  right-click  the  form and choose View Code from the shortcut menu. Either way, you will see code,  as in Figure 2-6.  We will be working in both the designer and code views in this chapter.   24   Visual Basic 2005 Demystiﬁ ed  Figure 2-5  Form in designer view  Figure 2-6  Code view   CHAPTER 2  Writing Your First Code   25  Object Browser While  in  designer  view,  display  the  Object  Browser,  either  by  choosing  Object  Browser from the View menu or by using the shortcut key F2. The Object Browser  should appear as in Figure 2-7.  Click the expander  plus sign  next to FirstProject and then highlight Form1. The   Object Browser then should appear as in Figure 2-8.  The Object Browser, as its name suggests, permits you to browse, or examine,  objects in your project, including the form. As Figure 2-8 shows, the lower-right  pane of the Object Browser refers to “Public Class Form1.” The same reference to  Public Class Form1 is on the top line of the code shown in Figure 2-6. Additionally,  the  lower-right  pane  of  the  Object  Browser  indicates  that  Public  Class  Form1  “inherits” from System.Windows.Forms.Form.  Figure 2-7  Object Browser   26   Visual Basic 2005 Demystiﬁ ed  Figure 2-8  Object Browser showing information on Form1  What this terminology means is important in understanding how your first project  and your future Windows application projects work. Therefore, let’s now discuss  this terminology.  Classes and Objects  Most programs keep track of information that relates to persons, places, or things in  the real world. Such information often is complex, consisting of numerous items.  For example, each of my readers is a person, and as such share certain characteristics  common to all persons, such as a name, height, weight, gender, age, and so forth.  Programming  languages,  including  Visual  Basic,  use  classes  to  represent  a  person, place, thing, or concept. Thus, in programming parlance, each of us is an  object of the Person class. A class is a pattern or template for an object, and an  object is an instance of a class.   CHAPTER 2  Writing Your First Code   27  To illustrate, if my classroom contains 29 students and me as the teacher, there  would be 30 objects of the Person class. Once again, each person’s name, height,  weight, gender, and age may differ from another’s, but each of us in the room, being  an object of the same class, Person, has certain common characteristics, such as a  name, height, weight, gender, and age. The value of these characteristics likely will  vary—two persons likely will have different names and heights, for example—but  the two persons will share the characteristics themselves of having a name, a height,  and so forth.  As another example, the form in our first project originated from the Form class.  The  Form  class  represents,  not  surprisingly,  a  form.  A  form  has  a  number  of  characteristics, such as height, width, background color, text on its title bar, and so  forth. Although all forms have these characteristics in common, the values of these  characteristics may differ from form to form. Just as persons in a room may look  different,  so  can  forms.  Some  forms  may  be  short  and  wide  and  have  a  blue  background,  and  others  may  be  tall  and  thin  and  have  a  yellow  background.  However,  each  of  these  different-looking  form  objects  is  created  from  the  same  Form class.  Inherits The actual name of the class of the form in our application is not Form, but Form1.  The Form1 class inherits, or starts out with, all the characteristics of the Form class.  However, we can customize the Form1 class, even adding characteristics. We won’t  do that now, but we could.  Namespaces As the lower-right pane of the Object Browser in Figure 2-8 indicates, the actual  name of the Form class is System.Windows.Forms.Form. This means that the Form  class is part of the System.Windows.Forms namespace.  To explain a namespace, let’s make an analogy to the taxonomy of life you may  have learned about in a biology class. All life is organized into separate kingdoms,  the most commonly known being Animalia for animals and Plantae for plants. The  animal  kingdom  is  organized  into  several  phylums,  including  Chordata  for  vertebrates.  The  vertebrates  in  the  Chordata  phylum  are  organized  into  several  kingdoms,  including  Mammalia  for  mammals.  The  mammals  in  the  Mammalia  kingdom belong to different orders, including Primates for primates. Primates are  subdivided into different families, including Hominidae, which in turn are subdivided  into different genera, including Homo, which finally are subdivided into species,  including Homo sapiens. Thus, while in biology humans generally are referred to    28   Visual Basic 2005 Demystiﬁ ed  just  by  their  species  name,  Homo  sapiens,  that  species  belongs  to  the Animalia  .Chordata.Mammalia.Hominidae.Homo namespace.  Similarly, the Form class is part of the System.Windows.Forms namespace. The   “Windows” in the namespace name stands for Windows applications.  One purpose of using namespaces is to organize code in a hierarchal manner.  Another purpose is the ability to use the same class name, but in another namespace.  For  example,  there  is  another  Form  class  in  the  System.Web.UI.MobileControls  namespace.  This  namespace  is  used  for  forms  in  web  applications  accessed  by  mobile  devices,  such  as  Pocket  PCs.  By  contrast,  the  Form  class  in  the  System  .Windows.Forms namespace is used for Windows applications that run from desktop  or laptop computers. Both classes have the same name, Form, but may do so because  each belongs to a different namespace.  .NET Framework The Form class and the System.Windows.Forms namespace are defined in the .NET  Framework. You will see references to the .NET Framework and .NET throughout  this book, so this would be a good time to briefly explain what these terms mean.  .NET is the name for Microsoft’s strategy of software that is independent of a  particular operating system or hardware. With respect to hardware, .NET projects  are not limited to the traditional desktop computer. Instead, as you may recall from  Chapter 1, the available templates for a Visual Basic project include ones that can  be run on handheld computers or phones. Visual Studio is a tool for the development  of .NET applications.  The .NET Framework consists of the Common Language Runtime  CLR  and  Class Libraries. As discussed in Chapter 1, a compiler translates the code you write  into machine language instructions that an operating system can understand and act  on. To make a long story short, the CLR acts as a middleman between the compiler  and the ultimate machine language instructions, translating intermediate language  created by the compiler into the instructions. The Class Libraries include the Form  class and the System.Windows.Forms namespace, as well as many other classes  that we will be using in this book.  Properties  A class generally has properties. For example, the Form class has properties such as  Height for its height, BackColor for its background color, and Text for text on its  title  bar.  Therefore,  objects  created  from  the  Form  class  have  these  properties.    CHAPTER 2  Writing Your First Code   29  Similarly, objects created by classes that inherit from the Form class, such as the  Form1 class, also have these properties.  Different classes may have some properties in common. For example, the Form  class has a Height property, as would a Person class. However, often one class will  have  a  property  another  does  not.  For  example,  a  Person  class  may  have  an  EyeColor property, which the Form class does not have, whereas the Form class has  a  MinimizeBox  property   pertaining  to  the  minimize  button  at  the  upper  right ,  which a Person class would not have. At least I have never seen a person with a  minimize button!  Properties Window While in designer view, choose Properties Window from the View menu. This will  display the Properties window, as shown in Figure 2-9.  Figure 2-9  The Properties window   30   Visual Basic 2005 Demystiﬁ ed  The Properties window lists various attributes or characteristics of the form, such  as its height and width, background color, the text that appears in its title bar, and  so forth. These attributes or characteristics, also referred to as properties, are listed  in the left column. The values of these properties are listed in the right column. For  example, in Figure 2-9, the value of the Text property is Form1, which is the text  that appears in the title bar of the form in Figure 2-5.  The first button sorts the properties by category. This is the view in Figure 2-9.  The  second  button  sorts  the  properties  in  alphabetical  order. This  is  the  view  in  Figure 2-10. Don’t worry about the other three buttons for now.  Many of the properties in Figures 2-9 and 2-10 have values. You did not assign  those values to those properties. Rather, the IDE assigned those values because the  form  needs  some  background  color,  size,  and  so  forth  when  you  first  create  the  application. These IDE-assigned values are referred to as default values. “Default”  in this context refers to a property’s value if you do nothing to change that value.  However, as the next section discusses, you may change default values.  Figure 2-10  Properties listed in alphabetical order   CHAPTER 2  Writing Your First Code   31  Changing Properties at Design Time You can use the Properties window to view the properties of the form object in  your first project. You also can use the Properties window to change the value of  properties  of  that  form  object  at  design  time.  For  example,  in  the  Properties  window, change the value of the Text property to MyForm or some other name,  and then press  ENTER. The text in the form’s title bar will change to MyForm or  whatever other text you typed.  However, you cannot use the Properties window to change the value of properties  of the form object at run time. Instead, you need to write code to change the value  of properties of the form object at run time. You will learn in this chapter how to do  that. However, before we get there, let’s first discuss what a Windows application  is, because the answer will help you understand the code you will be writing.  What Is a Windows Application?  Nowadays the majority of applications are written for at least one if not more of the  Windows operating systems, which include Windows 9x, NT, 2000, XP, and 2003.  Figure 2-11 shows a familiar Windows application, Notepad, which is included by  default in the installation of all Windows operating systems.  Figure 2-11  Notepad, a Windows application   32   Visual Basic 2005 Demystiﬁ ed  Although the Windows operating system has virtually taken over the computer  world, it has not been with us that long. Windows was not introduced until 1985,  more than 20 years after the introduction of BASIC, the ancestor of Visual Basic,  and did not catch on until the introduction of Windows 3.0 in the early 1990s. Prior  to the 1990s, applications often ran in the DOS operating system. Figure 2-12 shows  a DOS text editor, the DOS equivalent of Notepad in the Windows operating system.  A comparison of the DOS text editor in Figure 2-12 and Notepad in Figure 2-11  shows that DOS applications have a decidedly different and less rich appearance  than Windows applications.  The difference between DOS and Windows applications is more than skin deep.   They also behave very differently. Let’s now look at both differences.  Windows Applications Are Gooey The hallmark of a Windows application is that the application is displayed in … you  guessed  it,  a  window.  However,  there  is  more  to  a  Windows  application  than  a  window. A Windows application has a graphical user interface, which is often is  referred to by the acronym GUI, pronounced “gooey.”  A GUI usually includes a menu, such as the File, Edit, Format, View, and Help  menus in Notepad  refer to Figure 2-11 . The DOS text editor in Figure 2-12 also  includes a menu. However, a GUI is not limited to a menu, and normally includes  other visual components, such as buttons to click, edit boxes in which to type text,  and so on. DOS applications have few of these other visual components.  Figure 2-12  A console window for a DOS application   CHAPTER 2  Writing Your First Code   33  Figure 2-13  The Open dialog box in Notepad  The GUI makes Windows applications prettier than console applications, but it serves  a more important purpose, which is to make Windows applications easier to use. For  example, the menu in Notepad makes it easy for you to open a file. Clicking the File  menu and then the Open submenu displays another visual component, the Open dialog  box  shown in Figure 2-13 , from which you simply pick the file you want to open.  Figure 2-14 shows the Open dialog box in the DOS text editor. This Open dialog   box is far clumsier to use than the Windows counterpart in Figure 2-13.  Figure 2-14  The Open dialog box in the DOS text editor   216   Visual Basic 2005 Demystiﬁ ed  AddHandler  The first alternative is to use the AddHandler keyword. This keyword associates an  event of a control to an event procedure that follows yet another keyword, AddressOf.  The following code assumes the context menu item is named cmnuEditSelectAll  and the corresponding main menu item is named mnuEditSelectAll: AddHandler cmnuEditSelectAll.Click, _    AddressOf Me.mnuEditSelectAll_Click  This code designates the Click event procedure of mnuEditSelectAll as handling  the  Click  event  of  cmnEditSelectAll. This  code  logically  could  be  placed  in  the  Load event of the form.  AddHandler is used when you may not know at design time the precise event  handler that will be used at run time because, for example, the choice will depend  on user actions. One of the following two alternatives should be used instead if the  event  handler  is  known  at  design  time  because  AddHandler  has  a  greater  performance cost.  Handles Clause  The second alternative is to expand the Handles clause of the Click event procedure  of the main menu item  here, mnuEditSelectAll . This event procedure already has  the clause Handles mnuEditSelectAll.Click. You add cmnuEditSelectAll.Click to  the Handles clause, using a comma to separate it from mnuEditSelectAll.Click, as  shown here: Private Sub mnuEditSelectAll_Click _     ByVal sender As Object, _ ByVal e As System.EventArgs  _ Handles mnuEditSelectAll.Click, cmnuEditSelectAll.Click    txtEdit.SelectAll   End Sub  Calling Another Event Procedure  The third alternative is to call the Click event procedure of the main menu item  from the Click event procedure of the context menu item: Private Sub cmnuEditSelectAll_Click _     ByVal sender As System.Object, _    ByVal e As System.EventArgs  _    Handles cmnuEditSelectAll.Click    mnuEditSelectAll_Click sender, e  End Sub   CHAPTER 11  Menus   217  NOTENOTE You must pass the arguments sender and e to the mnuEditSelectAll_Click  call because the Click event procedure of that main menu item expects those  arguments.  Text Editor Project  This project is a text editor. The application user can type and use the main menu or  the context menu to cut, copy, and paste. Figure 11-18 shows the Text Editor project  at run time with the context menu displayed.  Creating the Project You can create the Text Editor project with the following steps:    1.  Create a new Windows application.   2.  Add a TextBox control to the form from the Toolbox. Name it txtEdit, set  its Multiline property to True, and delete any text in its Text property. You  also should resize the control so it is large enough to show multiple lines  of text.    3.  Add a MenuStrip component to the form from the Toolbox.   4.  Using the Menu Designer, add a menu whose top-level menu item is Edit  and subsidiary menu items are Cut, Copy, and Paste. Name the Edit menu  item mnuEdit, the Cut menu item mnuEditCut, the Copy menu item  mnuEditCopy, and the Paste menu item mnuEditPaste.    5.  Using the Properties window, set the MainMenuStrip property of the form   to the name of your MenuStrip component.  Figure 11-18  Text Editor project at run time   218   Visual Basic 2005 Demystiﬁ ed    6.  Add a ContextMenuStrip component to the form from the Toolbox.   7.  Using the Properties window, set the ContextMenuStrip property of the   text box to the name of your ContextMenuStrip component. Also set  the ShowImageMargin property of the ContextMenuStrip control to  False so the context menu will not have a left-hand margin.    8.  Copy the Cut, Copy, and Paste menu items from the MenuStrip to   the ContextMenuStrip. Name these menu items in the context menu  cmnuEditCut, cmnuEditCopy, and cmnuEditPaste, respectively.    9.  In the Code editor, create a Click event procedure for the Edit  Cut menu   item  mnuEditCut  and write the following code in it: Private Sub mnuEditCut_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles mnuEditCut.Click    txtEdit.Cut   End Sub    10.  In the Code editor, create a Load event procedure for the form and write the   following code in it: AddHandler cmnuEditCut.Click, _    AddressOf Me.mnuEditCut_Click    11.  In the Code editor, create a Click event procedure for the Edit  Copy menu   item  mnuEditCopy  and write the following code in it: Private Sub mnuEditCopy_Click ByVal sender As Object, _ ByVal e As System.EventArgs  _ Handles mnuEditCopy.Click, cmnuEditCopy.Click    txtEdit.Copy   End Sub    12.  In the Code editor, create a Click event procedure for the Edit  Paste menu   item  mnuEditPaste  and write the following code in it: Private Sub mnuEditPaste_Click ByVal sender As Object, _ ByVal e As System.EventArgs  Handles mnuEditPaste.Click    txtEdit.Paste   End Sub    13.  In the Code editor, create a Click event procedure for the Edit  Paste  context menu item  cmnuEditPaste  and write the following code in it: Private Sub cmnuEditPaste_Click ByVal sender As Object, _ ByVal e As System.EventArgs  Handles cmnuEditPaste.Click    mnuEditPaste_Click sender, e  End Sub   CHAPTER 11  Menus   219  Explanation of the Code The TextBox  class  has  Cut,  Copy,  and  Paste  methods. These  methods  work  the  same as the Cut, Copy, and Paste menu items of the Edit menu in Microsoft Word  and other Windows applications. The Cut method copies the selected text to the  clipboard, but removes the selected text from the text box. The Copy method also  copies the selected text to the clipboard, but does not remove the selected text from  the  text  box. The  Paste  method  copies  the  text  in  the  clipboard  to  the  text  box,  beginning with the cursor location in the text box.  The Cut, Copy, and Paste methods of the TextBox class are called in the Click  event procedures of the corresponding Edit menu items: Edit  Cut  mnuEditCut ,  Edit  Copy  mnuEditCopy , and Edit  Paste  mnuEditPaste .  The Cut, Copy, and Paste methods of the TextBox class also could be called in  the  Click  event  procedures  of  the  corresponding  context  menu  items:  Cut   cmnuEditCut , Copy  cmnuEditCopy , and Paste  cmnuEditPaste . However, this  would  be  a  duplication  of  code.  Here,  the  duplication  is  short,  but  in  other  circumstances it may not be. Therefore, it is useful instead to have each context  menu item’s functionality handled by the corresponding Edit main menu item.  The earlier section “Adding Functionality to ContextMenuStrip Menu Items”  discussed three different alternatives for having a context menu item’s functionality  handled by the corresponding main menu item. To illustrate the use of all three  alternatives, the AddHandler alternative is used for the Cut context menu item, the  Handles alternative is used for the Copy context menu item, and the alternative of  calling another event procedure is used for the Paste context menu item.  NOTENOTE AddHandler is used here just for illustration. As mentioned already,  because of its greater performance cost, you should use it only when you may  not know at design time the precise event handler that will be used at run time   for example, because the choice will depend on user actions . Here, the correct  event handler is known at design time.  Run the application. Type some text in the text editor, select some text, and then   cut, copy, and paste using the main menu and the context menu.  This text editor certainly is not ready for the commercial market. The Cut, Copy,  and Paste items need to be disabled at the appropriate times. Additionally, further  commands are needed, such as Undo, Select All, and so on. Nevertheless, the Text  Editor project is useful in demonstrating how to link corresponding items on a main  menu  and  a  context  menu,  as  well  as  showing  some  methods  of  the  TextBox  control.   220   Conclusion  Visual Basic 2005 Demystiﬁ ed  Application users need to give commands to the application, such as to open, save,  or close a file, print a document, cut, copy, or paste text, and so on. Application  users give such commands through the GUI of the application. Two of the most  common  GUI  elements  through  which  application  users  give  commands  to  an  application are the main menu and the context or shortcut menu. In this chapter, you  learned how to create them and to handle and link their events.  There  is  another  common  GUI  element  through  which  application  users  also  give commands to an application—toolbars. In the next chapter, you will learn how  to create toolbars and coordinate them with your menus.  Quiz    1.  What class represents a main menu?   2.  What class represents each item on a main menu?   3.  What is an access key?   4.  Is the Click event raised for all menu items?   5.  How do you gray out a menu item so it is not available when it should     6.  What does the Items collection of the MenuStrip component contain?   7.  What class represents the shortcut or context menu?   8.  What class represents each item on a context menu?   9.  What does the Items collection of the ContextMenuStrip component   not be?  contain?    10.  What are different alternatives for having a context menu item’s   functionality handled by the corresponding main menu item?   CHAPTER  12  Toolbars  This chapter is all about bars, but not the kind that inspired the song “Looking for  Love in All the Wrong Places.” In this chapter, we’ll explore a kind of bar that will  enable you to enhance your application both visually and functionally.  The toolbar is a part of every Windows programmer’s life. You would be hard- pressed to find a Windows application that doesn’t have a toolbar. Indeed, most  Windows applications have several of them.  The functionality of a toolbar button generally duplicates the functionality of a  menu  item.  For  example,  the  toolbar  button  with  the  printer  icon  duplicates  the  functionality of the File  Print menu item.  There are two good reasons for using a toolbar even though it may duplicate the  functionality of a menu. First, the buttons on the toolbar are immediately accessible.  By contrast, the items on the menus may be nested several levels deep and can be  accessed  only  by  multiple  mouse  clicks  or  keystrokes.  Second,  a  toolbar  button  usually has an image, whereas a menu item usually is text. Quite simply, visual  items are more attractive and apparent to the application’s user than text items. This  is Visual Basic, after all!  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.   221   222   Visual Basic 2005 Demystiﬁ ed  This chapter will show you, through enhancing the Text Editor project you  created  in  Chapter  11,  how  to  create  toolbars  for  your  forms,  add  buttons  to  them, and add images to the buttons. You also will learn how to associate the  clicking of a particular toolbar button with the clicking of a corresponding menu  item.  Creating a Toolbar  Just  as  the  main  menu  is  represented  by  the  MenuStrip  class,  the  toolbar  is  represented  by  the  ToolStrip  class.  A  ToolStrip  object  contains  a  collection  of  buttons or other types of controls.  Creating a toolbar is a two-step process: First, you add a ToolStrip object to your   form. Second, you add buttons or other controls to the toolbar.  Adding a Toolbar to a Form You add a ToolStrip object to a form using the following steps, similar to adding a  MenuStrip object to a form. Try the following steps to add a ToolStrip to the Text  Editor project that you created in Chapter 11:    1.  Open the Text Editor project.   2.  Open the form in designer view.   3.  Double-click the ToolStrip component in the Toolbox to add it to the   form. Figure 12-1 shows the ToolStrip component after it has been added  to the form.  As  Figure  12-1  shows,  the  ToolStrip  control,  like  the  MenuStrip  and  ContextMenuStrip components, appears in the component tray. The ToolStrip control  also appears as a large gray area under the menu area. This is where the toolbar will  be located.  Figure 12-2 shows that, when the ToolStrip control has focus or you click the  four vertical dots on the left side of the ToolStrip control, a drop-down box appears  on  the  left  side  of  the  ToolStrip  control,  and  what  is  called  a  smart  task  arrow appears on the right side of the ToolStrip control.  The ToolStrip control is automatically associated with the form. This is unlike  the ContextMenuStrip component, which is not associated with the form without  you first setting the ContextMenuStrip property of the form.   CHAPTER 12  Toolbars   223  Figure 12-1  ToolStrip component added to the form  Figure 12-2  ToolStrip with drop-down box and smart task arrow   224   Visual Basic 2005 Demystiﬁ ed  NOTENOTE The toolbar we just added has the default name of ToolStrip1. You don’t  need to change this name because this project uses only one toolbar. However, if  your application uses more than one toolbar, as many applications do, then you  should choose logical names to differentiate among the different toolbars.  Adding Buttons to the Toolbar The  Button  control,  represented  by  the  ToolStripButton  class,  is  the  most  common type of control on a toolbar, and therefore it’s the control covered in  this section. However, toolbars may contain other types of controls. For example,  in Microsoft Word, the formatting toolbar contains drop-down boxes for the type  and size of fonts.  There are several different alternative methods by which you can add buttons and  other controls to the toolbar. One alternative is the Items Collection Editor, which  we used in Chapter 11 to add items to the main menu. Figure 12-3 shows the Items  Collection Editor for the toolbar.  Figure 12-3   Items Collection Editor for the toolbar   CHAPTER 12  Toolbars   225  You can display the Items Collection Editor by displaying the Properties window  for the toolbar and then clicking the ellipsis  …  next to the Items collection property  shown here:  You also can display the Items Collection Editor by first clicking the smart task  arrow at the rightmost edge of the toolbar. This displays the ToolStrip Tasks pane  shown next. Clicking Edit Items… at the bottom of this pane displays the Items  Collection Editor.   226   Visual Basic 2005 Demystiﬁ ed  Once you display the Items Collection Editor, you first select the type of item to  be added. The item usually is a Button control, but also may be another type of  control, as shown here.  Once  you  have  chosen  the  control,  you  then  click  the Add  button  to  add  the  control to the toolbar. The following screenshot shows the Items Collection Editor  after three buttons have been added to the toolbar.   CHAPTER 12  Toolbars   227  As illustrated here, choosing one of the buttons in the left pane shows the button’s  properties in the right pane. You should change each button’s Name property. Later  in this chapter, I will be using these buttons to parallel the functionality of the Edit   Cut, Edit  Copy, and Edit  Paste menu items. Accordingly, I named the three buttons  tbtnEditCut, tbtnEditCopy, and tbtnEditPaste. The “tbtn” prefix indicates a toolbar  button, and EditCut  or EditCopy or EditPaste  indicates the functionality of the  toolbar button.  Additionally,  you  should  delete  the  value  of  the Text  property  of  each  button   because these buttons will be displaying images, not text.  Click  OK  to  close  the  Items  Collection  Editor  and  create  the  buttons  you  specified.  Figure  12-4  shows  the  toolbar  area  after  several  buttons  have  been  added.  Associating Images with Toolbar Buttons So  far  our  toolbar  is  not  very  impressive. All  the  buttons  look  the  same,  with  a  generic image that, as near as I can tell, looks like a sun over a mountain.  The most common visual cue for a toolbar button is an image. Figure 12-5 shows  a toolbar in Microsoft Word. The images show each toolbar button’s purpose, such  as New, Open, and Save.  We are now going to add images to the toolbar buttons for this project. The first step concerns the DisplayStyle property of the ToolStripItem class.  This  property,  which  is  an  enumeration,  determines  whether  an  image  or  text  may  be  displayed  on  a  button.  Table  12-1  lists  the  possible  values  for  this  property.  Figure 12-4  Toolbar with added buttons   228   Visual Basic 2005 Demystiﬁ ed  Figure 12-5   Images on toolbar buttons in Microsoft Word  Using  the  Items  Collection  Editor,  set  each  button’s  DisplayStyle  property  to  Image  if necessary, since it is the default  because we intend each button to display  an image but no text. Text is helpful to identify the purpose of a toolbar button.  However, the small area of the button would be crowded by including text as well  as an image.  NOTENOTE You can set the ToolTipText property of the button to a short textual hint  of the button’s purpose. For example, you could set the ToolTipText property of  tbnEditCut to “Cut.” Then, when the user hovers the mouse cursor over the  button, a ToolTip of “Cut” will appear. A ToolTip has the advantage of providing  a textual explanation of the button’s purpose without taking up space on the small  area of the button.  The next step is to set the Image property of each button. This property, as its   name suggests, sets the image to be displayed in the button.  Value Image ImageAndText None Text  Description The ToolStripItem may display only an image, which is the default. The ToolStripItem may display both an image and text. The ToolStripItem may not display either an image or text. The ToolStripItem may display only text.  Table 12-1  DisplayStyle Enumeration Values   CHAPTER 12  Toolbars   229  Using the Items Collection Editor, go to the Image property of a button. Here,  you can see the Image property of the Cut button, which currently is set to System  .Drawing.Bitmap and shows the default image.  Click  the  ellipsis   …   next  to  System.Drawing.Bitmap.  This  will  display  the  Select Resource dialog box shown here. You use this dialog box to assign an image  to a form or control in a Windows application.   230   Visual Basic 2005 Demystiﬁ ed  Choose  the  Local  Resource  radio  button  and  then  click  the  Import  button  associated with it. This displays the Open dialog box shown next, which you use to  browse to and select an image file to be displayed on the button.  Visual Studio 2005 includes bitmap files you can use as toolbar images. These  files are located by default within the directory C:\Program Files\Microsoft Visual  Studio 8 \Common7\VS2005ImageLibrary. From there I went to the folder bitmaps\ commands\highcolor,  shown  here. As  you  can  see,  there  are  bitmap  files   .bmp  extensions  for Cut, Copy, and  if you scroll further in the dialog box depicted in  this screenshot  Paste.   CHAPTER 12  Toolbars   231  NOTENOTE You may not have these bitmap files installed, or they may be installed at a  different location, depending on the particular edition you purchased or your  installation options.  Choose the Cut bitmap file for the Cut toolbar button and then click the Open button.   As shown here, the Select Resource dialog box now contains the image for Cut.   232   Visual Basic 2005 Demystiﬁ ed  Click OK in the Select Resource dialog box. As shown here, the Items Collection   Editor now shows an image for the Image property of the Cut button.  Repeat the same process for the Copy and Paste buttons, except of course choose  Copy.bmp for the Copy button and Paste.bmp for the Paste button. When you’re  done, click OK to close the Items Collection Editor. Figure 12-6 shows the toolbar,  with images for Cut, Copy, and Paste.  Figure 12-6  Toolbar buttons with images for Cut, Copy, and Paste   CHAPTER 12  Toolbars   233  NOTENOTE The size of the bitmap and the size of the toolbar button may be different.  You can set the ImageScaling property to SizeToFit so the image will size to fit on  the toolbar button.  Associating Code with Clicks  of Toolbar Buttons  The toolbar buttons look prettier now that each has an image on it, but they still  don’t do anything when they’re clicked.  In this section, we’ll write code so the Cut toolbar button provides the same cut action  as the Cut menu item and context menu item we worked on in Chapter 11. Similarly,  when you’re finished with this section, the Copy toolbar button will provide the same  copy action as the Copy menu item and context menu item, and the Paste toolbar button  will provide the same paste action as the Paste menu item and context menu item.  The Cut, Copy, and Paste methods of the TextBox class also could be called in  the  Click  event  procedures  of  the  corresponding  toolbar  buttons.  However,  as  discussed in Chapter 11 in connection with context menu items, this would be a  duplication of code. Here, the duplication is short, but in other circumstances it may  not be. Therefore, it is useful instead to have each toolbar button’s functionality  handled by the corresponding Edit main menu item.  Chapter  11,  in  the  section  “Adding  Functionality  to  Context  Menu  Items,”  discussed three different alternatives for having a context menu item’s functionality  handled by the corresponding main menu item. The same discussion applies here to  having a toolbar button’s functionality handled by the corresponding main menu  item. To illustrate the use of all three alternatives, the AddHandler alternative is  used for the Cut toolbar button, the Handles alternative is used for the Copy toolbar  button, and the alternative of calling another event procedure is used for the Paste  toolbar button.  Add the following line of code to the Load event procedure for the form so the  Click event procedure of the Edit  Cut menu item handles the Click event of the Cut  toolbar button: AddHandler tbtnEditCut.Click, _    AddressOf Me.mnuEditCut_Click  Expand the Handles clause of the Click event procedure for the Edit  Copy menu  item  mnuEditCopy  so it also handles the Click event of the Copy toolbar button: Private Sub mnuEditCopy_Click ByVal sender As Object, _ ByVal e As System.EventArgs  _   234   Visual Basic 2005 Demystiﬁ ed  Handles mnuEditCopy.Click, _    cmnuEditCopy.Click, tbtnEditCopy.Click    txtEdit.Copy   End Sub  Finally, create a Click event procedure for the Paste toolbar button so it calls the   Click event procedure of the Edit  Paste menu item  mnuEditPaste : Private Sub tbtnEditPaste_Click ByVal sender As Object, _ ByVal e As System.EventArgs  Handles tbtnEditPaste.Click    mnuEditPaste_Click sender, e  End Sub  Conclusion  Application  users  use  toolbars  as  well  as  menu  items  to  give  commands  to  an  application.  The  functionality  of  a  toolbar  button  generally  duplicates  the  functionality of a menu item. However, the purpose of this duplication is that toolbar  buttons have two advantages over menu items. First, toolbar buttons are immediately  accessible,  whereas  menu  items  may  be  nested  several  levels  deep  and  can  be  accessed only by multiple mouse clicks or keystrokes. Second, a toolbar button is  visual, which gives a more visual interface than the text of a menu item.  This chapter showed you how to create toolbars for your forms, add buttons to  them, and add images to the buttons. Transitioning from the graphical user interface  to code, you also learned how to associate the clicking of a particular toolbar button  with the clicking of a corresponding menu item.  So far our text editor is not able to read from or write to any file from the hard   drive. This functionality will be added in the next chapter.  Quiz    1.  What class represents a toolbar?   2.  What class represents each item on a toolbar?   3.  What does the Items collection of the ToolStrip component contain?   4.  Is a toolbar item limited to a button?   5.  What are advantages of a toolbar over a corresponding menu?   CHAPTER 12  Toolbars   235    6.  What are different alternatives for having a toolbar item’s functionality   handled by the corresponding main or context menu item?    7.  What does the DisplayStyle property of the ToolStripItem class determine?   8.  What does the Image property of the ToolStripItem class determine?   9.  What editor is useful in adding controls to a toolbar?   10.  What is a good prefix for naming a toolbar button?   This page intentionally left blank    PART FIVE  Accessing Data  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.    This page intentionally left blank    CHAPTER  13  Accessing  Text Files  Perhaps the most common purpose of Visual Basic applications is to access, view,  and modify data. The data is stored on the computer’s hard drive as a file or files so  the data will be available even after the application exits.  Text files long have been used to store data. Text files preceded databases, but  they often are not thought of as advanced as databases such as Oracle, SQL Server,  and Access. Indeed, databases do have advantages over text files. However, unlike  databases, which each has a different format and therefore often can be understood  only by applications that have the software for that particular database format, text  files generally are universally understood by applications. For this reason, text files  are  used  as  a  common  language  between  applications  that  otherwise  have  incompatible software for data transfer between them.  I will show you in this chapter how to read from and write to a text file. First,  however, I will show you how to add to your program Open and Save dialog boxes,  such as those used in sophisticated programs like Microsoft Word, so you can open  a text file to read from it as well as save to a text file to write to it.  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.   239   240   Visual Basic 2005 Demystiﬁ ed  Open and Save File Dialog Boxes  In Microsoft Word and many other Windows programs, the application user may  open a file located with the Open dialog box, which they display with the File   Open menu command or the Open toolbar button. Similarly, the application user  may save information to a file with the Save dialog box, which they display with the  File  Save menu command or the Save toolbar button.  The  Open  dialog  box  is  a  control  of  the  OpenFileDialog  class,  and  the  Save  dialog box is a control of the SaveFileDialog class. In this section, I will show you  how to add Open and Save dialog boxes to your application.  Adding an OpenFileDialog Control to Your Form Figure 13-1 shows an Open dialog box in Notepad.  You add an OpenFileDialog control to a form using the following steps, similar  to adding a MenuStrip or ToolStrip object to a form. Try the following steps to add  an OpenFileDialog control to the Text Editor project that you created in Chapter 11  and enhanced in Chapter 12:    1.  Open the Text Editor project.   2.  Open the form in designer view.   3.  Double-click the OpenFileDialog control in the Toolbox  it is in the   Dialogs section  to add it to the form.  Figure 13-1  Open dialog box in Notepad   CHAPTER 13  Accessing Text Files   241  Figure 13-2 shows the OpenFileDialog control after it has been added to the form.  OpenFileDialog won’t appear directly on your form, but instead in the component  tray below the form, as shown in Figure 13-2.  The default name of this control likely is OpenFileDialog1. Give this control a more  logical name, such as dlgOpen. The “dlg” prefix indicates the control is a dialog  box, and Open indicates that the purpose of the dialog box is to open a file. You  should also change the FileName property so that it doesn’t display the control’s  name in the dialog box. You don’t need to change any of the other default properties  of this control.  Showing the OpenFileDialog Control The  MenuStrip,  ContextMenuStrip,  and  ToolStrip  controls  also  appear  in  the  component tray. However, unlike these controls, the OpenFileDialog control won’t  appear on your form when you run your program. Instead, you need to write code  to display the OpenFileDialog control.  Figure 13-2  OpenFileDialog in the component tray   242   Visual Basic 2005 Demystiﬁ ed  One of the methods of the OpenFileDialog class is ShowDialog. As the name  suggests, its purpose is to show the Open dialog box. You can call the ShowDialog  method by the following code, which starts with the name of the object  dlgOpen ,  followed by a period separating the object name from the method name  ShowDialog ,  followed by empty parentheses  because this method has no parameters : dlgOpen.ShowDialog    Let’s test this code in the Text Editor project. Add a button to the form named  btnRead with the Text property Read. Create the following Click event procedure  for this button: Private Sub btnRead_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnRead.Click    dlgOpen.ShowDialog   End Sub  When you run the project and click the Read button, the OpenFileDialog control  will appear, similar to Figure 13-1. The OpenFileDialog control is modal, meaning  your  application  cannot  continue  until  the  user  closes  the  Open  dialog  box  by  clicking one of its two buttons, either Open  after selecting a file  or Cancel.  Determining Whether Open  or Cancel Has Been Chosen Although choosing either the Open or Cancel button will close the Open dialog  box,  it  is  important  to  know  which  button  was  chosen.  If  the  Open  button  was  chosen, we would want our code to open the selected file. However, if the Cancel  button was chosen, we would not want our code to attempt to open a file because no  file was selected.  From the code we have written so far, you can’t tell whether the Open or Cancel  button was chosen. Now we will add to the code so we can determine which button  was chosen.  In addition to displaying the OpenFileDialog control, the ShowDialog method  also  returns  a  DialogResult.  The  DialogResult  was  discussed  in  Chapter  10  in  connection with dialog forms. As discussed there, the value of the DialogResult that  is returned by the ShowDialog method corresponds to the button the user selected  to close the dialog box. For example, if the user chose the OK button, the value  returned  by  the  ShowDialog  method  is  DialogResult.OK.  However,  if  the  user  chose  the  Cancel  button,  the  value  returned  by  the  ShowDialog  method  is  DialogResult.Cancel.  The  Open  dialog  box  has  an  Open  button  instead  of  an  OK  button,  but  the  DialogResult  that  corresponds  to  the  user’s  choice  of  the  Open  button  still  is    CHAPTER 13  Accessing Text Files   243  DialogResult.OK. Not surprisingly, the DialogResult is DialogResult.Cancel if the  user instead chose the Cancel button to close the Open dialog box.  Here  is  the  syntax  for  using  the  return  value  of  the  ShowDialog  method  to   determine whether the user chose the Open or Cancel button: Dim dr As DialogResult dr = dlgOpen.ShowDialog   If dr = DialogResult.OK Then    ' Open button was clicked Else    'Cancel button was clicked End If  This first statement creates a DialogResult variable because that is the data type  returned by the ShowDialog method. The second statement calls the ShowDialog  method and assigns its return value to the DialogResult variable we created in the  first statement. The following If Else statement checks to see if the value of the  DialogResult variable is DialogResult.OK. If it is, the Open button was clicked.  Otherwise, the Cancel button was clicked.  Accordingly, modify the code in the Click event procedure of the Read button so   it reads as follows: Private Sub btnRead_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnRead.Click    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       MessageBox.Show "Open button was clicked"     End If End Sub  Run the project. Click the Read button to display the Open dialog box. Select a  file and click the Open button. The message box will display that the Open button  was clicked. Close the message box. Click the Read button again to redisplay the  Open dialog box. This time click the Cancel button. No message box will display,  indicating that the Cancel button was clicked.  Identifying the File to Open We  have  made  progress! We  can  now  determine  through  code  whether  the  user  chose the Open or Cancel button. The next step is to determine the name of the file  the user chose if they selected the Open button, because we need that name to know  which file to open.   244   Visual Basic 2005 Demystiﬁ ed  The  OpenFileDialog  class  has  a  FileName  property  whose  value  is  a  string  containing  the  path  to  and  name  of  the  file  selected  in  the  file  dialog  box.  For  example, if we chose the file data.txt that is in the C:\temp directory, the FileName  property would be C:\temp\data.txt.  Usually you are interested in the FileName property only if the user chose the  Open button. If the user chose the Cancel button instead, the FileName property is  an empty string.  Modify the code in the Click event procedure of the Read button so it reads as follows:  Private Sub btnRead_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnRead.Click    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       MessageBox.Show dlgOpen.FileName     End If End Sub  Run the project. Click the Read button to display the Open dialog box. Select a  file and click the Open button. The message box will display the path to and name  of the file. You can now close the message box, and then the form.  SaveFileDialog Control You use a SaveFileDialog control to add to your application the ability to save files  using the built-in Save dialog box, which is shown in Figure 13-3.  NOTENOTE The Save dialog box often is titled “Save As” rather than “Save,” as in  Figure 13-3. The title depends on, among other factors, if the contents are being  saved to a different file than the one opened, or whether the file is being saved for  the first time. The discussion in this chapter about the Save dialog box applies  equally to the Save As dialog box.  Add  a  SaveFileDialog  control  to  your  form,  as  you  did  the  OpenFileDialog  control earlier in this chapter. Name the SaveFileDialog control dlgSave. You don’t  need to change any of this control’s other default properties.  The SaveFileDialog control, like the OpenFileDialog control, is modal, meaning  your application cannot continue until the user closes the Save dialog by clicking  one of its two buttons, either Save or Cancel.  Once  you  have  learned  how  to  use  an  OpenFileDialog  control,  using  the  SaveFileDialog  control  is  easy.  The  reason  is  the  ShowDialog  method,  the  DialogResult return value, and the FileName property work the same way with a    CHAPTER 13  Accessing Text Files   245  Figure 13-3  Save dialog box  SaveFileDialog control as they do with an OpenFileDialog control. The DialogResult  returned by clicking the Save button is DialogResult.OK, just as is the case with  clicking the Open button in the OpenFileDialog control.  Let’s test this by adding another Button control to the form in the Text Editor  project. Name this button btnWrite with the Text property Write. Then create the  following Click event procedure for the button: Private Sub btnWrite_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnWrite.Click    Dim dr As DialogResult    dr = dlgSave.ShowDialog      If dr = DialogResult.OK Then       MessageBox.Show dlgSave.FileName     End If End Sub  Run the project. Click the Write button to display the Save dialog box. Select a  file and click the Save button. A message box will display the path to and the name  of the file. Another message box always will advise you that the file already exists  and ask you if you want to replace it. Answer Yes to close the warning message box   don’t worry, the file will not be replaced . The Save dialog box will close. Next,  click  the Write  button  to  display  the  Save  dialog  box  again. This  time  click  the  Cancel button. No message box will display, indicating that the Cancel button was  clicked. Then close the form to end the application.   246   Visual Basic 2005 Demystiﬁ ed  Reading from a Text File  I am always telling my students that the best way to learn computer programming  is to write programs. Therefore, you will learn in this section how to display in the  text box in the Text Editor project the contents of a text file selected in an Open  dialog box. When we are finished writing code, clicking the “Read” button will  display in the TextBox control the contents of a text file. Figure 13-4 shows how the  application will appear after the Read button is clicked and the contents of a text file  are displayed in the TextBox control.  Conversely, in the next section you will further enhance the project so that when  you click the “Write” button, the application will write to the text file the contents  of  the TextBox  control. Thus,  if  I  make  any  changes  to  the  text  of  the TextBox  control and click the Write button, the text file will be updated with those changes.  StreamReader Class We will use the StreamReader class to read from the text file. The word “stream”  refers to a stream of data, moving from one place to another  in this case, from a  text file to your application . The word “reader” means the file is being read. As  you  might  now  guess,  when  we  want  to  write  to  the  file,  we  will  use  the  StreamWriter class.  To use the StreamReader class, we first will declare a variable of that data type:  Dim readerVar As IO.StreamReader  The term “IO” precedes StreamReader or else the compiler will complain that  the term “StreamReader” is not defined. The reason is that the StreamReader class  is part of the System.IO namespace.  Figure 13-4  Application displaying the contents of a text ﬁ le   CHAPTER 13  Accessing Text Files   247  Importing the System.IO Namespace  The compiler will not look in the System.IO namespace unless we tell it to. One  way  to  tell  the  compiler  to  look  in  the  System.IO  namespace  is  to  precede  StreamReader with System.IO.  There is an easier way to tell the compiler to look in the System.IO namespace.   At the top of the code module, above Public Class Form1, type the following: Imports System.IO  Therefore, your code will start with  Imports System.IO Public Class Form1  Including  this  one  Imports  statement  means  that  you  don’t  have  to  precede  StreamReader  or StreamWriter  with System.IO each time you use that term in  your code. Now you can declare the StreamReader variable readerVar in the Click  event procedure of the Read button without preceding StreamReader with IO, as  shown here: Dim readerVar As StreamReader  Revise  the  code  in  your  Read  button  Click  event  procedure  to  appear  as   follows: Private Sub btnRead_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnRead.Click    Dim readerVar As StreamReader    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       MessageBox.Show dlgOpen.FileName     End If End Sub  Instantiating a StreamReader Variable  Although  we  have  created  the  StreamReader  variable  readerVar,  right  now  that  variable does not relate to any text file. Therefore, the next step is to connect the  StreamReader variable readerVar to the text file we want to read. This process is  known as “instantiating the variable.”  We will instantiate the StreamReader variable with the following statement:  readerVar = New StreamReader dlgOpen.FileName  This line of code will replace the code that showed the message box, MessageBox  .Show dlgOpen.FileName , because the message box was for illustration and we    248   Visual Basic 2005 Demystiﬁ ed  are now actually about to open the selected file for reading rather than just display  its path and name.  Thus, so far your Read button Click event procedure should appear as follows:  Private Sub btnRead_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnRead.Click    Dim readerVar As StreamReader    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       readerVar = New StreamReader dlgOpen.FileName     End If End Sub  Now let’s take a careful look at the statement we’ve just added, starting from the   right side of the assignment statement.  The New keyword is used to create a new StreamReader instance that points  to  the  text  file  to  be  read.  The  term  “StreamReader”  in  the  statement  New  StreamReader dlgOpen.FileName   indicates  the  type  of  instance  being  created.  When the name of the function  here, StreamReader  is the same as the name of a  class  also StreamReader , as here, it is called a constructor. The constructor is used  to “construct” the new instance.  The constructor in this code example takes one argument: the name of the file to be  read. That file name is obtained from the FileName property of the Open dialog box. The right side of the assignment operator returns the new instance, which then is  assigned to the StreamReader variable readerVar on the left side of the assignment  operator. Now the StreamReader variable readerVar is connected to the text file we  want to read.  Reading the Text File into the TextBox The  StreamReader  class  has  a  ReadToEnd  method,  which  returns  a  string  representing the entire text of the text file. We then assign that string to the Text  property of txtEdit so that the text of the TextBox control will display the entire text  of the text file. Accordingly, add the following statement to your Read button Click  event procedure: txtEdit.Text = readerVar.ReadToEnd    Your Read button Click event procedure now should read as follows: Private Sub btnRead_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnRead.Click    Dim readerVar As StreamReader    Dim dr As DialogResult    dr = dlgSave.ShowDialog     CHAPTER 13  Accessing Text Files   249     If dr = DialogResult.OK Then       readerVar = New StreamReader dlgOpen.FileName        txtEdit.Text = readerVar.ReadToEnd      End If End Sub  The StreamReader class has other methods that are alternatives to ReadToEnd.  The Read method reads a specified number of characters, and the ReadLine method  reads a line. For example, if you want to load the data one line at a time into a row  of a control, the ReadLine method might be a logical choice.  Closing the Text File Once we have read the entire contents of the text file, there is no further need to read  from it. Therefore, we should close the text file for reading. The StreamReader class  has a Close method to accomplish this. Accordingly, add the following line of code  to close the text file for reading: readerVar.Close    This completes the Read button Click event procedure, which now should read   as follows: Private Sub btnRead_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnRead.Click    Dim readerVar As StreamReader    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       readerVar = New StreamReader dlgOpen.FileName        txtEdit.Text = readerVar.ReadToEnd       readerVar.Close      End If End Sub  Closing  the  text  file  for  reading  frees  system  resources,  specifically  memory.  This is important. Memory is required to keep a file open for reading  or writing .  When you don’t need to keep the file open anymore, you should give the memory  back to the operating system.  By analogy, a library would run out of books if patrons checked out books but never  returned them when they were finished reading the books. Similarly, your computer  only has so much available memory for applications  some memory is needed by the  operating system itself . If applications don’t return memory after checking it out, the  operating system eventually will run out of memory. The consequence of the operating  system running out of available memory for applications often is a general protection  fault or illegal exception, bringing the user’s work to a crashing halt.   250   Visual Basic 2005 Demystiﬁ ed  Additionally, later in this chapter you may be writing to the same text file that  you read. Trying to open a file for writing that already is open for reading may  cause problems, which can be avoided by closing the file first before reopening it  for another purpose.  Run the project. Click the Read button. Use the resulting Open dialog box to  select and open a text file. The contents of that text file should be displayed in the  text box. You can then close the application.  Writing to a Text File  The next step in enhancing the Text Editor project will be to write to the text file by  copying the contents of the text box to the text file. The code to do this will be in  the Click event procedure of the Write button.  StreamWriter Class We will now change the code previously in this chapter for the Click event procedure  for  the Write  button  by  replacing  the  code  displaying  the  message  box  with  the  following code: Dim writerVar As StreamWriter writerVar = New StreamWriter dlgSave.FileName, False   The code for the Click event procedure of the Write button should now look like   this: Private Sub btnWrite_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnWrite.Click    Dim dr As DialogResult    dr = dlgSave.ShowDialog      If dr = DialogResult.OK Then       Dim writerVar As StreamWriter       writerVar = New StreamWriter _           dlgSave.FileName, False     End If End Sub  The two lines of code we just added may look familiar from the code we wrote  earlier  in  this  chapter  for  the  StreamReader. There  we  declared  a  StreamReader  variable and then instantiated that variable using the StreamReader constructor to  read a text file. Here we are declaring a StreamWriter variable and then instantiating  that variable using the StreamWriter constructor to write to a text file. As the name  suggests, the StreamWriter class is used when writing to a text file.   CHAPTER 13  Accessing Text Files   251  The first argument of the StreamWriter constructor is the name of the text file.  This is the same as the first argument of the StreamReader constructor. However,  the StreamWriter constructor has an additional, second argument.  NOTENOTE The StreamWriter constructor, like the Show method of the MessageBox  class, is overloaded, which means that it may be called with a different number  of arguments.  The data type of the second argument of the StreamWriter constructor is Boolean.  The value of this second argument is True if you want to add to the existing contents  of the text file, and False if instead you want to overwrite the existing contents of  the text file.  In this project, we want to overwrite rather than add to the existing contents of   the text file. Accordingly, the value of the second argument is False.  If you instead wanted to add to the existing contents of the file, you would use  True instead of False as the second argument of the StreamWriter constructor. One  example would be a log file, which logs events or problems. Normally you would  want to add a new event or problem to the prior list, not erase the prior list in the  process.  Writing from the TextBox to the Text File The StreamWriter class has a Write method that writes the contents of its argument  to the text file at which the StreamReader instance is targeted. In this application,  we want to write the contents of the text box to the text file. Thus, the argument is  the Text property of the TextBox control. Accordingly, add the following code to  the Click event of the Write button: writerVar.Write txtEdit.Text   The code for the Click event procedure of the Write button should now look   like this: Private Sub btnWrite_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnWrite.Click    Dim dr As DialogResult    dr = dlgSave.ShowDialog      If dr = DialogResult.OK Then       Dim writerVar As StreamWriter       writerVar = New StreamWriter _           dlgSave.FileName, False        writerVar.Write txtEdit.Text     End If End Sub   252   Visual Basic 2005 Demystiﬁ ed  Closing the Text File We are now finished writing to the text file. Accordingly, we should close the text  file for writing, as we closed the text file for reading earlier in this chapter. Therefore,  add the following statement to the Click event of the Write button: writerVar.Close    The completed code for the Click event procedure of the Write button should   now look like this: Private Sub btnWrite_Click  ByVal sender As Object, _ ByVal e As System.EventArgs  Handles btnWrite.Click    Dim dr As DialogResult    dr = dlgSave.ShowDialog      If dr = DialogResult.OK Then       Dim writerVar As StreamWriter       writerVar = New StreamWriter _           dlgSave.FileName, False        writerVar.Write txtEdit.Text        writerVar.Close      End If End Sub  CAUTION CAUTION Your program may make changes to your text file, and you don’t want  those changes to cause any problems on your computer. Accordingly, before you  test this project, create a text file using Notepad or another plain text editor and  type in whatever contents you would like. However, don’t use Microsoft Word or a  comparable word processing program to create the text file because these programs  include formatting characters as well as text.  Run the project. Click the Read button. Use the resulting Open dialog box to  select and open the text file you created. The contents of that text file should be  displayed in the text box. Then, make changes in the text box. When done making  changes in the text box, click the Write button. When the Save dialog box displays,  find and choose the text file you created and then click the Save button. You may  see a message box that informs you that the file you are saving to already exists and  asking you if you want to replace it. Click the Yes button.  Run your application again and display the text file. The text should show the   changes you made when you first ran the application.   CHAPTER 13  Accessing Text Files   253  This application is not yet ready for prime time. For example, we should disable  the Write button until a file is opened with the Read button. We also should create  File    Open  and  File    Save  menu  items  and  link  their  Click  events  to  the  Click  events  of  the  Read  and Write  buttons. You  may  wish  to  try  to  implement  these  enhancements.  Nevertheless,  this  project  is  useful  in  demonstrating  how  to  read  from and write to a text file.  Conclusion  In  this  chapter,  you  learned  how  to  add  to  your  program  Open  and  Save  dialog  boxes that sophisticated programs such as Microsoft Word have. The Open dialog  box is a control of the OpenFileDialog class. Similarly, the Save dialog box is a  control  of  the  SaveFileDialog  class. You  use  the  ShowDialog  method  to  display  each dialog, and the DialogResult property to determine if the user chose the dialog  box’s Open or Save button, or instead the Cancel button. If the user chose the Open   or Save  button, you use the FileName property to retrieve the file name chosen by  the user from the dialog box.  In this chapter, you also learned how to read from a text file using the StreamReader  class and to write to a text file using the StreamWriter class. Although text files may  not seem as advanced as databases, one advantage text files have over databases is  that  they  are  universally  understood  by  applications,  whereas  databases  require  specialized software.  However,  databases  also  have  their  advantages,  so  the  next  chapter  will  be   about them.  Quiz    1.  The Open dialog box is a control of which class?   2.  What method do you use to show an Open dialog box?   3.  What is the return value of showing an Open dialog box?   4.  What is the property of the OpenFileDialog class whose value is the file   chosen by the user in an Open dialog box?    5.  The Save dialog box is a control of which class?   254   Visual Basic 2005 Demystiﬁ ed    6.  What method do you use to show a Save dialog box?   7.  What is the return value of showing a Save dialog box?   8.  What is the property of the SaveFileDialog class whose value is the name   of the file to be saved?    9.  What class may you use to read from a text file?   10.  What class may you use to write to a text file?   CHAPTER  14  Databases  Up until now, we have saved data in a text file. But text files have their limitations.  One limitation is that it is difficult to quickly retrieve specific data in a text file.  There’s usually no alternative to searching the text file from beginning to end, which  can take a long time if the text file contains a lot of data.  Another limitation of a text file is its inability to link different but related data.  For example, a store may have both a list of customers and a list of orders. Because  the orders come from customers, the two different lists are related. But with a text  file, there’s no easy way to link an order in one list with a customer in another list. A database does not have these limitations—you can quickly retrieve specific   data using keys and indexes, and you can easily link different data.  Although  there  are  many  types  of  databases,  fundamentally  these  different  database types share a number of common characteristics. Accordingly, you will be  able to apply what you learn here to different types of databases.  This chapter will get you started with databases. However, I’m not going to start  with a dry theoretical discussion of what a database is because that information can  be a little abstract if you haven’t first spent some time working with one. So let’s  roll  up  our  sleeves   figuratively,  of  course   and  get  started  working  with  a  database.  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.   255   256   Visual Basic 2005 Demystiﬁ ed  Installing the Database  Databases come in different formats. Microsoft Access, Microsoft SQL Server, and  Oracle are among the most common, but there are many others, each with their  advantages, disadvantages, followers, and detractors.  I’ll be using a Microsoft Access database in this chapter solely because I believe  my readers are more likely to have Microsoft Access than other database products  such as Microsoft SQL Server and Oracle. Additionally, it is easier to get started  using Microsoft Access than with most other database products. However, you will  be able to apply what you learn here to other database formats such as Microsoft  SQL Server and Oracle.  Obtaining the Northwind Traders Database We will be working with the Northwind Traders database. It is a Microsoft Access  database and is on the installation CD for Microsoft Access.  However, you can use the Northwind Traders database with Visual Basic 2005  without  having  Microsoft  Access.  Microsoft  permits  you  to  download,  free  of  charge, a version of this sample database for Access 2000. This version also will  work if you have Access XP or 2003.  The download link at the time of this book is http:  www.microsoft.com downloads details.aspx?FamilyID=c6661372-8dbe- 422b-8676-c632d66c529c&displaylang=en This link may change, particularly when Microsoft periodically reorganizes its  website. In case you need to do a search, the title of the article is “Access 2000  Tutorial: Northwind Traders Sample Database.”  Installing the Northwind Traders Database The name of the installation file is Nwind.exe. Once you download this file onto  your  hard  drive,  double-click  it  to  start  the  installation  process. The  installation  program will ask you to agree to a license to use the database and then ask where  you want to save the database. Save it wherever you wish on the hard drive; just  remember where you saved it.  The  saved  database  may  have  the  name  Nwind.mdb  or  Northwind.mdb.  The  .mdb extension is an abbreviation of “Microsoft database” and is used for Access  databases.   CHAPTER 14  Databases   257  Connecting to the Database  If  you  have  Access,  you  can  view  the  Northwind  Traders  database  from  that  application.  You can also view the Northwind Traders database via Visual Basic 2005. You  don’t need to open or create a Windows application. However, you first need to  connect Visual Basic 2005 to the database.  To start the process of connecting Visual Basic 2005 to the Northwind Traders  database, choose the Tools  Connect to Database menu command. This will display  the Choose Data Source dialog box shown in Figure 14-1.  As Figure 14-1 shows, the upper pane of the Choose Data Source dialog box lists  different  database  formats,  such  as  Access,  SQL  Server,  and  Oracle.  Because  Northwind Traders is an Access database, choose Microsoft Access Database File.  Figure 14-2 shows the Choose Data Source dialog box after you choose Microsoft  Access Database File.  As Figure 14-2 shows, the drop-down box below the upper pane, blank in Figure  14-1, now lists the one available data provider: .NET Framework Data Provider for  OLE DB. A data provider is a code component that is used by your application to  connect to a specific database format. There are many database formats, so there are  many  providers,  at  least  one  for  each  database  format  supported  by  the  .NET  Framework. The .NET Framework may have several alternative data providers for  some database formats, but it just has one, the .NET Framework Data Provider for  OLE DB, for the Microsoft Access database format.  Figure 14-1  Choose Data Source dialog box   258   Visual Basic 2005 Demystiﬁ ed  Figure 14-2  Choose Data Source dialog box after the data source is selected  As Figure 14-2 also shows, the Description area to the right of the upper pane,  blank in Figure 14-1, now contains the following text: “Use this selection to connect  to a Microsoft Access database file using the native Jet provider through the .NET  Framework  Data  Provider  for  OLE  DB.”  The  reason  for  the  term  “Jet”  is  that  Microsoft Access uses the Jet database engine.  Finally, Figure 14-2 shows that once you have selected a data source and a data   provider, the Continue button, disabled in Figure 14-1, now is enabled.  Click  the  Continue  button.  This  will  display  the Add  Connection  dialog  box   shown in Figure 14-3.  Figure 14-3  Add Connection dialog box   CHAPTER 14  Databases   259  Figure 14-4  Add Connection dialog box after the database is selected  Use the Browse button to find and choose the nwind.mdb file you saved on your  hard drive when you installed the Northwind Traders database. Once you have done  this, as shown in Figure 14-4, the path to and name of the database should appear  in the Database File Name text box.  NOTENOTE You don’t need to worry about the user name and password in the Add  Connection dialog box, unless you assigned a name and password to the database,  which you don’t need to do. This may be an issue with other database formats, but  it’s not an issue with Microsoft Access.  The next step is to test the connection. Click the Test Connection button. A message   box stating “Test Connection Succeeded” should display, as in Figure 14-5.  Click  the  OK  button.  This  saves  the  changes  you  made  and  closes  the  Add   Connection dialog box.  Figure 14-5  Test connection succeeded.   260   Visual Basic 2005 Demystiﬁ ed  Using Server Explorer  If you have Microsoft Access, you can use it to view the Northwind Traders database.  If you don’t, Visual Basic 2005 has a tool called Server Explorer that permits you  to view and make changes to databases on your computer or on any other computer  to which you have network access and permissions.  Indeed, you should learn how to use Server Explorer even if you have Microsoft  Access on your computer. First, you may find yourself working at another computer  that  doesn’t  have  Microsoft Access.  Second  and  perhaps  more  important,  when  you’re  working  with  other  database  formats  such  as  SQL  Server  or  Oracle,  you  won’t be able to use Microsoft Access.  You can display Server Explorer using the View  Server Explorer menu command.  You don’t need to first open or create a Windows application. Figure 14-6 shows  Server Explorer after the Data Connections node was expanded by clicking the +  sign to its left.  Figure 14-6  Server Explorer   CHAPTER 14  Databases   261  NOTENOTE Server Explorer on your machine will likely have different content than  what’s shown in Figure 14-6. For example, PCKlub866 is listed under the Servers  node because that happens to be the name of the computer I used.  The node underneath the Data Connections node should list the path and file  name of the Microsoft Access database to which we just created a connection in the  previous section “Connecting to the Database.”  Exploring the Database Click the + sign next to the Microsoft Access database under the Data Connections  node. As Figure 14-7 shows, four nodes appear: Tables, Views, Stored Procedures,  and Functions.  A table is a collection of data on a particular subject. In this chapter, we’ll be  discussing a particular table, Customers. The Northwind Traders database has other  tables,  too,  including  those  listing  employees,  products,  orders,  suppliers,  and  shippers.  Figure 14-7  Server Explorer listing Tables, Views, Stored Procedures, and Functions   262   Visual Basic 2005 Demystiﬁ ed  A view is a collection of data, often obtained from more than one table. Examples  of views in the Northwind Traders database include “Product Sales for 1995” and  “Ten Most Expensive Products.”  A stored  procedure  and  a  function  each  is  generally  a  code  component  that  generates  a  predefined  subset  of  the  data.  Examples  of  stored  procedures  in  the  Northwind Traders database include “Alphabetical List of Products” and “Summary  of Sales by Year.” Examples of functions in the Northwind Traders database include  “Sales by Year.”  Exploring the Customers Table Click the + sign next to the Tables node. As Figure 14-8 shows, this displays the  various tables in the Northwind Traders database.  Click the + sign next to the Customers table. As Figure 14-9 shows, this displays   the various fields of the Customers table.  Figure 14-8  Server Explorer listing Tables   CHAPTER 14  Databases   263  Figure 14-9  Fields of Customers table  Right-click  the  Customers  table  node  and  choose  Show  Table  Data  from  the  shortcut menu. As Figure 14-10 shows, the data in the Customers table then will be  displayed.  As Figure 14-10 shows, the data in the Customers table is displayed in rows and  columns. Each column, or field, represents a different piece of information, such as  a name, title, or address. Each row, or record, concerns one customer. Together, the  rows and columns provide information, such as the name, title, and address of each  customer.  Different  tables  have  different  fields  and  a  different  number  of  records.  Additionally, the fields are not always of a String data type, but instead may be of  another data type, such as Integer or Boolean. The one thing tables have in common  is that they’re composed of fields  columns  and records  rows .   264   Visual Basic 2005 Demystiﬁ ed  Figure 14-10  Data in Customers table  Database Project  As you have heard me say several times already in this book, the best way to learn  programming is to write programs. So let’s put that saying into practice once again.  What the Project Does This project, when finished, will, when the application starts up, fill a DataGridView  control with data from four fields of the Customers table: CustomerID, ContactTitle,  CompanyName, and ContactName. Figure 14-11 shows the project in action.  Creating the Form Create a new Windows application. Add two controls to the default form.   CHAPTER 14  Databases   265  Figure 14-11  DataGridView control ﬁ lled with data from Customers table  The first control is an OpenFileDialog control. You learned about this control in  Chapter  13.  Name  this  control  dlgOpen  and  delete  any  value  in  its  FileName  property. You do not need to change any of its other default properties.  The second control is a DataGridView control. This control displays data in a  row and column format, much like the Customers table shown in Figure 14-10, or  a spreadsheet.  When you add the DataGridView control, a DataGridView Tasks pane displays,   as shown in Figure 14-12.  You may accept the default values in this pane. However, center the DataGridView   control in your form and rename it dgvData.  Figure 14-12  DataGridView Tasks pane   266   Visual Basic 2005 Demystiﬁ ed  Importing Data Namespaces The  code  components  used  for  database  access  are  organized  in  the  .NET  class  library under the name ADO.NET. You’ve probably already figured out the “.NET”  portion of that name. ADO was an acronym for ActiveX Data Objects, a Microsoft  data-access technology that preceded ADO.NET.  Several ADO.NET classes, which we will use in this chapter, are part of the  System.Data.OleDb namespace. As you may remember from previous chapters,  the .NET library is organized in a hierarchal structure, each branch with its own  namespace. System is a top-level namespace. Data is one of several namespaces  belonging  to  System,  and  OleDb  is  one  of  several  namespaces  belonging  to  System.Data.  NOTENOTE There are other namespaces supporting other database types, such as  OracleClient for Oracle databases and SqlClient for SQL Server databases.  Thus, the OleDbConnection class we will be using in the next section technically  is  not  just  the  OleDbConnection  class  but  instead  the  System.Data.OleDb  .OleDbConnection  class.  However,  typing  a  System.Data.OleDb  prefix  before  every  reference  to  OleDbConnection  or  another  ADO.NET  class  can  quickly  become a pain.  Fortunately, you can avoid having  to  prefix every reference  to an ADO.NET  class with System.Data.OleDb by using an Imports System.Data.OleDb statement  before  your  class  declaration. While  you  are  at  it,  also  import  the  System.Data  namespace, because that namespace also will come in handy later. Thus, assuming  the class name of your form is Form1, the first three lines of code will be Imports System.Data  Imports System.Data.OleDb Public Class Form1  If the compiler does not recognize the root System.Data namespace, you may  need to add a reference to the assembly that contains the namespace. Choose Add  Reference from the Project menu to display the Add Reference dialog box shown in  Figure 14-13.  Choose System.Data from the list and click OK. Then the compiler will recognize   the root System.Data namespace.   CHAPTER 14  Databases   267  Figure 14-13  Add Reference dialog box  Creating a Connection Your application will be giving commands to the database to retrieve certain data.  But  before  it  can  do  so,  your  application  needs  to  have  a  connection  with  the  database.  Persistent Connection vs. Disconnected Application  Although  an  application  needs  to  have  a  connection  to  a  database  to  retrieve  or  change data, there is more than one way to design this connection. One alternative  is to create a single connection that remains active until the application ends. This  is called a persistent connection.  The alternative is to create a connection only to retrieve data, end the connection,  make changes to a local copy of the data while disconnected from the database, and  connect back to the database only when necessary to synchronize these changes  with the database. This is called a disconnected application because most of the  time, the application is disconnected from the database.   268   Visual Basic 2005 Demystiﬁ ed  As with most choices in life, there are tradeoffs between a persistent connection  and a disconnected application. In general, Windows applications are more likely to  use  persistent  connections,  whereas  web  applications  are  more  likely  to  be  disconnected applications, but this is only a generalization, of course.  Because  we  are  writing  a  Windows  application,  we  will  use  a  persistent   connection.  OleDbConnection Class  The  OleDbConnection  class  represents  a  connection  to  a  data  source.  The  following line of code not only declares an OleDbConnection variable, but also  instantiates it: Dim myConn As New OleDbConnection As  explained  in  previous  chapters,  the  term  “instantiate”  means  to  create  a  new  instance  in this case, a new connection . This instantiation is performed by using  the New keyword when declaring the OleDbConnection variable.  ConnectionString Property  The OleDbConnection class has a ConnectionString property. This property includes  the provider being used and the path to and the name of the data source file.  The provider is “Microsoft.Jet.OLEDB.4.0.” As mentioned in the earlier section  “Connecting to the Database,” the reason for the term “Jet” is that Microsoft Access  uses the Jet database engine. Additionally, as the Description area of the Choose  Data Source dialog box shown in Figure 14-2 reflects, the connection to a Microsoft  Access database uses the native Jet provider through the .NET Framework Data  Provider for OLE DB. That native Jet provider is Microsoft.Jet.OLEDB.4.0.  We  will  obtain  the  path  to  and  the  name  of  the  data  source  file  through  the   OpenFileDialog control and its FileName property.  In this project, all the code will be written in the Load event of the form. Write   the following code: Private Sub Form1_Load  ByVal sender As System.Object, _ ByVal e As System.EventArgs  Handles Me.Load    Dim myConn As New OleDbConnection    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       Dim strFile As String = dlgOpen.FileName       myConn.ConnectionString = "Provider=" & _          "Microsoft.Jet.OLEDB.4.0;Data Source=" & _          strFile & ";"    End If End Sub   CHAPTER 14  Databases   269  Opening the Connection  Once you’ve instantiated an OleDbConnection object and created its connection  string, you may open the connection to your database using the OleDbConnection  object’s Open method: myConn.Open    Accordingly, our code now reads as follows:  Private Sub Form1_Load  ByVal sender As System.Object, _ ByVal e As System.EventArgs  Handles Me.Load    Dim myConn As New OleDbConnection    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       Dim strFile As String = dlgOpen.FileName       myConn.ConnectionString = "Provider = " & _          "Microsoft.Jet.OLEDB.4.0;Data Source=" & _          strFile & ";"       myConn.Open      End If End Sub  Creating a Command Once you establish a connection, you’ll next want to execute commands, such as to  retrieve data that you want to view. You use an OleDbCommand object to execute  commands to a database. The OleDbCommand class, like the OleDbConnection  class, is part of the System.Data.OleDb namespace.  You  instantiate  an  OleDbCommand  object  similar  to  how  you  instantiate  an   OleDbConnection object: Dim myCMD As New OleDbCommand  SQL Statement  Commands often are expressed in a SQL statement. SQL, alternatively pronounced  as  separate  letters   S-Q-L   or  as  sequel,  is  an  acronym  for  Structured  Query  Language.  SQL  is  a  standardized  language  for  requesting  information  from  a  database.  The  following  SQL  SELECT  statement  retrieves  data  from  the  CustomerID,   ContactTitle, CompanyName, and ContactName fields from the Customers table: SELECT CustomerID, ContactTitle, CompanyName, _    ContactName FROM Customers   270   Visual Basic 2005 Demystiﬁ ed  SELECT is a keyword that indicates the SQL statement retrieves records. The  SELECT  statement  does  not  change  records.  Other  SQL  statements,  such  as  INSERT,  UPDATE,  and  DELETE,  do  change  records,  by  adding,  editing,  and  deleting, respectively.  The names following the SELECT keyword are the names of table fields. Because   there is more than one field, the field names are separated by commas.  FROM is also a keyword. The name following it, Customers, is the name of the   table to which the fields belong.  CommandText Property  The OleDbCommand object has a CommandText property whose value may be a  SQL  statement.  Accordingly,  we  will  assign  the  SQL  SELECT  statement  we  discussed in the preceding section to the OleDbCommand object’s CommandText  property as follows: myCMD.CommandText = "SELECT CustomerID, " & _  "ContactTitle, CompanyName, ContactName FROM Customers"  NOTENOTE The value of the CommandText property may also be a table name or the  name of a stored procedure.  Linking the Command to a Connection  The  final  step  is  to  link  the  command  to  a  connection  to  the  database.  The  OleDbCommand  object  has  a  Connection  property  whose  value  is  the  database  connection to be used by the command. Accordingly, the following code assigns the  existing  OleDbConnection  variable  myConn  to  the  Connection  property  of  the  OleDbCommand object: myCMD.Connection = myConn  Accordingly, our code now reads like this:  Private Sub Form1_Load  ByVal sender As System.Object, _ ByVal e As System.EventArgs  Handles Me.Load    Dim myConn As New OleDbConnection    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       Dim strFile As String = dlgOpen.FileName       myConn.ConnectionString = "Provider=" & _   CHAPTER 14  Databases   271           "Microsoft.Jet.OLEDB.4.0;Data Source=" & _          strFile & ";"       myConn.Open         Dim myCMD As New OleDbCommand       myCMD.CommandText = "SELECT CustomerID, " & _           "ContactTitle, CompanyName, " & _          "ContactName FROM Customers"       myCMD.Connection = myConn    End If End Sub  Filling the DataGridView We now have defined a database connection and command. Here are the remaining  tasks:    1.  Package that database connection and database command in an   OleDbDataAdapter object.    2.  Create a DataSet object.   3.  Use the OleDbDataAdapter object to fill the DataSet.   4.  Use the DataSet to fill the DataGridView.  Creating an OleDbDataAdapter  The OleDbDataAdapter class packages a database connection with a set of data  commands.  The first step is to instantiate an OleDbDataAdapter variable, similar to how we   previously instantiated the OleDbConnection and OleDbCommand variables: Dim myAdapter As New OleDbDataAdapter  The OleDbDataAdapter class has a SelectCommand property whose value is a  command  that  contains  a  SQL  SELECT  statement. Accordingly,  the  following  code  sets  the  OleDbDataAdapter  variable’s  SelectCommand  property  to  the  OleDbCommand variable we instantiated and configured in the previous section: myAdapter.SelectCommand = myCMD  This  statement  not  only  connects  the  OleDbDataAdapter  variable  to  the  data  command it will use, it also indirectly connects the OleDbDataAdapter variable to  the database connection, because the OleDbCommand variable is connected through  its Connection property to the OleDbConnection variable.   272   Visual Basic 2005 Demystiﬁ ed  Accordingly, the code now reads as follows:  Private Sub Form1_Load  ByVal sender As System.Object, _ ByVal e As System.EventArgs  Handles Me.Load    Dim myConn As New OleDbConnection    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       Dim strFile As String = dlgOpen.FileName       myConn.ConnectionString = "Provider = " & _          "Microsoft.Jet.OLEDB.4.0;Data Source=" & _          strFile & ";"       myConn.Open         Dim myCMD As New OleDbCommand       myCMD.CommandText = "SELECT CustomerID, " & _           "ContactTitle, CompanyName, " & _          "ContactName FROM Customers"       myCMD.Connection = myConn       Dim myAdapter As New OleDbDataAdapter       myAdapter.SelectCommand = myCMD    End If End Sub  Creating a DataSet  The data used to fill the DataGridView cannot come directly from the hard drive  where  the  database  is  stored.  Instead,  an  intermediate  step  is  required. The  data  from the hard drive first must be loaded into memory, or RAM. Then, the data in  RAM is loaded into the DataGridView.  NOTENOTE This approach has advantages. For example, it frees the application from  having to exactly replicate the physical data and instead work with subsets,  supersets, calculated fields, and so forth.  A DataSet is a representation of the data  in this case, from several fields of the   Customers table, which is stored in RAM .  The DataSet class is part of the System.Data namespace, so you should add an  Imports System.Data statement, if you did not do so already earlier in this chapter  in the section “Importing Data Namespaces”: Imports System.Data Imports System.Data.OleDb Public Class Form1  You also need to add a reference to the assembly that contains the namespace  System.XML. You do so the same way you added a reference to the assembly that    CHAPTER 14  Databases   273  contains the namespace System.Data earlier in this chapter in the section “Importing  Data Namespaces”: using the Add Reference dialog box shown in Figure 14-13.  You instantiate a DataSet variable via the following code, similar to how  the  OleDbConnection,  OleDbCommand,  and   we  previously  instantiated  OleDbDataAdapter variables: Dim ds As New DataSet  The next steps are to clear and then fill the DataSet. The DataSet object has a Clear method. This method, as its name suggests, clears  the  DataSet  of  any  leftover  contents.  There  would  be  no  leftover  contents  here  because the code is running on application startup, but often you will need to use  the Clear method, so it is a good idea to get into the habit of using it. ds.Clear    The  OleDbDataAdapter  object  has  a  Fill  method.  This  method,  as  its  name  suggests,  fills  the  DataSet  with  its  contents,  which,  once  the  DataGridView  is  connected to the DataSet  as discussed in the next section , then are displayed in the  DataGridView that is bound to the DataSet. The first argument is the DataSet to be  filled. The second argument is the name of the source table  here, Customers . myAdapter.Fill ds, "Customers"   Accordingly, the code now reads as follows:  Private Sub Form1_Load  ByVal sender As System.Object, _ ByVal e As System.EventArgs  Handles Me.Load    Dim myConn As New OleDbConnection    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       Dim strFile As String = dlgOpen.FileName       myConn.ConnectionString = "Provider = " & _          "Microsoft.Jet.OLEDB.4.0;Data Source=" & _          strFile & ";"       myConn.Open         Dim myCMD As New OleDbCommand       myCMD.CommandText = "SELECT CustomerID, " & _           "ContactTitle, CompanyName, " & _          "ContactName FROM Customers"       myCMD.Connection = myConn       Dim myAdapter As New OleDbDataAdapter       myAdapter.SelectCommand = myCMD       Dim ds As New DataSet       ds.Clear         myAdapter.Fill ds, "Customers"     End If End Sub   274   Visual Basic 2005 Demystiﬁ ed  Connecting the DataGridView to the DataSet  The final step is to connect the DataGridView to the DataSet. This step involves two  properties of the DataGridView object: DataSource and DataMember.  The DataSource property is the data source of the data that the DataGridView is   displaying. That data source is represented by the DataSet variable ds: dgvData.DataSource = ds  The DataMember property is the name of the table  here, Customers  in the data   source of the data that the DataGridView is displaying: dgvData.DataMember = "Customers"  Accordingly, the completed code now reads like this:  Private Sub Form1_Load  ByVal sender As System.Object, _ ByVal e As System.EventArgs  Handles Me.Load    Dim myConn As New OleDbConnection    Dim dr As DialogResult    dr = dlgOpen.ShowDialog      If dr = DialogResult.OK Then       Dim strFile As String = dlgOpen.FileName       myConn.ConnectionString = "Provider = " & _          "Microsoft.Jet.OLEDB.4.0;Data Source=" & _          strFile & "";"       myConn.Open         Dim myCMD As New OleDbCommand       myCMD.CommandText = "SELECT CustomerID, " & _           "ContactTitle, CompanyName, " & _          "ContactName FROM Customers”       myCMD.Connection = myConn       Dim myAdapter As New OleDbDataAdapter       myAdapter.SelectCommand = myCMD       Dim ds As New DataSet       ds.Clear         myAdapter.Fill ds, "Customers"        dgvData.DataSource = ds       dgvData.DataMember = "Customers"    End If End Sub  Run the project! The DataGridView control should fill with data, as shown earlier   in Figure 14-11.   CHAPTER 14  Databases   275  Conclusion  Text files, which we’ve used up until now to save data, have several limitations. One  limitation is a text file’s inability to quickly retrieve specific data. There’s usually  no alternative to searching the text file from beginning to end, which can take a long  time if the text file contains a lot of data.  Another limitation is the inability to store relations between different data. For  example, a store may have both a list of customers and a list of orders—the orders  come from customers. With a text file, there’s no easy way to link an order in one  list with a customer in another list.  A database does not have these limitations. Specific data may be quickly retrieved   through keys and indexes, and different data may be easily linked.  This  chapter  used  the  Northwind Traders  database.  First,  you  learned  how  to  obtain and install this database. After creating a new Windows application, you then  created a connection between Visual Basic 2005 and the database. In doing so, you  selected the database format, a provider suitable for that format, and the path to and  the name of the database.  Next, you learned how to use Server Explorer, a tool provided by Visual Basic  2005 that enables you to view databases on your computer without having to open  or create an application.  The code components used for database-access code are organized in the .NET  library under the name ADO.NET. ADO was an acronym for ActiveX Data Objects,  a Microsoft data-access technology that was the predecessor to ADO.NET.  As you learned in this chapter, accessing the Northwind Traders database involves   the following steps:    1.  Establish a connection to the database.   2.  Define the commands you want to make to the database.   3.  Define a data adapter that packages the database connection and commands.   4.  Create a DataSet and then fill it using the data adapter.   5.  Fill a control  for example, a DataGridView  from the DataSet.  You created an application that implemented these steps and filled a DataGridView  control with data from four fields of the Customers table of the Northwind Traders  database.  The  project  you  created  in  this  chapter  is  a Windows  application.  In  the  next   chapter, you will learn to create a similar project that is a web application.   276   Quiz  Visual Basic 2005 Demystiﬁ ed    1.  What is a data provider?   2.  What does Server Explorer enable you to do?   3.  What is a table?   4.  What may each column in a table also be called?   5.  What may each row in a table also be called?   6.  What is ADO.NET?   7.  What class represents a connection to a data source?   8.  What class would you use to execute commands to a database?   9.  What class would you use to package a database connection with a set   of data commands?   10.  What is a DataSet?   CHAPTER  15  Web  Applications  Throughout this book we have been writing Windows applications. Indeed, many  of the applications with which you interact are Windows applications. For me, it is  a rare day that I don’t work with Microsoft Word and Outlook, for example.  However, I am, and perhaps you are as well, interacting ever more frequently  with web applications. One common type of web application is e-commerce, the e standing for electronic. For example, if you go to the website of Amazon or another  online  bookseller,  you  select  a  book   hint:  this  one   or  another  product,  put  the  selected product in a virtual shopping cart, when finished go to a virtual check-out  line, enter your credit card information  which better not be virtual , and make a  purchase. You then can go to the website of the overnight delivery service and track  the shipment as it wends its way across the country  or world  to you.  In  this  chapter,  you  will  learn  how  to  create  a  web  application  that  displays  information  from  a  database,  similar  to  the Windows  application  you  created  in  Chapter 14.  Copyright   2006 by The McGraw-Hill Companies. Click here for terms of use.   277   278   ASP.NET  Visual Basic 2005 Demystiﬁ ed  ASP.NET  is  a  term  you  likely  will  hear  of  soon  after  you  start  creating  web  applications. ASP.NET refers to the code components used for web applications,  similar to how ADO.NET refers to the code components used for database access. As with ADO.NET, you already know the “.NET” portion of ASP.NET. ASP is  an acronym for Active Service Pages, a Microsoft web application technology that  preceded ASP.NET. For those of you who are familiar with ASP, ASP.NET is much  easier  to  work  with. ASP  intermixed  HTML  with  script  code.  By  contrast, ASP  .NET  enables  you  to  develop  web  applications  in  almost  the  same  manner  as  Windows applications.  ASP.NET  started  with  Visual  Studio  2005’s  predecessor,  Visual  Studio.NET.  The  version  number  of ASP.NET  then  was  1.x   first  1.0,  then  1.1 . With Visual  Studio 2005, the version number is 2.x, starting with 2.0.  There  are  other,  competing  technologies  for  the  creation  of  web  applications.  ASP.NET  is  Microsoft’s,  and  consequently  the  one  heavily  supported  in Visual  Studio 2005.  Internet Information Services  Visual Studio 2005 requires one of the following operating systems: Windows 2000  Professional,  Windows  XP  Home  or  Professional,  Windows  2000  Server,  or  Windows 2003 Server. On all but Windows XP Home Edition, Internet Information  Services  IIS  is an optional component that may be installed with the operating  system. IIS may not actually be installed on your computer because it may not be  part  of  the  default  installation  of  your  operating  system.  However,  if  IIS  is  not  installed, you can add it as described in this section.  NOTENOTE You cannot install IIS on Windows XP Home Edition unless you make some  Registry changes that are not supported by Microsoft and therefore probably are  not a good idea to try.  Unlike ASP.NET 1.x and Visual Studio.NET, ASP.NET 2.x and Visual Studio  2005 do not require you to install IIS to create web applications that run locally   that  is,  on  your  computer .  Nevertheless,  unless  you  have  Windows  XP  Home  Edition, installing IIS does give you more options, such as making your web pages  accessible from more than your local computer, and it costs you nothing.   CHAPTER 15  Web Applications   279  Determining If IIS Is Already Installed To  determine  if  IIS  is  already  installed  on  your  computer,  open  Add Remove  Programs  from  the  Control  Panel.  From  the  left  menu  bar,  choose Add Remove  Windows Components. This will display the Windows Components Wizard, shown  in Figure 15-1.  In Figure 15-1, Internet Information Services  IIS  is checked, but with a dark  background. This indicates some but not all of the components of IIS are installed.  If IIS is checked but with a white background, as is Internet Explorer in Figure 15- 1,  then  all  of  the  components  of  IIS  are  installed.  If  IIS  is  unchecked,  as  is  the  Indexing Service in Figure 15-1, then IIS is not installed.  If IIS is checked, but with a dark background as in Figure 15-1, then you need to  check which of its components are installed. To do so, in the Windows Components  Wizard, highlight Internet Information Services  IIS  and click the Details button.  This will display, as shown in Figure 15-2, a dialog box showing the individual  components of Internet Information Services  IIS .  In  Figure  15-2,  almost  all  of  the  check  boxes  are  checked  because  those  components happen to be installed on my computer. This may not be the case on  your computer, depending on which components of IIS you previously may have  installed.  You don’t need the FTP  File Transfer Protocol  and SMTP  Simple Mail Transfer   Protocol  services, but I recommend you install the other components.  Figure 15-1  Windows Components Wizard
