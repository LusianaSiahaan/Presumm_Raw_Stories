ALL RIGHTS  RESERVED.  No PART  OF THIS  PUBLICATION  MAY  BE  REPRODUCED,  DISTRIBUTED,  OR TRANSMITTED  IN  ANY  FORM  OR  BY ANY  MEANS,  INCLUDING   PHOTOCOPYING,  RECORDING,  OR  OTHER  ELECTRONIC OR  MECHANICAL   METHODS,  WITHOUT THE  PRIOR  WRITTEN  PERMISSION  OF  THE  PUBLISHER,   EXCEPT IN  THE  CASE  OF  BRIEF  QUOTATIONS  EMBODIED  IN  CRITICAL REVIEWS   AND  CERTAIN  OTHER  NONCOMMERCIAL USES  PERMITTED  BY  COPYRIGHT  LAW.   Although the author and  publisher have made every effort to  ensure that the information in this book was correct at press time,  the author and  publisher do not assume and  hereby disclaim any  liability to any party for any loss, damage, or disruption caused  by  errors or omissions, whether such  errors or omissions result from  negligence, accident, or any other cause.   This publication is  meant as  a source of valuable information for  the reader, however it is not meant as  a substitute for direct expert  assistance. If such  level of assistance is  required, the services of a  competent professional should be sought.   ALL TRADEMARKS,  MARKS  MENTIONED  IN THIS  BOOK,  ARE  PROPERTY  OF  THEIR   RESPECTIVE  OWNERS.   COPYRIGHT   2019 DIMITRI  LASLO    Preamble   The present book offers a detailed review of the new technologies  for the development of desktop GUI  application with .NET Core 3.  At the time this book is  written the .NET Core 3 final version has  just been  released, and the impact on the .Net developer  community is  already huge. The  perspectives offered by the use of  this new major release of .NET Core expand its potential fields of  application.   The subject is  evolving very quickly but we are pretty confident that  the technics and fundamentals presented will remain relevant for  the next version of the Core framework  it should  be the 3.1  according to the Microsoft roadmap  .   . NET Core 3 is a major step for the Microsoft's developer  community and its integration in Visual Studio 2019 seems to  indicate that it will become the main development technology of  the Redmond editor for the coming years.   Be  assure that we will follow the future versions of these  developments to keep you  up to date with this, always evolving,  amazing technology.    TABLE OF CONTENTS   Target public for this book ......................................................... 10   How to read that book .............................................................. 11   Technical options ...................................................................... 12   Technical notations ................................................................... 13   Chapter 1.   Introduction ......................................................... 15   1.1  General overview .............................................................. 15   1.2  Why develop multiplatform apps? .................................... 18   Chapter 2.  Presentation of .NET Core 3 .................................. 22   2.1   Little historic of the Microsoft .NET framework ............... 22   2.2  Why .NET Core? ................................................................. 25   New Features ..................................................................... 27   .NET Core 3 Roadmap ........................................................ 30   Chapter 3.  Projects managements essentials .......................... 34   The  planification of your project ....................................... 35   The Software Development Life Cycle  .............................. 37   Define multiple environments ......................................... .40   Source control .................................................................. .41   Chapter 4.  GUI development best practices:  User experience  45   4.1   Best  practices for interface definition ............................... 47   4.2  General screen  design and  ergonomic concepts ............. .49   4.3   Layout recommendations ................................................. 50   4.3.1   4.3.2   Type of controls to use ............................................... 51   How to use controls ................................................... 51   2.3   2.4   3.1   3.2   3.3   3.4    4.3.3   Sketch the application window .................................. 54   4.3.4   Typography ................................................................. 56   4.3.5   Color scheme ............................................................. .57   4.4   The challenge for multi platform GUI  design ..................... 58   Chapter 5.  Basic coding technics for c application ................. 60   5.1   5.2   Application Configuration ................................................. 61   Logging and Tracing ........................................................... 65   5.2.1  Microsoft .NET Core logging system .......................... 66   5.2.2   Advanced structured logging system: Serilog ............ 67   5.3   Data  access:  Entity Framework Core ................................. 71   5.3.1   Database Provider ...................................................... 72   5.3.2   Architecture of the EF  Core ........................................ 72   5.3.3   EF Core  Installation .................................................... 73   5.3.4   . Data  model ................................................................. 74   5.3.5   Recommendations for the use of EF Core ................. 76   5.3.6   Basic sample usage of EF  core ................................... 77   5.3.7   Entity Framework Core: tutorials and  learning .......... 80   5.4   External Services Consumption ......................................... 81   5.4.1   5.4.2   5.4.3   Building the Web  request .......................................... 82   Processing the request and retrieve data .................. 82   Processing JSON  result ............................................... 82   5.4.4   Sample code for a REST client.. .................................. 83   5.5   5.6   Threading GUl .................................................................... 84   Using unmanaged dependencies ...................................... 86    6.4.1   6.4.2   6.4.3   6.5.1   6.5.2   6.5.3   5.6.1   5.6.2   5.6.3   P lnvoke ..................................................................... 87   Marshalling ................................................................. 89   OS detection and  identification: ................................ 91   Chapter 6.  Setup development environment .......................... 94   6.1   6.2   Create developer account for each  platform you target .. 95   Physical computer Vs virtual machine .............................. 97   6.3  Multiplatform development environment architecture ... 98   6.4   .NET Core 3 install: Runtime or SOK? ................................ 99   On  Windows ............................................................ 101   On  Linux Ubuntu  or other Debian distribution  .... 102   On  macOS  Mojave ................................................... 104   6.5   Install development stations .......................................... 106   The Windows station  main  ................................... 106   The Linux station ..................................................... 109   The macOS station .................................................. 110   6.6  Configuration for remote debugging ............................. 111   6.7   Setup target test machine .............................................. 115   Chapter 7.  Testing your program ........................................... 116   7.1   Unit testing ..................................................................... 117   7.1.1  What to test? .......................................................... 118   7.1.2  MSTest  Visual Studio test framework  .................. 118   7.1.3   Mock concept .......................................................... 123   7.2   Functional testing ........................................................... 126   Chapter 8.  Multiplatform Development solutions ................. 128    Choose the multiplatform application type: The right tool   8.1  for the job .................................................................................. 129   8.2   Console GUI applications ................................................ 130   8.2.1  What is Terminal.GUI ? ........................................... 133   8.2.2   Terminal.GUI screen  design .................................... 135   Console GUI example applications .......................... 137   Pro cons console GUI .............................................. 146   8.3   Electron.NET: ASP.NET GUI  applications ........................ 147   8.3.1  What is Electron? .................................................... 148   8.3.2   Presentation Electron.NET ...................................... 148   Setup of NPM  and  Node.JS ..................................... 150   Electron.NET QuickStart .......................................... 155   8.3.5   Electron.NET application example .......................... 158   8.3.6   Pro cons Electron.NET application ......................... 165   8.4   C++ native GUI applications ........................................... 166   Presentation of LibU I .............................................. 169   .NET Core wrapper for LibUI ................................... 170   Form Screen Design ................................................ 173   8.2.3   8.2.4   8.3.3   8.3.4   8.4.1   8.4.2   8.4.3   8.4.4   Sample Projects ....................................................... 175   8.4.5   Review, of LibUI  based  .NET Core 3 application ......  182   8.5   GTK GUI  applications ...................................................... 182   8.5.1   Presentation of GTK ................................................ 183   8.5.2   GTK Install ............................................................... 186   8.5.3   Presentation of GTK .............................................. 196   8.5.4   Glade: The  user interface designer ......................... 200    8.5.5   GTK samples applications ...................................... 206   8.5.6   GTK Themes:  Installation and  Configuration .......... 215   8.5.7   Recommendations for Gtk application development  216   8.6   QT  QML GUI  applications ............................................... 217   8.6.1   QT presentation ...................................................... 218   8.6.2   Presentation of QML.NET ....................................... 220   8.6.3   QT Design Studio ..................................................... 224   8.6.4   Using Photoshop resources as GUI ......................... 226   8.6.5   Samples program GUI  with QML.NET ..................... 229   8.7   Avalonia GUI applications  XAML  .................................. 246   8.7.1  What is Avalonia? .................................................... 246   8.7.2   Avalonia Visual Studio Extension ............................ 247   8.7.3   Avalonia Studio ....................................................... 249   8.7.4   Avalonia ThemeEditor ............................................. 251   8.7.5   Sample GUI  program with Avalonia ........................ 252   8.8   Comparison of the solutions reviewed .......................... 259   Chapter 9.  Compilation and Build with .NET Core 3 ............... 261   9.1   9.2   9.3   9.4   9.2.1   9.2.2   .NET Core CLI  local tools ................................................. 264   .NET Core CLI  building options ....................................... 265   dotnet build ............................................................. 266   dotnet publish ......................................................... 266   Structures oft he CSPROJ file .......................................... 268   CoreRT  Ahead Of Time  compilation ............................. 274   9.4.1   Architecture ............................................................ 275    9.4.2   9.4.3   Benefits ................................................................... 276   Prerequisites install for CoreRT ............................... 277   9.4.4  Machine Native compilation scenario .................... 279   9.4.5   CoreRT console project example ............................ 285   9.5   The .NET Compiler platform: Roslyn  .............................. 287   Chapter 10.  Application performances improvement .............. 289   10.1  Use Visual Studio Running analysis tools ....................... 290   10.2   .NET Core 3 performances benchmarks ......................... 294   10.2.1  Benchmarkdotnet example solution ....................... 297   10.3  High  performances coding tricks .................................... 298   10.4  Native executable compression ..................................... 300   10.4.1  Quick-start guide for UPX ........................................ 301   Chapter 11.  Multiplatform packaging and deployment ........... 304   11.1  Developing a setup program for each  platform ............. 305   11.1.1  Generate an  install program for Windows ............. 305   11.1.2  Generate an  installer for MacOS ............................. 306   11.1.3  Generate an  installation package for Ubuntu ......... 308   11.2  Multiplatform unified setup program development:  lnstallBuilder .............................................................................. 309   11.2.1  What is lnstallBuilder .............................................. 310   11.3  Recommendations for the packaging and the deployment  tools of your application ............................................................ 312   Chapter 12.  Perspectives for the solutions reviewed ............... 315   References  320    TARGET PUBLIC FOR THIS BOOK   Even  if this book tries to be understandable by a large public a  minimal knowledge ofthe software development is  required.   This book target mainly 3 types of developer's profile.   The first profile is the C .NET framework developer who want to  update his knowledge to the latest Microsoft technology and  framework allowing him to target Linux and  macOS added to the  classical Windows system he used to develop for.  Regarding the  current roadmap of the .NET Core,  it should  be the future  development main framework for Microsoft  The classical  .NET  Framework will of course still be supported for the legacy  developments .   The  second profile is the ASP.NET C developer who wants to  upgrade his knowledge for the desktop development environment  and  developpe GUI application for the 3 main platforms available  on the market: Windows, Linux,  macOS.   The third profile who could be  interested by the reading of this  book is the C++ developer  the syntax used  by C is  quickly  assimilate by C++ developers  who wants to add a new language for  developing desktop application and increase their productivity with  the use of the .NET Core 3  it could be also for them the occasion to  acquire the knowledge of a technology widely used on the web and  cloud .   You  should  have a minimal experience in the development of  software solutions with Visual Studio C.  and a minimal knowledge  of the targeted systems  Windows, Linux,  macOS}.    How TO  READ THAT BOOK   As this is  usually the case for most of technical books, this one can  be  read  from the beginning to the end. Read the entire book  sequentially provide to the reader a better comprehension of each  concept explains by the author.   Nevertheless, this book has been written with the idea to allow the  reader to jump start to the specific information relevant in  his  context. The book can  be used  as technical reference for the use of  the technologies presented.   If the reader has already a solid software development culture, it is·  possible for him to skip the chapters 3,4, and S even it is always  useful to remember the principles presented  specifics to the C  GUI  development project and jump to the part he is  interested in.   Less senior developer should  read the book from the beginning for  knowing the core concepts, methods and  practices used for the  coding of a professional graphical desktop application.    TECHNICAL OPTIONS   Many technical options have been  chosen for the writing of this  book, they aim to avoid confusion for the developer, and  define a  frame where the presented projects can  be developed.   Main development station: For simplification purpose, all the  samples this book provides are implemented on Windows 10 v1809  and Microsoft Visual Studio 2019  Community Edition .   Targets OS:      Ubuntu 18.04  Bionic  for the Linux,     Mojave 10.14 for the macOS,     Windows 10 1809 for Windows platform.   The setup ofthese machines will be detailed in  a dedicated  chapter.   Languages:  Mainly C, XAML,  QML,  HTML & JavaScript, C++  it  depends of what kind of project you want to develop.    TECHNICAL NOTATIONS   This book tries to offer you the clearest view and  a quick readability  on the .NET Core 3 desktop application development, for achieving  that goal a graphic chart is  used illustrating the purpose of the  information presented.      For Command  Line  instructions:   C:>  Command  line   sample      For HTML, JS,  CSS,  Json, XML file:   ...  Index.html          For C code files:   ProgramName.cs       For NuGet packages references:   1,  nuget  Microsoft.Extension.Sample      For GitHub references:   {j  http:  www.github.com sample      For Web pointers and  references:   http:  www.information.-references.com      For tools and utilities software  to install, test, use or   review    ::,!,  I http:  www.samplesoft.com   Note: You will notice that some GitHub related links are in  reference links, in this case the documentation provided is the  central point of interest, if this is the code provided who has to  focus your attention the GitHub format will be used.    CHAPTER 1: INTRODUCTION   .N   Core 3.0   Chapter 1.   INTRODUCTION   1.1  GENERAL OVERVIEW  This  is a fantastic time for C developers, as the Microsoft .NET  Core 3 come out it has never been so easy to developpe  applications for Windows, Linux and  macOS based on the same C  source code.   This book will help you to define witch kind of GUI will feet the best  for your desktop application according to the technology you want  to use and the OS you are targeting.   The  .NET Core  since the version 1.0 to the latest 2.2  has been  widely acknowledged by the developer community for cross-   platform for web and server applications  back-end, API, Serverless  ...  . The third version will provide an  integrated solution to the  development of desktop apps too .   . NET Core 3 brings an  ideal solution for multiplatform application  solution engineering, it allows the developers to centralize the code  in a single project for every OS.   Visual Studio 2019 can  be used  with all the productivity benefits  that's bring  for the C development of a solution working on  Windows, Linux and  macOS.   We will provide a special introduction for the C  .NET framework   classic   developers to adapt quickly to the new .NET Core  environment.   A presentation of the best practices for this project's type will also  be provided allowing you to start a new project as fast as  a single  OS targeted project would be. These  rapid presentations will help  you to drive wisely your developments and avoid many pitfalls  intrinsic to these project's specifics.   We will review the new features included in  .NET Core 3 and  why  choose this framework among the other development suites  available on the market like Node.JS,  Mono, ... Java.   The essentials knowledge required for a professional software  development project management will be study  planification,  sdLC, tests  as well as the general organization of your  development environment.   A rapid  introduction of C common coding technics will  be  provided  for solving quickly, usual requirements of a project:      database access.     Logging.    CHAPTER 1; INTRODUCTION      web services access.     using the native API .       Of course, if you  are a C veteran developer you could skip this  part .   The fundamental knowledges specific for the conception of a GUI  will also be introduced covering several aspects:      Ergonomic.     Basic rules about GUI  design.     Graphic presentation.     Typography.     Colors scheme.   This  part is  relevant if you  do not have any solid theorical  knowledge about the design of a human to computer interface.   After that we will review the setup of a complete development  environment on Windows  this is the main development station   for developing an  application targeting Windows, Linux  ubuntu   and  macOS  Mojave .   Since the best IDE for developing with .NET Core 3 is  Microsoft  Visual Studio 2019 we will present you the general concepts and  tools useful for being quickly efficient with this marvelous IDE   available freely from the Microsoft web site in its community  version . We will review how to code and debug an  application  targeting multiple OS.   Afterwards, we will present you several GUI solutions for your  project illustrated with example projects you can  straightly use as  tutorials or as  boilerplates for starting your project: Console GUI,  Native GUI, ASP.NET GUI, XAML ...    We will show you how to develop and implement the tests projects  required for the development of your application. We will see how  to implement the tests during the coding step of your project, and,  how to improve performances of your application with the Visual  Studio tools.   Once the coding step of the project is  achieved we will see how  build, package and deploy the application on each specific platform  and review the tools for providing to your users a positive  experience with the setup process of your application.   In the present book, we covered the whole development cycle of a  multiplatform application providing you a singular leverage for  accomplishing your project in the most efficient ways possible. We  hope this book will be useful for conducting your multiplatform  project by giving you  direct access to references from multiples  resources and samples source code from the author and others  Opensource projects.   These entry points will provide you the keys for finding relevant  resources or going deeper into a specifics technical area your  project required.   We hope this book will h~lp you to achieve your multiplatform  project in the most successful way and minimize the times and  resources needed for accomplishing this complex kind of project.   1.2  WHY DEVELOP MULTI PLATFORM APPS?  That shou Id  be the first question you  ask to yourself when you  want to start a project targeting multiple platforms for a desktop  application. In  deed targeting multiple OS  is quite usual in the  mobile development world but it is  not so obvious in the desktop    CHAPTER 1: INTRODUCTION   development domain. And  there is a simple reason for that, the  "hegemony" of the Windows operating system on the desktop  platform market. This dominance is  illustrated by the graphic   figure 1 , Windows represent 75% of the desktop market!   OS  Market in 2019   Linux   MacOS  17%   -ifigurel}    Source: StatCounter.com Mai 2019}   This chart above  figurel} illustrates only the market for internet  connected computer but it seems quite obvious Microsoft  Windows broadly dominate.   So why develop for others platforms?   Because most professionals using these systems  macOS and  Linux Unix  are prone to actually buy software, especially software  specialized in their job's domains.    macOS and  Linux systems are mostly used in the professional  environment and  in a professional environment the software's  solution have to be bought  legally  for several reason:      Benefit of a customer's support adapted to the enterprise's   level of requirements.      Terms of licensing.     Commercial exploitation.   And, indeed, many software's domains of application are currently  monopolized by these platforms:      macOS in the sectors of graph ism, audio edition, video       edition and in the artistic sector mostly.  Linux Unix for architecture CAD,  electronic conception,  market trading, engineering software applications, industry  dedicated software ...   This  is  in  part due to the good stability of those systems  Linux,  macOS .  Besides Linux and macOS have the reputation to have  better performances  with the same hardware resources} than  Windows. Aficionados of macOS and Linux argue also the fact that  they can  configure and tune the system much more easily than on  Windows.   So,  if you plan to develop a software for a "niche" market you can  surely choose to do it by developing a multi platform project as  presented in this book. Thus, you will answer the issues for your  usual customers but also open the potential market of your  software to the others OS  users.   The fact that a commercial software is available for several OS,  will  also guarantee to the user that the knowledge acquired on the  application is not dependent of the system he uses  ex:  Photoshop,  Math cad  ... }.  It is especially relevant when the use of the software    CHAPTER 1: INTRODUCTION   application is very complex and requires a learning curve for being  used  properly. A user will  be much more incline to learn the use of  a particular software if he knows that knowledge will be pertinent  on several other platforms.   There is another reason  for choosing multiplatform application: the  positive psychological impact on  your customers, if you can  provide  a software solution whatever the system he uses. The  multiplatform distribution of your software implies a good technical  mastering in  every steps of the development process and  indicate  you  are not dependent of one OS.   Multi platform development offers you   and your company  the  possibility to not be captive of a particular OS often subject to  drastic changes, who can  even challenge the validity of the  application you are developing.   You  have to keep in  mind that achieving a such  control over the  software you  develop come with the price of a bigger effort during  the development phase especially if your project requires the use  of native functions API   in the other cases .NET Core 3 provide you  a solid and adaptative way for the implementation of the project .    .N   Core 3.0   Chapter 2.   PRESENTATION OF .NET CORE 3   .NET Core  is  a product born in  2015  actually in beta since 2014 .   It has been defined from the classical  .NET Framework. Many  technical options chosen during the .NET framework evolution  have  define the need of new paradigms.   We will see how these evolutions of the .NET framework took place  and in which context the need of the new framework:  .NET Core is  appeared obvious.   2.1  LITTLE HISTORIC OF THE MICROSOFT .NET FRAMEWORK  The first .NET Framework was delivered in  2002 and was a  proprietary system   a  black-box} from Microsoft. It was a response    CHAPTER 2: PRESENTATION OF .NET CORE 3   from the Redmond editor to the Java framework gaining in  popularity at this time. As the Java framework, the .NET framework  uses a virtual machine for the execution of the program.   With the .NET framework the source language was not any more  compiled to machine code  but to a MSIL  Microsoft Intermediate  Language , this language is compiled at runtime by the CLR   Common  Language  Runtime  to machine code, executed in the  .NET framework virtual machine.   This runtime translates in  real time each  portion of the code who  has to be executed through native code for the platform.   -  Added to this compilation capability the CLR  provide many services  for the code generated, here is  a non-exhaustive list of these basic  features provided:      Base Class Library  BCL .     Threading Model.     Type checker.       Exception  manager.     Garbage Collector.     MSIL to Native code compiler.     Class Loader.   Few times after Microsoft released  many subsets of the .NET  framework adapted to each field of application the company  encountered: .NET Compact Framework, Silverlight, Windows  Phone ...   Each of these frameworks incorporates its own set of specific  functionalities at the framework level and thus has become  incompatible between them  for most of the code .   Due to their specific evolutions  vertical  of their AP ls the  development of application targeting multiple type of platform was  more and  more costly in  matter of time and  resources due to the  vertical evolutions of each framework.   It can  easily be explained by the fact that initially there was no will  to share code between frameworks because these frameworks  were dedicated to their specific field of applications and platform  context.   But nowadays the cross-platform development become a very  common requirement for many projects. Many applications blur  the lines between vertical .NET frameworks: often a web  application use Windows dedicated functionality, desktop or phone  application use web backends  Web Services or Web APls   and so  forth ...   That is in that context that .Net Core and NET Standard  has  been  planned and  defined as  a new subset of the .NET Frameworks.    CHAPTER 2: PRESENTATION OF .NET CORE 3   Here is  a little schema explaining the link between .NET framework  and  .NET Core.    source  Microsoft    The .NET Standard can  be use with the .NET framework and .NET  Core, this library format provides an amazing portability whatever  the framework you intend to use with it.   2.2  WHY .NET CORE?  The complexity implied by the use of multiple frameworks, each  specialize in their own field, become the pitfall of most  multifaceted platform development. As these kinds of development  Is  turning into increasingly commonplace the need of a new  framework appears.   That's in that context that appear the need of a minimal framework  where all the specifics for each  platform and features will be  Integrated threw NuGet package instead of being integrated inside  the core framework  like it was the case previously for the .NET  framework .    Furthermore, the .NET framework is a part of the Windows system,  that's not the case for .NET Core 3 who can  be distributed with the  application in a self-contain  manner and is self-sufficient on its  own.   The well though architecture of the .NET Core  provides many  benefits for its exploitation in a production environment as you can  see   figure 1} compared to the classical  .NET framework  who is  Windows dependent .    figurel     Source  Microsoft    A key point in the .NET Core  is the use of a dedicated packet  manager format: NuGet.   The NuGet packaging system is integrated in Visual  Studio 2019 and  is like APT for Debian, NPM for Node.js or pip for Python.  NuGet  allows the availability of every and  each  library by encapsulating  binaries and their dependencies inside a single file. This file  .nupkg  extension  is a ZIP archive who contains a manifest with all the  associated dependencies and the targeted frameworks  information.   Thus, a NuGet package can  implement a complete feature on its  own for a multiplatform use.    CHAPTER 2: PRESENTATION OF .NET CORE 3   2.3  NEW FEATURES  Like his predecessors the .NET Core 3 is Opensource and  cross  platform. With this implementation, Microsoft has included the  support of C 8,  a major release of the C language.  But this is  not  the only addition to the .NET Core  Microsoft has done in this  version.   The two following schemas illustrate the job done by Microsoft for  the third release of their new iconic framework: .NET Core 3. We  can see that is a major release compare to the .NET Core 2 who was  basically ,.an  update of the first version designed for running Web  applications and services for cross-platform environments.   ,NET Core 2:    source  Microsoft     .NET Core 3:    source Microsoft    As you can  see  .NET Core 3 not only target web server platform but  also gain  many new functionalities; as Al  and IOT.   But unfortunately, the desktop development is a Windows only  functionality  it relies on  WinFX, Windows dependent .   By proposing these new functionalities Microsoft fully validates the  basic concept underneath .NET Core:  the modularity is included  only in specialized packages  and  not integrated in the framework  as  it was the case  in  .NET framework .   A major addition to .NET Core 3 is the support of C 8 new  functionalities:      Default interface member.     Nullable references types.     Switch expressions.     Property patterns.     Tu pies patterns.    CHAPTER 2: PRESENTATION OF .NET CORE 3      Static local function.     Nullable reference types.     Asynchronous streams.     Floating-point API  improvements and compliance with IEEE   standard.      Parsing and format fixes.     New math  API   Bitlncrement BitDecrement which match   with nextUp nextDown IEEE  operations}.   Other features included in the .Net Core 3:      APls to access performance-oriented CPU  instructions, such  as the SIMD. These  instructions can  improve performance.      A fast in-box JSON  Writer and JSON  document.     GPIO   general purpose input output} support for the       Raspberry Pi  computer.  Improved local dotnet tools. Local tools are associated with  a location on-disk, enabling per-project and  per-repository  tools.      Assembly unloadability, which is  part of the   AssemblyloaderContext. The capability enables a loader  context to be  unloaded, with memory released for  instantiated types, static fields, and for the assembly itself.  An  application should be able to load and  unload assemblies  via this mechanism without a memory leak.      For Visual Studio support, the C  beta features the addition  of Windows Presentation Foundation  WPF} and Windows  Forms templates to the New Project Dialog, to make it  easier to start an  application without using the command  line.      MSIX application package format deployment, for deploying   .Net Core 3 desktop apps to Windows 10.       Running desktop apps on  .Net Core 3 will offer performance:   improvements.   Every Windows  see the .NET Core 3 prerequisites in the "Setup  development environment" chapter  applications will be able to  run on .Net Core Version 3  support now Windows Forms, Windows  Presentation Foundation, and Universal Windows Platform XAML .   Note: .NET Core 3 adds the ability to build Win Forms, WPF  applications on.NET Core.  But, once again, these type of  applications are not multiplatform and  can  be run only on the  Windows system  WinFX relies on the Windows API}. These  Winforms and WPF applications are Windows only and do not offer;  any possibility to go  multiplatform soon  there is  no roadmap  available  .   . NET Core 3 gives the Desktop Developer flexible deployment, side- :  by-side single EXE too.   Combined together the advantages and the new features offered  by .NET Core 3,  make of this framework the most cutting edge and  versatile solution for being used  in  many developments.   This release of the .NET Core outperforms easily the classical Java  framework, NodeJS or Python solutions in terms of performances,  flexibilities and  languages  with C 8  features. Microsoft has  realized, with this version and the tools developed on the side, a  game changing proposition in the development world  not less: .   .NET CORE 3 ROADMAP   2.4  As a new Microsoft technology, .NET Core 3 has a planning  roadmap for it differentreleases. The multiplatform framework   ,  ,  ··.]   ,.J   i  ·1 ,,   '    " j  '    CHAPTER 2: PRESENTATION OF .NET CORE 3   developed by Microsoft is  knowing a growing success with  many  developers, especially the developers working in the cloud  environment Azure of course, but also AWS  who provide all the  tools for .NET Core developer , and Google Cloud   that's the biggest  cloud service providers .   But as  .NET Core acquire more maturity it can  be used in a much  wide field of application  desktop for example : .   The roadmap  figure 1  of the different releases could  be subject to  changes, and the features included are not yet been  defined. That  Is  because .NET Core is  under Opensource license and many  features are proposed and  implemented by the community  mainly  Microsoft professionals and  independent developers .   For example, if the community make it clear that a feature should  be Include in the next version, the feature will be added to the next  version  when it is technically possible .  So, if you have great ideas  for the framework do not hesitate to post a request on  .NET Core  development web site  reference link below  and if it happen to be  validated  by the development team your feature will be integrated  In future.NET Core release.    ,NET Core 3  prevlew4    Apnl 2CU9    NET Core 3  r;ireviewS'    Ma! 2019    NET Core 3  Pf¢V1ew 7    July Z.019    _   .Nfr Core 3' prewew 9, RCl  September 2019    NET Core 3  publfc release  September 1019     Roadmap .NET Care     Source Microsoft 2019    This roadmap for the release of the .NET Core version  has  been  subject to many changes, and is always subject to modifications  a  reschedule happen often . Since the preview 7 .Net Core 3 is part of  the update of the Visual Studio 2019 preview. Since September  2019 the .NET Core 3 framework is  included in Visual Studio  with  the release version .   You  can  notice that the LTS   Long Time Support: actually 3 years   version of .NET Core  is  planned at the end of the year 2019, so the    CHAPTER 2: PRESENTATION OF .NET CORE 3   sustainability of your development, crucial in a corporate context,  WIii  be ensure for at least several years from this date  at least 3  years support .   The update of your .NET Core 3 code to the .NET Core 3.1 should  Imply a minimum of modifications  may be none  of your  application developed using the .NET Core 3.   The possibility of including the framework with the application and  not globally on the machine  as  it was the case for .NET Framework   Is a major problem-solving pattern and also increase the portability  and the durability of the applications developed today.    .N~   Chapter 3.   PROJECTS MANAGEMENT   ESSENTIA   Before starting to review the solutions for the development of a  GUI  desktop application, we will review essentials knowledges  required for a successful software development project.   i   1  The realization of complex software products is facilitated by the  l  !I   l  use of proofed methods of development. If you do not have  extended experience in this area this chapter is very recommendedJ  i  you to read carefully,  The developments issues you  can  encountered during the development of a multiplatform software· j  are multiple and you do not want to add  classical  and already  solved  issues to these specifics' issues. The use of a solid   !!   ·. 1,    l   ·1   '    CHAPTER 3: PROJECTS MANAGEMENTS ESSENTIALS   development methodology is very recommended for every phases  of the project  sci LC .   These methods are especially recommended if your project implies  multiple person  designer, coder, Dba, architect...  and  if you have  to produce a project status report for your hierarchy.   The basic requirements you  should consider before starting a  complex software development project are:      Planning of your project  and  the use of a project planning   fool even if that's just done on  an  MS Excel sheet .      The management of the project: The Agile method provide   a flexible way for medium size team.      The use of a source control tool.   These  can  avoid you  many pitfalls often encountered during  development project.   3, 1  THE PLANIFICATION OF YOUR PROJECT  Even  if you are alone  and especially if a team work is implied   working on your project, a phase of planification is heavily  recommended before starting to code.   During this phase you will:      Organize  formalize your vision about each step of the   development of your product.      Define task to complete before starting others  task   hierarchy .      Define time schedules of the development.     Clarify role of each  person working on the project  architect,   developer, designer ...  ,  if needed.    In the real world, specifications are often subject to unplanned  changes and your project management tools should allow you to  reschedule each task involved by those changes and forecast the  cost  in time and  resources  implied by those modifications. The  global visibility on the progress of the project can  be provided at  every instant of the project avoiding misunderstandings with the  hierarchy and or getting a sharp view of the progress.   The definition of a time schedule helps you to identify if the  development team encountered any problem on a specific task and  reallocate resources accordingly  if the work implies for the  development or another task was underestimate overestimate .   The best tool available for doing this is Microsoft Project.   MS Project not only provides you a great tool for planification  with,'  Gant chart, task hierarchy, human resources management ...   but  constitute a central tool for the management of your Software  Development Life Cycle  sDLC .  You  can  model each step of the  project and  attribute resources: time and  human  including the  specifics technical skill required.   For simple project you can  use a tool to keep on tracks your  project. It can  be done with an  MS  Excel  dedicated sheets or free  project management website. But the dedicated software  developed by Microsoft provide an easy way for just doing that,  with many years of development of the product provides an  unchallenged solution for the project's management task.   Here are the resources you can  consult for achieving your project  management.    CHAPTER 3: PROJECTS MANAGEMENTS ESSENTIALS   Microsoft Project:  http:  products.office.com Microsoft Project  Alternative to MS Project:  http:  www.projectinabox.org.uk  http:  www.projectlibre.com   https:  www.ganttproject.biz  down load   MS Excel  Project Management sheet template:  https :  www.officetimeline.com project  management excel   ,  https:  www.vertex42.com Exce1Templates exce1-  project-managementhtm I   Along these references you  can find  many Excel  worksheets who  will allow to plan  a simple project avoiding you the investment in  a  dedicated tool as  MS Project,  nevertheless a much  more complex  project will require the use of the dedicated software.   3.2  THE SOFlWARE DEVELOPMENT LIFE CYCLE  The development of a software project requires to identify each  step  or so-called  phase  for achieving it. The  phasing ofthe project  according to standard phase is called the software development life  cycle.   A software development project can  be  phased  for the validation of  each  step in a development life cycle  of the software product as  described  figure 1 .    \   I  i  J   j  l  ~  I  .!   J  i .,    figure 1: sDLC    Specifications  and requirements gathering : Do not down view  j   the specifications phase  because it will define the architectures anq,  technologies choices.  During this phase you will:      make the analysis   possibly with tools like UML .        and possibly define form design  functional .   retrieve the user's stories  requirements .   ,  '~  I  I  1  Architecture and coding:  During this phase you will define the  software architecture needed for matching the specifications donej  previously. You will have to integrate also environment constraints[]   company  to define them. Once the target architecture is defined  i :,~  :j  the coding of each functionalities can  be done. The use of design  pattern is  useful if you plan to use several developers on the same     part of the program. This phase includes also unit testing for the  validation of each  piece of code produced by the development  team.    CHAPTER 3: PROJECTS MANAGEMENTS ESSENTIALS   Integrations and Tests: The test phase is important, because it  allow to the programmer s  to verify if each  brick developed for the  project works well the others, and thus, provide the expected result  software. It is  not possible to deliver quality software without  testing it, there is always an  issue,  or worth a bug  yes it happens .  Tests can  be automated by the use of a Continuous Integrations  tool  like TFS Devops .   Validation by user s : The users have to validate the final product,  It Is  an  important step, but underestimate by most of big company   because of the architecture of their structure of development . It is  Important that the general feelings of the .final user match the  expectation set during the specifications phase. This validation  Improves also the perception of quality of the final software for the  users.   Release and deployment:  During this phase the software is  already  produced  at least an executable is available  but the development  of the project is not yet finished.  In  many cases  especially for  desktop application, the final software has to be integrated in  a  setup install package who will allow a smooth distribution to the  users. This is  a crucial step in a multiplatform project  because  of  the specificities of each  OS  regarding the software installation  process .    Each  iteration in the cycle aim to fix bugs,  integrate new features o,  changes in the specifications, improve performances. In this  context this cycle is  iterating during along the life of the software.   3.3  DEFINE MULTIPLE ENVIRONMENTS  It is  important during a project to separate in  several  environment~  the developments done. It helps the developer to maintain  coherence and continuity between the different bricks he should  develop for achieving his goals, without conflict with other  developed parts of the project.   These environments corresponding to a computer  or a virtual  machine  or simply to a repository  or a folder  for the storage of  the data needed during development  like documentations,  database script, specifications ...  .   A Wiki dedicated  web site  for each environment could be often  pertinent. The use of a Wiki aims to keep a knowledge base for  each element or specific technics used during the development.  The Wiki web site is especially useful on  project with a small team  .i  or with remote human resources.   Besides the knowledge base regarding the development, the  project during his evolution will need several  distinct environments  '  for fulfilling requirements of each  phase.   The usual habit in that domain is to define 3 environments:   Development: In this environment the developer can create side  projects for the validation of complex parts of the program. It is an  informal environment dedicated to the coders and only them.    CHAPTER 3: PROJECTS MANAGEMENTS ESSENTIALS   T1st:  In this environment the developers will release the project for  the validation, usually this environment should be the same as the  Release  environment. Here the bugs are identified, performances  are evaluated, points to review go back to the development.   R1lease: This environment is the one the software should run  in  production. In our case  desktop laptop computers with no previous  1pecific install done  who can  interfere with the software  developed . The  Release  environment will allow to validate both  the Install setup module and the software itself.   For the multi platform development needs, there will be 3   Development, Test and  Release   environment on the main  development platform  the Windows station , and  2  only Test and  R1lease   on  ubuntu and  macOS.   3,4  SOURCE CONTROL  An-other important aspect to consider before starting your  development is to integrate tools for the source code management.  The source code of your project is the main achievement of hard  coding works and should  be consider as  precious.   In this context, the use of a source control tool is  mandatory for  professional development  for personal works as well , this tool will  be especially usefu I for:      Avoid lost code source.     Avoid release of a faulty code.     Keep Versioning.     Allowing code analysis.    You  can  implement the source control tools on your servers  many,  Opensource solutions are available such as Git, SVC,  Subversion, ...  -;  We recommend to install the code sources repository on  a  dedicated computer other than a developer station, when it can  be  done.   But you can  also use on line integrated solutions such  as  Microsoft  '  Azure Devops, GitHub or others ...  Using an  external  repository  i  improve the security of your source code. By using deported source!  I  code, you can  recover very quickly in  case  of general failure or  ·  catastrophic event.   Here is a quick review of the main stream solutions for integrating  j  :j  these benefits in your project development.  I   A   Microsoft Azure Devops  ·1  Using Microsoft Azure Devops include many advantages added,i  ;j  to the source control tool. This environment furnished freely   up to 5 users after you have to subscribe to the services who  l  I  offer much more capabilities  by Microsoft can  be used to  manage the cycles of your project and  be the central repositorvj  j  for your sources code, it includes:  ''~  '!  l  ,,,      Source Versioning.     Project following  can  be connected to MS Project .     Assign  task to developer.     Request management  New features, Bugs,  Specs ...  .     Do the compilation of your project.      ,1 ,  Integrate automated building and testing module  with'  pipeline    I  Azure Devops offers, for free, different type of source control  l ,,  I  j   tool like classical TFS,  and  Git and  methodologies for guiding  your project  Agile, Scrum ...  .    CHAPTER 3: PROJECTS MANAGEMENTS ESSENTIALS   In the complete version  with subscription , Azure  Devops offer  you  a complete solution for managing your resources and  source code in  a professional way.   The integration with Visual Studio is native and  make it really  easier for the developer to use software development  methodologies over the architecture and coding phase.   This is only a glimpse ofthe features freely offered by Azure  Devops, so we recommend the use of this tool, you  can  discover  all ti e details of the offer from the link in  reference.   https:  azure.com Devops    B   GitHub  GitHub offer a free distributed source control tool. GitHub come  from the Opensou rce world and offer to host your project  sources for free. These sources will be accessible to the "public"  and  an  unlimited number of "contributors" can  participate to  the project  ideal for Opensource project .   If you  do not want your sources to be public you can  create a  "private" repository but this one  at least in the free version   will have to support constraints like the number of contributors  limited to 3  and others .  By default, the repository will be accessible to the public if you  only use the free version, but GitHub allows you to work with  no limit of size for your team.   GltHu bis really an  essential tool if you plan to develop an  Open source software solution and  it is designed for doing just    that. Furthermore, you can  use the free git client from GitHub  for the management of your files.  You  can view the possibilities offered by GitHub by consulting  the reference link below.   https:  github.com explore  https:   desktop.github.com   There are several other on line solutions for assisting you  in the  fastidious  but nevertheless crucial  task of managing your project  and your source code, online the most known are:   https:  gitlab.com  https:  bitbucket.org  https:  sourceforge.net  https:   beanstalkapp.com   Most of these web sites offer free subscriptions and  basic tools for\  the management of your project and or the versioning of your  source code, it would  be careless to not use these opportunities.   :1  ' ·-1  Finally, as you  could have understood by reading this brief review, :1  we warmly recommend the use of Azure Devops, GitHub is useful .,j  I  in  an Opensource software development context.    CHAPTER 4: GUI DEVELOPMENT BEST PRACTICES:  USER  EXPERIENCE   .Nb   Chapter 4.  GUI  DEVELOPMENT BEST PRACTICES:  - -.. - - - - - - - - - - - - - - - - - - - - - - USER EXPERIENCE  . The development of a GUI  application requires a minimal expertise  In this very specific technical field. This chapter is  mandatory if you  do  not have experience with the user interface design.  Some GUI  applications practices are common whatever the  language, the platform or the machine you develop for. We will  review some of the most useful of these best practices to make the  conception and the design of your GUI. These  practices will define a  GUI  more efficient and  appealing for the user  that's a point to not  forget: the user}.    This chapter will try to help you to provide the best user experience  for your application.   The design should consider some basic rules and design guidelines.  It has to follow principles who define a successful graphic interface:      Consistency.     Readability  and scannability .     Logically structured.      Informality  keep it simple .   Many basic steps in the conception of the several screens of your  application can  be define using user proof concepts:      One task for the user shou Id  match one screen.     Consistent navigation system between screen.     Doing a sketch of your forms  or screens  can  help you to   optimize presentation and  interaction.   The basic aspect ofthe design should  not be missed neither:      Design and  choice of the type of control.     Design of the visual layout  layout, panel, group ...  .     Choice of the typography  the choice of an  adapted font   regarding the look and feel targeted .      Choice of the color's schema  to be in sync with the purpos of the application and or the user corporate environment  1    1   This aspect is  really important for application using or displaying a  large amount of data, in that context the sight of the user have to    CHAPTER 4: GUI DEVELOPMENT BEST PRACTICES:  USER EXPERIENCE   be guided for avoiding to display the complexity of the information  1ccessible.   For more information about the general concept of the design of a  araphlcal  interface you can  consult the standard ISO  13407 about  "Human-Centered Design  Process for Interactive Systems", this  International standard describes the benefit of adopting a user  centric approach for the conception of GUI.  The following guidelines will assist you for the creation of a relevant  CilUI  desjgn but are  not sufficient on their own.   A primary point in the definition of the interface appearance is to  consider also the sketching of the interface in collaboration with  the users. This is a central point in the GUI final design, you should  never forget.   4,1  BEST PRACTICES FOR INTERFACE DEFINITION  Present system interfaces  Microsoft, Apple or Gnome  incorporate  already many pertinent  and well thought  features in their  atandard definition, but the choice you  have to do between the  futures available have to be adapted to the specific purpose of  your project .   . Here Is  a list of recommendations for creating the GUI  of your   ppllcation:      Focus on the user and the task to accomplish, define how   people will use the GUI.      Consider the user's view of the task, one task matching one   screen  design   in the best case .  For complex task  decompose it in many simple tasks in as  much as    screen form. Do not hesitate to use wizard type interface inl  I  those cases.      Design the common case   not the specific , the common  flow of work should be implemented as  natural in your  navigation system. Specific cases can  be added once the  main flow is considered  not before .      Deliver information not just data, a large amount   I  I  information to display can  be confusing for the user, in  I  those cases use computed and  agglomerated  according to j  the angle of the user  data to present the information   consolidated data .   have a continuous interaction with the user.      Set the expectation with design  highlight the common   l     Design for responsiveness,  is the ability of the software to  j  l  l     Anticipate mistakes and design relevant and  useful error  l   choice and  use  indicative color red, green       Use tester  ideally user  for the validation of your design   '.  and for the validation of the sketch or the prototype design   messages.   .J  l   '      Consider the user context where the application will be       used.  Interface consistency, but the constancy of an  interface  could be difficult to define and subjective to one person,  you must define this with the users.      Use the standard, as a user yourself you  know how some   functions should be display according to the standard.   Added to these considerations you have to keep in  mind during th  design of your interface you  should also integrate the four crucial  :J  ]  points for defining your graphic interface:    CHAPTER 4: GUI DEVELOPMENT BEST PRACTICES:  USER EXPERIENCE   Scannability:  Users are quite lazy and doesn't read  each  element of  the screen carefully, so  keep it easily scannable, provide graphic  when  it is possible and  keep links, labels and  informational text as  1hort as  possible.   Composition: Organize your different screens or forms in a way to  be consistent with the features the fulfill. Group the controls by  functions, the logic used should be the standard field of expertise in  the project domain. The terminology used are also the one used  in  the profession.   le careful for the details: The importance of details in the design of  a proper GUI  is  not to overlook. The details make your interface  areat or shitty, hiring a professional for this phase could seems to  be  expensive but the general quality of the final product will be  dramatically improved.   Preserve the form  inertia: Keep the form the same display as  long  It Is  used, and  update only the data who have to be   with coloring  update for marking thresholds or tendencies . Updating the form  With  different layout according to data can  be disorienting for the  user, try to keep the same screen form format for the same task   whatever the value context . This will insure the consistency of  your interface.   4,2  GENERAL SCREEN DESIGN AND ERGONOMIC CONCEPTS  A good screen  design should consider function first  what the user  WIii  do with it , and  presentation later.   But with complex task or a large amount of information to display  the design of the presentation have also the goal to direct user's    attention toward the logic flow of the task or the important  information  the one the user usually is  looking for .   In this section we will show you how to design a proper Graphic  User Interface with the suitable tools  often graphical designer .   The main components of a GUI  are controls  also called widgets .  The controls include:   label,  link,  textbox,  checkbox,  combo box,                     button,           menu, scrollbar     different type of layout,     panel     window      radio button,  slider,   These controls are the basic elements you will have to use for the  definition of your GUI.   4.3  LAYOUT RECOMMENDATIONS  Here is  a brief resume of guidelines you have to keep in  mind for  designing the layout of your windows  screens or forms :      Size the controls to match their typical content.    CHAPTER 4: GUI  DEVELOPMENT BEST PRACTICES:  USER  EXPERIENCE  :,-.~- ·-----------------------     Align  your controls  right  and try to size them identically   when it is  not interfering with the first recommendation .     Layout balance, the layout of the window has to use both   side of the window  left and right}, if a side has more  controls than another, try to resize it  bigger  or move it on  the other side by the use of a group control.      Layout resize,  if the window is  resizable  make sure the   resize in  a wider window will display more data, but take  care also of the amount of data on the minimal size  of the  window.   4,3.1  Type of controls to use  Here some recommendations for choosing the type of control  regarding the logical case it should solve:      Do not confuse checkbox and radio button.     Do not use command buttons as toggle.     Do not use tabs as  radio button.     Do not use to many tabs.     Do not use non-editable textfield  if that's not editable   that's a label .      Do  not use textfield when you can  use another control.     Use default value for input fields and control.   4,3.2  How to use controls  Every standard control  or widget  available in your system should  be used  in  its own standard way.  Do  not implement special  behavior to a standard control  define a new one if the  requirements are very specific  and try to stick to the standard use  of each  control.    Here is quick guideline for the use of the most common controls   widgets} you will have to use in the conception of your windows:   Text {label}:      Text of the GUI  have to be  minimal  the average user does   '      You  have to use the user terminology and vocabulary  not   not read  it anyway}.   the IT .      Do not capitalize the name of the controls you use: group,   menu, toolbar, tooltips ...   Buttons:   Input:   Menus:      Do not use generic labels  except for the Cancel  button , us;       specific terms related to the domain of your application.  If the button is used to respond to a question be sure the  application will propose at least two options  not only one  ;:  button for an  interrogative window .      Align  all the buttons of the same functional level  left, right·  top or bottom of the layout or group to the one it belongs .'      Align to the bottom of the window the command buttons.      Try to use a minimum oftextfield control.     Choose wisely between listbox, option button and   checkbox.      The size of the control has to be proportional to the data   expected  size of the textfield box .      Avoid  multiple cascading menu as  possible  use contextual :   menu instead, avoid too much  intricacy .    CHAPTER 4: GUI DEVELOPMENT BEST PRACTICES:  USER EXPERIENCE      Name the items of your menu with accuracy  The label   explicit the exact function .      Add the menu items the user is expected   not according to   your backend architecture .   Toolbars:      Use as  much as  possible standard icon  for the function.     Choose different icon for different function  avoid similarity   between icon as  possible .      Add button to the toolbar only for frequently use functions.     Avoid to display more than 4 toolbars at the same time  it   can  become confusing for the user .   Here are some  recommendations regarding the good use of the  "Error message" dialog box:   lrror messages:   action.      Do not give error messages  if the user did not perform any      Error message  have to propose a solution to the user for   fixing the problem  when it's possible .      Do not use  "OK" on the button if there is no solution for the   user use  "Close".      Do not add  sound effect.     Use error Icon and explain to the user what he can  do.     Do not use the words :   o  Error, failure  use "problem" instead   o  Failed  use "unable"   o  o  Abort, Kill, Terminate  use "stop"    Illegal, bad   use  "incorrect" or "not valid"     o  Catastrophic, Fatal   use "serious"    l   4.3.3  Sketch the application window  :1  In  any case this is  best to sketch your screen before the  1  development, that will allow you to visualize if the design you  thought about is  matching your expectations when it comes to rea\  :i  design.  By sketching your screen  design, you will identify screen  with too  J  much  information or too empty or simply not kind to the eye sight}   there is a,Jarge  subjectivity in this matter   There is many dedicated software available for the realization of  'j  j ,,  the sketch of your GUI.  Most of them are on line tools. Here is a  l  non-exhaustive list of the most recognized of these on line tools.  ]   https:   balsamiq.com   https:  www.mockflow.com    Of course, you can  use dedicated desktop applications for the  design of the mockups screen  of your project.   I l  !  ·,l  DesignerVista  is the ideal choice if you  do not use the services of ai  professional designer and if you do not have design competences. i  !  With this tool the mockup of the screen s  can  be done by  ,!  developers.  !   Here is  a screenshot of DesignerVista, a software for designing a  user interface mockup.   '    CHAPTER 4: GUI DEVELOPMENT BEST PRACTICES:  USER EXPERIENCE  ," ·"~ - - - - - - - - - - - - - - - - - - - - - - - -  ~.I.\<   5!'"""':iim  en;\!,r,-:!;   T <!ondllo, ...   .-.Hill! mm a +s -:  ~ iA  ;i ,-,,..i  ,1,:""........i  'Iii  ii;  "'"""'  "'-"   ··11,:111.!!;!   einm  !lli¼'ii.~  """"'"   ,,.   - '--" ""'   ·-   DesignerVista    You  could also use the designer favorite tool Photoshop for  achieving the  design of each screen  even if that's seems a little  oversized for a sketch , there is several GUI toolkit for photoshop  freely available.  The freely Adobe application Adobe XD  can also  be useful even if  that tool is more a web site and mobile oriented application.  The choice of the tool for the design of the user interface of your  application will be determined also by the kind of technology you  have chosen for your application.   http:  www.adobe.com products xd.html  http:  www.adobe.com products photoshop.html   http:  www.designervista.com     4.3.4  Typography  The choice of the fonts you  use for your project depict significance  ofthe application.   Most of the time you will use the standard system font  especially  if you use Native GUI}. But the font is now a mark of intellectual  sophistication for users to notice it.   The choice of a proper and coherent fonts is  among the substantiai  tasks when you design a User Interface of an  application.   In  a context where the user  corporate  already have internal or  dedicated font, use it at the outside  the most .   If you have some latitude regarding the graphic design of the GUI,'  choose a font corresponding to the culture of your target audience  }  '  You  can  use the on line resources for getting an  idea of the diversit.c  typography can offer to your text.   http:  www.dafont.com  http:  www.fontsquirrel.com  http:  www.fontspace.com  http:  www.fontstorage.com  http:  www.abstractfonts.com  http:  www.1001freefonts.com   If you want to use an especial font you can  use program to converl:  between Windows, Linux,  macOS and or modify it according to  your wishes.   Although Font Lab  is the reference for the creation of font, many  freely software are available. The  references programs for  creating converting modifying fonts are:   ..   i    CHAPTER 4: GUI DEVELOPMENT BEST PRACTICES:  USER EXPERIENCE  l';,~o:,." ------------------------  ~ .,..._,   ...   ·     ··      http:  www.fontlab.com  Fontlab and Transtype    http:  fontforge.github.io   http:  birdfont.org   http:  cr8software.net typelight.htm1   · These tools will allow you to use "the" font you have decided to use  · .for your a~plication regardless of the multiplatform requirements  In that matter.   ,11,3.5  Color scheme  The color scheme  combination of colors  is a point to not  ·overlooked when you design your interface .  . Por multicultural environment consider the culture where the  ·application is executed, in this case you  have to define a color  :lcheme specific for each culture. your application target  for  rexample: the difference between Asia  and  Occident for the color of  \the trend in financial market: green red   :t.  iThe use of color is determinant in two foremost reasons:      The look and feel of your application. The  perception of the   application by the user is conditioned, at least in  part, by  the use of specific color's scheme.      The highlight of significant information on your window,  when you  have a large amount of data display. You  can  choose flashy color for getting the user attention on what is  important in the screen you display.    There are "standards" for helping you in the conception of your  color scheme:      Monochromatic: Each  color is taken form the same base   color  ex:  multiple blue , generally it looks very smooth and  produce a soothing effect.      Analogous: Use of one main color and the others are used   to en rich the scheme      Complementary: On a color wheel the complementary  colors are at the opposite of each other, there is a great  effect of contrast produce.   You  can  also use a specialized tool; Adobe Color CC   as part of  Adobe Capture CC}for producing elegant and  pertinent color  scheme for your application. The other software who seems to be  i  reference for the conception of color scheme is Paletton  "The  color scheme designer" .   0 ~   ·¼ ~····:"'   http:  color.adobe.com Create  http:ljwww.paletton.com    4.4  THE CHALLENGE FOR MULTI PLATFORM GUI DESIGN  That's only a preview of the ergonomic design work you should  have to do for designing each  window  or forms  of your  application.   You  should consult dedicated book on the subject if you target to  produce professional designed application by yourself.   Every OS  maker provide guidelines relatives to the design of good  ··  GUI, these sites can  be good starting points for understanding the·    CHAPTER 4: GUI DEVELOPMENT BEST PRACTICES:  USER EXPERIENCE   view of each OS editor on the subject  and  comprehend the    1pecificities of each OS .   Here is a list of web resources, that appears to be  references on  this domain for each  platform:   https:  developer.apple.com design human-interface  guidelines macos   https:  theblog.adobe.com 4-golden-rules-ui-design  https:  developer .gnome.org hig sta ble   http:  goodui.org  https:  www.uxpin.com studio blog guide-design- co ns iste n cy-best-p ra cti ce s-u i-u x-desig ne rs   https:   docs. m icrosoft.com  en  us windows desktop uxgu ide how-to-design-desktop  ux   The design of a multi platform applications can  be very complex  regarding the goal you want to achieve by developing them. In  many cases you will have to choose if you want to get the best  experience for each  particular OS you target  whatever the  llmllarity of the application on the different OS   or provide  unlformized experience whatever the OS your application is  1xecuted on.   This choice will make you choose one type of GUI  rather than  another one. Finding the best combination for all these factors is a  tricky part for choosing the development type of your user  Interface. By following the best practices presented, you will be  able to produce a great GUI  design for your application and  respond to the user wishes in that domain.    -----------------------1  ··1 ! j   'i   -11   '   .N   Core 3.0   Chapter 5.   BASIC CODING TECHNICS FOR C  APPLICATION   Besides the development of the Graphic User Interface, a desktop  application requires some minimal knowledge of coding technics in  general  used in desktop, Web, Backend ...  .   In this chapter we will provide you the essential practices for the  ,  coding of the several common functions required when you  develop an  application with .NET Core 3. This chapter aims to  provide a basic knowledge of the latest coding technics used  in  .NET Core.   These  basic guidelines will cover:    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION      Application Configuration Storage.     Tracing and  Logging  Standard, Serilog .     Data Access  Entity Core .     External Services Access   REST service .     Threading GUI.     Using unmanaged code dependencies  p lnvoke .   ,   These following practices will provide you  a quick and easy answer  to common issues you will encountered in the development of your  application. Relevant web references Will  allow you to get  complementary information about a specific subject.   5.1  APPLICATION CONFIGURATION  In  many cases you will have to use a configuration file where to  store information like "connectionString" for the database access,  user's credentials, services endpoints ... You  do not want to store  these data in database  because it does not change very often  but  you cannot hard code it  because it might change . You have to use  a configuration file.   In  the .NET framework it was handled by the famous "app.config"  file  a  XML formatted text file  but in  .Net Core the things are little  bit different.   For .NET Core application you can  still use INI, Config or other  custom-made configuration provider but the standard way of  storing configuration information is to use the "appSettings.json"  file.    The XML format of the "app.config" has been replaced  you  still can  ··  use XML formatting with the appropriate provider  by JSON format  more compact . . NET Core 3 does not include a built-in  configuration management system for doing so, you  have to add  the relevant NuGet package  {this is the standard way for adding  features with .NET Core 3 .   That can  be done by adding a specialize NuGet package s  to your  project  with Visual Studio 2019 "Package Manager" :   ·l'nuget  Microsoft.Extensions.configuration   Microsoft.Extensions.Configuration.JSON   provider    Now the data are stored in  a JSON formatted file, but the main  using technics are still relevant.   Here is a sample of a basic "appSettings.json" file:   appSettings.json   Do not forget to copy the "appSettings.json" file to the target build  folder by changing the properties of the file as described below   figure 1 :    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION    figure 1    The  reading of this file can  be performed with a few lines of codes.  As the json format is  using the raw values and  retrieve text format,  you  have to convert them to the required type manually.   Here is a little program  ProgramConfig.cs  illustrating how to  retrieve data from the configuration file previously described:   ProgramConfig.cs    .   .   ::  Console.WriteLine· $.'iHe;Jc·1io  Mr   ..  {:,0oi:iJ t ·~u.,ii:na:mll "J   _i,xm~[''.J§.sb,iime" l } "  ;  "   Console.ReadKey  ;  """""'   .. ,--~ ..  --'.,  -~;  "    , -1:   As you can  see only one line of code is sufficient for declaring,  reading the configuration file and building the Configbuilder object.  The object  actually an  interface type  use a set of key value for the  storage of the configuration properties. Besides this object offer  the possibility to retrieve instances object values  often useful   used  in strongly typed configuration.   The  Microsoft.Extensions.Configuration furnish an  architecture  section Item and the main  methods for loading the sections, and  Items are:      GetChildren I: Gets the descendant sub-sections.     GetSection string : Gets the section with the specific key.   Of course, this is  a basic sample but the Configuration builder offer  the possibility to manage complex constraints as  hierarchical json,  multiple  array  values  retrieval, use of secret values and  many  other cases  not described  here.   This is only a brief resume of the package  methods, you can find an  exhaustive source of information about this specific subject by  following the links in  reference below:    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   https:  docs.microsoft.com en  us dotnet api microsoft.extensions.configuration  https:    ga rywoodfine.com  configu ration-api-net-core  co nsole-a ppl ication   In  conclusion about the use of configuration file with .NET Core3,  the  basic configuration tools offered by the Microsoft package  are  quite powerful and  fit to most of applications requirements. There  ,ire providers for many types of configuration files  JSON, XML,  INI  ...  .  And, of course, you  can  write your own provider if you  have  special  requirement in this matter.   You  can  retrieve a working example project on the netcore3   GltHub. o https: 7github.com netcore3 CodeBook Chapter   5 1 configProgram   5,2  LOGGING AND TRACING  .NET Core  have a built in  Logging Trace mechanism. This  mechanism is really handy for basic  logging requirements.  But if  you  have the need of more advanced logging mechanism  for using  In  error handling automation system for example  you  have to use  11  more advanced tool.   There  is  a plenty of solution  you  can  check the NuGet repository   !or implementing structured logging system to your application, the  most used and popular are  Log4NET,  Nlog and Serilog.    These 3 products are very great and  adapted to specific  requirements but in this part, we will detail the use of Serilog for  simplicity purpose but feel free to explore Log4NET and  Nlog  solutions if you  have  a special interest for your application to use it.  i   5.2.1  Microsoft .NET Core logging system  Microsoft provides now packages for logging, tracing and  debugging features of your application. This wrapper offers you  basic functionality for the logging and trace needs of your  application.   ··-"'·nu get  Microsoft.Extensions.Logging   Microsoft.Extensions.Logging.Console  MiCrosoft, Extensions. Logging. File  Microsoft.Extensions .. Logging .. EventLog   or Others ...     Here is simple program for logging the activities of your application  using these Microsoft packages.   SampleMslog.cs    CHAPTER 5; BASIC CODING TECHNICS  FOR C APPLICATION   First of all you have to begin by creating a log factory instance, next  you  have to specify the provider you  want to use for effectively  doing your logging  in the sample: ".AddConsole" .   This is simple solution for creating a basic logging system but if your  development has special requirements for logging, trace and  debug  you  should go further and explore the possibility to use a more  advanced system for doing so:  Serilog.   '   5.2.2  Advanced structured logging system: Serilog  Serilog is a structured logging system, currently implemented with  .NET standard 2.0 so you can  use it within a .NET Core 3 project.  Serilog is a Library providing diagnostic logging to files.  It is easy to  setup, and  unlike other logging libraries, it is built with  powerful  structured event data in mind so is very well adapted to desktop  application development.   With this logging system you  can  implement a console debugging  window for following each event of your application you  have  decided to follow and  having a real time view of the internals of  your application in real time.   Install Seri og   5.2.2.1  You  have to add the Nugget package  "Seri log" with the packet  manager GUI  in Visual  Studio or with the package manager  command  line. After that you will have to install the package s   specific to the type of output you want to use  it is  called  "Sinks" .   A "Sink" describes the type of logging you want to implement for  you  project.    Serilog   Serilog.Sinks.Console  Serilog.Sinks.File   There are many other types of Sinks already available beside file  and  console you can  write the loggings of your application in  database,  in the cloud or in the Microsoft Teams system ...   5.2.2.2  Configuration  The configuration of Serilog is straight forward and  in most case  does not require a specific configuration file. Nevertheless, you  have the possibility to use one config file for responding to specific  requirements of your logging system  check the reference web site  for more information    If you have special needs in that matter you can  also  refer back to  the GitHub  Serilog is Opensource  repository.   5.2.2.3  Create a Logger and use Sinks  First of all, you have to create a logger object:   Log.logger=  new  LoggerConfiguration   .CreateLogger  ;   ---------------------·······--·-·-'-'"~'   Once the Logger object is created it have to be linked to a specified  :  external representation   for example a file or a console window   f  Log.Logger.WriteTo.Console  ;    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   For a console logging system.  Or for using a text file for output:   Log.Logger.WriteTo.File "log.txt",  outputTemplate:"{Timestamp:yyyyMMdd  HH:mm:ss  "}  {Message:lj}" ;   You  can find  more information about the formatting of the logging  at the  provided  references web sites  links provided  below .   5.2.2.4  Logging Levels  Once the  logger is fully configured you  can  start to  log to the  level  Information:   I Log. Information "Here  is  the  log~~-~~  ,,    ;   There are several levels to use to do your logging:   Information   o  Verbose  o  Debug  o  o  Warning  o  Error  o  Fatal   You  can  configure you  logger to output only at a define level.   Here  is a simple sample program for illustrating the basic use of  Serilog.    ProgramSampleSerilog.cs    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   As  we can  see Serilog can  be very easy to use, and offer, a large  amount of customization capabilities. This is a particular relevant  choice  in  many application development scenarios. This  is an  open  source project with vibrant community working on it and the  documentation is abundant.   You  can  look deeper into the use of Serilog:   http:  www.serilog.net  https:  www.github.com serilog   5.3  DATA ACCESS:  ENTITY FRAMEWORK CORE  With .NET Core 3, the developer can  still use classical ways  as done  with .NET Framework  to access the database  Command, Request  Reader ...   but for modern advanced software solution the data  access have to be  layered in a standardized way  with ORM .   The  data access in .NET Core should  be done  that's not mandatory,  but it' highly recommended  by using the Entity Core component  a  NuGet package . This is the ORM   Object Relational Mapper   developed by Microsoft inherited from the dotnet framework   Entity Framework .   The Entity Framework Core  has followed the trend set, as  .NET  Framework, to a lighter multiplatform environment.    EF  Core includes a set of APls allowing you to use a structured  with  a good readability of the code and good maintainability} way to  access your data. It allows you to work on your data with .NET  object instances  with LINQ request support}.   EF  Core simplifies your work for making the Data Access  Layer of  your application. Actually, EF  Core can  generate that layer for you.   5.3.1  Database Provider  As  his  predecessor, Entity Framework 6,  EF  Core integrate already  many database providers as:   -'     ·   i      SQL server     MySQL     SQLite     Oracle     PostgreSQL     CosmosDB   NoSQL database from  Microsoft}      ,i  ,}  ... and  many more providers continue to be added as the EF  j  J  Core community is a most vibrant one.   More providers can  be found here:   https:  docs.microsoft.com en-us ef core providers    ','~  i   . ~  i:  -~   5.3.2  Architecture of the EF Core  The EF  Core provide to the developer an  integrated layered  solution who provide the possibility to abstract the database  operations of the application, to use .NET objects.    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   This  layering provides a better flexibility regarding the database  hosting system  for example if you  have to change the type of  database you use .   It provides also the ability for the developer to use advanced .NET  features for manipulating data objects like: the use of Lambda  function, the use of LINQ request.   The following schema illustrate the general architecture of EF  Core:    source  Microsoft    5.3.3  EF Core Installation  For getting EF  Core available in  your project you have to include a  specific package  regarding the type of database you want to use  and the EF tools allowing to use the advanced features in your  code.   Here are the packages to include if vou  use SQL server:    'a!!   net  Microsoft.EntityFrameworkCore.SqlServer   Microsoft. EntityFrameworkCore.Tools   nu-::,   The  installation can  be done, as usual, with the Package  Manager or!  directly from the Visual Studio project window  Manage Package .   5.3.4  Data model  When you develop your application with EF  Core, you have the   choice between two distinct methods for achieving the integration l  When you use this method the data model is defined by your data  l   with the database:   A   Model First:   B   Database First:   model  by code , this is interesting to use this approach when you  ,  ·~  use a database for storing the data produce by your application.  1  ,i  The model first method is  used when the database is  not yet  defined or when you start to develop from scratch your application.I ,l ·;  !  il  When you use this method, you reverse engineer your database fod1 ,,  generating the data model. Th is  method is used when you  are  ,.   working on a preexisting database or when the database is  d  developed by another member of the team, a database developer  ,i  ;j  for instance.  ,,  For enabling the scaffolding of your data model from your databasej  you have first to install the required  package:  ;,  i  1  j  ~   t  Microsoft.EntityFrameworkCore.SqlServer.Design    ca  .., nuge    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   This package will allow you to use the PowerShell command:   Scaffold-DbContect   Here is sample command for using this PowerShell command to  execute in your Package Manager window:   PM>Scaffold-DbContext   -Connection   "Server= localdb \mssqllocaldb;Database=MyDb  ;Trusted  Connection=True;"   -Provider   Microsoft.EntityFrameworkCore.SQLServer   -OutputDir  . DataModel  -Context  MyDbContext   -Tables      This "scaffolding" will generate files  .cs  who will define the objects  you will be able to manipulate in your code,  by default there is a file  generated for each object of the database but you can  specify  which table s  you want to generate  for example with -Tables for  specific tables . Scaffold specific Views or Store procedures is not   at the time this book is written  allowed.   Please review the on line help available for the tools to get the list  of all option you can  use to generate the required data model.   https:   doc.m icrosoft. com en-us ef   core managing  schemas scaffold ing     5.3.5  Recommendations for the use of EF Core  When you use EF  Core for developing your application  with Visual     Studio 2019 , you  should thing about the use of a dedicated add-ins j  available on the Visual Studio market place, Entity Framework  Visual editor, EFCore PowerTool, EntityDeveloper Express:   https:  marketp lace.visua lstu die.com items?  itemName=ErikEJ.EFCorePowerTools diagram model  https:  marketplace.visualstudio.com items?  itemName=michaelsawczyn.EFDesigner  https:   marketplace.visualstudio.com items?  itemName=DEvartSoftware.EntityDeveloperExpress   j  l   i   ~ - - - - - - - - - - - - - - - - - - - - - -~ , , ; : !    These Visual Studio's Extensions are not only add-ins easing your  coding life with EF  Core but these will allow you to graphically  model your data schema  that's not yet built-in in Visual Studio  yet , it provides you the same tools already available for Entity  Framework 6  diagram model of your data .   You  can  also use a dedicated product  for professional  for the  generation of your objects  ORM  from the database:   Entity Developer from Devarts Software  same software editor as  the free add-in  is a product who provide you an  original solution  for the conception and or the generation of the data model of your:'  "  ORM   multiple target ORM  NHibernate, Entity Core  ...  . This tool  '  will make the job to keep in-sync your database and your data  \  model much easier and  a lot less time consuming.    CHAPTER 5; BASIC CODING TECHNICS FOR C APPLICATION   https:ljwww.devart.com entitydeveloper    0   -  5.3.6  Basic sample usage of EF core  Here is a sample program for illustrating the use of Entity  Framework Core with Data Model First  be aware that is  not sample  to duplicate as  it is,  usually you  have to define data object in  different sources  .cs  file for obvious readability reasons,  but it can  help you to understand quickly the philosophy underneath EF  Core.   ProgramEFCoreDemo.cs     CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   list.First   .Description=  nupdated  A'';  ,:~t:;:;;;:;n:·m0:;:r!5;;f~!J~,Iffffii!l~li@.~l~j[;:T: ";hlimi,tl1I~~ ~~!11f:{~~~ilrn:i-r;g1!flll!mj1 lli1:JLlJ~~¾i,~~§urff  context.Customer~.Add new  Customer   "Customer_C'',  Description=   ''Description''} ;   !!JITTnim~~~'~l~iti'.ffffimf~1~~-Q}!tl~!i~~mr,,;-;rii.:,9gm:wwr   using   EntityContext     :_::mi1m1~:m1;~ffff~11~:ur:l~mfrj~:Y:nIW~ft~:m1~~g:J~U;'.mrni~R!ljWJ1fl'iHiit~·vrw~wrr:~?:r::':r::_:::t::··i:;·i'.:;_-,!!H~j- .---..............  context.Customers.ToList     -; fil!W!fii-!Iii!Affii!@!\li:W1:f;h;1J!iiftl'J:Q~f~i~~1 ;:1' i.~·:f ,~£7.'::~;fal'i~;::F;;,\''."l!!'i!,1Mmiffllr.inil~i,c;;'.':i'Z.,~~1'.'.,;·, i:-' ! ,   foreach   var  customer  i~"-·--··~·-··--·~"'   _;;'·_'·~ :·.  : t \   Console.WriteLine '''1    ;     This sample is  running and can  be compiled on Windows, Linux and I  ,,'  macOS with the dotnet Core 3.   5.3.7  Entity Framework Core: tutorials and learning  As we have seen EF  Core is a proficient and  mature  more and  mor~i ,,  with each  new version  solution for addressing the database acces!;':1 ,,  issue  in .NET Core 3 application. You can go deeper in that matter  by consulting the following web site who will provide you a more  detailed view on the advantages provided by using Entity  Framework Core.   https:    docs. microsoft.com  en-us  ef  core     CHAPTER 5: BASIC CODING TECHNICS  FOR C APPLICATION   http:  www.entityframeworktutorial.net efcore entity  framework-core.aspx  https:  entityframeworkcore.com  https:  www.learnentityframeworkcore.com    5.4  EXTERNAL SERVICES CONSUMPTION  In  many cases you will have to use external services  API,  Web  Services ...   in your application, and  .NET Core has dedicated  packages and functionalities for doing that.   For simplification purpose we will consider the consumption of  REST  Representational State Transfer  service  because that's the  most common service type you will encountered in your  developments. REST is a protocol based on the HTTP  request  protocol with the associated verbs:      GET:  Used for data retrieval.     POST:  Used for adding data from the client to the server     PUT:  Used for updating the data on the server     DELETE:  Used for deleting data on the server.   As  one of the key design goals for .NET core is to minimize the size  of the .NET core installation, you will have to had the required  dependency  package  to your project.    ~ nuget   System.Runtime.Serialization.Json   Once you have added the required dependency you  can  start the  process of using the REST service. You  can  achieve that threw three  basic steps  this sample is the consultation of a service :    1.  2.  3.   Building the request.  Processing the request and retrieve data  results}.  Processing the results.   'l,l   i   5.4.1  Building the Web request  First you will have to specify the endpoint address, once it is done  you will instantiate the HttpClient class doing the web request. This   ,  "  API  support only async methods  useful when you work on the  network}. The task web request will be performed by an  async     l  method  see  sample code for REST Client}.   5.4.2  Processing the request and retrieve data  The call of the web request will be done with the await keyword   that's an  async method}.   I  5.4.3  Processing JSON  result  One you have retrieved the data from the REST service  HTTP status[  200}, you will have to convert the JSON  result into exploitable C  object. For doing that you have to write a class for the type of the  object matching the JSON  result format you  expect.   TIPS:  In Visual studio use the menu Edit Paste special paste code as;  i  class for generating C object from JSON  data.   Once the class is defined you just have to use the method  DeserializeObject to instanciate your class with the values of your  result.   :!  l    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   5.4.4  Sample code for a REST client  Here is a snippet for illustrating the use of a REST web service in  your .NET Core 3 application.   ProgramRESTClient.cs   -~,n  "'.lt:'fU,c,':·J  ;1,;:'.[:   factory = new ChannelFactory  basicHttpBinding,   .. f~i lJ£~£aiaE~~ser,Aarn,e]l[f~l-_,$~l~$1 · ~~~~r,;;~~~ ~~~;~~~~~:~~~~~~11i11~m1m~~ii~~lt0i~I~·   .,;::1;    ;;·:: 1· ············.··········· .::·  :··   {  -.>-.-·-..  ·"·:,,.-.-.'    5.5  THREADING GUI  As we have seen in the previous chapter, the reactivity of an  application is a crucial metric ofthe user's global quality perception;.  of a desktop application.   The good reactivity of the application can  be  reached  by giving to  :1  each  heavy processing task and User Interface task its own thread.  ,!  Thus, the main process is never overloaded and the application  "  continue to respond to the user  reactivity , whatever the previous:"!  i  instructions.   There is several methods for achieving this threading according to  the type of solution you want to use for developing your  multiplatform application  Console, XAML,  HTML,  Native UI  ...  .   The threading of long and  complex task of your application can  be  done in  a progress window where you display a gauge  or other  progress indicator  control and propose to the user the option to  Cancel the operation in  progress.    Sample Progress Window     CHAPTER 5; BASIC CODING TECHNICS FOR C APPLICATION   But  most of the time the threading does not have his own window  end  report to the application of the status of the operation threw  some kind of information bar. This can  be done by using delegates  and  common threading technics  as illustrated in the following  sample .   The following simple .NET Core 3 Win Forms example illustrate how  It can  be done by the use of delegate:   {UI_ Threading_Example    This sample illustrates the usefulness of the use of threading in  GUI  application compare to the non-threaded method who freeze the  form  the user lost control  during the execution of the process.   The complete project ofthis example is available online.   o  https:  g ithub.com netcore3 CodeBook Cha pter   5 5 UI_ Threading_Example   There are many other ways to implement  to code  the threading in  your GUI, consider only that you should implement the processing  of the functional operations outside the main GUI  thread of your    program  the method used is not really Important, many different  J  methods for doing that" are presented along this book .   ·:~   5.6  USING UNMANAGED DEPENDENCIES  The multiplatform development with .NET core 3 will sometimes  implies the use of platform specific dependencies  .dll files with  Windows, .so file with ubuntu, .dylib file with macOS .   The capability for the developer to access  unmanaged  methods  from his .NET Core 3 program is mandatory for conducting many  types of projects.   You  have to keep in mind that, in the multiplatform context, you  have to get the natives library file  or its equivalent for the  platform  for each platform, in our case  Linux,  macOS,  Windows.   So,  verify if the library you plane to use for your multiplatform  project will be available for each  OS you target before actually  using it in your development on the Windows platform.   For example, many system functions are accessible only threw  natives API, for doing so you should know basic concepts for the  use of unmanaged code with .NET Core 3  who is  managed code :      P lnvoke     Marshalling     Establishing the running OS   The  .NET Core 3 package  providing these features is:   ·in nuget   System.Runt1me.lnteropServices    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   5.6.1  P lnvoke  P lnvoke is  an  acronym for Platform  Invocation Services, this  mechanism allows the developer to use external unmanaged  dependencies in  his  managed  code  .NET Core .   Here  is  a sample of the use of P lnvoke for retrieving the current  program  id   pid :   ·······-··   stem.runtirne.InteropServices;   ........   ·······----·-·   ~~1ffi~~~il!li!t1F~;iX;~~~t~i~ilfilWTI~~:;i;!i;_:.::i;\t<:;;:;i!~   For Windows:   Using  Syatem.runtime.InteropServices;  ~:~1l:J:f illlit~·~r~rnrmm;~:ff~i~l!tf~tt~1[-l!'.fl1i:11ilfi~1flfff:m1~]I~!!Jimf~Jl=IB~~T;~  Namespace  PinvokeSample  :+f;;;;;;_i::i_i:.1:;~~rH.:ii:!~~,~-::~,~i~~t,I::": ~f!~.i: i:j:t;t;!i!!h~@i;'.::;;;~~'!fillI~  · =J~~~  .,:::   Publ ic  static  cla~s  Program{   ; , i ; f ;~ [ l0 :~    11   Private  static  extern  uint   GetCurrentThreadid  ;  ~:~,::r2~~:1:E~~~~1f~~~~~~  -~~~:~um~~~~mmra-~~    ~~--:'"~!ff,"·~li ~iJl'wlJI~~~   Public  static  void  Main string[]  args    Int  pid  - GetCurrentThreadid  ;    -----·-·-····· ..  ·····-""'"'  "'"'"'"'""'"""""""   ifr.   For this sample code: retrieving the current process ID, it is better  ]  to make a copy of the dependencies in the folder of the application?j  A tricky part for using system  natives' libraries in your code  is to  .,~ .,  retrieve the location of these libraries in each  system. That's a po inf~  :j  where you can  encounter many troubles and the copy of the  libraries in the project folder  or in a subfolder in the project  can  .   -~  help you to solve most of these issues. You  have also to verify that '\1  the paths of the program context contain the required libraries for i~   the OS  where your application should be executed.     ;]   In the previous sample we can  view that the native calls are  changing according to the OS,  in this case  multiplatform  development means produce the code for each  platform  specificities.   i;;!'  ;!ii ;l  :'.~ .\j   ij  If you want to use native functions who are not already written anc:l~  accessible in the system API  of the OS,  you have to develop your  J .,  !j  own libraries  one version for each  OS .   ~ il  ll  ,~   Here is some reference links about the systems APls for each  OS.   Windows:  http:  pinvoke.net  ,:_·J_  Linux  ubuntu :  ~  ,~  http:  kernel.org doc html latest  .l  macOS:   l  https :  developer .apple .com Ii bra ry  archive  n avigatio n 1  . ''~  j    CHAPTER 5: BASIC CODING TECHNICS FOR c APPLICATION   5.6.2  Marshalling  Marshaling: is the process of transforming types when it's needed  to allow cross between native code and managed  in our case .NET  Core  3   code.   Here is the table of the type conversion to use with .NET Core 3  types and native's types.   .NET Type   Native Type   byte   sbyte   short   ushort   int   uint   long   ulong   char   uint8_t   int8_t   int16_t   uint16_t   int32_t   uint32_t   int64_t   uint64_t   Either char or char16_t   dependingon the CharSet of   the P lnvoke or structure .   Either char* or char16_t*   depending on the CharSet of   the P lnvoke or structure.   .   string   System.lntPtr   intptr_t    System.UlntPtr   .NET Pointer types  ex. void*    Type derived from   System.Runtime.lnteropService   s.SafeHandle   Type derived from   System.Runtime.lnteropService   s.CriticalHandle   uintptr_t   void*   void*   void*   bool   decimal   Win32 BOOL type   COM  DECIMAL struct   .NET Delegate   Native function pointer   System.DateTime   System.Guid   Win32 DATE type   Win32 GUID type   In case of complex type  struct, object  please  refer to the  marshaling type conversion for .NET core   link in  reference below .:  ,,  A cautious study of the documentation is  needed if you plan to  make cross-platform calls with complex objects and structures  involved.   ?;  i:   ~ https:  docs.microsoft.com en-  us dotnet standard native-interop type-mashaling   .. ·   \1,   ' :,,  '.,f  ... , .,,,   !   ' ' ·I  V  <8   ··'!   :,j'  ' ,j   . 1,   '   · ;,   ,..;1  }   .   '  "  :c:1.   '  !,    I    CHAPTER 5: BASIC CODING TECHNICS FOR C APPLICATION   5,6,3  OS detection and identification:  For the developer, knowing on which OS  is  running the application  Is  mandatory when it comes to use  native methods. This can  be  achieved by using the specific .NET Core methods contained in the  System.Runtime.lnteropServices library as described below.   Method:  System. Runtime. I nteropServices. Runtime Information. lsOSPlatform     Arguments:   OSPlatform. Windows,  OSPlatform. OSX, · OS Platform. Linux   Part of the complexity of the multi platform development, the  native libraries does not have the same name in every OS.  But the  argument of DLLlmportAttribut have to be  a constant.   You  can  use the following work around: use a specific object  for  each  OS  for the native method call, this interface will be  Instantiated to the relevant type of object  with heritage from this  Interface  according to the system and context where it is  executed.   Here  is snippet for illustrating this concept.    ·;;1;,_·ss··LibPidWin      :  UibP,i~  ..   ..  friiirmi,_o_rt "ketnelJ, 2::dll"  J   private  static  extern  uint  GetCurrentThreadid  ;  ··  ·  pt1llTic .. atatic~11t.G',tPid           listing 1    This workaround allows to select the appropriate native method  according to the OS  where the program is running on. You can  achieve the OS  platform detection by using the dedicated .NET Core  methods or use the OSDescription string.   bool  isWindow  =  System.Runtime.InteropServices.Runtimeinformation.I  sOSPlatform OSPlatform.Windows ;  - .   .,.,.,,   . .   "   .  -... . .  I . . .... . -·---. .  I   .,.,........   ...   ---  .   Or retrieve the system  name string:   . ·- ···-. ..  . . . .. ···-  -~-"·   .   String  OSname  =  System.Runtime.InteropServices.Runtimeinformation.0  SDescrition;   ' " ' " " " " " " " - " ' " " ' ' · " ' "   - - - ,o     ' -¥ " ' ' " ' - " " '   ' · ' " " " ' " ' -                       .,,,_,,.,.,,      , , . , . , ,           -   - - - ,'   For example,  here is the instantiation matching the previous  declaration  listing 1  .   {Run EIID"e"i~"i O rma t  :C:;11'" :··is·c5 s· p 1 a t't'O' r·m   . :-cf  OSPlatform.Windows   inPid  =  new  LibPidWin    CHAPTER 5: BASIC CODING TECHNICS  FOR C APPLICATION   37.  if   Runtimeinformation. IsOSPlatforIT'.   inPid  =  new  LibPidLin   OSPlatform.Linux    38,  {  3l  40,  · 41,  , 42,  , 43.  : 44,  inPid.GetPid  ;   45,    listing 2      The  method  works  on  several  OS   This  is  only a sample workaround implementation may be the  specifics  required by your project does not match with this solution   but in  most of the time it does , The use of an  interface object and  multiple class  implementation does not avoid you to write the code  for  each  platform but provide you an  accessible object structure  across these multiple implementations.    'l  :I  :j'   .N&-  Chapter 6.      SETUP DEVELOPMENT ENVIRONMENT:   The setup of the development environment is  a crucial step in the  .,  development process, a proper setup will avoid you many pitfalls  !  and  contextual bugs further. So, you have to take a special care of  ';  each  install, it means re-install the complete package even if you  have some minor error messages during a setup.   ',t   For a better stability of each  machine, it is  preferable to setup a  new platform for each OS your software will work on   fresh OS  Linux,  macOS and Windows; installed from scratch .    I    CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT   6.1  CREATE DEVELOPER ACCOUNT FOR  EACH  PLATFORM YOU TARGET  The development of multiplatform software implies that you have  access to the knowledge bases of these platforms, for doing so the  subscription to the developer web site of the platform you  develop  on  will make easier the access to the specific knowledge you will  need for your project.   The subscription to these web sites will also  provide you:      Keep you  inform of the developer news for each  platform   threw dedicated newsletter.      Offer you forum, FAQ and  blog access for technical   assistance and or development best practices.      Provide trainings for new tools and concepts.     Access to the complete documentation.   The web sites recommended are recognized by professional  developers for the quality and the reliability of the information they  provide.   Here  is  a non-exhaustive list of web sites who will provide you the  documentation needed for your multi platform project.   For Microsoft Windows:  Microsoft offers a large amount of web site for the developers  using their technologies.   https:   developer. microsoft.com   https:   developercom mun ity. visua I studio.com     For ubuntu:  Linux  have been developed for good part with the Opensource  ,  model thus Ubuntu does not provide any dedicated subscription for;  the developer using their system  it is  more like a community of  .,  interests . Nevertheless, you can subscribe to Linux,  GTK   gnome   and QT dedicated developer's web sites.   ·,~  il  ~ - -.. -..  -.-~-~-~~-:-l-~-~n-u~-m-co-e:n-o-rg--------------'-illi·   ·,~   https:  ubuntu.com community  https:  developers.redhat.com  http:  qt.io  https:  www.linuxfondation.org   I  i    j  '----------------_______,.J"I  !1  ''3;:  i  For ma~OS:  The proprietary aspect of the macOS system  have for consequence~   4  that it  is the less documented of the three systems from the  developer point of view  even if it's getting better with the time .  ii  The  most useful information about the development on this   \,\\!  1.l   platform is only accessible if you  have a developer account  that's  · ... · . .i  . ··.·  lj.,  free  on the apple web site.  .   1   1      httpsc  de,elopec.apP,.rom    ' - - - - - - - - - - - - - - - - - - - - - - - - - · ,   'ii  1  The access to C developer web sites and general developer's Q&Afj  web sites are also often useful when you  develop an application by:j  '':-t  1  your own  without mentor .   :_'·Y,    CHAPTER 6: SETUP  DEVELOPMENT ENVIRONMENT   https:  stackoverflow.com   http:  csharpcorner.com  http:  codeguru.com  http:  codeproject.com   TIPS: We can  recommend that you  use a dedicated email account   or create an  alias address  for these subscriptions or registrations,  the amount of unsolicited emails could be  important and not  always related to the center of interest of the subscriber.   6.2  PHYSICAL COMPUTER Vs VIRTUAL MACHINE  The infrastructure where your development environment is  deployed is a point to carefully consider. You  can  either use  physical machine, virtual machine or a combination of both. But  remember that the macOS system can  be  legally installed ONLY on  an  Apple computer.   This have  been said, there is  unofficial solutions who can  allow you  to virtualize the macOS  with VMWare or Virtual Boxes ,  but the  use of such tool is  not recommended in a development  environment because of the lack of support  but also  because many  sources for these solutions include rootkits and trojans .   The use of physical machine for each environment brings many  advantages. By developing on a dedicated machine, one for Linux,  one for macOS and one for Windows you will use the machine on  which the application will be finally deployed. In that way that is a    big advantage. Besides, you can  use all the resources of the  machine without any considerations for other external tasks.   This way of doing is much more efficient in  matter of performances':  1,  but has less flexibility for the developer  as you have to carry as  ,;  much as computer as you target OS}.   In  another hand, the use of virtual machines offers also  many   ';ij  advantages as flexibility, cheap cost, portability  all development   j   can  be contained on one computer} but implies many constraints: a,~  virtual environment is  never exactly the same as a real  machine and1~  can  have,_for specific application, a different behavior than the real:~  OS   machine based}.   '.if  '';-~   ij   ,,;;J  ,;j;  ,I   6.3  MULTIPLATFORM DEVELOPMENT ENVIRONMENT ARCHITECTURE  Behind this technically obscure section title, we will expose the  technical options taken for the development of a multiplatform  application for this book.   ';J  i~  O!  A  i,~ ,,  ,'ii  As we have said  previously, the option of this book is to develop theg  ·'.]  application with Visual Studio 2019 on the Windows 10 platform.  . 1  -'l  · "j  We will actually do the coding of the programs with this  \\  · n,  environment; this pivotal Windows platform is the main  'ii  development station where all the production of the code will be  . '\  done. This Windows station will also  be used for the building of the'J  ·a  :1  solution targeting the Windows platform.       As your project could also target the production of a native  executable  with CoreRT  we have taken the option to build each  solution on  its own platform. The schema   Development  architecture  illustrate the development architecture used for the  solutions presented.   J  !  ''    CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT    Development architecture option chosen    The complete development is  done with Visual Studio 2019, then,  once everything is working and  bugs free the solution is copied to  the other machines. The code of the solution is  built on the  platform OS it should be deployed, after some eventual adaptations  of the project file  .csproj; if you  use the Platform target option for  example .   This is,  of course, not the only architecture possible for the  development but this one provides a good reliance performance  ratio. We will also review the possibility of cross platform  debugging inside Visual Studio.   .NET CORE 3 INSTALL:  RUNTIME OR SOK?   6.4  The .NET Core 3 runtime contains only the core elements for  running an  application on  a computer, this is the minimum install    l ·,"  you  have to do for running a dotnet Core application. Another  benefit from .NET Core 3, the runtime can  be deployed aside oftheJ  l  distributed application.   i.'    In the other hand the SDK   Software Development Kit   provide  tools for developing and  building .NET Core application.   The  install of the .NET Core 3 SDK have to be done on  every  platform.  Doing that facilitates the tune up of the application for  the specific OS,  and allows you to validate each  phase   if you  have  project management guidelines  of the development on  each  platform.   So,  you will  have a development station  at least with the SDK  installed  for each  platform you want to target for your application    Both Runtime and SDK are available for Windows, Linux and  macOS[  on the Microsoft web site.   https:    dotnet.m icrosoft.com  download dotnet  core 3.0   ,·::;;  ::   ,,   ' , '    '   Besides the .NET Core 3, regarding the kind of project you want to  develop you would have to install specific components. These  components are required, and in  some case,  manfdatory for  ,:,,  running the application. These component can  be specific for each   OS {If you choose to develop with a native GUI .   But the core of the setup on the 3 systems is the .NET Core 3 install;,  and  it should be done with a special care.  Here is a detail  description, on  how you can  install it in the proper way.    CHAPTER 6: SETUP  DEVELOPMENT ENVIRONMENT   6.4.1  On Windows  Installing the .NET Core SDK on the Windows 10 platform seems to  be trivial since the Microsoft platform is the platform of origin for  the .NET Core. You  should experience no issue to do it  less than for  others OS .  Furthermore, the .NET Core 3 is  now automatically  Installed when you  setup Visual Studio 2019  since October 2019 .   6.4.1.1  Prerequisites  NET Core 3 is supported on the following versions:      Windows 7 SPl.     Windows 8.1.     Windows 10 Anniversary Update  version  1607  or later   versions.      Windows Server 2008 R2 SPl  Full Server or Server Core .     Windows Server 2012 SPl  Full Server or Server Core .     Windows Server 2012 R2   Full  Server or Server Core .     Windows Server 2016 or later versions  Full Server, Server   Core, or Nano Server .      Windows Server 2019  every versions .   6.4.1.2  Windows Install  If you  use the correct version of Windows, the install is done by  executing the downloaded installer  exe  program  and follow the  Installer instructions  click ok : .   The default installed directory for the .NET Core 3 is:   C:\Program Files\dotnet\netcore3    You  can  verify if the installation has been  performed correctly by  invoking a simple command of the CU tool "dotnet" as shown  below:   C:>  dotnet  -version   It should display the current version of .NET Core installed, this  command will also verify if the .NET Core CU  is  accessible  path  updated  and  ifthe installation process did not had errors not  displayed during the install.   If the dotnet CU  is  not found after the setup, verify if the path of  the SDK has been  added in the environment variables of your  system  if it was  not done by the installer program .   6.4.2  On Linux Ubuntu  or other Debian distribution   The Linux install could be done using the Package Manager on  .. ·  ubuntu  we only study this distribution in this book, but adaptation::  for another distro is  quite possible .  Be for having the guarantee  that you install the required version  at least the version 3 ,  we will.  review the install by downloading the Linux install file from the  Microsoft .NET Core web site.   6.4.2.1  Prerequisites  .NET Core 3.0 is supported on the following Linux distributions  see  Table 1 .    CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT   Red  Hat   Enterprise Linux   CentOS   Oracle Linux   7   x64    Table 1    The Ubuntu distributions require the following libraries to be   dependencies} installed:                                  liblttng-ustO  libcurl3  for 14.x and 16.x}  libcurl4  for 18.x}  libssll.0.0  libkrb5-3  zliblg  libicu52  for 14.x}  libicu55  for 16, 5   libicu57  for 17.x}  libicu60  for 18.x}    In the case  of the distribution we will use in this book  Ubuntu  .:~  desktop 18.04  all these libraries are already installed in the defaul~  ij  desktop setup. That's should be also the case on your install.  ,,~  !  ~  ·ill  ,;:   6.4.2.2  Ubuntu 18.04 Install  The  .NET Core 3 for Linux is  downloadable under tar.gz format. You   ::i  can  install it simply by using the following command  line  !J,  instruction.   "':I  <ij   -$  m~dir  -p  $HOME dotnet  &&  tar  zxf  aotnet  sdk-xxxx-linux-x64.tar.gz  -C  $HOME dotnet  -$  export  DO'.:'NET_ROOT=SHOME dotnet  -$  export  PATH=SPATH:$HOME dotnet   ' ,,.  <~  Xxxx:  is the version number of the .NET Core 3 you want to insta11 j:  ,:,   the file name changes for each  release of a new .NET Core   '  ! ,,  As you can  see the directory DOTNET is also created and then  l ,.'   added to the path for having access to the dotnet program from  every location. You  should consider to had the two-last line to your}  user's variable environment   users      ·   6.4.3  On macOS Mojave  The install for the macOS system is as simple as the install of a pkg ,  file.  standard  macOS installer file . For this OS the installation  process is identical as any other program you installed on your  Mac.    CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT   6,4.3.1  Prerequisites  The version of the macOS have to be 10.12  Sierra  or later. This is  the only prerequisite.   6,4.3.2  MacOS 10.14 Install  Just double-click on the file and follow the setup instructions, this is  a graphical install  standard macOS  so you should  not encounter  any problem during the installation   The dotnet directory after install is:    usr local share dotnet   For the validation of your install, you  can  create a new console  project with the command  line described below.   ·  dotnet  new  console  -n  consoleTest   A folder will be created on your desktop "consoleTest", navigate to  this folder and execute the following command:   :  dotnet  run   If everything goes as expected, you should display the famous  "Hello world" message, if that's not the case review the release  note for macOS on the Microsoft web site where you  have  downloaded the .pkg file.    INSTALL DEVELOPMENT STATIONS   6.5  ·" ·  The development stations will be the three machines  Virtual or  }  not} used for development purpose. These three computers have  ·J  to be setup with development dedicated tools corresponding to th~  type of GUI you  want to develop with.   The  .NET Core 3 SDK is the base install on each station, the  .:,  specialized tools required will be specified for each  type of solutio~,~  we will  review.   ·I   For the example projects presented in this book we have chosen tC>j  develop the code with Visual Studio 2019 on Windows, each  '-'.i  project has been rebuilt on each OS after a raw copy of the projecti   with the SDK}.   .ii  6.5.1  The Windows station  main}  .,  The windows platform is the coding platform where you have to  install the IDE  in our case Visual Studio 2019} and all the tools you':;.  need for writing software. The choice of Visual Studio 2019 is  ;  obvious in a professional context regarding the features and the  high quality of the product  compared to Visual Code  who is  a mor" . ,  script development-oriented tool}.  ··   First you have to install Visual Studio 2019.   There are three different versions of the product:    '.~  ·;:J!   you all kind of .NET Core 3 development but does not  integrate some features  see table with features .      Community:  Free version of the product, this version  allow's._,_;_:1i  J  ' ,     Professional: As the name indicate  This is the full product}.:!     Enterprise: Offer a better integration for large team and  \  complex constraints environment, it also includes exclusive~    CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT   tools for software architect  architecture layer diagram  and  tester  LiveTest .   The following table below is a resume of the features and  specificities of each edition of Visual Studio.   Supported Features   Community  Professional   Visual  Studio   Visual  Studio   Visual  Studio    source Microsoft.com    : Choose the version corresponding to the type of development you  · intend to do  or the type of license you  own . In our case the  community version is enough for fulfilling the educational needs of  the present book.   The  install program will propose you to select the modules you  want to install, you have to select at least the elements as  described on the  figure 1  of course you can  select a complete    install  for testing and  reviewing purpose} but the required  components you have to install  minimal} for the development  needs of this book are:      Visual  Studio Core  Editor     NET desktop development     ASP.NET and web development      .NET Core cross-platform development   . A.::::::;:":.--.-... ~-'""'--. , .. :;  :·   ·1~:~?~1~i;:~~-:  ,,... __ .....,,_....,__  l ~=~-=:.. '"·-:··---~=  .  _ .. _..._..,_,. ___ ... __  ____ ,  "·'' ~-:-~.:.'.: . .. ,  .,,,,,  .. ,,.,,.,,.,,.,,.,,.,,.,,.,,.,,.,,.,,.,,.  r~·-=.:..-... ---···   - c · -m     ' " '   - - - - -   " ' " '    .  . .  ----  ... ,.,.   --':·.J:   V  · bullllt jo l:1111:11;11   -_.,.,..,,i,,.-r,1~, ...........   t-~-~-..:-~.   cid:141  ,,i111u -.-, ... i,;.-~i  i--1'.<1"'.'fl ............ .  ,..., "!,~.,.... ... , ........ ..  " ... ..-~--_,01 ____ i  .. -.........  cid:157  a_~_..,..,.._,.,.r,.."'!'   :'.::::~i~ .  ._,., .. -~,;,  ._i,.,;,,;,,.~;.;;.,  n.;;,,i.,i ..  ::·  :·.  .-:·  t' JMr.-... ~:~..-\-..   oi,,.-;   :...~--,--~1~  '    Figure 1    If you plan to use a native GUI  library  like LibUI, GTK or QT}  it  ,  should be wise  and sometimes mandatory} to install the C++ too1s',1~·-··  too  but we will signal in the samples chapter when and why install   j  It}.  !  ij  ·.'!  '~   C++ Development environment  C++ For Linux           CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT   If you wantto use a preview version of the .NET Core 3 or 3.1  or  later release still in preview phase  you have to configure Visual  Studio 2019 to use  it by selecting the proper option in the menu:   Tools Options Environment Preview features.   Options   I ~~ ~.:~h Opti~-~s '.C!t!_+.::.:_.>_;..,;. ·  ...   .,.  Envtronrri~t'   Ge~eM  Accounts  AutoRecover  Oo'rument::,  f:-itens{qil;;,_  Fl ldan~·R,_e,o1a~  Fo11ts·arid c6tcits  lmport,and;~pgrt~ttjngs  lnt~maliormtSeffings  ··  ·  Keybo.;H:!   ,   ProdUp: Uflda:tes  Startt.IP:  Tabs arid Win$Ws  Task.list  Tru.stSettin!JS  WetrBrt,,WW' --  .   ...  Project!; aocrSofUir~~s  '    enable SOK preview in Visual Studio 2019    For the main development station, you will also  need to have a  working Internet connection in order to access the NuGet central  repository  on port 80  for restoring dependencies packages.   6.5.2  The Linux station   see  .NET Core 3 Install for Linux .   No additional install is  required for ubuntu development station,  many tools are already installed in the default setup of the ubuntu    'i  desktop system. Verify you have the ubuntu pre-requisites  packages installed before the install of the .NET Core 3 SDK.  Some  ,,  samples will require specifics dependencies, but it will be signaled t  for each  example requiring such  install.   ,,   ·r- ::,p   6.5.3  The macOS station   see  .NET Core 3 Install for macOS .   We recommend to install the excellent tool "Homebrew", the  missing package  manager for macOS.  It is often useful to easily  .  install packages as  part of a full stack macOS development  and itif'  mandatory in  some cases we will study . You will find a detailed  }  r·,w  install instruction in the GTK project example section  who requir~~  .;,~  "brew" for the setup of the dependencies .  :    For the development station, if you plane to use  macOS system  }  AP\s or use  native libraries it should be wise to install XCode  as wel;,  or at least the "XCode command line tools".   XCode  is the Apple \DE for macOS and  ObjectiveC  the language inf  witch macOS is written . It can  help you to match the appropriate ,  j,  library  native AP\ , for that OS.  That's suppose that you have minimum knowledge in  ObjectiveC  .:,,  ,,,,,  developments, that could be tricky if you do not know the macOS\  system  for specialist only .   0   https:  brew.sh    -~ https:ljdeveloper.apple.com xcode     CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT   ' 6.6  CONFIGURATION FOR  REMOTE DEBUGGING  :  The  remote debugging allows you to execute your code on a   remote computer  with a different OS  installed  it allows you to  debug in real time without quitting you favorite IDE   Visual Studio  on Windows  on the target platform.  i This technic is  not really often used in the GUI desktop application  [  development context because the platform specifics are shaded  !,  with the use of the cross-platform framework  in  our case .NET  j i. Core  3 .  I ' ! Nevertheless, it can  be used  during the development of a multi- ;  platform .NET Standard library  for example a wrapper  used  by the  f application and that is in this context that technic is reviewed.   ti' ,,   A   In Visual Studio:   i;  [ For enabling the remote debugging feature in Visual-Studio you  i. have to install the "Remote debugging tools for Visual Studio 2019"  ht the following address.  Download and  install also a ssh client for  fWlndows  Putty , it will be  used for testing the connection with the   remote machine and eventually copy the files with the scp utility  it  ifdepends how you  want to work .   https:  visualstudio.microsoft.com downloads remote  -too I s-fo r-v is u a I-stud io-2019 I   http:  www.outty.org    B   Install of the remote debugging tools for Visual Studio   2019 on  Linux:   $  curl  -sSL  https:  aka.ms getvsdbgsh  I   bin sh   dev stdin  -v  latest  -1  ~ vsdbg   This command line instruction should install the required  Linux  debugger engine on the platform.    ubuntu :    t  i~l  ·.1  .. ~  C   Setup admin account for debugging on the Linux system  .· ,ij  ·l   !e  The creation of a specific user for the debugging is  not mandatory:'j  but that provides the benefit of not interfering with other accounf'.s  'i  permissions and groups  that way is  much easier for managing   'i  users on the long run  but you can  use the "root" account as well.  :;1  ..:'' .,j   ,'    ~$  Sudo  adduser  dbgVS   You  can  also simply use the "root" account, if you do not have  security constraints.   You  have to give this user the appropriate rights or and add  him in'  the appropriate group for having access  read write  to the  deployment folder  with also execute permission, in  most of case  ·  the admin group is  required .   D   Enable SSH  and open port on the firewall  setup   communication between computers :    CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT   S  sudo  apt-get  install  openssh-server  unzio  url  ~  sudo  ufw  allow  ssh    ,  This command line installs the ssh server and open the required   port on the firewall  port 22 .   Verify the user and the connection with a simple ssh test with the   , Linux machine  use putty and the new defined user  from your   Windows station. Check also the folder permissions for the user.   E   Deploy the application: Copy the file threw scp or use the   publish tool in Visual Studio:   To  deploy the application, you have the choice to copy it with a  "scp"  command or to use a configuration file for the deployment of  the application during the "publishing" phase. The file where you  can  specify the location of the source and the destination folder of  the executable is "launch.Json".   F   Attach the debugger  in Visual Studio  to the remote   process on Linux:   · If the VS debugger has  been  installed on the Linux machine you  ··  should have access to the list of the process of the user you  · connected with. Select the process  in many cases the name of the  program  and  "Attach" it to the debugger in Visual Studio  make  1ure the checkbox "show process for all users" is actually checked .   G   Do Debugging  in Visual Studio :   You  should be able now to debug the application on  Linux from  your Windows Visual Studio instance.    J  ii   This technic uses the compilation on the development machine, bll··· ...  . .1; :.   you can  also build the application on the target computer and  ,\  attach the debugger afterward.   The  remote debugging tool is an  essential method when you  encounter issue on a specific OS  and  not on the others , it could  . iJ  help you to identify the source ofthe issue and thus, solving it in a}J  ,'?  ·~  minimum amount oftime.  !J  'A,1  '!  <;$.  ;j  ·,*  ;j  ·W   But be aware, the remote debugging tool is sometimes not a  pertinent tool to use for multiplatform application project  development especially when this one used  native calls  with  P lnvoke . This tool cannot be used when you choose to build  a  native executable of your application.   In  resume it is  a tool to use at an early stage of the coding phase  if'.~  you have issue on a particular platform, it can  help you to identify,;!  fatal flaw of a design on a particular OS   yes that's happen: some   !  system offers features that others do not . We recommend to use";   Y,j  the remote debugging tool in  punctual cases of project  . 'ij  ,,;   development requiring specifics debugging context.  I  · j  phase on the windows development platform  within the classical'1!   Otherwise do not spend too much time on this aspect of the  development, you will find most of the bugs during the coding   ~   Visual Studio integrated debugger  anyway.   ]  ,I  Here is a reference link where you can  retrieve some details about:!  this procedure, if your development requires it.  ,:1   ~ . ·   https:  github,com microsoft MIEngine wiki Offroad-Debugging- ~ of-.NET-Core-on-Linux---OSX-from-Visual-Studio   ',i1   :J    CHAPTER 6: SETUP DEVELOPMENT ENVIRONMENT   6.7  SETUPTARGETTESTMACHINE  The target machines  virtual or physical machine  are the typical  platforms where your application will be installed  and ran . If you  want to achieve standard distribution of your application. You  have  to setup fresh  install of every OS you target in your project.   These  machines will be useful to validate the whole production line,  and actually the final product you want to deliver. It is always a  good  practice to test the release you want to deploy or distribute  on  a platform who do not have any dependencies used during the  development phase.   You  do not have to setup these machines at the beginning of the  project, these machines will be  useful when you want to test the  deployment and the execution of your software  at the end  of the  cycle   in  real world condition. It is very important to pass through  this phase of validation who will underlines every issue  in your  application or in the setup program  the errors you  did not catch  on  the development stations .    .N   Core 3.0   Chapter 7.   TESTING YOUR  PROGRA   !',,   Nowadays a serious development project integrates several types'il .-,,  :i  of test for each step of the development of a software solution.  These tests are designed to guarantee that each  piece of code of ; ,,,,  the application  objects, methods, ...   provide the expected results';  These tests should also verify that all these elements work well   ''·    .   1:  ::ect::~ick out 3 types of tests the developer can  use in  a usual  ·,,: . :,,  multiplatform project context.  ~   .  _~,:,·      The Unit tests guarantee the good functional  behavior at   the lowest level   Functions, methods  of the program.   ,,1  '   I  .',~    CHAPTER 7: TESTING YOUR PROGRAM      The functional test guarantees the good  integration of the   basic elements in coherence with the result expected in the  specification.      The  performance test evaluates the celerity of the program   to accomplish tasks  We will develop this part in the  dedicated chapter about performances    The test area is a pretty complex one and  many books have been  written only on this subject, that's why we will only provide you the  basic concepts for achieving the essential tests for your application.   7,1  UNITTESTING  As we use Visual Studio 2019 for developing the projects the  obvious solution in  matter of unit testing and code coverage is to  ..  use the integrated tools for doing that: MSTest.  ; It Is  important to underline that it is  not the only solution for  !building unit-test available in Visual Studio 2019, we can  mention   the historical  and  most popular frameworks for developing unit  [testing project like XUnit and  NUnit. You  will find more information  C i,cn  how to use these frameworks in the links furnished in  reference  ~-·  ibelow, you can also find built-in project templates in Visual Studio   for using these testing frameworks.  ! ~ https:  xunit.net   r ~ https:  github.com xunit   !  ' !   f.,..·· - - - - - - - - - - - - - - - -  ,'   http:  nunit.org  http:  sourceforge.net project nunit    There are several Visual Studio extensions for easing their use with]  a good integration inside our favorite IDE. Their respective project  ': !  template  XU nit and NUnit} are part of the default project  , I  templates furnished  with Visual Studio 2019 . But in this chapter,  J  we will review in details the use of MSTest, we will also  illustrate it~!  "!  :  use with a simple example project.   The principles exposed in this example test program could have  been  done by using any of the others tools quoted before, the  architecture and the syntax of each of these tools are very similar.,,   \   ',~    i   7.1.1  What to test?  The  Unit Testing projects aim to verify the validity of the results  provided by the code written. These tests aim to verify if each  bricks of the code are working as expected.   Unit Testing is coded in the developer environment  sample data,  :A  ,  other component results .... } and  defined by the developer's  '1!A  :!j  comprehension of the feature to develop.  Usually you should  consider to developpe Unit testing for methods functions with high!  .  J  ,~  complexity in  logic or in calculation.  j  Avoid to write unnecessary test for basic method, just for  improving the code coverage percentage  that actually not matter;~  r!  much , and try to keep  it clear and consistent with the project  goals.   ,',!   7.1.2  MSTest  Visual Studio test framework}  For the coding of those tests, the developer can  use the built-in  Visual Studio tool: MSTest. This tool has the advantages of being   ;  ··:j    CHAPTER 7: TESTING YOUR PROGRAM   already available in Visual Studio and very well documented on the  Microsoft support web site.   http:  docs.microsoft.com en  us dotnet core testing unit-testing-with-mstest  https:  github.com Microsoft testfx-docs   In Visual Studio, the unit tests are implemented in  a dedicated  project, usually a test project is written matching a group of  methods of the same class. A single test project is coded by the  developer for each and  every features or functionalities  regarding  the criticalness .    ·  7.1.2.1  Creating a unit test project  For creating a test project, you have to select "MSTest Test Project   .NET Core " in the "New Project" window as show  figure 1}.   Cre~f~ a newprojec~   ,....,.,,.,,,,,~~""'''n  ·~~ ..;i;.!ie  .  ,bp'ay"'""";·   '   c.,;.,:,.J ...    't  " ' ' - · " " "    .,.,,.   ..,,    figure 1     Choose a name for it  preferably with the term "Test" at the end !  once the test project is created you should add the dependency   with the "Reference Manager"  with the project containing the  +  code you want to test as described below.   You can find an example of MSTest Test project by checking the  reference link below it will provide you a quick view on  how to  implement and  use this type of test project in your own solution.   o https:  github.com netcore3 CodeBook Chapter   7  1  UnitT estProject   7.1.2.2  Define the validation of the test: ASSERT object  You  have now a Unit Testing project created and  linked to your  main application but you have to define what conditions will  produce a passed test or a failed test.   That is  done by using the specific instruction ASSERT.      1 .    CHAPTER 7: TESTING YOUR PROGRAM   The ASSERT object validates a result object with the expected  object. Th is validation validates the test  indeed .   ASSERT is used for the validation of the test. This validation can  be  done by controlling the result value of the method you test. ASSERT  Is  a class ofthe namespace  Mlcrosoft.VisualStudio.TestTools.UnitTesting.   The test validation can  be done by using the following methods   not an  exhaustive list  of the ASSERT class:      ASSERT.AreEqual  : Validate the function tested, by   checking the value of the result of this one  but you have to  know the result value .      ASSERT.AreNotEqual  :  Validate the function   test passed   ok  if the result is  not the value tested.      ASSERT.Same  : Validate the function  if the resulted object   and the expected object are of the same type.      ASSERT.NotSame  :  Validate the function if the result object   and the expected object are of different type.      Assert.lSNull  : Validate the test if the value checked  is      Assert.lsNotNull  : Validate the test if the value checked  is   equal to Null.   different from Null.   !There are several other ASSERT methods available  see   :documentation in  reference  for various test validation types but  ,,   these ones are used  in  most of the cases encountered by  r.developers  these are the most often, actually, used .  f,    http:  docs.microsoft.com en- .\ .,  us dotnet APl microsoft.visualstudio.testtools.unittestiri]  g.assert   ·:  ·X   .1'   Be careful, the choice between all these types of validation will  make your unit testing code  relevant for the checking of the  method or not. If you do not choose the adapted assertion for theJ:  validation, the test can  be useless,  or worse, not checking the cod$'  validity.   When the ASSERT method is  not validated an exception is thrown   ASSERT Exception  and the test is  "failed".   7.1.2.3  Execute unit tests  For Executing the Unit Testing projects, you will have to use the  "Test Explorer" window as shown below:    test Explorer    You  can  run all the tests for the project at once by using the "Run l   All" menu or a specific test by selecting it with context menu "Run'}    f,  :1'.·   f~ -~   ~,  I.' " ~ r   ,.  CHAPTER 7: TESTING YOUR PROGRAM  '-·-- - - - - - - - - - - - - - - - - - - - - - - I   ~. ?,1.2.4  Visualize test results  tThe result of the tests can  be seen  in  "Test Explorer" window, a  I  ! Breen check mark indicating the test is valid  and a red cross  i Indicating the test has failed as shown below.  m t ~'.·   .    Test Explorer Result View    ~MSTest offers a good solution for the implementation of Unit  hesting in your project, as  native inside Visual Studio the tool  ~ Integrates itself perfectly with the I DE of Microsoft. It is very well  r'documented by the Microsoft team. References and tutorials can  fbe found by following the link in  reference.   http:  docs.microsoft.com visualstudio test   " [.  fi,  Ii  7,1.3  Mock concept  ~The  issue for the definition of pertinent Unit Testing is the  t:developer context: many objects are not yet been  defined or the  ti·. !'database  is  not yet available when the unit tests project is written.  t  ~That  could be an  issue because the developer has to test the  f·method with the larger panel of input data as  possible, covering  , every case  possible  in theory .    The work around is to use dummy object or database for imitating:   · 1  the real data or object in interaction with the function the  developer needs to unit test.   '~  This concept is called mocking. Mocks isolate the method functioril~  you want to test and validate if it is running on its own  ;'    independently of the other methods . Mocks can  setup object witpJ  !~  given values and set properties of this object.   il  The developer has to hard code attended input values for the  method and define a validation test with the expected  result valu~:l   hard coded too .  ; J   For .Net Core 3 development we recommend to use the Moq   4.xJJ  this is the most popular and user-friendly mocking framework.  .   Moq is a library that makes easy to develop and test mocks,  ·  '  ,:J  moreover this library provide LINQ to Mocks feature allowing to  ';"  dynamically request the mock objects for the validation. It support···;~.!i.'.  mocking interface and class as well.  .:ij  .J;i  ., ..   https:  githu b.com moq moq4   https:  githu b.com moq  moq4 wiki Quicksta rt   ·.   You  can  add the following package to the test project for a rapid  >:ii  integration of Moq.      ~ nuget   Moq   The latest version of this package  is  implemented with .NET  .·~  <li  Standard 2.0, so  it is usable within .NET Core 3 project  that is the   j  i  beauty of the .NET Standard  library format .   ii   ·~   '.'i!    CHAPTER 7: TESTING YOUR PROGRAM   Here is a snippet for showing you  how to use Moq in  a simple  use case.    As you can  see the use of Moq is really simple and  can  be made by,'.'  1;,  rookie developer:      Declaration of the mock: Define the type of the   object you want to mock.      Setup of the mock: Define value for the method    who is  mocked .      Verify the mock:  Verify if the mock has been  called}  ,,,    or not .   Moq has an API  straightforward and  does not require previous  knowledge of mocking.   .'i'.;     There are also several other libraries allowing to mock objects  during the unit testing phase, you can  have a deeper look on  ..  NSubstitute and FakeltEasy for having a wider view of the mockin!i;'  libraries on the market  it is Opensource . These two libraries offe   equivalent functions than the Moq library described before  minus'  the LINQ capability .   You  can  consult the wiki on their respective GitHub repos for mer~,,  information.   https:  github.com NSubstitute   https:   gith u b.com Fa keltEasy    7.2  FUNCTIONAL TESTING  The functional and integration testing consist in the test of each  application features. In other word verify if the assembled   application provides the expected results and features. This can b~:I   '.:,,   1   achieved by selecting specific sample of data or configurations sets,     CHAPTER 7; TESTING YOUR PROGRAM   These tests cou Id  be:      Tests with key values.     Boundary tests.     Off domain tests.   Functional testing is a black box type of testing since it involves to  complete the entire software development for being done. Testers  verify the conformity of the resulted software against the product  specifications by using several scenarios and  use case.    .N~   ,   ,'  !i   ,' '   Chapter 8.   MULTIPLATFORM  DEVELOPMENl  SOLUTION;   ''i   Here is,  may be, the most useful chapter of the book, if you want\  start a multi platform project. We will see through the detailed  review of several example projects how you can  code a  multiplatform desktop application using .NET Core 3 and Visual  Studio 2019.   ' ,·;   The source codes of these samples are available on the netcore3  ;'.  GitHub repos  detailed links are given with each examples .   :c  i!    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   · All the projects have been built with the .NET Core 3 and  most of  them using Visual Studio 2019 .   . 8, 1  CHOOSE THE MULTI PLATFORM APPLICATION TYPE: THE RIGHT TOOL   FOR THE JOB   , According to the type of project you intend to develop, the choice  : ofthe languages  C++,  HTML, XAML ... } and the targeted framework  ; Is crucial.   Many solutions exist already on the market for multiplatform  development but only .NET Core 3 provides you the state of the art  . In the arena, regarding performances, maintainability, language  i features,  packaging and deployment capabilities.  i In the present book we will offer you a panorama of solutions for  i solving the specific issues you could experience during a  k multiplatform desktop application development using .NET Core 3.  f  reach  solution proposed could address specific constraints or  ' ~ provides specific features your application has to integrate, none of  !these solutions offer a perfect response to all  multi platform  !,desktop development needs, that's why you have to give a  ' tparticular attention to the choice of the development's type you  ~'WIil  initiate to respond to your software specifications  and  tlCCording to the resources available}.  ,,  f.'  ,This can  be achieved  by studying carefully each solution examples  hhls book provides:  '        The console GUI  application.     The web GUI   Electron.NET} application.       The native GUI  applications  Graphic Library C++, GTK,   QML .      The XAML GUI   Ava Ionia  application  some kind of Natives >  ,   too .   Among these solutions, you should find THE solution, the one, the  :·  most adapted to the constraints and  requirements of your project,    ;I,       This choice is also conditioned by the type of developer you  are   or!,  in witch kind of development you  have much more experience for  ·:,  producing a quality product .  i'  : 'Ji  If you come from the web-oriented development  ASP.NET,;'  developer  it should be a smart choice to start a desktop  application with a tool allowing you to leverage this  knowledge straight away by using Electron.NET.  If you are a good C and or C++ developer  console, system,;  service  you can choose one of the native's solution for  implementing a GUI   LibUI,  GTK, QML.NET .  If you are a C .NET framework desktop application veteran,'   or WPF developer  you surely oriented yourself to the  solution proposed by Ava Ionia  but also may be QML or Gi:.c  '  solution            In  resume, the choice of the solution's type will be  matter of the  resources available and the requirements of your project.   · ,,  , i\'   8.2  CONSOLE GUI APPLICATIONS  Console GUI  have been disregarded by number of developers since::  the development of graphical user interface, but in  many cases,  it   :<1    CHAPTER 8: MULTIPLATFORM DEVELOPMENT SOLUTIONS   could  be a smart choice  even  if that's not the trendiest  for the  development of multi platform applications.   Those last years,  many libraries have been developed for building  "nice" interface for console programs.   That's in  part due to the fact that many cloud frameworks  most of  them are multi platform  have  been developed for the server world  and  de facto with no GUI  implementation. In that context, coders  have felt the lack of commercial offer in that specific domain and  many propose their own solution. Most of these libraries are the  fact of developer's personal project and  does not offer support of  any kind other than their contact on 1:he GitHub.   Despite that, the implementation of a console GUI  application  Includes many benefits as:      Reduce the resource used for the information display.     Can  be easily deploy via container  Docker, or Kubernetes .     Reduce development time and focus really on the purpose   of the application.      No need to use costly library  save RAM  and CPU .     Only one version of the program is compiled on every OS    Windows, Linux, macOS .      Vintage cool look  personal taste .   Here is  a selection of few libraries made after trying several  available console GUI toolkit frameworks from GitHub  this is a  non-exhaustive list, as the subject become much more trendy many  .. new projects are emerging :      ConsoleDraw.     EasyConsole.       Console Framework.     Terminal GUI.CS   I""\  https:  github.com Haydend ConsoleDraw  '= ii  https:  gjthub.com splttingatms EasyConsole   https:   g ithu b.com  elw00d  con so lefra mework   ,;t,  You  can  review the frameworks mentioned above  by yourself ifyo'"  want to have a closer look on the panel of solutions for this kind of:· ,'  GUI  development. Most of them are developed with .NET  framework and have to be upgraded to .NET Core and  many of  them required the use of native dependencies for Linux and  macOS.   The docking  deployment in container  of programs growing in  popularity many developers work to produce a library offering a  minimal interface toolbox for the users in that context. There are  many new solutions in this domain and the community around the '  subject is vibrant.   \  In the present context, the Terminal User Interface  TUI  is growing  !':  in popularity and should not be ignored anymore by modern  developers especially if you develop containerized applications or.:,.  services with minimal visual monitoring capabilities.   The version we will use in the following example projects is  Terminal.Gui, mainly because it works already on every platform   Windows, macOS,  Linux ,  it does not require the installation of  native dependencies and  a NuGet package is already available.   !'}  \  The Terminal.GUI  released  have foundations developed several  "  years ago and  is still actively maintain by the authors  GUI.cs:  Is  als'    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   used  in  commercial environment , that fact make it a reliable tool  for professional usage.   8.2.1  What is Terminal.GUI?  Terminal.GUI   or Gui.cs  is  a console-based user interface toolkit for  ,NET Core applications. The original version was developed for  being used with Mono  cross platform .NET framework now known  as a Xamarin products , It has been ported to dotnet core in 2018.   It Is designed to work on monochrome and color display using  predefined color schemes   built-in . This toolkit integrates already  an  important number of working controls  or widgets .   It Is event based so the threading of each functions called should  not interfere with the main thread of your application. You  can  also  use the async await pattern.   Here is  a list ofthe controls already implemented in Terminal.GUI:      Button     Label     Text entry     Text view     Radio button     Checkbox     Dialog box     Message box     Windows     Menus     List     Frame     Progress Bar       Scroll views and  Scrollbar     Hexadecimal viewer editor  HexView    Obviously, a such  panel of widgets available makes possible to  develop a complex GUI  application with advanced features   for a  TUI .   The  package is developed using the .NET Standard so  it is  able to  work with the .NET Core 3 version, the source code is available at  the author repository on  GitHub.   O  http:  www.github.com migueldleicaza gui.cs   In  addition, Terminal.GUI  is  also available as  a NuGet package for a  rapid integration in your .NET Core 3 project.   This  library seems to offer the best support for mouse  on  Windows, macOS  and  ASCII  GUI  program implementation  in the  panel of the tools reviewed .   The main object is Terminal.Gui.Application, Application is  implemented by an  instance of the Main Loop object. This object  includes several key features:   .NET Async support      Keyboard and  mouse management        Threading GUI     Possibility of integration with other Mainloops for multiple   screen  application .    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   This  solution has  been  also  recognized  by Microsoft for developing  console GUI  application.   Terminal.GUI Wiki:  https:  github.io terminaLgui   Microsoft broadcast about Terminal.Gui on Microsoft   Build  https:  www.youtube.com watch ?v"'Se1zNWJwDU E   llo not missed to view the YouTube video from the RETRO  programing event  2018 . This Microsoft broadcast with the creator   Miguel Delcaza   is  really informative about the different features  o1vailable  and  can  be  used  as  a quick learning method for  Introducing yourself to the use of this library.   8.2.2  Terminal.GUI screen design  With Terminal.GUI you  do not have  a visual designer for your  :,creen  and  you  have to code the GUI  in C.  Each  control has to be  declared, configured, and  added to a parent object by C coding.   lhat means, you  have to make  by yourself  a clear separation in  your code between the functional logic of your project and the  presentation  implemented with Terminal.GUI.   I or doing so, we recommend to separate the screen  related  task   display  to a specific source file  .cs   to not interfere with the logic  ,ind functional aspects of your project  see  samples .   As  you  have to code your GUI,  you  should  have  a clear-cut idea of  Ille screen's design before the coding phase.  For achieving this    goal, you have to sketch your interface on  paper  or use a  dedicated software  and use the paper grid as a character unit as  shown  figure 1 , be careful of the format for the screen you   {40X25 screen canvas    You  have to define the screen  size you target {40*25, 80*40 or  others ...  ,  put numbers on columns, rows and sketch each  control{ ·  ',;;r  on the grid: window, group, menu, label, button ...   In this case you can  use the website furnished in reference for  sketching your ASCII  app  as you can  see figure 1 .   ~ http:  www.asciiflow.com    CHAPTER 8: MULTIPLATFORM DEVELOPMENT SOLUTIONS   :  The  numbers on columns and  rows will provide you the positioning   elements for your controls. You  have to do this work for each  screen, window and dialog window of your application.   l  Once the sketch is  done you can  retrieve the coordinates of each  [  control from the grid and thereby avoid the tedious task of locating  each  control by repositioning them after try and fail  loop until you   i  achieve the expected result.  1:  [  Terminal.GUI furnish  methods for:      Defining Windows size to full screen  retrieve the available   dimension of the current console display .      Positioning window, dialog form and control in that screen.     Manage keyboard and  mouse input.   f  i,  ;,  '-1 I Like  every Opensource projects you  can  extend the Terminal.GUI  p  ii  framework with your own controls and features, you can  have a  J preview of what can  be achieve in  matter of ASCII widget design  by  t visiting the website in the reference below. This site propose design   cfor exotic and  innovative text widget design.   11      hup,   g;s<.gltheb Daa,.,s~tt   ;a,2.3  Console GUI example applications  "'The two following example projects are developed using the  ~publicly available NuGet package, the complete source code of  leach ofthese programs are available on the netcore3 GitHub  see  ~]appropriate web pointers .       For the coding of the first example of a console GUI   application we will use the base example furnished on the  original site as  boiler plate:  a full screen text editor.   .,     For the second sample: a mini dashboard, this example wi11 1  :.   demonstrate the use of several types of controls and  layouts available with this library.   8.2.3.1  Coding of the Text Editor  conso eTextEditor   ,,,,,  An  always useful developer tool, the "consoleTextEditor"  :;:  application is built around a full screen form with a top menu and  ',  '  ·1  an  editor window. It offers to the user the opportunity to create  ·ij1  and  modify text file with a "textview" control.  '!·  +  Here is the screen shot of this application running on the different}  ,;,  platforms.  j. ·;;   ,'~   macOS:    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   ubuntu:   Windows:    j   As  mentioned before, the presented version is a refactoring   architecture, file organization, presentation  from the example  project furnished in the source library repository.   The size  of the main window is  automatically sized to use the fu II  console screen, and the resizing of the window is possible   Windows and  Linux .   :j  1{  'j  9  ;~  The  menu items are accessible by using the "F9" function key on  .,,,  'i~  ··~  Windows and macOS,  "Esc 9" on ubuntu. The usual copy paste  · ~  functions are available form the keyboard usual shortcuts.  'J  ]  ll  }  :~  ;~  iii  The "consoleTextEditor" application is  provided as example and c~J  be  used as a teaching sample for the development of a GUI  consol~  application regarding the menu integration, Windows, buttons ... i~  I  .;1 _x,  The project has  been  refactored in order to furnish a better  organization of the general architecture. This sample project does::   not implement best performances practices but the general  :.   i: ;;!I  architecture can  provide the base for the arrangement of the  \ij  source code for a console GUI  project.    ,i   This minimal application includes two files:   ::u  ,,Jj  .... J  '1  FileOperation.cs: The basic functional functions of the program   open  create  save file  are implemented in  a dedicated class,·· i:l  ·J  these objects rely only on the .NET Core 3 framework for every  ;cm  ;l  platform.  :}1'  ,,_:,1  Gui.cs:  In this file you will find the definition of each windows oft~  application  Main Editor, Open  document, save document, New  j .;  Document, About, Error Message windows, Quit confirmation  ...  . l _1,  ''l  This object implements every code relative to the display of  windows and  controls of the interface.   ,'-'i!    _'l    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   As the application does not incorporate any business logic  other  than FileOperation . The file Program.cs is  actually quite empty  with only the call to the main graphic user interface object.   The calls to the file functions are down through the menu with  a  static class.   Here  is the "Solution  Explorer" view in  Visual Studio:   ., ,  ~": ·Oependetjdes·   0  ·~·    i,'l  NuG;i  ·~· .·  ~T rmlnoi.Gtii -024.lJJ   .   .~  B DK  <:ff  Fi .eO'P:e.ra~on'.-cs  _C  -Guiri:  ti'  ~rogf,jra,cs   fl!  ~   cid:141     consoleTextEditor "Solution Explorer"    [You  will find the complete source code of "consoleTextEditor" in  l1the sample folder of the netcore3's repos.  ,,  Q  https:  github.com netcore3 CodeBook Chapter   8 2 console TextEditor   This example is a good starting point for the study of the  ·development of a full screen console application and can  be used    as  it. This is not an  optimized version using the best practices   :,i  previously recommended, the coding style is  basic and does not  }l   For the use of a much  larger number of control types you can  review the next sample  "consoleFormApp" .   implement any C new features, do not hesitate to improve it  fo ;  , .. ~  it on GitHub .  "I  ,.,J,1  ~·~  j]  ;j  ';J  ,;~  :~  ij   8.2.3.2  Coding of a basic Form application  consoleFormApp   The "consoleFormApp" furnish a useful project example for  developing an advanced console application GUI  using  Terminal.GUI.   '; !,   ,   This sample display, in  multiple windows, several controls availabl~  for the design of your console application. It demonstrates also thi  ,:,~  use of ASCII  art and  how to make a creative use of a console  program.  l  :~  >t  ii ,.~   Here is the project structure as presented in Visual Studio's  "Solution Explorer":   SJ   i!J \~ ·J  l "    consoleFormApp "Solution Explorer"     CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   The general architecture of the project is almost the same as the  consoleTextEditor project only an  empty facade object   nativeFacade.cs  have been added. The  "nativeFacade" object  provide current OS detection routine, for an  easier integration of  natives calls by using specific implementation according to the OS  used   Windows, macOS,  Linux , you can  easily reuse the pattern for  your own program  or even  improve it by the use of an  interface  and  several class dedicated for each system .   As  described above the "consoleFormApp" includes several  controls available in Terminal.GUI, the use of "ASCII  art" give a  cooler  and vintage  touch to the application design as you can  see  below, it illustrates also the use of dedicated code  for each OS ,  . capability offered by .NET Core 3 interop capabilities.   On macOS:     CHAPTER 8: MULTI PLATFORM  DEVELOPMENT SOLUTIONS   This application is a live demonstration of what you  can  achieve  With  the use of ASCII  widget and ASCII  art in  a console GUI  application. Do  not forget to be creative when you  use an ASCII  based GUI  because the possibilities offered by this type of GUI  are  very limited.   consoleFormApp  is a standard presentation for the use of many  controls furnished by the Terminal.GUI  library, the widgets are  presented on the left window of the application  with its name on  it  when that's possible .      Window.     Group.     Dialog box.     Header Menu.     Label text.     Textbox input.     Button.     Option.     Radio.     List.   This sample demonstrates how the implementation of controls can  be done in your windows and  illustrates how to implement multiple  windows in one screen within a console application.   The "consoleFormApp" illustrates also the use of a custom  ColorSheme struct. This project example furnishes a fa~ade pattern  useful for calling native code specific on each  platform  with the  display of the current system name .   You  can find the full source code of this application on the netcore3  GltHub.    O https:  github.com netcore3 CodeBook Chapter   8 2 consoleFormApp   8.2.4  Pro cons console GUI  The console GUI  is a fantastic choice for developing a GUI:      minimum of resources requirements.     Perfect multiplatform coherence  you  can  choose to have   only one source code for all the platforms .      Straight forward development  only one project to develop  ·   your application .      Simplicity for the deployment and packaging.   But this solution can  not address every application:      Application with advanced charts.     Application with intensive graphics use  picture or video .     Advanced navigation system.     Accurate mouse support.   In  conclusion, the use of the console GUI  can  address basic GUI  needs, for console tools but is  not adapted to most advanced  application's requirements like: graphic display, chart, animation  and  advanced interactivity of the interface.   For all these requirements you will have to choose another GUI  solution presented subsequently.   Here are some pointers for getting the complete on line  documentation and  an  example project used for checking the  dependencies of a .NET Core 3 program  could  be useful .    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   http:  migueldeicaza.github.io gui.cs api Terminal.G  ui.html   http:   www.github.com mho lo65  depends   8.3  ELECTRON.NET: ASP.NET GUI APPLICATIONS  Using the ASP.NET Core framework sounds like a relevant choice  when you need perfect matching of the interface look and feel  across  heterogenous platforms. This method requires a good  knowledge of the ASP.NET core web development  and JavaScript .   Actually, this type of solution for the implementation of a desktop  application appears to be an  ideal choice for ASP.NET Core  developer because the all software development life cycle is very  similar to the development of a classical web application.   There is  no doubt that the knowledge earn  in this section would be  useful for the development of such application with the future  release for .NET Core 3 as well.   The type of development using Electron.NET is,  at the current time,  not executable from Visual Studio and  many Electron specific tasks  have to be done with the .Net Core SDK CLI.   The  Electron.NET wrapper is not conceived to be used with Visual  Studio 2019  you have to use the CLI  SDK in many cases .   But before reviewing this library, we will look at its origin and  history.    8.3.1  What is Electron?  Electron is a relatively new framework  July 2013  for the  :i '!  \i  development of desktop application with JavaScript. This  framework has been developed and  maintained on GitHub under  d :::,:t  an  Opensource model. The Electron API  has been developed using   :j  C and C++  and exposed through a JavaScript wrapper.   I  Electron is the combination of the Chromium rendering engine and  '.,!  ·l  the runtime of Node.js  both Google technologies . This  ,' ~  combination allows to a web application to be run in a container on   A  a desktop as a standard desktop application.   ";J   Popular applications have been developed using this tool:      GitHub Desktop     Visual Studio Code     WhatsApp     Skype ....   0  https:  github.com electron electron   The  main  reason  of the success of this framework can  be explain b~l  the fact that many web developers use this framework to leverage}l   j  their competences in  web development to the development of  desktop applications. Despite the fact of an  architectural lack of  ·   performances such applications are gaining in popularity  thanks t9~.·  the now days computer power  among the web developer  :~  -·~  community.   8.3.2  Presentation Electron.NET  Electron.NET is  a .NET Core wrapper around Electron, the first  release goes back to October 2017. The wrapper provides to .NET   'iJ .,  :i  -:~  J ,.  · ,1 :::    CHAPTER 8: MULTIPLATFORM DEVELOPMENT SOLUTIONS   Core the ability to use the Electron API.  In other words,  Electron.NET allows to develop an  Electron application from an  ASP.NET Core web application.  The  current version of Electron.NET is 5.30.1 and  is compatible with  .NET Core 3  so the following versions should be too .  This wrapper is Opensource and  can  be used  and  extended by the  .NET Core developers.   O  https:  github.com Electron.NET   But there are some prerequisites for using Electron.NET. This  framework requires you to install Node.JS  at least version 8.6  on  your development platform. Even  if Electron.NET avoid you to use  JavaScript for the development of the Electron application, it  requires NodeJS to be installed for the building and  running process   that's the Electron engine .   For a good  integration in  .NET Core,  Electron.Net is available in  NuGet packages. To make the communication between the  Electron  runtime  Host  and the .NET Core web application you  · have to include the appropriate packages to your project.      ~ nuget   Electron NET.AP I  ElectronNET.CLI   ElectronNET.API is the layer the developer has to include to the  web site for accessing the Electron features, this package does the  bridge between the Electron  host and the ASP.NET web application.    The ElectronNET.CLI is the command line tool used to build and  package the Electron application, it Is not used  inside the code of  the application  it is a tool . ElectronNET.CLI  is  mandatory for  running your .NET Core  Electron.NET application.   You  can  install this tool with the command line described  below   this is a toolset package for dotnet CLI .  It can  be installed as a  global tool for dotnet CLI,  extending it with the "electronize"  command.   After the setup of Electron.NET.CU in .NET Core, the command  "electronize" is available as  a global tool for the dotnet CLI.  The  "electronize" command will be installed only for a specific .NET  Core version, the tool itself is installed in the user folder:   %UserProfile% .dotnet tool    But before using the Electron.NET wrapper the .NET Core  application developer have to install the prerequisites tools:  Node.JS and its dependency NPM.   'i   ..,  l   J  8.3.3  Setup of NPM and Node.JS  NPM stand for Node Package  Manager, Node.JS is the JavaScript  i  runtime engine from the Chromium project  developed by Google .::  Electron.NET requires a version >8.6 of Node.JS. We recommend tQ ,,!  install the NodeJS from the dedicated web site  see web address in:,  reference  for getting the latest version of the tools and  guaranteeing a proper install on  each system.    CHAPTER 8; MULTIPLATFORM  DEVELOPMENT SOLUTIONS   Here is the reference links for the download of the setup file  and  for getting the documentation for each OS  reviewed  here .   https:  www.npmjs.com get-npm  https:  www.nodejs.org en   We will review in  details how these tools have to be  installed on  each  platform, because this is a core requirement for the usage of  the Electron framework and often constitute an  issue in the  building process of the project.   8.3.3.1  On macOS  For this platform we recommend to install the version from the  NodeJs web site  this is the latest and you  should not have issue  with the version number during the building of the Electron.NET  application .   Once it is down loaded you  have to install the tool by clicking on  it   this is  a .pkg file . Here is the form you should get after a successful  Install of the product     ·  Node.j$V1210.0to   us± local bin nOde'.     npm \16.10.;3-to   ue_r local bin npm:   _Make sure th_at  usr local bin Is In  your $P~T!L   '1  :]   j  ':,m   :'11 ]  Once the installation process is finished, we recommend to reboot ~  the computer  for being sure that every environment variable have',~  been updated  before starting to build the Electon.NET application{j   ;'m   ~n:~~r'~~:~n;_s well since it is  not in the same  package for this   '  ;;  l  8.3.3.2  On Ubuntu  On  the Linux system you can  install Node.JS  using the usual packagJJ  · :1  manager "apt" by using the command below, you will have to  . }i  . 'l  ' I  I :-<~   $  sudo  apt-get  update  $  sudo  apt-get  instal~  nooejs  $  sudo  apt-get  insta~l  npm    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   Here is how looks a successful install.    ,et: 3  http:   us. archi. ve. ubuntu. CO!'S ubuntu  bi.or,-Lc ft1ai.n  .a.r·1d6,~  Hbht·tp -parserZ. 7. 1  <-11 1d6.<,  2<7.1·2  [20,6  k6]   ,et: 4  http:   us. archi. v~. vbuntu. o.,:'l Ubuntu  bi.ontc- updates  uni. vcr se  ,Jl'",dD4  node"js  ,11 id64  8.l0.G-Jfs9-Zubuntu0.<1  ['1,796  kB]  le:ched  ';i,066  ko  i.n  4fs   l.20  k8 s   'it;le::ti.ng  pr·ev\.ous ly  11nse lected  1.Readi.nq  dat.0k;se  l'reparing  tP  unp;:;ck  11npa::kin0  n; ciej ;-cioc   R.10.G- dfso-2ubun:us' .4   - '.-i  i.ecti.r,g  prevt.ously  un-sel0cted  packa9e  \ U,c -a res 2.: af'ld54.  l'rcpari.!',g  tc:,  ur.puck  11npacki.ng  li.bc-ares2:.:ir1d64   l.1-1,0-1    ·,electlng  previ..cHJsly  unselected  p.:icka;;e  1  'ibf1ttp   p;.irs frZ. 7. I  :arnt64.  i'rt:par'inq  to  Ur<pacK  ...  L'ibf1ttp-parser2.7,  7.1  nod>2js.   1342..:\Z  fi.les  , n0dE>j"';-doc  8.H:l,O--df~-g-2ub,J'1t;,;8.4  s,lt.deb   dtrectori.'C's  curr·r:cnt1.y  i.n:,tallr,d.   . ,  .  llbc -;irc1s2_1. H. 0- l_a'1d64 .deb   .7.  -2_rrnd64.deb   n:::idejs - dee.   1.ibhttp-  uriselect'?d  ..  nods:js_f;. lb .0~d"s9- 2ubuntu0. ·1_.<w1cb-1. deb   l'l" ~par'cng  to  unpack  linpacklng  nod~~js   G.10.G--dfsg-2uburrtuG . ..J   ,-i~l Li.ng  up  ncd"'j!';-doc  {s.1n.e--dfs9-2ubcintuG,  ,,.,tti..ng  up  1 i.b'1ttp-parser2. 7 .1 :;:md04   2, 7. l  1·1  ocessCng  tr·i.9ger·:;  for  l\.b,>01.c   2.2.7-3ubuntul   1 1·ocess1nq  tr\qqers  for  f11cin-db   :::.3.0:!·2.   ',<'l:U.ng  up  li..bc-areSZ:cndtA   1.14.e-1:,  , 1!tti..ru_J  up  rwdeis   iJ, 10.0--df,;q-2.ubuntvOA   11pdate-alte,-r,.;iti.v1~s:  \.'Si.119   usc bi.nj,1ud,;c:-j;;  tc,  pr,:ivtde   v:c.r b\n   l'li,d,~  l'roce···,;si.ng  trtg:3.ers  for  1 U:,c -bin   2, 27-Jubuntul   1-i[',l'J\llJbt;nt;J:  $  I   ·,·    \'1   ,,,:,,   Once  both packages have been correctly  without errors  installed  you can  control the version  installed with the command below.   '?  nodej s  -v   The use of this command will also help you to validate if everything  Is  in  working order  verify if the install has  been  performed  correctly . The version  number displayed have to be >8.6.    8.3.3.3  On  Windows  On  Windows, you have to install Npm and  Node.js.  The  setup of the Node.JS version from the Visual Studio Installer  program is not adapted for the building of an  Electron.NET  application  as you also  need  Npm to be  installed . We recommend  to not use this version for this specific task.   The  much simpler solution consists in the setup of the  Node.JS Npm from the dedicated web site, it will ensure you install  the latest version available  the link is provided in reference  previously .   Here is  a view ofthe install  program.   11iifl NodejsSetup   Welcome to the Node.js Setup Wizard   f'  The  Setup  Wizard will install  Nod-e.js-on your computer.    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   Windows requires that you  reboot the system for updating the  system  with the new environment variables before starting to use  it.   8.3.4  Electron.NET QuickStart  The use of Electron.NET implies to follow a procedure in  order to  integrate it inside a ASP.NET Core application and transform it to a  desktop application.   Here  is the short procedure for "electronize" your ASP.NET Core 3  upplication. We  will  review latter in  much  more details the  application code itself  within the example section .   A   Create an ASP.NET Core  MVC application   That can  be done by using the dotnet CLI  or Visual  Studio.   B    Install the Electron.NET command line global  since version  0.9} tool   Before  starting the development of your application, you have to  Install the Electron.CU global tool for the dotnet CLI  with the  command  line described below.   $  dotnet  tool  install  -global  Electron.NET   C   Add the Electron.NET package:   Besides adding it from visual studio NuGet packet manager, you  can  add the dependency by typing the following line in the package  manager command  line.    PM>  Install  -Package  Elect  ron.NET.API   D   Setup packaging {For ubuntu and macOS only    ' .ri  r,,. .,  This step is only for the ubuntu and  macOS platform, on these OS J  you have to install "electron-builder" with the command line  instruction as  below.   ,:i:   $  suoo  npm  install  electron-builder  -global   E   Start to use Electron.NET:   You  can  achieve that by using the following code inside the  WebHostBuilder.   You  can  notice we have just added the "UseElectron args " line to]  the WebHost for enabling the use of Electron inside the MVC  ASP.NET Core application.   F   Create the Electron window in the Startup.cs file:   That's can  be done by the following instruction in the "Configure" .  method:   Task.Run async      ->  await  Electron.WindowManager.CreateWindowAsync   ;    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   With this line of code, the web application is  executed inside an  Electron window.   G   Initialization of the application:   The first time you start the Electron  application you have to  "Initialize" it with the command described below  you  have to be in  the application folder .   ':\appPath>dotnet  electronize  1nit   This command will create the "electron.manifest.json" file who is  used  by the "electronize" command for.the execution ofthe  program  this file describes the Electron context .   H   Execute the application:   After that, you  can  execute the Electron.NET ASP.NET Core  application with the command "start" as described below  in the  application folder for Windows and  in the solution folder for  , ubuntu and  macOS .   ':\appPath>dotnet  electronize  start   On  ubuntu and  macOS you  have to use the "electronize" command  without the "dotnet" part as described below.   ~  electronize  start    ·-FJ  With this command the application is  executed in a classical  :'$,  1j  desktop application window  not in the browser, but this is still a  ' !; ,j  web application .   8.3.5  Electron.NET application example  ,c;  ,,.,,<  As  Electron.NET is a popular wrapper around Electron, you will findi   ,,,,1·   for the development of your Electron.NET application  see  reference links .   plenty of code examples  check GitHub  for helping and guiding yo.ii '  11 :~  ,;! .~  ;:-~  "'!  These examples make often an  intensive use of the SPA  Single  Page Application  technics and use specialized JavaScript  ,  ,~~  frameworks like Vue.JS or React ... The reason  is that the desktop  ·· ·,  :J  :·lj  application experience requires a minimum of blinking screen for  being likely by the user and  looked as  a tangible desktop  application.   So, the development of an  application with Electron.NET implies a~ :r~  intensive use of JavaScript for making the buffer between the web:,  development back-end and the desktop Front-End   who have a  111  i  natural tendency to blink as a common web application .  :1  The Electron.NET, ASP.NET Core example application we will  reviE;?li;  is the "ElectronNET-API-Demos"  application from the Electron.NE~  ]  repository.  ,.,;  This is the application of reference for this type of application. Thaf  ':i  illustrates the use of many Electron.NET features. Most of the  source code is exposed  in the application itself for teaching  purpose.   ;1,   In this sample, you will find a couple of useful technics specific to   i  the Electron.NET application type, these technics can  be reused in     CHAPTER 8: MULTI PLATFORM  DEVELOPMENT SOLUTIONS   your application. These samples can  be a good starting point in the  study of Electron.NET. Among those technics we can  review I n  detail the native menu and the native dialog window.      The use of a native personalized  menu  requires a specific   controller, MVC .   You  can  see below a snippet code for implementing a native  menu in your project  MVC Controller .   public  class  MenusController  :  Controller   }   ""'  :::1~,r:rn~~-[mii!f;mlB~f:~:;'0 ~  ,i!!!ii'?Q?ffir:;~:-~:1n:1mie  :::~:_7::~®tfu t~v~~n:~~i~~J~!!m!iiiiL'f.l~~ie!,w!r'*·1:s@--;-Ae~~:t;~1~!!mfft   Electron.Menu.SetApplicationMenu menu ;   return  Ok  ;    ··.~  ii   ,,;,'   :  ·1     ,,,, ,,  .-:'.V   :,e l   ,-,:..:\1   :~ ij   This is just an  example snippet for illustrating the  implementation of a native menu in your application, you  should consider to review in  detail how it  is  done  in the  working example code  review the source code of the  menu.cs file of the project for a practical sample .      The use of a Message dialog window is also reviewed in thii]  ;~  ::;' ~   example  this technic is used for FileOpen, FileSave and  Error message dialog windows too .   As there is two-process running underneath an  Electron.NB]:  application, there is two different pieces of code  snippet jl  Ji]  for implementing a platform native menu: one for the  rendering part  HTML JavaScript  and one for the back-end~  application  process C .   ;I,   :,;11,   Here is a code snippet for the creation of a native messag~ ·i·!··  \c  window  JavaScript .  '·   document.getElementByid "information  dialog11   . add.EventListener  1'c}ick",       =>  {    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   And the code to include in your C  back-end.   "Eie··c·tron. IpcMaiil ·.·on·"{1·;·1nt"ormatioii=-c1ialog'1 ,  async   arg-a   ->  ~~mm~m~~5ITT~~~-  var  options=  new  MessageBoxOptions "This  is  an   Type=  Me~sageBoxType.info,   information  dialog.  Isn't  it  nice?"   .-.; ~i:tffiG§:i~ti-,;~21®¥:;fi;f;Jlm~1'.t~M~;!hcla.~1!}1!t,~dt:2:1\~jiti~liltlU'.:1l!:faili:~t~U  'Iis0~1~~iliF~r»-~~,~- :~::_::!: ]HWJ;JtfrWS~lH\lllitliillfmlfu1Wlff: ~11fff11fliil7f.ill1t cid:141  1r.=p1n~u;;mR~ffijWFJ%J;;;:~:};lliT'.¼U   Buttons  =  new  string[]  {  ''Yes'',   1'No 11   }   Electron.IpcMain.Send mainWindow,   dialog-reply",  result.Response ;  ~ }·:s~-m;·~~:~K~n~!{:'.r1;t:;;11~,T,ifin[J1;is~~i:;~~:Ei:~;i;1 jf~1:=:irrs1JJf iii1ww~1;::\f:1:7:·i:::,·:·::::;-.1:·:J   There are many types of native dialog windows available   other than the one described above , you can  review in  detailed the code of the dialog.cs file for having more  examples of how you should use this feature.   This  is only a few of the features illustrated in the example  application, but it seems that they are the most exotic part from  the web application developer's point of view.    As you  can  see, the implementation of these basic features  menu  and dialog  in the application are not obvious. There is  much  complexity to manage the two-process introduced with the  Electron architecture. This complexity will increase as your  application will become much more complex itself.   The study of the "ElectronNET-API-Demos"  project could help you  during the required  learning phase of the Electron.NET  developments.   Note: This example cannot be executed from the Visual  Studio  2019 IDE,  in this special case you have to use the "dotnet CU".   The complete source code of "ElectronNET-API-Demos" is  available.  on  GitHub.   0  https:  github.com Electron.NET ElectronN ET-API   Demos   Note that, Electron.NET is still under a constant development, it is  very touchy on the version of each  package include in  your  application. That makes the building process a kind of dodgy when  you try to use internet code example applications  with older  version .    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   You  can  review the rendering of the application on  each  platform  below.   On  macOS:   Electn:in  View  Window  Help   N,>H"" lia , ._,111 Ol1!iw"1,wt   ,,.~   Pa.l\'ll W,4,p,bl~t-lray'   t~~ .. prDijl!QSS   11'.  C<:lMf,Wtl~fTKlij   Commu~lcol~ 00,t.<:,;,~r, !he tw~ ptffluse5    ",¢1  aPI' """ '" ..,mm lnfo,mwll ll  01;,y tr.:  p1111¾ t,on, tt,,, i:~pbriar\l   l.i:.J  Ml'OIA   Pllntt Ptfr   to use native system dialogs  formatl,:,nal messages.   t w~h natke utlllties arul l!  yO\Jr pagc·s ror.darar   Open a File or Olr-ectory  Sl·PPORT.f'. m~_  MWO'>.'  >sU~   i  ~~ KESS;,_,,,,,   Error Dialora   !nfurmation Dialog   I Vie'« Oiirno  j   ln illrs dt,f'!lo; the· ,;fJJif!t'i.ii~\'P,,"f i~ usl?dta s!tid "111<1~ fiom t~c modtror  ·p;o~~n'liM1rw::iiflJl lh~ M!i!' proi; !ll~ ltl lm.mchthJrJofi:>ritwkmdJato11, OPMIVII mby  ,  e';·;:; »j:' '"\1ijiw{"\riJj  ·'\S:i,;~pj:"  i;ffiei\i~j' l1'4;"'·''-&;'\'i9:"  :'···  'ii.mi- OCftS,    [:J  Use syst~m dialogs   The  Ete,:trop;tl_'ia}.Oi in Electron.NET allows you to use native ~ystem dialog~ fu.r  opening fili:-sw dlrect-0riM, ~avinga fil,i or displaying informational me~sage~.   l'hi, i, a mah p,:,c~s, :r.odul~ b~e>!,~e thia proc~os i>  mo.e ,,mc,eot w,tl1 native utiliti~s ond it allows tOO   ~ , r,indarecprn~I!$   Jnformation Oiafog  '<·io \'. ":1·1,-",.- <A'.C ,'  ,;,,     LI   Play Along   tl;;e t!w <:k,m,:; sM1yp,,ts  in ;,n tt«!1CJn ~::,i:, cl y.,1,r ~ym. fh~ O&ct o~ Q~kkSta_,t ~! J  ti~  ~re 001w:;ctu } rlitt pulls viith 1retw dl'lllO!. i'<Aiow tne im ,u,:tiooo he"  cid:144   g~t il·g,:,j ~,  To ~l]i !'<"   On  ubuntu:   LE:C H{ON.NtT APl 01;:MOS   c"'"'""'"""   C;~at~,>aJ ff""'1,~~ wirJ0<1w~   l ,:1~w <r.,oh~   ad ha"!!    Q  'IATT>OeYx!'R,>mOMC"f.   o~,o ut,mu1l lfnk  t,r .,.,.t.,.,,, tn. .,.  NU~lcati~"'' wilil,>!'d w,ta,~~t ,a.t   0,·.s·rM   Gm app~, ~W~OYl~!l'llnf9nutl i>    ~l> '~o4pHN fa.o;,  th~ cll~nf   li::J-''!.IJl,,   Prlntic,Pt!I'  Tl>l<<, ,, s«un,ht   On Windows:   E!..' :m""  bill  \'~1. :W IS  -"Hrilp;,   ELECTRON.NET  Ls~~-'=LDC:MD.S-:-   CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   You  will  notice when you run the application on Windows  with the  "dotnet electronize start" command  a security dialog window will  often appear  depends ofthe security level used , you  have to  acknowledge the security rule proposed  click OK on the window  below .   X   '  Windows Secunty Alert   \A}jj-td_  WS, P€f¢iliJ~  app   Windows. Defender -firewall has olodred some  fuatures -ofElectronNET --AP{-Oemes. on ·al public  and privatlrnetworks,   [I .. 111  Mame,   !J.JbUsher:  ?at!J.:   ElectronNET -API-Oemos   EledronNET~PI-Oemos   C; iµsers\john \desktop\e!edrormet--apl-demos \e1ectronnet  api--demos'\pbjVlostliln \e ectronnet-ap'l--demos.exe   Allow Electl'onN!:T-API--Oemos to am1muni~te on these -networks~   D P ivate networks, sudl as.my home or work nemork   0 Pgblicnetworkst .sud, as those in airpor:ts and coffee shops  not recommended   because: these nehlJofks often have little or no serurjty    8.3.6  Pro cons Electron.NET application  The  rendering of the application is very similar on every platform as  It is  a web GUI  implementation. The uniformity ofthe GUI  display  among the platforms is one of the characteristics  and strong point   achieved by this type of solution. The capabilities to use enhanced  JavaScript interface designs is  another strong point but the  performances of this type of desktop application are not always  optimal.    Even  if you can  use the Visual Studio development tools for the     development of the web application part, the Electron.NET tool is":  not able to be used  inside Visual Studio 2019, you have to use the}  "dotnet CU" for initializing, running, building, packaging the  application  as described previously .   Electron.NET bring the capabilities to the ASP.NET developers to  target their application for being executed offline in  a desktop  environment, nevertheless there is some specifics Electron.NET  knowledge to assimilate before doing so.  Even  if you are a senior·  ASP.NET web developer you will have to pass through a learning  curve to assimilates the desktop development specifics  requirements.   ;      ~ses.   Note: The version of Electron.NET is  really strict on the version of ;}  the .NET core you  have to use, you  have to find the correct  combination of the Electron.NET version and .NET Core version for.;j·    achieving to build and execute the program  it can  be tricky in  som,i§I  J  ti   I   8.4  C++ NATIVE GUI APPLICATIONS  There are several solutions for the implementation of a native UI  irfj  a .NET Core 3 applications. The use of native GUI  provides, to the  ?e,  user of each OS, the ~eeling that the applic~tion has been  developed only for his own  platform. By using standard forms and Oi,  controls the user is directly familiar with the software interface  th~]  application looks like native .  :J   '.l  'i  .,!]  -·r  '   The stable standardization of graphical primitives on the three  systems  Linux,  macOS, Windows  provides to the developer the  opportunity to code a graphical interface who will work on every  system. With the use of an  adapted wrapper .NET Core 3 developer   i    .1~    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   can  benefit from the already existing C++  libraries available for  quite a while  reliability .   Here is the architecture schema illustrating the use of native  libraries for implementing the GUI  in a .NET Core 3 application   Figure 1 .   Linux    ubuntu    .so   macOS  .dylilt   ..   Dotnet Core or NET Standard Wrapper   Dotnet Core Application    Figure 1    The  multi platform graphic library has to do the switch according to  the OS the application is actually running on. In  that context, you  should  have the version of the library for the system you work on.   For developing a multi platform application, you should have the  library for each  and every OS.   Most of these libraries are,  at the origin, developed for being used  with C++, the development of a Wrapper is  required.    The wrapper makes the encapsulation of the machine code  library]  in a .NET Core accessible object, the wrapper provides the  ::  '  marshalling, and  P invoke methods to the native library.  -1 :,  Eventually you will need the compiled library for each  platform  so\]  11  extension for linux, dylib extension for macOS,  dll extension for  ,,;  . · j  Windows  and a wrapper  possibly a package  to be able to use it  with .NET Core 3 and  make the calls on these  natives  libraries.   ::.;  ,{  ,:'  ,}  There are many multiplatform GUI solutions based on  C and  C++  J  ''i  language  many OS are developed using this language , these  "  solutions are a good starting point for the implementation of your'::j  J  own GUI  in NET Core 3, the following list enumerate the most  popular, proofed and  efficient of them:   'ii      LibUI     guilite     CEgui     Nuklear    i  '1  These frameworks have vocation to be used as bricks  the User  Interface  for the development of C programs, so what is the pointj  of presenting such tools in this book? Well the C libraries can  easily   be used from a .NET Core 3 application  see the chapter about theJ  use of unmanaged dependencies  threw the use of a wrapperdas~  ·t  -:~  The wrapper makes the integration of C libraries almost as easy as-:  :  ;  the use of a standard package. The integration of unmanaged  libraries  C,  C++   are now days well done by managed application  'J  ,,   .NET .   You  can find more information about these libraries at the  following reference links:   '1    CHAPTER 8: MULTI PLATFORM  DEVELOPMENT SOLUTIONS   https:  github.com and labs libu i  https:  github.com idea4good Guilite  https:  githu b.com vurtu n n u klear  http:  xpda.net  http:  cegui.org.uk   Of course, you can  develop your own version of the .NET core  wrapper for the most adapted  library, but writing a wrapper for  using these libraries is a large amount of work and  often represent  a project by itself.   Nevertheless, some of these libraries  the most popular and largely  used   have already a wrapper for NET Core developed. The library  we  have selected have already several versions of wrappers made  by experienced  individual or developer's community who want to  have access to a lightweight C graphic user interface framework   for performances as well  for their .NET Core developments.   For the following examples we have chosen to use LibUI.  First  because this is  a recognized  by professional efficient library and  because several implementations of a wrapper for the use with  ,NET Core are already developed and available, avoiding the  tedious and time-consuming task of the development of our own  wrapper. Moreover, it uses native widgets for each  platform we  Intend to develop for.   8.4.1  Presentation of LibUI  LlbUI  is a simple and portable GUI  library in  C that uses native GUI  Widget on each  platform it supports.  This is  an  Opensource and  free to use framework developed by a vibrant community, you can    also  participate to its development if you  have to propose  improvements or new features, you think, others users should  be  happy to have  with a GitHub contribution}.   This library is available for Windows,  Linux and  macOS  and  several'.  other OS to!}. As an Opensource project you can find the sources  ,;  freely available on the GitHub repository.   .\t  j  The LibUI  library development are still very active with a last  release done the 7 April 2019  at this time}, this will guarantee you;·  to have responsive community if you  encounter a specific problem'~   that's not support, but in  many cases,  it will help you to fix the  ;i  problem} or require special features.  '1, it     '     http:  www.github.com andlabs libui   You  should  review the GitHub web site of LibUI for accessing the  documentation and for getting some  examples  often developed  plain C}  for the use of the controls. The GitHub web site will also  help you to get in touch with the internal logic underneath LibUI   always useful}.   .NET Core wrapper for LibUI   8.4.2  As we have mention before there is  several  wrappers who have   been already developed for using  LibUI within .NET Core.  Most of·.;· ..  · . .  these wrappers are implemented using .NET Standard. The list of  !  I  available wrappers for .NET Core comes from the LibUI  GitHub we:·  site and are recognized  by the community.   '.,1,  '?~   ·+~      DevZH.UI     TDFX.UI   SharpLibUI}    CHAPTER 8:  MULTIPLATFORM DEVELOPMENT SOLUTIONS      SharpUI   After several tests, DevZH.UI seems to be the most flexible solution.  Even  if the last update have been  checked-in in 2017, this wrapper  Is  UpToDate and working  that's not always the case   with the  current version of LibUI   last update on  7 April 2019 .   The  source code of the original version of DevZH.UI  is available  see  GitHub links below . You  can  review also the other solutions if you  do  not feel ok to use the selected wrappers  DevZH.UI .   https:   g ithu b.com ben pye sha rpui  https:   g ith u b.com tom-corwi n tcdfx  https:   g ith u b.com nol ia r  DevZH. U I   The distribution name of the NuGet package is DevZH.UI and it is  available on the standard NuGet web site.    a,  nuget   DevZH.UI   Even  if the NuGet package appear to be in alpha version, the source  code has been working just fine during the development of the  · example programs on every platform tested. We didn't encounter  any issue of any kind during our review.   But as  it marked as an  alpha version you have to check the "include  prerelease" in the Package  Manager as described for having the  package  listed  see figure 1  in the NuGet package manager window  of Visual Studio.    8{0¼'S   lnru.l!ed   Updiltes   N,uGet Package Manager: c-orelibi.JIForm     P&l:k:~w~te   iAii.'.-:;j   t :?   "'t.n  DevZH.UI  by~i;le<j',. M1K<IQW~  ... e ,NH C1>re binding~ for libui  _.i,,.,~   >!!'  v1;o_p.,.lphil l001-pr~1   Df!Kriptioo  ,NH C,:i,t birn!in~fcr i;lrui   tO,O-alpM-l.&J1-pit1  i!'H;i~   O;rl:'7_JJubll5hed,;  lue;day,f',pril,l,,201~ 4 4 2017!:   Project URL;   htq,1;f $Rlwl_i~,~,rno5_ai   0 :'<ZH,U!   Report~  htjw: !www,nu<jot;ofg- Jia,;ln,g~.,   tl1 ilf-LWJ.O,O·ttphll-280l-p"rel . ··  Repo~   J'.,   liblJl MltO ~   Depe~  .t'IEJStandoritVersim..,,.1.3  ~m.Dr.lwing-.Primifi'les l>=4.5-.{'I}  S~em.TIOO.t:1'11,U-mg-.Co ,; 4.3.0   N_ETStandard.L1bnry_ ~"' t{i,1f   stem.Cum  ,o!le:ntMn:,lel >=.1.3,tl}   Ulch pa-::ka_ge ls 1fce~se<I Ip you Ir  its own.er,  NuGet is !lot rupo!i!i'ible fQr,  "qr '<10ies i't  9,.nt any liceme;;tc; !h.,,i-parly pacbg=  [J D1rnotffi0wlhii;~gain    figure 1}   Once the package has been included in your project you are able  use  many controls and windows types available from the LibUI  library.   Here is the list of the controls accessible in this wrapper:      Textfield     label     Button     Window     Group     Tab     Menu   '   ··1  '  ]  <~  :1  J  I  I   '' i'.J    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS      Checkbox     RadioButton         List  ...  and many more   This list is  not exhaustive, you  can  dig into the source code of the  wrapper for having a complete list of the controls you can  use.  Basically,  every standard controls are available, and  make it an  easy  task to develop standard multiplatform application with .NET Core  3.   LlbUI  is  using the native display primitives in each OS targeted so  the result application will have the native look and feel of each  OS.   Adding the package to your project includes all the native  dependencies  compiled version of the LibUI library  for the  targeted platforms  Windows, ubuntu, macOS , these  dependencies are automatically used  according to the OS the  program is  running on. The final result is quite handy for the C  developer who do not need to compile the LibUI  library for each  platform.   Actually, the developer has just to add the package in his .NET Core  3 project and  he can  use all the features available in LibUI   actually  In  the wrapper  inside his project.   The graphic AP!  of the OS  reviewed  Windows, ubuntu, macOS  are  now stable since several years and the LibUI  new release are just  aiming to fix bugs and issues or to add  new features  widgets .   8.4.3  Form Screen Design  This is the main drawback, when you use LibUI  or the wrapper  you  do not have the possibility to use a designer  maybe it should be    developed?  for the creation of the forms screens of your  application and that could  be a huge flaw when it comes to develop  complex, or large applications  with lot of forms .   Each  window form have to be coded by hand  in C, so  it means  that the positioning and the size  of each  window and control have  to be define with in line instructions in C.   The default behaviors of the library for adding the controls to a  window is functional but it has its own logic. The  library is  using  Horizontal and vertical boxes for the positioning of the controls, it is  well adapted for the coding of standard designed GUI.  Nevertheless, the development of the GUI  has to be  done by cycle  of try and  preview until the expected  result is  reached.   ,   Here is  a code snippet for illustrating how you can  develop a basic  window form with a button control and  a label   it is a snippet from  the demo project furnished  in the next section .   class  lV!:ainWindow   :  Window   HorizontalBox  horizontalBox;   _button;  label;   public ·Mainw.fri.dow- St{--:CD-g  title  =  "Mu  t  i_Platfo:rrn  UI 1' ,   int  width=  500,  int  height=  200,  bool  hasMenubar  =  false   hasMenubar    :  base title,  width,  height,   vert'fCaiBoX  =  new  Vert-i.CalBox  AllowPadding   this.Child=  _verticalBox;    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   16  17i  18;   Hf  21 ;   label:  c,;;  new  Label  "H_e"l'lo  from -Lib"G-I  _verticalBox. Cllildren .Adel,   label  ;  ..   ,,,,,   button  =  new  Button  "Sample  Button''.,, s ..  , ,   JterticalBo~:chiictren~Ad~ _btitton  ; .   ,,,,,, .....   24   "Messag.6Box. st;o·w·· nihis   .  det&,iled  inforrcat.ion  can  be   "More   } ;      2~  26  27}   ·····················   This code snippet is  used in the "corelibUIForm" example program   see the following section .   fhis is  a very basic implementation of the libUI wrapper presented  here but it gives you a good idea of the type of development you  will be  involved in  by choosing this library for the development of  your .NET Core 3 project.   8.4.4  Sample Projects  The  wrapper for using LibUI  in your .NET Core 3 desktop application  Is  illustrated by the following example projects.      The first example project is  a classic "ControlGallery" project   adapted from the wrapper GitHub repository.      The second  example aim to furnish you  a boilerplate project   for the development of your own application.   Both  of these samples can  be  used  and extended with Visual Studio  2019, they are  both targeting the .NET Core 3.    8.4.4.1  Control Gallery example appllcation  This application is  an  update of the application furnishes in the  original DevZH.UI  repository.   The project aims to illustrate what kind of result you can  achieve  using it in the development of desktop .NET core 3 application. It  makes an  example for the use of a wide variety of widgets.   This application look and feel  is perfectly fitting each OS design  specificities as you  can  see  below  it looks awesome on each OS .  The  performances are neither down looked and LibUI  is a  lightweight library.   On  macOS:    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   On ubuntu:   On Windows:   lifl· libui Con trot_ Gallery    cid:143    X   - cid:143  Tois is>a  !~bet RJght.nci\V, 1abels:can ohJy spa!  9rie line.:   Cheddlox   Entries· ...   Eney    This sample application is a good template for the basic  instantiation and  initialization of several types of controls but not  every controls available through the wrapper are presented in this  demo  you  cou Id find other types of control implemented by a  detail review of the source code of the wrapper .   As  a sample application, this application has a light architecture.  This application is just a demo with 3 tabbed forms for the  illustrating the use of the controls.   As you can  see in the "Solution Explorer" of Visual Studio:    LibUJ Contro Galery project example     CHAPTER 8: MULTI PLATFORM  DEVELOPMENT SOLUTIONS   The original code of this sample come from the original DevZH.UI  GitHub repos,  it has  been updated for the use of the NuGet  package and .NET Core 3.   The source code of the refactored sample  targeting .NET Core 3   is  available on GitHub:   o https:  github.com netcore3 CodeBook Chapter   8 4 libUI.SimpleSample   You  can try to use this simple sample by yourself for getting more  familiar with the use of LibUI  and the wrapper DevZH.UI. You  could  also use the "corelibUIForm" project as a starting point for a new  project.   8.4.4.2  Basic Form project example  This example project goal is to provide a quick way for the  development of your application using the LibUI wrapper DevZH.UI.   This project includes a basic window with one label and one button,  It is a proven model for being used  as  basis of a project  development  inspired  by the Visual Studio Win Forms default  project template .   The project is ready to be used  and  it already includes all the  dependencies required for this kind of project.   As  you can  see  Figurel} below the project architecture is minimal.    Solutton 'core!ibUIForm' P of 1  · ~ p>[eli~ijlform  t>  [ - P,   ~~ "ft  Oep,endencies  C  MainWfnclow.cs  Cll=  Program.cs    Figurel}   Hello.fr'qm Llbl. I   - - -  Sample Button   Here is the preview of the running application on  each  OS.   On  macOS:    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   On  ubuntu:   Satnp!e Button   On Windows:   I   The source code and  architecture are designed to be the minimal  Implementation for the development of a .NET Core 3 GUI desktop  application, thus it provides a sample to start your own project  from.    I_¼   The complete source code of the project is  available on  GitHub.   8 4 corelibUIForm   O  https:  github.com netcore3 CodeBook Chapter   :1  '!  I i  J ,j  :j  8.4.5  Review of LibUI  based  .NET Core 3 application  In  conclusion, LibUI furnish a lightweight and  efficient solution for  ,!  the development of an  GUI  desktop application it does not require  j  any prerequisites install of dependencies and neither the install of  ii  · 'j  Jj   ,:  i]  LibUI  should, in that context, seem  to be the perfect tool to use for,i!  a .NET Core 3 GUI  application  at least the time, the different OS  display API  remain stable , nevertheless the lack of a·.visual  designer···.· ... ·.:.   for the conception of the GUI could discourage many developers to\·  use it in  a professional environment or for rapid  development. The  :  time required for mastering the wrapper for the design of the GUI < j  should  not be under estimate but once done the results achieved  'j   dedicated tools. It is light and fast and the community is  continuously working on  it for the integration of improvements.    .·.1?   ']   by this library can  be quite impressive.   8.5  GTK GUI APPLICATIONS  GTK:  "The Gimp Toolkit" is at the origin a Gnome initiative for the·····:~.'  development on  Linux of GUI applications.  GTK is developed under:~  an Opensource license  GNU}. GTK is built on top of Glib  and  ,;   others libraries}, a well-tested and  popular library.   GTK does not provide a large amount of documentation and  have  :1  specific prerequisites thus it is  considered by most developer a tool:j   ,t    '   ii ·-~    CHAPTER 8: MULTIPLATFORM DEVELOPMENT SOLUTIONS   difficult to use.  But we will see it can  achieve flexible development  and great result can  be obtain using this tool whatever the platform  targeted. Therefore, this kind of project can  be done with a great  development comfort inside your favorite development tool, Visual  Studio 2019.   8.5.1  Presentation of GTK  GTK is  underneath many well-known multiplatform commercial  applications and  is widely recognize  by professional for the  development of GUI  projects, for example the Gnome desktop  application for ubuntu has been developed with GTK.   We can  briefly enumerate the core strengths of GTK as:      Stability: GTK has been developed over decades.     Cool  look and feel.     Theme support.     00 approach.     Localization.        Good documentation  it is getting better    Internationalization.   Keep  in  mind that GTK has  been  developed for the use and with the  C,  C++  languages and  it inherits from this one its general  architecture and programing logic. So, this kind  of developments is  very well adapted for the C and  C++ developers who want to use  .NET Core 3 for achieving a ridiculous jump in productivity.    The GTK toolkit is  native on  Linux, Windows and  macOS version are  emulation, on those OS GTK toolkits require the installation of a list  of libraries  not exhaustive :      Atk: Accessibility framework for GTK.     Cairo:  Graphic library for vectors and image composting.     Gdk:  Contains the graphics primitives of the windows.     Gio:  Helper functions for Gtk 1 0 operations.     Glib: Toolbox and  helper functions for Gtk  one of the      Gtk: Contains the widget architecture  for Windows and   foundation of Gtk .   controls .      Pango: The front rendering library of GTK.    source  Wikipedia    The base  programming logic for using GTK is the use of a  hierarchical tree of widgets.  In GTK the "widget" term is  used for  controls, windows and  basically every elements of the GUI.    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   The  main container widget is the window object, other widgets   controls like textbox, label,  button, select, ...   can  be added inside  the main window  container .  GTK  is event driven  signal handler . For example, a signal  is sent to  the application when you click a button, you  have to define the  signal and the handler yourself by coding.   The  documentation for developing GTK application is  mainly  written for the C,  C++  languages, nevertheless it can  be easily  if  you  have a minimum knowledge of C   adapted ported for the use  with  .NET Core 3 C.   The GTK libraries will have to be  install on the development  machine but also alongside the application created   so you have to  install it with your setup program .   The GTK  native dependencies is mandatory on  the target machine,  this is a prerequisite for a correct execution of the application  you  have to include those dependencies in the setup program .   Here are web pointers where you  can  find  more information about  the GTK framework.   https:     gtk.org  https:  blog.gtk.org  https:  developer.gnome.org  https:  gnome.org gtk  https:  github.com GNOME gtk    8.5.2  GTK Install  As you understood GTK is  a Linux native tool but need to be  install  on the others system   Windows and  macOS .  Since the third  version the setup of GTK is  not a simple  binary to launch. The  process for the install on  Windows and  macOS consists  in  the setup  of a Linux emulated environment  the size used on  disk for this  environment could  be  as  huge as  an  original  ubuntu distribution .   GTK need to be  installed on the machine you  plane to deploy or  test your GTK  application too  at least the runtime . We will review  in  details how you  can  do this setup on  each  system.   8.5.2.1  On  Windows  for the development station   This description for the setup of GTK come from the gtk.org  see  the references web sites  web site. This is the recommended  procedure for performing the install of GTK on your Windows  platform. Another solution is to build the GTK toolkit from the  source code but it will require a prior installation of a C building  environment  that's not our purpose here .   A   Install  MSYS2   For the setup of GTK you will  need to setup an  environment for this  type of application: mingw.  MinGW is the contraction of "Minimalist GNU  for Windows", it  provides the Opensource environment for the development of  application for Microsoft Windows.   MSYS2  is  a project who provide a Unix like environment on  a  Windows station  mingwin . This project furnishes the foundation  for the development of a GTK  application on  Windows, it will allow  the setup of the GTK runtime and the tools  like Glade  you will  need for developing your .NET Core  3 GTK application.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   MSYS2 furnish  a Unix like package  manager: "pacman" and  many  other useful tools from the Linux environment.   https:  www.msys2.org   https:  msys2.github.io   https:  www.gtk.org  download windows.ph p  https:  m ingw.org    You  can  install MSYS2  as a standard windows application as you  can  see   figure 1,  2,  3}.  The  installation program should  not return any  error during the setup process if this is the case,  uninstall the faulty  version, fix the problem and  reinstall from the beginning until you  reach  a clean  MSYS2  install.   X   MSYS2  64bit Setup   Setup - MSYS2 64bit   Welcome  to  the  MSYS2 64bit  Setup Wizard.    figure 1     X    '-  MSYS2 64bit Setup   Installing MSYS2 64bit   Installing component MSY_S2. 6:4rut Dci-se ...    figure 2     CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   The final screen  figure3} shows the Mingw command prompt, this  screen indicates that the installation is completed and successful.   When the install process is finished, reboot Windows.   B    Install GTK   Once you have achieved a proper MSYS2 install and rebooted, you  should now install GTK runtime and development libraries. This  Install can  be done through the use of the appropriate "pacman"   Package  Manager  command in the mingw environment.   ~  pacman  -S  mingw-w64-x86_64-gtk3   The  result expected should look as   figure 4    Ill-   cid:143    X    figure 4    C    Install Glade   Glade  is the new GTK interface designer, it will allow you to make  the design of your application threw a visual tool and  save it to a    XML standard format file who can  be  loaded  by GTK using the  GTKBuilder.  In  its third version this is a professional class tool who  will allow the design of your GTK application GUI  as you design a  standard C Winforms application.  Even  if Glade has  its own logic for the design  it allows the developer  to achieve a sharp modeling of the GUI.   The setup of Glade is also performed with the "pacman" program  by using the following command:   ~  pacman  -S  mingw-w64-x86~64-glade   The successful installation of Glade screen  should  look like  figure  5 .    figure 5     CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   Once  installed, you can  manually launch the Glade program by  clicking on the "glade.exe" file in the mingw folder, or running the  command line "glade.exe".   We  will  review later how to integrate Glade within Visual  Studio  2019 for the edition of the interface  XML file  without leaving the  IDE.   Of course,  if you  do not plane to use the GUI  visual  designer and  define the GUI  with C  inline code  and  XML you will not need to  install Glade, it is  not a mandatory install if you write your GUI  by  hand.   D   Configure environment variable   For having a system wide access to the GTK libraries and  dependencies you should  modify the windows global path. For  doing so  you  have to edit the global  path environment variable:   Control  Panel  > System and  Security > System > Advanced  system settings > Environment variables >   Modify the "Path" variable by adding  "C: \msys 64 \mingw64 \bin"  or the path to the mingw tool  you  have setup  to it as  described on the picture below  figure 6 .    -~  ..  .. ,~--  ::   Edrt etwironmem: variable  -... ··-·   ·'"  .,....  ·.1 .. ·l "''::·: j·-c~u~;;0;~~~~i~ii~L~~~-1\M cqoft\Windo~~~PI  i. ·:.,  11 \:j  C',U- V:illRli.dotl11t\tooll   .   X   . '~   ~- "' d    figure 6}   This modification will  be  effective after the next reboot of the  Windows system.   You  have also the possibility to add the environment variable path  only for your GTK application inside Visual  Studio project properties  but we will review this solution later in the example section.   TIPS : Alternative method for Gtk installation on Windows   The previous method for the installation has the drawback of being  a bit heavy, you have to install the full  mingw building environment  for achieving it, it can  seem a little oversized according to the aim  of the install  install of the GTK Runtime . This  is  because  no one   the GTK community is  not as active as  before  have done the    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   release of a binary install package for the GTK Toolkit since the  second version  several years .   Nevertheless, independent programmers provide this kind  of setup  by using a well factored NullSoft install program. The current install  version binary is available on their GitHub.   https:  github.com tschoom GTK-for-Windows  Runtime-Environment-lnstaller   This distribution  done by Tom Shoonjans and Alexander Shaduri   integrates the latest available Gtk Toolkit, the version 3.24 and all  the dependencies required for make it work properly. This latest  version has been released on the  2 July 2019 and seems to be a  reliable source for the GTK toolkit installation. You  will find also  NullSoft scripts for generating your own installer for the GTK  runtime on Windows.   8.5.2.2  On macOS  As  we have previously mentioned, the installation of GTK on  macOS  can  be done through the use of "HomeBrew"  see the reference  web  links  and by following the process described below.   http:  brew.sh    If you have not installed Brew before, here is how install it and then  after how to install GTK with it.   A   Install Brew    You  can  install brew by executing the command line in the macOS  · H  '',!  terminal prompt:   S   usr bin ruby  -e  ''$ corl  -fsSL  https:  raw.g1thubusercontent.com Homebrew 1  nstall master install "   The  result should look like described  figure 7 .    f::  -Checking  out  fibs:  lil:m  {1S1S 1iU ,  dano,  Ji J  M<,r~~  pull  nqvD5t  R6336  fro_   Homebntf Oopor.dabot lluodlor Library t!or,ollnw rubooop--podDrmanoo-1.4.l·S- :\   !:!-_'.  ~,.,  11«  11...,,.  io  ru_n   ntinly b!r  "npai.d  ....,lllf>t""r~,  Plnu  con idor'donoting:  ~-~j  ,:  ,   httni' I  gjfh,1h.c"O!ll lj1>111ehr"'llt1I"'1'9R'JOti90I   ,   ,       MW  t yJ    !n "  uol  ~  lnaw  hgJ     [MW  Ug]  "   no,i  Ugl  * [now  Ugl     !no,1  to!il  ~.{no"  togJ   ·tnow  tog]  ".fo fr togl  "fo "  tog]  "  tno>i  tog]  ~ {how  cagl   2.0.4  2.0.0  .2.0.6  2.1.6  2.1,1  2,1.2  2.1.3  2.1.i,  2.1.5  2.1.6  2.:l..7  2.1.8  2.1.9   ->  2,8.4  ->  2.e.6  ->  2.0.6  ->,  2,1.0  ->  2.1.1  ->·  2.1.2  ->  2.1.a  ->  2.1.~  ->  2'.1.0   >  2.1.b  ->  2.1,7  ->  2,LB  ->  2.1.'1   ,   .,o T pp!ng  h= ll<'- o"""  Clanhg  int a  ~  <t~~llooal ll""'"bre" Lib<acy To'!ls h<tr,ob<aw houbt ,.-eoro'   ~::~!:'. ~:~~:I~!i-~~:l~:{:~t~!:'~:Qs;i~:i21,  dano.  ::::~:; ~;;";~r'::~91:~f:~t:~t~~!::2:~~s~~!it~ ~:;,  p ck-,euood e  ~~~;:!"~  ~~!.,:!~:s:"~11::2!":~%:~::i[s~:~:'.flh~,  11,UIIB .   llactio~ng  obj.et$:  .100l',;  [6022 00321,  _4,83  Mis  I  343.00  Kill i;,  dana.  RMoiving  daltHl  ieo,,;   0 491.  <Ian,.   ~l?,oady  up-to--<11u    ... ~  lnsUllaU    aU HOfull   -~ H""'obnw  hH   n bhd  IIIIDllffflOUI   e~ to h:malllo  Hd  ouk  111olytic1.  Rud  th   011.11lytio  doo.,...nt tion    nd  1,...,  to, op1:- 1Jtl  hu-n,   b:Unul d.o!!I  hll!I !blhatvd,n   .oq  ~how ia  :r,,n  o,rtirdy- by  ur,paid  vcibntun.  Uuao  o"" idn don H"II:   h ttn  ·  lgi·tb111l  camltfomsbnmlhref5'9nrli nn~   'bro"  holp'  to ,got  $t~<tod   "!""'  Hut   «P    - R_un  ~ Furth t  do nl  ht!Pf' l d 0 ~< -bDlll  sh  .lohn!I~~:~  joh~$ I   B    Install GTK    Figure 7    Once  Brew is installed you can  know easily install the GTK runtime~'  .,  and  dependencies with the following command line  formula . This i  will install the GTK version 3 and all its dependencies.   $  Drew  install  gtk-3   i  1   r!   l'J;'I   !_l    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   Fill!   This command should produce the following output in case of a  correct setup of the package.  1,!lllii  l~ohnt4fac:- ·johllt ~u ·in.it,11 ,otlt-+3".  U  cid:141 .  Outl'lll j~- ~h.tu.,11 _  Al re adv  d:Ol'tl\l-01dad.:   iJtottl ,loM Libi:ttJ c.cli_o~ ff11 1ibt.tw ~tmnlo dsh'6$1.tf<:61h7-4f3b l:01tbl!f88c,58d111e437b653fb16  ~887fallhotial1ll6t1~ef2:..:...gtk+34,U.18;1110;l "- bottle_.'t1:i,·. lZ  "*>  ,!2f.l ill0. g:tk  3-I,24,-U,110jav -JHttla,tH'_,!JZ  n>'.   u,r loc.1 oJt glili bifVgU,t,.,,_,UH~t- Ji1  1rJ-,.._C_sit ~f,fl.i~  I ~-   -~  u:,t< b,.t, Cdliiz:!ut;k~ 3;24oU ld.n \lt~ rt ... Uim~HW ·'"1' -"'1:   Qn loHJ.  unfbD111Jhi"1   lP  IJOMs-Nac::"'  ;john$  l!I- Ol!lllkt:1 1,1  Doewt11t£  Johftt4!ai:M  ;:M~s II   tfll!filE  . ·m  F  :r:11111    un hccl Caii!l-.r ;tk.+3 8;24;19:  789  til.&a 1  51,61f8'   ~$d l   · LibHty   Pieti!Ut  Pio:llttil   lli5"il   HOVUt  kink   7i   P\4 110   . .  .   _   .   .   '    figure B    · ... ~   If you do not obtain a correct installation, as  usual, you should fix  the eventual issue and reinstall the package from the start.   8.5.2.3  On ubuntu  GTK is natively installed on the ubuntu desktop version   it is the  tool used for the development of Gnome  thus you will not have to  Install any additional module for executing the GTK GUI  application  type. As  native component from ubuntu the performances of the  GUI  will also be better than any other systems.    8.5.3  Presentation of GTK  Now that the GTK runtime is available on  each  platform, we can  start to explain  how we gone use  it from our .NET Core 3  application. The GTK runtime have a .NET wrapper already  developed and  validated: GTK.   This toolkit became multiplatform in  its latest release   with the  adoption of the NET Standard 2.0 of GTK  and thus can  be used for  multiplatform GUI application development with .NET Core 3.   GTK is  a Graphical User Interface toolkit for .NET, this tool allows  to .NET developers the use of the GTK+  in  .NET.   GtkSharp  that's the pronunciation  is a C wrapper around GTK  and  its components, this is  a fork of the previous gtk-sharp library  who was targeting mono  and  Gtk 2.xx .   The  latest version of GTK target the GTK version 3.22  and  is  available in the .NET Standard format. The source code is under  Opensource license and available at the following links on GitHub.   O  https: l:,lgithub.com GtkSharp   https:1 1 github.com,IGtkSharp GtkSharp   The GTK  library is also available through the NuGet package  distribution system. Added to the base wrapper GTK, a dedicated  package provides new project template and  project Items for the  development of a GTK applications with the dotnet CLI  tool  works  .  with .NET Core 3 .    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   This  is  a very handy package,  it add  a new type of application for  the developer to generate with the dotnet CU,  it add also the  possibility to create new widget, window or dialog object  with the  .glade file included .   The  installation of the template package can  be done with the  command  line described below  this is the standard command line  for the installation of new project template for the dotnet CU :   C:>dotnet  new  install  GtkSharp.Template.CSharp  --version  3.22.24.37   The version  number is optional and can  be omitted. Here is the  result screen  after the installation of this template package  figure  1},    figure 1     After the installation of this package the GTK  new project  templates should  be available by using the "dotnet new" command  line, these new items are:      GtkSharp.Application: Produce a complete Gtk application   with .csproj, .cs,  .glade file.      GtkSharp.Dialog: Produce a .cs .glade file for adding a dialog   window to an existing project.      GtkSharp.Widget: Generate a .cs .glade file for a control      GtkSharp.Window: Generate a .cs .glade file basic    widget .   gtk.window.   Only the GtkSharp.Application is  a project template for .NET Core,  the others are items template for adding elements to your  application  Dialog, Widget, Window , the default name for the  generated element is the name of the folder where the command  is  executed   if you  do  not specify output name .   You  can  verify if all these templates have been  installed properly  with the command  "dotnet --list" who list the available templates  for the "dotnet new" command as described  below.   C:>dotnet  new  --list  -lang  C   The "-lang" option is used  as filter on the result for selecting only  the C type items. Here is the result for this command:    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   You  can  now create a new GTK application with the .NET Core 3  command  line client as described below:   C:>dotnet  new  gtkapp  -n  sampleGtkApp   This command line will create a GTK application with the name of  project "sampleGtkApp"  this is the standard  behavior of the new  dotnet CLI  command .   The template application created uses the .glade file format for  describing the GUI. This format can  be  loaded  in  a Gtk.Builder  object  we will review this point in  details later .    You  can  find more information about the use of Gtk.Builder with  the reference links below.   http:  gtkbuilder.org   http:  gnome.org gtkbuilder   In the template, the .cs file and the .glade file have the same  name,  that's make it easy for the developer to modify both side of the  window  for-end and  backend .   The application generated can  easily be  modified and extended; by  using Glade for the edition of the xml file  .glade extension   corresponding to the main window.   You  can  notice that the application template generated by this  package  use the model of a GUI  based on  an XML file.  But with GTK  you have also the possibility to implement the GUI  with inline C  code, we will  review these two types of GTK implementation in  the  examples section.   Before it is  useful to study the GTK interface designer: Glade.   8.5.4  Glade: The user interface designer  Glade is an  application allowing the conception  and the design  of  GUI  without writing the code manually. This application came in  replacement of the Stetic Gui Designer  used  with Mono, the cross  platform .NET framework .   Like its predecessor, it is a RAD tool with WYSIWYG  capabilities who  make it easy to develop a GTK+ GUI.  Glade is  programing language  independent, in the sense that it does not produce any code, the  file who describe the designed GUI  is encoded according to a  standard XML format. GTkBuilder is the format of this XML file.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   Glade takes care of the generation of the XML code who describes  the UI  and  produces a XML file loadable through the GtkBuilder   with a GtkBuilder object . These XML files can  be thereafter be  used  in your GTK .NET Core 3 C application  actually with any  languages you use for developing with the GTK Toolkit .   You  can  find more information about Glade with the reference links  below.   https:  glade.gnome.org   http:  glade.gtk.org   Install Glade for the use with Visual Studio 2019   8.5.4.1  For an  easy edition of the GUI  XML file, Glade can  be called from  within Visual Studio 2019.   You  can  easily configure in  Visual Studio, Glade as the default  program for opening the ".glade" extension file type  figure 1 .  Thus,  the integration for the GTK GUI  will appear integrated inside  the Visual Studio environment, you will be able to edit the ".glade"  file from the "Solution Explorer" in Visual Studio.    Gwose the program you want to use to open this file:   X   JSON Editor w'lth Encoding  Automatic. Editor_ Se!ectqr {XML   XML  Tej  .ML rr  ,  Add Program  X  lie~  Source q  Source q frogram:  HTML E<j  HTML E~  HTML  vi  8rgurnen:ts:  HTML vj  CSS  Edit~  CSS  EditJ  'SCSS Edi  SCSS  Ed!  _,I  '  ----,--- 1 tp1;lff ffflTTi'!{f?lc:''T::0fo;;½j;d'-"'-"W   friendly name:   I C:\msys-64\rningw64\b!n\g!ade.~~~ ""---"] [J  --·········7  I   I Glade Interface Designer 3.22. 1   Cancel    figure 1}   You  have to select "Set as  Default" when you  open the ".glade" file  for a permanent association with Glade.   Once the installation and the configuration of Glade has  been  done  in  Visual Studio, you just have to edit the ".glade" file according to  your requirements by double clicking on  it in the "Solution  Explorer" view.   Interface design with Glade   8.5.4.2  The design of the GUI  with Glade is  almost intuitive for every  developer  almost same as the Winforms designer in Visual Studio .  As you can  see  in the {Figure 2   below, it offers similar features.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   · · ;.u<<   ,_._.,.,,   Ft  Hf§.@4    Figure 2    The  Glade application  Figurer 2  is  composed of three distinct  panels corresponding to three functionalities of the application:      Left side panel: The hierarchical tree representing the  widgets present in  the containers. Glade allows to add  widgets or containers  who is also a widget for GTK . The  form  or screen   design follows a hierarchical tree of widget.  You  can  also select widget by name in this view.      Center panel: The  main view of the designer. This panel   allows to the developer to set the position, the size of the  widget selected  it allows also the widget selection  and the  addition of new widget.      Right side panel: This panel  regroups four different features   regarding the selected tab:   1.  The view of the properties of the selected widget    with the tab "General" .    ··"  2.  The view used for the positioning of the widget and~  :I  ,l  ;;  3.  The view used for common properties of the curren   his docking, packing in the GTK terminology  with  the tab "Packing" .   selected widget  with the tab "Common"}.   4.  The view for the management of the signal sent on 1  different event associated to a widget  with the tab:;  "Signals"}.   These simple concepts are sufficient for the design of an  efficient  GUI  for your application with Glade.   Note that, the mastering of Glade is not immediate and  should  require a learning curve, variable according to the developer.   8.5.4.3  Defining Signals Handler within Glade  Once you have done the graphical design, Glade can  be  used for   j  making the link between the interface and your backend program  i  ·1    the C code}.   ,  ·n  i\  ;J  GTK follow an architecture oftype signal handler  a  classic}. With  l ' ,  this logic, Glade allow the developer to specify the type of signal  sent by an  event on  a specific widget  within the right panel}. This  J  \  implementation is  done directly from the Glade application by the  specification of the appropriate method name call on a specific  signal as  described  figure 3 .   You  will notice some signal are marked "deprecated" in the Glade  interface but you  can  use the deprecated signals too  as  in the.  shoot screen}.   ,·  '  '   .Ii      .'l   " "  l    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   Sfgnaf      GtkBlrtton  <Ktivat-e  dicked   A&leave  £pr=ed  &\reJeasl!d   cid:141   GtkCcmt;;i \el'   cid:141   GtkWidget   cid:141   GObJect   Swa_p  After   @1  [~   ·~  CJ  Cl   ,;;Typehere,- ~-ct::kh€·te~   <Typehe"f:,  <-~!;JJ,e,,~    Figure 3    Once you have defined the method's name for the signal, the  corresponding method statement have to be added to the ".cs" file  containing the backend  logic of your application  Figure 4 .    _1ob,'.Ll«<     .,.._,J,,  '"-"'' ''  "" b :cu,  ;,,,  ''"''  dl''"''.     -'"""' +   pri ,aCO..,ld  Oatc, 0,,,\it<e-i o;je,;:,   ,a,,,:o;,   ,~ " 'W  >i   '  .·-- ,.,,.,   '   p ·ia,t.o  w,1"  ,. \h,,.c ,ts     _JoOelLfo.s     "IS<-hxlc  ,;.,cc.·   . '\, , . .,,,..,,.,"'  "'·-'""'"'""''  "· .. """"''' .~""""  "' ·''""'"·""  Q  ,.,.,,,\k<l~~;J  $,10,.,·.,·~-t1,'4! ~ ·.,,  O, "'' "''.w .P .~"'"'."~'i Li«; C'<_l,1ot:  : 'p~ ~~1pi;;!eo  m<i" ''"'""''9"< ,..,,;~   <;'-.rr-<1fojfot,,jo&;,ct,h-=!A'l';"C,a    ,c M,i,,l' ,ndc~ ....  r:  I<-< "'"'""~~'"''·  '"''' ·-"   . .,,, .. .,,.,,      '·' "'.'-""III:>"-..   : :      " ..   ,   J    Figure 4    The  method implemented will  be called  each time the signal  on the  predefined events is triggered. This  method constitutes an  easy and  elegant way for the implementation of the interactions between  for-end and  back-end of a GTK    .NET Core 3 application.   You  have also the alternative to code the events directly in the  code without using the signal handler in  Glade  but it is  less  readable   by using the name of the widget.   8.5.5  GTK samples applications  As you  have  already understood you  can  develop a .NET Core 3 GTK  application in two different ways:      The  inline C coded GUI  implementation.     The XML designed GUI   using Glade  and Gtk.Builder .    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   Along this section we will provide you a review of an  example  project for each of this method. Each  of these methods have  advantages and drawbacks and  should  be choose according to the  kind  of project you intend to develop.   lnline C coded GUI sample   8.5.5.1  This sample is a good starting point for the use of a GTK Toolkit  in line GUI  application development, it uses a large panel of widgets   control in the GTK terminology .   This sample is furnished on the GTK GitHub repos and appear to  be  a reference for the development of such  kind of application   there is not so  much documentation available on the GTK . The  application consists in a demo program for witch the only  functionality is to use the wide variety of widgets available in  GTK.    Here is a screen shot of the rendering on the different platforms.   On macOS:   t:loldlu!IO!l  ~gr l!.SBll1  SpjaButlOII   .sa:,lan~r -· T~Jll!a!lutl<m   A!IQu'iDl!llOQ   oia:t  IS   On  Ubuntu:   <:'liorautton  c-omhaBO~  Entr i  iJ!bel  t.eVi!ll¼ar  LlllkSi.ltt-cm  Pracwe~saa,  spfoeutton  SJ, Mer  Swltd.  Toggksutton   ..,nra~   Aboutoialog   1mlu.changed t~i2  '  ln!leii. draflged tJJ:0   Hl895S01 Gtk,8uUon: d.li:ked  109194SJ ;tk,8\!tton;-clkk00  lO!lJ 169JGLib.ilimpleActfon; Samp~tiOnActiv.ited  1096 ]61] Gtk.Toggle_Button:_&;t-on Toggle,:!  1096823] r&.10991.iauttim: act-on.Toggti!d  ,1100218  Gtl<,.SWltcli: SWitcrt I~ 11\rW' '!rµ!!- 1101444].Gtk,SWltch: Switdl is now: Fll!>s:    CHAPTER 8: MULTIPLATFORM DEVELOPMENT SOLUTIONS   On Windows:   .Colot!fotton  :ComboB,Oll   ""~   Ulbe!  \.evelB.i1  Unkfluttori  ProgressBar  SpiriButton  spinner  Switch  ToggleBut;on   Stc:,::k-button:   lmog<i b_UUOri;   Actiim button:   ..  Dialogs   AboutD alog   ·····- Appllcatia 1 Output   You  have notice that the macOS version of the application does not  , incorporate the title bar header icons.  It is  because on macOS the  default install of GTK3 with brew does not install the default theme  icons  that is the case for a Windows install . You  have to install the  GTK3 default theme icon on the side with the command line  brew  formula  described below.   $  brew  install  gnome-icon-theme   This command will install the default GTK icons and theme  resources for a proper display of the application. A proper install of  the package will produce an  output as shown on the screen below.    i.p1;&11~1-,wMHWli11~mmo1~illH!llli!if'.~dl~!re~::JEfilliP1 ,Dki2hlillf&:fillilmilillilifH¥:¥1r¥UiumHilllr·'dllV:"',   4  1 ~:21:13  an  tty,cm!II   Last  login:  Sun  Aug  Johns-Mac:- john$  bn,w  install  9nomu-ico1>-th ma  U~dmting  Hc!llllbrew.,.  ,a;,  In1tdling  dependeni:iaa  for  adviaita-icon-tt,9"'11;  lil ,:r,: ;11  and  Uht&YU  ""''  In1tal1ing  adwaita-iocm-the1n11  dependency;  ;¼~=  ,,,,,  £>ow 1oading  http, t    hellabruw .bintny, contbi,ttlu{libcl' java   h tth. ta.-.gz  "'"'  Downloading  h'<,.,  http a t    akamai, bintny, ,;omf df df971'49:J.:!."6bh111b2afl<: fu156f1o81152m181bud6HM-ubaf1.8ad69':!f28b   Htltltl JMrl - tftM ftf!ltUltliltltliltltIUl fiti!IIO flfflfHHfUHIHl Hf~lllllllt  1ll0 . 8¼  ,.,.,,  P-oa,ori.,g  lit-c:rocn-il.6.13_1.l!O]avo,botth,tlD',f,IZ  ®   ~orr locd Cdhr libnrcc~ 8,6.13_U  88  filos,  :l.71-18  ,,,,,:,  Installing  ;11d11;11ita-icnn-thc1>e  dopondoncy:  HJ.rkw-;i  ,..,,  nownln1ding  http :   ho.,.brow, bintny. com bo-ttlos libl:ng-2 .44, 14_1, Ollljavo. be1ttlo , hr ,9-Ji  .,.,,  liallnlH<ling  f:ran  http,11:   aka Hi, bintray. ,:;qm <1li ..,lo6<Hfl83:i.t,c,l,hita15~8do6f44bdbfl.e8614l1ij3~717854<121A31'6f1b7a41h:.   Hlltlllll HlllllfltftftltltlllilM tltJ:1:11 lJ lillll lllfl!lII  :l.011,01'  ,.,.,  Pmll:ing  libr~vg-2.44.1.4_1.,...,javo, bottlo ,tor.iJZ   fcun- lacal apt 11dk-pixbuf bin gdk~1>i~buf~quory-lnD<l<1r&  ........ pdatm~eacho   uu- lot:~1 C llar libu~g 2.44,14_1:  46  fifo~,  87.61-111   ,,.,~  In~talling  <1Wllti~n-i,;=-"1:h~01~  --,.~,  D,i""log javc. botth. tar .gz  ,,,,.,  Ommloa<ling  fr,,.,  httpa;     alu111111i , bintray , 0011 1i8 lo8b<lacaPSb'2.e47e6m.l.b1!k:1102c!i6cb36-92ff27bb292 1 8 2h:118e1cSU!lo9  llllllit UUftffH111111 f1111t1111llltlllll l § tlfft  :100, 01'  "'"''  Pourin.i  ;dv,Qit~-i<:<m-the"'11-a.a2.1t,..,javu.bottlo.tar,gz  tfi  John5-4\3c:N  jo~~$  I    un lP~~l C~ll~r sih ~it~-ieo '\-themQ 3, 32 ,8:  5,827  fil~s,  22.6MB   This example project illustrates the instantiation of several GTK  widgets in  a tabbed window, it will  provide you the knowledge for  the coding of an  application with the C coded GUI. As themed GUI  toolkit the rendering of the application on the different platform  look similar.   This  project is  a reference example for starting development with  GTK. The building of this sample will also validate a correct GTK  installation and the build chain on each  platform  Windows,  u buntu, macOS .  The original project example is targeting the .NET Core 2,  but it has  been ported to .NET Core 3 with no issue.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   https:  github.com GtkSharp GtkSharp Sample  .Net Core 3 version:  https:  g ithu b.com netcore3 Code Book Chapter  8 5 GtkSamples   As you understand, in this example project, no tool for the visual  design of the application has been used  each  widget are created by  code.   Like the development of an  application with LibUI  see  previous  section  the widgets are declared and  configured with C plain  code, the accurate positioning of each widget is,  in this context,  not  an  easy task  if you have to build the application from a mockup .  This  method of GUI  coding has the advantage of not requiring the  setup of Glade for the visual design of the screen  on the  development station  is it an  issue? .   If you want to develop a complex application  and or with many  forms design  you  should consider to use Glade GtkBuilder  application  see  next sample  type.   8.5.5.2  XML coded GUI sample  with Glade   This sample is built around the template furnish in the package  GtkSharp.Template.C previously described.   This is a basic implementation ofthe GtkSharp.Application  template. This template furnishes the basic architecture for the  building of GTK application with a GUI developed with Glade  and  loaded  in  GtkBuilder .    In this sample you  can use the Glade, visual interface designer for  the conception of the GUI. The user interface is  implemented  through an XML file  with .glade extension  and can  be edited with     Glade inside the Visual Studio 2019 interface  that is handy!  as  shown before.   Here is the "Solution Explorer" view, illustrating the structure of  this project called  "GtkBasicForm", in Visual Studio 2019.   ISfaich Sol.ution Expiorer{Ctrtf $J:  ~Ill;! Sq~sj ;~:;;;;,ject "'- ··"'   l!8 Gt~Basicforll'   ,A   ~~i- Jjep~ffii.~~ies  ·,  .,  .. ,···  ,.,.:,,  .,-    NuG,e;   'VJ  Gll:Sh~ri,t3.n.24.'   ....    BspR   B. MicrosojtN~TCor~Jl.pp. 3.0li-prey   .!li . t,,laio\i.lindow:g1ade ..   ~·  c  ~iog,I;;;.cs   The template used for the generation of the application  from  GtkSharp.Template.CSharp  is targeting .NET Core 2 by default, so  the first thing you have to do is to update the project for targeting      .NET Core 3. That's can  be done by editing the .csproj file and  updating the version number of the .NET Core framework targeted::   The project is composed of the main program and an  object for the.  hosting of the GUI described in the ".glade" file. The loading of the    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   GUI  is performed with the GTK Builder, it will also reroute all the  signals of the GUI  to the main  program object.   This is  a basic Glade application with only a label text and button  from the Gtk project template generated with the  GtkSharp.Template.CSharp package.   Here is a view of the result of the execution of this project  "GtkBasicForm" on the different platforms.   On macOS:   On  Ubuntu:    On Windows:   1  If  faample Window    cid:143    X   Hello Workll This button has beer dicked  ·1  time s}.   Oick met   The "GtkBasicForm" example does implement a signal  on the  button clicked  event with the corresponding handler method  buttonl_clicked. The event is  implemented in line  it should be  integrate in the .glade file .   This  project provides a good starting point for starting the  development of a GTK .NET Core 3 application, it can  be  use as  template for just doing that.   The edition of the GUI  is  much  more flexible than coding the GUI,  and,  offer greater possibilities to design a proper GUI  in  a minimum  of time  once you  are familiar with Glade GUI .   You  will find  the source of this project example on the netcore3  GitHub repos.   rJ  https:¼ github.corn, netcore3, C:odeBookYC:hapter   8, 5, GtkBaskBorrn   '    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   8.5.6  GTK Themes: Installation and Configuration  As  themed graphic toolkit, GTK allows you to develop your own  theme for your application. Furthermore, it allows the developer to  customize an  existing theme for matching his requirements with  the adapted  look and feel   color, font, positioning ...   in  a minimum  of time and coding effort.   You  can find  predefined GTK Themes at the reference  link furnished  below.   https:  www.gnome-look.org    This web site provides more than a thousand already made themes  for Gtk3, furthermore it is freely usable for the development of  your application  Opensource license .   8.5.6.1  Use another theme for your application  If you  want to make your application singular and  not look like the  standard GTK application design, you  can  specify a theme to be  used  instead of the default one.   You  can  achieve this by specifying explicitly the theme you  want to  use in the C source code.   There is  a dedicated documentation for the theming of your GTK  application  in the reference link if you  require more information  about this domain.   http:   developer.gnome .o rg  gtk3  stab le theming. html    8.5.6.2  Design of a new Gtk theme  If you  have the need for a complete theme development you  can  use an  already existing tool for achieving this goal: Oomox.   Here is a screen a screen shot of the Oomox application.   ' ,_   Oomox theme designer is  an  Opensource software and  is  available  on GitHub.  These tools are implemented for the Linux platform. Oomox is a  graphical application for generating Arc themes  Gtk3  and color  schemes.   O  https:,f github.com themix-project oomox   8.5.7  Recommendations for Gtk application development  GTK Toolkit have tremendous possibilities, as  it come from the C,  C++  environment we could  recommend that you  have already a    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   basic  knowledge of this kind  of project  at least for using the  documentation . The  possibility offered by the GTK development  project are amazing, and  make it a lot easier to use the GTK Toolkit  with the .NET Core 3 framework.   The use of GTK looks like an awesome solution for the  development of your multi platform GUI  application if you do  not  have special or exotic requirement for your GUI. Otherwise you  will  have to work with a part of your project in  plain  C  for your exotic  widget . The development of custom widget will imply the  extension of the wrapper as well  it means a lot of work ...  .   8.6  QT QMLGUIAPPLICATIONS  Like the previous samples presented   Libui, Gtk  the QT QML  solution for the implementation of a GUI  desktop application is  based on  a graphic framework developed with C,  C++  and  implements the same type of architecture as  described  Figure 1 .    {Figure 1    QT Quick is  an Opensource framework developed and  maintained  by Digia and  belong to the QT framework family.   QT Quick include a declarative script language called  QML, this  language allows to design and develop, in  an  easy way,  a highly  performant and animated GUI for a software application.   8.6.1  QT presentation  QT is  a multiplatform framework for the development of graphical  application. This framework has been first released  in  1995 and  have now serious proofs regarding its stability and the quality of  the software produced. The KDE  Linux desktop application has  been developed using this tool  and many others famous desktop  applications .   Added to the QT Opensource community, QT has been  incorporated since 2014. There is  no doubt that the developments    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   using this tool will become widely distributed and will benefit from  a professional guarantee and support.   QT nowadays provide a complete development environment for  multiplatform application design, who is based  on  C and  C++.  It  provides solution for desktop and  mobile platforms development.  QT provide a complete abstraction layer of the GUI   among others  things .   QT allow to develop GUI  software for almost every platform, from  the powerful workstation with a large display device to the  embedded board computer passing by mobile and tablets  see the  QT web site for more details . The versatility of this framework is  astonishing and to acquire competences on this technology cannot  be  a lost investment in the long run   especially since the project  have the support of a dedicated company .   QT framework have a Dual  licenses terms, one commercial and  another Opensource  this is the one we gone use in our samples. .  Notice, that the QT framework is  developed by the company QT  and  require specific license according to the type of usage you  have  planned to do with it. Please consult the web site of the company  for more information about the licensing conditions.   From the technical standpoint QT provide a graphical framework  allowing to the developer the implementation of high-quality  graphical software, with the possibility to use effects and  animations  natively included in the framework . QT is actually used  In  a number of main stream product for their graphical interface  design  automotive, dedicated hardware, Laboratory hardware ...  .  Especially if you  plane to use a GUI  coming from a designer using  Photoshop, you will be able, with QT, to use directly the graphic  resources  produced.    For more reference about QT itself visit the reference links.   https:  www.qt.io   https:  wiki ped ia.org wiki  qt   QT does not implement the use of the native widgets for each  platform and  provide is own GUI  layer abstraction, it is specially  indicated for original design GUI  including the use of animations  and  effects.   8.6.2  Presentation of QML.NET  QT provide a complete integrated solution for the development of  multiplatform applications in C and C++,  so why review this tool in a:  book using .NET Core 3?   Of course, that's because a wrapper for this framework has been  officially released  since 2018 and  make QT,  and  more precisely  QML a great language to use for the development of GUI desktop  application with .NET Core 3.   The QML is a declarative language for the description of GUI.  It has  a syntax inspired from C and JSON  it allows to have a minimal file  size for his implementation. It is  a subset of QT Quick.   QML implement several key concepts:      The objects are described as  C structure.     An  object can  be described as a combination of other   objects  heritage .    ·  "State", "Transition", "Animation" can  be associated to the   widgets  QT Quick controls in our case .    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   1.  State: is  a named statement who describes a set of   properties when a specific condition is met.   2.  Transition is  a declaration who spreads a change   over time.   3.  Animation describe the evolution of an  object  the   look  from the change of its properties.   Here  is  a sample snippet of QML implementation  a  rectangle  polygon  who change color when it is clicked :   QML.NET allow to .NET Core 3 developer to use this language for  the GU l's design  of the application with the use of the QML  wrapper: QML.NET.   The  implementation of a QT wrapper for .NET is not knew but with  this version: QML.NET reaches another level.  It is now a company  supported solution who is  available right now.   QML.Net is  Opensource and  available for the developer on a  dedicated GitHub repository.    rJ  l:\ttP;s:%0github.com QML.NET   You  can  notice that the current version targeted  by the QML.NET  example projects are .NET Core 2.2  but the wrapper is  implemented using the .NET Standard 2.0 and  so is usable by every  .NET framework  of course including the .NET Core 3 .   The  MIT license used  allow to freely use QML.NET for any kind  of  project you plane to do with  permissions for commercial use,  Modification, Distribution and  Private use .   This GitHub repository contains all the tools needed for the  development with .NET Core 3:      QML.NET: The wrapper     QML.NET sample application.     QML runtime: Runtime installation script for Windows,   Linux and  macOS.   QML.NET allows the .NET Core 3 developer to use the .qml file  format for the specification and the design of the application.   The  .qml file can  be edited with the appropriate dedicated  software: QT Design Studio.   The  .qml file format, a text-based file format, can  also  be edited  with a classical text editor but require in this case  much  more  expertise on the QML language itself.  Even  if it looks the hard  way  to develop with QML, the knowledge of the many capabilities QML  language offer could  be  extremely helpful for the development of  real-world application  especially if you work with designer  exported designs .    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   We  recommend the review of the "qmlbook" website for a detailed  view of the QML language, especially for the development of  effects and  interactivities in the GUI   this is  C,  C++ oriented . You  can  find  more information about the QML.NET usages on the  reference links.   https:  qmlnet.github. io   https:   github.com qmlnet qmlnet    http:   qmlbook.githu b. io    Besides the source code of the wrapper, QML.NETcan be  include in  your project by using several NuGet packages  depending ofthe  platform you target in  your project .   Thus, you have also to add  a specific dependency of the runtime for  each  platform type your development intend to work on.   For getting familiar with the QML language, we will  review more  deeper the dedicated freely available WYSIWYG  editor: QT Design  Studio.    8.6.3  QT Design Studio  QT Design  Studio is  a RAD tool for the development of .qml  interface file.   The community version of this product is free and  available for the  three platforms we interested in   Windows, Linux, macOS .   As shown   Figure 1  it furnishes to the developer  or interface  designer  all the features needed for the design of quality GUls.    Figure 1    This interface is composed  of three main parts. For experimented  developer you will be familiar with this application since  it used the  standard format  nothing official  of a graphic interface designer.   The three main panel  matching a specific feature for the GUI  design:      On  the left: The toolbox presenting the list of the controls   available for the current form designed.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS       In the center: The form designer for the setting of the  position, the scale and the selection of the controls.      On  the right: The view of the properties of the selected   control.   Added to the visual editor a vertical tab control allows the  developer to edit the source code manually  switch to a text  editor . The visual  editor is  used for easily and interactively produce  a QML file  who is  actually a text file as  mentioned before .  QT Design  Studio allows you to design application with animation  and  effects  trigger by signal events  for producing high end  look  interface.  The software includes  even in the community edition   various tutorials for learning more easily the basic's concepts used  by the product.   Several tutorials about QT Design Studio are already on  YouTube  and  could  be  particularly useful for starting to use this tool.   You  can find the on line manual and video tutorial by following the  reference links.   https:   doc.qt.io qtdesignstud io index. htm I  https:   doc- sn a psh ots.qt. io  qtdesignstu d io  stud ioexa mp les. htm I   Install QT Design Studio   8.6.3.1  QT design Studio is  a free  in  its community version  tool available  in  its binary version on the QT web site.    This last version gets an  interface redesign who make it looked a lot  more trendy than the previous version   you can  see the evolution  of the product on  Wikipedia .   https :  download .qt. io  officia I  releases qtd esignstud io   1.2.0    The  previous link furnishes the software download link for the  three OS  we are developing for in  this book  macOS, ubuntu,  Windows . The  QT Design studio can  also  be installed with the  QT.ID  installer program, you  will find  it on  the company web site:  qt.io.   Once you  have downloaded the application  see previous links  you  can  click on the setup program for launching the install process and  follow the instruction for a correct setup of the program.   8.6.4  Using Photoshop resources as GUI  With QT Design Studio you can  use your favorite graphical editor  for the design  of your GUI.  If your application requires the  development of a non-standard interface  with your own designed  widgets  you  can  use  Photoshop for doing that. The QT company  have a commercial product for doing this task  QT Bridge  who  require an  appropriate licensing.   Even  if it does not offer every feature present in the commercial  product we will use the old version  "QML Exporter" who is  under  Opensource license.    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   You  can  produce GUI  directly from Adobe Photoshop with the  ·installation of the plugin for the exportation of your design to .qml  file.   Install: QML exporter plug-in   8.6.4.1  First you  have to download the Photoshop plugin from the  provided  link   https:  githu b.com qt-labs photoshop-q m I exporter    Once  the plugin  is downloaded copy the file "Export QML.jsx" to  the folder:   Photoshop Plugins Presets Scripts   Note that this path might be different on your computer according  to the location of your Photoshop. Once the .jsx file is copied in the  appropriate folder you  have to restart the application for updating  the presets list.   Once  restarted you should have the option "Export Qml" under the  menu  "File Scripts " as shown in the picture below.    op,:oass,r.anot,~::t. ..   cid:144 p,nRetMt   11':i·,i><'.i<,"" "''·"'   s.,m~Mob~Stoe< ..  ;·,ac rreowo«L   ···············    Adobe Photoshop export to QML    You  will find all  the details about the options you  can  use for the  export of the .qml file within the readme file included in the .zip  file: "qt-la bs-photoshop-q m lexporter-cs6.zi p".   Here is the view you should  have when you export a file from  Photoshop:   Export Document To  QML    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS    QML export Extension: Export options    With this form you  can  configure the kind  of export you  want to  make  we will see  in the sample section how each option is  useful .   The export is constraint by several rules regarding the layers and  the folders of the Photoshop document:      Each  folder of the Photoshop document  .psd file   will  be   exported as a single object  an  image .      The  hidden layers in  a folder will not be exported at all.     The content of the folder is exported has  it is  displayed in      The text elements in a folder will be  rendered  rasterize .     The order of the layering will be respected  in the export   Photoshop.   process.      The folder hierarchy, the Photoshop folder in the .psd file,   will not be keep in the export process.      You  have to specify a name for each  layer of your design.   For getting a first-hand experience with the capacities and  limitations of the export plug-in you  should test it in  several  configurations and verify the .qml file produced with QT Design  Studio  or a text editor according to the methodology you are  following .   8.6.5  Samples program GUI  with QML.NET  In this section about the use of QML.NET for the development of a  multiplatform application with .NET Core 3 we will  review three  different types of example projects for illustrating several  methods.       The first example is the example from the QML.NET author   GitHub repository, it has been updated for using .NET Core 3   and slightly modified .      The second  example uses QT Design Studio designed GUI   with the standard QT Quick Controls.      The third one uses a GUI  designed and exported from  Photoshop  using the QML Exporter script described  previously .   You  have notice than we didn't approach and  review the process  for the setup of the QT runtime  as for GTK development for  example , this is  because it is not required when you  develop with  QML.NET.   Indeed, a dedicated instruction of the QML.NETwrapper check the  presence of the QT runtime required and  download install it, if it is  required, without any intervention of the user  that's almost  magical .   So, the only requirement for the use of the QT runtime in your  .NET Core 3 application is to include in your C source code the  following instruction.   RuntimeManager.DiscoverOrDownloadSuitableQtRun  time  ;   This seamless integration of the runtime in your .NET Core 3  program is just a bless for the developers compared to the old way,  for the setup of the QT runtime required for the deployment of a  QML based  application.    CHAPTER 8: MULTI PLATFORM  DEVELOPMENT SOLUTIONS   8.6.5.1  QML.NETsample application  The first example application has been developed by Paul  Knopf,  one of the principal developers of the a QML.NET framework. At  the current time this example project is still targeting the .NET Core  2.2 framework so  we  have modified it slightly to target the .NET  Core 3  available on netcore3 GitHub repo .   This application makes the demonstration of many features already  available in  QML.NET and  constitutes a learning sample of choice  for the beginner QML.NET developer.   The  sliding menu on the side  is  reusable in  many types of  application, besides the different pages illustrate a specific  QML.NET features. Each  page of this program contains a pertinent  example of how to use the different features for the interaction  between the C and the QML.   You  should  review this example carefully for getting a deeper  understanding of how to use the QML interface in your own .NET  Core 3 application.   Here are the renderings of the updated  for targeting the .NET Core  3  example program on the different platforms.    On  macOS:   On ubuntu:    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   On  Windows:   The  running of this first example will also allow you to validate your  development environment and the QT configuration environment   check if everything is  running as  expected ...  .   When you  run  this example program for the first time the QTS  runtimes will  be downloaded and  install for the application, so  do  not worry if it takes a long time  depending of your internet  connection quality . A working internet connection  is  required for  the first execution of the program.   That is,  of course,  in the case when you did  not previously install  the QTS  runtimes on the development machine.  You  can  preinstall  the QTS  runtime with the help of the dedicated project on  GitHub   see  links in  reference  it will save time during the first launch of the  application you working on.   As  it is the first QT  or rather QML.NET   program you test, you can  notice that the look is  exactly the same for the three platforms, QT    guarantees the coherence of the GUI  across platform  implementations, and it is  a strong point of QT.   The source code of this application can  be found on  GitHub. The  "qmlnet-samples" does not target the .NET Core version 3, for  getting the updated project targeting the require .NET Core version:  please use the netcore3 GitHub repos.   https:    g ithu b.com qm lnet q m lnet-exa m pl es   .Net Core 3 version:  https:   g ithu b.com netcore3 CodeBook Cha pter  8 6 QML.Features   8.6.5.2  QT Design Studio GUI application  With this second demo project we will review how develop a .NET  Core  3 application using QT Design Studio for the interface design   actually for the production of the .qml file . We will produce a  simple basic form who could  be used  as  a boilerplate for your  future .NET Core 3 developments with QML.NET.   A   Design your GUI in QT Design Studio   For this sample we will design a basic sample form with one label  and two buttons, almost the classical form template.   B   Add and use the .qml file in your project   Once you have designed  edited with QT Design Studio  your  interface you  can  easily include it in your .NET Core 3 project  application, by using the "Add existing item" menu entry of the  project. The dotnet methods are called  by the QML interface  seamlessly  almost, you have to implement it . Do  not forget to    CHAPTER 8: MULTI PLATFORM  DEVELOPMENT SOLUTIONS   change the property of the .qml file to "content" as shown   Figure  1}.   Build Action  ;HoW the-files ~1at~5;_~Q-_the: ~Uil;:! 'artd ~~lqyfJlent 'pr..:.    Figure 1    This project is  a basic project sample for the development of QML  GUI  application with .NET Core 3,  it uses the common QT Quick  Controls for the interface. The use of the "Universal" theme  illustrates the use of a theme within the .qml file, the theme has to  be loaded in the C code too with the instruction:   You  have the choice between several predefined themes in QT  Quick:       Default     Material     Universal     Fusion     Imagine   'i '   You  can find detailed information about the theming of the QT  Quick controls at the reference links below.   https:   doc.qt. io  qt-5 qtqu ickcontrols2-styles. html   The project view in the "Solution Explorer" window is quite basic  and  includes only the .qml file added to the Program.cs.   In  a more complex project you have to add  a class   .cs file  with  each  .qml file you use  best pratice .   S€ard1  Solution f.xpio.re-r   Ctr!+$   '"'ffi"Sciiu;1~":~-;;;;,~;;;pleF~r n  · Tbf"T;roj&; ="'"'"~  _,  ~ qmlSimpleForm  ~~'t- Depenr:le'nde$  _.   A   'Ill NuGet  ~  'II'! Qmi.Net  0.10.1   ~  'ii!! Qml,Net.linuxBinanes 0.10.1  ·  ~  'ii!! Qml.NetOSXlllnaries {0.10.1   t-    if   Qml:NetWindowSBinari€-S  SDK   {0~10.1     Figure 2     CHAPTER 8:  MULTI PLATFORM  DEVELOPMENT SOLUTIONS   Note that you can also associate "QT Design  Studio" as the default  editor for .qml file type  see the Gtk Glade integration inside Visual  Studio section  for an  easier manipulation of this type of file inside  your IDE.  Inspired by the previous example  from Paul  Knopf , the  project is the implementation of a basic form with a label and  button, there is  no use of effects or animation here, this is the  minimal project  only the use of the "Universal" theme is  implemented .   The features of the application are quite limited  it implements a  text change in  label control triggered by buttons , but it furnishes  the foundation for starting the development of QML.NET  application.   Here  is the rendering result of this application on the different  platform.   On  macOS:    On  ubuntu:   On Windows:    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   The first button updates a label text from inside the .qml file, the  other button calls a C method who update the text label.   This simple example "qmlSimpleForm" can  be used as a boilerplate  for the development of a QML.NET form  based application with  .NET Core 3.  It is also a good example ofthe communication  between the QML and the .NET Core C  quite useful, isn't it .   As  usual, the source code ofthis application can  be found on   GitHub. o https:  github.com netcore3 CodeBook Chapter   8 6 qmlSimpleForm   8.6.5.3  Photoshop GUI application  For this example, "photoshopQMLForm" we will review the use of  an  exported .qml file from Adobe Photoshop  check the section  about the installation of the QML file exporter  inside our .NET Core  3    QML.NET project. This interface will include a designed  UI  with a  custom design  button and images. It implements the use of basic  effects and animations.   Here is the basic process followed for the development of this  example:   1.  Design the GUI  in Photoshop  with the diverse state for each   element .   reviewed .   2.  Export the .qml file from Photoshop  within the limits   3.  Modify and update your .qml file for getting compatible   with your application  with QT Design Studio .    4.  5.   6.   Import the .qml file inside your Visual Studio 2019  project.  Improve the .qml code  by implementing interactive effect  and  animation  by coding straight to the .qml file or by using  the QT Design  Studio   Implement the back-end C code of the application   the real  processing part ofthe application .   Notice that the animations are not exported from Photoshop even  if your .psd file  the Photoshop format  includes a timeline.  Nevertheless, the effects and filters on the layers are correctly  exported and are  included in  a single object inside the .qml file.   During the interface development you will modify and try the  modifications done inside QT Design  Studio. The QML language  allows the specification of the graphic elements' behavior and the  interactions between each  other.   The export of the .qml file from Photoshop will produce the QML  code and  resources  image files  .png  corresponding to the  graphical design.   TIPS:  If you  update the design  in  Photoshop, choose not to export  the .qml file  in the exporter options  otherwise all  the works  regarding the effects and  animation will be crush  by the new  version.   The exported .qml file have to be  modified  inside QT Design Studio  it is  much  easier  for including the features required by the  application, you  have to do the following updates:      Add  required dependencies  for animations, effects,   controls ...  .      Change the container of the different element generated   according to your application needs.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS      Check and  update the positioning of the layers  the QML   exporter have it often wrong .   Here is the QT Design Studio view of the .qml file before and after  update for the use  in  our application    Raw exported .qml file  exported from photoshop      Modified .qml file usable in your project.    From Visual  Studio, the project will have an  obvious architecture  including the main object  there is  only one form for this example .  The code of the GUI   QML   and the logic of your application  C   are perfectly separated and  participate to a good readability of the  code.   Here is the "Solution Explorer" view of the project.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   -'-  A   photoshopQMLForm  ~~t  Depend-enci-es  A-   fl   NuGet  ~  'Ill QmLNet  0.10.1   P"  ! - ~    e Qm!.NetUnw,:Blnaries{0.10,1   'ii,  QmLNetOSXBinaries  0.10.1   'i!,  Qml.N-et.WindowsBinaries  0,10.1    ~  <li.  SDK  A  w,.'.  images   actlve.png  b.png  bkg.png  hov.png  !ens,prlg  polygon_ 1.png   5B  polygon_1_-copy.png   ~  cu- Program.cs   This application includes the use of animation and  interactive  update inside the QML code, there is  no use of the C  back-end in  this application. The purpose of the "photoshopGUIForm" example  is the illustration of what can  achieved by the QML language  in the  animations and  effects domains.   This is only a glimpse of the features offered by QT for the  implementation of a graphic dynamic interface, but this sample will  help you to familiarized yourself with the QML language and  its use  within a .NET Core 3 application.    Here is the final  result of this application running on  each  OS.   On  macOS:   On  ubuntu:    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   As  you  can  notice the rendering of the application is homogenous  on  each  platform used. Using a photoshop designed GUI  for  building a QML.NET application seems to be a solution of choice if  your project development aim to achieve that goal.   The source code of this application and the associated .psd file can  be found on GitHub.        https:  github.com netcore3 CodeBook Chapter   8 6 QML.photoshop    8.7  AVALONIA GUI APPLICATIONS  XAML   Here is the last type of solution presented for the implementation  of a GUI  in a multiplatform desktop application with .NET Core3.  This is one ofthe most famous and  popular solution in the .NET  developer's communities as  it is considered as the logical extension  for .NET Core framework for the implementation of GUI.   8.7.1  What is Avalonia?  Avalonia is a framework for a multiplatform XAML based GUI.  It has  been created in  2015 by three independent developers: Dan  Walmsley,  Nikita Tsukanov and Steven  Kirk.   Ava Ionia was  inspired by the Microsoft XML descriptive interface  language WPF from which it also holds his name, "Avalon" was the  codename used by Microsoft for WPF at an  early stage of  development.   Ava Ionia offers XAML support but include also features from CSS  for the styling of the interface.  Ava Ionia uses a similar logic concept  to other XAML framework such  as WPF  but it supports a wide range  of OS  like Windows, Linux,  macOS, Android and  iOS.   After several years of alpha and  beta version the Avalonia release  have been edited the 5 April 2019  the current version  is 0.81 from  July 2019 with some bug fixes .   As an  Opensource project the source code of the current  development are freely accessible on  GitHub, Avalonia  is currently  licensed under the MIT license.   o  https:  github.com AvaloniaUI Avalonia    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   The  reference web site furnishes an  abundant documentation  about the API,  and, tutorial and  QuickStart for the development of  an  Avalonia application.   1~  http:  avaloniaUl.net   In addition to the framework Ava Ionia offer a panel of tools for  smooth application development such  as a Visual Studio 2019  Extension who provide several templates and IDE extensions for  the development of an  Ava Ionia application.   Several other useful Opensource tools can  also be used as  "Avalonia Design Studio" a dedicated Avalonia  IDE,  and the  "Avalonia Themes  Designer" who is  used for the definition of new  theming scheme.   8.7.2  Avalonia Visual Studio Extension  The Avalonia extension for Visual Studio 2019 is available on the  Visual Studio marketplace  and also of course from inside Visual  Studio with the menu Tools Extension  you can find below the link  where you can  download the .vsix file  the extension  installer type  for Visual Studio .   https:ljma rketplace. visua I studio.com items?  itemName=AvaloniaTeam.AvaloniaforVisualStudio    ·~,  '!  This extension provides multiple project templates  2  for the  creation of an Ava Ionia applications, it presents also a previewer fo.j  the Ava Ionia XAML. The extension provides Item Template for the  11  :11j  creation of new form too.  i  . ;~  Here is  a copy of the new project windows after the installation of "j  :1  the Ava Ionia extension.  . ~I  · ·,,'Li  j   1~--~j~j:--. 'i,~;~~;.;;, · it   i ~:.:,.  ___ J  '   Create a new project   . ..  ' ~   Receotpmj,ctt,mplam>   ~    !j- 'wpr t .N£;tti,~,M·   '""''"'~~,_. .. :,   m1µ1~-~--1tlt,,  Q,  --~j,IO;ijtl    ......... ,._.-.,.t .,H tti ..   Not f.ad"",1 M!at yw·rn bob>;  fol    ln."11=  t ""',,,,rl r""·"""    Avalonia new projects type    Within this screen you can find two new types of Avalonia  application:      Ava Ionia MVVM  Model-View View-Model  application.     Avalonia client application  classical architecture .   You  can find a detailed tutorial about the creation of an Avalonia  project with these templates on the web site.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   http:  avaloniaUl.net docs tutorial creating-the-project   These templates target multiple frameworks: Net Core 2 and  .NET  framework 4.6. You  have to edit manually the .csprojfile for setting  the .NET Core 3 as the only targeted framework.   8.7.3  Avalonia Studio  The AvalonStudio is an  Opensource application developed by a  British company VitalElement  Ms?  for the design of the GUI  in the  XAML format used by Ava Ionia  this is  not WPF compatible .   Th is original application is freely available for the developers to use  for the development and the design of their own application.  Nevertheless, AvalonStudio is not a graphic user interface designer   you can  not drag and drop controls in the designer , you will have  to code the interface by hand and visualize the result  in real time   in the designer view of the application.    Here is the published screenshot of the application.   You  can  retrieve the source code ofthis application on  GitHub   O  https:  github.com,1\ italElement AvalonStudio    You  can  also straight forward download the native binary for your  platform. Windows, Linux and macOS version are available.   http :  www. vita IE lement.co.u k   AvalonStudio is  an  interesting alternative to the Visual  Studio  Extension designer but offer the same capabilities for the edition of  the XAML file type no more no  less.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   8.7.4  Avalonia ThemeEditor  Like WPF, Ava Ionia provide theming support of the widgets it  provides. This theming allows the developer to customize the  appearance of the controls for the specificities of his  own  application  or requirements .   The  developer can  consider the use of a specific tool for the  development of this customization  it is  named  "Ava Ionia  ThemesEditor".   1'_1  A...,,lonia  n,om~ Editor   -   cid:143    X   M,.,;I; .!,,,.  ",->:tiJm  w~h  "'"  le.,,w,,;,1              le:r.rn  ,,.,,_ csw,.csa ,>. "."'""   -~,Ji&M;Mif  .  B}g_!_~    Theme Editor application    As you can  view above, this tool allows you to specify the colors,  fonts, alignments ...  Everything for building an  original XAML theme  for your application.   This is an  Opensource tool, the source code  is  available on  GitHub   you will find also several tools for developing with Avalonia .          https:  g ithub.com wieslawsoltes    https:  github.com wieslawsoltes ThemeEditor    8.7.5  Sample GUI program with Ava Ionia  For helping you in the development of an  Avalonia  application we  will review two distinct projects:      An  application using almost each  Avalonia control  a   reference from the AvaloniaUI  site .      A basic application who could be  used  as a starting point for   your own development project.   Both of these examples have been  developed with .NET Core 3 and  Visual  Studio 2019  even if you have to build the first sample with  the SDK CLI  command line tool .   8. 7.5.1  The  "Contro Catalog" program example  The example program we review in this section is the classical  "ControlGalery" program, this example come from the Avalonia  main  repository and  constitute itself a reference for the use of a  large number of widgets  controls, dialogs and windows  already  available inside the Avalonia framework.   We have upgraded the original sample for targeting the .NET Core 3  framework without meeting any particular issue on  each  platform.  The code of this example program is downloadable on GitHub  the  original version and the .NET Core  3 version .    CHAPTER 8:  MULTIPLATFORM  DEVELOPMENT SOLUTIONS   https:  githUb.com AvaloniaUI ContrQICatalogStand  alone  .NET Core 3 version:  https:  github.com netcore3 Code.Book Chapter  8 7 ControlCatalogStandalone   This example, called  "ControlCatalogStandalone", is a multipage  application presenting the mains widgets you  can  use  in your  Avalonia  application.   The architecture of the project is original, as the main  application  functionalities are not in the main program project   "ControlCatalog.Netcore"  but in  a dependency project   "ControlCatalog"  .dll file.   This .dll file has been  developed using the NET Standard 2.0, this  architecture improves the general portability of the application. Of  course, you will not have to use the same implementation  architecture for your project but it is a good guarantee of the  Avalonia  multiplatform capabilities.   You  can  have a quick preview of the project architecture with the  view of the "Solution Explorer" below.    Solw:ion 'ControlCatBiogStanoalone·  2 of 2 proJ   ,.  @  ControlCata!og   l,1  Dependencie~   P  P   Assels  Models  P-ages.  ViewModels  View,   f;,  Apµ.xaml   ~  P  Ci  DecorntedV indow.xam!  I:>   ,l~J  MainView.xaml  .~   t,fainWindow.xarrsl   I:>   t>  P   .~,:'  Deper,dencie>  r:~  Program.c~    Contra Catalog example    Almost every control's type already included in the Ava Ionia  framework has  been  implemented in  a specific XAML page   in the  "Pages" folder of the ControlCatalog project , with a side scrolling  menu for the navigation. An  illustration of the theming of the  application has also  been  implemented with the possibility of  choosing between "light" and "dark" mode. This architecture is  quite pertinent for the educational purpose of this application.   The  project has  been  easily ported to the .NET Core 3,  because only  the launcher application has required to be  migrated, the NET  Standard 2.0 format used  by the dependency project is compatible  with every version of the .NET Core and can  be  kept as  it is.   Here is the resulted application GUI  for this example.    CHAPTER 8: MULTIPlATFORM  DEVELOPMENT SOLUTIONS   On  macOS:   On  ubuntu:    On Windows:   Context Menu  A rigl t die'<.  menu \aat tan be apphe<l to anyc,;1ntro!   C   X   This sample is  not relevant for the general architecture employed  but for the XAML samples pages for the presentation of the use of  the widgets available in Avalonia.   Note: This  project does not compile under Visual Studio 2019 you  will have to use the CU  build, run commands for building this  application on every platform  yes Windows too .   8. 7.5.2  The  "minima AvaloniaForm" program example  This .NET Core 3 project is  a basic application providing a kind of  boiler plate for your Ava Ionia project development. As  it is  a very  basic sample it includes only a label and  a button on the main  dialog window.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   This example has no other goal than providing you  a boilerplate for  building your own application. It includes the use of .NET Core 3  and the latest Avalonia  release.  From this starting point you can  easily extend the project with your own GUI  design.   You  can  download the source code of this project on GitHub.   O https:  github.com netcore3 Chapter   8 7  basicAvaloniaForm   This project is targeting only .NET Core 3 framework, unlike the  project generated with the Visual Studio Ava Ionia Extension.  Here is  a preview of the rendering of this mere Avalonia application.   On  macOS:   Welcome- to Avalonta Form!    On  ubuntu:   Welcome to  Avaloma  Form!   On Windows:   Welcome to A<J~lonia  Fo,rn!   '0   X   You  have noticed that the size of the window displayed on  each  platform is  not the same.   Nevertheless, we are confident that the use of this project will  smooth the start of your project. It works perfectly with Visual  Studio 2019 and include the basic features for this kind of  application.    CHAPTER 8: MULTIPLATFORM  DEVELOPMENT SOLUTIONS   8.8  COMPARISON OF THE SOLUTIONS REVIEWED  As  we have seen these examples provide, each  in its own way,  solution who address a peculiar issue or requirements of your  multiplatform project development. Here is  recapitulatory list of  these development types in  correspondence of their specificities  and features.  The following table  Table 1  aims to help you to choose what kind  of solution to use  regarding the type of constraints and  requirements your software has.   Advanced  graphic  design   Standard   GUI   {Form]   Interface  Language   tool   GUI design   Performance   Dependency   weight   Avalonia   yes   Yes   yes   no   good    Table 1     With this table you  can  quickly review which type of application  matching most of your needs for the development of your project,  but this list of criteria is  may be  not matching every constraints of  your project, if that's the case you  have to study more carefully  each  solution proposed  previously in this chapter.   The choice of the tool  and API} you intend to use for the  implementation of your .NET Core 3 GUI  will predefined your  application graphical capabilities, the storage size  required   including the dependencies  and the performances. It is  a crucial  point, choose the tool the more adapted for the purpose of your  application.   Each  type of application previously presented requires  at some  point or another  the use of a machine native layer who will allow  the rendering of your application on the specific platform, verify,  before starting to code, that the solution chosen  provide all the  functionalities required  by your application's specifics.    CHAPTER 9: COMPILATION AND  BUILD WITH .NET CORE 3   .N   Chapter 9.   COMPILATION AND  BUILD WITH  .NET CORE 3   The  process aiming the production of an executable program is  decisive in the software development life cycle, especially for the  multiplatform development context.   The type of distribution you plan to use for your project  Internal,  Opensource or Commercial ...   will  be determinant for the choice of  the type of compilation and  building options you will select for the  release of your project.   We can  define three kinds of target audience for your software:       Your software is an  integrated solution addressing the user    whatever the license type: commercial, shareware,  Opensource based software .      Your software is a company-oriented solution  software      Your software has to be deployed only inside your company   solution provider .    internal software .   In these three cases you will  have to build your project according to  different constraints, and the production environment will define  the kind  of build you will choose for the release of your software.   For doing so,  .NET Core 3 offer you  a wide range of solutions for the  compilation and the build of your multiplatform software.      FDD:  Framework Dependent Deployment: This is the .NET   Core classical  .dll file, the.NET Core 3 runtime  shared   have  to be  installed on the target computer, this is the default  building configuration in .NET Core 3.      SCD:  Single Contained Deployment: The application output  folder contains all the dependencies needed for running the  program  the .NET Core 3 runtime is included .      FDE:  Framework Dependent Executable: The application   output is a .NET Core 3 executable, but like FDD the shared  .NET Core 3 runtime is  mandatory on the target machine      Native machine executable  specific file for each  platform :   The  application is a machine native executable who still  requires the dependency ofthe project but not the .NET  Core 3 runtime  it can  be  produce with CoreRT .   The choice between these four types of release will  be made from  the type of GUI solution you  have chosen  and the type of    CHAPTER 9: COMPILATION AND  BUILD WITH .NET CORE 3   deployment you want to use  it is often defined from the project  context .   We  will  review these types of solution and try to help you to  choose the most adapted to your requirements.   Whatever the kind of release you want to achieve, we recommend,  for a better visibility of OS specific issue s , to build the project  separately on  each  platform:  build the ubuntu project on ubuntu,  macOS on  macOS and Windows on the Windows platform  The  commands of the dotnet CU  are the same among the presented  platforms .   For doing the compilation and the building of your .NET Core 3  application you  have the choice to use the CU  dotnet command or  to use  MSBuild from Visual Studio 2019  it is  not exactly similar just  yet .   In  the present chapter you will  learn also how to produce, with the  dotnet CU   command line tool  and or CoreRT, either a MSIL  executable  who require .NET Core 3 runtime to be  installed  or a  native executable for each  OS  you targeting  and thus losing the  need for the installation of the .NET Core Runtime .   This choice depends of the type of GUI solution you are using  if it  requires native dependencies  and the type of distribution you  plane to use for your released.   With the review of the distinct features provided  by each tool used  for this task, you will find the most adapted solution for the  definition of your building process.    .NET CORE CU LOCAL TOOLS   9.1  In the .NET Core application development, the dependencies are  managed  by NuGet packages  providing a better way than  in the  classical  .NET framework to keep your dependencies up to date.   This  architecture provides consistency and  maintainability of the  dependencies used for the application you  develop. This is  key  foundation of the .NET Core framework; every specialized  functionality has to be  integrated via a specific NuGet package.   You  can  resolve the update of the packages with the restore  command of the dotnet CLI  on the project.   If you tried local tools in  .NET Core 3.0, such  as  running "dotnet tool  restore" or "dotnet tool install", delete the local tools cache folder.  Otherwise, local tools won't work on any newer release. This folder  is  located at:   On macOS and  Linux:   @user>rm  -r  $HOME .dotnet toolResolverCache   On Windows:  C:\>rmdir   s  %USERPROFILE%\.dotnet\toolResolverCache   Local tools rely on  a manifest file named  "dotnet-tools.json" in the  current project directory  dotnet folder . This manifest file defines  if the tool s  is  available. You  can  distribute the manifest file with  your code to ensure that anyone who works with your code can  restore and  use the same tools.    CHAPTER 9: COMPILATION AND  BUILD WITH  .NET CORE 3   .NET CORE CU BUILDING OPTIONS   9.2  "dotnet CLI"  is the tool allowing the developer to manage .NET  Core 3 source code and  resources. Various commands enable to  perform specific tasks  for example "dotnet run", for executing the  program .  Each  of these commands defines its own sets of  arguments.   Several dotnet commands can  be  used for the build of your project,  you  can  use one or the other, according to the kind of result you  expect. These commands are  "build" for explicitly building your  dotnet project and  "publish" who packs the project  and  it  dependencies  in  a folder ready for deployment.   Here is  a preview of the basic commands available by default with  the dotnet CLI  tool  most frequently used :      new: Create a new item, project or element based  on  the   template specified.  restore:  Restore the dependencies of a project.         build: Create the CLR image of a project.        publish:  Packs the CLR  image of a project for the   run:  Execute the project.   deployment.  test:  Execute the unit tests.         pack:  Packs the project into a NuGet package.        help:  Display detailed documentation of the specified   clean: Erase assemblies image of a project.   command.  store:  Record the assembly in the runtime package store.       All  these commands are very interesting but we will consider the  most often used. We will review deeper two of these commands:  build and publish.    9.2.1  dotnet build  The  "build" command generate a .NET Core assembly of a project  and  all its dependencies. This command  performs the "implicit"  restauration of the dependencies too.   You  can  compile and  build your .NET Core 3 project directly from  the command  line as  presented  below  you  have to be in the folder  containing the .csproj file .   C:>dotnet  build   Of course, you  can  define more complex building command line  instruction as  presented  below.   C:>dotnet  build  -r  win-X64  --configuration  Release   Here is the explanation of the most commonly used  options  presented in the previous command  line instruction.               -c  or --configuration : Define the configuration to use for the  build, the default value is  "Debug"  specify "Release" if  needed   -o  or --output : Define the target folder for the assembly  produce by the build command.  -r  or--runtime : Specify a target runtime  see  Rid  references    9.2.2  dotnet publish  The "publish" command generate a .NET Core assembly of a project  and all  its dependencies. The "publish" command trigger a build as    CHAPTER 9: COMPILATION AND  BUILD WITH .NET CORE 3   well.  It is actually almost the same  result as the "build" command  but offer some additional features.   You  can  "publish" your .NET Core 3 project directly from the  command line as  presented below.   C:>dotnet  publish   You  can  define a much  more elaborated "publish" command  as  presented  below.   C:>dotnet  publish  -c  Release  -r  win-x64  -  self-contained   p:PublishSingleFile=true   Here is the explanation of the most commonly used  options  presented  in the  previous command line instruction.                  -c  or --configuration :  Define the configuration to use for  publishing.  -o  or --output : Publish the application inside the specified  folder.  -r  or- -runtime : Publish the application for a given runtime.  --self-contained:  Publish the application with the .NET Core  runtime  the dotnet core is,  in this case,  no longer needed on  the target computer where the application will be run    This is just a quick preview of all the options and  commands  available for the "dotnet" command line, for a complete and  exhaustive reference about the options and switches you  can  read  the Microsoft documentation at the following reference links.    https:    docs. microsoft.com  en  us dotnet  core too ls dotnet   https :    docs.m icrosoft.com  en- u s  dotnet core tools  dotnet-bui Id  https:  docs.microsoft.com en  us dotnet core tools dotnet-publish   Both of these commands use the .csproj file for building the project   added to the command line arguments .   9.3  STRUCTURES OF THE CSPROJ  FILE  .NET Core 3 use the new .csproj file format  in  replacement of the  project.json for .NET Core 2  for being used  by MSBuild for the  project building process.   With this new .csproj file format Microsoft has achieved a  marvelous work of simplification  is far less verbose than before   but also achieved to add features to it  specify the generation of a  NuGet package at build time for example .   The  .csproj file consists in  an  XML file interpretable by MSBuild, it  constitutes a script for leading the building process   for the dotnet  CLI  as well .   The  .csproj file is  used  by the MSBuild to compile, build and  link  your project. It offers many features options:      Single exe packaging.     NuGet package creation.     Multi-framework targeting.     Conditional references.     Conditional compilation.    CHAPTER 9: COMPILATION AND  BUILD WITH .NET CORE 3   Here is  a simple sample of a .csproj file:    csproj figure 1    The ".csproj" file consists in two sections; these sections are child of  the main node   see csprojfigure 1 :       : This section contains a set of properties   relatives to the project; these properties are used  by  MSBuild for the generation of an  executable  MSIL or  Native .  You  have also the possibility to add  a conditional attribute  regarding the environment where the build  is  performed or  the options chosen   in the code .    : Specify the framework used  by  the application, this is a mandatory entry of the  .csproj file. You  can  specify multiple frameworks   comma separated .   : Specify the executable output type   : This is the assembly name.   : This  is the path where the output file  built will be copied.     : Specify if you want to use  optimization  true false .       : This section contains user-defined Item   elements.    : Allow you to choose the  referenced  package according to the targeted  framework and the version number optional .   For the presented properties above you  can  use the wildcards   ?,*,** for a larger matching for version number, file names ...  "?" matches a single character.  "*" matches a string or an empty string.  "**" matches a partial path.      Conditional package reference   The  .csproj file syntax allow you to use condition to include package  reference  according to the framework version, configuration,  platform ...  .   Here is a demo snippet of such  .csproj capabilities.       .. ~, ~~--  ·.    .. ···. ·   .... ,~··~··-·~-   True    False   .    · · ·.    ·  ·:;:T.a'~--g~f:\f~me=" G~t'Fru·i t" >  <I~!~~~~y~~  Incl~d~~,,A~~leu ........ ··  .... ·  Condition="$ Apple ==true"   > --- ':  · · ··.,.;JI J;;tFDui;lrn.  LRcl:iide"'"Banana"  c:ona'±tioI1,,,;;;.$J~ .. ,miiAii =".'~rue "    .. > ..     ...   .   -~   ::::,_. __ ,. __ :-::__   ;;~  ., ..... ,.,.,,,"  _: :-~_-:;jllilf·   '   · .....    Ji   ' "   '    I   :;a   ,,,    CHAPTER 9: COMPILATION AND  BUILD WITH .NET CORE 3   .. ···- "·~-~""   ""'"'"" ·----·-·-· ''.   <AllFruits  Include="Pear"  ==true" >      Default compilation includes   MSBuild  have predefined folder and file type who imply default  behavior during the compilation and the building process. The  default includes and  excludes configuration are built-in the .NET  Core SOK. This default compiling behavior simplify the list items  definition in the .csproj file.  The following table shows which items  file types  are processed  and what the MSBuild processing do:    source  Microsoft     The folders " bin" and " obj" are also exclude from the MSBuild  process.    You  can  enable disable the default compiled files type by setting a  property in the PropertyGroup as described below.       Platform build target specification   An  important variable to set in the .csproj file, is the PID   for  Platform Identification, optional . This variable specifies the OS  platform for building a native .NET Core binary for the platform  specified  not machine native .      Single Exe   The  .csproj file allow you also to produce a single exe for your  project, this can  be done by setting the suitable variable as  described below.  A single executable can  be  produced  by the build process when you  ,r  i  specify simultaneously "PublishSingleFile" and the platform you  target  Rid   "Runtimeldentifier"  as described in the snippet  below .   The  "PublishTrimmed" option allow to use only dependencies that  are actually used in the program, but you have to specify them  as  described in the snippet below . You  have to specify the  dependencies reflection used  as well.   j  I  'i  l  \  j  ' ·il  j    CHAPTER 9: COMPILATION AND  BUILD WITH .NET CORE 3   TIPS:  Here is the useful example  that you  can  reuse in your own  project  of .csproj file for the creation of a single small executable  with no dependencies.       The example above, .csproj file will trigger the build of a Windows  native compiled single file application.   This is only an  overview of the possibilities offered by using the  .csproj file  and  MSBuild  options, this tool is very flexible and can  be  adapted to many project requirements.   You  can  consult the very well-done documentation about the  .csproj file configuration and MSBuild on the Microsoft's reference  links below.    https:   docs.microsoft.com en-us visualstudio msbuild   . ·   https:  docs.microsoft.com en-us visualstudio msbuild msbuild  pro j ect-file-schema-refere nee  https:   docs. microsoft.com en  us dotnet core tools  csproj   .   9.4  CORE RT  AHEAD OF TIME  COMPILATION  ''C  Warning:  CoreRT is an  experimental tool from Microsoft and there.]  '!  is no plan that it will be  released  as  a standalone tool in the future. iJ  This have been said, CoreRT is an  amazing tool allowing the  ,1  '~  generation of a machine native executable for a .NET Core 3  ··::,{;j  ·"  1  project.   f1  , :1,-;  CoreRT is an  Opensource tool from Microsoft who bring native  compilation possibilities to .NET Core applications. The production  ;!  J  of a native executable file is  big achievement in the managed  ;   development world.  1   CoreRT can  be used for targeting a wide range of platform OS  Windows, Linux and  macOS.  This tool provides the same  performances level for .NET Core software as  a native C++ solution i   can  provides. CoreRT provides to the .NET Core 3 the same features]  as .NET Natives furnish for the .NET framework.  ;   Even  if many constraints and  bugs have been found for the  compilation of a Web application, CoreRT seems to work just fine  for console and libraries projects  these are the types we are  interested in .   This is a new technology, introduces by Microsoft for improving the'  performances of .NET Core software whatever the platform OS the  software is  running on. This tool is still under heavy development    CHAPTER 9: COMPILATION AND BUILD WITH .NET CORE 3   phase and does not provide  as time these lines were written   debugging support  as the classical  CoreCLR can  provide . This  amazing tool allows unprecedent capabilities for the .NET Core  software developer, you can  now code machine native application  with C!  And you  have the choice to produce C++ code from your  .NET Core source code too.   https:   mattwarren.org 2018 06 07  CoreRT-.NET  Runtime-for-AOT    https:  githu b.com  dotnet corert blob  master  Docu me  ntation intro-to-corert.md  https:  githu b.com dotnet  core rt   9.4.1  Architecture  CoreRT is a native toolchain for compiling CLR  language to machine  code as described in the schema below  figure 1}.   Dependencies   analysis,   comp1lat1on  roots   OBJ file  native     figure 1}    Core RT use  RyuJIT,  the Just In Time compiler  used  by .NET Core  during the execution of the program  to perform an Ahead  Of Time   AOT  compilation of the program.   CoreRT comes from the refactoring of the .Net Core  runtime   RyuJIT   but instead of producing machine code on the fly during  the execution  it produce the machine code and save  it  AOT  on the  file system  instead of being copied in  memory .   9.4.2  Benefits  The use of CoreRT brings many benefits to the developer, here is  a  list of the most critical:      Generation of a native application  no need to install .NET   Core  Runtime!       Better performance during the startup phase of the  application  no more needs to load the CLR, JIT,  ...        Possibility to use  native compiler optimization  from C++      Easier multiplatform deployment scenarios  You  can  deploy   your application using only on  native executable       Ability to be deployed on  small container   These,  quickly enumerated, benefits are often critical  regarding the  choice of the development language or framework, it make a great  sense  now to use  .NET Core 3 for the development of multiplatform  application  at least for Windows, Linux,  macOS .   The average minimal size  of the EXE  produced for windows 64  for  the classical  "HelloWorld" project  is  around 4 MB  compared to  the 70MB with .NET Core embedded .    CHAPTER 9: COMPILATION AND  BUILD WITH .NET CORE 3   CoreRT define a much larger scope for the use of .NET Core 3.  It can  now be used  in  many new software contexts, in the old days,  reserved to much  lower abstracted language as  C or C++.   CoreRT is  an  always evolving tool  it is still experimental  and  does  not provide cross-platform compilation option, each  machine  native executable has to be built using its own platform.   9.4.3  Prerequisites install for CoreRT  As  we have seen  previously CoreRT use a C compiler for the  production of a machine native executable, thus a proper  environment has to be setup on  each  platform before achieving the  production of a machine native executable.   9.4.3.1  On macOS  On the macOS,  you  will have to install the "XCode command line  tools", actually the "gee"  compiler for macOS.   The easiest way for doing so  is to invoke "gee" from the command  line as  described below.   $  gee   If you do not have the required tools  gee already installed  a dialog  will  pop-up as below, otherwise you have already the tool installed.    The  gtc" Cot1111land requires the -m mUili   developer to1>hi. Would you like to ili all tll cid:127  10.i  ..  now?  . Gi,QOSll. lOJiloll to "l>ailnuflc Cho oso Gel Xcodoito io l>II ;l;:;adl "'~  : :  .·th~-:C?~m~f}~i'J_i_ne · ~iavruoper_ too_ls fro rt,· ti',·  ·APlf-~O:N ..   Get Xcode   Not Now   ,_   Choose install ...   You  will have also to install the "CMake" tools after that  the  download links are provided below . The "CMake" application can  be  installed as any other .pkg file. You  can  download the .pkg file  from the link below.   http:  www.cmake.org   https:   developer .a pple.com xcod e    9.4.3.2  On  ubuntu  "gee" and  "cmake" are installed by default on the ubuntu desktop  distribution, so you  do not have to install any complementary tool  for building a machine native application on this platform. You  can  compile a CoreRT ready project to machine native executable by  using the proper options and  command with the dotnet CU  as  described  in the following section.    CHAPTER 9: COMPILATION AND  BUILD WITH  .NET CORE 3   9.4.3.3  On  Windows  For building CoreRT machine native executable from the main  development platform, you have to install the C++ tools "Desktop  development with C++"  in the Visual Studio 2019 installer program  as shown  in the picture below.   el   "   .-.,.u,.i;;   -   et,,, ... - ""'  ,.,,O:r<...,o,<Ml .   I_,,~,, .... .,___  I 1;..I  I,..~ ..... , .  _~, .... -~ .... - · - · · - ·  ....    I [;;J  -~-..... ,    ,..  ::,::~~.:.~~~:.:=.::::.:·.:;:,;·..-·  I    __ _,,_..,, .............. ....   llllffll  , ... ,w..,r,,_,_.,,._.,_~--~"'"'·   ,,..,,._,.._ ......... .,, ..   W   l  "''-'',&'""'·''~ '"  IA ~ -- """'  I  ...... ~ ........ ,*'"'  ,_""'   '..,."'"     -  ! r  ..    .. ; -  ,·,,,o,    -'"'"'"'-~,.,1vP..,,,._,.. .... ,   R   -   cid:143    X   j  l;"Gt.;il\M\cn: d~tJ~\ ...   ,  n,c.,..c,,,;,.nl,m,,m<lowlo;,""'"'  "o""''"!'<l.-,,_""'""'" ,-~~ ~"  ~   ''>,o ,;M   . ,:, ... , ......... ,   II  1,oH,1,,00,.._~.,   .,,,,C.'!""s\00i;1«v,_    ~" ~"-' ' ¼,.~.w  ,,Ao ,,'0!1 ,d ~ ,,,,    -, .. '""'"   ""·"n ·-    ~ :~-_, ,_, 0:~,,e,  .,,,,;,e;,,,,.  tJ  '""""'"   ~ , wee,,'""'' ,,s,'."",;; ~'><\ ~i<' ~ a,,<;  .S  F·,c -'"'''"""'"-''-i;   .... , .............. .c,  . , ... , ... , , -.. 1,1.,-.  <" "' 'i""~' '"',,i.vx,O'~'  M,"1'S_·  "~""'-''->,  s.-,.-,~A,.-,,~,   l pH !~~<d    "IH~  -,~_. .. _~"""'~'"I>    ["""',;_;~'.;-_·_"]   This is the only requirement for the prerequisites of CoreRT on this  platform.   Once you  have a proper building environment for each  OS, you  can  start to produce machine native executable of these platform.   9.4.4  Machine Native compilation scenario  The implementation of CoreRT in your project has  to be integrated  as soon  as  possible in your project development, to verify if there is  no conflict with the tool and the source code you develop.    The CoreRT have to be implemented by code  in  our case  C   inside  your source file, for doing so you have to follow a simple  method.   A   Add the required package to your project   Package:  Microsoft. Dotnet. lLCom piler   For  including the CoreRT capabilities to your project, you have to  had the dedicated package. This package is still in  alpha version and  available only on the Microsoft's myget.com repository.   If you want to use the already built assembly, you have to configure  a new package source address in the NuGet package manager of  Visual Studio.  The address to access  Microsoft's myget  a compatible NuGet  repository   repository is:   https :  dotnetfeed .blob.core. windows. net dotnet  core index.json   Here is the preview of how it can  be  done inside Visual Studio 2019  though the "Options NugetPackageManager" menu.    CHAPTER 9: COMPILATION AND  BUILD WITH .NET CORE 3   X   E2J  m.Jget.or;i   htq,,;:1,'ap1 nu:}<t.Otgiv3 jnde,,j,cn   Oplaon;   p   ~  U'.!  h  ~ ,::,= Platform  I>  IR,tah...,e Tod,  I>  Fl"Tooi>  I>  GitHut,lo,Viru,,IS\1,dio  i,  Gr~phi~  Oi~gnorn,~   4  NuGet  P""k'9" M,n~ger   Gmor I   ~  'SOL Sem,r foot,  I>  hsl  V  r,..t Ad pt,:rler Gocg e T ert  ~  'I rtTc,,.-,p oting  ~  1.1 eb Fc;,ns ~signer   ,  ~  Web re,form~nee Teal T0    I>  Window:;Fcm1, Q.,.l9n a:   _..J!._..Af!MLJl'"i""""~ ~-----'-  Mam~,  dotnet-cc,.,   §ource: [~tt.~? d~~~*;~~!:~.G.:-~~i:~,:~:i~-n-eiid-o\~~:-~-~-~-i:~:~}~:-"J ;j]j~i! [.'.PM.~e'    Add new NuGet package sources    After that the "ILCompiler" package appears in the list of the  available packages to install.  As you can  see in the picture below, you could find other  interesting and  useful packages for other aspect of the  development.  We  recommend you to spend  some times for the review of the  other packages ofthis "experimental" repository from Microsoft.    ~ lnstal!el'i   Updates   NuGet Package  Manager: He!loCoreRTWqr1d    ~  Mif:rcsgft.DotN :UielixJobSender byMi,ro,,Dft   Thi, f>"'J I  [,:,, c-on,tr~cli«~  ond ""'""'gjobe !o   P~ci:o3ePe,::npt,on   "'""' " theHel"Api    e  MicrosgftDotN~.He1hi.Sdlc b;:Mic,ornfl  ,.,,.,..,,,  , lflll , , f~~~-~~LOim~f!iv_t.i .aqwrt  ~ '  ··PMW~_ilie.fll m;,n«~an;\<J~ ~d ~-~~""":,  fy, "- ~~nl3e~.f4!,«!d1Jill.?4}$<_<ao·  '  1111  Mkro.soft.DotNct.ltVerlflcatlon '1'j Mic,c,ott  lllill  Provid.,  libro.,y,  containing a"''"" pht!crm. ~p= ,oo<oetoolth.11  ,  ...,.,._,. -cap,bl!dvmf,ing MSll.  cod  ba.a,d"" f MA-CH5    e  MkrDsgft,OiltNet:JnWrna!Abstractioml Ir; M,co;,""11   AWr~<tio,.,. fo, m ~i",l <eod  that """ file ,,i,tom and  ,wi,ommot   "".;..,,.  t.atobfe.   ~;,;:;.,,x;.,-,JphiL\947{  I   II Microsoft.DotNetll.Compiler   P«r,i ln to- ,orn~rle ma>i 'l"d <;o~ to  na\iv~  4~b9'l!'lp\' 731 Self'i.c74b0ld5732.\241lS,,2a5  l'ih ~ »sing ff<1Got S.~th~ p~'1:,,ge =1uir<,; a  ieMt  ,...,,,.;oo3.~.   \ erli ~   1-il.~-.,lph;,-21.Q.1-01   J;ut!>o< tl;  u,;,.,..,,_,  Dale! ublisbed,  Sat~r:tay, Sept<:m!;or21, 2011   Micfo,cft  Vi w Uc,;,, ..   [9 21,,; j lSJ   ';;  I  ;~   Ii   TIPS: You  can  specify custom  source for the NuGet packages by  adding a file in your project folder: "nuget.json".   l -"~ J  !  ':j  But using the NuGet package  is  not the only solution for the use of  }  !J  CoreRT in your program. You  also have the possibility to retrieve  · !  the CoreRT solution  from its GitHub repos  and add  it to your  ,: j  project for a direct reference on the project. This  last method has  the advantage that you  are sure to use the last version of CoreRT  ·.:   ,j   at the time you retrieve the CoreRT source code   but it requires  much  more code maintenance and the build have to be done with  J  J  the dotnet CU tool.   't, nuget  Microsoft.Dotenet.lt..Compiler   B   Compile the project with CLI   dotnet publish    Here are the available platform types you can  specify for the  compilation. These RID   Runtime Identifier  are  used to identify theJ   l 1   '~   1!    CHAPTER 9: COMPILATION AND  BUILD WITH  .NET CORE 3   platform where the developer plan to run the native application   this is only the Portable RID   and produce an executable for:   For Windows:      win-x64     win-x86     win-arm  na      win-arm64  na    For Linux:             linux-x64  linux-musl-x64  Alpine   linux-arm  Raspberry Pi    ?    For macOS:      osx-x64  macOS version  10.12 minimum, see prerequisites   for .NET Core 3    Be  aware that the CoreRT tool is an  experimental tool, it is  not  working for several  platforms defined above  arm target is  not  currently working , you have to make some research on this  specific subject before the start of the implementation of this tool  for exotic target platform. You  can find  more information about  specific system RID  at the reference links below.   https    githu b.com  dotnet corefx blob master  pkg M icr  osoft.  NETCore.platforms readme.md  https:   docs.microsoftcom en-us dotnet core rid  catalog     Once you  have chosen the platform you  want to perform the  building process among those RIDs, you can  use the "publish"  command. The  RID  can  be  specified  in the publish command line or  inside the .csproj file.   Here is a sample command  line instruction for actually generating  the final native executable for windows 64, this command  is  working if you  are in the application folder, if this is  not the case  you  have to specify the path where the compiler can  find the  .csproj file of the project.   C:\appFolder>  dotnet  publish  -c  release  -r  win-x64   Here is the same command line example for targeting macOS   on  macOS .   $  dotnet  publish  -c  release  -r  osx-x64   Be careful, you cannot build a release targeting the macOS  or Linux  platform on the Windows since Core RT does not provide cross  platform build feature.   C   Publishing with CoreRT using Visual Studio   Cherry on top, you  can  actually build the machine native executable   for Windows  of your .NET Core 3 application directly from Visual  Studio 2019 by using the "Publish" option of the contextual menu    CHAPTER 9: COMPILATION AND  BUILD WITH  .NET CORE 3   on your project. Here is a view of the typical setup of the publishing  properties for achieving that goal.   Profile Nome::   Profile publish win-Jo:64   - - - ------··-·--  o, --------------  j Re!ease I Any CPU   ~=============~  r  I  ::::=:======================~   [ nt:t:coreapp3,0   __ _  -r_l   ·-----·- - - - - - · - - - - - - - - - - - - - i win-x:64   !~!   c onfiguration:   Target Framework;   Target  Runtime:   Target Location:   Deployment M-ode:  !Self-contained   $ave   Cancel   Note that the specified folder in  "Target location" could not be the  one actually used for the output of the machine native file you  could find the executable in a "native" folder , so check carefully  the "Release" folder for finding the executable  even  if you get  error message at the end of the publishing process! .   9.4.5  Core RT console project example  For helping you in the use of the CoreRT for the production of a  machine native executable of your .NET Core 3 program, here is an  example project who includes the several configuration files   .csproj  used for the generation of specifics executable for  Windows, ubuntu and  macOS.    This sample is a basic program developed for a console used, it is  called  "HelloCoreRTWorld".   Following the previously described process for the creation of each  ·'  machine native executable here is the size of this executable on  each  platform.    approximative sizes    The  machine executable includes all the required  .NET Core  dependencies. Remember, that the storage size of the executable  could be a great advantage for using CoreRT  compared to the size  when you  deploy the complete runtime  in the production of the  executable file of your application, but the performances are a  strong point for using this technology too.   This project is  of course available on the netcore3 GitHub   repository. O https:  github.com netcore3 CodeBook Chapter   9 3 HelloCoreRTWorld    CHAPTER 9: COMPILATION AND BUILD WITH  .NET CORE 3   CoreRT is  an  experimental tool  there is  no guarantee of any kind  associated with its use . For the generation of a machine native  executable for each  platform you will have to use several .csproj  file. You  have also the possibility to develop several command line  scripts or batches including the proper options and configurations  adapted for each system.   In  conclusion, regarding the use of CoreRT;  it is  an  amazing tool  who allows to the developer to produce, in an  almost simple way, a  true machine native executable for each  platform we review in  this  book.   It provides all  the benefits associated with the use of a machine  native executable before reserved  to lower end languages  C++,  ASM   and benefits from the productivity gains .NET Core 3 brings.   9.5  THE .NET COMPILER PLATFORM:  ROSLYN  Even if that is outside the scope of this book, we cannot review the  compiler tools available in  .NET Core 3 without talking about  Roslyn.   Roslyn  is the new name given to the new .NET compiler platform  since the .NET framework 4.6. With this major version Microsoft  enter in the Opensource arena.   The new API  provided with Roslyn allows to manipulate and to  transform the product of the processing  CLR,  MSIL  at each step of  the compiling processes:      Syntax analysis     Semantic analysis     MSIL code writing    This tool allows the developer to integrate the C  language  capabilities in  his own application. The  application domains are  quite large, like:      The integration of a scripting language for automatizing      On the fly compilation of custom  module developed by the   your application,   user   In  deed the integration of a programing language could  be a great  benefit for the user and  opens field of application to another level  with automations capabilities.   Roslyn  provide to the developer the possibility to integrate a robust  and  customizable language for the programming and the  automation of the developed software.    CHAPTER 10: APPLICATION PERFORMANCES IMPROVEMENT   .N~   Chapter 10.   APPLICATION  PERFORMANCES  IMPROVEMENT   The performances are often a critical point in  many software  development projects. In this chapter we will review, how to  identify the bottlenecks inside the source code using the built-in  Visual  studio tools and afterward review a Benchmark dedicated  tool  able to produce advanced  reports .   We will finally review natty technics and tips for producing high  performances C source code from the start.    But do not forget performances issues come often from an  inappropriate choice in the architecture of the software  especially  for a desktop, local application .   If you encounter performances issues of this type do not hesitate to:,  modify the architecture planed as soon as the issue  is  identified: as  soon the architecture will be fix  and modified  the less time you  will spend to try to fix or to patch a dodgy program architecture.   In the other cases, the developer can use a simple method for the  implementation of a performance enhancement process.   Here is the simple cycle the developer can follow for achieving this  goal.    Performance enhancement process    10.1  USE VISUAL STUDIO RUNNING ANALYSIS TOOLS  Visual Studio 2019 is an  awesome tool for the real time  performance visualization of a running program.   If the "Diagnostic Tools" window is  not display on your Visual  Studio configuration you can  selectthe menu:   Debug Windows Diagnostic Tools.    CHAPTER 10: APPLICATION  PERFORMANCES IMPROVEMENT   The "Diagnostic tools" view is open   by default  each time the  program is executed from the Visual Studio environment  the  window is displayed at each  run  session .   This view provides real time indicators about the chronology of the  execution, the CPU  usage of the program process, the system  events triggered, and the amount of memory used by the program  as  you  can  see on the picture below  figure 1 .    figure 1}   All of these indicators can  be used by the developer to identify if a  specific methods or objects have an  abnormal consumption of CPU  or memory when it is  loaded or executed. This tool provides a good  view for the identification of source code who have to be optimized  fixed or refactored.    ;j  It also can  help the developer to choose a pertinent and  appropriate architecture regarding those results  and  change it, if it ::l  .~  is  needed .  ;,ij  You  can view the "CPU  usage" by methods by enabling it; threw the,',  "CPU  Usage" tab as shown   figure 2   below.  ,~   ;1 I l   l I  ~  I   ,1  ThreadingGUl.exe {P!D: 2800    ThreadingGUl,Progra~::Mait:i  Threading:GUl.~orrn1.::.ctor  Thte:Z.dingGUI.Form1::!nitializeCqmponent   ,..j   1710 {100.00%}:   ; Total CPU [unit.,.. ..  '   l,,JJ4dl -- _,   40 2.34%1    figure 2    You  can  also use the "Performance Profiler"  Analyze Performance  Profiler  for analyzing the performances  CPU  usage,  memory ...   of  your running application in  live.   There is  a limitation to the use of this tool, the "Performance  analyzer" analyses only one indicator per session of profiling, if you  need CPU  usage  and  memory you have to perform two analysis.    CHAPTER 10: APPLICATION PERFORMANCES IMPROVEMENT   "Performance Profiler" can  generate a report: a ".diagsession" file.  The ".diagsession" file can  be saved  on  disk by right clicking on  the  report tab and select "Save  Report* .diagsession" as shown below   figure 3 .    figure 3    Visual Studio 2019 provides amazing tools for performances  analysis and  in  many cases,  it will cover all your needs in that  matter.   The development of desktop application does not require   generally  much more indicators of performance than the ones  provided with the Visual Studio 2019 tools  This subject is  less  important for a desktop application than it is  for a web application .    10.2 .NET CORE 3 PERFORMANCES BENCHMARKS  Visual Studio 2019 performance analysis tool are efficient for the  developer but if your project requires detailed reporting on the  performances or studies on  performances enhancement evolution,  it will not be the only tool you  will need to use.   The performance benchmarking of .NET Core 3 application can  be  done effectively by the use of a specialized  library:   BenchmarkDotNet.   This package provide report  console, .html, .csv file  allowing the  accurate evaluation of the weight  in time perspective  of each  object methods you use. It can also  be configured to analyze the  memory usage and the garbage collector status.   .    This library is available under NuGet packaging:   BenchmarkDotNet is used for accurately measuring the time spend!  r  by each  piece of code  which you have marked with a dedicated  ·  attribute .   Here is sample code calculating the factorial of a number, and usin r,  BenchmarkDotNet for measuring the time spent for the execution  :,  of the methods.  ·   BenchmarkDotNet    CHAPTER 10: APPLICATION  PERFORMANCES IMPROVEMENT   The  BenchmarkRunner object will evaluate the time spent on  each  and every method marked with the "[BenchMark]" attribute and  produce report for these methods.   As  you can  see on the sample screen shot of a console report  below.    In  addition to the console report and the .html file  ,,  BenchmarkRunner will also produce CSV file. That could be useful if 1  you want to automatize the following of the performances  evolution  or build a dashboard around the results gathered .   You  have also the possibility to archive the .html file report if you  are  refactoring for performances improvement and  compare with  the new version for headlining the effectiveness of the  improvements done . I · · ·    BenchmarkDotnet can  also be added to the test project of your  ",  object, this way running the test provide the benchmarking and the?  validation of the test himself for your object at the same time  be  I  careful in this case the report will be generate each time you  run  ~  the test .   '!'·''    CHAPTER 10: APPLICATION  PERFORMANCES IMPROVEMENT   Be  careful, you should not perform a Benchmarking of your code  in  "debug" mode, because many dependencies relatives to the  debugging system are loaded and  alter the performances data.  When you use the "debug" mode during the benchmarking you are  not collecting relevant data and the performances measured are  not indicative ofthe real  behavior of the application   in  "release"  mode  deployed in  production.   If you  need  more information about the use of BenchmarkDotnet  you  can  consult the reference link below:   ~ ·  https:  benchmarkdotnet.org   ~ https:  github.com Benchmardotnet    In  addition of this quick introduction to BenchmarkDotnet, we will  also review an  example project for demonstrating the  implementation of this tool for measuring the performances of  your application.   10.2.1  Benchmarkdotnet example solution  This example has been adapted to .NET Core 3 from a code of Greg  Kalapos  see GitHub links in  reference . The author has also  made a  short YouTube broadcast about the development of this  application. This broadcast is a quick introduction of how you  can  use Benchmarkdotnet in your own developments.   https:  www.youtube.com watch ?v=KoVFPn nG9W8  https:  github.com gregkalapos    It could be  useful to view this video for getting familiar quickly with·  the use of BenchmarkDotNet and the use of the example solution  furnished at the address below.   The example project has been slightly rewritten for a correct  integration with .NET Core 3 specifics.   The working .NET Core 3 version of this project is available on the  netcore3 GitHub repos.        https:   github.com netcore3 CodeBook Chapter   10 2 Benchmarkinglib   This example project produces an  .html file report added to the  console one and is targeting .NET Core 3 exclusively.   10.3  HIGH PERFORMANCES CODING TRICKS  We have seen  how to measure performances benchmark, and  identifying computing bottlenecks in  the application but a general  knowledge of best performances coding practices is  required for  achieving better efficiency in your programs.   Here is  a list of professional tips to use during the coding phase for· .  making your program running faster  from the start :   A   String.substring replace with Span   continuous memory .,  B   Use the appropriate type of list; IEnumarable rather than   List.   C   Use  For loop instead of foreach  when it is possible .  D   Use string.concat instead of string.Format.  E   Use parallel programing when  it is  possible  use TPL .    CHAPTER 10: APPLICATION PERFORMANCES IMPROVEMENT   F}  Use "ref" variable when  it is frequently access.  G   Avoid unnecessary boxing  ex: var j =  int a  and  unboxing.  H   Avoid  unnecessary casting in general  especially parent to   I   Wrap synchronous operations in async wrappers.  J   Avoid synchronous call at any level.  K}  Avoid task.wait or task.Result within you  asynchronous   children}.   programing.   L   Perform 1 0 operation asynchronously.  M   Optimize data access,  and  use cache  when it's relevant.  N}  Do not over use LINQ  use for loop and condition instead}.  O}  Use  pre-compiled LINQ request.  P   Minimize exception  do not use exception for the usual   program flow, throw only exception for unattended  condition    Q}  Minimize the number of P lnvoke calls  when it is possible}.  R   When using P invoke method decorate imported function   with "in" and  "out" attributes on parameters.   This  is only a few assertions  but relevant  you can  keep in  mind  during your coding, if you  use these recommendations from the  start of your project you can  avoid many performances pitfalls  during the testing phase.   You  should also  remember that performances are not always an  issue   especially with today computer} and can  be down view for  small local application  like a desktop app .   The performances enhancement in  .NET Core is a complex subject  who would require a book by itself. If this subject has a core  importance for the development of your application consult the  reference links below it can  provide you precious knowledge for the  improvement of the code's performances.    https:  www .dotnetperls.com  optimization  https:    docs.microsoft.co m  en- us  dotnet framework performance performance-tips  https:    michaelscod i ngspot.com performance  problems-in-csharp-dotnet   https:  stackify.com net-application-optimization   https:  www.codeproject.com  Articles 10896 Effective  C-Performance-notes   10.4  NATIVE EXECUTABLE COMPRESSION  The generation of a native executable  by using Core RT capabilities ;  is by itself a good way for the improvement of the program's  general performances.   The framework does not need to be  loaded anymore for the  execution of the application and the generation of the machine  code from the MSIL by the CLR  has already been done.   j ,,  Besides, when you generate a machine native executable file of  ,I  your application you  can  benefit from the existing tools for their  'I  M  compression.  :i  The compression of the executable file can  provide performances  '.j   I  gain  most of the time  and  code security improvements for the  1i  application. Because the size  of the executable produced  by .NET  Core 3 is  not negligible  the .NET Core 3 is packed within the  executable , the compression of the executable can  improve the  general performance of the application.   ,   ,'.i   There is several Opensource tool for achieving such compression,  especially on the Windows platform but the most popular is UPX   Ultimate Packer for executable . UPX can  optimize the size of  executable file on  Windows, Linux and  macOS.    CHAPTER  10: APPLICATION  PERFORMANCES IMPROVEMENT   10.4.1  Quick-start guide for UPX  UPX is a multiplatform command  line tool  but here is GUI version  available for Windows and  macOS .   A   UPX setup   UPX can  be installed on every platform we study in the present  book.  Here is the standard  binary installation process for each OS.  The developer has also the possibility to perform an  install of UPX  from the source code  freely available .   On macOS:  The easiest way to install UPX on  macOS is to use the Homebrew  utilities previously presented. Here is the formula  it's the  Homebrew terminology  for installing the command line UPX tool.   $  brew  install  upx   You  can  also install and  use a GUI application for UPX it is called  IUPX.   I http:  iupx.sourceforge.net    0 ~   !ff ,.'";,,,,t,$   On ubuntu:  UPX is available on the standard  repository of the ubuntu Linux  distribution. It can  be installed with the following command line.    '      '', J   :t;   S  sudo  apt-get  update  $  sudo  apt-get  install  upx-ucl   On Windows:  For the windows setup, you have the choice between several GUI  applications who use the UPX code for the compression of your  binary application. The most popular one is  FreeUPX.   http:  www.pazera-software.com products free-upx   0  .-  BJ  Usage of UPX   The use of the UPX command  line tool is common on the three  platforms. For compressing a binary, you have to use the following  command.   $  upx  -o  hello_world_packed.exe  hello  world.exe   The "-o" option, stands for the output filename, this is  an  option fori  the specification of a new packed file, otherwise the original file will:.  be  rewritten  and  shrink . The complete references about the  commands and the options of this program are available on line   see  references below . Be  careful, UPX tool come with "absolutely  no guarantee".   The executable compression seems to be  a good solution for the  reduction of a native executable size   produced with .NET Core  3    CHAPTER 10: APPLICATION PERFORMANCES IMPROVEMENT   and or Core RT .  With the generalization of the use of pipeline for  the build of applications, adding a step in the pipeline for the  executable compression could  be a winning move in terms of code  security and  performances.   You  can  retrieve all the information you need about this useful tool  with the reference links furnished below.   https:  upx.github.io   http:  upx.sourceforge.net   https:  github.com u px u px   https:  www.mankier.com 1 upx  https:   en. wi kipedia.org wiki U PX    .N   " i ",I   ·'I   Chapter 11.   MULTIPLATFORM  PACKAGING AND.  DEPLOYMENT   Once you  achieve to get a proper appliance of your application you  will need to package it for the provisioning on the user computer   deployment}. But in that mater, there is  huge difference among  OS.   These differences could imply the development of a specific setup  program for each  platform you target for your project.   You  can  respond to these constraints by the development of your  own specific setup program for each OS your software targets, but  this solution is time consuming and adds a supplemental weight on  the workload   but that can  be a wise choice in the long run}.    CHAPTER 11: MULTIPLATFORM  PACKAGING AND DEPLOYMENT   The developers can  also use a dedicated software for each specific  OS for doing that  we will review several solutions on each  platform . But, you  have to keep in  mind that if you want to provide  a setup program for each  platform your application is targeting, you  will have as  much of setup program project to manage, introducing  a supplementary complexity to your developments.   Thereafter, we will review a unified multiplatform setup  development tool more adapted to professional requirements.   11.1  DEVELOPING A SETUP PROGRAM FOR EACH  PLATFORM  In  this section we will review the solutions already existing for the  development of a setup program for your application on the three  platforms.   11.1.1  Generate an install program for Windows  A plethora of solutions are available on  Windows, these solutions  not only provide the installer for your program but could  perform  advanced task like: dependencies check,  conditional system version  install ...   Here is  a little short list of the most professional  in  our point of  view  installer:      Wix: This program allows developers to generate installers   for Windows system, it is built-in Visual  Studio 2019 with  the use of the free Extensions  see Visual Studio  marketplace . The SDK allows the use of custom action  written in C  among others features . A vibrant community  support this project. It is a tool used  by Microsoft.       Visual Studio Installer project  lnstallShield : This is the  "light" version of the iconic software lnstallShield, this  extension does not work with Visual Studio Community  edition.      Nsis:   Nullsoft scriptable install system  A professional   Opensource program to produce Windows Installers, it is  small and flexible and  allow the use of plug-ins and scripts   very popular in the Opensource community .   According to our experiences the best solution for the  implementation of a setup program on  Windows is Wix, this  product offering a scripting language much easier to manage at no.  cost  since this is Opensource  furthermore you will find abundant  documentation on  internet  with already made scripts .  Others solutions like Microsoft Visual Studio Installer  lnstallShield  light  and  Nullsoft have their own advantages in their respective  fields of application and can  be a better solution for your particular  software's requirements.   0 -4,,2{ ,'t i   https:  wixtoolset.org  http:  www.flexera.com  https:ljnsis.sourceforge.io  https:   advanced I nsta lier .com   11.1.2  Generate an installer for MacOS  macOS does not usually use  installers, the application has to be  packaged in a ".app" file.   The ".app" file can  be directly executed. This is the file format  distributed by the Apple Store.    CHAPTER 11: MULTIPLATFORM PACKAGING AND DEPLOYMENT   Nevertheless, you can generate ".pkg", ".dkpkg" and  ".dmg" files  for the distribution of your application in this environment.      Generate a .dmg file with "DiskUtility.app": Create DMG  file manually with the "Disk utility" application could be a  solution of choice for the distribution of a basic application.  iDMG: It is a drag and  drop tool for the creation of a .dmg  file from a folder content, it integrates encryption  capabilities too  this product is  no longer under  development}.          Dmg Canvas from Araelium: It is a commercial solution who  allows you to provide beautiful designed setup program for  the distribution of your software.      Packages:  It is  a free tool developed by an  independent   developer. Despite this fact, the product looks pretty  professional and allows a very good flexibility for the  building of an  installer program for your application on  macOS.  "Packages" integrates many advanced features like  presentation editor, dependencies editor, requirements  editor and the possibility to use signing with a certificate.   http:  en.wikioedia.org wiki lnstaller   macOS   http:  araelium.com d mgca nvas  httos:  s.sudre.free.fr Software Packages   The choice of the tool will depend of the type of software you want  to distribute. But in our point of view "Packages" furnish the most  clean  and  cheap solution on  macOS.    We will review several of them on the ubuntu  Debian based   distribution.   solution who coexist for the packaging and the deployment of  applications.   11.1.3  Generate an Installation package for Ubuntu  ,  The distribution of an  application on Linux Is quite different than I~]  the Windows  or macOS  environment, there is many types of  J  ;j  ,ti  i~   , ,,j; ,,  ,J  ·~  ,';j ' :1     Applmage: Applmage is a file format for the distribution of   portable software on  Linux platform. Applmage have many]  ' ·~  advantages compared to the classical way for the  distribution of your application  because all the  dependencies are included in  a compact file .   ii  '.f  ,1  j     Debian package maker: It is a GUI  tool for the creation of aJ   Debian  package for your application, this tool is working  perfectly and is easy to use with its graphical interface, but :l       J ·,,  ' ,.,  it has not been  updated for 10 years  stable .     Nixstaller:  It is command line tool for helping the developer\   1       to build graphical installers in  Linux.  izPack  Java  based : Opensource project since 2001, lsPack ,·   is Java  based, it generates a single installer for the packaging  and the distribution of your application. It uses a XML  '  scripting language.      Makeself: It is a small shell script who generate a self   extractable compressed file from a directory  it can  look as  the minimal tool for the distribution of a software on the  Linux platform .   Regarding the large panel of solutions offered on the Linux  platform for the building of a setup tool for your application we can  recommend the use ofApplmage.    Indeed, Applmage provides a distinctive way to provide out of the  box running application packaging solution. By including in the  package  all the elements that the application requires it provides a  reliable means for the distribution of your application for the Linux  OS.  Moreover, does not need "administrator" rights for the setup  of the application  that could be  handy .   Applmage have gained popular recognition in the Linux developer's  community  and  has acquire a solid reputation of reliability . This  application is  Opensource and provide quantity of documentation.   0 - ~.~--·· ·'·"   https:  wwww.appimage.org  http:  debianpackagemaker.blogspot.com  http:  directory.fsf.org wiki Nixstaller  http:  izpack.org  https:  makeself.io   11.2  MULTIPLATFORM UNIFIED SETUP PROGRAM  DEVELOPMENT:   INSTALLBUILDER   Even  if the previous presented solutions can fit to your setup  program development needs, these solutions imply the  development of several setup projects  one per OS .   Throughout this book we  have tried to provide links and solutions  with the cheaper cost possible  almost free  for the developer, but  the viable solution for the development of multiplatform setup  program is  not Opensource and not even free, this is the  commercial software from Bitrock called lnstallBuilder.    ·,   ',    ·   '   https:  installbuilder.bitrock.com    11.2.1  What is  lnstallBuilder  Install Builder from Bitrock creates multiplatform installers and  '  .  native setup packages. It allows you to deploy your application in  any environment. It provides reliable and  professional installation  ·  ..  experience for every OS.   '   '   This professional software provides original tools for the  development of a solid multi platform setup program for your  application.   lnstallBuilder includes many useful features:      Use of setup scripting language     Setup debugger  with dedicate script language .     Auto-update integration.     Multilingual.     Multilanguage.     Optimizer.     Multiple installation mode  GUI console .     Native look and feel for your setup program on Windows,   ubuntu and  macOS.   \  lnstallBuilder furnish a complete environment for the development_,,  of installer program, it allows to the developer to keep in sync the  '  setup program among the different platforms. As it is a commercial'  product you will find abundant documentation  see reference links  below  on how to respond to your specific setup constraints.    CHAPTER 11: MULTIPLATFORM  PACKAGING AND DEPLOYMENT   As the company is specialized in the setup making area,  Bitrocks's  customer support can  also provide precious help and  advices for  the development of your multiplatform setup program.   Added to its well though user interface, this product used a XML file  format for the scripting of the install process for each  platform  allowing to reuse code snippet s  from the lnstallbuilder user's  community and support team.   Here is a sample snippet of the scripting language used  in  Install Builder.    This script snippet target macOS and Windows system for the  install.   As  it is a commercial  product, a complete and  well-designed  developer's guide is freely available for a quick development of a  professional looking setup program for every desktop platform  targeted  with one setup project .   https:  i nstall builder. bitrock.com   https:  docs. bitrock.com    11.3  RECOMMENDATIONS FOR THE PACKAGING AND THE DEPLOYMENT   TOOLS OF YOUR APPLICATION   The packaging is a crucial point for a smooth and  harmonious  deployment of your .NET Core 3 application. The  packaging of  application will depend of:      The type of release you want to distribute: CLR,  single EXE   or machine native.      The type of dependencies your application relies on: GTK,   QT,  ...   and you  have to include in your installer       The  platforms you want to target.     The context of the deployment: ls your software a   commercial application? a shareware? or a tool who have to':i  be deployed only on the computers of your company?      The features you want to include in the package    Multilingual, autoUpdate, License  protection, ...  .    CHAPTER 11: MULTIPLATFORM PACKAGING AND DEPLOYMENT   This  list is not exhaustive, as  many projects have their own  constraints.   The complexity inherent to the choice of a setup tool for  multiplatform application is  a great deal for every developer  or  team  and should not be disregard during the installer making task  of the project.   In  many software development projects, especially in the  multiplatform environment, this phase is  under estimate and  produce tools who do not flatter the application installed.   We can  recommend that the development team work as soon as  possible in the sDlc  software development life cycle  on the  installer program they plane to use for their application distribution  and deployment.   As  it is separates projects, the installer coding  yes, the setup  program is a project by itself  can  be done simultaneously during  the project coding phase. This way of doing allows to validate if the  tool s  chosen  match the requirements for the installation of the  software developed  setup of the dependencies, checking  configuration, environment ...  .  In a professional context, a  dedicated resource could  be dedicated to this task in  an exclusive  manner.   The use of freely available tools on  each  platform will benefit to  application packaged  under the native format. The user will have a  complete solution adopting his familiar OS  interface  for the  installer and the application . But this solution introduces the use of  several distinct development tools, one for each OS  and  multiply  the installer project as  much as the number of OS targeted.    In the other hand the use of a tool  lnstallBuilder  for centralizing  every project  one for each  OS  targeted  can  provide a better  coherence to the project itself and easing the management of this  one. Nevertheless, this solution implies to invest a not negligible  budget for this specific task.   But most of all, do not underestimate the value of a proficient  setup program, do not forget that program will be the user's first  contact with the application, that can  induce a positive or a  negative perception of the application.   You  have to be sure that the effect your installer solution will  provide to the user will be  in  sync with the targeted experience you  want to bring to the user with the use of your software.    .N~   Chapter 12.   PERSPECTIVES FOR THE SOLUTIONS   REVIEWED   As we  have seen  along this book, the multiplatform development  capabilities offered by the third version of the .NET Core are simply  amazing. Even  if the .NET Core 3 does not provide any  multiplatform desktop GUI  API, the existing tools already available  for the developers can  respond today to each  and  every  requirement for its project.    The  multiplatform development area, since  long time reserved to  few highly technical people is  now accessible to the C developer  community.   The well thought architecture of this new framework brings enough,j  1  flexibilities for addressing any kind of developer's application  l  1{  needs.  1  ·1  ,-:  j  '  J ,,  ;]  ,i  .  I  The ability of .NET Core 3 to produce native executable  with  ;  CoreRT} for each  platform  Windows, Linux, macOS} provides in the:1  same time the capability to use executable compression and  ]  optimization tools, dedicated since a long time to a developer elite:';Jj  'Q  The  latest coding technics reviewed previously along this book are  ,;  the perfect illustration of the abundance of innovative solutions  ,:~  who can  be used with .NET Core 3.   Each technology presented  have its own development history and  ':.J  origin who will predetermine, for part, its usage and  maintainability:!   ;e:~n:~~~=· could be used  in  many cases for providing a user-  friendly experience in  place of a console application  not really user   friendly, especially for prime user .  You can also consider to use it  "  for the development of containerized application service   continuously running in a dedicated environment} where it can  provide secure monitoring capabilities directly from the container  where it is  executed  In this case you should  have access to the  container}.      ,:;,.   Electron.NET is a wrapper, around Electron. Electron is a Google   ij   promoted tool for expanding the field of application for his Node.JS!  development environment and community. It is not sure that  ·· ~  Google will continue to maintain a tool for its use with the .NET  c:!   ] ,,   i'j ::J    CHAPTER 12: PERSPECTIVES FOR THE SOLUTIONS REVIEWED   Core. The current stability among each version of this product is  neither very good.  So,  it would not be a surprise if the Electron.NET  wrapper will not support the future releases of the .NET Core.  Indeed, the developers who choose this solution could have to  make a choice between a complete Node.JS solution development   complete Electron  or the use of the .NET Core.  But these are  speculations, we are not here just yet.   LibUI  is a quite discreet  not so trendy  GUI  toolkit  mostly known  by the C++ users  but it provides great performances, little  dependencies size and the community around this tool is still quite  active. In  another hand the implementation of the interface has to  be done manually  by code ,  reserving the use of this tools to a  category of developer only. The general quality of the wrapper  could also be  improved in future versions. The wrapper is  using the  .NET Standard, thus it will be useable in the future version of the  .NET Core anyway.   The GTK toolkit have a quit long development history and even  if  some periods of development are very quiet  stable  the GTK  community keep it still alive and kicking. The number of deployed  applications in production will guarantee  at least for some times   the continuity of the evolution of the product. Moreover, the GTK  wrapper is implemented using the .NET Standard so it will be  useable by the future release of .NET Core.   The QT framework have a large community and since 2014 a  company for guarantee of its continuous development in the  future.    'j  :i}  \~  '.;~   i   ;_1~   -~1'  ,' ~   Even  if QT is most often used  by the C++ developer's community   with the complete development environment QTCreator  the  bindings, QML.NET provides to the .NET Core community a great  way to integrate the QML language in the .NET Core developer  toolbox. Here also, QML.NET has  been  developed using the NET  Standard marking the maintainability in the future of the  applications developed today.   :A ' ,\j  i .<~  -~ 'i  Ava Ionia appears to be in the continuity of the development of the·.·.'. .tt.'  Microsoft WPF.  As  its name suggest  Avalon is the code named  . ~  used  by Microsoft during the development of WPF , it integrates  the current XAML principles from WPF for porting it to  multiplatform  Windows, Linux,  macOS, Android .   t~  ij  jij  ij  Avalonia seems to be a quick choice for the WPF application  developers, as the standard XAML used is  similar to the WPF   but  \j  not compatible . Even if the development is not very active  it was ft  in alpha version during several years , the professional quality of  ;:;f  the releases, the availability of dedicated tools and the abundant  ,j  :J  documentation could  suggest it could be much more widely used  by the .NET developer's community. Even if that is notthe case in  :~   I  the future, the use of .NET Standard dependencies would  i~  guarantee the code  maintainability in the long run of the  : j  application developed today.   I~  For resuming most of the tools presented in this book could  provide a pertinent response for the development of multiplatfornjj  application according to the specific requirements and the contextsj  · ~  of these developments.  ::3    CHAPTER 12: PERSPECTIVES  FOR THE SOLUTIONS REVIEWED   Another important factor, for the choice of a solution type,  is also  the current skills available for making the application  the human  resources . It is, for sure, a determinant criterion who will do the  choice by itself in  many development teams.   So,  we have seen there is  many parameters for choosing a tool  rather than another one. You  should consider also the life  expectancy you intend for your software. If your application does  not intend to be used on a long run, or being developed for  technologies demos purpose you could consider more fancy and  trending tools  but often unstable . If you plan to develop an  application with several release along many years, you will have to  keep in  mind that the tools you choose will be always developed  and supported  or at least maintainable  for the time frame you  target.   We hope that this book is a great source of inspiration for your  .NET Core 3 development project. As  it is  an  always evolving  technology be assured we will release updated edition about the  exciting subject of the .NET Core GUI desktop development.    ·:.   "~   '  '·.J  ... ;,  ·· .· .. 1.·.   ·.:·. .: .11:~.'   ,:-1 J~   REFERENCES   As  it is a new and still evolving subject  for .NET Core 3 at least},  most of the sources used for the writing of the present book have  been found on line, we can  mention and thanks the following web  sites:      Microsoft.com     Stackoverflow.com     Codeguru.com     Gnome.erg     Apple.com   Books references   ij  ',   .:~  "User interface inspection methods: a use-centered design method''',. ,:.  :      Chauncey Wilson  pub:  Morgan Kaufmann  2014  ' ,,  ill  · .~   "The element of user interface design"  Theo Mandel  pub:  J.Weiley, cop  1997   "The interface effect"  Alexander R.  Galloway  Polity Press 2012  .  ! ,t-  "The Windows interface: guidelines for software design"   Microsoft Corporation  Microsoft Press 1996   ','.,j  .J  ,}   il,   "Human Interface and the management of information: 17th  international conference,  HCI  International 2015 Los Angeles, CA"  i  Yamamoto Sakae    pub: Springer 201S   "Mental Models: Aligning Design Startegy with Human Behavior"  ·  I. Young  pub:  Rosenfeld Media 2008    REFERENCES   "The essential guide to user interface  design: An  introduction to  GUI design principles and techniques"  Wilbert 0. Galitz    pub:  Wiley, cop. 2002   "Measuring the user experience: collecting, analyzing and  presenting usability metrics"  Thomas Tullis  pub:  Elsevier-Morgan  Kaufmann 2013   "Information visualization: an  introduction"  Robert Spence  pub:  Springer, cop. 2014   "Modeling user's experience with interactive systems"  Karapanos  Evangelos    pub: Springer, cop. 2013   "The Wiley handbook of human computer interaction"  Kent L.  Norman, Jurek Kirakowski    pub: Wiley-Blackwell 2018
