cover  next page >         title : author : publisher : isbn10  asin : print isbn13 : ebook isbn13 : language : subject   publication date : lcc : ddc : subject :  JavaScript Complete Holzner, Steven. McGraw-Hill Professional 0079137369 9780079137364 9780072129182 English JavaScript  Computer program language  1998 QA76.73.J39H653 1998eb 005.2 762 JavaScript  Computer program language  cover  If you like this book, buy it!  next page >   < previous page  page_i  next page > Page i  JavaScript Complete  Steven Holzner  McGraw-Hill   New York San Francisco Washington, D.C. Auckland  Bogot√° Caracas Lisbon London Madrid Mexico City   Milan Montreal New Delhi San Juan Singapore   Sydney Tokyo Toronto     < previous page    page_i  next page >  If you like this book, buy it!   < previous page  page_ii  next page > Page ii  Disclaimer:  This netLibrary eBook does not include data from the CD-ROM that was part of the original hard copy book.  Copyright   1998 by The McGraw-Hill Companies, Inc. All rights reserved. Printed in the United States of America. Except as permitted  under the United States Copyright Act of 1976, no part of this publication may be reproduced or distributed in any form or by any means,  or stored in a data base or retrieval system, without the prior written permission of the publisher.  1 2 3 4 5 6 7 8 9 0 DOC DOC 9 0 3 2 1 0 9 8  P N 047158-4  PART OF ISBN 0-07-913736-9  The sponsoring editor for this book was Michael Sprague and the production supervisor was Pamela Pelton. It was set in Century  Schoolbook by Douglas & Gayle Limited.  Printed and bound by R. R. Donnelley & Sons Company.  McGraw-Hill books are available at special quantity discounts to use as premiums and sales promotions, or for use in corporate training  programs. For more information, please write to Director of Special Sales, McGraw-Hill, 11 West 19th Street, New York, NY 10011. Or  contact your local bookstore.  Information contained in this work has been obtained by The McGraw-Hill Companies, Inc.  McGraw-Hill  from sources believed to  be reliable. However, neither McGraw-Hill nor its authors guarantees the accuracy or completeness of any information published  herein and neither McGraw-Hill nor its authors shall be responsible for any errors, omissions, or damages arising out of use of this  information. This work is published with the understanding that McGraw-Hill and its authors are supplying information but are not  attempting to render engineering or other professional services. If such services are required, the assistance of an appropriate  professional should be sought.  This book is printed on recycled, acid-free paper containing a minimum of 50% recycled, de-inked fiber.       < previous page    page_ii  If you like this book, buy it!  next page >   < previous page  page_iii  next page > Page iii  To Nancy, as always!    < previous page    page_iii  next page >  If you like this book, buy it!   < previous page  page_v  next page > Page v  Acknowledgments  I would like to thank those who have helped me through the process of creating this book: My editor, Michael Sprague  and the other folks at McGraw-Hill without whom this book may not have been published. I also would like thank the  production staff at Douglas & Gayle.    < previous page    page_v  next page >  If you like this book, buy it!   < previous page  page_vii  next page > Page vii  Contents  Introduction  Chapter 1   Welcome to JavaScript!  JavaScript is Not Java  Two Browsers, Two JavaScripts  What Does JavaScript Look Like?  Our First JavaScript Example  Using the   Tag  Handling Browsers That Dont Handle JavaScript  Writing to a Web page From JavaScript  JavaScript Works With HTML Controls  Handling Data in JavaScript  Using Variables  Variable Scope  Variable Types  Variable Naming Conventions  The var Example  xiii  1  2  3  11  12  13  14  14  18  23  24  27  28  29  29   Displaying the Value in a Variable  Controlling Your Program: the if Statement  The if Example  Using an else Statement  Controlling Your Program: The switch Statement  Chapter 2   JavaScript Program Control and Objects  Program Control: The for Statement  Using Breaks  Using Labeled Breaks  Program Control: The while Statement  Program Control: The do-while Statement  All About JavaScript Functions  Handling Arguments in Functions  Handling Arguments in Functions  Object-Based Programming in JavaScript  Whats an Object?       < previous page    31  33  34  38  41  47  48  52  52  53  57  60  65  65  68  68  page_vii  next page >  If you like this book, buy it!   < previous page  page_viii  next page > Page viii  What Are Object Methods?  What Are Object Properties?  Built-in JavaScript Objects  Built-in Objects: The String Object  Using the new Operator  Object Constructors  Built-in Objects: the Array Object  Using the for-in Statement  Using the with Statement  Creating Custom Objects  Setting Up a Custom JavaScript Object in Code  Creating an Object Property  Creating an Object Method  Instantiating the Object  Using Internet Explorer Scriptlets  Chapter 3   Forms: Text Boxes and Buttons  Text Boxes  70  70  71  79  82  83  83  88  93  96  97  97  98  99  103  109  110   Using the   Tag  Buttons  Using HTML Events  Using Controls to Set a Pages Background Color  Using Controls to Set a Text Boxs Size  Text Areas  Password Controls  Submit and Reset Buttons  File Controls  Hidden Controls  Check Boxes  Radio Buttons  Creating Check Boxes  Creating Radio Buttons  Chapter 4   Forms: Check Boxes and Radio Buttons  Putting Check Boxes and Radio Buttons Together  The clearCheckBoxes   Function  The setCheckBox number  Function  110  114  115  120  123  126  129  134  142  146  151  152  153  157  159  163  167  168   The calculateCost   Function  Responding to the Radio Buttons in Donuts.htm       < previous page    page_viii  next page >  If you like this book, buy it!  169  170   < previous page  page_ix  next page > Page ix  Using the elements[] Arrays  Select Controls  Installing the Options in a Select Control  Selecting Multiple Items in a Select Control  Chapter 5   Keyboard and Mouse Handling  Mouser  Using Mouse Events in Netscape Navigator  Using Mouse Events in Internet Explorer  Writing Mouser.htm  Working With the mouseDown and mouseUp Events  Determining Which Browser the User Has  The Preview Page  Working With the mouseOver Event  SwapImage  Reading Keys in JavaScript  Using the keyPress Event  Reading Keys in Netscape Navigator  175  181  184  187  193  194  194  196  197  198  198  208  209  213  215  215  216   Reading Keys in Internet Explorer  Controlling a Window With Keystrokes  Designing the Help Window  Highlighting Text with the Mouse  Chapter 6   Image Handling With JavaScript  Changing Images With the Click of a Button  The Internet Explorer Structured Graphics Control  The Colors Page  Using the Image Object  Using the images[] Array  Setting Drawing Colors  Drawing Rectangles  Drawing Ovals  Drawing Pie Sections  Positioning Your Images in a Web Page  Dragging and Dropping in Internet Explorer  The mouseMove Event  Cancelling System Drag and Drop  218  221  222  225  231  232  234  236  238  241  245  246  247  247  250  253  254  256   Dragging and Dropping in Netscape Navigator  The mouseMove Event  Image Maps       < previous page    page_ix  next page >  If you like this book, buy it!  259  262  267   < previous page  page_x  next page > Page x  Chapter 7   Graphics Animation With JavaScript  JavaScript Animation: The Randomizer Example  Supporting Basic Animation  Using Internet Explorers DirectAnimation  The PixelLibrary and the MeterLibrary  Using Drawing Surfaces  Creating a Translation  Creating a Rotation  Animation Using Layers in Netscape  Animating With setInterval    Activating a Sequencer Control  The Path Control  Chapter 8   Using the Document Object in JavaScript  Scripting Object Overview  Document Object Overview  Document Properties  Animation Using the Sequencer Control: The Rotate Example  273  274  276  281  284  284  287  288  293  294  298  301  305  311  312  315  317   Document Collections  Document Collections: The ReLink Example  Document Events  Document Methods  A Self-modifying Web Page: The Rewrite Example  A Self-modifying Web Page: The Download Example  Responding to the Time of Day: The Schedule Example  Rewriting Another Frame: The Railroad Example  Writing to Documents in Other Frames  Targeting HTML: The ReHead Example  Chapter 9   JavaScript and the Window Object  Working with the Window Object  Using the open   Method  Writing to a Newly Opened Window  Window Alert Boxes  Window Confirm Boxes  Window Prompt Boxes  Dialog Boxes: the Day Example        318  320  323  324  325  328  331  338  340  346  351  352  353  359  362  364  367  370   < previous page    page_x  next page >  If you like this book, buy it!   < previous page  page_xi  next page > Page xi  Displaying a Dialog Box  Creating a Dialog Box  Using Dialog Box Arguments  Passing an Argument to a Dialog Box  Reading an Argument Passed to a Dialog Box  Chapter 10   The Navigator, Location, and History Objects  The navigator Object  Using the Navigator Object: The AppType Example  Using the Location Object  Sequence  Using the History Object  Navigating with the History Object  Retrieving Information from URL Strings  Reading Text Sent in a URL  The Next Step in Image Maps: JavaScript URLs  Using Cookies from JavaScript  Setting a Cookie  371  371  376  378  379  387  388  389  391  394  399  401  405  406  409  412  413   Reading a Cookie  Using Cookies: The Welcome Page  Changing the Status Bar Text  Chapter 11   Connecting JavaScript and Java  The Suspend Applet  Reaching Java Methods from JavaScript: The Suspend Example  Reaching an Applet From JavaScript  Passing Arguments to Java from JavaScript: The Suspend2 Example  Passing Strings from JavaScript to Java: The PassString Example  Returning Values From Java to JavaScript: The RetVal Example  Using Java Statements in JavaScript: The UseJava Example  Using the JSObject Class  Calling JavaScript to Rewrite a Window from Java: The Opener Example  414  418  423  427  428  434  436  438  444  449  454  460  465  466  467  Using the JSObject getMember   Method  Using the JSObject Call   Method       < previous page    page_xi  next page >  If you like this book, buy it!   < previous page  page_xii  next page > Page xii  Chapter 12   JavaScript and Cascading Style Sheets  JavaScript Stylesheets  JavaScript Stylesheets and Internet Explorer  Using the STYLE Attribute: The StyleAttribute Example  Styling Tags: The StyleH Example  Style Classes: The StyleUnderline Example  Setting Styles by ID: The StyleMultiple Example  Style Inheritance: The StyleDiv Example  Style Functions: The StyleFunction Example  Cascading Style Sheets  CSS Tag Styling: The StyleP Example  CSS Style Classes: The StyleClass Example  CSS Inheritance: The StyleInherit Example  Changing Styles: The StyleDynamic Example  Appendix A  Index       < previous page    473  474  475  478  480  482  484  488  490  493  494  497  499  501  505  521  page_xii  next page >  If you like this book, buy it!   < previous page  page_xiii  next page > Page xiii  Introduction  Welcome to JavaScript! In this book, Web pages will come alive with animation, check boxes, radio buttons, graphics,  styles, cookies, animated styles, images, and moreall thanks to JavaScript.  JavaScript is a lightweight scripting language that you write directly into your Web pages. Web browsers understand  the JavaScript youve placed in your pages, and they execute the statements you have written, giving you the power to  control your Web pages from behind the scenes. As well see in this book, that control can be dramatic, letting us do  everything with Web pages from handling buttons and setting colors to rewriting the Web page entirely from scratch as  the user watches.  Well get a guided tour of JavaScript in this book. Before starting that tour, lets take a moment to see whats ahead.  What's in This Book?  In this book, well see JavaScript from first to last, starting with the basics and working up through the infrastructure of  the languageup to the advanced topics, producing some truly powerful and exciting Web pages.  Well spend time first making sure we understand the internals of JavaScript before proceeding because well need a  good foundation to build on. After mastering the fundamentals, well see where the real power isinteracting with  JavaScripts environment, the Web browser itselfmaking use of what the browser has to offer us.  You might have seen some impressive pages on the Web, and youll see how to write a lot of them here. In fact, the  theme in this book is seeing JavaScript at workand seeing what it can do for youso weve filled this book with bite-sized,  fully working examples: nearly 90 of them. These examples are complete and concisenot the code fragments you see in  many books on programming, and not the convoluted code monsters you see in other books that run on for hundreds of  lines. Our examples are specifically designed to be clear and to the point.  In this book, each example is designed to illustrate one programming point that you can use, without a lot of needless  extra code. Here are some of the topics well cover in examples:  Creating Web pages that remember users by name Using cookies Using check boxes     < previous page    page_xiii  next page >  If you like this book, buy it!   < previous page  page_xiv  next page > Page xiv  Rewriting Web pages on the fly Creating graphics animation Using radio buttons Using JavaScript style sheets Initializing Web pages Using select controls Using text areas Rewriting Web pages from Java using JavaScript Displaying dialog boxes Using cascading style sheets  CSS  Connecting JavaScript to Java Controlling Java applets from JavaScript Loading graphics on a Web page in response to user requests Giving the user thumbnail previews of Web pages Rewriting Web pages in other frames Highlighting hyperlinks when the mouse moves over them Using buttons and text boxes Displaying prompt boxes Customizing Web pages according to time of day Handling the mouse Displaying alert boxes Using JavaScript from Java Creating style classes Opening new browser windows Uploading files to your server Reading keys the user types directly Controlling windows with keystrokes Displaying confirm boxes Creating and using JavaScript style functions Determining the users last Web location Using the history object to navigate back and forth Navigating the Web browser from code     < previous page    page_xiv  next page >  If you like this book, buy it!   < previous page  page_xv  next page > Page xv  Layering images on the screen Supporting dragging and dropping of Web page elements Using the Internet Explorer DirectAnimation controls Using ActiveX controls Using Netscape layers Creating scriptlets Using the sequencer ActiveX control for animation Creating JavaScript objects Using the built-in window, document, navigator, and location objects Determining which browser and version your page is running in Passing arguments to dialog boxes Creating image maps Using JavaScript: URLs  Thats just a partial list, but you can see theres a great deal of programming power coming up. Before digging into these  topics, however, we should make sure were prepared.  What You'll Need  Two main browsers support JavaScript: Netscape Navigator and Microsoft Internet Explorer  although Microsofts  version of JavaScript is really called Jscript, as well see . This book is targeted at version 4.0 of both browsers.  Until now, JavaScript books have been aimed almost exclusively at Netscape Navigator, which has been understandable  because Netscape is the company that created JavaScript in the first place. Thats no longer a viable approach, however,  because Microsoft Internet Explorer gives us literally hundreds of programming possibilities that Netscape Navigator  doesnt support  and of course the reverse is true as well .  With the introduction of such items as scriptlets, DirectAnimation, structured graphics, dynamic styles and much more,  version 4.0 of Internet Explorer cant be ignored. This is the first book that explores the two browsers on an equal  footing, finding as much JavaScript power in Internet Explorer as in Netscape Navigator.    < previous page    page_xv  next page >  If you like this book, buy it!   < previous page  page_xvi  next page > Page xvi  Youll need one or both of these browsers to get the full measure from this book; you can download Internet Explorer  from the Microsoft site, http:  www.microsoft.com, or a beta version of Netscape Navigator from the Netscape site,  http:  www.netscape.com. These downloads are free. You can also buy a release version of Netscape Navigator from  software vendors.  Besides a browser, youll need some way of creating Web pages with scripts  that it, JavaScript code in HTML    elements . Although many Web page editors are great at creating HTML, not many excel at allowing you to  edit your own scripts. Well keep our examples short, which means you can use a normal text editoreven Windows  WordPadto create Web pages.  In fact, there are now Web page editors especially built to edit JavaScript, and they can  be of considerable help.  Please note that if you use a word processor such as Microsoft Word to create Web pages, you  must save your documents as simple text, not as formatted word processor files.  JavaScript is directed at the Web, of course, so to put the results of your labors to work, you should have a Web  connectionsuch as an Internet Service Provider  ISP and some way of uploading your Web pages to that ISP. Only  when your Web pages are installed on the Web can users download and make use of them. On the other hand, both the  browsers well work with in this book can read Web pages from disk, so you can develop your pages entirely offline.  Thats really itwere ready to go. We will get started at once in Chapter 1, Welcome to JavaScript! where we begin  putting JavaScript to work.    < previous page    page_xvi  next page >  If you like this book, buy it!   < previous page  page_1  next page > Page 1  Chapter 1  Welcome to JavaScript!  Welcome to our book on JavaScript. In this book, were going to take a guided tour of what JavaScript has to offer us,  which is a great deal. JavaScript is the language you embed in your Web pages to make things happen. With JavaScript,  your Web pages come alive, responding to the user and making things happen.  For example, in this book, well see how to handle mouse clicks and mouse movements in our Web pages, highlighting  hyperlinks when the user moves the mouse over them. Well see how to make check boxes, buttons, and other HTML  controls active in our Web page. Well see how to support graphics animation, dynamic rewriting of Web pages,  jumping to new Web pages, cookies, image maps, and much more.  Many people have the idea that JavaScript is a elementary language, capable of some basic functions, but not much  more. That, however, is not true. JavaScript is a powerful language that can manipulate your Web pages and perform  tasks that you cant do in other languages, as well see. Well see how far you can go with JavaScript in this book.    < previous page    page_1  next page >  If you like this book, buy it!   < previous page  page_2  next page > Page 2  Many people also have the idea that JavaScript is a scripting version of Java, but thats also not so.  JavaScript is Not Java  The Java language and the JavaScript language are related, but the connection is not as close as you might think. Java is a product of  Sun Microsystems, and JavaScript is a product of Netscape.  NOTE: In fact, the original name for JavaScript was not JavaScript at all, but LiveScript.     You create Java applets and applications by compiling them into .class bytecode files with the Java compiler. If you want to use an applet,  you embed a reference to it in a Web page using the   HTML tag and download the .class file with the Web page. An applet  can have some space in a Web page that you set aside for it, and it can display graphics and text to the user in that space.  On the other hand, you write JavaScript directly into a Web page by using the   HTML tag, like this:           function ChangeImage        {          document.form1.IMG1.src = "gif image2.gif"      }       The JavaScript itself is downloaded with the Web page and interpreted by the Web browser. Note that this means JavaScript is browser- dependentsome browsers dont even support JavaScript yet. However, Microsofts Internet Explorer and Netscapes Navigator both support  JavaScript in their latest versions, so most people browsing the Web can handle JavaScript in some form.  Unlike Java, JavaScript doesnt work directly with graphics and text; JavaScript works with the HTML elements in a Web page. Note that  although JavaScript does not deal with graphical elements directly, Web browsers doand we can control Web browsers with JavaScript, as  well    < previous page    next page >  page_2  If you like this book, buy it!   < previous page  page_3  see. In this way, well be able to take advantage of JavaScripts considerable power.  Thats how JavaScript works, thenyou embed the JavaScript you want to use in a Web page, and its downloaded when users open the Web page  in their browsers. This picture is complicated, however, by the number of versions of JavaScript on the Web now: JavaScript 1.0, 1.1, and 1.2.  In fact, theres a version of JavaScript on the Web that, strictly speaking, isnt JavaScript at allits Microsofts JScript.  Two Browsers, Two JavaScripts  The two main Web browsers today are Netscape Navigator and Microsoft Internet Explorer. Because JavaScript is a Netscape product, you  might suspect that Microsofts version would be different, and youd be correct. When JavaScript first came outso the legend goesNetscape was  slow to supply the specification to Microsoft, and Microsoft simply reverse-engineered JavaScript, creating its own version named JScript.  For most purposes, JavaScript and JScript are close enough that you dont have to worry about the differences, but there are indeed differences   see Appendix A . Well point out differences to watch for as we progress in the book.  Netscape Navigator 2.0 was the first version to support JavaScript, and that version of JavaScript was version 1.0. Navigator 3.0 supports  JavaScript 1.1, and Navigator 4.0 supports the current version, JavaScript 1.2.  next page > Page 3  TIP: You can find Netscapes JavaScript documentationthe JavaScript handbookat:   http:  www.netscape.com eng mozilla 3.0 handbook javascript   However, the JavaScript handbook is behind the times, because it covers only JavaScript for the Netscape Navigator 3.0, and the current version is 4.0. You can find information on the most recent JavaScript versionJavaScript 1.2at: http:  developer.netscape.com library documentation communicator      The keywords used in JavaScript 1.2 appear in Table 1-1.    < previous page    page_3  If you like this book, buy it!  next page >   < previous page  page_4  next page > Page 4  Table 1-1 The JavaScript keywords. abs anchor method applets arguments property back bold caller clearTimeout comment cookie defaultSelected domain encoding filename fontcolor form property Function getMinutes getYear Hidden href index join Link object location  acos Anchor object appName Array bgColor Boolean ceil click complete cos defaultStatus elements array escape FileUpload fontsize forms function getMonth go history array hspace indexOf lastIndexOf linkColor log      Table continued on next page     < previous page    action anchors appVersion asin big border charAt close  document object  confirm current defaultValue elements property eval fixed for forward getDate getSeconds hash history object if...else isNaN lastModified links LOG10E  alert appCodeName Area atan blink break Checkbox close  window object  constructor Date description embeds array exp floor for . . . in Frame getDay getTime height host Image italics length LN10 LOG2E  alinkColor Applet arguments array atan2 blur Button checked closed continue defaultChecked document enabledPlugin fgColor focus Form object frames getHours getTimezoneOffset height hostname images javaEnabled link method LN2 lowsrc  page_4  If you like this book, buy it!  next page >   < previous page  page_5  next page > Page 5  Table 1-1 Continued. lowsrc MimeType NaN next onClick onMouseOver open  document object  parent pathname POSITIVE_INFINITY prototype reload reverse Select object setHours setTimeout split status Submit object taintEnabled Textarea toLowerCase typeof UTC void window property       < previous page    Math mimeTypes navigator Number onError onReset open  window object  parse PI pow Radio replace round selected setMinutes setYear sqrt strike substring tan this top unescape value vspace with  max min NEGATIVE_INFINITY onAbort onFocus onSelect opener parseFloat Plugin previous random reset method scroll selectedIndex setMonth sin SQRT1_2 String suffixes target title toString untaint valueOf while write  MAX_VALUE MIN_VALUE new onBlur onLoad onSubmit Option parseInt plugins prompt referrer Reset object search self setSeconds small SQRT2 sub sup Text object toGMTString toUpperCase URL var width writeln  method name next onChange onMouseOut onUnload options Password port protocol refresh return select method setDate setTime sort src submit method taint text property toLocaleString type userAgent vlinkColor window object  page_5  If you like this book, buy it!  next page >   < previous page  page_6  next page > Page 6  The current version of JScript is 3.0  for Internet Explorer 4.0 . Internet Explorer 3.0 supported JScript 1.0, Microsoft Internet  Information Server 1.0 supported JScript 2.0, and both Internet Information Server 4.0 and Internet Explorer 4.0 support JScript 3.0. The  keywords used in JScript 3.0 appear in Table 1-2.  TIP: The Microsoft JScript documentation comes in the Microsoft Internet Software Development Kitthe  Inet SDKwhich you can find at:   http:  www.microsoft.com msdn sdk inetsdk asetup first.asp     Having so many different versions of JavaScript around is a problem for many programmers, so there have been efforts to standardize  JavaScript. In fact, theres a tentative JavaScript standard now, referred to as ECMA-262, the JavaScript Language Specification. This  standard is a document of the European standards body ECMA, and its available at the Netscape Web site. As of this writing, ECMA-262  is not yet official, so we will deal with both JavaScript and JScript throughout the book.    < previous page    next page >  page_6  If you like this book, buy it!   next page > Page 7  < previous page  page_7  Table 1-2 The JScript keywords. $1 . . . $9 Properties AddFolders Method Array Object atan2 Method Attributes Property Bitwise Left Shift Operator   &lt;&lt;  Bitwise XOR Operator  ^  break Statement ceil Method Column Property  abs Method Addition Operator  +  asin Method atEnd Method AvailableSpace Property Bitwise NOT Operator  ~  Bitwise OR Operator     acos Method anchor Method Assignment Operator  =  AtEndOfLine Property big Method  blink Method BuildPath Method charAt Method Comma Operator  ,   bold Method caller Property charCodeAt Method     Single-line Comment Statement   CompareMode Property concat Method  Array   Comparison Operators concat Method String   compile Method Conditional Compilation  constructor Property  continue Statement  cos Method Data Type Conversion  CopyFolder Method CreateTextFile Method DateLastAccessed Property DateLastModified Property delete Operator dimensions Method Drive Property Drives Property Equality Operator  ==  Exists Method  DeleteFile Method Division Operator     DriveExists Method DriveType Property escape Method exp Method  Conditional  trinary  Operator   ?:  CopyFile Method CreateFolder Method DateCreated Property Delete Method Dictionary Object Drive Object Drives Collection Enumerator Object exec Method      Table continued on next page     < previous page    Add Method arguments Property atan Method AtEndOfStream Property Bitwise AND Operator  &  Bitwise Right Shift Operator   &gt;&gt;  Boolean Object @cc_on Statement Close Method  *..*   Multiline Comment  Statement  Compound Assignment Operators Conditional Compilation  Variables Copy Method  Count Property Date Object Decrement Operator   DeleteFolder Method do...while Statement DriveLetter Property E Property eval Method File Object  page_7  If you like this book, buy it!  next page >   < previous page  Table 1-2 Continued. FileExists Method FileSystemObject Object FolderExists Method for Statement Function Object  Files Collection fixed Method Folders Collection for...in Statement function Statement  GetDate Method GetExtensionName Method GetFullYear Method GetMinutes Method  GetDay Method GetFile Method GetHours Method GetMonth Method  GetTempName Method GetUTCDay Method  GetSpecialFolder Method GetUTCDate Method GetUTCMilliseconds Method GetUTCMinutes Method getVarDate Method Greater than Operator  &gt;  Greater than or equal to Operator  getYear Method   &gt;=  ignoreCase Property Inequality Operator  !=  isNaN Method item Method Key Property lastIndex Property  Regular  Expression   if...else Statement indexOf Method isFinite Method italics Method Join Method lastIndex Property RegExp       Table continued on next page     < previous page    page_8  Files Property floor Method fontcolor Method FreeSpace Property GetAbsolute-PathName  Method  getDrive Method GetFileName Method GetItem Method GetParentFolder-Name  Method  GetTime Method GetUTCFullYear Method GetUTCMonth Method Global Object Identity  Increment Operator  ++  Infinity Property IsReady Property Item Property Keys Method lastIndexOf Method  next page > Page 8  FileSystem Property Folder Object fontsize Method fromCharCode Method GetBaseName Method  getDriveName Method GetFolder Method GetMilliseconds Method GetSeconds Method  GetTimezoneOffset Method GetUTCHours Method GetUTCSeconds Method global Property @if Statement Operator  ===   index Property input Property IsRootFolder Property Items Method Labeled Statement lastMatch Property  page_8  If you like this book, buy it!  next page >   < previous page  page_9  Table 1-2 Continued. lastParen Property length Property Function    Line Property log Method Logical NOT Operator  !   MAX_VALUE Property Move Method moveNext Method NaN Property  Global   Nonidentity Operator  !==  OpenTextFile Method parseFloat Method POSITIVE_INFINITY Property Read Method Regular Expression Object  return Statement round Method  ScriptEngineMinor-Version  Function setFullYear Method setMonth Method setUTCFullYear Method      Table continued on next page     < previous page    next page > Page 9  length Property  Array  Less than or equal to Operator  &lt;=   NEGATIVE_INFINITY Property   Object Object  MIN_VALUE Property moveFirst Method  leftContext Property Less than Operator  &lt;   LN2 Property LOG10E Property Math Object  lbound Method length Property  String  link Method LOG2E Property Logical OR  Operator    min Method MoveFile Method multiline Property Multiplication Operator  *  NaN Property  Number  Number Object Operator Precedence ParentFolder Property parseInt Method pow Method ReadAll Method Regular Expression  Syntax reverse Method ScriptEngine  Function SerialNumber  Property setHours Method setSeconds Method setUTCHours  Method  rightContext Property ScriptEngine-BuildVersion  Function  @set Statement  Path Property prototype Property ReadLine Method Remove Method  setMilliseconds Method setTime Method setUTCMilli-seconds Method  LN10 Property Logical AND Operator  &&  max Method  Modulus Operator  %  MoveFolder Method Name Property new Operator   OpenAsTextStream Method parse Method PI Property random Method RegExp Object RemoveAll Method  RootFolder Property ScriptEngineMajorVersion Function  setDate Method  setMinutes Method setUTCDate Method setUTCMinutes Method  page_9  If you like this book, buy it!  next page >   < previous page  page_10  next page > Page 10  Table 1-2 Continued. setUTCMonth Method ShortName Property Skip Method small Method SQRT1_2 Property sub Method Subtraction Operator  -  test Method toGMTString Method TotalSize Property Type Property Unsigned Right Shift  &gt;&gt;&gt;  Operator  VBArray Object with Statement       < previous page    setUTCSeconds Method ShortPath Property SkipLine Method sort Method SQRT2 Property SubFolders Property sup Method TextStream Object toLocaleString Method toUpperCase Method ubound Method UTC Method void Operator Write Method  setYear Method sin Method slice Method  Array  source Property strike Method substr Method switch Statement this Statement toLowerCase Method toUTCString Method Unary Negation Operator  -  valueOf Method VolumeName Property WriteBlankLines Method  ShareName Property Size Property slice Method  String  sqrt Method String Object substring Method tan Method toArray Method toString Method typeof Operator unescape Method var Statement while Statement WriteLine Method  page_10  If you like this book, buy it!  next page >   < previous page  page_11  next page > Page 11  What Does JavaScript Look Like?  Lets see some JavaScript at work right now. Theres an easy way to do that with Netscape Navigator, and executing some JavaScript will  give us a chance to see what it looks like.  To execute a single line of JavaScript without a Web page, you simply choose Open Page from the File menu. This choice displays the  Open Page dialog box. Then type javascript: into the text box in the Open Page dialog box, and click the Open button to open a  javascript typein frame in the Navigator, as shown in Figure 1-1. Here, well type in this line of JavaScript, causing the browser to open an alert dialog box with the message Hello from  JavaScript! in it:  alert "Hello from JavaScript!" ;  Type this line into Navigator now and press the Enter key. This opens an alert box with our message in it, as shown in Figure 1-1. Now  weve executed our first line of JavaScript!  One thing we should note here is that the preceding line of JavaScript ends with a semicolon  ; , which is the standard for both Java and  JavaScript. However, JavaScript is much looser about this requirement than Java, so you can end your lines of code with or without a  semicolon.  NOTE: Although formal usage includes the semicolon at the end of JavaScript statements, we will not insist on  that usage in this book. So much JavaScript on the Internet is written without semicolons that practically  speaking, either waywith or without semicolonsis considered acceptable in all but the most formal situations.        < previous page    Figure 1-1   Typing JavaScript in directly.  page_11  If you like this book, buy it!  next page >   < previous page  page_12  next page > Page 12  Now that weve executed one line of JavaScript, lets write our first Web page using JavaScript.  Our First JavaScript Example  We could start our first JavaScript Web page by displaying a header indicating what this page is:  Then we can use JavaScript to write text directly in the Web page, which the browser will display like this:  To embed JavaScript in a Web page, we have to know how to use the   tag, so lets take a look at that tag now.    < previous page    next page >  page_12  If you like this book, buy it!   < previous page  page_13  next page > Page 13  Using the   Tag  Heres how you use the   tag in Netscape Navigator:  <SCRIPT       LANGUAGE="LanguageName"      SRC="Location">     .    .   Script statements go here...    .    .     In this case, we set the LanguageName variable to JavaScript. The SRC attribute can specify the location of a separate file that holds the  JavaScript; such files have a .js suffix, like this: calculator.js.  NOTE: To download .js files, your Web server should map .js files to the MIME type application x-javascript.     You can also indicate the version of JavaScript you want to use. To use JavaScript version 1.0  first appeared in Navigator 2.0 , use the  default language name, JavaScript:     To indicate that youre using JavaScript 1.1  which first appeared in Navigator 3.0 , use JavaScript1.1 as the scripting language:     To indicate that you want to use JavaScript 1.2  Navigator 4.0 , set the language to JavaScript1.2:    Heres how to use the   tag in Internet Explorer:  <SCRIPT      EVENT=string      FOR=string      ID=string      IN=string      LANGUAGE=JAVASCRIPT  VBSCRIPT      LIBRARY=string     < previous page    page_13  If you like this book, buy it!  next page >   < previous page  page_14  next page > Page 14      TITLE=string>    .    .   Script statements go here...    .    .     Notice that you can set the language to either JavaScript  that setting, in Internet Explorer, is the same as JScript  or  VBScript, which is Microsofts competing scripting language thats based on its Visual Basic product.  Handling Browsers That Don't Handle JavaScript  While were discussing the   tag, we should mention one more thinga lot of older browsers dont support  scripting, so all your script is in danger of appearing, uninterpreted, directly in your Web pages display in those  browsers. You can avoid this by enclosing all the script statements in an HTML comment this way:           <!  Hide the script from browsers that don't sup-     port JavaScript       .       .       .        -->        Note that we preface the end of the comment with a double slash     . This symbol indicates that this line is a JavaScript  comment  the same convention used in Java and C++  and should be ignored by JavaScript. If we omitted the   ,  JavaScript would try to interpret the HTML end-of-comment characters  >  and generate an error.  Now that weve taken a look at the   tag, lets put it to work in our example.  Writing to a Web page From JavaScript  Our goal in this example is to write this text in a Web page:    < previous page    page_14  If you like this book, buy it!  next page >   < previous page  page_15  next page > Page 15  Lets create this Web page, which well call hello.htm, now. We begin with with the   tag and set up the pages  head:         Our first JavaScript Example      .     .     .  Next, well use the   tage to set up our JavaScript area in the Web page:           Our first JavaScript Example          .    .    .          Well perform the actual writing to the Web page with one line, which looks like this  dont worry about the actual  statement at this point; were just exploring the mechanics of setting up a JavaScript-enabled Web page :    < previous page    page_15  next page >  If you like this book, buy it!   < previous page  page_16           Our first JavaScript Example          document.writeln "Hello and welcome to JavaScript!"             next page > Page 16  NOTE: In this example, were using the JavaScript document object to write our message to the Web page with  that objects writeln    that is, write line  method. Well learn all about objects and methods soon.        TIP: The writeln   method writes your data to the Web page and then skips to a new line. If you dont want to  skip to a new line, use write  .  All thats left is the  header that appears in the Web page to indicate what this page is all about:           Our first JavaScript Example          document.writeln "Hello and welcome to JavaScript!"                            Our First JavaScript Example                     < previous page    page_16  next page >   If you like this book, buy it!   < previous page  page_17  next page > Page 17  Thats all there is to it! Open Hello.htm in a Web browser, as shown in Figure 1-2. As you can see, JavaScript has  produced our message and written it directly to the Web pages HTML as text we can see. Our first example is a success.  The code for this Web page, Hello.htm, is shown in Listing 1-1.  Figure 1-2   Our first JavaScript example.  Listing 1-1  Hello.htm.          Our first JavaScript Example          document.writeln "Hello and welcome to JavaScript!"                          Our First JavaScript Example                      < previous page    page_17  next page >  If you like this book, buy it!   < previous page  page_18  next page > Page 18  As weve seen in this example, you can use JavaScript to write directly to a Web page. In fact, well be doing a lot of that  in this chapter and the next one as we get a good grounding in JavaScripts infrastructure.  However, in addition to simply putting lines of text into Web pages, JavaScript can work directly with HTML controls   text boxes, scrollbars, buttons, and so on are called controls . Before getting serious and dealing only with text output  for a while  so we can see how programming constructs like conditionals and loops work in JavaScript , lets take a  moment to get a quick overview of how JavaScript works with HTML controls in a Web page.  JavaScript Works With HTML Controls  Lets say that we have a Web page with an image and a button in it:  We can script our page to watch when the user clicks the button. When he or she does, we can load in a new image and  display it:    < previous page    next page >  page_18  If you like this book, buy it!   < previous page  page_19  next page > Page 19  In this way, well get an sneak preview of how JavaScript can work with HTML controls. Dont pay too much attention  to the details herethis is just a glimpse of whats coming after we have covered a lot of JavaScript techniques.  This new Web page will be called img.htm. First, we add the original image to our Web page, naming it IMG1 with the    Name attribute:        IMG example                  <IMG NAME = "IMG1"SRC = "gif image1.gif"WIDTH = 236        HEIGHT = 118>          .    .    .     < previous page    page_19  next page >   If you like this book, buy it!   < previous page  page_20  next page > Page 20  Next, we add the button by using the HTML   tag  well learn all about this tag in Chapters 3, Forms: Text  Boxes and Buttons, and 4, Forms: Check Boxes and Radio Buttons :        IMG example                  <IMG NAME = "IMG1"SRC = "gif image1.gif"WIDTH = 236        HEIGHT = 118>        <INPUT TYPE = BUTTON Value = "Change Image"onClick =        "ChangeImage  ">               .      .      .        IMG example                  <IMG NAME = "IMG1"SRC = "gif image1.gif"WIDTH = 236        HEIGHT = 118>        <INPUT TYPE = BUTTON Value = "Change Image"onClick =        "ChangeImage  ">   Note that weve set the buttons onClick attribute to ChangeImage  . This is the name of a JavaScript function, which  as  well see in Chapter 2, JavaScript Program Control and Objects , is a way of naming a section of JavaScript code. In this  case, we create the ChangeImage   function in a script like this:     < previous page    page_20  next page >  If you like this book, buy it!   < previous page  page_21  next page > Page 21  Finally, we load the new image into the Web page with one line of JavaScript  were resetting the SRC attribute of the  IMG1 image from image1.gif to image2.gif :                       function ChangeImage        {        .        .        .      }                IMG example                  <IMG NAME = "IMG1"SRC = "gif image1.gif"WIDTH = 236        HEIGHT = 118>        <INPUT TYPE = BUTTON Value = "Change Image"onClick =        "ChangeImage  ">                         function ChangeImage        {          document.form1.IMG1.src = "gif image2.gif"      }             < previous page    page_21  next page >  If you like this book, buy it!   < previous page  page_22  next page > Page 22  Open the Web page in a browser now, as shown in Figure 1-3. You can see the first image in our Web page.  Now click the Change Image button; when you do, the browser replaces the image with a second image, as shown in  Figure 1-4. Our Web page is a success! Now weve gotten a preview of how JavaScript works with HTML controls, so  well cover the details of this process later.  The listing for this Web page, img.htm, is shown in in Listing 1-2.  Figure 1-3   Our IMG Web page.      Figure 1-4   Clicking the button loads a new image.   < previous page    page_22  next page >  If you like this book, buy it!   < previous page  page_23  next page > Page 23  Listing 1-2  lmg.htm.       IMG example                  <IMG NAME = "IMG1" SRC = "gif image1.gif" WIDTH = 236        HEIGHT = 118>        <INPUT TYPE = BUTTON Value = "Change Image" onClick =         "ChangeImage  ">                         function ChangeImage        {          document.form1.IMG1.src = "gif image2.gif"      }         Now that weve gotten a look at what we can do in JavaScript, lets start building our JavaScript programming power by  paying attention to the details. The first detail well handle is working with data in our programs.  Handling Data in JavaScript  The attraction of computers, from a programmers point of view, is that they can manipulate data and then present that  data to the user. In the remainder of this chapter, well explore how we can manipulate data with JavaScript as we build  our understanding of the languages infastructure.    < previous page    page_23  next page >  If you like this book, buy it!   < previous page  page_24  next page > Page 24  Lets say we wanted to keep track of todays date, the 31st, in a program. We can do that with variables, which are named  storage locations in a program. In this case, we set up a variable named date in a JavaScript program:  Setting up a variable like this is called declaring the variable. Now were free to put data into that variable; we use the =  assignment operator to place the number 31 into the variable:  The date variable now holds the value 31, and we can retrieve  or change  that data simply by referring to the variable  by name.  You work on variables by using operators; for example, we just saw that you can set the data in a variable with the =  assignment operator. Heres how to use the addition operator  +  to add two numbers, 30 and 1, and place the result, 31,  into the date variable:  Using Variables       var date;             var date;    date = 31;            var date;    date = 30 + 1;       The available JavaScript operators are shown in Table 1-3. These operators cover most standard mathematical  operations.    < previous page    page_24  next page >  If you like this book, buy it!   next page > Page 25  Sym. Descr. ~ <<   Assignment Compound  Assignment   Sym. Descr. Sym. delete delete = OP=  typeof typeof  void  void  < previous page  page_25  Table 1-3 The JavaScript operators. Computational Unary negation Increment  ++   Logical Bitwise  Logical NOT Less than  Greater than  Decrement  Multiplication  Division  Modulo arithmetic  Addition Subtraction  *     % + -  Assign. Misc. Descr. Bitwise NOT ! Bitwise Left  < Shift  Bitwise Right  Shift  Unsigned Right  Shift Bitwise AND   >=  >  Bitwise XOR  Bitwise OR   >>   >>>   &   ^   Less than or equal to  <=  Greater than or  equal to  Equality Inequality Logical AND Logical OR Conditional  trinary  Comma Identity Nonidentity  == != &&  ?:  , === !==        < previous page    page_25  If you like this book, buy it!  next page >   < previous page  page_26  next page > Page 26  We can also add the data in variables with the + operator. The following code, for example, shows how we declare two variables, number  30 and number1, place the numbers 30 and 1 in those variables, and add the values in those variables, placing the result in the date  variable:       var date;  var number30, number1;    number30 = 30;  number1 = 1;    date = number30 + number1;            var date = 31;      <            var number30, number1;    number30 = 30;  number1 = 1;    date = number30 + number1;       TIP: Note that here we declare two variables, number30 and number1, on the same line. JavaScript allows  you to declare multiple variables on the same line in this wayjust separate them with a comma.     You can place a value in a variable when you declare it, like this:  In fact, you dont even have to declare a variable to be able to use it in JavaScript. Here, for example, we declare the variable named date  simply by using itthe first time you use an undeclared variable, JavaScript declares it for you:  Theres a reason you might want to stick to a policy of declaring all variables before using them, however; it has to do with the variables _- 1scope_-0.    < previous page    next page >  page_26  If you like this book, buy it!   < previous page  page_27  next page > Page 27  Variable Scope  The scope of a variable in a JavaScript program is made up of the parts of the program in which the variable is  visiblethat is, you can refer to and use it. If you declare a variable in a script but outside any code block  any code set  off by the { and } characters, as well see later , then that variable is global, which means you can refer to it anywhere in  the program.  In fact, you can declare a variable in a script in the head of a page and another variable in a script in the body of the  page. If both are global variables, you can refer to both variables anywhere in your scripts, like this:               var date = 31;                 var year = 1998;    date = 1;             date is global.            However, if you declare variables in a code block  that is, within curly braces , then that variable is local to that code  block, which means you can refer to it only in that code block or in code blocks that the present code block encloses.  Keeping variables local is very useful for restricting what goes in the global variable spaceif you have dozens of global  variables, you might unintentionally end up with two that have the same name, and theyll conflict with one another. If  you restrict your variables to local scope, you wont have to worry about them getting set inadvertently in other parts of  the program.    < previous page    page_27  next page >  If you like this book, buy it!   < previous page  page_28  next page > Page 28  TIP: In fact, one of the big advantages of object-oriented programming  OOP  is that you can make data  local in new ways, which is especially useful in longer programs to keep the global variable space cleaner.  When you use a variable without first declaring it, JavaScript makes that variable a global variable, which might not be what you  intended. For that reason, its usually best to make it your practice to declare variables before using themthat way, if you want to make a  variable local, you wont end up with a global variable by mistake.  JavaScript is call a loosely typed language, which means you can use the var keyword to declare variables of all kinds of data types. For  example, you can declare a variable like this in a script:     Variable Types       var date = 31;       Now the date variable holds the value 31. However, you can switch the type of data in that variable in the program, if you like. Here, we  place a text stringToday is the 31stinto the date variable:       var date = 31;  date = "Today is the 31st";       <       You cant do this in a strongly typed language like Java. There, you have to declare variables types  such as integer or floating point  when  you declare the variable. In JavaScript, we can simply use var to declare all our variables, no matter what were going to place in those  variables.  The types of data you can place in a variable in JavaScript 1.2 are number, Boolean, string, function, and object. A number is just as weve  seenvalues like 31 or 3.14159. Boolean variables take values of true or false and are usually flags to keep track of conditions, such as the  variable dataIsReady. Strings are enclosed in quotation marks in JavaScript, such as Here is the text. Well cover functions and objects in  the next chapter.    < previous page    next page >  page_28  If you like this book, buy it!   < previous page  page_29  next page > Page 29  JScript recognizes six types of data: numbers, strings, objects, Booleans, null, and undefined. The null data type simply  holds a value of 0, and the undefined data type is a special one that indicates a variable has not yet been set to any  particular value.  Variable Naming Conventions  JavaScript programmers usually follow the Java naming convention for variables. If you have a variable name that is  one word, like date, the convention is to make it all lowercase letters. If you have a variable made of two or more  words, like TheData, the convention is to capitalize only the initial letter of the second and subsequent words, like this:  theData, theOtherData, and theDataThatGoesHere.  Now that weve gotten a look at variables in theory, lets put what weve seen to work. Well do that in an example named  var.htm next.  The var Example  Our first variable example is a very simple onewell just declare a variable, place a number in it, and display the number  in a Web page after reading it back from the variable. This process will make what weve been talking about more  concrete and show how we can display numeric values.  Well display a header in our Web page to show what this example is all about:     < previous page    page_29  next page >  If you like this book, buy it!   < previous page  page_30  next page > Page 30  Well also declare a variable named number, place a value of 4 in it, and then display that value this way:  Lets create this Web page, var.htm, now. We start the usual way, with the   tag, a title in the head section, and  a header showing what the page is all about:               A var Statement Example                         A var Statement Example.                             < previous page    Next, we add the   section, declare our number variable, and place a value of 4 in that variable:  page_30  next page >  If you like this book, buy it!   < previous page  page_31  next page > Page 31     A var Statement Example            var number = 4    .    .    .                       A var Statement Example.                  Now were ready to display the value in the variable in our Web page, but how do we do that?  Displaying the Value in a Variable So far, weve used document.writeln   to display text in JavaScript, but the value in our variable is a number.  How do we display that? It turns out that we can display the value in a variable with document.writeln   simply by referring to it by  namein code, that looks like this:               A var Statement Example          var number = 4    document.writeln "The number is " +  number + "."      < previous page    page_31  next page >  If you like this book, buy it!   < previous page  page_32  next page > Page 32                       A var Statement Example.                  TIP: Note that strings, like other JavaScript data types, can use the + operator. For example, you can create  the text Happy New Year! this way: var HNY = Happy + New + Year! ;.     Open the var.htm example now, as shown in Figure 1-5. As you can see, weve placed data into a variable and read that data again,  displaying it in our Web page. Now were using variables in JavaScript.  Listing 1-3 shows the code for this Web page.  Our var example is fine as far as it goes, but its not very useful. Its important to be able to not only store and display data in a program,  but also work with that data, so well start working with our data next.     < previous page    Figure 1-5   The var example uses variables.  page_32  If you like this book, buy it!  next page >   next page > Page 33  < previous page  page_33  Listing 1-3  Var.htm.              A var Statement Example          var number = 4    document.writeln "The number is " +  number + "."                            A var Statement Example.                  Controlling Your Program: The if Statement  The first step in working with our data will be to examine that data and take action based on its value. Well examine the  value of our data first with the JavaScript if statement.  The if statement lets you test a certain condition like this:  if conditional {     .     .     .  code block     .     .     .  }     < previous page    page_33  next page >  If you like this book, buy it!   < previous page  page_34  next page > Page 34  Here, conditional is a JavaScript statement or Boolean variable that can be true or false. Such statements usually use the logical operators  that were shown in Table 1-3. For example, if you want to check whether the value in the variable named number is equal to 4, you can  test it by using the equality logical operator: if number == 4 .  TIP: Notice that to test whether the number variable was equal to 4, we used the equality operator, if   number == 4 , not the assignment operator, if  number = 4 . The latter expression is a mistake, although  its a common one. Make sure to use == and not = when you want to test for equality.  If the conditional expression is true, then the code in the code block that follows the if statement is executed; otherwise, its not. This gives  us control over the flow of our program, so we can make decisions based on our data. Lets take a look at an example using the if  statement now.     The if Example  Well start our if example Web page with a header indicating which example it is. Then we will set up our variable named number as we  did in the previous example, and place a value of 4 in it. Well use a series of if statements to test the value in the number variable, like this:  if number == 1 {      document.writeln "The number is 1."   }  if number == 2 {      document.writeln "The number is 2."   }  if number == 3 {      document.writeln "The number is 3."   }  if number == 4 {      document.writeln "The number is 4."   }  Only one of these if statements will execute its code block, and well see the result in our Web page:    < previous page    page_34  If you like this book, buy it!  next page >   < previous page  page_35  next page > Page 35  Lets put this Web page together now. We start with the page itself and the header indicating which example it is:               An if Statement Example                       An if Statement Example.                Next, we add the   section where we declare our variable and check the value in that variable with a series of  if statements:              An if Statement Example          var number = 4     < previous page  page_35  next page >      If you like this book, buy it!   < previous page  page_36  next page > Page 36  if number == 1 {      document.writeln "The number is 1."   }  if number == 2 {      document.writeln "The number is 2."   }  if number == 3 {      document.writeln "The number is 3."   }  if number == 4 {      document.writeln "The number is 4."   }  if number == 5 {      document.writeln "The number is 5."   }  if number == 6 {      document.writeln "The number is 6."   }  if number == 7 {      document.writeln "The number is 7."   }                         An if Statement Example.                Only one of the preceding if statements will execute its code blockthe one that tests if number == 4. Weve used a lot of if statements here just to check whether the value in the number variable is equal to 4. However, we  can use ranges of possible values to cut this process down to sizefor example, we can check whether the value in  number is less than 3 or greater than or equal to 3 by using the less than logical operator:                  < previous page    page_36  next page >  If you like this book, buy it!   < previous page  page_37  next page > Page 37  An if Statement Example             var number = 4    if number == 1 {      document.writeln "The number is 1."   }  if number == 2 {      document.writeln "The number is 2."   }  if number == 3 {      document.writeln "The number is 3."   }  if number == 4 {      document.writeln "The number is 4."   }  if number == 5 {      document.writeln "The number is 5."   }  if number == 6 {      document.writeln "The number is 6."   }  if number == 7 {      document.writeln "The number is 7."   }      if number < 3 {      document.writeln "The number is less than 3."                             An if Statement Example.                The conditional expression number < 3 is true if the value in number is less than 3. Other common logical operators  include the greater than operator  number > 3 , the less than or equal to operator  number <= 3 , and the greater  than or equal to operator  number >= 3 .    < previous page  next page >  page_37      If you like this book, buy it!   < previous page  page_38  next page > Page 38  TIP: Note that now that our script is printing multiple lines in the Web page, we use   tags to make  sure the Web browser doesnt automatically wrap those lines together.  So far, then, weve checked whether the value in number is less than 3, but what if its greater than 3? As it stands, our program wont report  that.     Using an else Statement  We havent used the second part of the if statement yet, but we will now. If the conditional in the if statement isnt true, the if statements  code block isnt executed. However, we can follow the if statement with an else statement, and that statements code block is executed if  the conditional is false. For example, if the number is not less than 3, we can still execute the code in an else statement as shown in the  following code, where we indicate that the value is greater than or equal to 3:               An if Statement Example             var number = 4    if number == 1 {      document.writeln "The number is 1."           .          .          .  if number < 3 {      document.writeln "The number is less than 3."   }else{      document.writeln "The number is greater than or equal to 3."   }                  < previous page    page_38  If you like this book, buy it!  next page >   < previous page  page_39  next page > Page 39             An if Statement Example.                Now well report on the number this way in our Web page:  Thats the general way to use an if statementwith an if statement and an  optional  else statement:  if conditional {     .     .     .  code block     .     .     .  }  else{     .     .     .  code block     .     .     .  }  Open this Web page now, as shown in Figure 1-6. As you can see, weve checked the value in our variable two ways  with if statements.  The code for this Web page, if.htm, is shown in Listing 1-4.      < previous page    page_39  next page >  If you like this book, buy it!   < previous page  page_40  next page > Page 40  Besides the if statement, theres another conditional statement well take a look at now: the switch statement.  Figure 1-6   The if Web page uses the if statement.  Listing 1-4  If.htm.              An if Statement Example             var number = 4    if number == 1 {      document.writeln "The number is 1."   }  if number == 2 {      document.writeln "The number is 2."   }  if number == 3 {      document.writeln "The number is 3."   }  if number == 4 {      document.writeln "The number is 4."   }  if number == 5 {      document.writeln "The number is 5."   }  if number == 6 {        document.writeln "The number is 6."     < previous page    page_40  If you like this book, buy it!  next page >   < previous page  page_41  next page > Page 41  }  if number == 7 {      document.writeln "The number is 7."   }      if number < 3 {      document.writeln "The number is less than 3."   }else{      document.writeln "The number is greater than or equal       to 3."   }                            An if Statement Example.                Controlling Your Program: The switch Statement  JavaScript switch statements work much like if statements because you use them to determine what statements are  executed after performing an equality test. Heres what a generic switch statement looks like:  switch test {        case value1:            .            .            .          statements            .            .            .          break;     < previous page    page_41  next page >  If you like this book, buy it!   < previous page  page_42  next page > Page 42      case value1:            .            .            .          statements            .            .            .          break;      case value1:            .            .            .          statements            .            .            .          break;      default:            .            .            .          statements            .            .            .          break;      }  You place a variable or expression in the switch statementwe used the variable named testand if the value is equal to the value in one of  the case statements  value1, value2, and so on in the preceding example , the statements following that case statement are executed, up to  the break statement. If no case matches the value in the variable were looking at, the  optional  default statement is executed.  TIP: Note that if you omit the break statement at the end of a switch case, execution simply keeps going with  the code in the next case statement.     Lets create a switch statement example now. Well place a header in our Web page as usual. Then well examine our number variable using  a switch statement, displaying the value in the number variable this way:    < previous page    next page >  page_42  If you like this book, buy it!   < previous page  page_43  next page > Page 43  Lets write this example, switch.htm, now. We start by declaring our variable, number, and setting up the switch  statement:               A switch Statement Example            var number = 4    switch number {          .          .          .  First, well check whether the number is 1; if so, we display that fact:               A switch Statement Example            var number = 4    switch number {      case 1:          document.writeln "The number is 1."           break      < previous page    page_43  next page >  If you like this book, buy it!   < previous page  page_44  next page > Page 44            .            .            . Then we add the other case statements this way:               A switch Statement Example            var number = 4    switch number {      case 1:          document.writeln "The number is 1."           break      case 2:          document.writeln "The number is 2."           break      case 3:          document.writeln "The number is 3."           break      case 4:          document.writeln "The number is 4."           break      case 5:          document.writeln "The number is 5."           break      case 6:          document.writeln "The number is 6."           break      case 7:          document.writeln "The number is 7."           break      default:          document.writeln "The number is not in the range       1-7."           break  }                       < previous page    page_44  next page >   If you like this book, buy it!   < previous page  page_45  next page > Page 45     A switch Statement Example.                  Thats itnow open this page, as shown in Figure 1-7. As you can see, the only case statement that was executed was the  one comparing the number variable to 4. Our switch statement example is a success!  The code for this page, switch.htm, is shown in Listing 1-5.  Figure 1-7   The switch statement web page.  Listing 1-5  Switch.htm.                A switch Statement Example          var number = 4    switch number {      case 1:          document.writeln "The number is 1."           break      case 2:    < previous page    page_45  If you like this book, buy it!  next page >   < previous page  page_46  next page > Page 46  Listing 1-5  Continued.         document.writeln "The number is 2."           break      case 3:          document.writeln "The number is 3."           break      case 4:          document.writeln "The number is 4."           break      case 5:          document.writeln "The number is 5."           break      case 6:          document.writeln "The number is 6."           break      case 7:          document.writeln "The number is 7."           break      default:          document.writeln "The number is not in the range       1-7."           break  }                         A switch Statement Example.                  Conclusion  Thats it for our first chapter. Weve gotten a start in JavaScript by executing a single line of JavaScript, creating our first  JavaScript example, getting a preview of how JavaScript works with HTML elements, seeing how to store our data in  variables, and learning how to use the if and switch statements to work with our data.  Well continue our JavaScript exploration in the next chapter, when we start working with more powerful JavaScript:  loops, functions, objects, and more. Lets turn to that chapter now.    < previous page    page_46  next page >  If you like this book, buy it!   < previous page  page_47  next page > Page 47  Chapter 2  JavaScript Program Control and Objects  In this chapter, well dig deep into JavaScripts infrastructure, seeing how to control the operation of our programs in  detail. Theres a great deal to cover in this chapter: learning about new statements like the for, while, and do-while  statements; using and creating JavaScript functions; passing arguments to functions; reading values returned from  functions; working with JavaScript objects; creating custom objects; and even working with Internet Explorer scriptlets,  which let scripts act like Web page objects.  Theres a lot of information in this chapter, so well start at once by taking a look at a popular JavaScript statement: the  for statement. Its one of the JavaScript statements that let you handle loops. Loop statements let you handle large  amounts of data by working on each piece of data, item by item, as well see.    < previous page    page_47  next page >  If you like this book, buy it!   < previous page  page_48  next page > Page 48  Program Control: The for Statement  The first loop statement well look at is the for statement, which generally looks like this:  for  initialization; test; increment      statement  Here, initialization is an initialization statement that usually starts a loop index of some sort; test is a conditional  statement involving the loop index that, while true, permits the loop to continue; and increment is a JavaScript statement  executed after each loop  the increment statement is usually used to incrementor decrementthe loop index .  Although only one statement is listed in the preceding code example for the body of the loop, such a statement can be a  compound statement made up of many lines of JavaScript. A compound statement is a code block surrounded by curly  braces  { and } .  Lets see an example of a for loop to make this new programming construction clear. Well create a new Web page called  for.htm. In the scripting section of this Web page, well set up a variable named number and set it equal to 4. Then well  loop repeatedly until the loop indexa variable well increment each time through the loopis equal to the value in the  number variable, at which point well display that result.  Well start the for example by setting up our number variable and setting it equal to 4:               A for Statement Example            var number = 4       .       .       .     < previous page    page_48  next page >  If you like this book, buy it!   < previous page  page_49  next page > Page 49  NOTE: As we develop our JavaScript code, its worth repeating our policy on semicolons. Although the formal  JavaScript specification originally required a semicolon at the end of each statment, no popular Web browser now  requires those semicolons. As a result, its become as acceptable not to use semicolons as to use them. In fact,  these terminating semicolons often give beginning programmers some trouble, and for that reason, we will not  require them in this book.  If, however, you have no trouble remembering to use a semicolon at the end of each  statement and prefer to do so, by all means use them in your code.     Next, we set up our for loop. Well declare a loop index variable named loop_index. Each time we loop, well increment loop_index  by 1 and compare it to the value in number. Well loop while the loop_index is less than or equal to 7. Heres how we set up our for  loop, declare the loop_index variable, loop while loop_index is less than or equal to 7, and increment loop_index at the end of  each loop by using the JavaScript increment operator  ++ :               A for Statement Example            var number = 4    for var loop_index = 0; loop_index <= 7; loop_index++ {     .     .     .  }  NOTE: We declared the loop_index variable in the for statement itself to make loop_index local to the  body of the for loop, but you can declare loop_ index outside the loop if you like. In fact, because JavaScript  automatically declares variables, you dont need to declare loop_index at all; you can simply use it  but that  would make loop_index a global, not local, variable .       < previous page    page_49  If you like this book, buy it!  next page >   < previous page  page_50  next page > Page 50  TIP: The increment operator  ++  and the decrement operator    are popular ones. These operators can  work as prefix or postfix operators. A prefix operator looks like this: x = ++y. Here, the value in y is  incremented and then assigned to x. On the other hand, a postfix operator, such as x = y++, is applied only  after the rest of the expression is evaluated. In this case, x is assigned the original value in y, and then y is  incremented.     We can place an if statement in the loops body this way, where we check to see whether the value in the number variable is equal to  the loop_index, and if so, we display that fact in the Web page:               A for Statement Example            var number = 4    for var loop_index = 0; loop_index <= 7; loop_index++ {      if number == loop_index {          document.writeln "The number is " + loop_index +            "."       }  }                         A for Statement Example.                  Now open this page, as shown in Figure 2-1. As you can see, weve looped over the possible values of the number variable and displayed  the value when the loop index is equal to it. Our for loop example is a success! The code for this Web page, for.htm, is shown in Listing 2-1.    < previous page    page_50  next page >  If you like this book, buy it!   < previous page  page_51  next page > Page 51  Our for statement example uses a for loop.  Figure 2-1   Listing 2-1  For.htm.              A for Statement Example          var number = 4    for var loop_index = 0; loop_index <= 7; loop_index++ {      if number == loop_index {        document.writeln "The number is " + loop_index +       "."       }  }                         A for Statement Example.                      < previous page    page_51  next page >  If you like this book, buy it!   < previous page  page_52  next page > Page 52  There are even more powerful ways of controlling loopswe can break a loop if we need to.  Using Breaks  You can use the break statement to end a loop, if necessary  execution then continues with the line of code following the loop . For  example, we can test a loop_index repeatedly, breaking the loop if that index gets too large:  for  var loop_index = 0; loop_index < 1000000; loop_       index++ {      if loop_index > 10000 {          break      }  }  NOTE: The break statement breaks only the current loop; if the current loop is nested inside another loop, that  outer loop still continues.     Using Labeled Breaks  In JavaScript 1.2, you can use labeled breaks, which let you label the loop you want to break. For example, if we have a loop within a  loop, we can break both loops if we label the outer loop  here, weve used the label OuterLoop :  OuterLoop:  for  var loop_index1 = 0; loop_index1 < 1000000; loop_       index1++ {      for  var loop_index2 = 0; loop_index2 < 1000000;       loop_index2++ {          if loop_index > 10000 {              break OuterLoop           }      }  }  Weve gotten an introduction to loops, particularly the for loop. Well take a look at another type of JavaScript loop nextthe while loop.    < previous page    page_52  next page >  If you like this book, buy it!   < previous page  page_53  next page > Page 53  Program Control: The while Statement  Weve seen that loops like the for loop use a test expression and keep looping while that expression is true. The while  statement works in much the same way; this loop keeps executing its statement  which might hold many lines of  JavaScript  while a particular expression is true:  while  expression      statement  Lets take a look at a while loop example; we can call this new Web page while.htm. Well keep looping and  incrementing a loop index until that loop index equals the value in our number variable. Because the while loop will  keep executing while the loop index doesnt equal the value in number, we can report on the comparison each time  through the loop.  The while loop will terminate when the loop index equals the value in number, so well add code after the while loop to  display the value in the loop index, which now equals the value of the number weve been looking at:  Lets put this to work. We start by declaring our number variable and our loop index:    < previous page    page_53  If you like this book, buy it!  next page >   < previous page  page_54  next page > Page 54  NOTE: The JavaScript while loop doesnt require a loop index at all, although we use one in this example. You can  test any expression that evaluates to true or false in a while loop.     Now we set up the while loop. In this loop, we want to keep looping while the loop index is not equal to the value in the variable number,  so we use the 1inequality operator, !=, which evaluates to true as long as the two elements its comparing are not equal:               A while Statement Example               var number = 4  var loop_index = 0           .           .           .               A while Statement Example               var number = 4  var loop_index = 0    while loop_index != number {     .     .     .  }     < previous page    page_54  If you like this book, buy it!  next page >   < previous page  page_55  next page > Page 55  TIP: You can use the logical Not operator  !  to flip the logical value of an expression. For example, if  dataIsReady is a Boolean variable whose value is true  set this way: var dataIsReady = true , then this  expression is false:  !dataIsReady     Each time through the loop, well report that the loop index is not equal to the number variable. Then we increment the loop index for the  next time through the while loop:  At the conclusion of the while loop, loop_index is equal to the value in number, so we display that value this way:                 A while Statement Example                   var number = 4   var loop_index = 0     while loop_index != number {            document.writeln "The number is not " + loop_         index + "."             loop_index++    }               A while Statement Example               var number = 4  var loop_index = 0    while loop_index != number {           document.writeln "The number is not " + loop_         index + "."            loop_index++  }     < previous page    page_55  If you like this book, buy it!  next page >   < previous page  page_56  next page > Page 56  document.writeln "However, the number  is  " +       loop_index + "."                             A while Statement Example.                  TIP: We can display our text in italics by using the   tags when we print out that text onto the Web page.  In the same way, you can print any other HTML tag by using document.writeln  .     Thats itnow open the Web page. As shown in Figure 2-2, the while loop executes until the loop index is incremented to the value in the  number variable, at which point the while loop stops and we report that value. Our while statement example is working! Listing 2-2 shows the code for this page, while.htm.     < previous page    Figure 2-2   Our while example uses a while loop.  page_56  If you like this book, buy it!  next page >   < previous page  page_57  next page > Page 57  Listing 2-2  While.htm.              A while Statement Example             var number = 4  var loop_index = 0    while loop_index != number {           document.writeln "The number is not " + loop_         index + "."            loop_index++  }    document.writeln "However, the number  is  " +         loop_index + "."                             A while Statement Example.                 Theres another type of while statementthe do-while statement, which well explain next.  Program Control: The do-while Statement  The do-while statement is much like the while statement, but theres one crucial differencethe test expression is at the  end of the loop, not at the beginning, like this:    < previous page    page_57  next page >  If you like this book, buy it!   < previous page  page_58  next page > Page 58  do     statement  while  expression ;  The structure of the do-while loopwith the test expression at the endensures that  unlike the while loop  the loops  statement is executed at least once. This method is useful if the expression youre going to test depends on some code  executed in the body of the loop  which wouldnt be executed before the expression test was made in a while loop .  In fact, we can perform the same set of operations as we did with the while loop, presenting the same result.  In this case, we just need to replace the while loop from the previous example with a do-while loop, like this:               A do-while Statement Example             var number = 4  var loop_index = 0    do{           document.writeln "The number is not " + loop_         index + "."            loop_index++  }while loop_index != number     document.writeln "However, the number  is  " +        loop_index + "."                             A do-while Statement Example.           < previous page    page_58  next page >  If you like this book, buy it!   < previous page  page_59  next page > Page 59          Thats all there is to itnow open the page, as shown in Figure 2-3. You can see the same result as in the previous  examplethe program keeps looping until the loop index is equal to the value in the number variable. The code for this page, do-while.htm, is shown in Listing 2-3.  Our do-while example uses a do-while loop.  Figure 2-3   Listing 2-3  Do-while.htm.              A do-while Statement Example             var number = 4  var loop_index = 0    do{        document.writeln "The number is not " + loop_      index + "."         loop_index++  }while loop_index != number        < previous page    page_59  next page >  If you like this book, buy it!   < previous page  page_60  next page > Page 60  Listing 2-3  Continued. document.writeln "However, the number  is  " +       loop_index + "."                             A do-while Statement Example.                 That completes our look at loops for the moment. Now that weve gained some JavaScript power, were ready to work  with the next step up in JavaScript programming: functions.  All About JavaScript Functions  JavaScript functions are all about compartmentalizing your code into easy-to-handle chunks. For example, you might  have 50 lines of JavaScript designed to capitalize text strings. If you need to use this code a dozen times in a program,  you could insert it each time, but that would make your program 600 lines longer.  A far better idea is to place the 50 lines of code into a function that you can then callcalling a function means the code in  that function is executed. By using a function, you add only the code needed to create the functionthe 50 lines of code  we mentioned, for exampleand the dozen one-line calls to the function. Well see how this works in a moment.  Heres the general form of a function in JavaScript  the square braces, [ and ], indicate an optional value :  function functionName [argument1 [, argument2 [, ...        argumentn]]]   {     < previous page    page_60  next page >  If you like this book, buy it!   < previous page  page_61  next page > Page 61     statements  }  adder addMe1, addMe2   You declare a function by using a function statement, indicating the functions name and the arguments that function can take. Arguments  are variables or other items  such as objects, which are coming up later in this chapter  that the function can operate on. For example, if  we had a function named adder   that adds two values, we can pass the values to add to adder   this way:  Functions can also return values. For example, the adder   function should return the sum of the two arguments passed to it, so we can  add two values like this:  var addMe1, addMe2, sum    addMe1 = 1  addMe2 = 3    sum = adder addMe1, addMe2   The preceding code is functionally the same as this:  var addMe1, addMe2, sum    addMe1 = 1  addMe2 = 3    sum = addMe1 + addMe2  NOTE: The code in functions isnt executed until the function is called, which means that, unlike the code weve  developed so far, the code in the functions we write isnt executed as soon as the page is loaded into the Web  browser. There are, however, special functions you can set up to run as soon as the page is loaded, as well see.    Lets put together an example, function.htm, using functions to make it clearer. In this case, well create a function that returns a  particular value: 4. Every time we call this function, it will return 4. We can report the value we get when we call this function in the Web  page, as shown here:    < previous page    next page >  page_61  If you like this book, buy it!   < previous page  page_62  next page > Page 62  Lets put this to work now in function.htm. Here, well set up a function named getNumber   that returns a value  of 4, so we call that function when we display our message in the Web page:               A function Example                document.writeln "The number is " + getNumber   +      "."          .         .         .  Now well set up the getNumber   function:               A function Example             < previous page  page_62  next page >      If you like this book, buy it!   < previous page  page_63  next page > Page 63  The code in this function is executed when we call the function; in this case, we simply want to return a value of 4. You  return values from a function with the return   statement, as follows:    document.writeln "The number is " + getNumber   +      "."       function getNumber    {    .    .    .  }                  A function Example                document.writeln "The number is " + getNumber   +       "."       function getNumber    {      return 4   }                       A function Example.                   Now open function.htm, as shown in Figure 2-4. As you can see, the getNumber   function did indeed return a  value of 4. Listing 2-4 shows the code for this page, function.htm.      < previous page    page_63  next page >  If you like this book, buy it!   < previous page  page_64  next page > Page 64  Figure 2-4   The function example calls a function.  Listing 2-4  Function.htm.              A function Example                document.writeln "The number is " + getNumber   +        "."       function getNumber    {    return 4   }                       A function Example.                      < previous page    page_64  next page >  If you like this book, buy it!   < previous page  next page > Page 65 Our first function example was a simple onegetNumber   took no arguments and simply returned a value of 4. Lets  see how to handle arguments passed to functions next.  page_65  Handling Arguments in Functions In this next example, well pass two arguments to the getNumber   function and place code in that function to add the  two arguments and return the sum. We can call this new example args.htm. Visually, the result will be the same as before, but in this case the getNumber   function takes two arguments and  adds them, returning a sum that we can display. In this Web page, args.htm, we call getNumber   and pass two values  1 and 3  to that function:               A function Argument Example                document.writeln "The number is " + getNumber 1, 3  +      "."          .         .         .  In the getNumber   function, we can read the values passed to us and add them. Lets take a look at that process now. Handling Arguments in Functions  Handling arguments in a function is easy. You just give a name to the arguments passed to the function in the function  declarationhere, well call those arguments a and b:                  < previous page    page_65  next page >  If you like this book, buy it!   < previous page  page_66  next page > Page 66  Now were free to refer to those arguments as a and b in the body of the function. In particular, we want to add the  values in a and b and return their sum, which we do like this:  A function Argument Example                document.writeln "The number is " + getNumber 1, 3  +       "."       function getNumber a, b   {    .    .    .  }                  A function Argument Example                document.writeln "The number is " + getNumber 1, 3  +       "."       function getNumber a, b   {     return a + b   }                  A function Argument Example.             Open args.htm now, as shown in Figure 2-5. The getNumber   function got the values its supposed to work with1  and 3and added those    < previous page  next page >  page_66      If you like this book, buy it!   < previous page  page_67  next page > Page 67  values, displaying the result in the Web page. Now were able to pass arguments to and return values from JavaScript  functions. The code for this page, Args.htm, is shown in Listing 2-5.  The Web page includes a function that adds the arguments passed to it.  Figure 2-5   Listing 2-5  Args.htm.              A function Argument Example                document.writeln "The number is " + getNumber 1, 3  +       "."       function getNumber a, b   {     return a + b   }                    A function Argument Example.               < previous page    page_67  next page >  If you like this book, buy it!   < previous page  page_68  next page > Page 68  TIP: In JavaScript, you can actually call a function with fewer arguments than youve declared the function  with. Thats OK as long as you dont try to read values from arguments that werent passed to you  theyll  return a value of undefined, but you can use the new typeOf operator to check whether youre dealing with  such a value .        TIP: You can also pass more arguments to a function than the function is set up to take. To read such  arguments, you can use the arguments array, which is available in every function  well see how arrays work  later in this chapter . The first argument passed to the function is the first entry in the arguments array, and  you refer to it as functionName.arguments[0], the second argument as functionName. arguments[1], and so on  using square brackets is how you use arrays, as well see soon .  Now that weve worked our way though handling functions in JavaScript, were ready to step up to the next level: objects, which are  central to JavaScript programming.  You might notice that the heading for this section is Object-Based Programming in JavaScript, notObject-Oriented Programming in  JavaScript. JavaScript doesnt support true object-oriented programming  OOP  of the Java and C++ kind. However, JavaScript does use  and rely on objects, so JavaScript is usually referred to as object-based, not object-oriented.  Object-Based Programming in JavaScript  So whats an object? Well look into that now.  What's an Object?  The idea of objects in programming really gained popularity with C++. The C language had been in wide use for a long time and had  reached several    < previous page    page_68  next page >  If you like this book, buy it!   < previous page  page_69  next page > Page 69  significant limitations when it came to working with larger programs.  In small programs, you can easily manage a few functions and variables in the global space. However, when the number  of functions and variables grows in larger programs with thousands of lines, the global space can become unwieldy.  Imagine trying to work with hundreds of data items over hundreds of pages of code and trying to keep them all in mind  as you program.  As programs got bigger and bigger, it became important to be able to divide them up conceptually into objects rather  than variables and functions. An object is a grouping of both variables and functions constructed in such a way that all  the functions and data internal to that object stay internal and are not visible outside that object.  Creating self-contained objects was a great advance in programming because it allows you to divide a program naturally  into parts that act more autonomously, which is the way we think of parts of a program anyway  for example, this part  handles the screen display, this part handles the data processing, and so on .  You can see how useful this approach is if you consider a machine like a refrigerator. You dont want to be bothered by  the process of temperature regulation and pump activation yourselfyou want the refrigerator to handle all that. Because  the refrigerator does handle all data and functions internally, you can think of it handily as one useful object: a  refrigerator, instead of a collection of hundreds of separate items. This conceptualization technique made handling  larger programs much easier.  For example, imagine that part of a program handled display on the screen. That process could be very complex,  involving setting screen registers, checking scan modes, and so on, but theres no reason the rest of the program needs to  know about all that. Instead, you could wrap all those functions and data togethera process known as encapsulationinto  a single object named, say, display.  This object would have both internal data and functions and external data and functions. The internal data and  functionsreferred to as privatehandle the details of working with the screen, and the externally available data and  functionsreferred to as publiclet the rest of the program send data to the screen easily. For example, one such public  function could be called writeln  , which writes a line of text on the screen. To write such a line of text, then, you  could use the display object like this:  display.writeln "Hello from JavaScript!"      < previous page    page_69  next page >  If you like this book, buy it!   < previous page  page_70  next page > Page 70  Thats the way you use an objects public functions, with the dot  .  operator. In fact, weve already seen an object that  operates just like that: the document object. All along weve been displaying lines of text on the screendocument. writeln  Hello from JavaScript! using the JavaScript document object. This object has many useful built- in variablescalled propertiesand built-in functionscalled methodsthat we can use. One such method is writeln  , and  thats the method weve been using to display text.  What Are Object Methods?  It takes a little while to get used to object terminology. The built-in functions of an object are called methods; the  internal methods of an object  inaccessible from outside the object  are called private methods  only the internal parts of  the object use the private methods and variables in the object . The externally available methods of an object are called  its public methods. As mentioned, weve been using the writeln   public method of the document object, so weve already gotten a start  on the terminology.  What Are Object Properties?  Besides calling functions methods, you call an objects variables properties in JavaScript. For example, if our display  object had a public property  like methods, properties can be both public and private  named src that held the name of  an image to display, we could set that property this way, just like setting a variable:  display.src = "gif image2.gif"  We have already seen this process at work in the previous chapter when we got a preview of working with HTML  controls in our img.htm page. When the user clicked a button, we changed the src property of the   tag to gif  image2.gif. We gave the   element the name IMG1 in that program, and when you refer to an image element by  name in JavaScript, that element is considered an object. That means we set the src property of IMG1 to gif image2.gif  this way:    < previous page    page_70  next page >  If you like this book, buy it!   < previous page  page_71  IMG1.src = "gif image2.gif"  next page > Page 71  However, it turns out thats not really enough information for JavaScript; we need to locate the IMG1 object in the  context of the whole Web page. IMG1 was actually embedded in a form  form1  in our page  forms are how well  enclose controls in Web pages, as well see in the next chapter , so IMG1 was a member object of form1. The form1  object, in turn, was a member object of the document object, so we actually used this line to set the   elements src  property:  document.form1.IMG1.src = "gif image2.gif"  In this way, we see that objects can enclose other objects and the dot operator is used to refer to such member objects.  Built-in JavaScript Objects  Weve discussed a few of the objects built into JavaScriptdocument, form, and image objectsand you might be  wondering what other objects are already built in. You can find a list of the built-in objects in Netscape Navigator in  Table 2-1, along with their methods, properties, and events. We include the objects events here, as a matter of reference,  but we wont get to them until the next chapter. However, we should note here that JavaScript events occur in response  to a user action, such as clicking a button or using the mouse; some of the JavaScript objects are set up especially to  deal with such events.  The matching tableif completefor Internet Explorer would take dozens of pages, because there are many dozens of built- in objects in Internet Explorer. In fact, all HTML tags have an associated object in Internet Explorer  thats not so in  Netscape Navigator, where only a few HTML tags have objects you can use with them , so wed have to list all possible  HMTL tags in such a table just to start. To get an object overview for Internet Explorer, however, weve listed some  selected objects along with their properties, methods, and events for Internet Explorer in Table 2-2.    < previous page    next page >  page_71  If you like this book, buy it!   < previous page  page_72  next page > Page 72  Properties none  Table 2-1 Netscape Navigator Objects. Object Anchor Anchors Array length, Applet none Applets Array length Area  hash, host, hostname, href,  pathname, port, protocol, search,  target length, prototype prototype form, name, type, value checked, defaultChecked, form,  name, type, value prototype  alinkColor, Anchor, anchors,  Applet, applets, Area, bgColor,  cookie, domain, embeds, fgColor,  Form, forms, Image, images,  lastModified, linkColor, Link,  links, referrer, title, URL,  vlinkColor form, name, type, value action, Button, Checkbox,  elements, encoding, FileUpload,  Hidden, length, method, name,  Password, Radio, Reset, Select,  Submit, target, Text, Textarea length  Array Boolean Button Checkbox  Date  Document  FileUpload Form  Forms Array      Table continued on next page     < previous page    Methods none none All public methods of the appalet none none  Event Handlers none none none none onMouseOut, onMouseOver  onBlur, onClick, onFocus onBlur, onClick, onFocus  join, reverse, sort eval, toString, valueOf blur, click, focus blur, click, focus  getDate, getDay, getHours, getMinutes,  getMonth, getSeconds, getTime,  getTimezoneOffset, getYear, parse,  setDate, setHours, setMinutes, setMonth,  setSeconds, setTime, setYear,  toGMTString, toLocaleString, toString,  UTC, valueOf close, open, write, writeIn  none  none  none  blur, focus reset, submit  onBlur, onChange, onFocus onReset, onSubmit  none  none  page_72  If you like this book, buy it!  next page >   < previous page  page_73  next page > Page 73  Table 2-1 Continued. Object Frame  Properties frames, name, length, parent, self window  Frames Array Function Hidden History History Array Image  Images Array Link and Area  Links Array Location  Math  length arguments, caller, prototype name, type, value current, length, next, previous length border, complete, height, hspace, lowsrc, name,  prototype, src, vspace, width length hash, host, hostname, href, pathname, port,  protocol, search, target length hash, host, hostname, href, pathname, port,  protocol, search E, LN2, LN10, LOG2E, LOG10E, PI,  SQRT1_2, SQRT2  MimeType MimeTypes Array length Navigator  description, enabledPlugin, type, suffixes  appCodeName, appName, appVersion,  mimeTypes, plugins, userAgent MAX_VALUE, MIN_VALUE, Nan,  NEGATIVE_INFINITY,  POSITIVE_INFINITY  Number      Table continued on next page     < previous page    Methods blur, clearTimeout, focus,  setTimeout none eval, toString, valueOf none back, forward, go none none  none none  none reload, replace  Event Handlers onBlur, onFocus  none  none none none onAbort, onError, onLoad  none onClick, onMouseOut,  onMouseOver none none  abs, acos, asin, atan,  atan2, ceil, cos, exp, floor,  log, max, min, pow,  random, round, sin, sqrt,  tan none none javaEnabled, taintEnabled  eval, toString, valueOf  none  none none none  none  page_73  If you like this book, buy it!  next page >   < previous page  page_74  next page > Page 74  Properties defaultSelected, index, prototype,  selected, text, value length defaultSelected, index, length,  selected, selectedIndex, text, value defaultValue, form, name, type, value description, filename, length, name length checked, defaultChecked, form,  length, name, type, value form, name, type, value form, length, name, options,  selectedIndex, text, type length, prototype  Methods none  none none  blur, focus, select none refresh blur, click, Focus  blur, click, focus blur, focus  anchor, big, blink, bold, charAt,  fixed, fontcolor, fontsize,  indexOf, italics, lastIndexOf,  link, small, split, strike, sub,  substring, sup, toLowerCase,  toUpperCase blur, click, focus blur, focus, select form, name,  type, value blur, focus, select  alert, blur, clearTimeOut, close,  confirm, focus, open, prompt,  setTimeOut  form, name, type, value defaultValue  defaultValue, form, name, type, value  closed, defaultStatus, document,  Frame, frames, history, length,  location, name, opener, parent, self,  status, top, window  Event Handlers none  none none  onBlur, onFocus none none onBlur, onClick, onFocus  onBlur, onClick, onFocus onBlur, onChange,  onFocus none  onBlur, onClick, onFocus onBlur, onChange,  onFocus, onSelect onBlur, onChange,  onFocus, onSelect onBlur, onError,  onFocus, onLoad,  onUnload   Table 2-1 Continued. Object Option  Options Array Options Array  Elements Password Plugin Plugins Array Radio  Reset Select  String  Submit Text  Textarea  Window       < previous page    page_74  If you like this book, buy it!  next page >   next page > Page 75  < previous page  page_75  Table 2-2 Selected Internet Explorer Objects. Properties Object All length Anchors length length Applets className, docHeight, docLeft,  Area docTop, docWidth,  parentElement, sourceIndex,  tagName, coords, href, id, name,  noHref, shape, style, target, title  Methods item, tags none item, tags scrollIntoView, contains, getMember,  setMember  concat, join, reverse, slice, sort removeMember, scrollIntoView, contains,  getMember, setMember  Boolean prototype Button  none removeMember, scrollIntoView, contains  getMember, setMember  length, prototype className, docHeight, docLeft,  docTop, docWidth,  parentElement, sourceIndex,  tagName, align, aLink,  background, bgColor,  bgProperties, id, leftMargin, link,  scroll, style, text, title,  topMargin, vLink  className, docHeight, docLeft,  docTop, docWidth,  parentElement, sourceIndex,  tagName, accessKey, dataFld,  dataFormatAs, dataSrc, disabled,  title constructor, prototype  Array Body  Date     Dialog width, height, dialogArgs,   returnValue   Table continued on next page     < previous page    getDate, getDay, getFullYear, getHours,  getMilliseconds, getMinutes, getMonth,  getSeconds, getTime, getTimezoneOffset,  and many more close  none  none   Event Handlers none none none onafterupdate, onbeforeupdate,  onblur, onclick, ondblclick,  onfocus, onhelp, onkeydown,  onkeypress, onkeyup,  onmousedown, onmousemove,  onmouseout, onmouseover,  onmouseup none onafterupdate, onbeforeupdate,  onblur, onclick, ondblclick,  onfocus, onhelp, onmousedown,  onmousemove, onmouseout,  onmouseover, onmouseup,  none onafterupdate, onbeforeupdate,  onblur, onclick, ondblclick,  onfocus, onhelp, onmousedown,  onmousemove, onmouseout,  onmouseover, onmouseup  page_75  If you like this book, buy it!  next page >   < previous page  page_76  next page > Page 76  Table 2-2 Continued. Object Properties Document alinkColor, linkColor,   vlinkColor, mimeType, title,  bgColor, link, vLink, aLink,  cookie, lastModified, charset,  location, referrer, fgColor,  activeElement, strReadyState,  domain, URL, fileSize,  fileCreatedDate,  fileModifiedDate,  fileUpdatedDate keyCode, fromElement,  toElement, button,  cancelBubble, srcElement, x,  y, shiftKey, ctrlKey, altKey,  returnValue className, docHeight,  docLeft, docTop, docWidth,  parentElement, sourceIndex,  tagName, borderColor,  frameBorder, height, id,  marginHeight, marginWidth,  name, noResize, scrolling, src,  title, width className, docHeight,  docLeft, docTop, docWidth,  parentElement, sourceIndex,  tagName, action, id, , name,  style, target, title length length arguments, caller length length  Event  Frame  Form  Forms Frames Function History Images      Table continued on next page     < previous page    Methods close, open, clear, write, writeln,  rangeFromText, rangeFromElement,  execCommand, queryCommandEnabled,  queryCommandText, elementFromPoint,  queryCommandSupported,  queryCommandState,  queryCommandIndeterm, createElement  Event Handlers onclick, onmouseover, ondblclick,  onkeypress, onmousedown,  onmousemove, onmouseup,  onkeydown, onkeyup,  onmouseout, onreadystatechange,  onhelp, onbeforeupdate,  onafterupdate  none  none  removeMember, scrollIntoView, contains,  getMember, setMember  onfocus, onload, onunload  removeMember, scrollIntoView, contains,  getMember, setMember  ondblclick, onhelp,  onmousedown, onmousemove,  onmouseout, onmouseover,  onmouseup, onreset, onsubmit  item, tags item none back, forward, go item, tags  none none none none none   page_76  If you like this book, buy it!  next page >   next page > Page 77  Event Handlers onafterupdate,  onbeforeupdate, onblur,  onchange, onclick, ondblclick,  onfocus, onhelp, onkeydown,  onkeypress, onkeyup,  onmousedown,  onmousemove, onmouseout,  onmouseover, onmouseup ,  onselect none none  < previous page  page_77  Table 2-2 Continued. Object Properties dataFld, dataSrc, className, docHeight,  Input docLeft, docTop, docWidth, parentElement,  sourceIndex, tagName, accessKey, align,  disabled, id, language, maxLength, name,  readOnly, size, style, tabIndex, title, type, value  Methods removeMember,  scrollIntoView, contains,  getMember, setMember  Links Location  Math  length hash, host, hostname, href, pathname, port,  protocol, search E, LN2, LN10, LOG2E, LOG10E, PI,  SQRT1_2, SQRT2  MimeType description, enabledPlugin, name, suffixes, navigator  appName, appVersion, appCodeName,  userAgent, cookieEnabled, javaEnabled MAX_VALUE, MIN_VALUE, NaN,  NEGATIVE_INFINITY,  POSITIVE_INFINITY prototype, constructor length length, prototype  Number  Object plugins String  item, tags reload, replace  abs, acos, asin, atan, atan2,  ceil, cos, exp, floor, log, max,  min, pow, random, round, sin,  sqrt, tan none none  none  toString, valueOf item, tags anchor, big, blink, bold,  charAt, charCodeAt, concat,  fixed, fontcolor, fontsize,  fromCharCode, indexOf,  italics, lastIndexOf, link,  match, replace, search, slice,  small, split, strike, sub, substr,  substring, sup, toLowerCase,  toUpperCase  none  none none  none  none none none      Table continued on next page     < previous page    page_77  If you like this book, buy it!  next page >   < previous page  page_78  next page > Page 78  Methods getMember  Event Handlers none  Table 2-2 Continued. Object Properties background, borderTopColor, borderRightColor,  style borderBottomColor, borderLeftColor,  borderTopWidth, borderRightWidth,  borderBottomWidth, borderLeftWidth, visibility,  font, textDecoration, verticalAlign, textTransform,  backgroundColor, backgroundImage,  backgroundRepeat, backgroundAttachment,  fontSize, fontFamily, fontWeight, lineHeight,  color, letterSpacing, fontStyle, textAlign,  textIndent, marginLeft, marginRight, marginTop,  marginBottom, display, clear, left, top, width,  height, borderLeftStyle, borderRightStyle,  borderTopStyle, borderBottomStyle,  textDecorationUnderline, textDecorationOverline,  textDecorationLineThrough, fontVariant, cssText,  border, margin, zIndex, overflow, posTop,  posLeft, posWidth, posHeight dataSrc, className, docHeight, docLeft, docTop,  docWidth, parentElement, sourceIndex, tagName,  align, background, bgColor, border, borderColor,  borderColorDark, borderColorLight, cellPadding,  cellSpacing, cols, frame, height, id, rules, style,  title, width  Table  window name, length, parent, self, top, status,   defaultStatus, opener, closed       < previous page    removeMember, scrollIntoView,  contains, getMember,  setMember,  item, navigate, blur, focus, alert,  confirm, prompt, setTimeout,  clearTimeout, close, open, scroll,  showModalDialog  onafterupdate,  onbeforeupdate, onclick,  ondblclick, onhelp,  onkeydown, onkeypress,  onkeyup, onmousedown,  onmousemove, onmouseout,  onmouseover, onmouseup onfocus, onload, onunload,  onblur, onhelp  page_78  If you like this book, buy it!  next page >   < previous page  page_79  next page > Page 79  There are several types of built-in objects in our Web browsers: element objects, like the one weve used for the    tag; scripting objects, such as the document object; and objects built into JavaScript itself, like the Math, Date, String,  and Array  JavaScript 1.1 and later  objects. Well explore the element and scripting objects throughout this book  in  fact, Chapter 8, Using the Document Object in JavaScript, focuses solely on the document object , so while were  discussing the internals of JavaScript, lets take a look at two of the useful built-in JavaScript objects: the String and  Array objects.  Built-in Objects: The String Object  You handle text strings with the String class in JavaScript. This class has all kinds of string-manipulation methods built  in, as you can see in Table 2-3 for the JScript String object and Table 2-4 for the JavaScript 1.2 String object.  Table 2-3 The JScript 3.0 String objects methods. anchor big blink bold charAt charCodeAt concat fixed fontcolor fontsize fromCharCode indexOf italics lastIndexOf link  match replace search slice small split strike sub substr substring sup toLowerCase toString toUpperCase valueOf       < previous page    page_79  next page >  If you like this book, buy it!   < previous page  page_80  next page > Page 80  Lets create a String object ourselves and put some of those methods to work. Well create a new Web page for this  purpose, String.htm, and use the String objects bold   method and length property to display some of our text in  bold and indicate the length of the string in characters.  Table 2-4 The Jscript 1.2 String objects methods. anchor blink charAt fixed fontsize italics small strike substring toLowerCase toString  big bold eval fontcolor indexOf lastIndexOflink split sub sup toUpperCase valueOf     We start by setting up our String object this way:               A String Example            var string = "Here is some text!"           .           .           .             < previous page    Now weve created our String object, which weve named string. Were ready to display the string by using the document  objects writeln   method. To do that, we can make the string bold with its bold   method and find the strings  length with its length property, as shown here:  page_80  next page >  If you like this book, buy it!   < previous page  page_81  next page > Page 81     A String Example            var string = "Here is some text!"    document.writeln "This string: " + string.bold   + " is " +            string.length + " characters long."                            A String Example.                  Now open the page, as shown in Figure 2-6. As you can see, weve been able to use the String objects bold   method  and length property. The code for this page, String.htm, is shown in Listing 2-6.  Figure 2-6   Our String object example.      < previous page    page_81  next page >  If you like this book, buy it!   < previous page  page_82  next page > Page 82  Listing 2-6  String.htm.              A String Example          var string = "Here is some text!"    document.writeln "This string: " + string.bold   + " is " +        string.length + "   characters long."                       A String Example.            The String example gave us our start with using objects, but we should note that it made things easy for us in a way that  doesnt happen with most JavaScript objects.  Using the new Operator  The String object actually doubles as a variable type in JavaScript, so we could declare our String object just as we  could any other variable:  var string = "Here is some text!"  Usually, when you declare a new object, however, you use the new operator  even though its a word, not a symbol like  + or -, the new operator is a true operator . Treating the String object as a true object, wed declare it this way:    < previous page    next page >  page_82  If you like this book, buy it!   < previous page  page_83  var string = new String "Here is some text!"   next page > Page 83  TIP: The counterpart of the new operator is the delete operator in JavaScript. If you want to get rid of an  object  and so free up its memory allocation , delete it this way: delete theObject. You can also  delete objects by setting them to null with the assignment operator  = .    Here we indicate that were creating a new String object that should be initialized to Here is some text! In fact, the expression  String Here is some text!  is actually a call to a special method: the String classs constructor.  Object Constructors  When you declare an object, its usually convenient to initialize it at the same time. For example, when we declare our object named  string, we initialize it to Here is some text! at the same time by passing that text to the String objects constructor. An objects  constructor is a special methodwhich has the same name as the object, such as String   or Array  that you pass initialization  information to. In the case of our String object, we pass the text Here is some text! to the constructor. We could also have passed nothing to the constructor and iniitialized the string object later, like this:  var string = new String    string = "Here is some text!"  Now that weve gotten the terminology down and worked with the String object, lets move on to the next JavaScript object: the Array  object.  Built-in Objects: the Array Object In programming, you use arrays to manage indexed data items. For example, you might have an array of numbers named numbers[]   you use square brackets with arrays just as you use parentheses with functions :    < previous page    page_83  next page >  If you like this book, buy it!   < previous page  page_84  next page > Page 84  Each location  sometimes called a slot in JavaScript  in the array can be referred to by an index, which starts at 0:  In this way, you can handle the data in an array by referring to each item by indexthe first item is numbers[0], the  next is numbers[1], and so on. This is perfect for working with data in a loop because you can use the loop index as  the array index as well, as shown here:  for var loop_index = 0; loop_index < maxValue; loop_        index++ {      if numbers[loop_index] == 4 {           document.writeln "Found it!"       }  }  Lets see an example now called array.htm. Well store the strings Hello, from, and JavaScript! in an array,  and then loop over that array, displaying each string in succession; the results will give us Hello from  JavaScript! on the screen. Well use the JavaScript Array object in this example; that objects JScript 3.0 methods are listed in Table 2-5 and its  JavaScript 1.2 methods are in Table 2-6.    < previous page    page_84  next page >  If you like this book, buy it!   < previous page  page_85  next page > Page 85    Lets create this example now. We begin by declaring our new Array object, which well call message[]:  Table 2-5 The JScript 3.0 Array objects method. concat reverse sort valueOf  join slice toString     Table 2-6 The JavaScript 1.2 Array objects methods. eval reverse toString  join sort valueOf  Next, we fill the array with the strings we want to use:               An Array Example            var message = new Array             .           .           .               An Array Example            var message = new Array      message[0] = "Hello "    message[1] = "from "    message[2] = "JavaScript!"      .     .     .      < previous page    page_85  next page >  If you like this book, buy it!   < previous page  page_86  next page > Page 86  Now we can assemble the message we want to display from the three array elements, and we do that in a loop:               An Array Example            var message = new Array      message[0] = "Hello "  message[1] = "from "  message[2] = "JavaScript!"    for var loop_index = 0; loop_index < 3; loop_index++ {      document.write message[loop_index]    }                         An Array Example.                  NOTE: To make sure our three-part message was printed on one line, we used the document objects write    method, instead of writeln   because writeln   skips to the next line after writing its text and write    doesnt.     Thats itopen this page now, as shown in Figure 2-7. As you can see in that figure, weve been able to fill an array with our strings, then  loop over that array and display those strings, one after the other, to create our message.    < previous page    page_86  next page >  If you like this book, buy it!   < previous page  page_87  next page > Page 87  TIP: Some languages let you create multidimensional arrays, but JavaScript doesnt. Instead, you can create  arrays of Array objects to do the same thing.    The code for this page, array.htm, is shown in Listing 2-7.  Our array example uses JavaScript arrays.  Figure 2-7   Listing 2-7  Array.htm.              An Array Example            var message = new Array      message[0] = "Hello "  message[1] = "from "  message[2] = "JavaScript!"    for var loop_index = 0; loop_index < 3; loop_index++ {      document.write message[loop_index]   }                     < previous page    page_87  If you like this book, buy it!  next page >   < previous page  page_88  next page > Page 88  Listing 2-7  Continued.       An Array Example.               Now that weve see a few of the built-in objects available in JavaScript, lets take a look at some of the built-in ways of  handling objects. The first technique well look at is using the JavaScript for-in statement.  Using the for-in Statement  You can loop over all the elements of an object or an array with the for-in statement:  for  variable in [object  array]       statement   This statement is especially made to allow you to work easily with objects and arrays. Lets put together an example  called for-in.htm. In this example, we can display all the properties of the document object like this:     < previous page    page_88  next page >  If you like this book, buy it!   < previous page  page_89  next page > Page 89  We start this new page by indicating that were going to display the elements of the document object:               A for-in Statement Example               document.writeln "The properties of the document object:"       .      .      .  We set up the for-in statement this way, using a variable well call element:               A for-in Statement Example               document.writeln "The properties of the document object:"     for var element in document {      .      .      .  }           .      .      .  Now we can use the element variable as a loop index and refer to the properties of the document object as document [element] because you can treat an object name as an indexed array of its internal members:    < previous page    page_89  next page >  If you like this book, buy it!   < previous page  page_90  next page > Page 90               A for-in Statement Example               document.writeln "The properties of the document object:"     for var element in document {     document.writeln element + " = " + document[element]   }                            A for-in Statement Example.                  The result of this program is shown in Figure 2-8. As you can see, were displaying the properties of the document object  one by one in that page.  Its instructive to open this page in both Netscape Navigator and Internet Explorer; doing so highlights a major  difference between the two browsersthe immense number of programming objects available in Internet Explorer   sometimes it seems as though theres almost too many of them . Heres what you get in Netscape Navigator when you  open the for-in.htm page:  The properties of the document object:  location = file:   C JavaScript for-in for-in.htm  forms = [object FormArray]  links = [object LinkArray]  anchors = [object AnchorArray]  applets = [object AppletArray]     < previous page    page_90  next page >  If you like this book, buy it!   < previous page  page_91  next page > Page 91  This example lists the document objects properties.  Figure 2-8   embeds = [object EmbedArray]  images = [object ImageArray]  title = A for-in Statement Example  URL = file:   C JavaScript for-in for-in.htm  referrer =   lastModified = 10 03 97 14:30:08  cookie =   domain =   bgColor = ffffff  fgColor = 000000  linkColor = 0000ee  vlinkColor = 551a8b  alinkColor = ff0000  width = 416  height = 328  Heres what the same page returns in Internet Explorer:  The properties of the document object:  activeElement = [object]  alinkColor = 0000ff  all = [object]  anchors = [object]  applets = [object]  bgColor = ffffff  body = [object]  cookie =   defaultCharset = iso-8859-1  domain =   embeds = [object]      < previous page    page_91  next page >  If you like this book, buy it!   < previous page  page_92  next page > Page 92  fgColor = 000000  fileCreatedDate = Monday, September 29, 1997  fileModifiedDate = Friday, October 03, 1997  fileSize = 413  fileUpdatedDate =   forms = [object]  frames = [object]  images = [object]  lastModified = 10 03 97 18:30:08  linkColor = 0000  fflinks = [object]  location = file:   C: JavaScript for-in for-in.htm  mimeType = Microsoft HTML Document 4.0  nameProp = A for-in Statement Example  onafterupdate = null  onbeforeupdate = null  onclick = null  ondblclick = null  ondragstart = null  onerrorupdate = null  onhelp = null  onkeydown = null  onkeypress = null  onkeyup = null  onmousedown = null  onmousemove = null  onmouseout = null  onmouseover = null  onmouseup = null  onreadystatechange = null  onrowenter = null  onrowexit = null  onselectstart = null  parentWindow = [object]  plugins = [object]  protocol = File   ProtocolreadyState =   interactivereferrer =   scripts = [object]  security = This type of document does not have a security      certificate.  selection = [object]  styleSheets = [object]title = A for-in Statement Example  URL = file:   C: JavaScript for-in for-in.htm  vlinkColor = 800080  Listing 2-8 shows the code for this page, for-in.htm. Theres another important JavaScript programming construct made to work with objectsthe with statementand well take  a look at it now.    < previous page    page_92  next page >  If you like this book, buy it!   < previous page  page_93  next page > Page 93  Listing 2-8  For.htm.              A for-in Statement Example               document.writeln "The properties of the document object:"   for var element in document {      document.writeln element + " = " + document[element]   }                            A for-in Statement Example.                  If you want to use many of an objects properties in a program, you might consider the with statement. You set up a code  block with this statement, specifying the object whose properties and methods you want to refer to in that code block:  Using the with Statement  with  object      statement   Inside the code block, you can then refer to the objects properties and methods without referring to the objectfor  example, you can use    < previous page    page_93  next page >  If you like this book, buy it!   < previous page  page_94  next page > Page 94  writeln   instead of document.writeln  . Lets put together an example, with.htm, that uses the with  statement. We can display a few properties of the document object, such as the foreground and background color, using  the with statement. We start our new page, with.htm, by setting up the with statement and indicating that the object we want to use is the  document objectnote that we set up a code block  delimited by { and }  after the with statement:               A with Statement Example               with document {      .      .      .  }       Now that weve set up our with statement and its code block, we can refer to the foreground color  fgColor  and  background color  bgColor  by name, without having to use their full names  that is, document.fgColor :               A with Statement Example               with document {      document.writeln "The document foreground color is " +       fgColor + "."      < previous page    page_94  next page >  If you like this book, buy it!   < previous page  page_95  next page > Page 95      document.writeln "The document foreground color is " +       bgColor + "."   }                            A with Statement Example.                  Now open the page, as shown in Figure 2-9. As you can see, our with statement is workingwe dont have to refer to an  objects properties or methods with its full name, which saves us a little bit of programming time. The code for this page,  with.htm, is shown in Listing 2-9.     < previous page    The with statement makes working with object easier.  Figure 2-9   page_95  If you like this book, buy it!  next page >   < previous page  page_96  next page > Page 96  Listing 2-9  with.htm.              A with Statement Example               with document {      document.writeln "The document foreground color is " +       fgColor + "."       document.writeln "The document foreground color is " +       bgColor + "."   }                            A with Statement Example.                 Weve already covered a lot of ground on the built-in objects we have to work with in this chapter. Now were ready for  the next stepcreating our own JavaScript objects.  Creating Custom Objects To see how creating your own objects in JavaScript works, well create a new example called object.htm. In this  example, well create an object that stores a string of textCustom objects!and supports a methoddisplay  that  we can call to write that string to our Web page.    < previous page    page_96  next page >  If you like this book, buy it!   < previous page  page_97  Now were ready to create our custom object, but how exactly do we do that?  Setting Up a Custom JavaScript Object in Code  next page > Page 97  You create a custom object by using the function keyword in JavaScript. For example, we can name our object text and  have the string we store in that object passed to us as an argument in the objects constructor. Setting that up looks like  this in JavaScript:               A Custom Object Example                function text textString       {        .        .        .     }               A Custom Object Example             < previous page    We want to store the text string passed to us as a property of the object, so well explain that next.  Creating an Object Property  We can name our new object property textString. Heres how we create it:  page_97  next page >  If you like this book, buy it!   < previous page  page_98  next page > Page 98    function text textString     {      this.textString = textString           .           .           .    }  Here we take the argument passed to us and store it in a new property named textString. Note our use of the this  keyword in the preceding code. This particular keyword refers to the current object, and its very useful  we cant refer to  the present object by name yet because we havent given it a name or even declared it .  Now weve set up the textString property in the text object. The next step is to print out the string in that property on a  Web page, and well do that by creating a new method for our object.  Creating an Object Method  You can associate a JavaScript function with an object, making it a method of our object, the same way we set up our  textString property. That is, if we want to add a display   method to the text object, we do so like this:               A Custom Object Example                function text textString       {          this.textString = textString          this.display = display      }  Next, we have to write the display   method itself. We do that by simply displaying the text from the textString  property in a Web page:             < previous page    page_98  next page >  If you like this book, buy it!   < previous page  page_99  next page > Page 99  Thats itour new object is ready to go. To actually work with new objects of the text type  JavaScript doesnt support true  OOP, so we will refer to an objects type, instead of the standard OOP terminology of an objects class , we need to  declare those objects.  Instantiating the Object  The process of declaring and initializing objects is called instantiation. To instantiate a text object, we use the new  operator, passing the string we want to store in that object  such as Custom objects!  to the objects constructor:     A Custom Object Example                function text textString       {       this.textString = textString       this.display = display     }       function display       {          document.writeln "The text is: " +       this.textString      }               A Custom Object Example                function text textString      {          this.textString = textString          this.display = display     }       function display       {     < previous page    page_99  next page >  If you like this book, buy it!   < previous page  page_100  next page > Page 100       document.writeln "The text is: " +    this.textString     }       theText = new text "Custom objects!"          .         .         . Now were free to call the objects display   method, just as we would for any other object:               A Custom Object Example                function text textString       {          this.textString = textString          this.display = display      }        function display        {          document.writeln "The text is: " +         this.textString       }        theText = new text "Custom objects!"         theText.display                           A Custom Object Example.                     < previous page  page_100  next page >      If you like this book, buy it!   < previous page  page_101  next page > Page 101  That completes the exampleour custom object is ready to go. Open the page now, as shown in Figure 2-10. As you can  see, the object was created with the text we placed in it, and the display   method correctly displays that text. Now  we have the power to create our own objects in JavaScript. The code for this page, object.htm, is shown in Listing 2-10.  We create and use a custom JavaScript object.  Figure 2-10   Listing 2-10  Object.htm.                A Custom Object Example                function text textString       {          this.textString = textString          this.display = display      }        function display        {          document.writeln "The text is: " +        this.textString       }       < previous page    page_101  next page >  If you like this book, buy it!   < previous page  page_102  next page > Page 102  Listing 2-10  Continued.     theText = new text "Custom objects!"       theText.display                           A Custom Object Example.                  One reason you might want to create your own objects in JavaScript is to pass arguments to functions by reference, not  value. Normally, in JavaScript, whats really passed to functions are copies of the arguments you pass, not the arguments  themselves. This is called calling by value. However, if you want a function to change a variable you pass to it, you need to  pass a reference to that variable, not just a copy of the variable; you do that by calling by reference. The trick is that objects  are always passed by reference in JavaScript, so you can enclose the value you want to pass by reference in an object: function dataObject value   {      this.value = value  } Then when you pass that object to a function, that function can work on the actual value of the argument, not just on a copy  of it: function increment obj   {      obj.value++  }     The last topic well explore in this chapter is an Internet Explorer topic: scriptlets. Internet Explorer supports an   tag, which  is typically used for ActiveX controls; however, starting with Internet Explorer 4.0 final edition  but not supported in either of the two  preview editions , you can use the   tag with scripts to create objects.    < previous page    page_102  next page >  If you like this book, buy it!   < previous page  page_103  next page > Page 103  Using Internet Explorer Scriptlets  As mentioned, you can now use the   tag in Internet Explorer to create an object from a script. Well take a look at this process  in a new Web page named scriptlet.htm. Well create an object from a script and then set a property of that object to the words  Hello from scriptlets!. Well be able to read that propertys text back and display the text. Well start this example by creating the script for the object in a file named S.htm. The object well create will have one propertya string  named textStringand one method to retrieve that string, called get_textString  . To make sure the property and method are public   so they can be accessed by scripts in the Web page where our new object will be embedded , we must preface their names with  public_:       public_textString = ""     function public_get_textString     {      return textString  }       NOTE: In the scriptlet example, we use  , not <SCRIPT LANGUAGE =  JavaScript>. Because scriptlets are a Microsoft invention, they require using JScript, not standard JavaScript.    Now we will create a new object from the code in s.htm. To do that, we create a new Web page, scriptlet.htm, and place the    tag in it:             A Scriptlet Example               <OBJECT       .      .      .     < previous page    page_103  If you like this book, buy it!  next page >   < previous page  page_104  next page > Page 104  This type of object is different from a scripting object. The objects you create with the   tag are HTML  objects, so we specify the height and width of our new object in the Web page  we wont display anything in our objects  space in the Web page , as well as giving it a name  Scriptlet1  and indicating that the code for this scriptlet is in s. htm:         .      .      .             A Scriptlet Example               <OBJECT   width=200  height=100  NAME="Scriptlet1"  TYPE="text x-scriptlet"  DATA="s.htm">          .       .       .             A Scriptlet Example           < previous page    Note also that we give a MIME type  text x-scriptlet  for the scriptlet so Internet Explorer will know how to handle the  text in the S.htm file.  You specify MIME types for all documents transferred over the Web; your Internet Service  Provider  ISP  has a large map of MIME types that it applies to the documents it handles, based on those documents  filename extensions.  Now the new HTML object is ready, and we can refer to it as Scriptlet1. In this case, well place some textHello  from scriptlets!into the scriptlets textString property and then read it back, displaying it this way:   page_104  next page >  If you like this book, buy it!   < previous page  page_105  next page > Page 105       <OBJECT   width=200   height=100   NAME="Scriptlet1"  TYPE="text x-scriptlet"   DATA="s.htm">            Scriptlet1.textString = "Hello from scriptlets!"     document.writeln Scriptlet1.textString                            A Scriptlet Example.                Open the scriptlet.htm page. As shown in Figure 2-11, weve loaded our text string into the scriptlets textString  property and read it back. Now were supporting scriptlets in our Web pages!      < previous page    Figure 2-11   Using scriptlets in a Web page.  If you like this book, buy it!  page_105  next page >   < previous page  page_106  next page > Page 106  The code for this page, scriptlet.htm, is shown in Listing 2-11, and Listing 2-12 shows the code for the scriptlet  itself, s.htm. Listing 2-11  Scriptlet.htm.            A Scriptlet Example               <OBJECT  width=200  height=100  NAME="Scriptlet1"  TYPE="text x-scriptlet"   DATA="s.htm">            Scriptlet1.textString = "Hello from scriptlets!"    document.writeln Scriptlet1.textString                            A Scriptlet Example.                  < previous page    page_106  If you like this book, buy it!  next page >   < previous page  page_107  next page > Page 107  Listing 2-12  S.htm.        public_textString = ""    function public_get_textString    {   return textString  }       Conclusion  Thats it for this chapter. Weve covered a great deal in this chapter, from how to use loops like for, while, and do-while  to using functions, passing arguments to functions, getting values back from functions, seeing how objects, methods,  and properties work, how to use the built-in String and Array objects, how to work with objects using the for-in and  with statements, how to create your own custom objects, and how to use Internet Explorer scriptlets. Weve added a lot  of JavaScript power to our arsenal in this chapter.  In the next chapter, well continue our exploration of JavaScript when we start seeing how to work with HTML controls  in Web pages. This is the main attraction of JavaScript for many programmers.    < previous page    page_107  next page >  If you like this book, buy it!   < previous page  page_109  next page > Page 109  Chapter 3  Forms: Text Boxes and Buttons  In this chapter, well start working with HTML controls. For many programmers, this is the point of JavaScriptyou  embed scripts in your Web page so you can manipulate HTML controls and their behavior. In this chapter, well start  learning how to do that.  Well examine many central HTML controls: text boxes, buttons, text areas, submit buttons, reset buttons, file controls,  and hidden controls. If youre familiar with Windows, youve seen some of these controls before, and in this chapter, well  see how to work with them under JavaScripts control. This is our first real step in creating powerful Web pages that  respond to the user the way we want them toand thats what JavaScript is all about.    < previous page    next page >  page_109  If you like this book, buy it!   < previous page  page_110  next page > Page 110  Text Boxes  A text box, also called a text control, is a rectangular control that lets the user enter text. We can set the text in a text  box, as well as read what the user has typed.  The actual text in a text box is held in its value property. Other properties of text boxes include defaultValue, form,  name, and type. Its methods are the following:  blur: This method releases the input focus  the control with the focus is the control thats the target of mouse clicks   and struck keys .  select: Selects text. focus: This method restores the input focus to the check box.  Now well put together a text box example in which we simply display a text box in a Web page.  Using the   Tag  This will be our first true HTML control example. You place HTML controls into a Web page with the   tag;  in Internet Explorer, that tag works like this:  <INPUT  ACCESSKEY=string  ALIGN=ABSBOTTOM  ABSMIDDLE  BASELINE  BOTTOM  LEFT         MIDDLE   RIGHT  TEXTTOP  TOP  DATAFLD=string  DATASRC=string  DISABLED  ID=string  LANGUAGE=JAVASCRIPT  VBSCRIPT  MAXLENGTH=long  NAME=string  READONLY=string  SIZE=variant  STYLE=string  TABINDEX=integer  TITLE=string  TYPE=BUTTON  CHECKBOX  HIDDEN  IMAGE  PASSWORD  RADIO         RESET   SELECT-MULTIPLE  SELECT-ONE  SELECT-ONE  SUBMIT  TEXT         TEXTAREA  FILE     < previous page    page_110  next page >  If you like this book, buy it!   < previous page  page_111  next page > Page 111  VALUE=string  event = script  >  Heres the   tag in Netscape Navigator:  <INPUT  ALIGN=ABSBOTTOM  ABSMIDDLE  BASELINE  BOTTOM  LEFT         MIDDLE   RIGHT  TEXTTOP  TOP  ID=string  LANGUAGE=JAVASCRIPT   MAXLENGTH=long  NAME=string  SRC=string  SIZE=string  TITLE=string  TYPE=BUTTON  CHECKBOX  HIDDEN  IMAGE  PASSWORD  RADIO         RESET   FILE  SUBMIT  TEXT  TEXTAREA   VALUE=string  event = script  >  We will start our text box example, Textbox.htm, by placing a header into the Web page to show what this example  is about:         Text Box Example                       Type into the text box...       .    .    .  Next we add the text box itself, making it 20 characters wide:         Text Box Example            < previous page    page_111  next page >  If you like this book, buy it!   < previous page  page_112  next page > Page 112              Type into the text box...                                  TIP: The default width for text boxes, if you dont specify a size, is 20 characters.  Thats all we needopen the page now, as shown in Figure 3-1. You can see our text box there; note that you can type into it. In this way,  weve supported our first HTML control. The code for this page, Textbox.htm, is shown in Listing 3-1.     < previous page    Figure 3-1   Our text box example.  page_112  If you like this book, buy it!  next page >   < previous page  page_113  next page > Page 113  Listing 3-1  Textbox.htm.        Text Box Example                       Type into the text box. . .                              You might note that we used the   HTML tag in the preceding text box example:              Type into the text box...                       Technically, its not necessary to use the   tag here, but we added it because when we start using JavaScript, it  requires enclosing your controls in forms  forms are not visible HTML elementsthey simply provide ways of grouping  your controls in a page . Its not necessary here because we havent used JavaScript with the text box, but it points out  whats to come when we start working with other controls, such as buttons.    < previous page    page_113  next page >  If you like this book, buy it!   < previous page  page_114  next page > Page 114  Buttons  Well turn to HTML buttons now. These controls display a visual image of a button that the user can click  and depress   with the mouse. Buttons support a value property, which holds the buttons caption; a name property, which holds the  name of the button as used in code; and a form and a type property. The button methods are blur, click, and focus. The  button event handlerswell see what event handlers are in a minuteare onBlur, onClick, and onFocus.  We will put together a button example to show how to connect buttons to JavaScript. In this case, well show the user  both a text box and a button, giving the button the caption Display Message. When the user clicks the button, well  display a message Hello from JavaScriptin the text box. Lets put this together in code. First, we set up a form for our controls:        A Button Example                    .      .      .            .      .      .  Next, we add the text box well use:        A Button Example                       .      .      .     < previous page    page_114  next page >  If you like this book, buy it!   < previous page  page_115  next page > Page 115  Next, we add the button itself, using the   tag with the TYPE attribute set to BUTTON and setting the caption  of the button to Display Message with the VALUE attribute:            .      .      .        A Button Example                                  The next step is to connect the button to JavaScript code, and to do that well need an understanding of HTML events.  Using HTML Events When the user clicks the button in our Web page, we want to display the message Hello from JavaScript in the  text box. To do that, well need to be notified when the user clicks the button, and the notification process depends on  HTML events.  In graphical user environments, users direct what happens in the program. They are usually presented with many visual  elements they can work with, and its up to them to click or activate those elements as they choosethe programmer cant  predict exactly what course the program will take. For that reason, programming in graphical user interfaces  GUIs  is  event-driven.  For example, if the user clicks the mouse, a click event occurs. If he or she changes the text in a text box, a change event  occurs. We can respond to those events by tying code to them in our programs.  When the user does click the button, a click event occurs that we can tie to a JavaScript function. In this case, well tie  the buttons click event    < previous page    page_115  next page >  If you like this book, buy it!   < previous page  page_116  next page > Page 116  to a JavaScript function named DisplayMessage  . We do that like this, using the onClick attribute:  In the DisplayMessage   function, well set the text in the text box to Hello from JavaScript. We need  some way of referring to that text box; because that box is in our HTML form, we can pass that form to  DisplayMessage   by passing an argument of this.form  the this keyword refers to the button control here,  because this always refers to the current object; therefore, this.form refers to the form enclosing the button control :        A Button Example                         <INPUT TYPE = BUTTON Value = "Display Message" onClick =        "DisplayMessage  ">              A Button Example                         <INPUT TYPE = BUTTON Value = "Display Message" onClick =        "DisplayMessage this.form " >        Now well write the DisplayMessage   function:        A Button Example      < previous page    page_116  next page >  If you like this book, buy it!   < previous page  page_117  next page > Page 117  In this function, all we need to do is to set the text boxs value property to Hello from JavaScript:                      <INPUT TYPE = BUTTON Value = "Display Message" onClick           = "DisplayMessage this.form " >                      function DisplayMessage form1       {         .         .         .      }           A Button Example                         <INPUT TYPE = BUTTON Value = "Display Message" onClick           = "DisplayMessage this.form " >                      function DisplayMessage form1       {          form1.Textbox.value = "Hello from JavaScript"      }             < previous page    page_117  next page >   If you like this book, buy it!   < previous page  page_118  next page > Page 118  Now open the page, as shown in Figure 3-2. When you click the button in that page, the browser calls  DisplayMessage   and the message appears in the text box. Now were working with HTML controls in JavaScript. Listing 3-2 shows the code for this page, Buttons.htm.  Figure 3-2   Connecting a button to JavaScript.  Lisging 3-2  Buttons.htm.       A Button Example                         <INPUT TYPE = BUTTON Value = "Display Message" onClick           = "DisplayMessage this.form " >                      function DisplayMessage form1       {          form1.Textbox.value = "Hello from JavaScript"        }               < previous page    page_118  next page >  If you like this book, buy it!   < previous page  page_119  next page > Page 119  In the preceding example, we passed the buttons form to the DisplayMessage   function, but its not necessary to  do so. We can name the form by using the NAME attribute this way:                .    .    .  Then we can call the DisplayMessage   function without any arguments:              <INPUT TYPE = BUTTON Value = "Display Message" onClick =        "DisplayMessage  ">           .     .     .              <INPUT TYPE = BUTTON Value = "Display Message" onClick =        "DisplayMessage  ">                      function DisplayMessage        {          document.form1.Textbox.value = "Hello from       JavaScript"      }          In DisplayMessage  , we need some way to refer to the buttons form. We can do that now by name: form1. That  form is a member object of the document object, so we refer to the value property of the text box this way:     < previous page    page_119  next page >  If you like this book, buy it!   < previous page  page_120  next page > Page 120  In this way, we dont have to pass the text boxs form to the DisplayMessage   function to be able to use that text  box.  Now weve seen how to work with text boxes and buttons, giving us an introduction to working with HTML controls  with JavaScript. Besides HTML controls, we can work with scripting objects in the Web page. For example, we will  take a quick look at changing the properties of the document object when the user clicks a button.  Using Controls to Set a Page's Background Color  One of the document properties we can change when the user clicks a button is the bgColor property, which holds the  documents background color. For example, we can display a button with the caption Make background red.  When the user clicks that button, well set the documents bgColor property to red  ff0000 . Well start our new example,  bgcolor.htm, with a prompt and a button, connecting the button to a function named colorBackground  :           bgColor Example                         Set the documents bgColor property...              <INPUT TYPE = BUTTON Value = "Make background red" onClick          = "colorBackground  ">        All thats left is to color the background by setting the documents bgColor property in the colorBackground    function:    < previous page    page_120  next page >  If you like this book, buy it!   < previous page  page_121  next page > Page 121           bgColor Example> TITLE>                        Set the documents bgColor property...              <INPUT TYPE = BUTTON Value = "Make background red" onClick          = "colorBackground  ">                    function colorBackground      {        document.bgColor = 0xff0000    }          Open this page now, as shown in Figure 3-3. When you click the button, the program sets the background color to red,  as you can see. Now were manipulating the document scripting objects propertiesnot just HTML elementswhen the user  clicks a button. The code for this page, bgColor.htm, is shown in Listing 3-3. In this way, we can work with the documents properties in code. This example works with both Internet Explorer and  Netscape Navigator. However, far more objects and properties are available in Internet Explorer that we can change on  the fly and immediately see reflected in the Web page. In our next example, well see how to resize a text box by  changing its size property, something you cant do in Netscape Navigator  the properties of objects you can change on  the fly in Netscape Navigator are listed in Table 2-1 .    < previous page    page_121  next page >  If you like this book, buy it!   < previous page  page_122  next page > Page 122  We set a document property to color a Web page red.  Figure 3-3   Listing 3-3  bgColor.htm.          bgColor Example                         Set the document's bgColor property...              <INPUT TYPE = BUTTON Value = "Make background red" onClick          = "colorBackground  ">                    function colorBackground      {          document.bgColor = 0xff0000    }            < previous page    page_122  next page >  If you like this book, buy it!   < previous page  page_123  next page > Page 123  TIP: In fact, all HTML tags are active now in Internet Explorer, so you can change their properties in a  script and see the changes immediately onscreen. This remarkable feature of Internet Explorer is new in  version 4.0     Using Controls to Set a Text Box's Size  In this next example, well again display a text box and a button in an Internet Explorer Web page. This time, however, when the user  clicks the button, well change the text boxs size property from 20 to 40, widening that control.  This example is simple to create. We just add the controls we need to a form, form1:           Resize Text Box Example                   <INPUT TYPE = TEXT NAME = Textbox SIZE = 20 VALUE = "You        can resize this box." >        <INPUT TYPE = BUTTON Value = "Resize text box" onClick =        "ResizeTextbox  ">        Weve connected the buttons click event to a function named ResizeTextbox  , which we add this way:           Resize Text Box Example                   < previous page    page_123  If you like this book, buy it!  next page >   < previous page  page_124  next page > Page 124  When the user clicks the button, we want to increase the text boxs size to 40 characters. We can also place a message in  the text box  This text box was resized. , as follows:     <INPUT TYPE = TEXT NAME = Textbox SIZE = 20 VALUE = "You        can resize this box.">        <INPUT TYPE = BUTTON Value = "Resize text box" onClick =        "ResizeTextbox  ">                    function ResizeTextbox      {      .      .      .    }                   Resize Text Box Example                   <INPUT TYPE = TEXT NAME = Textbox SIZE = 20 VALUE = "You        can resize this box.">        <INPUT TYPE = BUTTON Value = "Resize text box" onClick =        "ResizeTextbox  ">                     function ResizeTextbox      {        document.form1.Textbox.size = 40        document.form1.Textbox.value = "This text box was       resized."     < previous page  page_124  next page >      If you like this book, buy it!   < previous page  page_125  next page > Page 125    }          Thats all we need. Now open the page in Internet Explorer, as shown in Figure 3-4. When you click the button, the text  box is widened. In this way, we can use one of Internet Explorers instantly updateable HTML control properties. Well  learn more about using this aspect of Internet Explorer throughout this book. The code for this page, Resize.htm, is shown in Listing 3-4.  We resize a text box under program control.  Figure 3-4   Listing 3-4  Resize.htm.          Resize Text Box Example                   <INPUT TYPE = TEXT NAME = Textbox SIZE = 20 VALUE = "You        can resize this box.">        <INPUT TYPE = BUTTON Value = "Resize text box" onClick =        "ResizeTextbox  ">             < previous page    page_125  next page >  If you like this book, buy it!   < previous page  page_126  next page > Page 126  Listing 3-4  Continued.           function ResizeTextbox      {        document.form1.Textbox.size = 40        document.form1.Textbox.value = "This text box was       resized."    }         Now we have some idea of how to work with scripting elements  the document object, for example  and HTML  elements  like text boxes  in JavaScript. The rest of this book focuses working with the scripting elements available to  us, so lets continue now with more HTML elements, starting with text areas.  You use text areas when you have multiple lines of text to display. Text areas are like multiline text boxesyou specify  the number of rows and columns you want in your text area, and the text area is displayed with scrollbars so the user  can scroll through your text if that text cant all be displayed at once.  Here are the properties, methods, and event handlers for text areas  Text Areas  Properties defaultValue form name type value  Methods blur focus select  Event Handlers onBlur onChange onFocus onSelect    Well put together a text area example that presents a text area and a button with the prompt Display Message to the  user. When the user clicks the button, we can place a messageHello from JavaScriptinto the text area.    < previous page    next page >  page_126  If you like this book, buy it!   < previous page  page_127  next page > Page 127  We start the text area example with the   tag, giving our text area 30 columns and 10 rows by using the  COLS and ROWS attributes:        A Text Area Example                           .      .      .  Next, we add a button that, when clicked, calls a function named DisplayMessage  :        A Text Area Example                          <INPUT TYPE = BUTTON Value = "Display Message" onClick          = "DisplayMessage this.form " >             In that function, we simply set the text areas value property to Hello from JavaScrip:        A Text Area Example                          < previous page    page_127  next page >  If you like this book, buy it!   < previous page  page_128  next page > Page 128     <INPUT TYPE = BUTTON Value = "Display Message" onClick           = "DisplayMessage this.form ">                       function DisplayMessage form1       {          form1.Textarea.value = "Hello from JavaScript"          }          Thats itnow open this page, as shown in Figure 3-5. When you click the Display Message button, the program displays the Hello  from JavaScript message.  NOTE: As you can see, working with text areas is much like working with text boxes, except that now the user can  scroll through multiple lines of text if we have a lot of text to display.    The code for this page, Textarea.htm, is shown in Listing 3-5.     < previous page    Figure 3-5   We support a text area control.  page_128  If you like this book, buy it!  next page >   < previous page  page_129  next page > Page 129  Listing 3-5  Textarea.htm.       A Text Area Example                          <INPUT TYPE = BUTTON Value = "Display Message" onClick           = "DisplayMessage this.form ">                       function DisplayMessage form1       {          form1.Textarea.value = "Hello from JavaScript"      }         Text areas are one variation on the standard text box. Theres another variation well take a look at nowthe password  control.  Password Controls  The password control is really just a text control that masks the characters you type into it, displaying each character as  an asterisk  * . Because the text in the password control is masked, you can use it for low-security passwords because  anyone looking over your shoulder wont be able to read the actual text youve typed.  The password control has these properties, methods, and event handlers:    < previous page    page_129  If you like this book, buy it!  next page >   page_130  Event Handlers onBlur onFocus  Methods blur focus select  < previous page  Properties defaultValue form name type value     next page > Page 130  Well put together a quick password control example that displays a password control, a text box under that control, and  a button. When you type a password into the top box, the password control, all characters are masked. However, when  you click the Show Password button, we can read the text from the password control and display it in a standard text  box. Well put this example, Password.htm, together now, starting with the password control itself, which uses the    tag and requires the TYPE attribute set to PASSWORD:        A Password Example                  Enter a password in the top box...                     .          .          .  Next, we add the text box well need:        A Password Example                  Enter a password in the top box...        < previous page    page_130  next page >  If you like this book, buy it!   next page > Page 131  < previous page  page_131                         .          .          .  We also add the button the user clicks to display the passwords unmasked text:        A Password Example                  Enter a password in the top box...                            <INPUT TYPE = BUTTON Value = "Show Password" onClick =        "ShowPassword  ">           .           .           .  In JavaScript, all we need to do is to copy the text from the password control and display it in the text box when the user  clicks the button:       A Password Example                  Enter a password in the top box...        < previous page    page_131  next page >  If you like this book, buy it!   < previous page  page_132  next page > Page 132                       <INPUT TYPE = BUTTON Value = "Show Password" onClick =        "ShowPassword  ">                      function ShowPassword        {          document.form1.Textbox.value = document.form1.        Password.value       }        Thats all it takes. Now open this page as shown in Figure 3-6 and type a password into the top box, the password control. After doing so,  click the Show Password button to see the password itself in the second box, the text box. As you can see, the text that was hidden in the  password control is available to us in JavaScript.  NOTE: Note that the password control really offers minimal security because the password is available to any  script on the page. In fact, the password control should more properly be called a masking control.     Listing 3-6 shows the code for this page, Password.htm. Now weve looked at two variations on the text box: text areas and password controls. Well take a look some variations on the button  control nextthe submit and reset controls.    < previous page    page_132  next page >  If you like this book, buy it!   < previous page  page_133  next page > Page 133  Figure 3-6   The password control hides its text.  Listing 3-6  Password.htm.       A Password Example                  Enter a password in the top box...                            <INPUT TYPE = BUTTON Value = "Show Password" onClick =        "ShowPassword  ">                   < previous page    page_133  next page >  If you like this book, buy it!   next page > Page 134  < previous page  page_134  Listing 3-6  Continued.        function ShowPassword        {          document.form1.Textbox.value = document.form1.       Password.value      }        Submit and Reset Buttons  One of the reasons JavaScript uses controls organized into forms is that forms give us the capability of sending  information back to the Web server. For example, you might have a guestbook in your Web page with a few text boxes  and a text area, as shown here:       < previous page    page_134  next page >  If you like this book, buy it!   < previous page  page_135  next page > Page 135  The user can type information into the controls in the page and click the buttom marked Submit to send all the information back to the  Web server.  Back on the server, you must decode the information thats been sent, using Common Gateway Interface  CGI  programming techniques  such as Perl programming  Perl is a server-side language for writing CGI scripts . In this case, the CGI program interprets the information  sent by the user and enters that information into the guestbook. If the user clicks the Reset button, on the other hand, the controls in the  form are cleared of all text, and the user can start over.  TIP: Now you can run JavaScript on your server if youre running a Netscape server that includes Netscape  LiveWire, which supports a set of server-side JavaScript extensions  in Netscape Enterprise Server 3.0 and  later, the LiveWire JavaScript extensions are built into the server, instead of being considered a separate  LiveWire addition . In this way, you can process the information sent from client-side Web pages back to the  server using JavaScript.     One common use of JavaScript is form validationchecking the information the user is trying to send before it has to travel back to the  server. If theres an error of some kind, for example, you can display an error message before having to send the data back to the server  and have the server send the error message back.  Lets see an example of this process. Well consider it an error if the user hasnt put his or her name in the Name text box of our guest book.  We can test the data with JavaScript before that data is sent and display an alert box if the user left the Name box blank. In this example, Submit.htm, well enclose our form in a table, giving it a colored background to set it off from the rest of the page.  Heres how we start that table, coloring it cyan:               A Submit Button Example                       < previous page    page_135  If you like this book, buy it!  next page >   < previous page  page_136  next page > Page 136     A Submit Button Example                         .          .          .  Next, we include a prompt to the user to enter the information and start our form. Here, we set the forms METHOD  attribute to POST, which means this forms information can be sent back to the server, and its ACTION attribute to the  URL of the guestbook itself so the CGI file on the server knows where to find the guestbook  this is common for  guestbook CGI scripts :             A Submit Button Example                       A Submit Button Example                 Sign the guestbook, include your comments below, and see        what others have said...            <FORM NAME = form1 onSubmit = "return checkForm  "        METHOD=POST           ACTION="http:  www.server.com cgi guest-        book.cgi guestbook.htm'' >           .           .           .     < previous page    page_136  next page >  If you like this book, buy it!   < previous page  page_137  next page > Page 137  Note also that we use the forms onSubmit event handler, the one thats called when the user clicks the Submit button. The function well  use to check the users name, checkForm  , will return a value of true if the form is acceptable and false otherwise. We then pass this  value back to the browser; true means the browser should send the form, and false means it should not.  TIP: If you want to actually implement a guestbook like this one, youll need to install the appropriate CGI  programs on your server. Many such CGI programs are available free on the Web.     Now we add the first controls well need in the guestbook formtwo text boxes and a text area:             A Submit Button Example                       A Submit Button Example              TD BGCOLOR = cyan>  Sign the guestbook, include your comments below, and see       what others have said...            <FORM NAME = form1 onSubmit = "return checkForm  "        METHOD=POST           ACTION="http:  www.server.com cgi guestbook.cgi         guestbook.htm''>  Name:            Email: <INPUT TYPE="text" NAME="address" SIZE=30        MAXLENGTH=30>     < previous page    page_137  If you like this book, buy it!  next page >   next page > Page 138  < previous page  page_138                     .   .   .  Finally, we add the Submit and Reset buttons well use:             A Submit Button Example                       A Submit Button Example                 Sign the guestbook, include your comments below, and see       what others have said...            <FORM NAME = form1 onSubmit = "return checkForm  "        METHOD=POST           ACTION="http:  www.server.com cgi guestbook.cgi         guestbook.htm">  Name:            Email: <INPUT TYPE="text" NAME="address" SIZE=30       MAXLENGTH=30>            TEXTAREA>             < previous page    page_138  next page >  If you like this book, buy it!   < previous page  page_139  next page > Page 139                           That takes care of the controls in the formthe Submit and Reset buttons are active automatically. If the user clicks  Submit, our checkForm   function is called to check the form; if its OK, well send the form. If the user clicks Reset,  the browser automatically clears all the controls in the form. Now well write the checkForm   function. In this function, we want to check the text box weve called Name in the  form because this text box holds the users name. If this text box is empty, we will display an alert box with the text  Please enter your name and return a value of false to the Web browser so it wont send the form. Heres how we  test the data in the Name text box:  If, on the other hand, the text box is not empty, we return a value of true so the browser will send the form:           function checkForm        {          if  document.form1.name.value == "" {              alert "Please enter your name"               return false          }                  .                  .                  .       function checkForm    {      if  document.form1.name.value == "" {          alert "Please enter your name"           return false      }      else{          return true      }  }          < previous page    page_139  next page >  If you like this book, buy it!   page_140  < previous page  next page > Page 140 The Submit.htm example is ready to go, so try opening it. If you dont enter anything in the Name text box and click  Submit, the program displays an alert box, as shown in Figure 3-7, and will not send the form back to the server. On the  other hand, if you do include a name, the browser sends the form back to the server  although it wont get very far  because the server name weve used in our form, www.server.com, is really just a placeholder for the name of your  server . The Submit.htm example is working the way we want it to! The code for this page, Submit.htm, is shown in Listing 3-7.  We check a forms data before sending it to the server.  Figure 3-7   Listing 3-7  Submit.htm.            A Submit Button Example                         A Submit Button Example                  < previous page    page_140  next page >  If you like this book, buy it!   < previous page  page_141  next page > Page 141  Listing 3-7  Continued.     Sign the guestbook, include your comments below, and see       what others have said...            <FORM NAME = form1 onSubmit = "return checkForm  "        METHOD=POST         ACTION="http:  www.server.com cgi guestbook.cgi         guestbook.htm">  Name:            Email: <INPUT TYPE="text" NAME="address" SIZE=30        MAXLENGTH=30>                                                          function checkForm        {          if  document.form1.name.value == "" {              alert "Please enter your name"               return false          }          else{              return true           }      }                     < previous page    page_141  next page >  If you like this book, buy it!   < previous page  page_142  next page > Page 142  Theres another control we should look at while discussing sending information back to Web serversthe file control.  File Controls  Theres another way to upload information from a Web page in HTMLyou can use a file control. This control uploads an  entire file that the user selects.  The file controls properties are form, name, type, and value; its methods are blur and focus; and its events are onBlur,  onChange, and onFocus. Visually, a file control consists of both a text box to hold the files name and a button labeled  Browse. The user can either enter a filename in the text box directly or click the Browse button to browse for a file  the  brower opens a window with lists of files and drives for the user to look through . Lets add a file control to our previous example, calling this new example Filer.htm. Adding a file control is easy.  We just place a prompt into the Web pageIf you prefer, attach a file containing your comments . . . and label the file  control with a string reading, File name: , as shown here:             A Submit Button Example                         A Submit Button Example                    < previous page    page_142  next page >  If you like this book, buy it!   < previous page  page_143  next page > Page 143  Sign the guestbook, include your comments below, and see       what others have said...            <FORM NAME = form1 onSubmit = "return checkForm  "        METHOD=POST         ACTION="http:  www.server.com cgi guestbook.cgi         guestbook.htm">  Name:            Email: <INPUT TYPE="text" NAME="address" SIZE=30        MAXLENGTH=30>            TEXTAREA>             If you prefer, attach a file containing your comments...     File name:                                     Thats all it takesopen this page now, as shown in Figure 3-8. You can see the file control at the bottom of the form; the  user can enter a filename there to automatically upload the file when he or she clicks the Submit button. The code for this example, Filer.htm, is shown in Listing 3-8.    < previous page    page_143  next page >  If you like this book, buy it!   < previous page  page_144  next page > Page 144  The file control lets the user upload a file.  Figure 3-8   Listing 3-8  Filer.htm.            A Submit Button Example                         A Submit Button Example                 Sign the guestbook, include your comments below, and see       what others have said...               <FORM NAME = form1 onSubmit = "return checkForm  "        METHOD=POST     < previous page    page_144  If you like this book, buy it!  next page >   < previous page  page_145  next page > Page 145  Listing 3-8  Continued.         ACTION="http:  www.server.com cgi guestbook.cgi           guestbook.htm">  Name:            Email: <INPUT TYPE="text" NAME="address" SIZE=30          MAXLENGTH=30>                         If you prefer, attach a file containing your comments...     File name:                                               function checkForm        {          if  document.form1.name.value == "" {              alert "Please enter your name"               return false          }          else{              return true           }      }                  < previous page    page_145  next page >   If you like this book, buy it!   < previous page  page_146  next page > Page 146  The last control well examine in this chapter is the hidden control, which is very useful. All the data in the controls  weve worked with so far has been visible to the user  even if it was masked, as with the password control , but  sometimes you want to store data that the user cant see for some behind-the-scenes processing. You can do that with the  hidden control.  Hidden Controls  The hidden control is really just a storage place for text data that you can use in a Web page. This data is hidden from  the user, and you use it for internal processing in your program. For example, you can hold data in a hidden control as a  backup and restore that data to other controls if needed. The hidden control has the properties name, type, and value,  and it has no methods or event handlers. Well put together an example using the hidden control that display a text box with the text Hello from  JavaScript. The user can change that text, altering it in some way. However, we will be able to restore that text if  we have it stored as a backup in a hidden control, retrieving that data when the user clicks a button labeled Restore  default. Well start this example, Hidden.txt, by placing the text box and the button into the Web page:           A Hidden Control Example                     Change the text, then click the button to restore it...                        <INPUT TYPE = BUTTON Value = "Restore default" onClick =        restoreData  >     < previous page    page_146  next page >  If you like this book, buy it!   < previous page  page_147  next page > Page 147              .              .              .  Note that when the user clicks the Restore default button, the browser calls a function named restoreData  . In  that function, we retrieve the original stringHello from JavaScript from a hidden control and restore it in the  text box.  We add the hidden control, which well name backup, to our Web page this way:           A Hidden Control Example                     Change the text, then click the button to restore it...                        <INPUT TYPE = BUTTON Value = "Restore default" onClick =        restoreData  >  <INPUT TYPE = HIDDEN NAME = backup VALUE = "Hello from        JavaScript" >      <-             Note that we place the text Hello from JavaScript into the hidden controls value property to load our backup. In the script portion of the page, then, we start by loading that same string into the pages text box:           document.form1.Textbox.value =  "Hello from JavaScript"          .          .          .     < previous page    page_147  next page >  If you like this book, buy it!   < previous page  page_148  next page > Page 148  Next, we write the function, restoreData  , that will be called when the user clicks the Restore default button:           document.form1.Textbox.value =  "Hello from JavaScript"        function restoreData        {        .        .        .      }              document.form1.Textbox.value =  "Hello from JavaScript"        function restoreData        {          document.form1.Textbox.value =       document.form1.backup.value      }     When the browser calls this function, we are supposed to reload the text box with the string from the hiddencontrol. We  can do that in one line of JavaScript:  That completes our Hidden.htm page, so try openin it now. The user can edit our Hello from JavaScript  string, as shown in Figure 3-9.      The user changes the data in a text box, but we can restore that data.  Figure 3-9    < previous page    page_148  next page >  If you like this book, buy it!   < previous page  page_149  next page > Page 149  To restore the string to its original value when the user clicks the Restore default button, we simply reload the text box from the hidden  control, as shown in Figure 3-10.  TIP: Because we can store data in a JavaScript program as easily as we can in a hidden control, it usually  makes sense to simply store our data in our code, not in hidden controls. Typically, hidden controls are used  in forms to make sure some information not visible to the user is sent along with the rest of the form to the  server when the user clicks the Submit button.    The code for this page, Hidden.htm, is shown in Listing 3-9.  Figure 3-10   We restore data with the hidden control.  Listing 3-9  Hidden.htm.          A Hidden Control Example                     Change the text, then click the button to restore it...                  < previous page  page_149  next page >      If you like this book, buy it!   < previous page  page_150  next page > Page 150           <INPUT TYPE = BUTTON Value = "Restore default" onClick =        restoreData  >   <INPUT TYPE = HIDDEN NAME = backup VALUE = "Hello from        JavaScript">                         document.form1.Textbox.value =  "Hello from JavaScript"        function restoreData        {          document.form1.Textbox.value =       document.form1.backup.value      }          Conclusion  That completes this chapter. Weve covered a great deal here, from embedding controls like text boxes in Web pages to  using active controls like buttons, text areas, password controls, and more. Weve seen how to work with HTML  elements in JavaScript and how to work with scripting objects such as the document object. Weve also learned how to  work with submit, reset, file, and hidden controls, adding more power to our Web pages. Weve come a long way.  In the next chapter, were going to work with even more powerful controls: check boxes, radio buttons, and select  controls.    < previous page    page_150  next page >  If you like this book, buy it!   < previous page  page_151  next page > Page 151  Chapter 4  Forms: Check Boxes and Radio Buttons  In this chapter, were going to continue the work we started in the previous chapter, exploring the form-based controls in  JavaScript. Were going to learn about some truly powerful controls: check boxes, radio buttons, and select  scrolling  list  controls.  These controls are familiar to Windows users. Check boxes, display a checkmark when you click them, radio buttons  display a black dot in their center, and select controls display a list of options the user can select from.  Well start with check boxes, move on to radio buttons, and then use check boxes with radio buttons. After that, well  work with select controls of two sorts: those for selecting one item and those for selecting multiple items.    < previous page    page_151  next page >  If you like this book, buy it!   < previous page  page_152  next page > Page 152  As mentioned, a check box appears as a small, labeled square box that, when clicked, toggles a checkmark on and off.  Here are the properties, methods, and event handlers of the check box control:  Check Boxes  checked defaultChecked form name type value     Properties  Methods  Event Handlers  blur click focus  onBlur onClick onFocus  In our first check box example, well show the user a number of check boxes, like this:     < previous page    page_152  next page >  If you like this book, buy it!   < previous page  page_153  next page > Page 153  When the user clicks a check box, well use a text box to report which check box has been clicked.  Well start this example, Checks.htm, with the form well need  form1  and a prompt to the user, as shown here:           A Check Box Example                      Click one of the check boxes...       .    .    .  Creating Check Boxes           A Check Box Example                      Click one of the check boxes...          Well create the check boxes we need with the   tag, setting its TYPE attribute to CHECKBOX. Next, well  name each of the check boxes well use and give each one its own click event handler. Well connect the first check box  to check1Clicked  , the second check box to check2Clicked  , and so on. To make the page look a little neater, we can  place the check boxes in a table that has a cyan background. Heres how we add the check boxes and the text box:     < previous page    page_153  next page >  If you like this book, buy it!   < previous page  page_154  next page > Page 154    <INPUT TYPE = CHECKBOX NAME = Check1 onClick =        check1Clicked  >Check 1          <INPUT TYPE = CHECKBOX NAME = Check2 onClick =       check2Clicked  >Check 2          <INPUT TYPE = CHECKBOX NAME = Check3 onClick =       check3Clicked  >Check 3          <INPUT TYPE = CHECKBOX NAME = Check4 onClick =       check4Clicked  >Check 4          <INPUT TYPE = CHECKBOX NAME = Check5 onClick =       check5Clicked  >Check 5                  <-        TIP: If you want a check box to be checked when its first displayed, place the attribute CHECKED in its    tag. Nothing else is needed, such as CHECKED = TRUEjust use the keyword CHECKED.     As weve set things up, when the user clicks the first check box, the browser calls the function check1Clicked  , when the user clicks the  second check box, the browser calls check2Clicked  , and so on, so well add those functions now. In each of those functions, we indicate  which check box the user clicked with a message in the text box:           A Check Box Example                      Click one of the check boxes...               <INPUT TYPE = CHECKBOX NAME = Check1 onClick =       check1Clicked  >Check 1         <INPUT TYPE = CHECKBOX NAME = Check2 onClick =       check2Clicked  >Check 2         <INPUT TYPE = CHECKBOX NAME = Check3 onClick =       check3Clicked  >Check 3       < previous page    page_154  If you like this book, buy it!  next page >   < previous page  page_155  next page > Page 155        <INPUT TYPE = CHECKBOX NAME = Check4 onClick =        check4Clicked  >Check 4         <INPUT TYPE = CHECKBOX NAME = Check5 onClick =        check5Clicked  >Check 5                                      function check1Clicked   {          document.form1.Textbox.value = "Check box 1 was       clicked."      }        function check2Clicked   {          document.form1.Textbox.value = "Check box 2 was       clicked."      }        function check3Clicked   {          document.form1.Textbox.value = "Check box 3 was       clicked."      }        function check4Clicked   {          document.form1.Textbox.value = "Check box 4 was       clicked."      }        function check5Clicked   {          document.form1.Textbox.value = "Check box 5 was       clicked."      }            The Checks.htm page is ready to go, so open it now. When you click one of the check boxes, the program indicates  which one was clicked in the text box, as shown in Figure 4-1. Now weve added handling check boxes to our JavaScript  capabilities.    < previous page    next page >  page_155  If you like this book, buy it!   < previous page  page_156  next page > Page 156  Figure 4-1   We use check boxes in a program.  The code for this page, Checks.htm, is shown in Listing 4-1.  Listing 4-1  Checks.htm.          A Check Box Example                      Click one of the check boxes...               <INPUT TYPE = CHECKBOX NAME = Check1 onClick =       check1Clicked  >Check 1         <INPUT TYPE = CHECKBOX NAME = Check2 onClick =       check2Clicked  >Check 2         <INPUT TYPE = CHECKBOX NAME = Check3 onClick =       check3Clicked  >Check 3         <INPUT TYPE = CHECKBOX NAME = Check4 onClick =       check4Clicked  >Check 4         <INPUT TYPE = CHECKBOX NAME = Check5 onClick =       check5Clicked  >Check 5                    < previous page    page_156  If you like this book, buy it!  next page >   < previous page  page_157  next page > Page 157  Listing 4-1  Coontinued.                      function check1Clicked   {         document.form1.Textbox.value = "Check box 1 was       clicked."     }       function check2Clicked   {         document.form1.Textbox.value = "Check box 2 was       clicked."     }       function check3Clicked   {         document.form1.Textbox.value = "Check box 3 was       clicked."     }       function check4Clicked   {         document.form1.Textbox.value = "Check box 4 was       clicked."     }       function check5Clicked   {         document.form1.Textbox.value = "Check box 5 was       clicked."     }            Radio buttons are very similar to check boxes; well take a look at them in the following section.  Radio Buttons  Radio buttons are like check boxes, except that they work in a group. Only one radio button in the group can be checked  at once, making the options they present to the user exclusive ones. Check boxes let the user select a number of options  at oncelike condiments on a hamburgerbut radio buttons let the user select only one option at a time, such as the current  day of the week.    < previous page    next page >  page_157  If you like this book, buy it!   < previous page  page_158  next page > Page 158  Radio buttons have the same properties, methods, and event handlers as check boxes:  Properties  Methods  Event Handlers  blur click focus  onBlur onClick onFocus  checked defaultChecked form name type value     To get experience with these new controls, well write a radio button example that displays several radio buttons to the  user, as shown here:  When the user clicks one of the radio buttons, well indicate in the text box which radio button was clicked. Because  these controls are radio buttons, only one can be selected  that is, display a black dot in its center  at a time; if you click  a new radio button, the old one is automatically deselected.    < previous page    page_158  next page >  If you like this book, buy it!   < previous page  page_159  next page > Page 159  Creating Radio Buttons  How do the radio buttons know to act in concert? We design them that way by giving the radio buttons we want to group together the  same name. Heres how we do that in our new example, Radios.htm:           A Radio Button Example                        Click one of the radio buttons...                <INPUT TYPE = RADIO NAME = RadioButtons       onClick = radio1Clicked  >Radio 1          <INPUT TYPE = RADIO NAME = RadioButtons       onClick = radio2Clicked  >Radio 2          <INPUT TYPE = RADIO NAME = RadioButtons       onClick = radio3Clicked  >Radio 3          <INPUT TYPE = RADIO NAME = RadioButtons       onClick = radio4Clicked  >Radio 4          <INPUT TYPE = RADIO NAME = RadioButtons       onClick = radio5Clicked  >Radio 5       TIP: As with check boxes, if you want a radio button to be checked when its first displayed, place the  attribute CHECKED in its   tag.     Giving each radio button the same name groups them together so they act together, as opposed to the check boxes, which we named  individually:           <INPUT TYPE = CHECKBOX NAME = Check1 onClick =        check1Clicked  >Check 1          <INPUT TYPE = CHECKBOX NAME = Check2 onClick =        check2Clicked  >Check 2          <INPUT TYPE = CHECKBOX NAME = Check3 onClick =        check3Clicked  >Check 3       < previous page    page_159  If you like this book, buy it!  next page >   < previous page  page_160  next page > Page 160        <INPUT TYPE = CHECKBOX NAME = Check4 onClick =        check4Clicked  >Check 4          <INPUT TYPE = CHECKBOX NAME = Check5 onClick =        check5Clicked  >Check 5       Weve connected the radio buttons to the functions radio1Clicked  , radio2Clicked  , and so on, so we add those  functions now:          A Radio Button Example                        Click one of the radio buttons...               <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio1Clicked  >Radio 1         <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio2Clicked  >Radio 2         <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio3Clicked  >Radio 3         <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio4Clicked  >Radio 4         <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio5Clicked  >Radio 5                                        function radio1Clicked        {            document.form1.TextBox.value = "Radio button 1        was clicked."      }        function radio2Clicked         < previous page    page_160  next page >  If you like this book, buy it!   < previous page  page_161  next page > Page 161      {           document.form1.TextBox.value = "Radio button 2       was clicked."      }        function radio3Clicked        {           document.form1.TextBox.value = "Radio button 3       was clicked."      }        function radio4Clicked        {           document.form1.TextBox.value = "Radio button 4       was clicked."      }        function radio5Clicked        {            document.form1.TextBox.value = "Radio button 5        was clicked."      }            Open the Radios.htm page now. When you click a radio button, the program reports which one you clicked, as shown in  Figure 4-2. When you click another radio button, the first one is deselected automatically. The Radios.htm example  works as we intended.  The code for this example, Radios.htm, is shown in Listing 4-2.      < previous page    Figure 4-2   We support radio buttons in a program.  page_161  next page >  If you like this book, buy it!   < previous page  page_162  next page > Page 162  Listing 4-2  Radios.htm.          A Radio Button Example                      Click one of the radio buttons...               <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio1Clicked  >Radio 1         <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio2Clicked  >Radio 2         <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio3Clicked  >Radio 3         <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio4Clicked  >Radio 4         <INPUT TYPE = RADIO NAME = RadioButtons onClick       = radio5Clicked  >Radio 5                                       function radio1Clicked       {          document.form1.TextBox.value = "Radio button 1 was       clicked."     }       function radio2Clicked       {          document.form1.TextBox.value = "Radio button 2 was       clicked."     }       function radio3Clicked       {          document.form1.TextBox.value = "Radio button 3 was       clicked."      < previous page    page_162  next page >  If you like this book, buy it!   < previous page  page_163  next page > Page 163  Listing 4-2  Continued.    }       function radio4Clicked       {          document.form1.TextBox.value = "Radio button 4 was       clicked."     }       function radio5Clicked       {          document.form1.TextBox.value = "Radio button 5 was       clicked."     }           Now that weve seen how to use check boxes and radio buttons, we will take a look at how to use these controls together.  Putting Check Boxes and Radio Buttons Together  Its common to use radio buttons and check boxes together. For example, we can create a Web page offering different  types of donuts to buyplain, chocolate, jelly, and so onwith options like sprinkles, powdered sugar, and frosting. When  the user clicks a radio button to select a type of donutonly one type of donut can be selected because radio buttons have  been usedthe program checks different check boxes indicating which options come with that donut.  Well display a price for the donut in the text box at the bottom  to keep it simple in this example, well just make each  donut option worth fifty cents . When the user selects another type of donut, we can display that donuts options. In fact,  we can even let users select their own options by clicking check boxes; when they click a check box, well compute and  display the new cost.  Lets start this example, Donuts.htm, with a form  form1  and a prompt to the user:             < previous page    page_163  next page >  If you like this book, buy it!   < previous page  page_164  next page > Page 164   The Donut Example                      Select your donut!            Next, we add the radio buttons well use. These buttons will go in a table on the left side of the page, so we use the  ALIGN attribute here, setting it to LEFT:           The Donut Example                      Select your donut!                       <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio1Clicked  >Plain          <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio2Clicked  >Chocolate          <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio3Clicked  >Jelly          <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio4Clicked  >Cream-filled          <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio5Clicked  >Strawberry           .      .      .  Next, we add the check boxes on the right, using ALIGN = RIGHT:        < previous page    page_164  next page >   If you like this book, buy it!   < previous page  page_165  next page > Page 165      The Donut Example                      Select your donut!                       <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio1Clicked  >Plain          <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio2Clicked  >Chocolate          <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio3Clicked  >Jelly          <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio4Clicked  >Cream-filled          <INPUT TYPE = RADIO NAME = RadioGroup onClick       = radio5Clicked  >Strawberry                  <INPUT TYPE = CHECKBOX NAME = Check1 onClick =       check1Clicked  >Plain          <INPUT TYPE = CHECKBOX NAME = Check2 onClick =       check2Clicked  >Sprinkles          <INPUT TYPE = CHECKBOX NAME = Check3 onClick =       check3Clicked  >Powdered sugar          <INPUT TYPE = CHECKBOX NAME = Check4 onClick =       check4Clicked  >Frosted          <INPUT TYPE = CHECKBOX NAME = Check5 onClick =       check5Clicked  >Filled       Now that weve installed the radio buttons and the check boxes, we add the text box well use. To end the right and left  alignment of page elements, we use a   tag:           The Donut Example              < previous page    page_165  next page >  If you like this book, buy it!   < previous page  page_166  next page > Page 166           Select your donut!                      <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio1Clicked  >Plain         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio2Clicked  >Chocolate         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio3Clicked  >Jelly         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio4Clicked  >Cream-filled         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio5Clicked  >Strawberry                 <INPUT TYPE = CHECKBOX NAME = Check1 onClick =       check1Clicked  >Plain         <INPUT TYPE = CHECKBOX NAME = Check2 onClick =       check2Clicked  >Sprinkles         <INPUT TYPE = CHECKBOX NAME = Check3 onClick =       check3Clicked  >Powdered sugar         <INPUT TYPE = CHECKBOX NAME = Check4 onClick =       check4Clicked  >Frosted         <INPUT TYPE = CHECKBOX NAME = Check5 onClick =       check5Clicked  >Filled                    <INPUT TYPE  =  TEXT NAME  =  TextBox SIZE  =  30 ALIGN =       CENTER>          Now well work on the code for this page. When the user clicks a radio button, we want to do three thingsclear all the  check boxes that might have already been clicked, check the check boxes that represent the correct options for the  current type of donut, and calculate the cost of the donut. Well handle each of these tasks in a function: clearCheckBoxes   , setCheckBox  , and calculateCost  .  Writing these three functions will show us how to examine check boxes from code to see whether theyve been clicked  and how to select them ourselves if we need to.    < previous page    page_166  next page >   If you like this book, buy it!   < previous page  page_167  next page > Page 167  The first function well write is clearCheckBoxes  , which clears the check boxes, Check1 to Check5, in our Web page:  The clearCheckBoxes   Function  function clearCheckBoxes    {    .    .    .  }  One way  and not the shortest way, as well see in a minute  to clear a check box is to use the check box method click    to make the program act as though weve clicked a check box. We can clear a check box by seeing if its currently  checked, and if so, execute its click   method. But how do we see whether a check box is currently selected?  We can use the check boxs checked property to determine whether the check box is checked, like this for Check1:  If the check box is clicked, we want to click it again to clear it, which we do like this:  function clearCheckBoxes    {       if document.form1.Check1.checked {           .           .           .       }  }  function clearCheckBoxes    {       if document.form1.Check1.checked {           document.form1.Check1.click         }  }  We can clear the other check boxes as well: function clearCheckBoxes    {       if document.form1.Check1.checked {           document.form1.Check1.click         }       if document.form1.Check2.checked {           document.form1.Check2.click       < previous page    page_167  next page >  If you like this book, buy it!   < previous page  page_168  next page > Page 168  This method for clearing all the check boxes introduces us to the checked property and the click   method. However, its  not the best way. Theres a simpler way; the checked property turns out to be a read write property, which means we can  set the state of a check box by writing to this propertychecked = true sets the check box and checked = false clears the  check box. Using that method, heres what our clearCheckBoxes   method will look like:       }       if document.form1.Check3.checked {           document.form1.Check3.click         }       if document.form1.Check4.checked {           document.form1.Check4.click         }       if document.form1.Check5.checked {           document.form1.Check5.click         }  }  function clearCheckBoxes    {       document.form1.Check1.checked = false       document.form1.Check2.checked = false       document.form1.Check3.checked = false       document.form1.Check4.checked = false       document.form1.Check5.checked = false  }  Thats all there is to it; next, well create the setCheckBox   function.  The setCheckBox number  Function  We can pass the number of the check box to check to the setCheckBox   function. For example, if we pass 1 to  setCheckBox  , we check the first check box; passing 2 sets check box 2, and so on.  We can use a switch statement to check the correct check box, as shown here:  function setCheckBox number   {       switch number {           case 1:               document.form1.Check1.checked = true               break           case 2:               document.form1.Check2.checked = true     < previous page    page_168  next page >  If you like this book, buy it!   next page > Page 169  < previous page  page_169               break           case 3:               document.form1.Check3.checked = true               break           case 4:               document.form1.Check4.checked = true               break           case 5:               document.form1.Check5.checked = true               break       }  }  The only function left to write is the calculateCost   function.  The calculateCost   Function  In the calculateCost   function, we will determine what check boxes are checked and calculate the cost of a donut that  way, at fifty cents per checked option. At the end of the function, we display the total cost in the Web pages text box.  The calculateCost   function is easy to writewe just look at the check boxes and add up the cost:  function calculateCost    {       var cost = 0       if document.form1.Check1.checked {           cost = cost + .50       }       if document.form1.Check2.checked {           cost = cost + .50       }       if document.form1.Check3.checked {           cost = cost + .50       }       if document.form1.Check4.checked {           cost = cost + .50       }       if document.form1.Check5.checked {           cost = cost + .50       }       document.form1.TextBox.value = "Total cost: $" + cost  }  Now our three functions, clearCheckBoxes  , setCheckBox  , and calculateCost  , are finished. Lets put them to work.    < previous page    page_169  next page >  If you like this book, buy it!   < previous page  page_170  next page > Page 170  Responding to the Radio Buttons in Donuts.htm  When the user clicks the first radio buttonthe Plain donuts optionwe should clear the check boxes and set the first check  box, which corresponds to the Plain option. Then we calculate and display the cost of the donut with calculateCost   this  way:  We can do the same for the other donut types, as follows:          function radio1Clicked       {          clearCheckBoxes            setCheckBox 1           calculateCost       }    .          .          .          function radio1Clicked       {          clearCheckBoxes            setCheckBox 1           calculateCost       }       function radio2Clicked       {          clearCheckBoxes            setCheckBox 4           calculateCost       }       function radio3Clicked       {          clearCheckBoxes            setCheckBox 3           setCheckBox 5           calculateCost       }       function radio4Clicked       {          clearCheckBoxes            setCheckBox 2           setCheckBox 3      < previous page    page_170  next page >  If you like this book, buy it!   < previous page  page_171  next page > Page 171  In addition, if the user clicks a check box to change the options for the displayed donut, we should recalculate the cost,  so we call calculateCost   each time a check box is clicked:          setCheckBox 5           calculateCost       }       function radio5Clicked       {          clearCheckBoxes            setCheckBox 4           setCheckBox 5           calculateCost       }     function check1Clicked        {          calculateCost       }       function check2Clicked        {          calculateCost       }       function check3Clicked        {          calculateCost       }       function check4Clicked        {          calculateCost       }       function check5Clicked        {          calculateCost       }  Thats itnow open this page, as shown in Figure 4-3. As you can see, when you click a radio button, the corresponding  check boxes are automatically selected. In this way, we can integrate radio buttons and check boxes in our programs.  The code for this page, Donuts.htm, is shown in Listing 4-3.  The program weve just developed is a long one, and its long because we have treated each check box as a separate  controlCheck1, Check2, and so on. However, JavaScript has provisions for working with many con-    < previous page    page_171  next page >  If you like this book, buy it!   < previous page  page_172  next page > Page 172  We use check boxes and radio buttons to list donut options.  Figure 4-3   trols in a Web page; now that were working with multiple controls, well take a look at those provisions in the following  section.  Listing 4-3  Dounts.htm.          The Donut Example                      Select your donut!                      <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio1Clicked  >Plain         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio2Clicked  >Chocolate         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio3Clicked  >Jelly         <INPUT TYPE = RADIO NAME = RadioGroup onClick =         radio4Clicked  >Cream-filled         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       radio5Clicked  >Strawberry         < previous page    page_172  If you like this book, buy it!  next page >   < previous page  page_173  next page > Page 173  Listing 4-3  Continued.         <INPUT TYPE = CHECKBOX NAME = Check1 onClick =       check1Clicked  >Plain         <INPUT TYPE = CHECKBOX NAME = Check2 onClick =       check2Clicked  >Sprinkles         <INPUT TYPE = CHECKBOX NAME = Check3 onClick =       check3Clicked  >Powdered sugar         <INPUT TYPE = CHECKBOX NAME = Check4 onClick =       check4Clicked  >Frosted         <INPUT TYPE = CHECKBOX NAME = Check5 onClick =       check5Clicked  >Filled                    <INPUT TYPE  =  TEXT NAME  =  TextBox SIZE  =  30 ALIGN =        CENTER>                         function radio1Clicked       {          clearCheckBoxes            setCheckBox 1           calculateCost       }       function radio2Clicked       {          clearCheckBoxes            setCheckBox 4           calculateCost       }       function radio3Clicked       {          clearCheckBoxes            setCheckBox 3           setCheckBox 5           calculateCost       }       function radio4Clicked       {          clearCheckBoxes            setCheckBox 2       < previous page    page_173  next page >  If you like this book, buy it!   < previous page  page_174  next page > Page 174  Listing 4-3  Continued.         setCheckBox 3           setCheckBox 5           calculateCost       }       function radio5Clicked       {          clearCheckBoxes            setCheckBox 4           setCheckBox 5           calculateCost       }       function check1Clicked        {          calculateCost       }       function check2Clicked        {          calculateCost       }       function check3Clicked        {          calculateCost       }       function check4Clicked        {          calculateCost       }       function check5Clicked        {          calculateCost       }       function clearCheckBoxes       {          document.form1.Check1.checked = false          document.form1.Check2.checked = false          document.form1.Check3.checked = false          document.form1.Check4.checked = false          document.form1.Check5.checked = false     }       function setCheckBox number      {          switch number {              case 1:                  document.form1.Check1.checked = true                  break      < previous page    page_174  next page >  If you like this book, buy it!   < previous page  page_175  next page > Page 175  Listing 4-3  Continued.             case 2:                  document.form1.Check2.checked = true                  break              case 3:                  document.form1.Check3.checked = true                  break              case 4:                  document.form1.Check4.checked = true                  break              case 5:                  document.form1.Check5.checked = true                  break          }     }       function calculateCost       {          var cost = 0          if document.form1.Check1.checked {              cost = cost + .50          }          if document.form1.Check2.checked {              cost = cost + .50          }          if document.form1.Check3.checked {              cost = cost + .50          }          if document.form1.Check4.checked {              cost = cost + .50          }          if document.form1.Check5.checked {              cost = cost + .50          }          document.form1.TextBox.value = "Total cost: $" +       cost     }          Using the elements[] Arrays  The controls in our Web page are already part of an arraythe elements[] arraywhich means we dont have to refer to  them by specific name like Check1, Check2, and so on. Instead, we can loop over those elements by using the elements [] array; that method makes our code much shorter.  For example, the clearCheckBoxes   function looks like this currently:  function clearCheckBoxes    {       < previous page    page_175  next page >  If you like this book, buy it!   < previous page  page_176       document.form1.Check1.checked = false       document.form1.Check2.checked = false       document.form1.Check3.checked = false       document.form1.Check4.checked = false       document.form1.Check5.checked = false  }  next page > Page 176  We can make this shorter by using the document.form1.elements[] array, which holds all the HTML elements in form1.  Because we added the five radio buttons first, those elements are document.form1.elements[0] through document.form1. elements[4], and the check boxes are document.form1.elements[5] to document.form1.elements[9].  Using the elements[] array, then, we can rewrite the clearCheckBoxes   function this way:  function clearCheckBoxes    {       for var loop_index = 0; loop_index <= 4; loop_in-    dex++ {           document.form1.elements[loop_index +    5].checked = false       }  }  Similarly, the setCheckBox   function looks like this now:  function setCheckBox number   {       switch number {           case 1:               document.form1.Check1.checked = true               break           case 2:               document.form1.Check2.checked = true               break           case 3:               document.form1.Check3.checked = true               break           case 4:               document.form1.Check4.checked = true               break           case 5:               document.form1.Check5.checked = true               break       }  }  Now that we can refer to the check boxes by index in the elements[] array, we can change that function to one line of  code:  function setCheckBox number   {     < previous page    page_176  next page >  If you like this book, buy it!   < previous page  page_177  next page > Page 177      document.form1.elements[number - 1 + 5].checked =    true  }  We can even make the calculateCost   function shorter, as shown here:  function calculateCost    {       var cost = 0       if document.form1.Check1.checked {           cost = cost + .50       }       if document.form1.Check2.checked {           cost = cost + .50       }       if document.form1.Check3.checked {           cost = cost + .50       }       if document.form1.Check4.checked {           cost = cost + .50       }       if document.form1.Check5.checked {           cost = cost + .50       }       document.form1.TextBox.value = "Total cost: $" +    cost  }  Using the elements[] array, we can loop over the check boxes this way:  function calculateCost    {       var cost = 0         for var loop_index = 0; loop_index <= 4; loop_in-     dex++ {           if document.form1.elements[loop_index +     5].checked {               cost = cost + .50           }       }         document.form1.TextBox.value = "Total cost: $" +    cost  }  As you can see, looping over an indexed array makes our program much shorter.  Theres one more shortcut we can take. Currently, each check box has its own click event handlercheck1Clicked  ,  check2Clicked   and so on:          <INPUT TYPE = CHECKBOX NAME = Check1 onClick =       < previous page    page_177  next page >  If you like this book, buy it!   < previous page  page_178  next page > Page 178       check1Clicked  >Plain         <INPUT TYPE = CHECKBOX NAME = Check2 onClick =       check2Clicked  >Sprinkles         <INPUT TYPE = CHECKBOX NAME = Check3 onClick =       check3Clicked  >Powdered sugar         <INPUT TYPE = CHECKBOX NAME = Check4 onClick =       check4Clicked  >Frosted         <INPUT TYPE = CHECKBOX NAME = Check5 onClick =       check5Clicked  >Filled       However, those event handlers just call calculateCost   anyway:  function check1Clicked     {       calculateCost    }    function check2Clicked     {       calculateCost    }    function check3Clicked     {       calculateCost    }    function check4Clicked     {       calculateCost    }    function check5Clicked     {       calculateCost    }  We can shorten our code by simply calling calculateCost   directly as the check boxes click event handlers:          <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Plain         <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Sprinkles         <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Powdered sugar         <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Frosted         <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Filled          < previous page  page_178  next page >      If you like this book, buy it!   < previous page  page_179  next page > Page 179  Thats itthe new version of our page, Donuts2.htm, is shown in Listing 4-4. As you can see, that page is much shorter  than the original, Donuts.htm in Listing 4-3. Using the elements[] array, we can loop over our check boxes as needed.  Listing 4-4  Donuts2.htm.          The Donut Example                      Select your donut!                      <INPUT TYPE = RADIO NAME = RadioGroup onClick =       Radio1Clicked  >Plain         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       Radio2Clicked  >Chocolate         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       Radio3Clicked  >Jelly         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       Radio4Clicked  >Cream-filled         <INPUT TYPE = RADIO NAME = RadioGroup onClick =       Radio5Clicked  >Strawberry                 <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Plain         <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Sprinkles         <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Powdered sugar         <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Frosted         <INPUT TYPE = CHECKBOX NAME = Check onClick =       calculateCost  >Filled                    <INPUT TYPE  =  TEXT NAME  =  TextBox SIZE  =  30 ALIGN =    < previous page  page_179  next page >      If you like this book, buy it!   < previous page  page_180  next page > Page 180  Listing 4-4  Continued.       CENTER>                         function Radio1Clicked       {          clearCheckBoxes            setCheckBox 1           calculateCost       }       function Radio2Clicked       {          clearCheckBoxes            setCheckBox 4           calculateCost       }       function Radio3Clicked       {          clearCheckBoxes            setCheckBox 3           setCheckBox 5           calculateCost       }       function Radio4Clicked       {          clearCheckBoxes            setCheckBox 2           setCheckBox 3           setCheckBox 5           calculateCost       }       function Radio5Clicked       {          clearCheckBoxes            setCheckBox 4           setCheckBox 5           calculateCost       }       function clearCheckBoxes       {          for var loop_index = 0; loop_index <= 4; loop_in-       dex++ {              document.form1.elements[loop_index +      < previous page    page_180  next page >  If you like this book, buy it!   < previous page  page_181  next page > Page 181  Listing 4-4  Continued.      5].checked = false          }     }       function setCheckBox number      {         document.form1.elements[number - 1 + 5].checked =       true     }       function calculateCost       {          var cost = 0            for var loop_index = 0; loop_index <= 4; loop_in-       dex++ {              if document.form1.elements[loop_index +       5].checked {                  cost = cost + .50              }          }            document.form1.TextBox.value = "Total cost: $" +       cost     }         That completes our discussion of check boxes and radio buttons for the moment. As you can see, those controls are  powerful ways for the user to select from a set of options. The next control well look at also allows the user to select  from a set of options: the select control.  Select Controls  A select control is a drop-down list box with the following properties, methods, and event handlers:  Properties  Methods  Event Handlers  form length name  blur focus  onBlur onChange onFocus       < previous page    page_181  next page >  If you like this book, buy it!   < previous page  page_182  Properties  Methods  Event Handlers  next page > Page 182  options selectedIndex text type     When the user makes a selection in the select control, its onChange event handler is called, so thats the event handler we  will use in an example. In particular, we will construct one that displays a text box and a select control to the user, like  this:  When the user clicks the downward-pointing arrow at the right of the select control, a drop-down list appears to display  the controls possible selections:    < previous page    page_182  next page >  If you like this book, buy it!   < previous page  page_183  next page > Page 183  Using the mouse, the user can make a selection from that list, which well then display in the text box.  Well start this new example, Select.htm, by using the   tag to install our select control, select1:           A Select Control Example                    Click an item in the select control...                             .          .          .  The next step is to install all the options in the select control that we want to appear when the user opens the select  control.      < previous page    page_183  next page >  If you like this book, buy it!   < previous page  page_184  next page > Page 184  Installing the Options in a Select Control  We can add options to a select control with the   tag. To add the strings Selection 1, Selection 2, and so on,  we use the   tag this way:           A Select Control Example                    Click an item in the select control...                       Selection 1   Selection 2   Selection 3   Selection 4   Selection 5              A Select Control Example                    Click an item in the select control...                  Our select control is almost ready. We still have to connect the onChange event handler to a JavaScript function,  however. Heres how we do that, calling the function selectionMade  :     < previous page    page_184  next page >  If you like this book, buy it!   next page > Page 185  < previous page  page_185       Selection 1   Selection 2   Selection 3   Selection 4   Selection 5                  Then we add that function to the   section of our page:       function selectionMade    {    .    .    .  }       This is the function thats called when the user makes a selection in the select control, and we want to report that selection in the pages text  box. The index of the item chosen in the select control is stored in that controls selectedIndex property, so we report which selection the  user made, as shown here:       function selectionMade    {      document.form1.TextBox.value = "You chose selection " +        document.form1.Select1.selectedIndex + 1   }       TIP: If you want the text of the current selection in the select control, you can retrieve it from the select  controls text property.     The Select.htm example is ready to go, so open the select control with the mouse, making a selection, as shown in Figure 4-4.    < previous page    page_185  next page >  If you like this book, buy it!   < previous page  page_186  next page > Page 186  We use a select control to let the user make a selection.  Figure 4-4   When you do make a selection in the select control, the program reports which selection you made, as shown in Figure  4-5. The Select.htm example is working!  When the user makes a selection in the select control,   Figure 4-5   we report the action.  The code for this page, Select.htm, is shown in Listing 4-5.   So far, weve made only one selection in the select control, but select controls support multiple selections, too, as well  see in the next section.    < previous page    page_186  next page >  If you like this book, buy it!   < previous page  page_187  next page > Page 187  Listing 4-5  Select.htm.          A Select Control Example                    Click an item in the select control...                      Selection 1   Selection 2   Selection 3   Selection 4   Selection 5                         function selectionMade    {      document.form1.TextBox.value = "You chose selection " +        document.form1.Select1.selectedIndex + 1   }            Selecting Multiple Items in a Select Control  A select control supports multiple selections if you include the MULTIPLE attribute in the   tag. To see how  this works, well create a new example, Multiple.htm. This example will display a multiple-selection select control   unlike single-selection select controls, multiple-selection    < previous page    page_187  next page >  If you like this book, buy it!   < previous page  page_188  next page > Page 188  controls are not drop-down lists; they display a scrollable list to the user  and a text area  used to display the possibly  multiple selections the user will make .  Using the mouse, the user can select a number of items in the select control, and well display which items theyve  selected. Well start this Multiple.htm example by placing a text area in our Web page:  Next, we add the select control well need, making it a multiple-selection select control with the MULTIPLE attribute:           Select Example                    Select a number of items...                   .           .           .           Select Example                    Select a number of items...                         Selection 1   Selection 2   Selection 3   Selection 4   Selection 5             < previous page    page_188  next page >  If you like this book, buy it!   < previous page  page_189  next page > Page 189          Now when the user selects items in our select control, its up to us to determine which items he or she has selected. The  select control has an internal array named options[] that holds all the options the select control displays. If a particular  options selected property is true, the user has selected that option.  We can set up a loop over all the items in the select control if we use its length property, which holds the number of  items in the select control. That loop looks like this:      function selectionMade    {      document.form1.Textarea.value = ""        with document.form1.Select1 {          for var loop_index = 0; loop_index < length;       loop_index++ {              .              .              .          }      }  }     Now if an item in the select control is selected, we can add it to the text area control in the Web page, as shown here:       function selectionMade    {      document.form1.Textarea.value = ""        with document.form1.Select1 {          for var loop_index = 0; loop_index < length;       loop_index++ {              if  options[loop_index].selected {                  document.form1.Textarea.value +=       options[loop_index].text + "\r"              }          }      }  }        < previous page    page_189  next page >  If you like this book, buy it!   < previous page  page_190  next page > Page 190  Selecting a number of items in a select control.  Figure 4-6   Open the Multiple.htm page now. Using the mouse, the user can select a number of items in the select control, as shown  in Figure 4-6.  If the user does select an item or items in the select control, the program reports that action, as shown in Figure 4-7. The  Multiple.htm page works as we designed it.  The code for this page, Multiple.htm, is shown in Listing 4-6.      < previous page    The program reports which items the user has selected.  Figure 4-7   page_190  If you like this book, buy it!  next page >   < previous page  page_191  next page > Page 191  Listing 4-6  Multiple.htm.          Select Example                    Select a number of items...                    Selection 1   Selection 2   Selection 3   Selection 4   Selection 5                         function selectionMade    {      document.form1.Textarea.value = ""        with document.form1.Select1 {          for var loop_index = 0; loop_index < length;       loop_index++ {              if  options[loop_index].selected {                  document.form1.Textarea.value +=       options[loop_index].text + "\r"              }          }      }  }              < previous page    page_191  next page >   If you like this book, buy it!   < previous page  page_192  next page > Page 192  Conclusion  That completes this chapter. Weve covered a great deal herehow to set up and use both radio buttons and check boxes in  our programs, and when theyre appropriate to use. Weve seen how to use radio controls and check boxes together, too.  Weve also learned how to treat the controls in a Web page as part of an array, the elements[] array. Using that array, we  can loop over the HTML elements in a Web page, control by control, processing those controls as needed. In addition,  weve seen how to use select controls  which can present single or multiple selections  to give the user several selections  to choose from.  All in all, weve come far in this chapter. In the next chapter, well continue exploring HTML controls as we take a look  at how to work with the keyboard and the mouse.    < previous page    page_192  next page >  If you like this book, buy it!   < previous page  page_193  next page > Page 193  Chapter 5  Keyboard and Mouse Handling  In this chapter, were going to work in two powerful areas: mouse and keyboard handling. Well see how to use the  mouse in a Web page, keeping track of its location and writing code to respond to the users mouse actions. Well see  how to react to mouse movements by swapping images in a Web page and how to let users get a preview of Web pages  they can navigate to simply by letting the mouse move over the corresponding hyperlinks.  Then well turn to working with the keyboard. Its possible to read keys directly from the keyboard with JavaScript, and  well see how to do that in this chapter. In addition, well learn how to use keystrokes to control window actionsfor  example, displaying a help screen the user can dismiss by pressing the Esc key.  Finally, well see how to bring together text and mouse handling in an example where we highlight and enlarge text as  the user lets the mouse travel over it.  Theres a lot of power in the techniques well develop in this chapter, so lets start now by working with the mouse. What  will quickly become evident in this chapter is the incompatibilities between the two browsers were using, which well  see frequently in this book. As far as this chapter goes, it turns out that Internet Explorer handles both the mouse and the  keyboard completely differently from Netscape Navigator     < previous page    next page >  page_193  If you like this book, buy it!   Mouser     < previous page  page_194  next page > Page 194   the two browsers used to be closer on this issue, but starting with Internet Explorer 4.0, theyve completely diverged . However, well see  how to create Web pages that use the keyboard and mouse that function in both Web browsers in the chapterand allowing your Web pages  to work with these two disparate browsers is itself a skill worth picking up.  Our first page, called Mouser.htm, will let us explore what JavaScript has to offer for mouse support. When the user clicks the mouse in  the Web page, well be able to report the mouse location, for example. When the user releases the mouse button, well report that the mouse  button is up. If the user presses the mouse button while holding down the Shift key, we can report that the key has been pressed. We can  also report on the Ctrl and Alt keys in the same wayand even a combination of the Shift and Ctrl keys.  NOTE: Its possible to determine which mouse button the user is holding downleft or rightbut in practice, the right  mouse button has been made useless for program control because Web browsers have preempted it for context- sensitive help, so well stick to the left mouse button in this chapter. If you click the right mouse button in a Web  page, the browser will display a help menu that our program has no control over.  Before we start writing our Mouser.htm example, we need some knowledge of handling mouse events, so well cover that now, starting  with handling mouse events in Netscape Navigator.  Using Mouse Events in Netscape Navigator  In our Web page, we want to use the documents mouseDown and mouseUp events, which, as their names indicate, handle mouse press  and release events.  When you program for Netscape Navigator, you connect those events to event handler functions named mouseDownHandler   and  mouseUpHandler   in a script, as shown here:         document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler     < previous page    page_194  If you like this book, buy it!  next page >   < previous page  page_195  next page > Page 195  When the user presses the mouse button, the mouseDown event occurs and the browser calls our mouseDown event handler:      .      .      .  function mouseDownHandler e   {      .      .      .  }  Our mouse event handling function is passed an object of Netscapes event type; well get the mouse location and key information we need  from this object. The location of the mouse in the page is held in the pageX and pageY properties. All the Netscape Navigator event  object properties are listed in Table 5-1.  Now lets turn to the other browser we support in this bookInternet Explorer.  Table 5-1 The Netscape Navigator event object properties. Event Property Means This Event type type layerX The cursors horizontal position in relation to the layer in which the event occurred The cursors vertical position in pixels relative to the layer in which the event occurred layerY pageX The cursors horizontal position in pixels, relative to the page The cursors vertical position in pixels relative to the page pageY The cursors horizontal position in pixels, relative to the screen screenX screenY The cursors vertical position in pixels, relative to the screen The mouse button that was pressed or the ASCII value of a pressed key which The modifier keys associated with a mouse or key event. Possible values are ALT_MASK,  modifiers CONTROL_MASK, SHIFT_MASK, and META_MASK An array of strings containing the URLs of the dropped objects, used with the dragdrop event  data       < previous page    page_195  If you like this book, buy it!  next page >   < previous page  page_196  next page > Page 196  Using Mouse Events in Internet Explorer  Handling mouse events in Internet Explorer is completely different. Here, to catch mouse events in the document, you  must connect the mouse handlers in the   element, not in the   element:  Instead, you determine where the mouse was by taking a look at the event object, which is a member object of the  window object. The Internet Explorer window.event objects properties are listed in Table 5-2. Well get the mouses x  and y position from the x and y properties.  <BODY onMouseDown = "mouseDownHandler  " onMouseUp =       "mouseUpHandler  ">                  .                  .                  .  These mouse event handlers are not passed any parameters:  function mouseDownHandler    {    .    .    .  }  Table 5-2 The Internet Explorer window.event object properties. Event Property altKey button cancelBubble clientX clientY ctrlKey fromElement keyCode offsetX offsetY reason returnValue screenX screenY  Means This True if the Alt key was down Specifies which mouse button, if any, is pressed Indicates if this event should move up the event hierarchy x coordinate with respect to the client area y coordinate with respect to the client area True if the Ctrl key was down Specifies element being moved Code of struck key Container relative x position Container relative y position Disposition of data transfer Specifies the return value from the event x coordinate relative to physical screen size y coordinate relative to physical screen size      Table continued on next page       < previous page    page_196  next page >  If you like this book, buy it!   < previous page  page_197  next page > Page 197  Now that weve gotten an introduction to handling mouse events, we can start writing the code for Mouser.htm. We start  with the   tag and the connection to the mouse event handlers for Internet Explorer:  Table 5-2 Continued. Event Property shiftKey srcElement srcFilter toElement type x y     Writing Mouser.htm  Means This True if the Shift key was down Element that caused the event Filter event if this is a filterChange event Specifies element being moved to Returns event type as a string x position of the event in context y position of the event in context         A Mouse Handling Example         <BODY onMouseDown = "mouseDownHandler  " onMouseUp =        "mouseUpHandler  ">           .           .           .  Next, we add the Web pages form  form1  and the text box:         A Mouse Handling Example         <BODY onMouseDown = "mouseDownHandler  " onMouseUp =        "mouseUpHandler  ">         A Mouse Handling Example       Click the mouse button and Shift, Ctrl, and Alt                  Now were ready to write the code for the page.      < previous page    page_197  next page >  If you like this book, buy it!   < previous page  page_198  next page > Page 198  Working With the mouseDown and mouseUp Events  We start the code by connecting the document mouseDown and mouseUp events to event handlers for Netscape Navigator:  Next, we write the mouseDown event handler, which weve named mouseDownHandler  :         document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler          .          .          .         document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler      function mouseDownHandler e       {       .       .       .     }   Immediately, we run into problems here. Because the two browsers handle mouse events so differently, theres no way to write the same  code for both.  TIP: Netscape Navigators mouse down handler gets one argument passed to it, and Internet Explorers  mouse down handler is passed no arguments; however, because JavaScript is flexible on the number of  arguments passed to functions, we can use one function with one argument passed to it in our code:  mouseDownHandler e .  The way to fix this problem is to write different code for the two browsers. First, however, we have to determine which browser the user  has. This is a common problem, and solving it is useful for dozens of applications.     Determining Which Browser the User Has  Finding out which browser the page is in turns out to be easy: You just check the browsers navigator object  well learn more about this  object in    < previous page    page_198  next page >  If you like this book, buy it!   < previous page  page_199  next page > Page 199  Chapter 10, The Navigator, Location, and History Objects . This object has a property called appName, which is set to  Microsoft Internet Explorer for Internet Explorer and Netscape for Netscape Navigator. That means we can write code  for Internet Explorerafter making sure its the browser were dealing withas follows:         document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler      function mouseDownHandler e       {      if  navigator.appName == "Microsoft Internet Explorer"         {          .          .          .  If this is Internet Explorer, we get the mouse position from the window.event objects x and y properties.  We also want to test whether the Shift, Ctrl, or Alt keys are being held down, so well use the window.event.shiftKey,  window.event.ctrlKey, and window.event.altKey flags. Well check for all these keys, as well as when the Shift and Ctrl  keys are held down together.  Heres how we check for the Shift and Ctrl combination using the JavaScript logical AND operator  && , which  requires that both its operands are true before it returns a value of true:         document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler      function mouseDownHandler e       {          if  navigator.appName == "Microsoft Internet       Explorer"  {              if window.event.shiftKey &&       window.event.ctrlKey {                    .                    .                    .              }                    .                    .                    .  If both the Shift and Ctrl keys are down, we should report that fact, along with the mouse location. Heres how we do  that:         document.onMouseDown = mouseDownHandler     < previous page    page_199  next page >  If you like this book, buy it!   < previous page  page_200  next page > Page 200  Now weve handled the mouseDown event when both the Shift and Ctrl keys are down. If both those keys are not being  held down, we continue to check for the Shift key, the Ctrl key, and so on, all the way to no key being held down at all;  that situation looks like this in code:  document.onMouseUp = mouseUpHandler  function mouseDownHandler e   {          if  navigator.appName == "Microsoft Internet       Explorer"  {              if window.event.shiftKey &&       window.event.ctrlKey {                  document.form1.Textbox.value = "Shift and       Ctrl keys and mouse                        button down at: " + window.event.x +       ", " + window.event.y                  return              }                   .                   .                   .         document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler      function mouseDownHandler e       {          if  navigator.appName == "Microsoft Internet       Explorer"  {              if window.event.shiftKey &&       window.event.ctrlKey {                  document.form1.Textbox.value = "Shift and       Ctrl keys and mouse                      button down at: " + window.event.x +       ", " + window.event.y                  return              }              if  window.event.shiftkey               {                   document.form1.Textbox.value = "Shift key       and mouse button down                       at: " + window.event.x + ", " +       window.event.y                  return              }              if window.event.ctrlkey               {                 document.form1.Textbox.value = "Ctrl key       and mouse botton down                      at: " + window.event.x + ", " +       window.event.y                   return              }     < previous page    page_200  next page >   If you like this book, buy it!   < previous page  page_201  next page > Page 201          if window.event.shiftKey           {              document.form1.Textbox.value = "Alt key       and mouse button down                       at: " + window.event.x + ", " +       window.event.y                   return              }              document.form1.Textbox.value = "Mouse button       down at: " +                  window.event.x + ", " + window.event.y    }  Now well handle Netscape Navigator:         document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler      function mouseDownHandler e       {          if  navigator.appName == "Microsoft Internet       Explorer"  {           .           .           .         }         if navigator.appName == "Netscape"  {          .          .          .         }      }         document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler      function mouseDownHandler e       {          if  navigator.appName == "Microsoft Internet       Explorer"  {           .           .           .         }         if navigator.appName == "Netscape"  {         switch e.modifiers {             case 0:  If the browser is Netscape Navigator, we can get the mouse location from the event object thats passed to us; that  objects pageX and pageY properties hold the mouse location. In addition, the event objects modifiers object holds  information about which keys are down, so we can check for the different keys and report the mouse position this way:     < previous page    page_201  next page >   If you like this book, buy it!   < previous page  page_202  next page > Page 202              document.form1.Textbox.value = "Mouse  button down at: "                   + e.pageX + ", " + e.pageY              break          case 2:              document.form1.Textbox.value = "Ctrl key  and mouse button down                   at: " + e.pageX + ", " + e.pageY              break          case 4:              document.form1.Textbox.value = "Shift key  and mouse button down                    at: " + e.pageX + ", " + e.pageY              break          case 6:              document.form1.Textbox.value = "Shift and  Ctrl keys and mouse                   button down at: " + e.pageX + ", " +  e.pageY              break          case 1:              document.form1.Textbox.value = "Alt key  and mouse button down                   at: " + e.pageX + ", " + e.pageY              break      }  }  }  function mouseUpHandler e   {      if  navigator.appName == "Microsoft Internet   Explorer"  {          if window.event.shiftKey &&   window.event.ctrlKey {              document.form1.Textbox.value = "Shift and   Ctrl keys and mouse                  button up at: " + window.event.x + ",   " + window.event.y              return          }          if window.event.shiftKey           {              document.form1.Textbox.value = "Shift key   and mouse button up                  at: " + window.event.x + ", " +   window.event.y                return          }  Now we will handle the mouseUp event. In programming terms, this event is the same as the mouseDown event, except  that the mouse is going up, not down; heres how we handle the mouseUp event in code:     < previous page    page_202  next page >   If you like this book, buy it!   < previous page  page_203  next page > Page 203          if window.event.ctrlKey           {              document.form1.Textbox.value = "Ctrl key  and mouse button up                   at: " + window.event.x + ", " +  window.event.y                return          }          if window.event.altKey           {              document.form1.Textbox.value = "Alt key  and mouse button up                  at: " + window.event.x + ", " +  window.event.y              return          }          document.form1.Textbox.value = "Mouse button  up at: " +              window.event.x + ", " + window.event.y     }     if navigator.appName == "Netscape"  {          switch e.modifiers {              case 0:                  document.form1.Textbox.value = "Mouse  button up at: "                      + e.pageX + ", " + e.pageY                  break              case 2:                  document.form1.Textbox.value = "Ctrl  key down and mouse                      button up at: " + e.pageX + ", "  + e.pageY                  break              case 4:                  document.form1.Textbox.value = "Shift  key down and mouse                      button up at: " + e.pageX + ", "  + e.pageY                  break              case 6:                  document.form1.Textbox.value = "Shift  and Ctrl keys down and                      mouse button up at: " + e.pageX  + ", " + e.pageY                  break              case 1:                  document.form1.Textbox.value = "Alt  key down and mouse                      button up at: " + e.pageX + ", "  + e.pageY                  break          }      }  }       < previous page    page_203  next page >  If you like this book, buy it!   < previous page  page_204  next page > Page 204  Thats it; the Mouser.htm page is ready to go. When you press the mouse button, the program indicates your action, as  shown in Figure 5-1, along with the location of the mouse. When you release the mouse button, the program reports that  action, too.  When you hold down the Shift, Ctrl, or Alt keys when pressing the mouse button, the program reports that also, as  shown in Figure 5-2. Now were using the mouse directly in JavaScript.  The code for this page, Mouser.htm, is shown in Listing 5-1.  The Mouser.htm page reports the mouse position.  Figure 5-1   The Mouser.htm page reports the mouse position and the Shift key being held down.  Figure 5-2       < previous page    page_204  next page >  If you like this book, buy it!   < previous page  page_205  next page > Page 205  Listing 5-1  Mouser.htm.        A Mouse Handling Example         <BODY onMouseDown = "mouseDownHandler  " onMouseUp =        "mouseUpHandler  ">         A Mouse Handling Example       Click the mouse button and Shift, Ctrl, and Alt      <A HREF = "mouser.htm" onMouseOver = "mouseOverHandler  "       onMouseOut = "mouseOutHandler  ">      Move the mouse over this link!                            document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler      function mouseDownHandler e       {          if  navigator.appName == "Microsoft Internet        Explorer"  {              if window.event.shiftKey &&        window.event.ctrlKey {                    document.form1.Textbox.value = "Shift and        Ctrl keys and mouse                        button down at: " + window.event.x +        ", " + window.event.y                   return              }              if  window.event.shiftKey               {                   document.form1.Textbox.value = "Shift key        and mouse button down                        at: " + window.event.x + ", " +        window.event.y              return              }              if  window.event.ctrlKey               {                    document.form1.Textbox.value = "Ctrl key        and mouse button down                        at: " + window.event.x + ", " +        window.event.y                    return              }      < previous page    page_205  next page >  If you like this book, buy it!   < previous page  page_206  next page > Page 206  Listing 5-1  Continued.             if window.event.shiftKey               {                  document.form1.Textbox.value = "Alt key        and mouse button down                        at: " + window.event.x + ", " +        window.event.y                    return              }              document.form1.Textbox.value = "Mouse button        down at: " +                   window.event.x + ", " + window.event.y          }          if  navigator.appName == "Netscape"  {               switch e.modifiers {                    case 0:                        document.form1.Textbox.value = "Mouse      button down at: "                              + e.pageX + ", " + e.pageY                      break                  case 2:                      document.form1.Textbox.value = "Ctrl        key and mouse button                           down at: " + e.pageX + ", " +        e.pageY                      break                  case 4:                      document.form1.Textbox.value = "Shift        key and mouse button                             down at: " + e.pageX + ", " +        e.pageY                      break                  case 6:                      document.form1.Textbox.value = "Shift        and Ctrl keys and                          mouse button down at: " + e.pageX        + ", " + e.pageY                        break                  case 1:                      document.form1.Textbox.value = "Alt        key and mouse button                            down at: " + e.pageX + ", " +        e.pageY                      break              }          }      }      function mouseUpHandler e       {          if  navigator.appName == "Microsoft Internet        Explorer"  {               if window.event.shiftKey &&        window.event.ctrlKey {                    document.form1.Textbox.value = "Shift and      < previous page    page_206  next page >  If you like this book, buy it!   < previous page  page_207  next page > Page 207  Listing 15-1  A collection example.       Ctrl keys and mouse                         button up at: " + window.event.x + ",        " + window.event.y                      return              }              if window.event.shiftKey               {                  document.form1.Textbox.value = "Shift key        and mouse button up                         at: " + window.event.x + ", " +        window.event.y                  return              }              if window.event.ctrlKey               {                  document.form1.Textbox.value = "Ctrl key        and mouse button up                        at: " + window.event.x + ", " +        window.event.y                  return              }              if window.event.altKey               {                  document.form1.Textbox.value = "Alt key        and mouse button up                        at: " + window.event.x + ", " +        window.event.y                    return              }              document.form1.Textbox.value = "Mouse button        up at: " +                    window.event.x + ", " + window.event.y         }         if navigator.appName == "Netscape"  {              switch e.modifiers {                  case 0:                      document.form1.Textbox.value = "Mouse        button up at: "                          + e.pageX + ", " + e.pageY                      break                  case 2:                      document.form1.Textbox.value = "Ctrl        key down and mouse                          button up at: " + e.pageX + ", "        + e.pageY                      break                  case 4:                      document.form1.Textbox.value = "Shift        key down and mouse                            button up at: " + e.pageX + ", "        + e.pageY                      break                  case 6:      < previous page    page_207  next page >  If you like this book, buy it!   < previous page  page_208  next page > Page 208  Listing 15-1  Continued.                     document.form1.Textbox.value = "Shift        and Ctrl keys down and                            mouse button up at: " + e.pageX        + ", " + e.pageY                      break                  case 1:                      document.form1.Textbox.value = "Alt        key down and mouse                            button up at: " + e.pageX + ", "        + e.pageY                      break              }          }      }       Well put the mouse to use in our Web pages now. In the next example, well use the mouse to give users a preview of the pages our page  links to. When they let the mouse cursor move across a hyperlink, well automatically display a preview of the page being linked to, which  provides some useful mouse functionality.  The Preview Page  In this next example, well give users a preview of what the pages we link to look like. To do that, when the mouse is over a hyperlink in  our page, we can display a small preview image of the page being linked to; in this way, users can look before they leap. In the previous  example, we used the mouseDown and mouseUp events; this example will use a new mouse event called mouseOver.  NOTE: Were sticking to indicating when the mouse is placed over hyperlinks in the Web page to satisfy both  browsers; in fact, Internet Explorer lets you know when the mouse is over practically every Web page element.  Netscape Navigator does so only for hyperlinks and   tags.  You can easily modify the following  techniques to other elements in Internet Explorer as you like.      In this example, Preview.htm, we will display five hyperlinks and an image to users. If they let the mouse move over one of the  hyperlinks, well display a thumbnail image of the page being linked to. If they move the    < previous page    page_208  next page >  If you like this book, buy it!   < previous page  page_209  mouse to another hyperlink, we can display a thumbnail of the new links page.  Working With the mouseOver Event  next page > Page 209  Well begin this example by placing the hyperlinks well use in the Web page. Each of these hyperlinks has a mouseOver  event  in both Netscape Navigator and Internet Explorer  that we can connect to an event handler. We accomplish that  connection like this, adding the event handlers link1Over  ,link2Over   and so on:         Hyperlink Previews                  Place the mouse over a link to get a preview of the        linked-to page . . .      <A HREF="http:  www.server.com'' name= link1 onMouseOver          = ''link1Over  ">Here is link 1         <A HREF="http:  www.server.com" name= link2 onMouseOver          = "link2Over  ">Here is link 2         <A HREF="http:  www.server.com" name= link3 onMouseOver          = "link3Over  ">Here is link 3         <A HREF="http:  www.server.com" name= link4 onMouseOver          = "link4Over  ">Here is link 4         <A HREF="http:  www.server.com" name= link5 onMouseOver          = "link5Over  ">Here is link 5         <IMG NAME = "IMG1" SRC = "gif image1.gif" WIDTH = 236        HEIGHT = 118>              < previous page    page_209  next page >  If you like this book, buy it!   < previous page  page_210  Next, we add the mouseOver event handlers in the   element:  next page > Page 210         function link1Over        {        .        .        .      }      function link2Over        {        .        .        .      }      function link3Over        {        .        .        .      }      function link4Over        {        .        .        .      }      function link5Over        {        .        .        .      }     _H  In the mouseOver event handlers, all we have to do is reload the  elements image, and we do that like this:  _G         function link1Over        {          document.form1.IMG1.src = 'gif image1.gif'      }      function link2Over        {          document.form1.IMG1.src = 'gif image2.gif'      }      function link3Over        {     < previous page    page_210  next page >  If you like this book, buy it!   < previous page  page_211  next page > Page 211          document.form1.IMG1.src = 'gif image3.gif'      }      function link4Over        {          document.form1.IMG1.src = 'gif image4.gif'      }      function link5Over        {          document.form1.IMG1.src = 'gif image5.gif'      }     Open this page now, as shown in Figure 5-3. When the mouse is over a hyperlink, we display an image intended to be a  thumbnail image of the linked-to. When the user moves the mouse to another hyperlink, the new thumbnail image  appears. Our Preview page is working as we intended.  The code for this page, Preview.htm, is shown in Listing 5-2.  In our next example, well take a look at a new mouse eventthe mouseOut event.  Figure 5-3   Our Preview page lets users look before they   leap with previews of linked-to pages.  Listing 5-2  Preview.htm.          Hyperlink Previews                  Place the mouse over a link to get a preview of the        linked-to page . . .    < previous page    page_211  If you like this book, buy it!  next page >   < previous page  page_212  next page > Page 212  Listing 5-2  Continued.    <A HREF="http:  www.server.com" name= link1 onMouseOver           = "link1Over  ">Here is link 1         <A HREF="http:  www.server.com" name= link2 onMouseOver           = "link2Over  ">Here is link 2         <A HREF="http:  www.server.com" name= link3 onMouseOver           = "link3Over  ">Here is link 3         <A HREF="http:  www.server.com" name= link4 onMouseOver           = "link4Over  ">Here is link 4         <A HREF="http:  www.server.com" name= link5 onMouseOver           = "link5Over  ">Here is link 5         <IMG NAME = "IMG1" SRC = "gif image1.gif" WIDTH = 236        HEIGHT = 118>                  function link1Over        {          document.form1.IMG1.src = 'gif image1.gif'      }      function link2Over        {          document.form1.IMG1.src = 'gif image2.gif'      }      function link3Over        {          document.form1.IMG1.src = 'gif image3.gif'      }      function link4Over        {          document.form1.IMG1.src = 'gif image4.gif'      }      function link5Over        {          document.form1.IMG1.src = 'gif image5.gif'      }        _H    < previous page  page_212  next page >      If you like this book, buy it!   < previous page  page_213  next page > Page 213  SwapImage  Say were displaying an image in a Web page. When the user moves the mouse over the image, we can swap that image  for a new one. Then, when the user moves the mouse away, the original image is restored. In this way, we can respond  to mouse movements, changing the image as the user moves the mouse over it  and possibly supplying more  information by perhaps switching from a thumbnail image to a more complete image .  We can start this new example, SwapImage.htm, by adding the image itself to the Web page, giving it the mouseOver  event handler ImgOver   and the mouseOut event handler  called when the user moves the mouse away from the image   ImgOut  .  Netscape Navigator doesnt support the mouseOver or mouseOut events for images, although it does support those  events for hyperlinks and   elements. In this case, we will make our image into a dummy hyperlink so our  mouse handlers will be called:         Responding to mouse movements                  Move the mouse to swap the image. . .      <A HREF="" name= link1 onMouseOver = "ImgOver  " onMouseOut        = "ImgOut  ">      <IMG NAME = "IMG1" SRC = "gif image1.gif" WIDTH = 236        HEIGHT = 118> <           Now in the   element, we add the two event handlers we want:        function ImgOver        {        .        .        .      }      function ImgOut      < previous page    page_213  If you like this book, buy it!  next page >   < previous page  page_214  next page > Page 214      {        .        .        .      }     When the mouse is over the image, we can display the second image, and when the mouse leaves the image, we restore  the first image this way:         function ImgOver        {          document.form1.IMG1.src = 'gif image2.gif'      }      function ImgOut        {          document.form1.IMG1.src = 'gif image1.gif'      }     Thats it! Open the page now. When the mouse moves over the image, we swap images to the second image, as shown  Figure 5-4.  The code for this page, SwapImage.htm, is shown in Listing 5-3.  This example completes our work with the mouse for the moment, although well come back to it at the end of the  chapter. For now, however, well start working with the keyboard.      We swap images when the mouse moves over an image.  Figure 5-4    < previous page    page_214  next page >  If you like this book, buy it!   < previous page  page_215  next page > Page 215  Listing 5-3  SwapImage.htm.        Responding to mouse movements                  Move the mouse to swap the image . . .      <A HREF="" name= link1 onMouseOver = "ImgOver  " onMouseOut        = "ImgOut  ">      <IMG NAME = "IMG1" SRC = "gif image1.gif" WIDTH = 236        HEIGHT = 118>                  function ImgOver        {          document.form1.IMG1.src = 'gif image2.gif'      }      function ImgOut        {          document.form1.IMG1.src = 'gif image1.gif'      }         Reading Keys in JavaScript  Besides using the mouse through JavaScript, we can also use the keyboard. To see how this works, we will construct an  example called Keys.htm, which displays a prompt and a text box.  When the user types some text, the characters appear in the text box. The text box doesnt have the focus, so its not  reading the keys itself; instead, well read the keys directly, as soon as they are struck, and place them in the text box. To  create this example, well use the keyPress event.  Using the keyPress Event  When the user presses a key, a keyPress event is generated; well read the key the user typed then. As you might expect,  Netscape Navigator    < previous page    page_215  next page >  If you like this book, buy it!   < previous page  page_216  next page > Page 216  and Internet Explorer handle keystrokes in very different ways, so well divide our program into two sections for the two browsers.  TIP: The keyPress event, which occurs when the user presses a key, has a companion event: keyUp, which  takes place when the user releases the key.     Well start this new example, Keys.htm, by connecting the keyPress event to an event handlerwhich well call KeyPress  in the    tag, which is where Internet Explorer needs that connection:         Key reading example               <!For Internet        Explorer>           .           .           .  Then we add the prompt and text box well display:         Key reading example               <!For Internet       Explorer>         Type something . . .          <                 <           Now well read the keys the user types, starting by writing code for Netscape Navigator.  Reading Keys in Netscape Navigator  For Netscape Navigator, we connect the documents keyPress event to an event handler, like this:    < previous page    page_216  If you like this book, buy it!  next page >   < previous page  page_217  next page > Page 217  Now were ready to write our key event handler. We start by making sure were working with Netscape Navigator:     document.onKeyPress = keyPress            For Netscape        Navigator           .           .           .     document.onKeyPress = keyPress            For Netscape        Navigator  function keyPress e   {     if navigator.appName == "Netscape"  {           .           .           .     document.onKeyPress = keyPress            For Netscape        Navigator  function keyPress e   {     if navigator.appName == "Netscape"  {        var keyCode = new Number e.which            .           .           .  If so, we can read the ASCII code of the struck key, using the event objects which property, as shown here:  Note that we store this key code as a Number object; well see why we do so in a moment. The next step is to turn the  key code into a character we can display in the text box; well use Netscape unescape   method to do that. That method  takes an argument thats a string representing a hexadecimal ASCII code prefaced with % and turns it into the  corresponding character. For example, the ASCII code in hexadecimal for a space is 0√ó20, so this call to unescape    returns a space character: unescape  %20 .  That means we have to represent our keys code as a hexadecimal value in string format. We can do that with the  Number objects toString   method, passing a base of 16 so we get that value in hexadecimal. We add the new character  to a string named inString so that we can store and display all the characters the user has typed:    < previous page    page_217  next page >  If you like this book, buy it!   < previous page  page_218  next page > Page 218     document.onKeyPress = keyPress            For Netscape        Navigator  var inString = ""  function keyPress e   {     if navigator.appName == "Netscape"  {        var keyCode = new Number e.which         inString += unescape "%" + keyCode.toString 16            .          .          .  NOTE: You might be surprised to see the operator 1? here. This operator is simply a contraction of the + and =  operators in JavaScript. That is, the statement a += b is the same as a = a + b. Most operators in JavaScript can  be combined with the assignment operator, such as -=, *=, and so on.     All that remains is to display the string in the text box, which we do like this:     document.onKeyPress = keyPress            For Netscape        Navigator  var inString = ""  function keyPress e   {     if navigator.appName == "Netscape"  {        var keyCode = new Number e.which         inString += unescape "%" + keyCode.toString 16          document.form1.Textbox.value = inString      }  That completes the Netscape Navigator portion of the page. Now well deal with Internet Explorer.  Reading Keys in Internet Explorer  In Internet Explorer, we can read the struck key from the window.event objects keyCode property. As in Netscape Navigator, we get the  struck characters key code and turn it into a string we can display. We turn the key code into a string by using Internet Explorers String  classs fromCharCode   method, adding the newly struck key to our inString string:     var inString = ""     < previous page    page_218  If you like this book, buy it!  next page >   < previous page  page_219  next page > Page 219        function keyPress e   {     if navigator.appName == "Netscape"  {      .      .      .     }     if  navigator.appName == "Microsoft Internet Explorer"         {       inString += String.fromCharCode window.event.keyCode           .          .          .  Then we display that string in the text box as before:    var inString = ""  function keyPress e   {     if navigator.appName == "Netscape"  {      .      .      .     }     if  navigator.appName == "Microsoft Internet Explorer"  {        inString += String.fromCharCode window.event.keyCode         document.form1.Textbox.value = inString     }  }     Now open the page and click the document  not the text box, making sure the text box does not have the focus and its blinking cursor  doesnt appear . Then type some characters; youll see them appear in the text box, as shown in Figure 5-5. Now were using the keyboard  directly in JavaScript.  NOTE: Because of the way Netscape Navigator passes keys to our program, uppercase letters dont appear in  Netscapes version of this page when you type them. To check whether a letter is uppercase, you can add code to  check the event objects modifiers property to see if the Shift key was active when the user typed the key.  The code for this page, Keys.htm, is shown in Listing 5-4.    < previous page    page_219  If you like this book, buy it!  next page >   < previous page  page_220  next page > Page 220  We read keys directly from the keyboard.  Figure 5-5   Listing 5-4  Keys.htm.        Key reading example               <!For Internet        Explorer>         Type something . . .                         document.onKeyPress = keyPress            For Netscape        Navigator  var inString = ""  function keyPress e   {     if navigator.appName == "Netscape"  {        var keyCode = new Number e.which         inString += unescape "%" + keyCode.toString 16          document.form1.Textbox.value = inString      }     if  navigator.appName == "Microsoft Internet Explorer"        {          inString += String.fromCharCode window.event.keyCode         document.form1.Textbox.value = inString     }  }          < previous page    page_220  If you like this book, buy it!  next page >   < previous page  page_221  next page > Page 221  Now were using the keyboard in JavaScript. In fact, using the keyboard, you can support user actions that the user cant  normally perform in a Web browser, as well see in the next example.  Controlling a Window with Keystrokes  In this next example, well get a preview of Chapter 9, JavaScript and the Window Object, where we work with the  window object in depth, seeing how to open new browser windows. Here, well display a page with a button that the user  can click to get help.  When the user does click the help button, well open a new windowthe help window. This second window can be  controlled by both the mouse and the keyboard. If you want to close the help window with the keyboard, you just press  the Esc key  its a Windows convention to close help windows when you press Esc .  Well write this example, Helper.htm, now. Because Netscape Navigator suppresses keystrokes like the Esc key, the  function keys F1 through F16, and so on, this example is an Internet Explorer example only.  We start Helper.htm by displaying the prompt and the help button to the user:      Controlling a window with keystrokes                Click the button to open the help window . . .          <INPUT TYPE = BUTTON Value = "Show help" onClick =        "ShowHelp  ">           When the user clicks the help button, we open a new browser window, displaying a new Web page called HelpWindow. htm. We use the window objects open   method to do this, as well see later in this book:        < previous page    page_221  next page >  If you like this book, buy it!   < previous page  page_222  next page > Page 222      function ShowHelp        {          window.open "HelpWindow.htm"       }        The next step is to design the help window.  Designing the Help Window  In the help window, well display a message saying that help hasnt been implemented yet and a prompt indicating that  this window can be closed with the Esc key:         Help Window                Here's the help screen           Help not yet implemented, sorry.          This window controlled by keystrokes: press the Esc key to        close this window.           Note that we have connected the documents keyPress event to an event handler, keyPress  , in the   tag. We  add that function like this:     function keyPress e   {   .   .   .  }     To check whether the Esc key was pressed, we can take a look at the ASCII key code passed to us; if its the code for the  Esc character, ASCII 27, the user did indeed press Esc:    < previous page    next page >  page_222  If you like this book, buy it!   < previous page  page_223  next page > Page 223     function keyPress e   {      if window.event.keyCode == 27 {       .       .       .      }  }        function keyPress e   {      if window.event.keyCode == 27 {        window.close        }  }     If the user pressed the Esc key, we want to close the current window, which we do with its close   method:  Open the Helper.htm page and press the help button to open the help window, as shown in that Figure 5-6. The user can  close the help window simply by pressing the Esc key, adding some functionality to our program that didnt exist  beforeall because we can now read and interpret keystrokes.  The code for this page, Helper.htm, is shown in Listing 5-5, and Listing 5-6 shows the code for the help window,  HelpWindow.htm.      This window is controlled with keystrokes.  Figure 5-6    < previous page    page_223  next page >  If you like this book, buy it!   < previous page  page_224  next page > Page 224  Listing 5-5  Helper.htm.     Controlling a window with keystrokes                Click the button to open the help window . . .          <INPUT TYPE = BUTTON Value = "Show help" onClick =        "ShowHelp  ">                  function ShowHelp        {          window.open "HelpWindow.htm"       }        Listing 5-6  HelpWindow.htm.        Help Window                Here's the help screen           Help not yet implemented, sorry.          This window controlled by keystrokes: press the Esc key to        close this window.              function keyPress e   {      if window.event.keyCode == 27 {         window.close        }  }            < previous page    page_224  next page >  If you like this book, buy it!   < previous page  page_225  next page > Page 225  Weve covered a lot of techniques for keyboard and mouse handling in this chapter, but well take a look at one last  example that brings these two topics together as we see how to use the mouse to highlight text in a Web page.  Highlighting Text with the Mouse  One of the flashy things that Microsoft does on its Web sites is emphasize hyperlinks when you run the mouse over  them by enlarging the links text and coloring it brightly. Well see how to do that in this next example that has five  hyperlinks on a Web page.  When the user moves the mouse over a hyperlink, well change its style, enlarging its text to 36 point  a point is 1 72 of  an inch  and coloring it red  well see more about using styles in Chapter 12, JavaScript and Cascading Stylesheest . You  can change styles on-the-fly in Internet Explorer only, so this example will be targeted at that browser.  Well start this new page, Emphasize.htm, with the hyperlinks well use in this page. Note that we add a mouseOver and  mouseOut event handler to each hyperlink:         Emphasizing hyperlinks                  Place the mouse over a link to emphasize it . . .      <A HREF="http:  www.server.com'' name= link1 onMouseOver =        ''link1Over  "       onMouseOut = "link1Out  ">Here is link 1         <A HREF="http:  www.server.com" name= link2 onMouseOver =        "link2Over  "       onMouseOut = "link2Out  ">Here is link 2         <A HREF="http:  www.server.com" name= link3 onMouseOver =        "link3Over  "       onMouseOut = "link3Out  ">Here is link 3            < previous page    page_225  next page >  If you like this book, buy it!   < previous page  page_226  next page > Page 226  <A HREF="http:  www.server.com" name= link4 onMouseOver =        "link4Over  "       onMouseOut = "link4Out  ">Here is link 4         <A HREF="http:  www.server.com" name= link5 onMouseOver =        "link5Over  "       onMouseOut = "link5Out  ">Here is link 5            When the user moves the mouse over the first hyperlink, we want to color that link red and set its font size to 36. We  can do that by setting the color and fontSize properties of that links style object:  When the user moves the mouse away from the hyperlink, we can restore its original size and color in the mouseOut  handler, as shown here:         function link1Over        {          link1.style.color="red"          link1.style.fontSize=36      }         function link1Over        {          link1.style.color="red"          link1.style.fontSize=36      }      function link1Out        {          link1.style.color="black"          link1.style.fontSize=16      }  We can do the same for the other hyperlinks:         function link1Over        {          link1.style.color="red"          link1.style.fontSize=36      }      function link1Out        {          link1.style.color="black"          link1.style.fontSize=16      }      function link2Over       < previous page    page_226  next page >   If you like this book, buy it!   < previous page  page_227  next page > Page 227  {      link2.style.color="red"      link2.style.fontSize=36  }  function link2Out    {      link2.style.color="black"      link2.style.fontSize=16  }    function link3Over    {      link3.style.color="red"      link3.style.fontSize=36  }  function link3Out    {      link3.style.color="black"      link3.style.fontSize=16  }  function link4Over    {      link4.style.color="red"      link4.style.fontSize=36  }  function link4Out    {      link4.style.color="black"      link4.style.fontSize=16  }  function link5Over    {      link5.style.color="red"      link5.style.fontSize=36  }  function link5Out    {      link5.style.color="black"      link5.style.fontSize=16  }        The page is finished, so try opening it in Internet Explorer, as shown in Figure 5-7. When you run the mouse over a  hyperlink, that hyperlinks text is enlarged and colored red; after the mouse passes over it, the hyperlink returns to  normal. In this way, we can support a striking effect in Internet Explorer, making the page come alive.  The code for this page, Emphasize.htm, is shown in Listing 5-8.    < previous page    page_227  If you like this book, buy it!  next page >   < previous page  page_228  next page > Page 228  We use the mouse to emphasize hyperlinks.  Figure 5-7   Listing 5-8  Emphasize.htm.        Emphasizing hyperlinks                  Place the mouse over a link to emphasize it . . .      <A HREF="http:  www.server.com" name= link1 onMouseOver =        "link1Over  "       onMouseOut = "link1Out  ">Here is link 1         <A HREF="http:  www.server.com" name= link2 onMouseOver =        "link2Over  "       onMouseOut = "link2Out  ">Here is link 2         <A HREF="http:  www.server.com" name= link3 onMouseOver =        "link3Over  "       onMouseOut =        "link3Out  ">Here is link 3         <A HREF="http:  www.server.com" name= link4 onMouseOver =        "link4Over  "       onMouseOut = "link4Out  ">Here is link 4           <A HREF="http:  www.server.com" name= link5 onMouseOver =        "link5Over  "       onMouseOut = "link5Out  ">Here is link 5         < previous page    page_228  If you like this book, buy it!  next page >   < previous page  page_229  next page > Page 229  Listing 5-8  Continued.              function link1Over        {          link1.style.color="red"          link1.style.fontSize=36      }      function link1Out        {          link1.style.color="black"          link1.style.fontSize=16      }      function link2Over        {          link2.style.color="red"          link2.style.fontSize=36      }      function link2Out        {          link2.style.color="black"          link2.style.fontSize=16      }            function link3Over        {          link3.style.color="red"          link3.style.fontSize=36      }      function link3Out        {          link3.style.color="black"          link3.style.fontSize=16      }      function link4Over        {          link4.style.color="red"          link4.style.fontSize=36      }      function link4Out        {          link4.style.color="black"          link4.style.fontSize=16      }      function link5Over        {          link5.style.color="red"          link5.style.fontSize=36      }      function link5Out        {          link5.style.color="black"          link5.style.fontSize=16       < previous page    page_229  next page >  If you like this book, buy it!   < previous page  page_230  next page > Page 230  Listing 5-8  Continued.     }        Conclusion  That example finishes this chapter. Weve covered a lot of materialhow to work with the mouse when the user presses or  releases the mouse button  with or without the Shift, Ctrl, or Alt keys ; how to use the mouseOver and mouseOut events  to produce some powerful visual effects in Web pages, including giving users a preview of Web pages when they let the  mouse run over a hyperlink to that page; how to use the keyboard in JavaScript; and even how to control a window with  the keyboard. We also combined keyboard and mouse handling in an example that emphasizes hyperlinks when the user  runs the mouse over them. Weve added a lot of power to our JavaScript programming.  In the next chapter, well explore a related topic that will also add power to Web pagesimage handling.    < previous page    page_230  If you like this book, buy it!  next page >   < previous page  page_231  next page > Page 231  Chapter 6  Image Handling With JavaScript  In this chapter, were going to explore what JavaScript has to offer for image handling. Images are a big part of the Web,  so well learn about some powerful techniques to add to Web pages.  First, well see how to change an image with the click of a button, loading in a new image as required. Next, well discuss  the JavaScript image object and the images[] array and see how to place images and text on top of each other in a Web  page. Well also see how to use Internet Explorers Structured Graphics control, which lets you create your own graphics  under program control. and cover how to let the user drag images around in a Web page with the mouse.  As you might  expect, the two browsers handle this process entirely differently.   Finally, well take a look at image maps, those clickable images with active hotspots that when clicked, cause the  browser to navigate to a new location. Well start working with image maps in this chapter and add more JavaScript  power to them in Chapter 11, Connecting JavaScript and Java.    < previous page    page_231  next page >  If you like this book, buy it!   < previous page  page_232  next page > Page 232  As you can see, considerable programming power is coming up, so lets begin by loading images into a Web page on  demand.  Changing Images With the Click of a Button  We got a preview of our image-loading example, Img.htm, in Chapter 1, Welcome to JavaScript! When that page first  loads, it displays an image named image1. When the user clicks the Change Image button, the program loads in a new  image named image2 to replace image1.  This program will introduce us to image handling in JavaScript. Start Img.htm with the image itself and the button the  user clicks to change that image:        IMG example                    <IMG NAME = "IMG1" SRC = "gif image1.gif" WIDTH = 236        HEIGHT = 118>              <INPUT TYPE = BUTTON Value = "Change Image" onClick =        "ChangeImage  ">               Weve connected the button to a click event handler, ChangeImage  . Heres how we write that function:         function ChangeImage       < previous page    page_232  next page >  If you like this book, buy it!   < previous page  page_233  next page > Page 233      {      .      .      .      }     In that function, we reload the image with image2.gif, as shown here:          function ChangeImage         {          document.form1.IMG1.src = "gif image2.gif"       }     Weve used the   elements src property, which points out something interesting weve mentioned before: Many of  the HTML elements in Netscape Navigator, and all the HTML elements in Internet Explorer, can be treated as objects in  your code. In this example, weve named the   element IMG1, so we can use it as an object in our program,  changing its properties as we want.  Although all HTML elements can be treated as objects in Internet Explorer, thats not true in Netscape Navigator  the  objects that browser supports are listed in Table 2-1 .  Open the Img.htm page. When you click the Change Image button, the browser loads a new image into the page, as you  can see in Figure 6-1. Now we can change our Web page graphics under program control.  The code for this page, Img.htm, is shown in Listing 6-1.      We load a new image when the user clicks a button.  Figure 6-1    < previous page    page_233  next page >  If you like this book, buy it!   next page > Page 234  < previous page  page_234  Listing 6-1  Img.htm.     IMG example            <IMG NAME = "IMG1" SRC = "gif image1.gif" WIDTH = 236        HEIGHT = 118>        <INPUT TYPE = BUTTON Value = "Change Image" onClick =        "ChangeImage  ">                      function ChangeImage            {              document.form1.IMG1.src = "gif image2.gif"          }     TIP: You can now load images into Submit and Reset buttons by using those buttons src property.  Weve gotten an introduction to image handling with the preceding example. In the next one, well take a look at the JavaScript image  object and what it can do for us.     The Colors Page  In this example, well get an overview of how to work with images when you have many to work with, and the techniques for making that  task easier. This example introduces us to the images[] array, which holds all the images in a Web page, and the JavaScript image object,  which lets you work with individual images as objects.  This example, Colors.htm, will display 50 images, each of which is white, black, red, green, or blue, randomly assorted. When the user  clicks the button marked New colors, the program places a new colored image, selected at random, into one of the images already  displayed, also selected at random.    < previous page    page_234  next page >  If you like this book, buy it!   < previous page  page_235  Start Colors.htm with all the   tags well need:  next page > Page 235         The Colors Example                     Click the button to see new colors. . .                                                                                                                                                                      < previous page  page_235  next page >      If you like this book, buy it!   < previous page  page_236  next page > Page 236                                                        <INPUT TYPE = BUTTON VALUE = "New colors" onClick =        newImage  >           Note that we also added the button well use, and connected it to a function, newImage  . Now well turn to the  JavaScript code for this page.  Using the Image Object  In this program, we want to place a randomly chosen image into a randomly chosen   element. Working with  images this way is much easier if they are indexedthat is, can be addressed by index rather than name.  To index the five colored images we use in this program  the white, black, red, green, and blue images , well create an  array of JavaScript image objects. That takes care of the source for the images, and it introduces us to the image object.  That object has these properties: border, complete, height, hspace, lowsrc, name, prototype, src, vspace, and width; it  has no methods, but it does have the event handlers onAbort, onError, and onLoad.  It turns out that the   elements in the Web page are already indexed in the document objects images[] array, so  well use that array in this program, which takes care of the images target locations.  First, well create the image object array, which well name imageArray[]. Well load five images into this array from the  files white.gif, black.gif, red.gif, green.gif, and blue.gif. Begin by creating imageArray[]:     var imageArray = new Array 5           .          .          .     < previous page    page_236  next page >  If you like this book, buy it!   < previous page  page_237  next page > Page 237  Next, create the first image object and store it in the first element of imageArray[]. You pass the dimensions of the image in the new  image object to the image objects constructor. Well make that image 50 √ó 50 pixels:  You load an image into an image object by assigning the name of an image file to the image objects src property, so load in the white.gif  file this way:  TIP: Because images are loaded into an image object as soon as you assign an image to the objects src  property, you can use the image object to cache images, loading them in off-screen and then flashing them  into view immediately as needed. Caching images like this avoids long download times when the images are  called for.     var imageArray = new Array 5   imageArray[0] = new Image 50, 50            .           .           .     var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"           .           .           .     In the same way, load the other colored images into imageArray[]:     var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"           .           .           .     < previous page    page_237  If you like this book, buy it!  next page >   < previous page  page_238  next page > Page 238  Now we have our images in the imageArray[]. The next step is to place those images in the Web page   elements when called for,  and well use the document objects images[] array for that.  Using the images[] Array  Because all the   elements in the Web page are indexed in the document.images[] array, we will use that array when we place an  image in the Web page. To choose an   element at random, we need to create a random number that varies from 0 to 49 to use as an  index into that array, and well use the JavaScript math objects random   method to create that random number.  NOTE: The math objects methods are abs, acos, asin, atan, atan2, ceil, cos, exp, floor, log, max, min, pow,  random, round, sin, sqrt, and tan.     Heres how we select a colored image at random from the imageArray[] array and place it into an   element in the images[] array:     var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"  function newImage    {      document.images[Math.round 49.5 * Math.random   ].src          = imageArray[Math.round 4.5 * Math.random   ].src  }        And thats itweve stored our images as image objects in an array, then selected one image at random when the user clicks the button and  placed that image into an   element at random.  Open the page and click the New colors button several times. As you can see in Figure 6-2, new colors  unfortunately, converted to  shades of    < previous page    page_238  next page >  If you like this book, buy it!   < previous page  page_239  next page > Page 239  gray in this book!  appear in various locations throughout the page. Now weve gotten an introduction to the image  object in JavaScript.  The code for this page, Colors.htm, is shown in Listing 6-2.  Figure 6-2   We use image objects to display colored tiles   when the user clicks a button.  Listing 6-2  Colors.htm.        The Colors Example                     Click the button to see new colors...                                                   < previous page    page_239  If you like this book, buy it!  next page >   < previous page  page_240  next page > Page 240  Listing 6-2  Continued.                                                                                                                                                                           <INPUT TYPE = BUTTON VALUE = "New colors" onClick = newIm-        age  >              var imageArray = new Array 5     < previous page  page_240  next page >      If you like this book, buy it!   < previous page  page_241  next page > Page 241  Listing 6-2  Continued. imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"  function newImage    {      document.images[Math.round 49.5 * Math.random   ].src          = imageArray[Math.round 4.5 * Math.random   ].src  }       In the previous example, we loaded graphics images into image objects from files on disk: white.gif, black.gif and so  on. As it turns out, however, theres a way to generate graphics in codeat least in Internet Explorer. Well examine that  browsers Structured Graphics control next.  The Internet Explorer Structured Graphics Control  The Structured Graphics control is a Microsoft ActiveX control that comes with Internet Explorer 4.0  and is installed  automatically when you install that browser . You set this control up with the   tag, as you do for all ActiveX  controls. This control has both properties and methods; to use its properties, place a   tag in the    element, as shown in the following code. Note that you must specify the controls class ID value, 369303C2-D7AC11d0  89D500A0C90833E6, which Windows uses to keep track of the control in the Windows registry:  <OBJECT ID=object      STYLE="WIDTH:width; HEIGHT:height: Z-INDEX:z-index"      CLASSID="CLSID:369303C2-D7AC-11d0-89D5-00A0C90833E6" >               < previous page    page_241  next page >  If you like this book, buy it!   next page > Page 242  < previous page  page_242  Heres what the values in this element do:  object width height z-index Property Value     String identifying the Structured Graphics control. Desired width for the Structured Graphics drawing area Desired height for the Structured Graphics drawing area Desired z-index value for the Structured Graphics drawing area One of the Structured Graphics properties in Table 6-1. Valid value for that property.  You can find a list of this controls properties in Table 6-1.  Table 6-1 The Structured Graphics controls properties. Property CoordinateSystem DrawingSurface  ExtentHeight, ExtentWidth, ExtentLeft, ExtentTop properties Sets the height, width, left and top values of the shape   Means Sets the coordinate system to use for the world. Sets or returns the DirectAnimation drawing surface,  the visible rendering of the controls contents for use   script only .   in pixels . Turns anti-aliasing on or off. Fills the structured graphic shape with a  DirectAnimation IDAImage  script only . Returns the DirectAnimation Library reference  script  only . Sets or returns whether Mouse events should be  processed against the Structured Graphics object. Sets or returns a value indicating whether aspect ratio  should be preserved when extents are set. Enables the Structured Graphic control to use an  external file as the shape primitive description. Transforms the object using a DirectAnimation  IDATransform2 behavior  script only .  HighQuality Image  Library  MouseEventsEnabled  PreserveAspectRatio  SourceURL  Transform     To use the structured graphics controls methods, you set up the   tag this way:  <OBJECT ID=object      STYLE="WIDTH:width; HEIGHT:height: Z-INDEX:z-index"      CLASSID="CLSID:369303C2-D7AC-11d0-89D5-00A0C90833E6">               < previous page    page_242  If you like this book, buy it!  next page >   < previous page  page_243  next page > Page 243  Heres what the values in this element do:  object width height z-index nnnn method     String identifying the object. Desired width for the Structured graphics drawing area. Desired height for the Structured graphics drawing area z-index value for the Structured graphics drawing area. A sequence number for the method execution order. Must be in order starting with 0001. One of the elements in Table 6-2.  You can find a list of this controls methods in Table 6-2.  Table 6-2 The Structured Graphics controls methods. Method Arc FillSpline Oval Pie Polygon PolyLine PolySpline Rect RoundRect SetFillColor SetFillStyle SetFont SetGradientFill SetHatchFill SetLineColor SetLineStyle SetGradientShape SetTextureFill Text  Means Creates a single circular or elliptical arc. Creates a closed spline shape, defined by a series of points. Creates an ellipse. Creates an elliptical arc closed at the center of the bounding rectangle to form a wedge  pie  shape. Creates a closed polygon. Creates a segmented line. Creates an open spline shape, defined by a series of points. Creates a rectangle. Creates a rounded rectangle. Sets the foreground and background colors for graphic fills. Sets the type of fill. Sets the font for the control. Specifies the start and end points for a gradient fill. Specifies whether the hatch fill is transparent. Sets the line color for drawing graphics. Changes the line style for the current shape. Sets the shape of a gradient to be an outline of a polygon shape. Sets the texture source to be used for filling a Structured Graphics shape. Creates a string with the current font and color.       < previous page    page_243  If you like this book, buy it!  next page >   < previous page  page_244  next page > Page 244  The controls events are listed in Table 6-3.  Table 6-3 The Structured Graphics controls events. Event onclick ondblclick onmousedown onmousemove onmouseout onmouseover onmouseup  Means Occurs when the user has clicked the left mouse button on the structured graphic. Occurs when the user has double-clicked on the structured graphic. Occurs when the left button is pressed. Occurs when the user moves the mouse pointer across the structured graphic. Occurs when the cursor leaves the structured graphic. Occurs when the mouse pointer has entered the structured graphic. Occurs when the user releases the mouse button.     We can make all this clearer with an example, Struct.htm, where well use the Structured Graphics control to display a green  square. Then well place a circle in this square, dividing that circle up into eight pie-like sections of alternating light and dark  blue. Start Struct.htm by creating a Structured Graphics control in that Web page:         Internet Explorer Structured Graphics Control Exam-        ple             Internet Explorer Structured Graphics Control Exam-        ple   <OBJECT      STYLE="HEIGHT:250; WIDTH:250"      CLASSID="CLSID:369303C2-D7AC-11D0-89D5-00A0C90833E6">        <-           .           .           .  Well use this controls methods to draw our figure, so the name we give to each   element will be Line0001,  Line0002, Line0003, as this control requires.    < previous page    page_244  next page >  If you like this book, buy it!   < previous page  page_245  next page > Page 245  TIP: If you skip a number in the Linexxxx sequence, or get that sequence out of order, the Structured  Graphics control will stop execution.     Setting Drawing Colors  We can set the color of the lines well draw to red with the SetLineColor   method, passing it red, green, and blue color values, as shown  here:         Internet Explorer Structured Graphics Control        Example             Internet Explorer Structured Graphics Control       Example   <OBJECT      STYLE="HEIGHT:250; WIDTH:250"      CLASSID="CLSID:369303C2-D7AC-11D0-89D5-00A0C90833E6">                  .           .           .  In this example, we will start by drawing a green square, so set the fill color  the color figures will be filled with  to green with  SetFillColor  :        Internet Explorer Structured Graphics Control        Example             Internet Explorer Structured Graphics Control        Example   <OBJECT      STYLE="HEIGHT:250; WIDTH:250"      CLASSID="CLSID:369303C2-D7AC-11D0-89D5-00A0C90833E6">         ->             .           .           .     < previous page    page_245  If you like this book, buy it!  next page >   < previous page  page_246  next page > Page 246  Then set the fill style to 1, which means our figures will be filled in with solid color:         Internet Explorer Structured Graphics Control        Example             Internet Explorer Structured Graphics Control        Example   <OBJECT      STYLE="HEIGHT:250; WIDTH:250"      CLASSID="CLSID:369303C2-D7AC-11D0-89D5-00A0C90833E6">                                .           .           .  Now were ready to draw the green square.  Drawing Rectangles         Internet Explorer Structured Graphics Control        Example             Internet Explorer Structured Graphics Control        Example   <OBJECT      STYLE="HEIGHT:250; WIDTH:250"      CLASSID="CLSID:369303C2-D7AC-11D0-89D5-00A0C90833E6">                           <PARAM NAME="Line0004" VALUE="Rect -80, -80, 180, 180,       0 ">          .          .          .  We draw the square with the Rect   method. Pass the origin of the rectangle as  x, y  to Rect  , its width and height, as  well as its rotation  in degreeswell use 0 here  this way:     < previous page    page_246  next page >  If you like this book, buy it!   < previous page  page_247  next page > Page 247  The green square appears at this point. The next operation is to place a circle in the square with alternating light and  dark blue pie sections. Well do that by drawing a blue circle and then adding lighter pie sections.  Drawing Ovals  To draw the blue circle, well use the Oval   method. You pass the origin of the oval, as well as its width and height   which are the same for our circle  and a rotation angle to the Oval   method. Note that we also set the fill color to blue:         Internet Explorer Structured Graphics Control Exam-        ple             Internet Explorer Structured Graphics Control Exam-        ple   <OBJECT      STYLE="HEIGHT:250; WIDTH:250"      CLASSID="CLSID:369303C2-D7AC-11D0-89D5-00A0C90833E6">                           <PARAM NAME="Line0004" VALUE="Rect -80, -80, 180, 180,       0 ">             <PARAM NAME="Line0006" VALUE="Oval -80, -80, 180, 180,       0 ">          .          .          .  Finally, we will add the lighter pie sections to the circle.  Drawing Pie Sections  To draw a pie section, use the Pie   method, passing the origin of the pie slice, the width and height of an enclosing  oval, the start and end angle of the pie, and a rotation angle. Heres how we draw our pie sections after changing the fill  color to light blue:    < previous page    page_247  next page >  If you like this book, buy it!   < previous page  page_248  next page > Page 248         Internet Explorer Structured Graphics Control Exam-          ple             Internet Explorer Structured Graphics Control Exam-          ple   <OBJECT      STYLE="HEIGHT:250; WIDTH:250"      CLASSID="CLSID:369303C2-D7AC-11D0-89D5-00A0C90833E6">                           <PARAM NAME="Line0004" VALUE="Rect -80, -80, 180, 180,       0 ">             <PARAM NAME="Line0006" VALUE="Oval -80, -80, 180, 180,       0 ">      <PARAM NAME="Line0007" VALUE="SetFillColor 0, 200,       200 ">      <PARAM NAME="Line0008" VALUE="Pie -80, -80, 180, 180,       0, 40, 0 ">      <PARAM NAME="Line0009" VALUE="Pie -80, -80, 180, 180,       0, 40, 90 ">      <PARAM NAME="Line0010" VALUE="Pie -80, -80, 180, 180,       0, 40, 180 ">      <PARAM NAME="Line0011" VALUE="Pie -80, -80, 180, 180,       0, 40, 270 ">              Thats itopen this page in Internet Explorer. As you can see in Figure 6-3, the Structured Graphics control has drawn the  figure we wanted in that page. Our example is workingwere drawing our own graphics figures.  The code for this page, Struct.htm, is shown in Listing 6-3.  The next topic well cover in image handling is how to position your images in a Web page, even how to have one image  overlap another.    < previous page    next page >  page_248  If you like this book, buy it!   < previous page  page_249  next page > Page 249  Internet Explorers Structured Graphics control at work.  Figure 6-3   Listing 6-3  Struct.htm.        Internet Explorer Structured Graphics Control Exam-        ple             Internet Explorer Structured Graphics Control Exam-        ple   <OBJECT      STYLE="HEIGHT:250; WIDTH:250"      CLASSID="CLSID:369303C2-D7AC-11D0-89D5-00A0C90833E6">                           <PARAM NAME="Line0004" VALUE="Rect -80, -80, 180, 180,       0 ">             <PARAM NAME="Line0006" VALUE="Oval -80, -80, 180, 180,       0 ">      <PARAM NAME="Line0007" VALUE="SetFillColor 0, 200,       200 ">      <PARAM NAME="Line0008" VALUE="Pie -80, -80, 180, 180,       0, 40, 0 ">      <PARAM NAME="Line0009" VALUE="Pie -80, -80, 180, 180,       0, 40, 90 ">      <PARAM NAME="Line0010" VALUE="Pie -80, -80, 180, 180,       0, 40, 180 ">      <PARAM NAME="Line0011" VALUE="Pie -80, -80, 180, 180,         0, 40, 270 ">                < previous page    page_249  next page >  If you like this book, buy it!   < previous page  page_250  next page > Page 250  Positioning Your Images in a Web Page  Part of handling images is placing them where you want them, and that task has gotten easier in HTML. Well take a  look at the new HTML support for positioning images, and then see how to move images dynamically under user  control when they drag images around the screen.  In this first example, ImagePile.htm, well see how to draw two images, one on top of the other. This is relatively easy to  do in HTML by using the   tag, which lets you set up divisions in your Web page that you can name and use as  objects. Well use two  s in this example, one for each image. You can position a   by using its STYLE  attribute, and well do that to place one image on top of another.  Start with the first  , placing its upper-left corner at  150, 150  in our Web page and giving it a width and height  this way  notice we indicate that were giving its position in absolute terms :         Overlapping Image Example               Overlapping Images . . .               Putting images on top of each other      <DIV STYLE="POSITION:ABSOLUTE; LEFT:150; TOP:150;       WIDTH:240; HEIGHT:300">    .    .    .  Next we add the first image to this  , using the   tag:         Overlapping Image Example               < previous page    page_250  next page >  If you like this book, buy it!   < previous page  page_251  next page > Page 251  We set up the second   and image in almost the same way, just offsetting it a little from the first image:     Overlapping Images . . .               Putting images on top of each other      <DIV STYLE="POSITION:ABSOLUTE; LEFT:150; TOP:150;       WIDTH:240; HEIGHT:300">       <IMG ID = "image2" WIDTH = 236 HEIGHT = 118  SRC="im-       ages image1.gif">        .     .     .         Overlapping Image Example               Overlapping Images ...               Putting images on top of each other      <DIV STYLE="POSITION:ABSOLUTE; LEFT:150; TOP:150;       WIDTH:240; HEIGHT:300">       <IMG ID = "image2" WIDTH = 236 HEIGHT = 118  SRC="im-        ages image1.gif">     <DIV STYLE="POSITION:ABSOLUTE; LEFT:120; TOP:60; WIDTH:240;       HEIGHT:250">                   Now open this page. As you can see in Figure 6-4, Image 2 overlaps Image 1a relatively new feature in Web pages.  The code for this page, ImagePile,htm, is shown in Listing 6-4.    < previous page    page_251  If you like this book, buy it!  next page >   < previous page  page_252  next page > Page 252  Figure 6-4   Supporting overlapping images.  Listing 6-4  ImagePile.htm.        Overlapping Image Example               Overlapping Images...               Putting text on top of text      <DIV STYLE="POSITION:ABSOLUTE; LEFT:150; TOP:150;       WIDTH:240; HEIGHT:300">          <IMG ID = "image2" WIDTH = 236 HEIGHT = 118       SRC="images image1.gif">     <DIV STYLE="POSITION:ABSOLUTE; LEFT:120; TOP:60; WIDTH:240;       HEIGHT:250">                 Now that weve seen how to position images in HTML, lets take a look at how to work with that position in JavaScript.  In particular, well let the user drag an image around the Web page using the mouse. Internet Explorer and Netscape  Navigator really diverge on how to drag images, howeverso much so that it hardly makes sense to write one Web page  for    < previous page    page_252  next page >  If you like this book, buy it!   < previous page  page_253  next page > Page 253  this task. Therefore, well write two pages: one for Internet Explorer and one for Netscape Navigator.  To move an image around in Internet Explorer, you can simply set the style position properties of one of the images, following the users  mouse movements. However, you cant dynamically update style position properties in Netscape Navigator, so our approach must be  different there. In Navigator, well use layers, new in JavaScript 1.2  and not available in Internet Explorer , placing each image in its own  layer. We can then move an image around by moving its layer in response to mouse movements.  TIP: You could, if you really wanted to, write one page for both browsers, using the Navigators    and   tags. You use these tags to hide HTML  and code in   elements   from browsers that dont support layers. By checking the appName property to see what browser the page is  running in, and using the   tag, you could combine the image-dragging examples were about to  write into one multibrowser page.     Dragging and Dropping in Internet Explorer  In this next example, well display two images to users: one they can drag with the mouse, and one they cant. To move an image, the user  just presses the mouse button when the mouse cursor is on an image and then drags that image to a new location, releasing the mouse  button to complete the operation.  Well begin this new page, Move.htm, with two  s, one for each image, and then include the two images well need:         Dragging and Dropping in Internet Explorer               Dragging and Dropping in Internet Explorer              < previous page    page_253  If you like this book, buy it!  next page >   < previous page  page_254  next page > Page 254    <IMG ID = "image2" STYLE = "CONTAINER:POSITIONED; POSI-       TION:ABSOLUTE;          TOP:150px; LEFT:150px; WIDTH: 236px; HEIGHT =       118PX;"          SRC="images move1.gif">    <IMG STYLE = "CONTAINER:POSITIONED; POSITION:ABSOLUTE;          TOP = 60px; LEFT = 60px; WIDTH:236px;       HEIGHT:118px;"          SRC="images move2.gif" onMouseMove = moveImage  >       .    .    .  Notice that we have connected a new mouse event to the second imagethe mouseMove event.  The mouseMove Event  As you might expect, the mouseMove event occurs when the user moves the mouse. Heres how we create our  mouseMove event handler in Move.htm:         Dragging and Dropping in Internet Explorer               Dragging and Dropping in Internet Explorer             <IMG ID = "image2" STYLE = "CONTAINER:POSITIONED; POSI-       TION:ABSOLUTE;          TOP:150px; LEFT:150px; WIDTH: 236px; HEIGHT =       118PX;"          SRC="images move1.gif">    <IMG STYLE = "CONTAINER:POSITIONED; POSITION:ABSOLUTE;          TOP = 60px; LEFT = 60px; WIDTH:236px;       HEIGHT:118px;"          SRC="images move2.gif" onMouseMove = moveImage  >        function moveImage    {    .     < previous page    page_254  next page >  If you like this book, buy it!   < previous page  page_255  next page > Page 255  In that event handler, we first check to make sure the left mouse button is down; if not, the user is moving the mouse but  not dragging anything, so we should quit:    .    .  }              function moveImage    {      if window.event.button != 1 {           return      }        .        .        .  }        function moveImage    {      if window.event.button != 1 {          return      }      with window.event.srcElement.style {          .          .          .      }  }     If the left mouse button is down, the user is dragging the mouse. In that case, we want to move the image accordingly.  We can refer to the object the user is dragging with the srcElement member of the window.event objectthats the object  that caused the mouseMove event. We will change the srcElements style properties, so we start by using a with  statement:  The actual location of the image is set with its pixelLeft and pixelTop style properties. Heres how we set pixelLeft,  using the mouses x location from window.event.x, adjusting our position in the image to be halfway across its width   the image is 236 pixels wide , and allowing for the   element to be offset from the windows origin at the upper- left corner:    < previous page    page_255  next page >  If you like this book, buy it!   next page > Page 256  < previous page  page_256     function moveImage    {      if window.event.button != 1 {          return      }      with window.event.srcElement.style {  ->     pixelLeft = window.event.x - 236   2 -       document.all.ImageDiv.offsetLeft              .              .              .      }  }     We set the y location of the image with its pixelTop property in the same way:     function moveImage    {      if window.event.button != 1 {          return      }      with window.event.srcElement.style {          pixelLeft = window.event.x - 236   2 -       document.all.ImageDiv.offsetLeft   ->    pixelTop = window.event.y - 118   2 -       document.all.ImageDiv.offsetTop      }  }     Theres one very important consideration. Both Internet Explorer and Netscape Navigator support drag-and-drop  Windows 95 operations, so if users just drag the mouse, each browser assumes theyre trying to drag and drop a standard  object  like a file  into the browser to open that object. Because theres no such object in reality, the browser blocks the  operation and stops the dragging, so we have to cancel the system drag-and-drop operation ourselves to allow the user  to continue.  Cancelling System Drag and Drop  We can cancel the standard Windows 95 drag-and-drop operation by returning a value of false from the mouseMove  event handler. We do that by placing a false value in the window.event objects returnValue  retval in earlier versions of  Internet Explorer  property:    < previous page    page_256  next page >  If you like this book, buy it!   < previous page  page_257  next page > Page 257     function moveImage    {      if window.event.button != 1 {          return      }      with window.event.srcElement.style {          pixelLeft = window.event.x - 236   2 -       document.all.ImageDiv.offsetLeft          pixelTop = window.event.y - 118   2 -       document.all.ImageDiv.offsetTop      }  -> window.event.returnValue = false  }     Thats itnow weve set up our own dragging and dropping of images in Internet Explorer.  TIP: Although were dragging and dropping images in this example, you can use the same code to drag and  drop any HTML element in Internet Explorer. Just replace the   element with the element s  you want  to use.     Open this page in Internet Explorer, as shown in Figure 6-5. You can drag the Move me with the mouse! image around at will. Our Move. htm example is a success!  The code for this page, Move.htm, is shown in Listing 6-5.     < previous page    We drag and drop images in Internet Explorer.  Figure 6-5   page_257  If you like this book, buy it!  next page >   next page > Page 258  < previous page  page_258  Listing 6-5  Move.htm.        Dragging and Dropping in Internet Explorer               Dragging and Dropping in Internet Explorer             <IMG ID = "image2" STYLE = "CONTAINER:POSITIONED; POSI-       TION:ABSOLUTE;          TOP:150px; LEFT:150px; WIDTH: 236px; HEIGHT =       118PX;"          SRC="images move1.gif">    <IMG STYLE = "CONTAINER:POSITIONED; POSITION:ABSOLUTE;          TOP = 60px; LEFT = 60px; WIDTH:236px;        HEIGHT:118px;"          SRC="images move2.gif" onMouseMove = moveImage  >        function moveImage    {      if window.event.button != 1 {          return      }      with window.event.srcElement.style {          pixelLeft = window.event.x - 236   2 -       document.all.ImageDiv.offsetLeft          pixelTop = window.event.y - 118   2 -       document.all.ImageDiv.offsetTop      }      window.event.returnValue = false  }           TIP: You can disable the pop-up help menu that appears in a browser when the user clicks the right mouse  button by returning false from the onMouseDown event handler.     Now well do the same thing in Netscape Navigatorbut well do it a whole different way.    < previous page    page_258  If you like this book, buy it!  next page >   < previous page  page_259  next page > Page 259  Dragging and Dropping in Netscape Navigator  Unlike Internet Explorer, you cant dynamically update the style position properties of objects in Netscape Navigator. Instead, well use  Netscape Navigator layers to let the user move images around with the mouse.  Just as in the previous example, we will display two images in our Web pageone the user can move and the other one they cant.  Using the mouse, they can drag the first image around as they like.  To perform this operation, well use Netscape layers, which work just as you might expectby letting you place elements in layers, one on  top of another. The properties of the layer object are shown in Table 6-4, and its methods are listed in Table 6-5.  Table 6-4 The layer objects properties. Property Can be Modified Means document No  name left  No Yes  top Yes pageX Yes pageY Yes zIndex Yes visibility Yes      Table continued on next page     < previous page    Each layer object contains its own document object, which can be used to access the images,  applets, embeds, links, anchors, and layers contained within the layer. Methods of the document  object can be invoked only to change the contents of the layer. The name assigned to the layer through the NAME or ID attribute. The horizontal position of the layers left edge, relative to the origin of its parent layer  for layers  with absolute positions  or relative to the natural flow position  for layers with relative positions . The vertical position of the layers top edge relative to the origin of its parent layer. The horizontal position of the layer relative to the page. The vertical position of the layer relative to the page. The relative z-order of this layer with respect to siblings. Determines whether the layer is visible.  page_259  If you like this book, buy it!  next page >   < previous page  page_260  Table 6-4 Continued. Property clip.top clip. left clip.right clip.bottom clip.height clip. width background bgColor  Can be Modified Means Yes  next page > Page 260  Yes Yes  No  No  No  No  No  Yes  These properties define the clipping rectangle,  which specifies the part of the layer thats visible. The image to use as the background for the layer. The color to use as a solid background color for  the layer. The layer object above this one in the stacking  order, among all layers that share the same parent  layer or null if the layer has no sibling above. The layer object below this one in z-order, among  all layers that share the same parent layer or null  if the layer is at the very bottom. The layer object above this one in z-order, among  all layers in the document or the enclosing  window object if this layer is topmost. The layer object below this one in z-order, among  all layers in the document or null if this layer is at  the very bottom. The layer object that contains this layer, or the  enclosing window object if this layer is not nested  in another layer. Source of the content for the layer, specified as a  URL.  Table 6-5 The layer objects methods. Method Does This Moves this layer by dx pixels to the left, and dy pixels down, from its current position. moveBy dx, dy  For layers with absolute positions, this method changes the layers position to the specified pixel  moveTo x, y  coordinates within the containing layer or document. Changes the layer position to the specified pixel coordinates within the page.  moveToAbsolute x, y  resizeBy dwidth, dheight  Resizes the layer by the specified height and width values  in pixels .   Table continued on next page     < previous page    page_260  If you like this book, buy it!  next page >  siblingAbove  siblingBelow  above  below  parentLayer  src         < previous page  page_261  next page > Page 261  Table 6-5 Continued. Method resizeTo width, height  Resizes the layer to have the specified height and width values  in pixels . moveAbove layer   Does This  Stacks this layer  in z-order  above the layer specified in the argument, without changing either  layers horizontal or vertical position. Stacks this layer  in z-order  below the specified layer, without changing the layers horizontal or  vertical position.  load sourcestring, width  Changes the source of a layer to the contents of the file indicated.  moveBelow layer      We start this new page, Move2.htm, by setting up two layers, layer1 and layer2, each of which holds an   element  much like the    elements in the previous example each held an   element :         Dragging and Dropping in Netscape Navigator             Dragging and Dropping in Netscape Navigator           <IMG NAME = IMG1 SRC = "move1.gif" WIDTH = 236 HEIGHT =        118>          <IMG NAME = IMG1 SRC = "move2.gif" WIDTH = 236 HEIGHT =        118>               Dragging and Dropping in Netscape Navigator             Dragging and Dropping in Netscape Navigator           <IMG NAME = IMG1 SRC = "move1.gif" WIDTH = 236 HEIGHT =        118>  Note that we name each layer and give its position by using the LEFT and TOP attributes to position it in our Web page. Next, well add  the code we need for this page in the   element:     < previous page    page_261  If you like this book, buy it!  next page >   < previous page  page_262  next page > Page 262          <IMG NAME = IMG1 SRC = "move2.gif" WIDTH = 236 HEIGHT =        118>              .     .     .        Our first step will be to use Netscape Navigators mouseMove event.  The mouseMove Event  To catch any mouseMove events in Netscape Navigator, you must capture those events specifically with the  captureEvents   method. This method captures mouse events and lets you send those events to an event handler.  Although you dont normally need to use captureEvents   with mouseDown and mouseUp events, well use that method  here because we support layers in our page that will have their own mouse events. By capturing all mouse events, we  can send them to the event handlers we connect to the document. In OCE, that process looks like this, where we send all  mouseDown events to the documents event handler, mouseDownHandler  :     document.captureEvents Event.MOUSEDOWN      .     .     .        document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler     .     .     .     In the same way, we can capture all mouseUp and mouseMove events for all layers and the document itself, as shown  here:    < previous page    page_262  next page >  If you like this book, buy it!   < previous page  page_263  next page > Page 263  Now our mouse event handlers will be called no matter where the mouse event originated. Well keep track of the state  of the mouse buttonup or downin a Boolean flag named downFlag, which we set to true when the mouse button goes  down  and we should start dragging the image :     document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler  document.captureEvents Event.MOUSEUP   document.onMouseUp = mouseUpHandler  document.captureEvents Event.MOUSEMOVE   document.onMouseMove = mouseMoveHandler     .     .     .     var downFlag = false  document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler  document.captureEvents Event.MOUSEUP   document.onMouseUp = mouseUpHandler  document.captureEvents Event.MOUSEMOVE   document.onMouseMove = mouseMoveHandler  function mouseDownHandler    {     downFlag = true  }     var downFlag = false  document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler  document.captureEvents Event.MOUSEUP   document.onMouseUp = mouseUpHandler  document.captureEvents Event.MOUSEMOVE   document.onMouseMove = mouseMoveHandler  function mouseDownHandler    {     downFlag = true  }  function mouseUpHandler    {     downFlag = false  }     Also, we set downFlag to false when the button goes up  and we should end the dragging procedure :     < previous page    page_263  next page >  If you like this book, buy it!   < previous page  page_264  next page > Page 264  In the mouseMovehandler   event handler, first check to see whether the mouse button is down by examining downFlag:     var downFlag = false  document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler  document.captureEvents Event.MOUSEUP   document.onMouseUp = mouseUpHandler  document.captureEvents Event.MOUSEMOVE   document.onMouseMove = mouseMoveHandler  function mouseDownHandler    {     downFlag = true  }  function mouseUpHandler    {     downFlag = false  }  function mouseMoveHandler e   {     if downFlag {       .       .       .     }  }        var downFlag = false  document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler  document.captureEvents Event.MOUSEUP   document.onMouseUp = mouseUpHandler  document.captureEvents Event.MOUSEMOVE   document.onMouseMove = mouseMoveHandler  function mouseDownHandler    {     downFlag = true  }  function mouseUpHandler    {     downFlag = false  }  function mouseMoveHandler e   {     if downFlag {        Image1 = document.layers['layer2'];  If the button is down and the mouse is moving, the user is dragging the mouse, so we should move the movable image  to match. To do that, first get a layer object corresponding to the layer with that image:     < previous page    page_264  next page >   If you like this book, buy it!   < previous page  page_265  next page > Page 265          .          .          .     }  }     Now we move the layer to correspond to the mouse location, using the Layer objects moveTo   method:     var downFlag = false  document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler  document.captureEvents Event.MOUSEUP   document.onMouseUp = mouseUpHandler  document.captureEvents Event.MOUSEMOVE   document.onMouseMove = mouseMoveHandler  function mouseDownHandler    {     downFlag = true  }  function mouseUpHandler    {     downFlag = false  }  function mouseMoveHandler e   {     if downFlag {         Image1 = document.layers['layer2'];         Image1.moveTo e.pageX - 236   2, e.pageY - 118  2 ;     }  }     Just as in Internet Explorer, we need to cancel system drag and drop. We do that by returning a value of false from the  mouseMove handler:     var downFlag = false  document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler  document.captureEvents Event.MOUSEUP   document.onMouseUp = mouseUpHandler  document.captureEvents Event.MOUSEMOVE   document.onMouseMove = mouseMoveHandler  function mouseDownHandler    {     downFlag = true  }  function mouseUpHandler    {     < previous page    page_265  next page >   If you like this book, buy it!   < previous page  page_266  next page > Page 266     downFlag = false  }  function mouseMoveHandler e   {     if downFlag {         Image1 = document.layers['layer2'];         Image1.moveTo e.pageX - 236   2, e.pageY - 118  2 ;     }     return false   }     Thats itopen the page now in Netscape Navigator, as shown in Figure 6-6. Using the mouse, users can drag the movable  image around. Now were dragging and dropping images in Netscape Navigator by using layers!  The code for this page, Move2.htm, is shown in Listing 6-6.  We let the user drag images in Netscape Navigator.  Figure 6-6   Listing 6-6  Move2.htm.        Dragging and Dropping in Netscape Navigator             Dragging and Dropping in Netscape Navigator           <IMG NAME = IMG1 SRC = "move1.gif" WIDTH = 236 HEIGHT =        118>      < previous page    page_266  next page >  If you like this book, buy it!   < previous page  page_267  next page > Page 267  Listing 6-6  Continued.         <IMG NAME = IMG1 SRC = "move2.gif" WIDTH = 236 HEIGHT =        118>           var downFlag = false  document.captureEvents Event.MOUSEDOWN   document.onMouseDown = mouseDownHandler  document.captureEvents Event.MOUSEUP   document.onMouseUp = mouseUpHandler  document.captureEvents Event.MOUSEMOVE   document.onMouseMove = mouseMoveHandler  function mouseDownHandler    {     downFlag = true  }  function mouseUpHandler    {     downFlag = false  }  function mouseMoveHandler e   {     if downFlag {         Image1 = document.layers['layer2'];         Image1.moveTo e.pageX - 236   2, e.pageY - 118  2 ;     }     return false   }       The last topic well cover on image handling is how to create an image map.  Image Maps  As our final topic for this chapter, well take a look at how to create clientside image maps using HTML. At first, this  might not seem to be a JavaScript topic, but later in this book well see how to modify our image map so that when the  user clicks a hotspot in our map, we can execute lines of JavaScript instead of having the browser navigate to a new  URL.    < previous page    page_267  next page >  If you like this book, buy it!   < previous page  page_268  next page > Page 268  Whats a hotspot? A hotspot is an active location in the image that makes up an image map; when clicked, it makes the  browser navigate to a new location. In our image map example, well include two hotspots: one that will send us to  Netscapes Web site and one for Microsofts Web site. To navigate to these Web sites, the user simply clicks one of the  hotspots.  Lets put this example together now. Use the HTML   tag, giving this map the name IMAP:           An Image Map Example              An Image Map Example          .    .    .  Next, use the   tag to set up the Microsoft hotspot, giving the coordinates  in pixels  of the hotspot and the URL  we want to link it to:           An Image Map Example              An Image Map Example        <AREA NAME = "link1" COORDS = "54,105,118,125"          HREF = "" target="_BLANK">http:  www.microsoft.com''>          .          .          .  Add the second hotspot for Netscape, as shown here:           < previous page    page_268  next page >  If you like this book, buy it!   < previous page  page_269  next page > Page 269     An Image Map Example              An Image Map Example        <AREA NAME = "link1" COORDS = "54,105,118,125"          HREF = "" target="_BLANK">http:  www.microsoft.com''>  <AREA NAME = "link2" COORDS = "104,53,171,75"          HREF = "" target="_BLANK">http:  www.netscape.com">        <-     Finally, display the image map itself, imap.gif, with the   tag:           An Image Map Example              An Image Map Example        <AREA NAME = "link1" COORDS = "54,105,118,125"          HREF = "" target="_BLANK">http:  www.microsoft.com">  <AREA NAME = "link2" COORDS = "104,53,171,75"          HREF = "" target="_BLANK">http:  www.netscape.com">     <IMG SRC = "imap.gif" WIDTH = 240 HEIGHT = 155 USEMAP =        "IMAP"> <-        Note that weve used the USEMAP attribute to connect the   element weve already set up to the   element.  Now open the page and click one of the hotspots, as shown in Figure 6-7. When you do, the browser will navigate to the  URL youve selected.  The code for this page, Imap.htm, is shown in Listing 6-7.    < previous page    page_269  If you like this book, buy it!  next page >   < previous page  page_270  next page > Page 270  We support an image map with hotspots.  Figure 6-7   Listing 6-7  Imap.htm.          An Image Map Example                 An Image Map Example        <AREA NAME = "link1" COORDS = "54,105,118,125" HREF          = "" target="_BLANK">http:  www.microsoft.com">  <AREA NAME = "link2" COORDS = "104,53,171,75" HREF          = "" target="_BLANK">http:  www.netscape.com">     <IMG SRC = "imap.gif" WIDTH = 240 HEIGHT = 155 USEMAP =        "IMAP">          That example completes our image handling for the moment. In this chapter, weve seen how to work with images,  loading them into a Web page on demand, how to use the images[] array and the image object, how to use Internet  Explorers Structured Graphics control, and how to position images in Web pages. Weve also learned how to reposition  images in      < previous page    page_270  next page >  If you like this book, buy it!   < previous page  page_271  next page > Page 271  a Web page under program control by using style properties in Internet Explorer and layers in Netscape Navigator.  Finally, weve taken a quick look at image maps.  All this image handling has prepared us for the next chapter because well cover a popular topic there: graphics  animation.    < previous page    page_271  next page >  If you like this book, buy it!   < previous page  page_273  next page > Page 273  Chapter 7  Graphics Animation With JavaScript  In this chapter, were going to explore graphics animation, one of the most popular aspects of Web programming. As  well see, the traditional JavaScript methods of supporting animation have been augmented by built-in methods in the  browsers.  In this chapter, well cover the traditional method of supporting animation in JavaScriptchanging images onscreen to  animate them. Next, well work with the DirectAnimation controls, starting with the DirectAnimation viewer control, in  Internet Explorer to get an overview of the animation support available in that browser.  Next, well turn to Netscape Navigator, seeing how to use layers to support animation in that browser. To end the  chapter, well take a look at two of Internet Explorers DirectAnimation multimedia controls: the Sequencer control,  which can direct other controls in a timed sequence, and the Path control, which moves HTML objects along a path in a  Web page.    < previous page    page_273  next page >  If you like this book, buy it!   < previous page  page_274  next page > Page 274  Theres a lot to cover in this chapter, so well get started at once with the simplest form of JavaScript animation as we  take a look at our first example, the Randomizer.  JavaScript Animation: The Randomizer Example  In the previous chapter, we created an example named Colors that displayed 50 colored images. When the user clicked  the New colors button, we picked a colored image at random and placed it into an   element  also chosen at  random  on the page. We can animate that process now. In this new page, Random.htm, well display the same 50  images, but this time well fill them under program controlno button necessary.  The program automatically loads in the five images and places them at random into the 50   elements, creating a  pleasing display. Creating this example will acquaint us with one way of creating animation in JavaScriptthe rapid  introduction of cached images into a Web page. The technique is to cache your images in image objects and then flash  them onscreen as needed. Your image sequence could depict any sort of animation as figures in that image appear to  move around.  Well start this new example, Random.htm, with the 50   elements in the Web page where well display our  colored images:        Randomizer!                     The Randomizer                                      < previous page    page_274  next page >  If you like this book, buy it!   < previous page  page_275  next page > Page 275                                                                                                                                                                                           Next, we load in the five images from their respective fileswhite.gif, black.gif, red.gif, and so onplacing those images  into an array of image objects named imageArray[]:    < previous page    page_275  next page >  If you like this book, buy it!   < previous page  page_276  next page > Page 276     var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"           .           .           .  Now were ready to support animation in our Web page.  Supporting Basic Animation  Well start our exploration of animation with the simplest possible techniqueusing the setTimeout   method to introduce a delay in a  repeated operation. You use setTimeout   this way: timeoutID = setTimeout expression, msec  Here, expression is the JavaScript expression you want the program to evaluate after a delay of msec milliseconds  1 1000 of a second .  TIP: The timeoutID value above is an identifier you can use to cancel the evaluation of expression by using  the clearTimeout   method.     In this example, well use setTimeout   to create a delay of 25 milliseconds; after the delay is over, well have the program call a new  function, animateImage  :     var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"     < previous page    page_276  If you like this book, buy it!  next page >   next page > Page 277  < previous page  page_277  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"  animateInterval = setTimeout "animateImage  ", 5 ;           .           .           .  All thats left is to write the animateImage   method:    var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"  animateInterval = setTimeout "animateImage  ", 5 ;     function animateImage    {    .    .    .  }        var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"  animateInterval = setTimeout "animateImage  ", 5 ;     function animateImage    {  In this new function, we select an image at random and place it in a random   element:     < previous page    page_277  next page >  If you like this book, buy it!   next page > Page 278  That completes one iteration of the animation. To keep the animation going, we call setTimeout   again, calling the same function,  animateImage  , again and again:  < previous page  page_278      document.images[Math.round 49.5 * Math.random   ].src          = imageArray[Math.round 4.5 * Math.random   ].src               .               .               .  }        var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"  animateInterval = setTimeout "animateImage  ", 5 ;     function animateImage    {      document.images[Math.round 49.5 * Math.random   ].src          = imageArray[Math.round 4.5 * Math.random   ].src      animateInterval = setTimeout "animateImage  ", 5 ;  }     In this way, our animation keeps going forever. Of course, its best to allow some way of ending such an animation; you can do so by  adding a button that sets a flag to end the process and checking that flag each time through animateImage  .  Open the page now, as shown in Figure 7-1. As you can see, the program selects images automatically, placing them at random in our  Web page. Weve completed our first, short JavaScript animation example.  TIP: Of course, theres no reason to fill many different images if you want to animate a single image. In that  case, youd display a sequence of images in the same   element.     The code for this page, Random.htm, is shown in Listing 7-1.    < previous page    page_278  If you like this book, buy it!  next page >   < previous page  page_279  next page > Page 279  The Randomizer illustrates simple animation.  Figure 7-1   Listing 7-1  Random.htm.        Randomizer!                     The Randomizer                                                                                < previous page    page_279  If you like this book, buy it!  next page >   < previous page  page_280  Listing 7-1  Continued.                                                                                                                                                     var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"     < previous page    page_280  next page > Page 280  next page >   If you like this book, buy it!   < previous page  page_281  next page > Page 281  Listing 7-1  Continued. animateInterval = setTimeout "animateImage  ", 5 ;     function animateImage    {      document.images[Math.round 49.5 * Math.random   ].src          = imageArray[Math.round 4.5 * Math.random   ].src      animateInterval = setTimeout "animateImage  ", 5 ;  }       After having written our relatively simple first animation example, well plunge into the depths of Internet Explorers DirectAnimation next.  Using Internet Explorer's DirectAnimation  Internet Explorer 4.0 supports an immense library of routines and methods for animation and multimedia collectively called  DirectAnimation. It would take several books to cover this complex topic adequately, so well just supply an overview of DirectAnimation  here.  TIP: You can get the documentation and samples for Microsoft DirectAnimation in the InetSDK at http:   www.microsoft.com msdn sdk inetsdk asetup first.asp. Note, however, that youll need 60M free on your hard  disk just for the DirectAnimation documentation and samples.     The Microsoft DirectAnimation Multimedia controls include the DAViewerControl control, the Path control, the Sequencer control, the  Sprite control, and the Structured Graphics control. We used the Structured Graphics control in the previous chapter; in this chapter, well  explore the DAViewerControl, Sequencer, and Path controls.  Our first DirectAnimation example uses the DAViewerControl, which you embed in a Web page this way:     <OBJECT ID="DAViewer"      STYLE="position:absolute; left:10;      top:10;width:450;height:450"      CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">           < previous page    page_281  If you like this book, buy it!  next page >   < previous page  page_282  next page > Page 282  We can use this control to display DirectAnimation objects, thus supporting animation. The methods of this control are  listed in Table 7-1, and its properties are in Table 7-2.  Table 7-1 The DAViewerControl methods. AddBvrToRun Drag Move SetFocus ShowWhatsThis Start ZOrder        Table 7-2 The DAViewerControl properties. BackgroundImage Container DragIcon DragMode Height HelpContextID Image Index InputImage Left MeterLibrary Name  Object Parent PixelLibrary Sound TabStop Tag ToolTipText Top UpdateInterval Visible WhatsThisHelpID Width  In this example, Animation.htm, well create a figure of colored triangles and boxes. After creating the figure, well  animate it, sweeping it across the Web page from lower left to upper right, and twisting it in three dimensions as it  moves.  Well start this new page, Animation.htm, by adding a DAViewerControl object:    < previous page    page_282  If you like this book, buy it!  next page >   < previous page  page_283  next page > Page 283           DirectAnimation in Internet Explorer                 DirectAnimation in Internet Explorer     <OBJECT ID="DirectAnimationControl"     STYLE = "POSITION:ABSOLUTE; LEFT:10%; TOP:100;        WIDTH:90%; HEIGHT:80%"     CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">           .     .     .  TIP: Note that you can specify the Left, Top, Width, and Height properties in terms of browser window  percentanges, not just in terms of pixel measurements. In fact, its often a good idea to do so because screen  resolutions and running conditions can vary among your programs users.     The DAViewerControl object is the only Web page object well need here, so we add our   section next:           DirectAnimation in Internet Explorer                 DirectAnimation in Internet Explorer          <OBJECT ID="DirectAnimationControl"     STYLE = "POSITION:ABSOLUTE; LEFT:10%; TOP:100;        WIDTH:90%; HEIGHT:80%"     CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">                    .           .           .     < previous page    page_283  If you like this book, buy it!  next page >   < previous page  page_284  Now we can pick a library of DirectAnimation routines to work with.  The PixelLibrary and the MeterLibrary  next page > Page 284  DirectAnimation has two extensive libraries of routines you can use: the PixelLibrary, where all measurements are in  pixels, and the MeterLibrary, where all measurements are in meters. Well use the MeterLibrary routines here:     var MeterLibrary = DirectAnimationControl.MeterLibrary           .          .          .  Now that weve selected a library of routines, the next step is to create the figure well animate. We create that figure by  drawing it on a drawing surface.  Using Drawing Surfaces  You draw graphics figures on drawing surfaces in DirectAnimation, so well use the MeterLibrary method  NewDrawingSurface   to create such a surface, as shown here:     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface            .          .          .  The drawing surface methods are listed in Table 7-3.  Table 7-3 The DirectAnimation drawing surface methods. ArcDegrees ArcRadians AutoSizeFillScale BorderColor BorderDashStyle BorderJoinStyle BorderWidth  LineColor LineDashStyle LineEndStyle LineJoinStyle LinePoints LineWidth Opacity       < previous page    page_284  next page >  If you like this book, buy it!   < previous page  page_285  next page > Page 285  Table 7-3 Continued. Clear Crop CropPoints DrawPath FillColor FillImage FillPath FillStyle FillTexture FixedFillScale Font GradientExtent GradientExtentPoints GradientRolloffPower GradientRolloffPowerAnim GradientShape HorizontalFillScale Line     OpacityAnim Oval OverlayImage PieDegrees PieRadians Polygon Polyline Rect Reset RestoreGraphicsState RoundRect SaveGraphicsState SecondaryFillColor Text TextPoint Transform VerticalFillScale  In this example, we want to create a figure composed of boxes and triangles and then animate it. Well create this figure  with the drawing surface Polyline   method, which lets you draw figures composed of line segments. We can fill in  those figures as well, using the FillPath   method.  To start, set the fill color  the color we want our figures to use , using the drawing surface FillColor   method. We set  colors with the MeterLibrarys ColorRgb   method, passing red, green, and blue color values that range from 0 to 1.  Heres how we set the fill color to yellow:     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0             .           .           .     < previous page    page_285  next page >  If you like this book, buy it!   < previous page  page_286  next page > Page 286  Now we use the MeterLibrary method Polyline   to draw a yellow rectangle. To do that, we create an array of the points   given as  x, y  coordinates  to the Polyline   method. We then pass the resulting figure to the drawing surfaces FillPath    method to fill in the figure created by Polyline:     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0    surface.FillPath MeterLibrary.Polyline Array 0, 0, 400, 0,        400, 400, 0, 400,          0, 0             .          .          .  In the same way, we can draw the rest of the figure, composed of colored triangles and boxes:                  var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0    surface.FillPath MeterLibrary.Polyline Array 0, 0, 400, 0,        400, 400, 0, 400,          0, 0     surface.FillColor MeterLibrary.ColorRgb 0, 1, 0     surface.FillPath MeterLibrary.Polyline Array 200, 0, 0,        400, 400, 400, 200,          0     surface.FillColor MeterLibrary.ColorRgb 0, 0, 1     surface.FillPath MeterLibrary.Polyline Array 0, 0, -400, 0,        -400, -400, 0,          -400, 0, 0     surface.FillColor MeterLibrary.ColorRgb 1, 0, 0     surface.FillPath MeterLibrary.Polyline Array -200, -400, -        400, 0, 0, 0, -200,          -400             .          .          .  That completes the graphics figure well animate; the next step is to animate it.    < previous page    page_286  If you like this book, buy it!  next page >   < previous page  page_287  next page > Page 287  Creating a Translation  Our animation will have two parts. In the first part, well move the figure from lower left to upper right in our Web page; in the second,  well rotate it in three dimensions as it moves.  We start the animation process by defining the translation  linear movement  of the figure, sweeping it up and across our Web page. To  create that translation, define two points, the start and end points of the figures path, with the MeterLibrary Point2   method:     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0    surface.FillPath MeterLibrary.Polyline Array 0, 0, 400, 0,        400, 400, 0, 400,          0, 0     surface.FillColor MeterLibrary.ColorRgb 0, 1, 0    surface.FillPath MeterLibrary.Polyline Array 200, 0, 0,        400, 400, 400, 200,          0     surface.FillColor MeterLibrary.ColorRgb 0, 0, 1    surface.FillPath MeterLibrary.Polyline Array 0, 0, -400, 0,        -400, -400, 0,          -400, 0, 0     surface.FillColor MeterLibrary.ColorRgb 1, 0, 0    surface.FillPath MeterLibrary.Polyline Array -200, -400, -        400, 0, 0, 0, -200,          -400     var start = MeterLibrary.Point2 -2000, -1000   var end = MeterLibrary.Point2 2000, 1000           .          .          .  TIP: The PixelLibrary and MeterLibrary routines have the same names. The only difference is that  measurements in those routines are in either pixels or meters. Routines that end with a 2 are two- dimensional graphics routines, and routines that end with a 3 are three-dimensional.     Next, we create the translation itself, which well name Sweep. Use the MeterLibrarys FollowLine   method, creating a line from the two  points with the Line   method:    < previous page    page_287  next page >  If you like this book, buy it!   < previous page  page_288  next page > Page 288     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0    surface.FillPath MeterLibrary.Polyline Array 0, 0, 400, 0,        400, 400, 0, 400,          0, 0     surface.FillColor MeterLibrary.ColorRgb 0, 1, 0    surface.FillPath MeterLibrary.Polyline Array 200, 0, 0,        400, 400, 400, 200,          0     surface.FillColor MeterLibrary.ColorRgb 0, 0, 1    surface.FillPath MeterLibrary.Polyline Array 0, 0, -400, 0,        -400, -400, 0,          -400, 0, 0     surface.FillColor MeterLibrary.ColorRgb 1, 0, 0    surface.FillPath MeterLibrary.Polyline Array -200, -400, -        400, 0, 0, 0, -200,          -400     var start = MeterLibrary.Point2 -2000, -1000   var end = MeterLibrary.Point2 2000, 1000   var Sweep =        MeterLibrary.FollowPath MeterLibrary.Line start, end ,        10           .          .          .  That creates our translation action. Before applying it to our graphics figure, however, well create the rotation action.  Creating a Rotation  To rotate our figure as it moves, we must define a three-dimensional axis our figure rotates around by using the  MeterLibrary Vector   method, which gives the  x, y, z  orientation of a vector:     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0    surface.FillPath MeterLibrary.Polyline Array 0, 0, 400, 0,        400, 400, 0, 400,          0, 0     surface.FillColor MeterLibrary.ColorRgb 0, 1, 0    surface.FillPath MeterLibrary.Polyline Array 200, 0, 0,        400, 400, 400, 200,          0     surface.FillColor MeterLibrary.ColorRgb 0, 0, 1       < previous page    page_288  next page >  If you like this book, buy it!   < previous page  page_289  next page > Page 289  surface.FillPath MeterLibrary.Polyline Array 0, 0, -400, 0,        -400, -400, 0,          -400, 0, 0     surface.FillColor MeterLibrary.ColorRgb 1, 0, 0    surface.FillPath  MeterLibrary.Polyline  Array -200, -400, -        400, 0, 0, 0, -200,          -400     var axis = MeterLibrary.Vector3 20, 20, 20   var start = MeterLibrary.Point2 -2000, -1000   var end = MeterLibrary.Point2 2000, 1000   var Sweep =        MeterLibrary.FollowPath  MeterLibrary.Line  start, end ,        10                     .                    .                    .  To create our figures 3-D rotation, which well name Twist, we use MeterLibrarys Rotate3RateDegrees    andParallelTransform2   methods, giving the complete rotation a period of 10 seconds:     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0    surface.FillPath MeterLibrary.Polyline Array 0, 0, 400, 0,        400, 400, 0, 400,          0, 0     surface.FillColor MeterLibrary.ColorRgb 0, 1, 0    surface.FillPath MeterLibrary.Polyline Array 200, 0, 0,        400, 400, 400, 200,          0     surface.FillColor MeterLibrary.ColorRgb 0, 0, 1    surface.FillPath MeterLibrary.Polyline Array 0, 0, -400, 0,        -400, -400, 0,          -400, 0, 0     surface.FillColor MeterLibrary.ColorRgb 1, 0, 0    surface.FillPath MeterLibrary.Polyline Array -200, -400, -        400, 0, 0, 0, -200,          -400     var axis = MeterLibrary.Vector3 20, 20, 20   var start = MeterLibrary.Point2 -2000, -1000   var end = MeterLibrary.Point2 2000, 1000   var Sweep =        MeterLibrary.FollowPath MeterLibrary.Line start, end ,        10   var Twist = MeterLibrary.Rotate3RateDegrees axis,          180 .Duration 10 .ParallelTransform2                    .                  .                  .     < previous page    page_289  next page >  If you like this book, buy it!   < previous page  page_290  next page > Page 290  Now our transformations, Twist and Sweep, are ready. Heres how we apply them to the figure weve created:     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface            .          .          .  var Twist = MeterLibrary.Rotate3RateDegrees axis,          180 .Duration 10 .ParallelTransform2    DirectAnimationControl.Image          = surface.Image.Transform Twist .Transform Sweep           .Transform MeterLibrary.Scale2 1. 12000.,        1. 12000.    <-                   .                   .                   .  Notice that we also scale the figure in two dimensions; we do that because the measurements of MeterLibrary routines  are in meters, so we scale the figure weve created down to screen size.  Finally, we start the animation with the DAViewerControls Start   method:     var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0    surface.FillPath MeterLibrary.Polyline Array 0, 0, 400, 0,        400, 400, 0, 400,          0, 0     surface.FillColor MeterLibrary.ColorRgb 0, 1, 0    surface.FillPath MeterLibrary.Polyline Array 200, 0, 0,        400, 400, 400, 200,          0     surface.FillColor MeterLibrary.ColorRgb 0, 0, 1    surface.FillPath MeterLibrary.Polyline Array 0, 0, -400, 0,        -400, -400, 0,          -400, 0, 0     surface.FillColor MeterLibrary.ColorRgb 1, 0, 0    surface.FillPath MeterLibrary.Polyline Array -200, -400, -        400, 0, 0, 0, -200,          -400     var axis = MeterLibrary.Vector3 20, 20, 20   var start = MeterLibrary.Point2 -2000, -1000   var end = MeterLibrary.Point2 2000, 1000   var Sweep =        MeterLibrary.FollowPath MeterLibrary.Line start, end ,        10   var Twist = MeterLibrary.Rotate3RateDegrees axis,     < previous page    page_290  next page >  If you like this book, buy it!   < previous page  page_291  next page > Page 291          180 .Duration 10 .ParallelTransform2    DirectAnimationControl.Image          = surface.Image.Transform Twist .Transform Sweep           .Transform MeterLibrary.Scale2 1. 12000.,      1. 12000.    DirectAnimationControl.Start             Open the Animation.htm page in Internet Explorer, as shown in Figure 7-2. When you do, the figure weve created  appears from the lower-left area and twists its way across the screen to the upper-right area. Our DirectAnimation  DAViewerControl example is working!  The code for this page, Animation.htm, is shown in Listing 7-2.  Using Internet Explorers DirectAnimation, you can create a huge variety of effects.  Figure 7-2   Listing 7-2  Animation.htm.            DirectAnimation in Internet Explorer                    < previous page    page_291  next page >  If you like this book, buy it!   < previous page  page_292  next page > Page 292  Listing 7-2  Continued. DirectAnimation in Internet Explorer     <OBJECT ID="DirectAnimationControl"     STYLE = "POSITION:ABSOLUTE; LEFT:10%; TOP:100;        WIDTH:90%; HEIGHT:80%"     CLASSID="CLSID:B6FFC24C-7E13-11D0-9B47-00C04FC2F51D">           var MeterLibrary = DirectAnimationControl.MeterLibrary  var surface = MeterLibrary.NewDrawingSurface    surface.FillColor MeterLibrary.ColorRgb 1, 1, 0    surface.FillPath MeterLibrary.Polyline Array 0, 0, 400, 0,        400, 400, 0, 400,          0, 0     surface.FillColor MeterLibrary.ColorRgb 0, 1, 0    surface.FillPath MeterLibrary.Polyline Array 200, 0, 0,        400, 400, 400, 200,          0     surface.FillColor MeterLibrary.ColorRgb 0, 0, 1    surface.FillPath MeterLibrary.Polyline Array 0, 0, -400, 0,        -400, -400, 0,          -400, 0, 0     surface.FillColor MeterLibrary.ColorRgb 1, 0, 0    surface.FillPath MeterLibrary.Polyline Array -200, -400, -        400, 0, 0, 0, -200,          -400     var axis = MeterLibrary.Vector3 20, 20, 20   var start = MeterLibrary.Point2 -2000, -1000   var end = MeterLibrary.Point2 2000, 1000   var Sweep =        MeterLibrary.FollowPath MeterLibrary.Line start, end ,        10   var Twist = MeterLibrary.Rotate3RateDegrees axis,          180 .Duration 10 .ParallelTransform2    DirectAnimationControl.Image          = surface.Image.Transform Twist .Transform Sweep           .Transform MeterLibrary.Scale2 1. 12000.,        1. 12000.    DirectAnimationControl.Start             Thats a taste of how you can create animation in Internet Explorer. Netscape Navigator doesnt support the  DirectAnimation controls, but it does support something Internet Explorer does notlayers. Well use layers in the  following section to create animation in Netscape Navigator.    < previous page    page_292  If you like this book, buy it!  next page >   < previous page  page_293  next page > Page 293  Animation Using Layers in Netscape  In our first example, Random.htm, we saw how to animate images in Netscape Navigator by replacing those images,  one after another, with other images. However, we can also translate an image across the screen by moving the layer  that holds an image.  In this example, Animation2.htm, well place an image in a layer and move it from left to right when the page opens.  Well also let the user restart the animation by clicked a button labeled Click to restart.  Start Animation2.htm with the button and an image in a layer:           Layer-based Animation               Layer-based Animation!                                       <INPUT TYPE = BUTTON VALUE = "Click to restart" onClick =        "startAnimation  ">                 Now we can write the JavaScript well use to start the animation. We will create a functionstartAnimation  for this  purpose, and we begin that function by getting the layer that holds the image.  Because well move the image by moving the layer, its easier to think of the image and the layer as the same object, so  we refer to this layer simply as Image1:    < previous page    page_293  next page >  If you like this book, buy it!   < previous page  page_294  next page > Page 294  Begin by moving Image1 to its starting position in the browser window with the moveTo   method:         var Image1      function startAnimation        {          Image1 = document.layers['Image1']             .             .             .      }         var Image1      function startAnimation        {          Image1 = document.layers['Image1']          Image1.moveTo 20, 90              .             .             .      }         var Image1      var layerInterval      function startAnimation        {          Image1 = document.layers['Image1']          Image1.moveTo 20, 90           loop_index = 1              .              .              .      }  Well need to keep track of how far weve moved our image to the left because it doesnt make sense to move it far past  the edge of the window. Well use a loop index for that purpose:  Now were ready to start the animation, and well do that with the setInterval   method.  Animating with setInterval    In the beginning of this chapter, we saw how to create animation using the setTimeout   method, but another method is  frequently used for ani-    < previous page    page_294  next page >  If you like this book, buy it!   < previous page  page_295  next page > Page 295  mation: setInterval  , which is actually a method of the window object. You use setInterval   to perform an action  repeatedly, which is perfect for animation. In this case, well have the program call a new function, animateImage  ,  every 25 milliseconds:         var Image1      var layerInterval      function startAnimation        {          Image1 = document.layers['Image1']          Image1.moveTo 20, 90           loop_index = 1          layerInterval = setInterval animateImage, 25    <-      }  The setInterval   method returns an identifier that well use to terminate the animation in the animateImage   function. In  that function, well keep moving the image to the left until weve looped 100 times. We could move the image with the  moveTo   method, but theres another way to move layers. If we move the layer to the left, for example, we simply have  to increment its left property, as shown here:         var Image1      var layerInterval      function startAnimation        {          Image1 = document.layers['Image1']          Image1.moveTo 20, 90           loop_index = 1          layerInterval = setInterval animateImage, 25       }      function animateImage        {          if  loop_index < 100 {              loop_index++;              Image1.left += 5           }             .             .             .           }      }  When weve looped 100 times, we end the animation with the clearInterval   method, passing it the identifier we got  from setInterval  :    < previous page    page_295  next page >  If you like this book, buy it!   < previous page  page_296  next page > Page 296  Weve allowed the user to start the animation by clicking the button in the page, which calls the startAnimation    function. However, we can also start the animation as soon as the page loads by using the documents Load event, which  occurs when the document is first loaded into the Web browser:         var Image1      var layerInterval      function startAnimation        {          Image1 = document.layers['Image1']          Image1.moveTo 20, 90           loop_index = 1          layerInterval = setInterval animateImage, 25       }      function animateImage        {          if  loop_index < 100 {              loop_index++;              Image1.left += 5           }           else{              clearInterval layerInterval            }      }            document.onLoad = startAnimation        var Image1      var layerInterval      function startAnimation        {          Image1 = document.layers['Image1']          Image1.moveTo 20, 90           loop_index = 1          layerInterval = setInterval animateImage, 25       }      function animateImage        {          if  loop_index < 100 {              loop_index++;              Image1.left += 5           }           else{              clearInterval layerInterval            }      }        < previous page    page_296  next page >  If you like this book, buy it!   < previous page  page_297  next page > Page 297  TIP: The Load event, occurring when a page is first loaded, is a useful one for page initialization. Its  counterpart is the Unload event, which takes place when the page is unloaded.     Open the Animate2.htm page in Netscape Navigator now, as shown in Figure 7-3. When you do, the image glides across the screen from  left to right. Now were supporting animation in Netscape Navigator!  The code for this page, Animation2.htm, is shown in Listing 7-3.  We use layers in Netscape to support animation.  Figure 7-3   Listing 7-3  Animation2.htm.          Layer-based Animation               Layer-based Animation!                           < previous page    page_297  next page >   If you like this book, buy it!   < previous page  page_298  next page > Page 298  Listing 7-3  Continued.                <INPUT TYPE = BUTTON VALUE = "Click to restart" onClick =        "startAnimation  ">                        document.onLoad = startAnimation        var Image1      var layerInterval      function animateImage        {          if  loop_index < 100 {              loop_index++;              Image1.left += 5           }           else{              clearInterval layerInterval            }      }      function startAnimation        {          Image1 = document.layers['Image1']          Image1.moveTo 20, 90           loop_index = 1          layerInterval = setInterval animateImage, 25       }           There are two more Internet Explorer DirectAnimation multimedia controls to cover in this chapter: the Sequencer  control and the Path control.  Animation Using the Sequencer Control: The Rotate Example  Internet Explorers Sequencer control is the built-in timer of the DirectAnimation controls. Its the control that the rest of  the DirectAnima-    < previous page    page_298  next page >  If you like this book, buy it!   < previous page  page_299  next page > Page 299  tion controls use internally to create action sequences. You can use the Sequencer control yourself to direct other controls; in  this example, well use it to direct the actions of a Structured Graphics control, thus creating animation.  Heres how you embed a Sequencer control in a Web page by using the   tag:     <OBJECT ID=OBJECT         CLASSID=clsid:B0A6BAE2-AAF0-11d0-A152-  00A0C908DB96>        The Sequencer controls methods are listed in Table 7-4, and its events are in Table 7-5  this control has no properties .  Table 7-4 DirectAnimations Sequencer controls methods. Method At Pause Play Seek Stop  Description Specifies a new action in the action set. Stops action set playback at current position. Starts the action set  if stopped . Changes the current playback position of the action set to a new, specified time. Stops action set playback, resets its playback position to the beginning.        Table 7-5 DirectAnimations Sequencer controls events. Events OnInit OnPause OnPlay OnSeek OnStop  Means Occurs when sequencer is first completely loaded into memory. Occurs when action set playback has been paused. Occurs when the action set has started playback. Occurs after the Seek method call has been completed. Occurs when the action set playback ends or is stopped.  You might recall that in the previous chapter we used the Structured Graphics control to produce a graphics image. The  Structured Graphics control has a rotate   method, which well use with the Sequencer control to make that image rotate in the  Web page.    < previous page    page_299  next page >  If you like this book, buy it!   < previous page  page_300  next page > Page 300  Well start this new example, Rotate.htm, by creating the same graphic image we created in the previous chapter, using  the Structured Graphics control:           A Sequencer Control Example                  Animation using the sequencer control...      <OBJECT ID=Image  STYLE="POSITION: ABSOLUTE;  HEIGHT:300; WIDTH:300; TOP:100; LEFT:180"  CLASSID="CLSID:369303C2-D7AC-11d0-89D5-00A0C90833E6">                           <PARAM NAME="Line0004" VALUE="Rect -80, -80, 180, 180,       0 ">             <PARAM NAME="Line0006" VALUE="Oval -80, -80, 180, 180,       0 ">      <PARAM NAME="Line0007" VALUE="SetFillColor 0, 200,       200 ">      <PARAM NAME="Line0008" VALUE="Pie -80, -80, 180, 180,       0, 40, 0 ">      <PARAM NAME="Line0009" VALUE="Pie -80, -80, 180, 180,       0, 40, 90 ">      <PARAM NAME="Line0010" VALUE="Pie -80, -80, 180, 180,       0, 40, 180 ">      <PARAM NAME="Line0011" VALUE="Pie -80, -80, 180, 180,       0, 40, 270 ">          .       .       .  Next we add the Sequencer control well use:           A Sequencer Control Example        < previous page    page_300  next page >  If you like this book, buy it!   < previous page  page_301  next page > Page 301               Animation using the sequencer control...      <OBJECT ID=Image  STYLE="POSITION: ABSOLUTE;  HEIGHT:300; WIDTH:300; TOP:100; LEFT:180"  CLASSID="CLSID:369303C2-D7AC-11d0-89D5-00A0C90833E6">                           <PARAM NAME="Line0004" VALUE="Rect -80, -80, 180, 180,       0 ">             <PARAM NAME="Line0006" VALUE="Oval -80, -80, 180, 180,       0 ">      <PARAM NAME="Line0007" VALUE="SetFillColor 0, 200,       200 ">      <PARAM NAME="Line0008" VALUE="Pie -80, -80, 180, 180,       0, 40, 0 ">      <PARAM NAME="Line0009" VALUE="Pie -80, -80, 180, 180,       0, 40, 90 ">      <PARAM NAME="Line0010" VALUE="Pie -80, -80, 180, 180,       0, 40, 180 ">      <PARAM NAME="Line0011" VALUE="Pie -80, -80, 180, 180,       0, 40, 270 ">     <OBJECT ID="sequencerControl"          CLASSID="CLSID:B0A6BAE2-AAF0-11d0-A152-       00A0C908DB96"          STYLE= "WIDTH:1; HEIGHT:1">        All thats left is writing the JavaScript that will make the Sequencer control come alive.  Activating a Sequencer Control  To use a Sequencer control, you have to define an action set; you do that with the at   method: object.item actionsetname .At time, script, [loop,  interval, tiebreak, drop threshold] ;  The meaning of these parameters is shown in Table 7-6.    < previous page    page_301  If you like this book, buy it!  next page >   < previous page  page_302  next page > Page 302  Means Name of sequencer.  Table 7-6 The Sequencer controls at   method parameters. Parameter object actionsetname Name of the action set. time script loop interval  Sets the start time for the specified action. Double-value format: seconds.milliseconds  SS.MSS . Text string identifying the named procedure to be called. Optional.Sets the loop count for this action. The default is 1. If set to 1, looping is infinite. Optional. Double-value format: seconds.milliseconds  SS.MSS . Sets the delay between iterations of  this action. Optional. Integer, 1 default , 0-n. Sets the priority for the action. If two actions happen at the same  time, the action with the lower tie break number is performed first.  drop threshold Optional. Double-value format: seconds.milliseconds  SS.MSS . Sets the time by which the action   must be performed before its dropped from the queue.  tie break     Well set up our Sequencer control to call a function named rotateImage   every 15 milliseconds:     function startRotation    {      document.form1.sequencerControl "ActionSet1" .At 0.000,          "rotateImage  ", -1, 0.150, 1                .               .               .  }  Now that our action set is initialized, we start the Sequencer control with its play   method, as shown here:     function startRotation    {      document.form1.sequencerControl "ActionSet1" .At 0.000,          "rotateImage  ", -1, 0.150, 1       document.form1.sequencerControl "ActionSet1" .Play    }  All thats left is to rotate the image a little in three dimensions when we call the rotateImage   method. We do that with the  Structured Graph-    < previous page    page_302  next page >  If you like this book, buy it!   < previous page  page_303  next page > Page 303  ics controls rotate   method, passing it the number of degrees to rotate the image in the x, y, and z directions:     function startRotation    {      document.form1.sequencerControl "ActionSet1" .At 0.000,          "rotateImage  ", -1, 0.150, 1       document.form1.sequencerControl "ActionSet1" .Play    }  function rotateImage    {      document.form1.Image.Rotate 0, 20, 10   }     Now open the page in Internet Explorer, as shown in Figure 7-4. The image we created in the previous chapter now  spins around in 3-D; were successfully using the Sequencer control to animate graphics figures.  The code for this page, Rotate.htm, is shown in Listing 7-4.  We use Internet Explorers Sequencer control to create animation.  Figure 7-4   Listing 7-4  Rotate.htm.          A Sequencer Control Example                   < previous page    page_303  next page >  If you like this book, buy it!   < previous page  page_304  next page > Page 304  Listing 7-4  Continued.     Animation using the sequencer control...      <OBJECT ID=Image  STYLE="POSITION: ABSOLUTE;  HEIGHT:300; WIDTH:300; TOP:100; LEFT:180"  CLASSID="CLSID:369303C2-D7AC-11d0-89D5-00A0C90833E6">                           <PARAM NAME="Line0004" VALUE="Rect -80, -80, 180, 180,       0 ">             <PARAM NAME="Line0006" VALUE="Oval -80, -80, 180, 180,       0 ">      <PARAM NAME="Line0007" VALUE="SetFillColor 0, 200,       200 ">      <PARAM NAME="Line0008" VALUE="Pie -80, -80, 180, 180,       0, 40, 0 ">      <PARAM NAME="Line0009" VALUE="Pie -80, -80, 180, 180,       0, 40, 90 ">      <PARAM NAME="Line0010" VALUE="Pie -80, -80, 180, 180,       0, 40, 180 ">      <PARAM NAME="Line0011" VALUE="Pie -80, -80, 180, 180,       0, 40, 270 ">     <OBJECT ID="sequencerControl"          CLASSID="CLSID:B0A6BAE2-AAF0-11d0-A152-       00A0C908DB96"          STYLE= "WIDTH:1; HEIGHT:1">           function startRotation    {      document.form1.sequencerControl "ActionSet1" .At 0.000,          "rotateImage  ", -1, 0.150, 1       document.form1.sequencerControl "ActionSet1" .Play    }  function rotateImage    {      document.form1.Image.Rotate 0, 20, 10   }           Well take a look at one more DirectAnimation multimedia control in the following sectionthe Path control.    < previous page    page_304  next page >   If you like this book, buy it!   < previous page  page_305  next page > Page 305  The Path Control  Internet Explorers Path control lets you specify a path on which to move an HTML element. Its play   method moves the element along  that path. Well use the Path control to move an image around on the screen.  Heres how you use the Path control in a Web page:  <OBJECT ID=object      CLASSID="CLSID:D7A7D7C3-D47F-11d0-89D3-00A0C90833E6">      [ ]     The properties of this control are listed in Table 7-7, its methods in Table 7-8, and its events in Table 7-9.  Table 7-7 The Path controls properties. Property AutoStart Bounce Direction Duration Library PlayState Relative  Means Determines whether the path starts playback upon loading. Sets the path behavior to either reverse direction and return to the beginning, or stop at the end of its playback. Sets the direction of the path playback. Sets the duration of the path playback. Returns the DirectAnimation Library reference. Returns the paths current playback state. Determines whether the Path control starts playing from its current position or from the absolute position in  the target objects coordinate space. Sets the number of times the path loops during playback. Sets the object that should follow the path. Returns the elapsed playback time from the start of the path.  Repeat Target Time TimerInterval Sets or returns the length of time, in seconds.milliseconds, between the path updates.  Table 7-8 The Path controls methods. Method AddTimeMarker Sets a marker to fire an event when playback reaches the marker position. Oval  Does This  Specifies an oval Structured Graphics primitive to be used as the path, with the starting point at top center.         Table continued on next page     < previous page    page_305  If you like this book, buy it!  next page >   < previous page  page_306  next page > Page 306  Does This  Table 7-8 Continued. Method KeyFrame Specifies points along the path in x, y coordinates and a designated time to reach each point. Pause Play Polygon PolyLine Rect Seek Spline Stop  Stops playback and maintains current elapsed time. Begins playback from the current elapsed time. Specifies a closed series of line segments to use a path. Specifies an open set of line segments to be used as the path. Specifies a rectangular Structured Graphics primitive to be used as the path, with starting point at top left. Resets the current playback position to a new, specified position. Specifies a spline to be used as the path. Stops playback at current elapsed time and returns path to the beginning.        Means Occurs when a time marker has been reached either during path playback or when stopped. Occurs when path playback is paused. Occurs when path playback is played.  Table 7-9 The Path controls events. Event OnMarker OnPause OnPlay OnPlayMarker Occurs when a time marker is reached during path playback. OnSeek OnStop  Occurs when a seek call has been completed. Occurs when path playback is stopped.  In this example, Path.htm, well display a button with the caption Start animation. When the user clicks that button, we can display a  previously hidden image and move it around the screen  well move the image on a horseshoe-like path, arcing up and then down .  Lets start with the button and image well usenote that we give the image the visibility type hidden to initially hide it:           An Internet Explorer Path Control Example     < previous page    page_306  If you like this book, buy it!  next page >   < previous page  page_307  next page > Page 307              Using Internet Explorer Path Control...                    <INPUT TYPE = BUTTON Value = "Start animation" onClick =        "startAnimation  ">           <IMG ID=pathImage SRC="Image1.gif" STYLE="position:ab-        solute; visibility:hidden">         .      .      .  Next, we add the Path control itself, which we name pathControl:           An Internet Explorer Path Control Example              Using Internet Explorer Path Control...                    <INPUT TYPE = BUTTON Value = "Start animation" onClick =        "startAnimation  ">           <IMG ID=pathImage SRC="Image1.gif" STYLE="position:ab-        solute; visibility:hidden">     <OBJECT ID="pathControl"   CLASSID = "CLSID:D7A7D7C3-D47F-11D0-89D3-00A0C90833E6">        < previous page    page_307  next page >   If you like this book, buy it!   < previous page  page_308  next page > Page 308  Next, specify a path with the Shape parameter. Using the PolyLine   method, you pass the number of points you want to  use to define the path to PolyLine  , and then the coordinates of each point:  To indicate the traversal speed of the image on the path, we use the Duration parameter, setting its value to 15 seconds:  <OBJECT ID="pathControl"  CLASSID = "CLSID:D7A7D7C3-D47F-11D0-89D3-00A0C90833E6">      <PARAM NAME="Shape" VALUE="PolyLine 10,          305,190, 280,155, 255,130, 230,100, 205,75,          185,95, 165,130, 135,160, 110,200, 100, 220 ">               .               .               .     <OBJECT ID="pathControl"   CLASSID = "CLSID:D7A7D7C3-D47F-11D0-89D3-00A0C90833E6">      <PARAM NAME="Shape" VALUE="PolyLine 10,          305,190, 280,155, 255,130, 230,100, 205,75,          185,95, 165,130, 135,160, 110,200, 100, 220 ">                 .          .          .     <OBJECT ID="pathControl"   CLASSID = "CLSID:D7A7D7C3-D47F-11D0-89D3-00A0C90833E6">      <PARAM NAME="Shape" VALUE="PolyLine 10,          305,190, 280,155, 255,130, 230,100, 205,75,          185,95, 165,130, 135,160, 110,200, 100, 220 ">                   We also need to give the Path control a targetthat is, an object to move around on the screen. Weve named our image  pathImage, so we pass that as the Target parameters value:  All thats left is to start the animation, and we do that in the function weve connected to the button, startAnimation  . First make the image well move visible by setting its visibility style to visible:     function startAnimation    {     < previous page    page_308  next page >  If you like this book, buy it!   < previous page  page_309  next page > Page 309  Here we use the documents all object to reach the image.  Well see a lot more about the all object in the next chapter.   Finally, we use the Path controls play   method to make the image move on the screen:  > document.all.pathImage.style.visibility = "visible"          .          .          .  }        function startAnimation    {      document.all.pathImage.style.visibility = "visible"      pathControl.Play    }     The Path.htm example is ready to go, so open that page, as shown in Figure 7-5. When you click the button, the image  appears and moves along the path.  The code for this page, Path.htm, is shown in Listing 7-5.  We create animation with Internet Explorers Path control.  Figure 7-5   Listing 7-5  Path.htm.          An Internet Explorer Path Control Example          < previous page    page_309  next page >  If you like this book, buy it!   < previous page  page_310  next page > Page 310  Listing 7-5  Continued.          Using Internet Explorer Path Control...                    <INPUT TYPE = BUTTON Value = "Start animation" onClick =        "startAnimation  ">           <IMG ID=pathImage SRC="Image1.gif" STYLE="position:ab-        solute; visibility:hidden">     <OBJECT ID="pathControl"   CLASSID = "CLSID:D7A7D7C3-D47F-11D0-89D3-00A0C90833E6">      <PARAM NAME="Shape" VALUE="PolyLine 10,          305,190, 280,155, 255,130, 230,100, 205,75,          185,95, 165,130, 135,160, 110,200, 100, 220 ">                      function startAnimation    {      document.all.pathImage.style.visibility = "visible"      pathControl.Play    }           That finishes our chapter on animation. Weve covered a great deal in this chapter, from creating simple animation with  the setTimeout   method to using the DirectAnimation multimedia DAViewerControl, from creating animation in  Netscape Navigator with the setInterval   method and layers to using DirectAnimations Sequencer and Path controls.  Weve added a lot of power to what we can do with JavaScript and Web pages.  In the next chapter, well turn to another important topic in JavaScript programmingworking with the document object.    < previous page    page_310  next page >  If you like this book, buy it!   < previous page  page_311  next page > Page 311  Chapter 8  Using the Document Object in JavaScript  In the next three chapters, were going to work in depth with the scripting objectssuch as the navigator object, the  document object, and the window objectavailable to us in JavaScript. These objects provide the interface well use to  connect to the Web browser, and its hard to overestimate their importance for JavaScript programming. This chapter is  about one of the most popular of those objectsthe document object.  Weve already used the document throughout this bookin fact, the first JavaScript example in the book used the  document objects writeln   method to write HTML to a Web page:    < previous page    page_311  next page >  If you like this book, buy it!   < previous page  page_312  next page > Page 312         Our first JavaScript Example      document.writeln "Hello and welcome to JavaScript!"         Were going to take a look at what more you can do with the document object in this chapter, and theres a lot to explore.  Well see how to work with the document objects properties, collections  a collection is an array of HTML elements ,  events, and methods in this chapter. With the skills we gain here, well be able to change a Web page on the fly,  changing the documents color, its HTMLeven targeted sections of the HTMLand other aspects. In particular, well see  how to change a Web page based on the time of day, how to let the user click a hyperlink and rewrite a page in another  frame, how to let the user decide whether a Web page should be graphics-intensive, how to reset the target of  hyperlinks, and much more.  Its wise to remember that the document object is only one of many scripting objects in JavaScript, so well begin this  chapter by getting some perspective with a quick overview of the available scripting objects in JavaScript.  Scripting Object Overview  The topmost JavaScript scripting object is the window object, which well cover in the next chapter, that represents the  browser itself. Just below that object in the hierarchy is the document object. These objects are called scripting objects   as opposed to JavaScript objects like the math or string objects , and many such objects are available to the JavaScript  programmer.  Heres an overview of the object hierarchy in Internet Explorer 4.0  not all objects are listed because there are so many  of them :  window                          +---location                          +---frames                          +---history     < previous page    page_312  next page >  If you like this book, buy it!   < previous page  page_313  next page > Page 313                          +---navigator                          +---event                          +---visual                          +---document                                                +---links                                                +---anchors                                                +---images                                                +---forms                                                +---applets                                                +---embeds                                                +---plugins                                                +---frames                                                +---scripts                                                 +---all                                                +---selection                                                +---body                                                 +---anchor                                                +---applet                                                +---area                                                +---image                                                +---link                                                +---plugin                                                +---form                                                                +---elements                                                                +---button                                                                +---checkbox     < previous page    page_313  next page >   If you like this book, buy it!   next page > Page 314  < previous page  page_314                                                                +---fileUpload                                                                +---hidden                                                                +---option                                                                +---password                                                                +---radio                                                                +---select                                                                +---submit                                                                +---text                                                                +---textarea  Heres the object hierachy in Netscape Navigator 4.0:           Navigator 4.0                                                                                       +---navigator                                                                                         +---plugins                                                                               +---window                                                                                              +---location                                                                                     +---history                                                                                      +---frame                                                                               +---frames                                                                              +---document                                                                                                  +---links                                                                                            +---anchors                                                                                          +---images                                                                                           +---forms                                                                                            +---applets                                                                                          +---embeds                                                                                           +---layers     < previous page    page_314  next page >   If you like this book, buy it!   < previous page  page_315  next page > Page 315                                                                                  +---anchor                                                                                           +---applet                                                                                           +---area                                                                                             +---image                                                                                            +---link                                                                                             +---plugin                                                                                           +---form                                                                                                       +---button                                                                                               +---checkbox                                                                                             +---fileUpload                                                                                           +---hidden                                                                                             +---option                                                                                             +---password                                                                                           +---radio                                                                                              +---select                                                                                             +---submit                                                                                             +---text                                                                                               +---textarea  You can see there are many objects available to us, so lets start working on them. This chapter focuses on one of the  most important scripting objectsthe document object, which well cover in the following section.  Document Object Overview  The document object is already familiar to us. One of its most powerful aspects is organizational because you can treat  the elements of a Web page as member objects of the document object if youve named those elements.  For example, if you have a text box named Textbox in a form named form1, you can refer to the text in that text box this  way:    < previous page    next page >  page_315  If you like this book, buy it!   < previous page  page_316  next page > Page 316  document.form1.Textbox.value, as we did in the Checks.htm example in Chapter 3  Forms: Text Boxes and Buttons :              Click one of the check boxes . . .               <INPUT TYPE = CHECKBOX NAME = Check1 onClick           = check1Clicked  >Check 1            .          .          .        <INPUT TYPE = CHECKBOX NAME = Check5 onClick           = check5Clicked  >Check 5                               function check1Clicked   {         document.form1.Textbox.value = "Check box 1 was       clicked."       }     function check2Clicked   {         document.form1.Textbox.value = "Check box 2 was       clicked."       }     function check3Clicked   {         document.form1.Textbox.value = "Check box 3 was       clicked."       }     function check4Clicked   {         document.form1.Textbox.value = "Check box 4 was       clicked."       }     function check5Clicked   {         document.form1.Textbox.value = "Check box 5 was       clicked."       }        This use of the document object, already familiar to us, gives us an indication of its power. Besides organizing our  HTML objects by name, the document object has properties, collections, events, and methods that we    < previous page    page_316  next page >  If you like this book, buy it!   < previous page  page_317  next page > Page 317  can use to extend our programs power considerably. This chapter explores those items, too.  Youll find the properties, collection, events, and methods of Netscape Navigators document object listed in Table 8-1, and those of  Internet Explorers document object in Table 8-2. As you can see, there are many items available to us,and well put them to work.  Well work through the aspects of the document object in this chapter, starting with its properties.  Table 8-1 The Netscape Navigator document objects properties, collections, events, and methods. Properties  alinkColor, Anchor, anchors, Applet, applets, Area, bgColor, cookie, domain, embeds, fgColor, Form, forms,  Image, images, lastModified, linkColor, Link, links, referrer, title, URL, vlinkColor  Collections anchors, applets, forms, layers, links, images, frames, embeds, plugins Events  onBlur, onChange, onFocus, onClick, onMouseDown, onMouseUp, onMouseMove, onMouseOver,  onKeyDown, onKeyUp, onMouseOut close, open, write, writeln, getSelection  Methods        Table 8-2 The Internet Explorer document objects properties, collections, events, and methods. Properties  alinkColor, linkColor, vlinkColor, mimeType, title, bgColor, link, vLink, aLink, cookie, lastModified, charset,  location, referrer, fgColor, activeElement, strReadyState, domain, URL, fileSize, fileCreatedDate,  fileModifiedDate, fileUpdatedDate  Collections anchors, forms, links, all, scripts, images, applets, frames, embeds, plugins Events  onclick, onmouseover, ondblclick, onkeypress, onmousedown, onmousemove, onmouseup, onkeydown,  onkeyup, onmouseout, onreadystatechange, onhelp, onbeforeupdate, onafterupdate close, open, clear, write, writeln, rangeFromText, rangeFromElement, execCommand, queryCommandEnabled,  queryCommandText, elementFromPoint, queryCommandSupported, queryCommandState,  queryCommandIndeterm, createElement  Methods  Document Properties  The document objects properties let you set aspects of your Web page such as its foreground  that is, text  color, background color,  links color, title, and more, as shown in Tables 8-1 and 8-2.  In fact, weve already seen an example that changed the bgColor  background color  property of the documentthe bgColor example in  Chapter 3:    < previous page    page_317  next page >  If you like this book, buy it!   < previous page  page_318  next page > Page 318         bgColor Example                     Set the document's bgColor property . . .              <INPUT TYPE = BUTTON Value = "Make background red" onClick            = "colorBackground  ">                 function colorBackground      {        document.bgColor = 0xff0000    }        In that example, we set the bgColor property of a document to black when the user clicked a button.  TIP: Dont get the   elements attributes and the document objects properties confused. Many of  them are the same, but you can change the document objects properties interactively only in JavaScriptif no  document property corresponds to a   element attribute, you cant reach that attribute from code   unless you rewrite the   tag itself, as well learn how to do later in this chapter .  The documents properties set display aspects of the document, but theres much more power coming up, so lets move on. Next, we will  take a look at the documents collections.     Document Collections  A collection is an array of elements that you can refer to by index. The document object has several collections, such as anchors[], applets [],    < previous page    page_318  next page >  If you like this book, buy it!   < previous page  page_319  next page > Page 319  forms[], links[], images[], frames[], embeds[], and plugins[], as listed in Tables 8-1 and 8-2.  The collections contain the elements of your Web page arranged for easy reference. For example, heres how we used  the document objects images[] array in the Colors.htm example in Chapter 6  Image Handling with JavaScript :         The Colors Example                     Click the button to see new colors . . .                               .         .         .                    <INPUT TYPE = BUTTON VALUE = "New colors" onClick = newIm-        age  >              var imageArray = new Array 5   imageArray[0] = new Image 50, 50   imageArray[0].src = "gif white.gif"  imageArray[1] = new Image 50, 50   imageArray[1].src = "gif black.gif"  imageArray[2] = new Image 50, 50   imageArray[2].src = "gif red.gif"  imageArray[3] = new Image 50, 50   imageArray[3].src = "gif green.gif"  imageArray[4] = new Image 50, 50   imageArray[4].src = "gif blue.gif"  function newImage     {      document.images[Math.round 49.5 * Math.random   ].src           = imageArray[Math.round 4.5 * Math.random   ].src     < previous page    page_319  next page >  If you like this book, buy it!   < previous page  page_320  next page > Page 320  }        In this case, we could refer to all the images in a Web page by using the document images[] array.  The Internet Explorer document object has a special collection called all[] that holds all the elements in a Web page.  For example, document.all[0] refers to the very first element in a Web page, the   element. If you gave that  element an ID value, you could reach it this way in Internet Explorer:  document.form1.Textbox.value = "The HTML tag's ID      = " + document.all[0].id  Well take a quick look at an example that uses a document collectionthe links[] collectionin the following section.  Document Collections: The ReLink Example  In this next example, well display two buttons and a hyperlink. The buttons will select either Internet Explorer or  Netscape Navigator. If the user clicks the I like Internet Explorer button, well set the hyperlink to http:  www.microsoft. com; if the user clicks the I like Netscape Navigator button, well set the hyperlink to http:  www.netscape.com. Well  reach the link from JavaScript by using the document objects links[] array.  Start this page with the buttons and the hyperlink well need:           Set the link to your favorite browser!                  Set the link to your favorite browser!      <INPUT TYPE = BUTTON Value = "I like Internet Explorer"        onClick            = "IE  ">     < previous page    page_320  next page >  If you like this book, buy it!   < previous page  page_321  next page > Page 321  <INPUT TYPE = BUTTON Value = "I like Netscape Navigator"        onClick            = "NS this.form ">          My favorite browser               Note that we set the hyperlinks HREF attribute to to begin with. Well set that attribute to actual URLS in the functions weve tied the  buttons toIE   and NS  , as shown here:         function IE        {        .        .        .      }      function NS        {        .        .        .      }     Theres only one hyperlink in the page, so we can reach that link by referring to it with the documents links[] array as document.links[0].  To change that links href property, we just reload it this way:         function IE        {          document.links[0].href = "http:  www.microsoft.com''      }      function NS        {          document.links[0].href = ''http:  www.netscape.com"      }     TIP: If you want to find out how many elements are in a scripting element collection, just check that  collections length property.       < previous page    page_321  If you like this book, buy it!  next page >   < previous page  page_322  next page > Page 322  Open the Web page now, as shown in Figure 8-1. When the user clicks a button, the program resets the hyperlink  accordingly  as you can see in the browsers status bar . Our ReLink example is successfully using a new document  collection: the links[] collection.  The code for this page, ReLink.htm, is shown in Listing 8-1.  We reset a hyperlinks target under program control.  Figure 8-1   Listing 8-1  ReLink.htm.          Set the link to your favorite browser!                  Set the link to your favorite browser!      <INPUT TYPE = BUTTON Value = "I like Internet Explorer"        onClick            = "IE  ">   <INPUT TYPE = BUTTON Value = "I like Netscape Navigator"        onClick            = "NS this.form ">          My favorite browser        < previous page    page_322  next page >  If you like this book, buy it!   < previous page  page_323  next page > Page 323  Listing 8-1  Continued.                    function IE        {          document.links[0].href = "http:  www.microsoft.com"      }      function NS        {          document.links[0].href = "http:  www.netscape.com"      }        Well turn to the document objects events next.  Document Events         A Mouse Handling Example      <BODY onMouseDown = "mouseDownHandler  " onMouseUp           = "mouseUpHandler  ">         A Mouse Handling Example       Click the mouse button and Shift, Ctrl, and Alt                            document.onMouseDown = mouseDownHandler      document.onMouseUp = mouseUpHandler  Weve seen most of the documents events already, such as onMouseDown, onKeyDown, and so forth. We made use of  the mouse events in Chapter 5, Keyboard and Mouse Handling, when we put together our Mouser.htm page:     < previous page    page_323  next page >  If you like this book, buy it!   < previous page  page_324  next page > Page 324      function mouseDownHandler e       {        .        .        .      }      function mouseUpHandler e       {        .        .        .        }        Note that we connected the document events to the document in the script for Netscape Navigator  for example,  document.onMouseDown = mouseDownHandler  and in the   tag for Internet Explorer  such as    onMouseDown = mouseDownHandler  > .  Weve already gotten a good look at document events in this book, so well press on now to what, from a programming  point of view, is the most interesting part of the document objectits methods.  Document Methods  Weve already made some use of the documents most popular methodswrite   and writeln  in this book. Heres the first  example we wrote, which uses writeln   to write text to a Web page:         Our first JavaScript Example      <document.writeln "Hello and welcome to JavaScript!"         In fact, well spend most of the rest of this chapter exploring the power of the write   and writeln   methods because by  using them, you can create self-modifying Web pages. Thats undoubtedly one of the most powerful aspects of JavaScript  programming.    < previous page    next page >  page_324  If you like this book, buy it!   < previous page  page_325  next page > Page 325  A Self-modifying Web Page: The Rewrite Example  In our first self-modifying Web page, well display a page with a button in it, prompting the user to click the button and  rewrite the Web page.  When the user does click the button, well rewrite the Web page, getting rid of the button and displaying the message  This page is newly written as an   header. Well start this page, Rewrite.htm, with the button well use:      Rewrite the Web page example            <INPUT TYPE = BUTTON Value = "Rewrite this page!" onClick =        Rewrite  >           Weve connected that button to a function named Rewrite  :         function Rewrite        {        .        .        .      }     In this function, we can rewrite the HTML of the page, including a new head and bodyeven a new   tagthis  way:         function Rewrite        {          document.write " "           document.write " "           document.write " This page is newly writ-       ten. "            document.write " "           document.write " "      < previous page    page_325  next page >  If you like this book, buy it!   < previous page  page_326  next page > Page 326      document.write " This page is newly   written. "       document.write "We rewrote this page . . . "       document.write " "       document.write "Using the document.write   method,   we "       document.write "were able to rewrite this page on   the fly. "       document.write " "       document.write "The entire page has been rewrit-   ten."       document.write " "       document.write " "   }    SCRIPT>  Thats all we need. Open the page now, as shown in Figure 8-2, and click the button.  When you click the button, the JavaScript code rewrites that page, as shown in Figure 8-3. Our first self-modifying Web  page is a success.  The code for this page, Rewrite.htm, is shown in Listing 8-2.  This example has introduced us to self-modifying Web pages. Lets move on now to a new example that uses this aspect  of JavaScript programming for something really useful.     < previous page    The user can rewrite this Web pages HTML by clicking the button.  Figure 8-2   page_326  If you like this book, buy it!  next page >   < previous page  page_327  next page > Page 327  Weve rewritten this Web page on the fly.  Figure 8-3   Listing 8-2  Rewrite.htm.     Rewrite the Web page example                                   function Rewrite            {                   document.write " "                    document.write " "                    document.write " This page is newly       written. "                     document.write " "                    document.write " "                    document.write " This page is newly       written. "                    document.write "We rewrote this page . . .       "                    document.write " "                    document.write "Using the document.write         method, we "                    document.write "were able to rewrite this       page on the fly. "                    document.write " "                    document.write "The entire page has been       rewritten."                      document.write " "                    document.write " "           }           < previous page    page_327  If you like this book, buy it!  next page >   < previous page  page_328  next page > Page 328  A Self-modifying Web Page: The Download Example  In our second self-modifying Web page, well display a JavaScript confirm box as the page is loading, indicating that  were going to download a large graphics file, and ask the user if thats OK.  If the user clicks the OK button, well rewrite the Web page to download a large image. If the user clicks the Cancel  button, well download a smaller image.  This page, Download.htm, is easy to write. We just display the confirm box first in the   element:  As well see in the next chapter, the confirm   method returns a value of true if the user clicked the OK button. In that  case, well write the HTML of our Web page to display the larger image, image1.gif:         Downloading customized graphics files . . .              Downloading customized graphics files . . .           if confirm "Starting download of big graphics file       . . . "            .          .          .         Downloading customized graphics files . . .              Downloading customized graphics files . . .           if confirm "Starting download of big graphics file       . . . "            document.write " <IMG WIDTH=236 HEIGHT=118               SRC='gif image1.gif'> "                   .                  .                  .     < previous page    page_328  next page >  If you like this book, buy it!   < previous page  page_329  next page > Page 329  Otherwise, if the user clicked the Cancel button, well write the HTML of the page to display a smaller image, image2. gif:         Downloading customized graphics files . . .              Downloading customized graphics files . . .           if confirm "Starting download of big graphics file       . . . "            document.write " <IMG WIDTH=236 HEIGHT=118               SRC='gif image1.gif'> "       else          document.write " <IMG WIDTH=150 HEIGHT=75               SRC='gif image2.gif'> "               When you open this page, it displays a confirm box, as shown in Figure 8-4.  If you click OK, the program rewrites the pages HTML to download the large image, as shown in Figure 8-5. Now were  rewriting HTML on the fly!  The code for this page, Download.htm, is shown in Listing 8-3.      We ask the user if its OK to download a large graphics file.  Figure 8-4    < previous page    page_329  next page >  If you like this book, buy it!   < previous page  page_330  next page > Page 330  We rewrite a Web pages HTML to download a large image.  Figure 8-5   Listing 8-3  Download.htm.        Downloading customized graphics files . . .              Downloading customized graphics files . . .           if confirm "Starting download of big graphics file       . . . "             document.write " <IMG WIDTH=236 HEIGHT=118       SRC='gif image1.gif'> "       else          document.write " <IMG WIDTH=150 HEIGHT=75       SRC='gif image2.gif'> "               Another benefit of self-modifying Web pages is that they let you respond to the browser environment, such as the time  of day. Well examine such techniques in the following section.    < previous page    page_330  next page >  If you like this book, buy it!   < previous page  page_331  next page > Page 331  Responding to the Time of Day: The Schedule Example  In this next example, well write a Web page that rewrites itself based on the time of day; in particular, well list a train  schedule that has three versions: morning, afternoon, and evening. When the page is loaded into a browser, itll check the  current time and rewrite itself to display the appropriate schedule.  Well start this page, Schedule.htm, by creating a JavaScript date object that holds the date and time:  Netscape Navigators date object has these methods  Internet Explorers date object has these and many more : getDate,  getDay, getHours, getMinutes, getMonth, getSeconds, getTime, getTimezoneOffset, getYear, parse, setDate, setHours,  setMinutes, setMonth, setSeconds, setTime, setYear, toGMTString, toLocaleString, toString, UTC, and valueOf.           var currentDate = new Date            .          .          .  We can get the current hour with the date method getHours  :           var currentDate = new Date    var currentHour = currentDate.getHours            .          .          .           var currentDate = new Date       < previous page    In addition, we can display the current date and time with the date objects toLocaleString   method, along with a  message welcoming the user to the train station:  page_331  next page >  If you like this book, buy it!   < previous page  page_332  next page > Page 332  Now we can check the current hour and write the pages HTML accordingly. For example, if its too late and the train station is closed, we  indicate that this way:  var currentHour = currentDate.getHours    document.write  " "   document.write  " "   document.write  "Welcome to the Train Station"   document.write  " "   document.write  " "   document.write  "Date and time:"   document.write  currentDate.toLocaleString      document.write  " "   document.write  " "            .           .           .           var currentDate = new Date    var currentHour = currentDate.getHours    document.write  " "   document.write  " "   document.write  "Welcome to the Train Station"   document.write  " "   document.write  " "   document.write  "Date and time:"   document.write  currentDate.toLocaleString      document.write  " "   document.write  " "   if  currentHour   23 {      document.write  " "       document.write  " "       document.write  "The Train Station is closed."        document.write  " "       document.write  " "   }  TIP: Here we use the JavaScript OR logical operator, . This operator returns a value of true if either or  both of its operands are true.  In the same way, we can write the page to display the morning schedule if the current time is morning:              < previous page    page_332  If you like this book, buy it!  next page >   < previous page  page_333  next page > Page 333     var currentDate = new Date    var currentHour = currentDate.getHours    document.write  " "   document.write  " "   document.write  "Welcome to the Train Station"   document.write  " "   document.write  " "   document.write  "Date and time:"   document.write  currentDate.toLocaleString      document.write  " "   document.write  " "   if  currentHour   23 {     .     .     .  }  if  currentHour > 6 && currentHour < 12   {       document.write  " "       document.write  " "       document.write           "  Morning Trains  "       document.write           "  Boston  6:30 AM  "       document.write           "  San Francisco  7:00 AM  "       document.write           "  Las Vegas  7:30 AM  "       document.write           "  Toronto  8:00 AM  "       document.write           "  Denver  8:30 AM  "       document.write           "  Chicago  9:00 AM  "       document.write           "  San Diego  9:30 AM  "       document.write  " "       document.write  " "       document.write  " "       document.write  " "   }        If its the afternoon, we display the afternoon schedule in a table like this:           var currentDate = new Date    var currentHour = currentDate.getHours       < previous page    page_333  next page >   If you like this book, buy it!   < previous page  page_334  next page > Page 334  document.write  " "   document.write  " "   document.write  "Welcome to the Train Station"   document.write  " "   document.write  " "   document.write  "Date and time:"   document.write  currentDate.toLocaleString      document.write  " "   document.write  " "   if  currentHour   23 {     .     .     .  }  if  currentHour > 6 && currentHour < 12   {      .     .     .  }  if   currentHour >= 12 && currentHour < 17   {       document.write  " "       document.write  " "       document.write           "  Afternoon Trains  "       document.write           "  Boston  12:00 PM  "       document.write           "  San Francisco  12:30 PM  "       document.write           "  Las Vegas  1:30 PM  "       document.write           "  Toronto  3:30 PM  "       document.write           "  Denver  4:00 AM  "       document.write           "  Chicago  4:30 PM  "       document.write           "  San Diego  5:00 PM  "       document.write  " "       document.write  " "   }        Finally, we can display the evening schedule if its evening:           var currentDate = new Date    var currentHour = currentDate.getHours       < previous page    page_334  next page >   If you like this book, buy it!   < previous page  page_335  next page > Page 335  document.write  " "   document.write  " "   document.write  "Welcome to the Train Station"   document.write  " "   document.write  " "   document.write  "Date and time:"   document.write  currentDate.toLocaleString      document.write  " "   document.write  " "   if  currentHour   23 {     .     .     .  }  if  currentHour > 6 && currentHour < 12   {      .     .     .  }  if   currentHour >= 12 && currentHour < 17   {      .     .     .  }  if   currentHour >= 17 && currentHour < 22   {       document.write  " "       document.write  " "       document.write           "  Evening Trains  "       document.write           "  Boston  6:30 PM  "       document.write           "  San Francisco  7:00 PM  "       document.write           "  Las Vegas  7:30 PM  "       document.write           "  Toronto  8:00 PM  "       document.write           "  Denver  8:30 PM  "       document.write           "  Chicago  9:00 PM  "       document.write           "  San Diego  9:30 PM  "       document.write  " "       document.write  " "   }        Thats itnow open this page, as shown in Figure 8-6. As you can see, the page has responded to the time of day,  displaying the correct schedule.  The code for this page, Schedule.htm, is shown in Listing 8-4.    < previous page  page_335  next page >      If you like this book, buy it!   < previous page  page_336  next page > Page 336  This Web page responds to the time of day by rewriting itself accordingly.  Figure 8-6   Listing 8-4  Schdule.htm.          var currentDate = new Date    var currentHour = currentDate.getHours    document.write  " "   document.write  " "   document.write  "Welcome to the Train Station"   document.write  " "   document.write  " "   document.write  "Date and time:"   document.write  currentDate.toLocaleString      document.write  " "   document.write  " "   if  currentHour   23 {      document.write  " "       document.write  " "       document.write  "The Train Station is closed."        document.write  " "       document.write  " "   }  if  currentHour > 6 && currentHour < 12   {       document.write  " "       document.write  " "       document.write           "  Morning Trains  "       document.write           "  Boston  6:30 AM  "       document.write           "  San Francisco  7:00 AM  "         document.write           "  Las Vegas  7:30 AM  "       document.write      < previous page    page_336  If you like this book, buy it!  next page >   < previous page  page_337  next page > Page 337  Listing 8-4  Continued.         "  Toronto  8:00 AM  "       document.write           "  Denver  8:30 AM  "       document.write           "  Chicago  9:00 AM  "       document.write           "  San Diego  9:30 AM  "       document.write  " "       document.write  " "       document.write  " "       document.write  " "   }  if   currentHour >= 12 && currentHour < 17   {       document.write  " "       document.write  " "       document.write           "  Afternoon Trains  "       document.write           "  Boston  12:00 PM  "       document.write           "  San Francisco  12:30 PM  "       document.write           "  Las Vegas  1:30 PM  "       document.write           "  Toronto  3:30 PM  "       document.write           "  Denver  4:00 AM  "       document.write           "  Chicago  4:30 PM  "       document.write           "  San Diego  5:00 PM  "       document.write  " "       document.write  " "   }  if   currentHour >= 17 && currentHour < 22   {       document.write  " "       document.write  " "       document.write           "  Evening Trains  "       document.write           "  Boston  6:30 PM  "       document.write           "  San Francisco  7:00 PM  "       document.write           "  Las Vegas  7:30 PM  "       document.write           "  Toronto  8:00 PM  "       document.write           "  Denver  8:30 PM  "       document.write      < previous page  page_337  next page >      If you like this book, buy it!   < previous page  page_338  next page > Page 338  Listing 8-4  Continued.         "  Chicago  9:00 PM  "       document.write           "  San Diego  9:30 PM  "       document.write  " "       document.write  " "   }        We can do more using the write   method. For example, we can rewrite a page in another frame.  Rewriting Another Frame: The Railroad Example  In the next self-modifying example, well write HTML in another frame. Here, well display a set of hyperlinks in one  frame and a train schedule in another. When the user clicks a hyperlink, such as Morning Trains, in the left frame, well  display the corresponding train schedule in the right frame.  This example will consist of several Web pages. The main Web page, called Railroad.htm, just sets up the frames,  placing two other pagesmenu.htm and intro.htminto those frames. Note that we name the right-hand frame, calling it  display because well use that frame as the target of hyperlinks:  Railroad.htm         Rewriting frames . . .                      The intro page, Intro.htm, just welcomes the user to the train station:         Welcome to the Train Station            < previous page    page_338  next page >  If you like this book, buy it!   < previous page  page_339      Welcome to the Train Station            next page > Page 339  The real action takes place in the menu page, which is displayed in the frame on the left and holds the links the user can  click. Well list the links in an unordered  that is, bulleted  list, starting with a page that shows the times the station is  open:  This is just a standard hyperlink that, when clicked, will load the page named Hours.htm into the right-hand frame,  which weve named display. Heres what the Hours.htm page looks like:                      Train Station Hours       .    .    .         Train Station Hours             Train Station Hours         The train station is open from 5 AM to 2 AM daily.        Please come back when the station is open.           Well connect the other hyperlinks to JavaScript functions like this:                      Train Station Hours        < previous page    page_339  next page >  If you like this book, buy it!   < previous page  page_340  next page > Page 340              Morning Trains               Afternoon Trains               Evening Trains            In those functions, well rewrite the page in the right-hand frame to display the appropriate train schedule.  Writing to Documents in Other Frames  When the user clicks the hyperlink labeled Morning Trains, the program calls the MorningTrains   function. In that  function, we will rewrite the Web page now in the right-hand frame to display the table of morning train departures.  That raises a questionhow do we refer to the page in the right-hand frame from code in the left-hand frame? We do that  with the parent keyword, which refers to a windows parent window. Our parent window is the Railroad.htm window  itself, so we can refer to the other frame as parent.frames[1] and the document in that frame as parent.frames[1]. document. To write to that document, we first have to open it with the open   method:  function MorningTrains    {      parent.frames[1].document.open          .        .        .  Now we can write the morning schedule of trains to the document in the second frame; note that we use that documents  close   method at the end to close the document:  function MorningTrains    {      parent.frames[1].document.open        parent.frames[1].document.write  " "       parent.frames[1].document.write            " "      < previous page    page_340  next page >  If you like this book, buy it!   < previous page  page_341  next page > Page 341      parent.frames[1].document.write           "  Morning   Trains  "       parent.frames[1].document.write           "  Boston  6:30 AM  "       parent.frames[1].document.write           "  San Francisco  7:00   AM  "       parent.frames[1].document.write           "  Las Vegas  7:30 AM  "       parent.frames[1].document.write           "  Toronto  8:00 AM  "       parent.frames[1].document.write           "  Denver  8:30 AM  "       parent.frames[1].document.write           "  Chicago  9:00 AM  "       parent.frames[1].document.write           "  San Diego  9:30 AM  "       parent.frames[1].document.write  " "       parent.frames[1].document.write  " "       parent.frames[1].document.close    }  Similarly, we can display the afternoon train schedule, as shown here:  function AfternoonTrains    {      parent.frames[1].document.open        parent.frames[1].document.write  " "       parent.frames[1].document.write           " "       parent.frames[1].document.write           "  Afternoon   Trains  "       parent.frames[1].document.write           "  Boston  12:00 PM  "       parent.frames[1].document.write           "  San Francisco  12:30   PM  "       parent.frames[1].document.write           "  Las Vegas  1:30 PM  "       parent.frames[1].document.write           "  Toronto  3:30 PM  "       parent.frames[1].document.write           "  Denver  4:00 AM  "       parent.frames[1].document.write           "  Chicago  4:30 PM  "       parent.frames[1].document.write           "  San Diego  5:00 PM  "       parent.frames[1].document.write  " "       parent.frames[1].document.write  " "       parent.frames[1].document.close    }     < previous page  page_341  next page >      If you like this book, buy it!   < previous page  page_342  And we can display the evening train schedule this way:  next page > Page 342  function EveningTrains    {      parent.frames[1].document.open        parent.frames[1].document.write  " "       parent.frames[1].document.write  "<TABLE BORDER   BGCOLOR = 'ffff00'>"       parent.frames[1].document.write           "  Evening   Trains  "       parent.frames[1].document.write           "  Boston  6:30 PM  "       parent.frames[1].document.write           "  San Francisco  7:00   PM  "       parent.frames[1].document.write           "  Las Vegas  7:30 PM  "       parent.frames[1].document.write           "  Toronto  8:00 PM  "       parent.frames[1].document.write           "  Denver  8:30 PM  "       parent.frames[1].document.write           "  Chicago  9:00 PM  "       parent.frames[1].document.write           "  San Diego  9:30 PM  "       parent.frames[1].document.write  " "       parent.frames[1].document.write  " "       parent.frames[1].document.close    }  Now open this page, as shown in Figure 8-7. When you click a hyperlink, the corresponding train schedule is written to  the document in the other frame. Now were modifying documents in other frames.  The user can rewrite the page in the righthand frame with the links in the left.  Figure 8-7       < previous page    page_342  next page >  If you like this book, buy it!   < previous page  page_343  next page > Page 343  The code for this page is shown in these listings:  Railroad.htm Hours.htm Intro.htm Menu.htm     Listing 8-5 Listing 8-6 Listing 8-7 Listing 8-8  Listing 8-5  Railroad.htm.        Rewriting frames . . .                      Listing 8-6  Hours.htm.        Train Station Hours             Train Station Hours         The train station is open from 5 AM to 2 AM daily.        Please come back when the station is open.           Listing 8-7  Intro.htm.          Welcome to the Train Station             Welcome to the Train Station               < previous page    page_343  If you like this book, buy it!  next page >   < previous page  page_344  next page > Page 344  Listing 8-8  Menu.htm.                     Train Station Hours                 Morning Trains               Afternoon Trains               Evening Trains                      function MorningTrains        {          parent.frames[1].document.open            parent.frames[1].document.write  " "           parent.frames[1].document.write                " "           parent.frames[1].document.write               "  Morning       Trains  "           parent.frames[1].document.write               "  Boston  6:30 AM  "           parent.frames[1].document.write               "  San Francisco  7:00       AM  "           parent.frames[1].document.write               "  Las Vegas  7:30 AM  "           parent.frames[1].document.write               "  Toronto  8:00 AM  "           parent.frames[1].document.write               "  Denver  8:30 AM  "           parent.frames[1].document.write               "  Chicago  9:00 AM  "           parent.frames[1].document.write               "  San Diego  9:30 AM  "           parent.frames[1].document.write  " "           parent.frames[1].document.write  " "           parent.frames[1].document.close        }            function AfternoonTrains        {          parent.frames[1].document.open              parent.frames[1].document.write  " "      < previous page    page_344  If you like this book, buy it!  next page >   < previous page  page_345  next page > Page 345  Listing 8-8  Continued.         parent.frames[1].document.write               " "           parent.frames[1].document.write               "  Afternoon       Trains  "           parent.frames[1].document.write               "  Boston  12:00 PM  "           parent.frames[1].document.write               "  San Francisco  12:30       PM  "           parent.frames[1].document.write               "  Las Vegas  1:30 PM  "           parent.frames[1].document.write               "  Toronto  3:30 PM  "           parent.frames[1].document.write               "  Denver  4:00 AM  "           parent.frames[1].document.write               "  Chicago  4:30 PM  "           parent.frames[1].document.write               "  San Diego  5:00 PM  "           parent.frames[1].document.write  " "           parent.frames[1].document.write  " "           parent.frames[1].document.close        }            function EveningTrains        {          parent.frames[1].document.open            parent.frames[1].document.write  " "           parent.frames[1].document.write  "<TABLE BORDER       BGCOLOR = 'ffff00'>"           parent.frames[1].document.write               "  Evening       Trains  "           parent.frames[1].document.write               "  Boston  6:30 PM  "           parent.frames[1].document.write               "  San Francisco  7:00       PM  "           parent.frames[1].document.write               "  Las Vegas  7:30 PM  "           parent.frames[1].document.write               "  Toronto  8:00 PM  "           parent.frames[1].document.write               "  Denver  8:30 PM  "           parent.frames[1].document.write               "  Chicago  9:00 PM  "           parent.frames[1].document.write               "  San Diego  9:30 PM  "           parent.frames[1].document.write  " "           parent.frames[1].document.write  " "           parent.frames[1].document.close        }          < previous page    page_345  next page >  If you like this book, buy it!   < previous page  page_346  next page > Page 346  So far, weve rewritten whole pages with the write   method, but another technique is available in Internet Explorer that  allows you to rewrite single HTML elements. Well take a look at that process in the following section.  Targeting HTML: The ReHead Example  Internet Explorer gives each HTML tag two properties that are worth taking a look at: innerHTML and outerHTML.  Using these properties, we can refer to the HTML of specific tags and rewrite just that HTML, leaving the rest of the  page alone. For example, we might display a header in a Web page. When the user clicks that header, we can rewrite  that headerand only that header.  Well start this example, ReHead.htm, with the header were rewriting, giving it the ID Header:           Rewriting a header on the fly               A Header      Click the header once to rewrite it.         In Internet Explorer, all HTML tags are active, so we connect the headers onClick event to a function named  rewriteHeader  :     function rewriteHeader    {     < previous page    page_346  next page >  If you like this book, buy it!   < previous page  page_347  next page > Page 347    .    .    .  }     When the user clicks the header, we will change its text to This header has been changed! by using the headers  innerHTML property. This property refers to the text inside an element, and the outerHTML tag refers to the whole  element, HTML and text together. In this case, well just replace the text in this element:     function rewriteHeader    {      document.all.Header.innerHTML = "This header has been       changed!"   }     Thats all it takesnow open the page in Internet Explorer, as shown in Figure 8-8.  When you click the header in the Web page, the program rewrites the headerand only the headeras shown in Figure 8-9.  The code for this page, Rehead.htm, is shown in Listing 8-9.  We can target an HTML element to rewrite.  Figure 8-8      < previous page    page_347  next page >  If you like this book, buy it!   < previous page  page_348  next page > Page 348  Figure 8-9   We rewrite just the header of the page.  Listing 8-9  ReHead.htm.          Rewriting a header on the fly               A Header        Click the header once to rewrite it.            function rewriteHeader    {      document.all.Header.innerHTML = "This header has been       changed!"   }           < previous page    page_348  If you like this book, buy it!  next page >   < previous page  page_349  next page > Page 349  That completes our chapter on the document object. Weve covered a lot in this chapter, from getting an overview of  scripting objects in general to an overview of the document object, including its properties, collections, events, and  methods; from rewriting a Web page to loading in large or small images on demand; from designing a Web page to  respond to the time of day to rewriting pages in other frames with the frames[] collection. Weve also learned how to  rewrite only specific parts of specific HTML elements in Internet Explorer. Weve made a lot of progress in this chapter.  In the next chapter, well examine some other popular scripting objects: the window and dialog objects.    < previous page    page_349  If you like this book, buy it!  next page >   < previous page  page_351  next page > Page 351  Chapter 9  JavaScript and the Window Object  In the previous chapter, we explored the document object; in this chapter, well take a look at that objects parentthe  window object. This object refers to the browser window itself, and it includes many new and powerful methods that  well examine in this chapter.  Well see how to use window methods to open new windows, tailoring them as we want, and how to display alert boxes,  prompt boxes, and confirm boxes. Internet Explorer also has a special dialog object based on the window object that  well cover, too.  Lets start now with the window object.    < previous page    page_351  next page >  If you like this book, buy it!   < previous page  page_352  next page > Page 352  Working with the Window Object  In JavaScript, a document is displayed inside a window, and both the document and the window are considered objects. We saw how  rich the document object is in properties, methods, and events in the previous chapter; now were going to see what the window object  has to offer us.  There are many ways to refer to a windowyou can use the identifier window or the identifier self. The topmost window  the browser  window  is called top. A windows parent window is called parent. You can also create variables of the window object type. Here are  the ways to refer to the properties and methods of windows:  window.propertyName  window.methodName parameters   self.propertyName  self.methodName parameters   top.propertyName  top.methodName parameters   parent.propertyName  parent.methodName parameters   windowVariable.propertyName  windowVariable.methodName parameters   propertyName  methodName parameters   Weve already seen how to refer to members of the window object in this bookfor example, in Chapter 5, Keyboard and Mouse  Handling, we referred to Internet Explorers x and y members of the window.event object  that is, the event member object of the  window object  as window.event.x and window.event.y.  Internet Explorers window objects properties, methods, and events are listed in Table 9-1, and those for Netscape Navigator are in  Table 9-2.  Table 9-1 The Internet Explorer window object. Properties Collections frames Methods  name, length, parent, self, top, status, defaultStatus, opener, closed  item, navigate, blur, focus, alert, confirm, prompt, setTimeout, clearTimeout, close, open, scroll,  showModalDialog onfocus, onload, onunload, onblur, onhelp,  Events       < previous page    page_352  If you like this book, buy it!  next page >   < previous page  page_353  next page > Page 353  Table 9-2 The Netscape Navigator window object. Properties closed, defaultStatus, document, Frame, frames, history, length, location, name, opener, parent, self, status, top,   window alert, blur, clearTimeOut, close, confirm, focus, open, prompt, setTimeOut onBlur, onError, onFocus, onLoad, onUnload  Methods Events     In this chapter, well mainly cover the most popular part of the window objectits methodsstarting with the open   method.  Using the open   Method  You use the window objects open   method to open a new browser window and display a document. In fact, weve already seen the open    method at work in the Helper.htm example in Chapter 5, where we opened a window that was controlled by keystrokes:      Controlling a window with keystrokes                Click the button to open the help window . . .          <INPUT TYPE = BUTTON Value = "Show help" onClick =        "ShowHelp  ">                  function ShowHelp        {          window.open "HelpWindow.htm"       }        Thats a simple way of using window.open  simply passing the URL of a document you want to open in a new browser window.    < previous page    page_353  next page >  If you like this book, buy it!   < previous page  page_354  next page > Page 354  Lets make better use of the window open   method in this next example. Well see how to open a new window, give it a certain size, add a  status bar at the bottom of the window, and other options. We start by displaying a window with a button. When the user clicks the button,  we display a new, free-floating window, loading a new document into that new window.  To construct this new example, Open.htm, well need to take a close look at the window.open   method; in general, heres how you use that  method: Window = object.open URL [, name [, features]]  This method returns a window variable that represents your new window. URL is the URL of the document you want to open  if any ,  name is the name of the window, and features is a string that holds one or more options; Internet Explorer options are listed in Table 9-3,  and the Netscape Navigator options are in Table 9-4.  TIP: To close the newly opened window, you can save the window object returned by the open   method and  then use that objects close   method.     Table 9-3 Netscape Navigators window.open   features. Feature toolbar location directories status menubar scrollbars resizable width height  Values yes no 1 0 yes no 1 0 yes no 1 0 yes no 1 0 yes no 1 0 yes no 1 0 yes no 1 0 pixels pixels  Means The browser toolbar The input field for entering URLs Directory buttons Status line at bottom of window Menu bar Enables horizontal and vertical scrollbars Whether resize handles appear at the edge Width of window in pixels Height of window in pixels       < previous page    page_354  If you like this book, buy it!  next page >   < previous page  page_355  next page > Page 355  IE3 IE4 Means IE3 IE4 The browser toolbar  back and forward buttons, etc.  IE3 IE4 The input field for entering URLs directly into the browser IE4  Syntax should look like CSS. For example, font:3;font-size:4.  To define multiple font values, use multiple font attributes.  no  Open Dialog Help yes yes yes  yes  yes  no  Style for the window border Size of the border around the window Whether the help icon appears in the title bar Whether the minimize button appears in the title bar Whether the maximize button appears in the title bar Whether the system menu is available from the border icon  Values yes no 1 0 yes no 1 0  Table 9-4 Internet Explorers window.open   features. Feature toolbar location font-size  font-weight  font-style  raised  sunken IE4 edgeStyle IE4  thick thin  borderSize IE4  yes no 1 0 helpIcon yes no 1 0  IE4  minimize  IE4  maximize  yes no 1 0  IE4  systemMenu yes no 1 0  directories yes no 1 0 IE3 IE4 Directory buttons IE3 IE4 Status line at bottom of window yes no 1 0 status menubar yes no 1 0 IE3 IE4 Menu bar  IE3 IE4 Enables horizontal and vertical scrollbars yes no 1 0 scrollbars IE3 IE4 Whether resize handles appear at the edge yes no 1 0 resizeable width pixel IE3 IE4 Width of window  defaults to pixels  IE3 IE4 Height of window in pixels  pixel height IE3 IE4 Top position in pixels wrt desktop pixel top left pixel  IE3 IE4 Left position in pixels wrt desktop IE4  yes no 1 0 center   Centered wrt desktop   yes yes yes yes yes yes yes yes yes  yes yes yes yes  yes yes yes   yes yes yes yes yes yes no yes no  yes yes yes yes  yes yes yes   yes yes yes yes yes yes no yes no yes yes yes yes yes yes yes       < previous page    page_355  If you like this book, buy it!  next page >   < previous page  page_356  next page > Page 356  This example, Open.htm, is easy to write. We just place the prompt to the user and the button well need in a window:        New window example                  Opening a new window example . . .          <INPUT TYPE = BUTTON Value = "Open window" onClick = "Open-       Window  ">           When the user does click the button, well execute the code in the function weve called OpenWindow  :        function OpenWindow       {       .         .         .       }     Heres how well set the features of the browser window were going to open in our call to window.open  :         function OpenWindow        {            window.open "wnd.htm", null,        "height=200,width=400,status=yes,toolbar=no,menubar=no,      '                  location=no"       }     Heres the document well display in the new browser window, Wnd.htm; note that for the users convenience, we include  a button for closing the new window, using the window.close   method:    < previous page    next page >  page_356  If you like this book, buy it!   < previous page  page_357  next page > Page 357         New Window             This is a newly opened window            <INPUT TYPE = BUTTON VALUE = "Close me" onClick =        "Closer  ">                  function Closer        {          window.close        }        Thats itopen this page now, as shown in Figure 9-1.  When you click the Open window button, a new browser window opens, as shown in Figure 9-2, displaying the second  page, Wnd.htm, sized the way we want it and with the options weve specified. Now we can tailor new windows to meet  our requirements.  The code for this page, Open.htm, is shown in Listing 9-1, and the code for the second page we opened, Wnd.htm, is  shown in Listing 9-2.     < previous page    We let the user open a new browser window.  Figure 9-1   page_357  next page >   If you like this book, buy it!   < previous page  page_358  next page > Page 358  Figure 9-2   We open and size a new window.  Listing 9-1  Open.htm.       New window example                  Opening a new window example . . .          <INPUT TYPE = BUTTON Value = "Open window" onClick = "Open-        Window  ">                  function OpenWindow        {                   window.open "wnd.htm", null,          "height=200,width=400,status=yes,toolbar=no,menubar=no        ,location=no"       }       Listing 9-2  Wnd.htm.          New Window            < previous page    page_358  next page >  If you like this book, buy it!   < previous page  page_359  next page > Page 359  Listing 15-1  A collection Example.     This is a newly opened window            <INPUT TYPE = BUTTON VALUE = "Close me" onClick =        "Closer  ">                  function Closer        {          window.close        }        When you open a new window, you dont need to load an already existing page into it. You can create the new page on  the fly, as well see in the following section.  Writing to a Newly Opened Window  Our new example will look much like the previous one. When the user clicks the button, we display a new window.  This time, however, well create and write that new document on the fly; this document doesnt exist as a file on disk  anywhere.  In this example, well fill the new document with HTML written from JavaScript. This example, Filler.htm, is much like  the previous example. We place the prompt and button well use in the page first:        New window example                  Opening a new window example . . .          <INPUT TYPE = BUTTON Value = "Open window" onClick = "Open-        Window  ">      < previous page    page_359  next page >  If you like this book, buy it!   < previous page  page_360  next page > Page 360           When the user clicks the button, well open a new window, but note that we dont give any document URL to open,  which means that a blank document is created:        function OpenWindow       {                   var newWindow = window.open "wnd.htm", null,        "height=200,width=400,status=yes,toolbar=no,menubar=no      ,location=no"                   .                  .                  .     }            function OpenWindow        {                   var newWindow = window.open "wnd.htm", null,        "height=200,width=400,status=yes,toolbar=no,menubar=no      ,location=no"         newWindow.document.write "    This      is a newly opened and written window!  "       }     All thats left is to write the HTML for the new document, and we do that with that documents write   method:  Open this page now. When you click the button in that page, the program opens and creates an entirely new document  on the fly, as shown in Figure 9-3.  The code for this page, Filler.htm, is shown in Listing 9-3.  Now that weve taken a look at the open   method, well move on to other window methods. There are more ways to  display windows than just using the open   method, and well take a look at one of them nowthe alert   method.    < previous page    page_360  next page >  If you like this book, buy it!   < previous page  page_361  next page > Page 361  We create and open a new window, writing to that window after opening it.  Figure 9-3   Listing 9-3  Filler.htm.       New window example                  Opening a new window example . . .          <INPUT TYPE = BUTTON Value = "Open window" onClick = "Open-        Window  ">                 function OpenWindow       {                    var newWindow = window.open "wnd.htm", null,          "height=200,width=400,status=yes,toolbar=no,menubar=no        ,location=no"            newWindow.document.write "    This        is a newly                 opened and written window!  "        }           < previous page    page_361  next page >  If you like this book, buy it!   < previous page  page_362  next page > Page 362  Window Alert Boxes  Using the window objects alert   method, you can place alert boxes onscreen. These boxes indicate some condition to  the user with a short message, but the user can dismiss the alert by clicking an OK button.  For example, we can create a page with a button marked Alert! When the user clicks the button, we can use an alert box  to inform them of some important fact. Then, when the user clicks the OK button, the alert box disappears. This  example, Alerter.htm, is simple to write; we just place the controls well need in the Web page like this:           An Alert example                  Click the button . . .                      When the user clicks the button, we will display an alert box using the window.alert   method; heres how you pass the  text you want to display to that method:         function Alerter        {          window.alert "You're running a Web browser!"       }     Open this page and click the button in that page. When you do, an alert box appears with our message in it, as shown in  Figure 9-4. Our Alerter example is a success!  The code for this page, Alerter.htm, is shown in Listing 9-4.  The next step up from alert boxes is to use the window confirm   method, which well use in the following section.    < previous page    page_362  next page >  If you like this book, buy it!   < previous page  page_363  next page > Page 363  Figure 9-4   Using a window alert box.  Listing 9-4  Alerter.htm.          An Alert example                  Click the button . . .                             function Alerter        {          window.alert "You're running a Web browser!"       }              < previous page  page_363  next page >      If you like this book, buy it!   < previous page  page_364  next page > Page 364  Window Confirm Boxes  The window objects confirm   method displays a confirm box that can accept user inputthat is, when users click an OK  or Cancel button, we can determine which action theyve taken.  For example, we can display a button and a text box in a page. When users click the button, we can open a confirm box  with a message in it. Then, when users click OK or Cancel, the confirm box closes, and well let them know which  selection they made by displaying a message in the original page.  Start this new example, Confirmer.htm, with the controls needed in the Web page:           A Window Confirm box example                  Click the button . . .       <INPUT TYPE = BUTTON VALUE = "Click Me" onClick = "Con-        firmer  ">                    When the user clicks the button, we display a confirm box using the window.confirm   method; this method returns true  if the user clicked the OK button, and false otherwise. Heres how we indicate that the user clicked OK if confirm    returns true:     function Confirmer    {      if  confirm "Click the OK or Cancel button . . . "   {           document.form1.Textbox.value = "OK button was       clicked!"     < previous page    page_364  next page >  If you like this book, buy it!   < previous page  page_365  next page > Page 365  }   .   .   .  Otherwise, we indicate that the user clicked the Cancel button:     function Confirmer    {      if  confirm "Click the OK or Cancel button . . . "   {          document.form1.Textbox.value = "OK button was       clicked!"      }      else{          document.form1.Textbox.value = "Cancel button was       clicked!"      }  }     Open this page now, as shown in Figure 9-5, and click the button.  Clicking the button displays the confirm box. When the user clicks the OK or Cancel button, we report that fact, as  shown in Figure 9-6. Now were using the window objects confirm   method to get information from the user.  The code for this page, Confirmer.htm, is shown in Listing 9-5.     < previous page  page_365  next page >  Figure 9-5   We let the user open a confirm box.      If you like this book, buy it!   < previous page  page_366  next page > Page 366  We report which button the user clicked in the confirm box.  Figure 9-6   Listing 9-5  Confirmer.htm.          A Window Confirm box example                  Click the button . . .       <INPUT TYPE = BUTTON VALUE = "Click Me" onClick = "Con-        firmer  ">                       function Confirmer    {      if  confirm "Click the OK or Cancel button . . . "   {          document.form1.Textbox.value = "OK button was       clicked!"      }      else{          document.form1.Textbox.value = "Cancel button was         clicked!"      }  }        < previous page    page_366  next page >  If you like this book, buy it!   < previous page  page_367  The last window object method well take a look at here is the prompt   method.  Window Prompt Boxes  next page > Page 367  The window objects prompt   method lets users enter a string. For example, we can display a button and a text box.  When users click the button, we can display a prompt box that will accept text, and we can even place some default text  into that box. When users click the OK button, we can report back what theyve entered.  In this example, Prompter.htm, we start with the controls well need:           A Window Prompt example                     Click the button . . .       <INPUT TYPE = BUTTON Value = "Click Me" onClick =       "Prompter  ">                    Now we turn to the JavaScript section of the page. Here, we place the prompt box onscreen and pass a default string for  the prompts text box:         function Prompter        {          var text = new String            text = window.prompt "Do you program in Java-       Script?", "Yes, I do"            .           .           .     < previous page    page_367  next page >  If you like this book, buy it!   < previous page  page_368  next page > Page 368  If the prompt   method returns an empty string, the user didnt enter any text, so we indicate that in the main pages text  box:         function Prompter        {          var text = new String            text = window.prompt "Do you program in Java-       Script?", "Yes, I do"           if  text == ""               document.form1.Textbox.value = "You didn't en-       ter anything."                 .                 .                 .  Otherwise, we display the text the user has entered:        function Prompter        {          var text = new String            text = window.prompt "Do you program in Java-       Script?", "Yes, I do"           if  text == ""               document.form1.Textbox.value = "You didn't en-       ter anything."          else              document.form1.Textbox.value = "You entered: "       + text      }        Open this page and click the button to open the prompt box, as shown in Figure 9-7.  When the user enters some text or accepts the default, and then clicks the OK button, the prompt box closes. We then  display the text in a text box, as shown in Figure 9-8. Our Prompter.htm example works as intendednow we can get  input from the user with the prompt   method.  The code for this page, Prompter.htm, is shown in Listing 9-6.    < previous page    page_368  If you like this book, buy it!  next page >   < previous page  page_369  next page > Page 369  We support the window prompt   method.  Figure 9-7   Figure 9-8   We report the string the user entered.  Theres a new object in Internet Explorer based on the window objectthe dialog object. Using this object, we can support  dialog boxes in Internet Explorer, as well see in the following section.    < previous page  next page >  page_369      If you like this book, buy it!   next page > Page 370  < previous page  page_370  Listing 9-6  Prompter.htm.          A Window Prompt example                     Click the button . . .       <INPUT TYPE = BUTTON Value = "Click Me" onClick =        "Prompter  ">                           function Prompter        {          var text = new String            text = window.prompt "Do you program in Java-       Script?", "Yes, I do"           if  text == ""    Dialog Boxes: The Day Example  You can create dialog boxes in Internet Explorer with the window objects showModalDialog   method. It creates a new  window constructed from the dialog object  which is based on the window object . The properties of Internet Explorers  dialog object are width, height, dialogArgs, and returnValue; its single method is close  .  Well put together an example using Internet Explorers dialog object, showing how to support dialog boxes in that  browser. In this example, well display a button and a text box and let the user use a dialog box to select the day of the  week.  When the user clicks the button, well display a dialog box with seven radio buttons, one for each day of the week. If the  user clicks a radio button followed by the OK button, we close the dialog box and display his or her selection in the  main window.  Start this new example, Day.htm, with the controls well need in the main window:    < previous page    page_370  If you like this book, buy it!  next page >   < previous page  page_371  next page > Page 371      Dialog example                Click the button to select the day of the week . . .              <INPUT TYPE = BUTTON Value = "Select day of the week"        onClick          = "SelectDay  ">                       When the user clicks the button, we will display our dialog box.  Displaying a Dialog Box  To create a dialog box, use the window objects showModalDialog   method, loading in a new documentDlg.htmas our  dialog box:        function SelectDay       {         document.form1.Textbox.value = window.showModalDia-       log "dlg.htm"      }        This displays the new document in a dialog box, where the user can work with it. Next, well read a return value from  showModalDialog  ; this return value will be the day of the week the user has selected, and well display that result in a  text box.  Creating a Dialog Box  In the actual dialog box, Dlg.htm, we place all the radio buttons well use, one for each day of the week:    < previous page    page_371  If you like this book, buy it!  next page >   < previous page  page_372  next page > Page 372                     Select the day of the week . . .                  <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio1Clicked  >Sunday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio2Clicked  >Monday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio3Clicked  >Tuesday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio4Clicked  >Wednesday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio5Clicked  >Thursday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio6Clicked  >Friday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio7Clicked  >Saturday          <INPUT TYPE = BUTTON Value = "  OK  "          onClick = "OKButton  ">  <INPUT TYPE = BUTTON Value = "Cancel"          onClick = "CancelButton  ">           Well set up a new variable, weekday, that will hold the selection the user makes. We start that variable off with the  string No selection:        var weekday = "No selection"          .          .          .  If the user clicks the OK button without making a selection, well return this No selection string.  Next, we add a click handler for each of the radio buttons, setting the weekday variable to the appropriate day of the  week for that button:        var weekday = "No selection"     < previous page    page_372  next page >  If you like this book, buy it!   < previous page  page_373  next page > Page 373  function radio1Clicked   {      weekday = "Sunday"  }  function radio2Clicked   {      weekday = "Monday"  }  function radio3Clicked   {      weekday = "Tuesday"  }  function radio4Clicked   {      weekday = "Wednesday"  }  function radio5Clicked   {      weekday = "Thursday"  }  function radio6Clicked   {      weekday = "Friday"  }  function radio7Clicked   {      weekday = "Saturday"  }  If the user clicks the OK button, we will return their selection to the main window as the return value from the  showModalDialog   method. We do that simply by setting the window objects returnValue property to the string we  want to return and closing the dialog box:  function OKButton    {      window.returnValue = "Day of the week: " + weekday      window.close    }  On the other hand, if the user clicks the Cancel button, we return a string that reads No selection:  function CancelButton    {      window.returnValue = "No selection"      window.close    }  Thats itopen Day.htm in Internet Explorer and click the button, opening the dialog box as shown in Figure 9-9.  If you click a radio button in the dialog box and click the OK button, the dialog box closes and the main page reports  what selection youve made, as shown in Figure 9-10. Now were using dialog boxes in Internet Explorer.  The code for this page, Day.htm, is shown in Listing 9-7, and the code for the dialog box, Dlg.htm, is shown in Listing  9-8.    < previous page    page_373  next page >  If you like this book, buy it!   < previous page  page_374  next page > Page 374  Figure 9-9   We support dialog boxes.  We read a value returned by a dialog box.  Figure 9-10   Listing 9-7  Day.htm.       Dialog example                Click the button to select the day of the week . . .              <INPUT TYPE = BUTTON Value = "Select day of the week"        onClick          = "SelectDay  ">     < previous page    page_374  If you like this book, buy it!  next page >   < previous page  page_375  next page > Page 375  Listing 9-7  Continued.                             function SelectDay        {          document.form1.Textbox.value = window.showModalDia-       log "dlg.htm"       }        Listing 9-8  Dlg.htm.                    Select the day of the week . . .                  <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio1Clicked  >Sunday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio2Clicked  >Monday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio3Clicked  >Tuesday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio4Clicked  >Wednesday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio5Clicked  >Thursday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio6Clicked  >Friday         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio7Clicked  >Saturday          <INPUT TYPE = BUTTON Value = "  OK  "          onClick = "OKButton  ">  <INPUT TYPE = BUTTON Value = "Cancel"          onClick = "CancelButton  ">                < previous page    page_375  next page >  If you like this book, buy it!   < previous page  page_376  next page > Page 376  Listing 9-8  Continued.       var weekday = "No selection"     function radio1Clicked   {         weekday = "Sunday"     }     function radio2Clicked   {         weekday = "Monday"     }     function radio3Clicked   {         weekday = "Tuesday"     }     function radio4Clicked   {         weekday = "Wednesday"     }     function radio5Clicked   {         weekday = "Thursday"     }     function radio6Clicked   {         weekday = "Friday"     }     function radio7Clicked   {         weekday = "Saturday"     }     function OKButton       {         window.returnValue = "Day of the week: " + weekday         window.close       }     function CancelButton       {         window.returnValue = "No selection"         window.close       }        So far, weve just read values returned from a dialog box, but we can send values to a dialog box, too, as well see in the  following section.  Using Dialog Box Arguments  Our next example shows how to send arguments to an Internet Explorer dialog box. In this example, the user will select  the hour of the day in a dialog box. We start with a page displaying a button and a text box.    < previous page    next page >  page_376  If you like this book, buy it!   < previous page  page_377  next page > Page 377  When the user clicks the button, well display a dialog box with 12 radio buttons, one for each of the 12 clock hours of  the day. Well pass the current hour of the day from the main window to the dialog box so that one radio button will  appear clicked as the default.  The user can accept the default or click a radio button, followed by the OK button, in which case we close the dialog  box and display the selection in the main window. Passing the hour of the day to the dialog box in this way will show us  how to pass arguments to dialog boxes.  Start this new Web page, Hour.htm, with the controls well needthe text box and button:      Dialog arguments example                Click the button to select the hour of the day . . .              <INPUT TYPE = BUTTON Value = "Select the hour of the day"        onClick          = "SelectHour  ">                             function SelectHour       {         var currentDate = new Date           var currentHour = currentDate.getHours            .          .          .  When the user clicks the button, we will determine the current hour of the day and send that to the dialog box when we  open it. We determine the hour of the day with the JavaScript date object:  Now we have to pass this value to the dialog box.    < previous page    page_377  next page >  If you like this book, buy it!   < previous page  page_378  next page > Page 378  Passing an Argument to a Dialog Box  When we open the dialog box, Dlg.htm, we pass the current hour to it by including currentHour as an argument in the  call to showModalDialog  :        function SelectHour       {         var currentDate = new Date           var currentHour = currentDate.getHours           document.form1.Textbox.value             = window.showModalDialog "dlg.htm", curren-       tHour      }        Thats all it takes; now weve sent the current hour of the day to the dialog box.  Were ready to create the dialog box document, Dlg.htm, and we do that by setting up the radio buttons well use for the  hours of the day, 1-12, as well as the OK and Cancel buttons:                     Select the hour of the day . . .                  <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio1Clicked  >1         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio2Clicked  >2         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio3Clicked  >3         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio4Clicked  >4         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio5Clicked  >5         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio6Clicked  >6         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio7Clicked  >7         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio8Clicked  >8         <INPUT TYPE = RADIO NAME = RadioButtons     < previous page    page_378  next page >  If you like this book, buy it!   < previous page  page_379  next page > Page 379          onClick = radio9Clicked  >9         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio10Clicked  >10         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio11Clicked  >11         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio12Clicked  >12          <INPUT TYPE = BUTTON Value = "  OK  "          onClick = "OKButton  ">  <INPUT TYPE = BUTTON Value = "Cancel"          onClick = "CancelButton  ">           Now were ready to read the argument passed to us by the main window so we can initialize the dialog boxs radio buttons accordingly.  Reading an Argument Passed to a Dialog Box  The value passed to us in the showModalDialog   method is available in the dialog boxs code as the dialogArguments property. In our  case, this argument holds the current hour of the day in string form. We can convert a string to an integer with the JavaScript parseInt    method:        hour = parseInt dialogArguments               .              .              .  TIP: Besides parseInt  , which converts a string representation of a number to an integer, JavaScript also  includes parseFloat  , which parses a string into a floating point number.     Because the date object works in 24-hour intervals, and we have only 12 radio buttons, we convert the current hour to a 12-hour scale, as  shown here:         hour = parseInt dialogArguments       if hour > 12 {          hour -= 12     < previous page    page_379  If you like this book, buy it!  next page >   < previous page  page_380  next page > Page 380      }      if hour == 0 {          hour = 12      }       .       .       .  To initialize the dialog box by setting the correct radio button, then, we just select the radio button corresponding to the  hour of the day:         hour = parseInt dialogArguments       if hour > 12 {          hour -= 12      }      if hour == 0 {          hour = 12      }      document.form1.RadioButtons[hour - 1].checked = true            .            .            .  Now weve initialized a dialog box with arguments sent from the main window.  The rest of the program is easy to write. We simply handle the radio button clicks as shown in the following code,  setting the value of the hour variable to the hour the user has selected:        hour = parseInt dialogArguments      if hour > 12 {         hour -= 12     }     if hour == 0 {         hour = 12     }     document.form1.RadioButtons[hour - 1].checked = true     function radio1Clicked   {         hour = "1"     }     function radio2Clicked   {         hour = "2"     }     function radio3Clicked   {         hour = "3"     }     function radio4Clicked   {         hour = "4"     < previous page    page_380  next page >  If you like this book, buy it!   < previous page  page_381  next page > Page 381     }     function radio5Clicked   {         hour = "5"     }     function radio6Clicked   {         hour = "6"     }     function radio7Clicked   {         hour = "7"     }     function radio8Clicked   {         hour = "8"     }     function radio9Clicked   {         hour = "9"     }     function radio10Clicked   {         hour = "10"     }     function radio11Clicked   {         hour = "11"     }     function radio12Clicked   {         hour = "12"     }  Now when the user clicks the OK button, we can return the hour of the day to the main window:  function OKButton    {      window.returnValue = "Hour of the day: " + hour      window.close    }  If the user clicks the Cancel button, we return a string reading No selection:        function CancelButton          {            window.returnValue = "No selection"            window.close          }     Now open the Hour.htm page and click the button in that page, opening the dialog box, as shown in Figure 9-11. As you  can see, weve passed the current hour to that dialog box, and the radio button corresponding to the current hour was  initialized.    < previous page    next page >  page_381  If you like this book, buy it!   < previous page  page_382  next page > Page 382  When you click the OK button, the hour youve selected is displayed in the main page, as shown in Figure 9-12. Now we  can pass arguments to dialog boxes.  The code for this page, Hour.htm, is shown in Listing 9-9, and the dialog box itself, Dlg.htm, is shown in Listing 9-10.  Figure 9-11   We pass values to a dialog box.      Figure 9-12   We read a value from a dialog box.   < previous page    page_382  next page >  If you like this book, buy it!   < previous page  page_383  next page > Page 383  Listing 9-9  Hour.htm.     Dialog arguments example                Click the button to select the hour of the day . . .              <INPUT TYPE = BUTTON Value = "Select the hour of the day"        onClick          = "SelectHour  ">                             function SelectHour       {         var currentDate = new Date           var currentHour = currentDate.getHours           document.form1.Textbox.value             = window.showModalDialog "dlg.htm", curren-       tHour      }        Listing 9-10  Dlg.htm.                    Select the hour of the day . . .                  <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio1Clicked  >1         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio2Clicked  >2         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio3Clicked  >3         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio4Clicked  >4         < previous page    page_383  next page >  If you like this book, buy it!   next page > Page 384  < previous page  page_384  Listing 9-10  Continued.      <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio5Clicked  >5         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio6Clicked  >6         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio7Clicked  >7         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio8Clicked  >8         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio9Clicked  >9         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio10Clicked  >10         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio11Clicked  >11         <INPUT TYPE = RADIO NAME = RadioButtons          onClick = radio12Clicked  >12          <INPUT TYPE = BUTTON Value = "  OK  "          onClick = "OKButton  ">  <INPUT TYPE = BUTTON Value = "Cancel"          onClick = "CancelButton  ">                 hour = parseInt dialogArguments      if hour > 12 {         hour -= 12     }     if hour == 0 {         hour = 12     }     document.form1.RadioButtons[hour - 1].checked = true     function radio1Clicked   {         hour = "1"     }     function radio2Clicked   {         hour = "2"     }     function radio3Clicked   {         hour = "3"     }     function radio4Clicked   {         hour = "4"     }     function radio5Clicked   {         hour = "5"     }     function radio6Clicked   {         hour = "6"     }       < previous page    page_384  next page >  If you like this book, buy it!   < previous page  page_385  next page > Page 385  Listing 9-10  Continued.    function radio7Clicked   {         hour = "7"     }     function radio8Clicked   {         hour = "8"     }     function radio9Clicked   {         hour = "9"     }     function radio10Clicked   {         hour = "10"     }     function radio11Clicked   {         hour = "11"     }     function radio12Clicked   {         hour = "12"     }     function OKButton       {         window.returnValue = "Hour of the day: " + hour         window.close       }     function CancelButton       {         window.returnValue = "No selection"         window.close       }         Conclusion  Thats it for our chapter on the window object. Weve learned how to use it to open new windows and create alert boxes,  confirm boxes, and prompt boxes. Weve also seen how to use Internet Explorers dialog object to create dialog objects  that we can pass arguments to and that can pass arguments back to us. Weve covered a lot in this chapter, and weve  added to our JavaScript coding skills.  In the next chapter, well explore some other powerful scripting objects available in JavaScript: the navigator, location,  and history objects.    < previous page    page_385  next page >  If you like this book, buy it!   < previous page  page_387  next page > Page 387  Chapter 10  The Navigator, Location, and History Objects  In this chapter, were going to learn about the built-in scripting objects that allow you to navigate the Web: the navigator,  location, and history objects. These objects let you move around the Web from JavaScript, and well put them to work  for us here.  Well also see a few other ways of moving around the Web in this chapter, including how to use JavaScript URLs  a  URL that actually points to JavaScript statements , how to retrieve information passed to the browser in a URL string   that is, those strings you see at the end of a URL that start with a question mark, such as http:  www.server.com? app=15 , and how to use cookies, those text strings a server can store on your computer and read later to customize the  information that server shows you. Well see how to set and use cookies in this chapter.    < previous page    page_387  next page >  If you like this book, buy it!   < previous page  page_388  next page > Page 388  Using cookies has become a sensitive subject these days. Some people resent the ability of nameless Web entities writing information to  their personal computers without their knowledge. There have been abuses, such as Web sites that write over 15 cookies to a persons  computer without his or her knowledge  approaching the cookie limit of most browsers, which is 20 . Perhaps the best policy currently is  to explain to users what cookies are all about, and exactly what yours does before writing one to their machine.  TIP: Both Internet Explorer and Netscape Navigator have ways to warn users before accepting cookies.  Cookies are just one of the topics well cover in this chapter. Well start with an object weve seen beforethe navigator object.  The Navigator Object  The navigator object gives us information about the browser, something that can be very useful with such big differences between  browsers these days. For example, Netscape Navigators navigator objects properties are appCodeName, appName, appVersion,  mimeTypes, plugins, userAgent, javaEnabled, and taintEnabled.  TIP: Notice the taintEnabled   method in Netscape Navigators navigator object. Tainting prevents scripts  from passing information that should be private, such as directory structures or the session history.  JavaScript cant pass tainted values on to any server without the end users permission. You use taint   to  mark data that otherwise isnt tainted.  Internet Explorers navigator objects properties are appName, appVersion, appCodeName, userAgent, cookieEnabled, and javaEnabled.  As mentioned before, the navigator object helps determine what browser your page is running, and thats what most JavaScript  programmers use it for.    < previous page    page_388  next page >  If you like this book, buy it!         < previous page  page_389  next page > Page 389  Using the Navigator Object: The AppType Example  We briefly reviewed the navigator object in Chapter 5, Keyboard and Mouse Handling, when we needed to write  different code for the two browsers in our Mouser.htm page. However, the navigator object supplies more information  than just the browser name; for example, you can determine the browsers version number and operating platform, as  well see in our next example, AppType.htm.  In this example, well determine the browsers type with the navigator objects appName property:           Determining your browser type . . .               Determining your browser type . . .            if navigator.appName == "Netscape"  {          .          .          .     }     if  navigator.appName == "Microsoft Internet Explorer"         {          .          .          .     }           We can also get a string holding the browsers version number and supported platform by using the navigator objects  appVersion property:           Determining your browser type . . .           < previous page    page_389  next page >  If you like this book, buy it!   < previous page  page_390  next page > Page 390         Determining your browser type. . .            if navigator.appName == "Netscape"  {          document.write "  "           document.write "Netscape Navigator " +       navigator.appVersion            document.write "  "      }     if  navigator.appName == "Microsoft Internet Explorer"        {          document.write "  "           document.write "Microsoft Internet Explorer " +       navigator.appVersion            document.write "  "      }           Thats all it takes. Now open this page, as shown in Figure 10-1. As you can see, the program has determined the  browsers name, version, and supported platform and displays that information.  The code for this page, AppType.htm, is shown in Listing 10-1.  Next, well turn to another powerful objectthe location object.  Figure 10-1   We determine a browsers name, version and platform   by using the navigator object.     < previous page  page_390  next page >      If you like this book, buy it!   < previous page  page_391  next page > Page 391  Lsting 10-1  AppType.htm.          Determining your browser type . . .               Determining your browser type . . .            if navigator.appName == "Netscape"  {          document.write "  "           document.write "Netscape Navigator " +       navigator.appVersion            document.write "  "      }     if  navigator.appName == "Microsoft Internet Explorer"        {          document.write "  "           document.write "Microsoft Internet Explorer " +       navigator.appVersion            document.write "  "      }            Using the Location Object  You can control where the browser navigates to by using its location object in JavaScript. Netscape Navigators location  object has these properties: hash, host, hostname, href, pathname, port, protocol, and search. Its methods are reload and  replace.  Internet Explorers location object has these properties: hash, host, hostname, href, pathname, port, protocol, and search.  Its methods are reload and replace.  We will put the location object to work in an example, Jumper.htm, that lets users jump to a new URL with the click of  a button. All they have to do is to place a URL into a text box and click a button; then the browser will navigate to the  given URL.  Start this page, Jumper.htm, with the controls well need, the button and text box:    < previous page    page_391  If you like this book, buy it!  next page >   < previous page  page_392  next page > Page 392           A location Object Example                    Enter a URL . . .                     <INPUT TYPE = BUTTON Value = "Jump to URL" onClick =       "Jump  ">            When the user clicks the button, we just have to set the location object to the new URL the user has placed in the text box:         function Jump        {          window.location = document.form1.Textbox.value       }        Now open this page, enter a URL, as shown in Figure 10-2, and click the button.  When you do, the browser navigates to the Netscape home page, as shown in Figure 10-3.  TIP: One curious fact is that referring to the location object is the same as referring to the location.href  property. That is, the statement window.location = document.form1.Textbox.value; is the same as window. location.href = document.form1.Textbox.value.     The code for this page, Jumper.htm, is shown in Listing 10-2.    < previous page    page_392  If you like this book, buy it!  next page >   < previous page  page_393  next page > Page 393  We let the user navigate to a URL with the location object.  Figure 10-2   We navigate to Netscapes page by using the location object.  Figure 10-3   Listing 10-2  Jumper.htm.            A location Object Example                       < previous page    page_393  next page >  If you like this book, buy it!   < previous page  page_394  next page > Page 394  Listing 10-2  Continued. Enter a URL . . .                    <INPUT TYPE = BUTTON Value = "Jump to URL" onClick =       "Jump  ">                   function Jump        {          window.location = document.form1.Textbox.value       }        We can use the location object for another popular type of programa slideshow page.  Sequence  In this next example, well let the user navigate from URL to URL by clicking buttons, displaying the new URLs in  another frame. In this way, well support whats called a slideshow; well use the documents Target1.htm, Target2.htm,  and Target3.htm as our slides. When the user clicks the Next button, we navigate to the next slide, Target2.htm, placing  that page in the upper frame. If the user clicks the Previous button, we move back to the previous page.  Well write this new page, Sequence.htm, to set up two frames and display our first slide, Target1.htm, in the first frame,  and the page with the Next and Previous buttons, Controls.htm, in the other frame:           Page Sequence Example              < previous page    page_394  next page >  If you like this book, buy it!   < previous page  page_395  next page > Page 395  To keep track of our location in the slideshow, we can place two variables, next and previous, in each of the slides,  Target1.htm, Target2.htm, and Target3.htm. For example, here is Target2.htm:                               Target 1        var next = "target3.htm"  var previous = "target1.htm"              Here is Target 2.           Now well write the control panel, Controls.htm. First, well place the navigation buttons well need in this page:                       <INPUT TYPE = BUTTON VALUE = "< Previous" onClick = "previ-       ous  ">   " onClick = "next  ">              Click a button to move through the page sequence . . .            Next, we write the JavaScript portion of the page. Weve connected two functions, previous   and next  , to the Previous  and Next buttons:    < previous page    next page >  page_395  If you like this book, buy it!   < previous page  page_396  next page > Page 396       function previous    {    .    .    .  }  function next    {    .    .    .  }     In these functions, we read the next slides URL from the current slides next property or the previous slides URL from  the current slides previous property. We then set the top frames location object to that URL to read that slide in; note  that we use the top property to refer to the topmost window, Sequence.htm:     function previous    {      top.frames[0].location = top.frames[0].previous  }  function next    {      top.frames[0].location = top.frames[0].next  }     Thats itopen this page now, as shown in Figure 10-4. You can see the first slide displayed there.  When you use the Next and Previous buttons, you can navigate through the slide pages. For example, clicking the Next  button causes the program to display Target2.htm, as shown in Figure 10-5.  The code for this page, Sequence.htm, is shown in Listing 10-3, Controls.htm is shown in Listing 10-4, Target1.htm is  shown in Listing 10-5, Target2.htm in Listing 10-6, and Target3.htm in Listing 10-7.    < previous page    page_396  next page >  If you like this book, buy it!   < previous page  page_397  next page > Page 397  Our Sequence page lets the user move through a   Figure 10-4   sequence of URLs.  We display a new document in the Sequence page.  Figure 10-5   Listing 10-3  Sequence.htm.            Page Sequence Example                                  < previous page    page_397  next page >  If you like this book, buy it!   < previous page  page_398  next page > Page 398  Listing 10-4  Controls.htm.                      <INPUT TYPE = BUTTON VALUE = "< Previous" onClick = "previ-        ous  ">   " onClick = "next  ">              Click a button to move through the page sequence . . .              function previous    {      top.frames[0].location = top.frames[0].previous  }  function next    {      top.frames[0].location = top.frames[0].next  }        Listing 10-5  Target.htm.          Target 1        var next = "target2.htm"  var previous = "target3.htm"              Here is Target 1.             < previous page  page_398  next page >      If you like this book, buy it!   < previous page  page_399  next page > Page 399  Listing 10-6  Target2.htm.          Target 1        var next = "target3.htm"  var previous = "target1.htm"              Here is Target 2.           Listing 10-7  Target3.htm.          Target 1        var next = "target1.htm"  var previous = "target2.htm"              Here is Target 3.           Well move on now to the history object.  Using the History Object  You can keep track of where the browser has been with the history object, which lets you move to already visited pages.  Netscape Navigators history object has these properties: current, length, next, and previous. Its methods are back,  forward, and go.    < previous page    next page >  page_399  If you like this book, buy it!   < previous page  page_400  next page > Page 400  TIP: You can also use the history object as an array in Netscape Navigator, indexed by the previous pages  the browser has displayed.     Internet Explorers history object has one property, the length property. Its methods are back, forward, and go, just as for Netscape  Navigator.  Lets see the history object in action. In this next example, History.htm, we give users the option of moving back one or two pages, or  moving forward one or two pages, by using the history object. For example, if they click the Previous button, we move back to the page  requested and display that page.  Start this page, History.htm, with the two buttons well use to move forward and back one page:           A history Object Example                 A history Object Example.                 Click a button to go forward or back . . .          " onClick = "for-        ward  ">           .           .           .  Then we add the two buttons for moving two pages at a time:           A history Object Example                 A history Object Example.        < previous page    page_400  If you like this book, buy it!  next page >   < previous page  page_401  next page > Page 401              Click a button to go forward or back . . .           " onClick = "for-        ward  ">         Click a button to go forward or back two pages . . .          >" onClick = "for-        ward2  ">           The Back button is tied to the function named back   and the Forward button to the function forward  , so add those  functions now:         function back        {        .        .        .      }      function forward        {        .        .        .      }  Now its time to use the history object.  Navigating with the History Object         function back        {          window.history.back        }      function forward       < previous page    Well use the history objects forward   and back   methods to move though the recent pages the browser has visited.  Heres how we implement our pages navigation buttons:  page_401  next page >  If you like this book, buy it!   < previous page  page_402  next page > Page 402  We will use these methods to move forward and back by two pages in the functions back2   and forward2  :      {          window.history.forward        }         function back        {          window.history.back        }      function forward        {          window.history.forward        }      function back2        {        .        .        .      }      function forward2        {        .        .        .      }            function back        {          window.history.back        }      function forward        {          window.history.forward        }      function back2        {          window.history.go -2       }      function forward2        {          window.history.go 2       }     In these two new functions, we just pass the number of pages to move to the history objects back   or forward   methods:  Thats all it takesopen this page now, as shown in Figure 10-6.    < previous page    page_402  next page >   If you like this book, buy it!   < previous page  page_403  next page > Page 403  When we click the Back button, we move back to the previous page the browser displayedthat is, the previous example,  Sequence.htm, as shown in Figure 10-7. We can move around using the buttons in the History.htm pageour history  example is working!  The code for this page, History.htm, is shown in Listing 10-8.  We let the user move backward or forward with   Figure 10-6   the history object.  We move back a page to the previous example.  Figure 10-7       < previous page    page_403  next page >  If you like this book, buy it!   < previous page  page_404  next page > Page 404  Listing 10-8  History.htm.          A history Object Example                 A history Object Example.                 Click a button to go forward or back . . .          " onClick = "for-       ward  ">         Click a button to go forward or back two pages . . .          >" onClick = "for-       ward2  ">                   function back        {          window.history.back        }      function forward        {          window.history.forward        }      function back2        {          window.history.go -2       }      function forward2        {          window.history.go 2       }        Theres more we can do when navigating around with JavaScript. For example, we can read information sent to us from  another page, and well see how to do that in the following section.      < previous page    page_404  next page >  If you like this book, buy it!   < previous page  page_405  next page > Page 405  Retrieving Information from URL Strings  In this next example, well see how to determine where the user was before he or she navigated to our page. We start at a  page named LastLoc.htm. When the user clicks the hyperlink in this page, we navigate to a new page, NewLoc.htm,  which will display the name of the page we came from, LastLoc.htm.  We display the previous location by sending the browser to the URL NewLoc.htm?LastLoc.htm when the user clicks  the hyperlink. The browser will ignore the text after the question marknote that we place the name of the source page  there, LastLoc.htmbut we can read that information in the target page and display it.  Lets see how this works. We simply place the hyperlink to NewLoc.htm?LastLoc.htm in the LastLoc.htm page, as  shown here:           Tracking your location . . .                  This link will send tracking information . . .       Go to the new location        . . .   <-            In the target page, NewLoc.htm, we start by indicating to the user that we will determine the page he or she came from:           Determining your last location . . .                  Determining your last location . . .            < previous page    page_405  next page >  If you like this book, buy it!   < previous page  page_406  next page > Page 406      .      .      .  Were ready to read the information passed to us by the previous page.  Reading Text Sent in a URL  The text that appears after the question mark in the URL stringNewLoc.htm?LastLoc.htmwill be stored in the location  objects search property. In the target page, NewLoc.htm, we start by creating a string from that property:           Determining your last location . . .                  Determining your last location . . .                var oldURL = new String           oldURL = location.search            .        .        .           Determining your last location . . .                  Determining your last location . . .                var oldURL = new String    That string actually includes the leading question mark, so we cut off that character with the String method substring  ,  getting the browsers last location from that string and displaying it, as shown here:     < previous page    page_406  next page >  If you like this book, buy it!   < previous page  page_407  next page > Page 407      oldURL = location.search      document.write "  "       document.write "Your last location: " + oldURL.sub-        string 1, oldURL.length        document.write "  "            Thats all we neednow open LastLoc.htm ,as shown in Figure 10-8.  When you click the hyperlink, we move to the new page, NewLoc.htm, passing the URL NewLoc.htm?LastLoc.htm to  the browser. The code in that page strips the name of the previous page out of that URL and displays it, as shown in  Figure 10-9. Our LastLoc example is a successnow were reading information passed to us in a URL.  The code for this page, LastLoc.htm, is shown in Listing 10-9, and the NewLoc.htm page is shown in Listing 10-10.  We will track information sent from this page.  Figure 10-8    We determine where the browser navigated from.  Figure 10-9      < previous page    page_407  next page >  If you like this book, buy it!   < previous page  page_408  next page > Page 408  Listing 10-9  LastLoc.htm.          Tracking your location . . .                 This link will send tracking information . . .      Go to the new location        . . .            Listing 10-10  NewLoc.htm.          Determining your last location . . .                 Determining your last location . . .               var oldURL = new String        oldURL = location.search      document.write "  "       document.write "Your last location: " + oldURL.sub-        string 1, oldURL.length        document.write "  "            To continue our exploration of navigating in JavaScript, well take a new look at image maps next.    < previous page    page_408  If you like this book, buy it!  next page >   < previous page  page_409  next page > Page 409  The Next Step in Image Maps: JavaScript URLs  We constructed an image map in Chapter 6, Image Handling with JavaScript; there, the user could click a hotspot in the  image map and the browser would navigate to the associated URL. Here, well add some JavaScript to the processin  particular, well use JavaScript URLs. This technique allows us to treat JavaScript statements as a URL; instead of  navigating to a new URL, well execute those statements.  For example, we could create a new page, Imap2.htm, with the same two hotspots we used in Chapter 6. This time,  however, when users click the Microsoft hotspot, well execute some JavaScript and display a message asking if they  really want to jump to the Microsoft site.  Start this example, Imap2.htm, by setting up the map well use:           A javascript: Example                 A javascript: Example        <AREA NAME = "link1" COORDS = "54,105,118,125" HREF           = "javascript: ShowMessage  ">  <AREA NAME = "link2" COORDS = "104,53,171,75" HREF           = "" target="_BLANK">http:  www.netscape.com''>        .     .     .  Note that the URL for the Microsoft site has been replaced. Now it reads javascript: ShowMessage  . This is a  JavaScript URL, which means that instead of navigating to a URL somewhere, the browser is instructed to execute the  following JavaScript statement.  To complete the pages HTML, we add the image map itself and the text box well use:    < previous page    page_409  If you like this book, buy it!  next page >   < previous page  page_410  next page > Page 410           A javascript: Example                 A javascript: Example        <AREA NAME = "link1" COORDS = "54,105,118,125" HREF           = "javascript: ShowMessage  ">  <AREA NAME = "link2" COORDS = "104,53,171,75" HREF           = "" target="_BLANK">http:  www.netscape.com''>     <IMG SRC = "imap.gif" WIDTH = 240 HEIGHT = 155 USEMAP =        "IMAP">                            function ShowMessage    {      document.form1.Textbox.value = "Do you really want to       go to the          Microsoft site?"  }     All thats left is to write the ShowMessage   function. In that function, we display the message in the text box this way:  Thats itopen the page, as shown in Figure 10-10, and click the Microsoft hotspot. When you do, the JavaScript  ShowMessage   function is executed and places the message in the text box. Now were using JavaScript URLs.  The code for this page, Imap2.htm, is shown in Listing 10-11.  Now we come to a topic thats popular among programmers  but less so among users : using cookies. Well explore  working with cookies in JavaScript in the following section.    < previous page    page_410  next page >  If you like this book, buy it!   < previous page  page_411  next page > Page 411  We connect a hotspot to a javaScript function.  Figure 10-10   Listing 10-11  Imap2.htm.          A javascript: Example                 A javascript: Example        <AREA NAME = "link1" COORDS = "54,105,118,125" HREF           = "javascript: ShowMessage  ">  <AREA NAME = "link2" COORDS = "104,53,171,75" HREF           = "" target="_BLANK">http:  www.netscape.com">     <IMG SRC = "imap.gif" WIDTH = 240 HEIGHT = 155 USEMAP =        "IMAP">                          function ShowMessage    {      document.form1.Textbox.value = "Do you really want to         go to the           Microsoft site?"  }     < previous page    page_411  next page >  If you like this book, buy it!   next page > Page 412  < previous page  page_412  Listing 15-1  A collection example.       Sub DoCollections        Dim iCollection As New Collection      iCollection.Add "This is a test", "Test1"      iCollection.Add "This is a test2"      MsgBox iCollection.Count      MsgBox iCollection.Item "Test1"       MsgBox iCollection.Item 1       MsgBox iCollection.Item 2       iCollection.Remove  1       iCollection.Remove  1   End Sub   Using Cookies from JavaScript  In the next example, well store a cookie on the users computer and retrieve it, all with button clicks. We start this  example, Cookie.htm, by displaying two buttonsSet the cookie and Get the cookieas well as a text box.  When the user clicks the Set the cookie button, well set a cookie named Cookie19 that holds the text Heres the cookie.  in the users computer. Note that before we do so, the Web browser might warn the user that this is about to happen,  depending on the browsers settings. After the cookie is set, we retrieve its text when the user clicks the Get the cookie  button, displaying that text in the text box.  Start this new example, Cookie.htm, with the button well use to set the cookie:                 Setting and getting cookies . . .                  <INPUT TYPE = BUTTON Value = "Set the cookie" onClick =        "Set  ">  <-           .           .           .     < previous page    page_412  next page >  If you like this book, buy it!   < previous page  page_413  next page > Page 413  Next, add the button well use to get the cookie, as well as the text box well use to display the cookies text:                 Setting and getting cookies . . .                  <INPUT TYPE = BUTTON Value = "Set the cookie" onClick =        "Set  ">        <INPUT TYPE = BUTTON Value = "Get the cookie" onClick =       "Get  ">                             Now we need to write two functions: Set   to set the cookie and Get   to get the cookie.  In the Set   function, well set a cookie with the name Cookie1 and the text Heres the cookie.:  Setting a Cookie  function Set     {    .    .    .  }  Well need an expiration time for this cookie; Because this is only a demonstration, well set the cookie to last for an  hour. To do that, we create a new date object and set its time to an hour from now  the Date objects getTime   method  returns the current time in milliseconds :    < previous page    page_413  next page >  If you like this book, buy it!   < previous page  page_414  function Set    {      var Then = new Date        Then.setTime Then.getTime   + 60 * 60 * 1000           .          .          .  next page > Page 414  Next, we set the cookie. To do that, we just need to set the documents cookie property to the string we want to set. In this case, we give  the cookie the name Cookie1 and set its expiration time by using the keyword expires in the cookie string:  function Set    {      var Then = new Date        Then.setTime Then.getTime   + 60 * 60 * 1000       document.cookie = "Cookie1=Here's the cookie.;expires="          + Then.toGMTString    }  TIP: The keywords you can set in a cookies text include expires, path, domain, and secure.  This sets the cookie, which is now connected to the current document. If the cookie has not expired the next time this same document is  read in, we can read it automatically from the documents cookie property. In fact, well see how to read the cookie weve set now.  To read the cookie weve set, we simply need to find the cookie in the document.cookie property. Well do that in the function named Get   , called when the user clicks the Get the cookie button:     Reading a Cookie  function Get    {    .    .    .  }     < previous page    page_414  If you like this book, buy it!  next page >   < previous page  page_415  next page > Page 415  TIP: This function, Get  , can read the cookie as long as it hasnt expired, even if the page is read into the  browser at some later time. The whole point of cookies is that they stick around until you want them.     We start this function by creating a string from the document.cookie property so we can work with that string:  function Get    {        var cookieString = new String document.cookie           .          .          .  The string well look for in the cookie property is Cookie1= because the value of the cookie we set appears immediately after that string.  Well call the string Cookie1= the cookies header:  function Get    {        var cookieString = new String document.cookie       var cookieHeader = "Cookie1="          .          .          .  We find the location of cookie header in the cookie string with the String method indexOf  :  function Get    {        var cookieString = new String document.cookie       var cookieHeader = "Cookie1="      var beginPosition = cookieString.indexOf cookieHeader           .          .          .  If the cookie was found, we get the text of the cookie with the String substring   method and display it in the pages text box this way:  function Get    {        var cookieString = new String document.cookie      < previous page    page_415  If you like this book, buy it!  next page >   < previous page  page_416  next page > Page 416      var cookieHeader = "Cookie1="      var beginPosition = cookieString.indexOf cookieHeader       if  beginPosition != -1 {          document.form1.Textbox.value = cookieString.sub-       string beginPosition              + cookieHeader.length       }  On the other hand, if the cookie was not found, we display an error message:  function Get    {            var cookieString = new String document.cookie       var cookieHeader = "Cookie1="      var beginPosition = cookieString.indexOf cookieHeader       if  beginPosition != -1 {          document.form1.Textbox.value = cookieString.sub-       string beginPosition               + cookieHeader.length        }      else{          document.form1.Textbox.value = "Cookie not found."      }  }  Now open the Cookie.htm example. When the user clicks the button, the browser displays a warning message before  setting a cookie, as shown in Figure 10-11.     < previous page    Netscape warns that we are about to set a cookie.  Figure 10-11   page_416  next page >   If you like this book, buy it!   < previous page  page_417  next page > Page 417  After the cookie is set, we retrieve its text by clicking the Get the cookie button, as shown in Figure 10-12, where the  program has read the cookie back in and displayed it. Now were using cookies in JavaScript.  The code for this page, Cookie.htm, is shown in Listing 10-12.  We retrieve the text of the cookie weve set.  Figure 10-12   Listing 10-12  Cookie.htm.                Setting and getting cookies . . .                 <INPUT TYPE = BUTTON Value = "Set the cookie" onClick =        "Set  ">        <INPUT TYPE = BUTTON Value = "Get the cookie" onClick =        "Get  ">                                     < previous page    page_417  next page >  If you like this book, buy it!   < previous page  page_418  next page > Page 418  Listing 10-12  Continued. function Set     {      var Then = new Date        Then.setTime Then.getTime   + 60 * 60 * 1000       document.cookie = "Cookie1=Here's the cookie.;expires="           + Then.toGMTString    }  function Get    {            var cookieString = new String document.cookie       var cookieHeader = "Cookie1="      var beginPosition = cookieString.indexOf cookieHeader       if  beginPosition != -1 {          document.form1.Textbox.value = cookieString.sub-       string beginPosition               + cookieHeader.length        }      else{          document.form1.Textbox.value = "Cookie not found."      }  }         We will put our cookie knowledge to work now by creating a new page, Welcome.htm, that welcomes users by name to  a Web page each time they return.  Using Cookies: The Welcome Page  In the next example, well use cookies to store users names so we can greet them by name when they load the same page  again. The first time the user loads the page Welcome.htm, well prompt them to enter their name. When they click the  OK button, well store their name in a cookie. The next time they opens the same page, well welcome them by name.  In this example, Welcome.htm, we will name the cookie Name1. First, we check whether that cookie exists:            var cookieString = new String document.cookie       var cookieHeader = "Name1="      var beginPosition = cookieString.indexOf cookieHeader      < previous page    page_418  next page >  If you like this book, buy it!   < previous page  page_419  next page > Page 419          .          .          .  If the Name1 cookie exists, the beginPosition variable will hold its position in the cookie string, and we will read the  cookie to retrieve the user name. We read the user name from the cookie property like this:            var cookieString = new String document.cookie       var cookieHeader = "Name1="      var beginPosition = cookieString.indexOf cookieHeader       if  beginPosition != -1 {          var Name = cookieString.substring beginPosition               + cookieHeader.length            .          .          .  Then we display the users name this way:            var cookieString = new String document.cookie       var cookieHeader = "Name1="      var beginPosition = cookieString.indexOf cookieHeader       if  beginPosition != -1 {          var Name = cookieString.substring beginPosition               + cookieHeader.length            document.write "    Hello, " +       Name + "!  "       }      .      .      .  On the other hand, if the Name1 cookie doesnt exist, we display a prompt  as well as a text box and an OK button   asking users to enter their name:            var cookieString = new String document.cookie       var cookieHeader = "Name1="      var beginPosition = cookieString.indexOf cookieHeader       if  beginPosition != -1 {          var Name = cookieString.substring beginPosition               + cookieHeader.length            document.write "    Hello, " +       Name + "!  "       }     < previous page    page_419  next page >  If you like this book, buy it!   < previous page  page_420  next page > Page 420  else{      document.write "  "       document.write "  "       document.write "Please enter your name and click  OK . . . "       document.write " "       document.write " "       document.write " "       document.write "<INPUT TYPE = TEXT NAME = Name  SIZE = 40>"       document.write "  "       document.write "<INPUT TYPE = BUTTON VALUE = 'OK'  onClick           = 'storeName  '>"       document.write " "   }  When users click the OK button, we store their name in a cookie in the storeName   function:  function storeName    {    .    .    .  }  Well give this new cookie a week before it expires, setting up a date object this way:  function storeName    {      var Then = new Date        Then.setTime Then.getTime   + 7 * 24 * 60 * 60 *   1000         .        .        .  }  All thats left is to set the cookie, as shown here:  function storeName    {      var Then = new Date        Then.setTime Then.getTime   + 7 * 24 * 60 * 60 *   1000       document.cookie = "Name1=" +   document.form1.Name.value + ";expires="          + Then.toGMTString    }     < previous page    page_420  next page >  If you like this book, buy it!   < previous page  page_421  next page > Page 421  Thats itnow open the Welcome page. The first time users open this page, it asks them for their name, as shown in Figure  10-13.  When users enter their name and click OK, the page stores it in a cookie. The next time users open the same page, we  can greet them by name, as shown in Figure 10-14. Our Welcome.htm page is a powerful example of what you can do  with JavaScript.  The code for this page, Welcome.htm, is shown in Listing 10-13.  Figure 10-13   We set a cookie storing the users name.      < previous page    Figure 10-14   We retrieve the users name from a cookie.  page_421  next page >  If you like this book, buy it!   < previous page  page_422  next page > Page 422  Listing 10-13  Welcome.htm.           var cookieString = new String document.cookie       var cookieHeader = "Name1="      var beginPosition = cookieString.indexOf cookieHeader       if  beginPosition != -1 {          var Name = cookieString.substring beginPosition               + cookieHeader.length            document.write "    Hello, " +       Name + "!  "       }      else{          document.write "  "           document.write "  "           document.write "Please enter your name and click       OK . . ."           document.write " "           document.write " "           document.write " "           document.write "<INPUT TYPE = TEXT NAME = Name       SIZE = 40>"           document.write "  "           document.write "<INPUT TYPE = BUTTON VALUE = 'OK'       onClick               = 'storeName  '>"           document.write " "       }      function storeName        {          var Then = new Date            Then.setTime Then.getTime   + 7 * 24 * 60 * 60 *       1000           document.cookie = "Name1=" +       document.form1.Name.value + ";expires="               + Then.toGMTString        }         Weve been working with the browser window a lot in this chapter, and theres one more example well try. This next  example doesnt have to do with navigation directly, but its still a popular topic in JavaScript: setting the text in the  browsers status bar.    < previous page    page_422  If you like this book, buy it!  next page >   < previous page  page_423  next page > Page 423  Changing the Status Bar Text  In the last example of this chapter, well see how to change the text in the browsers status bar, which appears at the  bottom of the browser window. With the click of a button, we can change the text in the status bar.  Lets see this in action. Start this page, Status.htm, with the button the user can click to change the status bar message:           A Status Bar Example                  A Status Bar Example.                     <INPUT TYPE = BUTTON Value = "Change Status Bar Text"        onClick           = "ShowMessage  ">            In the   element, we start by giving the browser window the original status text, which we place in the  windows defaultStatus property:         window.defaultStatus = "Here is the status bar . . . "          .          .          .  The button in this page is tied to the function named ShowMessage  . In that function, we just reset the default status  text to the new message:    < previous page    page_423  next page >  If you like this book, buy it!   < previous page  page_424  next page > Page 424         window.defaultStatus = "Here is the status bar . . . "      function ShowMessage        {          window.defaultStatus = "Welcome to JavaScript!"      }        Open this page now, as shown in Figure 10-15. You can see the original status bar text displayed in the status bar.  When you click the button in this page, the browser changes the text in the status bar to the new version, as shown in  Figure 10-16. In this way, we can dynamically set the text in the browsers status bar.  Figure 10-15   We can set the text in the pages status bar.   We set the status bar text to a specific message.  Figure 10-16      < previous page    page_424  next page >  If you like this book, buy it!   < previous page  page_425  next page > Page 425  You can also change the status bar text by setting the windows status property. This method just changes the  text in the status bar temporarily, until replaced by the default text  if youve set any default text in the status  bar .     The code for this page, Status.htm, is shown in Listing 10-14.  Listing 10-14  Status.htm.          A Status Bar Example                  A Status Bar Example.                     <INPUT TYPE = BUTTON Value = "Change Status Bar Text"        onClick           = "ShowMessage  ">                   window.defaultStatus = "Here is the status bar . . ."      function ShowMessage        {          window.defaultStatus = "Welcome to JavaScript!"      }         Conclusion  That example completes this chapter. Weve explored the navigator, location, and history objects. Weve also learned how to get  information about the browser, create a slideshow, jump to a new URL, move forward or backward by using the history object, send  information in a URL, use JavaScript URLs, use cookies, create a customized Web page that greets the user by name, and set the text in  the status bar. Weve gained many new skills in this chapter.  In the next chapter, well continue our exploration of JavaScript as we see how to connect it to Java.    < previous page    page_425  If you like this book, buy it!  next page >   < previous page  page_427  next page > Page 427  Chapter 11  Connecting JavaScript and Java  In this chapter, well see how to connect JavaScript to another Web programming language: Sun Microsystems Java  language. Java and JavaScript will both benefit from the connection because some things that arent possible in one  language are possible in the other.  For example, JavaScript has more control over the Web page than an applet does, so well learn how to use JavaScript to  rewrite a whole Web page from Java, something not usually possible. On the other hand, Java has more control over  other parts of Web programming, such as GUI handling. In this chapter, well cover how to control a very visual Java  applet from JavaScript. In this way, well see how to do things from JavaScript that arent usually possible in  JavaScriptand things from Java that arent usually possible from JavaScriptall because we can connect the two languages.    < previous page    next page >  page_427  If you like this book, buy it!         < previous page  page_428  next page > Page 428  TIP: This chapter requires some knowledge of Java programming techniques.  Well cover a lot in this chapter: how to connect to a Java applet from JavaScript, how to pass arguments to that applets methods, how to  receive return values from those methods, how to pass strings to applet methods, how to use Java statements directly in JavaScript  well  open a window and place a Java text field in that window from JavaScript , and how to use JavaScript from Java to rewrite a Web page   this last technique is especially powerful because it gives applets total control over Web pages, which they dont usually have .  Well begin by developing a Java applet with several methods that we can reach from scripts in the same page. Well use and modify this  applet throughout the chapter.  The Suspend Applet  Our Java applet will be called Suspend. This applet displays an animated graphic imagea whirling diskand two buttons, Suspend and  Resume. When the user clicks the Suspend button, the applet stops the disk from spinning; when the user clicks the Resume button, well  start the disk again. These are the two functionssuspending and resuming the animationthat well perform from JavaScript when we  connect a script to the applet.  TIP: Well use Java 1.0 in this example because at the time of this writing, its by far the most common Java  version; note, however, that using Java 1.1 or 1.2 wont substantially change the following examples.  Lets start the Suspend example by importing the Java AWT classes and the Applet class in a new file, Suspend.java:  import java.awt.*;  import java.applet.Applet;      .      .      .  Next, we declare our new class, Suspend, extending the Applet class and implementing the Java Runnable interface  because our applet  supports animation and will be multi-threaded :    < previous page    page_428  next page >  If you like this book, buy it!   < previous page  page_429  import java.awt.*;  import java.applet.Applet;  public class Suspend extends Applet implements   Runnable{      .      .      .  next page > Page 429  Well use four images to support the animation; each one will show a circle divided into four quadrants. A different  quadrant will be colored in each image, so when we flash the images onscreen in rapid succession, the result will be a  single disk appearing to spin around.  Heres how we load the four images, Wheel1.gif to Wheel4.gif, into an array of Java image objects named images[] and  add the Suspend and Resume buttons in the init   method:  import java.awt.*;  import java.applet.Applet;  public class Suspend extends Applet implements   Runnable{      Image images[] = new Image[4];      Image currentImage;      Button buttonSuspend, buttonResume;      public void init        {          images[0] = getImage getCodeBase  ,   "Wheel1.gif" ;          images[1] = getImage getCodeBase  ,   "Wheel2.gif" ;          images[2] = getImage getCodeBase  ,   "Wheel3.gif" ;          images[3] = getImage getCodeBase  ,   "Wheel4.gif" ;          buttonSuspend = new Button "Suspend" ;          add buttonSuspend ;          buttonResume = new Button "Resume" ;          add buttonResume ;      }  We will also add an action   method to handle the button clicks. In this method, we call a new method, suspend  , when  the user clicks the Suspend button, and another new method, resume  , when the user clicks the Resume button:  public boolean action  Event e, Object o   {      if e.target.equals buttonSuspend  {          suspend  ;      }     < previous page    page_429  next page >  If you like this book, buy it!   < previous page  page_430      if e.target.equals buttonResume  {          resume  ;      }      return true;  }  next page > Page 430  Now well support the animation itself by creating a new thread, thread1. We create and start that thread in the applets  start   method and stop it in the applets stop   method:  import java.awt.*;  import java.applet.Applet;  public class Suspend extends Applet implements   Runnable{      Image images[] = new Image[4];      Image currentImage;      Thread thread1;      Button buttonSuspend, buttonResume;        .        .        .      public void start        {          thread1 = new Thread this ;          thread1.start  ;      }      public void stop        {          thread1.stop  ;      }  import java.awt.*;  import java.applet.Applet;  public class Suspend extends Applet implements   Runnable{      Image images[] = new Image[4];      Image currentImage;      int loop_index = 0;      Thread thread1;      Button buttonSuspend, buttonResume;        .        .        .      public void start        {  The actual animation occurs in the run   method, which is called when the new thread starts. Here, we will loop  continuously  or until the page is dismissed from the browser, which calls the applets stop   method , cycling over the  images using a variable named loop_index:     < previous page    page_430  next page >  If you like this book, buy it!   < previous page  page_431  next page > Page 431          thread1 = new Thread this ;          thread1.start  ;      }      public void stop        {          thread1.stop  ;      }      public void run        {          while true {              currentImage = images[loop_index++];              if loop_index > 3 loop_index = 0;              repaint  ;              try {Thread.sleep 250 ;}              catch InterruptedException exp  { }          }      }  public void paint  Graphics g   {      if currentImage != null {          g.drawImage currentImage, 100, 100, this ;      }  }  Note that we put the thread to sleep for 250 milliseconds each time through the loop, pausing for a quarter of a second between displaying  successive images. Each time through the loop in the run   method, we load a new image into an image object we name currentImage, and  then call the Java repaint   method to display that image. Calling repaint   forces Java to call the applets paint  method, so we display the  image in currentImage in paint  :  TIP: We check the currentImage object to see whether its null before displaying it because loading the  images into the applet is a time-consuming process. Until the images are loaded, we shouldnt try to display  them.  That completes the animation. All thats left is to suspend the animation when the user clicks the Suspend button and resume it when the  user clicks the Resume button. Well do that in the suspend   and resume   methods, called when the user clicks the Suspend or Resume  buttons:     public void suspend    {    .     < previous page    page_431  If you like this book, buy it!  next page >   < previous page  page_432  next page > Page 432    .    .  }  public void resume    {    .    .    .  }  public void suspend    {      thread1.suspend  ;  }  public void resume    {      thread1.resume  ;  }  To suspend the animation, use the Java Thread classs suspend   method, and to resume the animation, use the Thread  classs resume   method:  Thats itour Suspend applet is finished. If we place it in a Web page  after compiling Suspend.java to Suspend.class by  using the Java compiler, javac , it would look like Figure 11-1. You can see the whirling disk in that figure, as well as  the Suspend and Resume buttons. Our Java applet is ready to connect to JavaScript.  The code for this applet, Suspend.java, is shown in Listing 11-1.     < previous page    Figure 11-1   Our Java Suspend applet.  page_432  If you like this book, buy it!  next page >   < previous page  page_433  Listing 11-1  Suspend.java.     import java.awt.*;      import java.applet.Applet;      public class Suspend extends Applet implements       Runnable{          Image images[] = new Image[4];          Image currentImage;          int loop_index = 0;          Thread thread1;          Button buttonSuspend, buttonResume;          public void init            {              images[0] = getImage getCodeBase  ,       "Wheel1.gif" ;              images[1] = getImage getCodeBase  ,       "Wheel2.gif" ;              images[2] = getImage getCodeBase  ,       "Wheel3.gif" ;              images[3] = getImage getCodeBase  ,       "Wheel4.gif" ;              buttonSuspend = new Button "Suspend" ;              add buttonSuspend ;              buttonResume = new Button "Resume" ;              add buttonResume ;          }          public boolean action  Event e, Object o           {              if e.target.equals buttonSuspend  {                  suspend  ;              }              if e.target.equals buttonResume  {                  resume  ;              }              return true;          }          public void suspend            {              thread1.suspend  ;          }          public void resume            {              thread1.resume  ;          }          public void start            {              thread1 = new Thread this ;              thread1.start  ;          }          public void stop            {              thread1.stop  ;     < previous page  page_433  next page > Page 433  next page >      If you like this book, buy it!   < previous page  page_434  next page > Page 434  Listing 11-1  Continued.         }          public void run            {              while true {                  currentImage = images[loop_index++];                  if loop_index > 3 loop_index = 0;                  repaint  ;                  try {Thread.sleep 250 ;}                  catch InterruptedException exp { }              }          }          public void paint  Graphics g           {              if currentImage != null {                  g.drawImage currentImage, 100, 100, this ;              }          }      }  Now lets connect the applet to JavaScript.  Reaching Java Methods from JavaScript: The Suspend Example  Weve seen enough Java for the moment; now lets see some JavaScript. In our next example, Suspend.htm, well embed  the applet we just createdand some JavaScriptin the same Web page. Well add two buttons, Suspend applet and Resume  applet, to the page.  When the user clicks the Suspend applet button, well call the applets suspend   method to suspend the animation; when  the user clicks the Resume applet button, well call the applets resume   method to resume the animation.  First, we place the Suspend.class applet in the Web page using the   tag:           Using Java methods from JavaScript                 < previous page    page_434  next page >  If you like this book, buy it!   < previous page  page_435  next page > Page 435     Controlling a Java method from JavaScript           <APPLET     CODE="Suspend.class" WIDTH="300" HEIGHT="300" MAYSCRIPT>            .      .      .  Note that weve included the MAYSCRIPT attribute in the   tag, indicating to the browser that well connect  this applet to a script. This is a necessary stepyou must use MAYSCRIPT before you can reach an applet from  JavaScript.  Next, add the two buttons well use, Suspend applet and Resume applet:           Using Java methods from JavaScript                 Controlling a Java method from JavaScript           <APPLET     CODE="Suspend.class" WIDTH="300" HEIGHT="300" MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Suspend applet" onClick =    "suspend  ">  <INPUT TYPE = BUTTON VALUE = "Resume applet" onClick = "re-    sume  ">           .     .     .  We connect those buttons to two JavaScript functions, suspend   and resume  :    < previous page    page_435  If you like this book, buy it!  next page >   < previous page  page_436  next page > Page 436     function suspend    {    .    .    .  }  function resume    {    .    .    .  }     Now we can connect these functions to the applet.  Reaching an Applet From JavaScript  function suspend    {      document.applets[0].suspend    }        In the suspend   JavaScript function, we want to call the applets suspend   method. Thats easier than you might think. All we have to do is  to use the document objects applets[] collection to reach the applet. Because we have only one applet in this page, we can refer to that  applet as document.applets[0], and we can reach the applets internal suspend   method as shown here:  NOTE: To reach an applets methods or properties, those items must have been declared public in the applet.  TIP: Just as you can use the applets[] collection to reach the applets in a page, you can use the plugins[]  collection to reach plug-ins.  In the same way, we can connect the Resume applet button to the applets internal resume   method this way:  function resume    {      document.applets[0].resume    }     < previous page    page_436  If you like this book, buy it!  next page >   < previous page  page_437  next page > Page 437  Open this new page, Suspend.htm, as shown in Figure 11-2. You can see our new Suspend applet and Resume applet  buttons in that page; if you click the Suspend applet button, the whirling disk in the applet stops. If you click the  Resume applet button, the whirling disk starts again. Now we can reach the internal methods of an applet from  JavaScript.  The code for this page, Suspend.htm, is shown in Listing 11-2.  Figure 11-2   Our Suspend page controls an applet.  Listing 11-2  Suspend.htm.          Using Java methods from JavaScript                 Controlling a Java method from JavaScript           <APPLET     CODE="Suspend.class" WIDTH="300" HEIGHT="300" MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Suspend applet" onClick =       < previous page    page_437  next page >  If you like this book, buy it!   < previous page  page_438  next page > Page 438  Listing 15-1.  Continued.           "suspend  ">  <INPUT TYPE = BUTTON VALUE = "Resume applet" onClick = "re-        sume  ">              function suspend    {      document.applets[0].suspend    }  function resume    {      document.applets[0].resume    }        Now were ready to take the next steppassing arguments to a Java method from JavaScript.  Passing Arguments to Java from JavaScript: The Suspend2 Example  public void run    {      while true {          currentImage = images[loop_index++];          if loop_index > 3 loop_index = 0;          repaint  ;          try {Thread.sleep 250 ;}          catch InterruptedException exp { }      }  }  In the next example, well pass arguments from JavaScript to Java. In particular, we will change the time the applet  pauses between displaying images by passing a new value from JavaScript. Currently, that time is 250 milliseconds:  In this example, well see how to reset that value from a JavaScript function, creating a new version of the Suspend  example. This new example, Suspend2, will display one JavaScript button, Reset spin time.    < previous page    page_438  next page >  If you like this book, buy it!   < previous page  page_439  next page > Page 439  When the user clicks this button, well pass a new animation delay to the applet50 millisecondscausing the disk to whirl  around faster.  As the Suspend applet is written now, the delay between images is 250 milliseconds:  public void run    {      while true {          currentImage = images[loop_index++];          if loop_index > 3 loop_index = 0;          repaint  ;          try {Thread.sleep 250 ;}          catch InterruptedException exp { }      }  }  Lets place that value in a variable named time so we can change it at will:  import java.awt.*;  import java.applet.Applet;  public class Suspend2 extends Applet implements    Runnable{      Image images[] = new Image[4];      Image currentImage;      int loop_index = 0;      Thread thread1;      Button buttonSuspend, buttonResume;      int time = 250;          .          .          .      public void run        {          while true {              currentImage = images[loop_index++];              if loop_index > 3 loop_index = 0;              repaint  ;              try {Thread.sleep time ;}              catch InterruptedException exp  { }          }      }  Next, we need some way of getting the new delay time from our JavaScript code, so we set up a new method, resetTime   , in the applet. In that method, were passed the new time  in milliseconds  for the time variable, and we simply load  that variable as shown here:  public boolean action  Event e, Object o   {     < previous page    page_439  next page >  If you like this book, buy it!   < previous page  page_440  next page > Page 440      if e.target.equals buttonSuspend  {          suspend  ;      }      if e.target.equals buttonResume  {          resume  ;      }      return true;  }  public void suspend    {      thread1.suspend  ;       }  public void resetTime int x   {      time = x;  }  public void resume    {      thread1.resume  ;       }  public void start    {      thread1 = new Thread this ;      thread1.start  ;  }  Using the resetTime   method, then, we can reset the applets animation delay. Now we will write the new Web page,  Suspend2.htm, with the controls and the script that well need. Heres how we add the applet and the Reset spin time  button to this page:                    Passing Arguments from JavaScript to Java           <APPLET      CODE="Suspend2.class" WIDTH="300" HEIGHT="300"       MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Reset spin time" onClick =    "resetTime  ">     < previous page    page_440  next page >   If you like this book, buy it!   < previous page  page_441  next page > Page 441  When the user clicks the Reset spin time button, the JavaScript resetTime   function is called, and we can call the applets resetTime    method, passing it a value of 50 milliseconds:              function resetTime    {      document.applets[0].resetTime 50   }     Now open this page, as shown in Figure 11-3, and click the Reset spin time button. When you click that button, the disk starts spinning  faster. Now we can pass numeric arguments to applet methods.  TIP: Even though JavaScript is an untyped language and Java is strongly typed, the applet determines what  type of variable youre passing to a Java method by checking the declared types of the methods arguments.     The code for this applet, Suspend2.java, is shown in Listing 11-3, and the Web page, Suspend2.htm, in Listing 11-4.     < previous page    Figure 11-3   We pass arguments to a Java applet.  page_441  If you like this book, buy it!  next page >   next page > Page 442  < previous page  page_442  Listing 11-3  Suspend2.java.     import java.awt.*;      import java.applet.Applet;      public class Suspend2 extends Applet implements       Runnable{          Image images[] = new Image[4];          Image currentImage;          int loop_index = 0;          Thread thread1;          Button buttonSuspend, buttonResume;          int time = 250;          public void init            {              images[0] = getImage getCodeBase  ,       "Wheel1.gif" ;              images[1] = getImage getCodeBase  ,       "Wheel2.gif" ;              images[2] = getImage getCodeBase  ,       "Wheel3.gif" ;              images[3] = getImage getCodeBase  ,       "Wheel4.gif" ;              buttonSuspend = new Button "Suspend" ;              add buttonSuspend ;              buttonResume = new Button "Resume" ;              add buttonResume ;          }          public boolean action  Event e, Object o           {              if e.target.equals buttonSuspend  {                  suspend  ;              }              if e.target.equals buttonResume  {                  resume  ;              }              return true;          }          public void suspend            {              thread1.suspend  ;                   }          public void resetTime int x           {              time = x;          }          public void resume            {              thread1.resume  ;                   }          public void start            {              thread1 = new Thread this ;              thread1.start  ;            }     < previous page    page_442  next page >  If you like this book, buy it!   < previous page  page_443  next page > Page 443  Listing 11-3  Continued.         public void stop            {              thread1.stop  ;          }          public void run            {              while true {                  currentImage = images[loop_index++];                  if loop_index > 3 loop_index = 0;                  repaint  ;                  try {Thread.sleep time ;}                  catch InterruptedException exp  { }              }          }          public void paint  Graphics g           {              if currentImage != null {                  g.drawImage currentImage, 100, 100, this ;              }          }    } Listing 11-4  Suspend 2.htm.                   Passing Arguments from JavaScript to Java           <APPLET      CODE="Suspend2.class" WIDTH="300" HEIGHT="300"       MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Reset spin time" onClick =       "resetTime  ">              function resetTime    {      document.applets[0].resetTime 50   }             < previous page    page_443  next page >  If you like this book, buy it!   < previous page  page_444  next page > Page 444  Besides numeric data, we can pass other types of data, such as strings, to Java applets.  Passing Strings from JavaScript to Java: The PassString Example  In the next example, well see how to pass string data to applets from JavaScript. For example, we can pass control  strings from JavaScript to the applet. If we pass, say, the string suspend to the applet, it should stop the disk from  spinning. If we pass the string resume, it should start the applet spinning again. Well use the same buttons in this  example: Suspend applet and Resume applet.  In this example, PassString, we just have to add a new method, readString  , to the applet. If we pass the string suspend  to readString  , that method will call the applets suspend   method; if we pass the string resume to the applet, it calls the  resume   method:  import java.awt.*;  import java.applet.Applet;  public class PassString extends Applet implements   Runnable{      Image images[] = new Image[4];      Image currentImage;      int loop_index = 0;      Thread thread1;      Button buttonSuspend, buttonResume;      int time = 250;         .         .         .      public void suspend        {          thread1.suspend  ;      }      public void readString String inString       {          if inString.equals "suspend"  {              suspend  ;          }          if inString.equals "resume"  {              resume  ;          }      }      public void resume        {          thread1.resume  ;     < previous page    page_444  next page >  If you like this book, buy it!   < previous page  page_445  next page > Page 445      }      public void start        {          thread1 = new Thread this ;          thread1.start  ;      }  Thats all it takesthe JavaScript Java interface is set up to handle the details. All we have to do is to pass a string to the  readString   method. Well do that in JavaScript in a new page, PassString.htm, starting that page with the Suspend  applet and Resume applet buttons:           Passing a string from JavaScript to Java                 Passing a string from JavaScript to Java           <APPLET      CODE="PassString.class" WIDTH="300" HEIGHT="300"       MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Suspend applet" onClick =        "suspend  ">  <INPUT TYPE = BUTTON VALUE = "Resume applet" onClick = "re-        sume  ">             In the JavaScript suspend   and resume   functions, we simply pass the required string to the applet this way:     function suspend    {      document.applets[0].readString "suspend"   }  function resume    {      document.applets[0].readString "resume"   }        < previous page    page_445  next page >   If you like this book, buy it!   < previous page  page_446  next page > Page 446  Now open the page, as shown in Figure 11-4. When you click the Suspend applet button, the JavaScript function  suspend   passes the control string suspend to the applet and the disk stops whirling; when you click the Resume applet  button, the resume   function passes the control string resume to that applet and the disk starts again. Now we can pass  control strings to applets from JavaScript.  The code for this applet, PassString.java, is shown in Listing 11-5, and the code for the Web page, PassString.htm, in  Listing 11-6.  Figure 11-4   We pass control strings to an applet.  Listing 11-5  PassString.java.     import java.awt.*;      import java.applet.Applet;      public class PassString extends Applet implements       Runnable{          Image images[] = new Image[4];          Image currentImage;          int loop_index = 0;          Thread thread1;          Button buttonSuspend, buttonResume;          int time = 250;          public void init            {              images[0] = getImage getCodeBase  ,       "Wheel1.gif" ;              images[1] = getImage getCodeBase  ,       "Wheel2.gif" ;              images[2] = getImage getCodeBase  ,       "Wheel3.gif" ;      < previous page    page_446  next page >  If you like this book, buy it!   next page > Page 447  < previous page  page_447  Listing 11-5  Continued.             images[3] = getImage getCodeBase  ,       "Wheel4.gif" ;              buttonSuspend = new Button "Suspend" ;              add buttonSuspend ;              buttonResume = new Button "Resume" ;              add buttonResume ;          }          public boolean action  Event e, Object o           {              if e.target.equals buttonSuspend  {                   suspend  ;              }              if e.target.equals buttonResume  {                   resume  ;              }              return true;          }          public void suspend            {              thread1.suspend  ;          }          public void readString String inString           {              if inString.equals "suspend"  {                  suspend  ;              }              if inString.equals "resume"  {                  resume  ;              }          }          public void resume            {              thread1.resume  ;          }          public void start            {              thread1 = new Thread this ;              thread1.start  ;          }          public void stop            {              thread1.stop  ;          }          public void run            {              while true {                  currentImage = images[loop_index++];                  if loop_index > 3 loop_index = 0;                  repaint  ;                  try {Thread.sleep time ;}                  catch InterruptedException exp  { }      < previous page    page_447  next page >  If you like this book, buy it!   < previous page  page_448  next page > Page 448  Listing 11-5  Continued.                 }              }              public void paint  Graphics g               {                  if currentImage != null {                      g.drawImage currentImage, 100, 100, this ;                  }              }      } Listing 11-6  PassString.htm.          Passing a string from JavaScript to Java                 Passing a string from JavaScript to Java           <APPLET      CODE="PassString.class" WIDTH="300" HEIGHT="300"       MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Suspend applet" onClick =       "suspend  ">  <INPUT TYPE = BUTTON VALUE = "Resume applet" onClick = "re-       sume  ">              function suspend    {      document.applets[0].readString "suspend"   }  function resume    {      document.applets[0].readString "resume"   }             < previous page    page_448  next page >  If you like this book, buy it!   < previous page  page_449  next page > Page 449  Weve seen how to pass arguments to Java applet methods from JavaScript, but we havent see how to read the values  that such methods return. All weve done so far is pass arguments to Java methods, not read their return values. Well see  how to read these values in the following section.  Returning Values From Java to JavaScript: The RetVal Example  In the next example, RetVal, well see how to return a value from a Java method to a JavaScript function. Here, well add  a new JavaScript button, Get spin time, to our Web page that reads the current spin delay from the applet.  When the user clicks that button, we can call a new method in the appletgetSpeed  and well display the return value  from that method in a text box. In this way, we can get a return value from an applet method and display that value in  the Web page.  We start by setting up the getSpeed   method in the applet. All that method does is return the current animation delay,  which is stored in the variable named time. In other words, all we have to do is return that variable from the getSpeed    method:  import java.awt.*;      import java.applet.Applet;      public class RetVal extends Applet implements Runnable{          Image images[] = new Image[4];          Image currentImage;          int loop_index = 0;          Thread thread1;          Button buttonSuspend, buttonResume;          int time = 250;               .               .               .          public boolean action  Event e, Object o           {              if e.target.equals buttonSuspend  {                  suspend  ;              }              if e.target.equals buttonResume  {                  resume  ;              }              return true;     < previous page    page_449  next page >  If you like this book, buy it!   < previous page  page_450  next page > Page 450  Thats it for the Java part of this example. In fact, theres not much more we have to do in JavaScript, either. Heres how  we set up the Get spin time button in the Web page RetVal.htm:          }          public void resetTime int newTime           {              time = newTime;          }          public int getSpeed            {              return time;          }          public void resume            {              thread1.resume  ;                   }           Returning values from Java to JavaScript                 Returning values from Java to JavaScript           <APPLET      CODE="RetVal.class" WIDTH="300" HEIGHT="300" MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Reset spin time" onClick =        "resetTime  ">  <INPUT TYPE = BUTTON VALUE = "Get spin time" onClick =        "getSpeed  ">                  This new button is connected to the JavaScript function getSpeed  . In that function, all we do is call the applets  getSpeed   method and treat the return value as we would one from any other JavaScript function.    < previous page    page_450  next page >  If you like this book, buy it!   < previous page  page_451  next page > Page 451  That means we can display the current animation delay in the pages text box as shown here:     function resetTime    {      document.applets[0].resetTime 50   }  function getSpeed    {      document.form1.Textbox.value = "Spin time = "          + document.applets[0].getSpeed    }     The Java JavaScript interface handles all the rest of the details for us. This interface is even more impressive when you  consider that Java is a very strongly typed language, with ints, doubles, floats, and so on. Nonetheless, those values are  translated into JavaScript variables automatically for us.  Open this page, as shown in Figure 11-5. If you click the Reset spin time button, the animation delay is set from 250  milliseconds to 50 in the applet. If you click the Get spin time button, we call the applets getSpeed   method, displaying  that methods return value. Now were retrieving values returned to us from Java methods.  We return a value from Java to JavaScript.  Figure 11-5      < previous page    page_451  next page >  If you like this book, buy it!   < previous page  page_452  next page > Page 452  The code for this applet, RetVal.java, is shown in Listing 11-7, and the code for the corresponding Web page, RetVal. htm, is shown in Listing 11-8.  Listing 11-7  RetVal.java.     import java.awt.*;      import java.applet.Applet;      public class RetVal extends Applet implements Runnable{          Image images[] = new Image[4];          Image currentImage;          int loop_index = 0;          Thread thread1;          Button buttonSuspend, buttonResume;          int time = 250;          public void init            {              images[0] = getImage getCodeBase  ,       "Wheel1.gif" ;              images[1] = getImage getCodeBase  ,       "Wheel2.gif" ;              images[2] = getImage getCodeBase  ,       "Wheel3.gif" ;              images[3] = getImage getCodeBase  ,       "Wheel4.gif" ;              buttonSuspend = new Button "Suspend" ;              add buttonSuspend ;              buttonResume = new Button "Resume" ;              add buttonResume ;          }          public boolean action  Event e, Object o           {              if e.target.equals buttonSuspend  {                  suspend  ;              }              if e.target.equals buttonResume  {                  resume  ;              }              return true;          }          public void suspend            {              thread1.suspend  ;                   }          public void resetTime int newTime           {              time = newTime;          }          public int getSpeed            {              return time;          }     < previous page  page_452  next page >      If you like this book, buy it!   < previous page  page_453  next page > Page 453  Listing 11-7  Continued.         public void resume            {              thread1.resume  ;            }          public void start            {              thread1 = new Thread this ;              thread1.start  ;          }          public void stop            {              thread1.stop  ;          }          public void run            {              while true {                  currentImage = images[loop_index++];                  if loop_index > 3 loop_index = 0;                  repaint  ;                  try {Thread.sleep time ;}                  catch InterruptedException exp  { }              }          }          public void paint  Graphics g           {              if currentImage != null {                  g.drawImage currentImage, 100, 100, this ;              }          } Listing 11-8  RetVal.htm.          Returning values from Java to JavaScript                 Returning values from Java to JavaScript           <APPLET      CODE="RetVal.class" WIDTH="300" HEIGHT="300" MAYSCRIPT>                   < previous page    page_453  next page >  If you like this book, buy it!   < previous page  page_454  next page > Page 454  Listing 11-8  Continued. <INPUT TYPE = BUTTON VALUE = "Reset spin time" onClick =        "resetTime  ">  <INPUT TYPE = BUTTON VALUE = "Get spin time" onClick =        "getSpeed  ">                    function resetTime    {      document.applets[0].resetTime 50   }  function getSpeed    {      document.form1.Textbox.value = "Spin time = "          + document.applets[0].getSpeed    }        Weve been working with our applet a lot in this chapter, but we can use Java methods without even having an applet to  work with. Instead, we can use the JavaScript java object.  Using Java Statements in JavaScript: The UseJava Example  In this next example, UseJava.htm, well see how to use Java statements without having an applet. Well execute Java  statements directly by using the JavaScript java object. Here, well display two buttons in a Web page: Show window  and Hide window.  When the user clicks the Show window button, well flash a Java applet window onto the screen with a Java text field  holding the message Hello from JavaScript. In this way, well make use of several Java statements without even having  an applet in our Web page. Lets start this page, UseJava.htm, with the two buttons Show window and Hide window:    < previous page    page_454  next page >  If you like this book, buy it!   < previous page  page_455  next page > Page 455           Using Java From JavaScript                    Calling Java Methods from JavaScript                 <INPUT TYPE = BUTTON Value = "Show window" onClick =        "showWindow  ">  <INPUT TYPE = BUTTON Value = "Hide window" onClick =        "hideWindow  ">        These buttons are connected to the JavaScript functions showWindow   and hideWindow  :         var frameWindow = null      function showWindow        {        .        .        .      }      function hideWindow        {        .        .        .      }                var frameWindow = null      function showWindow        {     < previous page    To show the window, we can use the java object and proceed much as we would in Java. We create a new Java frame  window with the title New window! in JavaScript  we make this new window, frameWindow, a global object so we can  close it in the hideWindow   function :  page_455  next page >  If you like this book, buy it!   < previous page  page_456  next page > Page 456          frameWindow = new java.awt.Frame "New window!"               .              .              .      }  Next, we create a Java text field and place the text Hello from JavaScript in that text field:         var frameWindow = null      function showWindow        {          frameWindow = new java.awt.Frame "New window!"           var text = new java.awt.TextField "Hello from       JavaScript"            .           .           .      }         var frameWindow = null      function showWindow        {          frameWindow = new java.awt.Frame "New window!"           var text = new java.awt.TextField "Hello from       JavaScript"           frameWindow.add "Center", text           frameWindow.resize 200, 200           frameWindow.show        }  Were almost doneall thats left is to size the window the way we want it and to display it, which we do this way:  At this point, then, a Java applet window is shown on the screen. Now were using Java directly from JavaScript. To  close the window, add code to the hideWindow   function, which is tied to the Hide window button:  function hideWindow    {    .    .    .  }  After checking to make sure the window is actually open  the user might have clicked the Hide window button before  clicking the Show window button , we close the window using its hide   method:    < previous page    page_456  next page >  If you like this book, buy it!   < previous page  page_457  next page > Page 457  function hideWindow    {      if frameWindow != null {          frameWindow.hide        }  }  Open UseJava.htm, as shown in Figure 11-6. When you click the Show window button, the program uses Java directly  to create a Java applet window and display it. Now were using Java directly from JavaScript.  As you can imagine, using Java directly from JavaScript is a powerful technique. Many of the aspects JavaScript  lackssuch as GUI programmingare supplied in Java. Using the java object helps us make use of Java from JavaScript.  The code for this page, UseJava.htm, is shown in Listing 11-9.  We use Java statements to open a window with a Java text field.  Figure 11-6   Listing 11-9  UseJava.htm.          Using Java From JavaScript                        < previous page    page_457  next page >  If you like this book, buy it!   < previous page  page_458  next page > Page 458  Listing 11-9  Continued. Calling Java Methods from JavaScript                 <INPUT TYPE = BUTTON Value = "Show window" onClick =        "showWindow  ">  <INPUT TYPE = BUTTON Value = "Hide window" onClick =        "hideWindow  ">               var frameWindow = null      function showWindow        {          frameWindow = new java.awt.Frame "New window!"           var text = new java.awt.TextField "Hello from       JavaScript"           frameWindow.add "Center", text           frameWindow.resize 200, 200           frameWindow.show        }      function hideWindow        {          if frameWindow != null {              frameWindow.hide            }      }        So far, weve been calling Java from JavaScript, but this transaction can go both ways. Well see how to use the eval    method now to call JavaScript from Java.  Using JavaScript from Java: The JavaAlert Example  In the next example, JavaAlert, well see how to use JavaScript from Java. In this case, well present a new button in our  page: Show time. When the user clicks this button, well call a new method in the applet, showTime  , that will in turn  call the JavaScript alert   function to display the current animation delay.  This example will show us how to call JavaScript from Java. Lets begin this example, JavaAlert, by adding a new  method, showTime  , to our applet: import java.awt.*;  import java.applet.Applet;     < previous page    page_458  next page >  If you like this book, buy it!   < previous page  page_459  next page > Page 459  public class JavaAlert extends Applet implements   Runnable{      Image images[] = new Image[4];      Image currentImage;      int loop_index = 0;      Thread thread1;      Button buttonSuspend, buttonResume;      int time = 250;           .           .           .      public boolean action  Event e, Object o       {          if e.target.equals buttonSuspend  {              suspend  ;          }          if e.target.equals buttonResume  {              resume  ;          }          return true;      }      public void suspend        {          thread1.suspend  ;           }      public void resetTime int newTime       {          time = newTime;      }      public void showTime        {        .        .        .      }      public void resume        {          thread1.resume  ;           }      public void start        {          thread1 = new Thread this ;          thread1.start  ;      }  When this method is called, we want to display a JavaScript alert box, using the JavaScript window objects alert    method. To use that method, we first need a JavaScript window object, which we get by using the Java JSObject class:    < previous page    page_459  next page >  If you like this book, buy it!   < previous page  page_460  public void showTime    {      JSObject window = JSObject.getWindow this ;          .          .          .  }  next page > Page 460  The JSObject class is a special interface class that lets us reach JavaScript methods and properties from Java.  Using the JSObject Class  The JSObject class is part of Netscapes Java package, which is included with both Internet Explorer and Netscape  Navigator. Before using this class, you have to make sure its in your Java path  set the path statement to include the  location of JSObject.class; if you have to, unzip the zipped Java class files that come with the browsers to find the  JSObject.class . In our applet, we import the JSObject class this way:  Then were free to get a JavaScript window object corresponding to the browser window in our applet:  import java.awt.*;  import java.applet.Applet;  import netscape.javascript.JSObject;     .     .     .  public void showTime    {      JSObject window = JSObject.getWindow this ;          .          .          .  }      public void showTime        {          JSObject window = JSObject.getWindow this ;          String displayString = new String "Current  spin time:"              + String.valueOf time  ;  Next, well create the string well display in the JavaScript alert box, which indicates the current animation delay:     < previous page    page_460  next page >  If you like this book, buy it!   < previous page  page_461  next page > Page 461                 .                 .                 .      }  Then we can place the alert box onscreen with the JavaScript window objects eval   method, which evaluates JavaScript  statements. We use eval   to display the alert box:  That completes the applet for this example. The Web page includes the Show time button, as shown here:     public void showTime       {         JSObject window = JSObject.getWindow this ;         String displayString = new String "Current  spin time:"             + String.valueOf time  ;         try{             window.eval "alert '" + displayString +  "' " ;         }         catch  Exception e {}     }           Using JavaScript From Java                 Using JavaScript From Java           <APPLET      CODE="JavaAlert.class" WIDTH="300" HEIGHT="300"       MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Show time" onClick = "show-        Time  ">              < previous page    page_461  next page >  If you like this book, buy it!   < previous page  page_462  next page > Page 462  When the user clicks the Show time button, we just call the applets showTime   method, which places the JavaScript  alert box on the screen:     function showTime    {      document.applets[0].showTime    }     Thats all we need. Open the JavaAlert.htm page and click the Show time button. This calls the applets showTime    method, which calls the JavaScript alert   method, displaying an alert box on the screen, as shown in Figure 11-7. Now  were calling JavaScript from Java.  The code for this applet, JavaAlert.java, is shown in Listing 11-10, and the code for the corresponding Web page,  javaAlert.htm, is shown in Listing 11-11.  We call the JavaScript alert   method from Java.  Figure 11-7   Listing 11-10  JavaAlert.java.     import java.awt.*;      import java.applet.Applet;      import netscape.javascript.JSObject;      public class JavaAlert extends Applet implements       Runnable{          Image images[] = new Image[4];          Image currentImage;          int loop_index = 0;          Thread thread1;          Button buttonSuspend, buttonResume;       < previous page    page_462  next page >  If you like this book, buy it!   next page > Page 463  < previous page  page_463  Listing 11-10  Continued.         int time = 250;          public void init            {              images[0] = getImage getCodeBase  ,       "Wheel1.gif" ;              images[1] = getImage getCodeBase  ,       "Wheel2.gif" ;              images[2] = getImage getCodeBase  ,       "Wheel3.gif" ;              images[3] = getImage getCodeBase  ,       "Wheel4.gif" ;              buttonSuspend = new Button "Suspend" ;              add buttonSuspend ;              buttonResume = new Button "Resume" ;              add buttonResume ;          }          public boolean action  Event e, Object o           {              if e.target.equals buttonSuspend  {                  suspend  ;              }              if e.target.equals buttonResume  {                  resume  ;              }              return true;          }          public void suspend            {              thread1.suspend  ;                   }          public void resetTime int newTime           {              time = newTime;          }          public void showTime            {              JSObject window = JSObject.getWindow this ;              String displayString = new String "Current       spin time:"                  + String.valueOf time  ;              try{                  window.eval "alert '" + displayString +       "' " ;              }              catch  Exception e {}          }          public void resume            {              thread1.resume  ;          }       < previous page    page_463  next page >  If you like this book, buy it!   < previous page  page_464  next page > Page 464  Listing 11-10  Continued.         public void start            {              thread1 = new Thread this ;              thread1.start  ;          }          public void stop            {              thread1.stop  ;          }          public void run            {              while true {                  currentImage = images[loop_index++];                  if loop_index > 3 loop_index = 0;                  repaint  ;                  try {Thread.sleep time ;}                  catch InterruptedException exp  { }              }          }          public void paint  Graphics g           {              if currentImage != null {                  g.drawImage currentImage, 100, 100, this ;              }          }      }  Listing 11-11  JavaAlert.htm.          Using JavaScript From Java                 Using JavaScript From Java           <APPLET      CODE="JavaAlert.class" WIDTH="300" HEIGHT="300"       MAYSCRIPT>              <INPUT TYPE = BUTTON VALUE = "Show time" onClick = "show-        Time  ">      < previous page    page_464  next page >  If you like this book, buy it!   < previous page  page_465  next page > Page 465  Listing 11-11  Continued.             function showTime    {      document.applets[0].showTime    }        Although we can reach JavaScript with the eval   method, there are better ways, as well see in the following section  when we use the JSObject getmember   and call   methods.  Calling JavaScript to Rewrite a Window from Java: The Opener Example  In our next example, well see how to use JavaScript from Java to rewrite an entire page. Here, well modify the Suspend  button in the applet to suspend not just the applet, but the whole page, by rewriting that page entirely. When the user  clicks the Suspend the whole page! button, well rewrite the page so that it displays only a single header: Page  suspended! In this way, well see how to rewrite a pages HTML from Java, using JavaScript.  To write our code, well modify the applets suspend   method, calling that method when the user clicks the Suspend the  whole page! button:  import java.awt.*;  import java.applet.Applet;  import netscape.javascript.JSObject;  public class Opener extends Applet implements Runnable{      Image images[] = new Image[4];      Image currentImage;      int loop_index = 0;      Thread thread1;      Button buttonSuspend;      int time = 250;           .           .           .     < previous page    page_465  next page >  If you like this book, buy it!   < previous page  page_466  next page > Page 466      public boolean action  Event e, Object o       {          if e.target.equals buttonSuspend  {              suspend  ;          }          return true;      }      public void suspend        {         .         .         .      }  public void suspend    {      JSObject window = JSObject.getWindow this ;          .          .          .  }  In the suspend   method, we will rewrite the Web page from scratch. Begin by getting a JSObject corresponding to the  browser window:  To rewrite the window, well need access to the document object, which we get with the JSObject getMember   method.  Using the JSObject getMember   Method  We use the JSObject getMember   method to get a property or member object from a JSObject. In this case, we get the  document object this way:     public void suspend       {         JSObject window = JSObject.getWindow this ;         JSObject document =  JSObject  window.getMem-  ber "document" ;             .             .             .     }  Next, we will call the documents open   method to open the document for writing. We do that with the JSObject call    method.    < previous page    page_466  next page >  If you like this book, buy it!   < previous page  page_467  next page > Page 467  Using the JSObject Call   Method  You use the JSObject call   method to call a JSObjects methods. Here, we call the document objects open   method,  passing it no variables:     public void suspend       {         JSObject window = JSObject.getWindow this ;         JSObject document =  JSObject  window.getMem-  ber "document" ;             document.call "open", null ;             .             .             .     }  To rewrite the page, we will pass the new HTML for this page to the documents write   method. To do so, we have to  store it  like any other arguments we pass with the call   method  in an array of Java objects . Because well pass only  one argument to the write   methodthe new HTML for the pagewe set up an array with only one element, the HTML  well use to indicate the page is suspended:    public void suspend       {         JSObject window = JSObject.getWindow this ;         JSObject document =  JSObject  window.getMem-  ber "document" ;             document.call "open", null ;         Object[] arguments = { "   Page             suspended!   " };             .             .             .     }  Next, we pass this array to the documents write   method, and then we close the document with its close   method:     public void suspend       {         JSObject window = JSObject.getWindow this ;         JSObject document =  JSObject  window.getMem-  ber "document" ;             document.call "open", null ;         Object[] arguments = { "   Page     < previous page    page_467  next page >  If you like this book, buy it!   < previous page  page_468                 suspended!   " };             document.call "write", arguments ;             document.call "close", null ;         }  next page > Page 468  That completes the applet; because all the action is in the applet this time, the Web page just displays that applet:           Rewriting a Web page from Java                 Rewriting a Web page from Java           <APPLET      CODE="Opener.class" WIDTH="300" HEIGHT="300" MAYSCRIPT>       <-              Now open this page, as shown in Figure 11-8, and click the Suspend the whole page! button.  Figure 11-8   We will rewrite this window from Java.      < previous page    page_468  next page >  If you like this book, buy it!   < previous page  page_469  next page > Page 469  When you click this button, the applet uses JavaScript calls to rewrite the pages HTML, as shown in Figure 11-9. Now  we can rewrite whole Web pages from Java using JavaScript.  The code for this applet, Opener.java, is shown in Listing 11-12, and the corresponding Web page, Opener.htm, is  shown in Listing 11-13.  We rewrote this page from Java using JavaScript.  Figure 11-9   Listing 11-12  Opener.java.     import java.awt.*;      import java.applet.Applet;      import netscape.javascript.JSObject;      public class Opener extends Applet implements Runnable{          Image images[] = new Image[4];          Image currentImage;          int loop_index = 0;          Thread thread1;          Button buttonSuspend;          int time = 250;          public void init            {              images[0] = getImage getCodeBase  ,       "Wheel1.gif" ;              images[1] = getImage getCodeBase  ,       "Wheel2.gif" ;              images[2] = getImage getCodeBase  ,       "Wheel3.gif" ;              images[3] = getImage getCodeBase  ,       "Wheel4.gif" ;              buttonSuspend = new Button "Suspend the whole       < previous page    page_469  next page >  If you like this book, buy it!   < previous page  page_470  next page > Page 470  Listing 11-12  Continued.     page!" ;              add buttonSuspend ;          }          public boolean action  Event e, Object o           {              if e.target.equals buttonSuspend  {                  suspend  ;              }              return true;          }          public void suspend            {              JSObject window = JSObject.getWindow this ;              JSObject document =  JSObject  window.getMem-      ber "document" ;                       document.call "open", null ;              Object[] arguments = { "   Page                  suspended!   " };              document.call "write", arguments ;              document.call "close", null ;          }          public void start            {              thread1 = new Thread this ;              thread1.start  ;          }          public void stop            {              thread1.stop  ;          }          public void run            {              while true {                  currentImage = images[loop_index++];                  if loop_index > 3 loop_index = 0;                  repaint  ;                  try {Thread.sleep time ;}                  catch InterruptedException exp  { }              }          }          public void paint  Graphics g           {              if currentImage != null {                  g.drawImage currentImage, 100, 100, this ;              }          }      }     < previous page    page_470  If you like this book, buy it!  next page >   < previous page  page_471  next page > Page 471  Listing 11-13  Opener.htm.          Rewriting a Web page from Java                 Rewriting a Web page from Java           <APPLET      CODE="Opener.class" WIDTH="300" HEIGHT="300" MAYSCRIPT>               Conclusion  That example finishes our chapter on connecting JavaScript and Java. Weve covered a lot of material in this chapter:  how to call a Java method from JavaScript, how to pass numeric arguments to Java methods, how to pass strings to Java  methods, how to read return values from a Java method in JavaScript, how to use JavaScript from Java, and even how to  rewrite a Web page from Java using JavaScript statements. Weve learned some truly powerful techniques.  In the next chapter, well move on to the final topic of this bookhow to work with JavaScript stylesheets.    < previous page    page_471  If you like this book, buy it!  next page >   < previous page  page_473  next page > Page 473  Chapter 12  JavaScript and Cascading Style Sheets  In this chapter, well explore JavaScript stylesheets. Stylesheets give you a browser-independent way of formatting text  the way you want it. Using stylesheets, you can specify texts size, color, type  such as italic or bold , and more. Because  stylesheets are supposed to be browser-independent, they could potentially alleviate the wide variation existing between  browsers.  Unfortunately, theres still a variation. Internet Explorer doesnt support JavaScript stylesheets per se. Microsoft has  decided in favor of Cascading Style Sheets  CSS , not JavaScript stylesheets. However, Netscape Navigator 4.0 can  support Cascading Style Sheets, too. Because both browsers agree on this point, well cover Cascading Style Sheets, as  well as JavaScript stylesheets, later in this chapter.    < previous page    page_473  next page >  If you like this book, buy it!   < previous page  page_474  next page > Page 474  Well begin by seeing how to use the STYLE attribute in HTML tags to set an elements style. Next, well learn how to create a new style  for HTML tags by using stylesheets. Then well see how to create style classes, and how to apply styles to HTML elements by ID, how  style class inheritance works, how to set styles by using JavaScript style functions, how to set styles dynamically with the click of a  button, and more. Well gain a lot of formatting power in this chapter.  Lets start with an overview of JavaScript stylesheets; later in the chapter, well cover Cascading Style Sheets, too.  JavaScript Stylesheets  You create a JavaScript stylesheet with the   tag in a Web page, as shown here:    declarations    Each of the declarations is a style rule that looks like this example:  tags.H1.fontSize = "48"  This style rule sets the font size of the all H1 tags in the document to 48 points by using the fontSize property. The JavaScript stylesheet  properties like fontSize, fontStyle, color, and so on are listed in Table 12-1.  Table 12-1 The JavaScript stylesheet properties. backgroundColor align borderLeftWidth borderColor borderTopWidth borderWidths   fontFamily display height fontWeight marginBottom  marginLeft paddingBottom marginTop paddings   paddingTop verticalAlign textTransform       < previous page    backgroundImage borderRightWidth clear fontSize lineHeight marginRight paddingLeft textAlign whiteSpace  page_474  borderBottomWidth borderStyle color fontStyle listStyleType margins   paddingRight textDecoration width  If you like this book, buy it!  next page >   < previous page  page_475  next page > Page 475  TIP: You can specify an external file that holds your stylesheet in the   tag. Doing so is useful if  you want to work with different browsersor different versions of the same browserand there are variations  in style declarations between the browsers youre targeting. You can test the browser type and version in  code, and then write the HTML to the document that will read in the appropriate stylesheet file for that  browser.     JavaScript Stylesheets and Internet Explorer  Internet Explorer doesnt support JavaScript stylesheets, so you wouldnt expect to find style properties with names like fontSize and color  in Internet Explorer Web pages. However, take a look at this code from Chapter 5, Keyboard and Mouse Handling, where we set the style  of Internet Explorer hyperlinks when the mouse moved over them:         Emphasizing hyperlinks                  Place the mouse over a link to emphasize it     <A HREF="http:  www.server.com'' name= link1 onMouseOver =       ''link1Over  "       onMouseOut = "link1Out  ">Here is link 1         <A HREF="http:  www.server.com" name= link2 onMouseOver =       "link2Over  "       onMouseOut = "link2Out  ">Here is link 2           .          .          .                  function link1Over        {          link1.style.color="red"          link1.style.fontSize=36      }     < previous page    page_475  If you like this book, buy it!  next page >   < previous page  page_476  next page > Page 476      function link1Out        {          link1.style.color="black"          link1.style.fontSize=16      }      function link2Over        {          link2.style.color="red"          link2.style.fontSize=36      }      function link2Out        {          link2.style.color="black"          link2.style.fontSize=16      }          .          .          .        As you can see, we refer to properties like fontSize and color here, which certainly look like JavaScript stylesheet  properties. Whats going on?  In fact, these properties actually represent CSS style properties, which are hyphenated, like font-family and font-size;  they are not JavaScript style properties like fontFamily and fontSize  although, confusingly, they have the same name . The problem is that in some scripting languages, hyphens arent valid in names; therefore, Microsoft was forced to adopt  the JavaScript style property names to refer to those properties in code. These properties are properties of Internet  Explorers style object, which is a member object of every tag. That objects properties are listed in Table 12-2.  Use the entries in Table 2-2 when you refer to CSS style properties in code in Internet Explorer; in standard Internet  Explorer stylesheets, however, you stick to the standard CSS names, which well see later in this chapter. So even though  it looks as though you can use JavaScript style properties in Internet Explorer, you cant actually do so.  The upshot is that the JavaScript part of this chapter is targeted at Netscape Navigator only, and well dig into that now,  starting with an example that shows how to set styles by using the STYLE attribute in HTML tags.    < previous page    page_476  next page >  If you like this book, buy it!   < previous page  page_477  next page > Page 477  Table 12-2 Internet Explorers style objects properties. backgroundAttachment background backgroundPositionX backgroundPosition border borderBottom borderColor borderBottomWidth borderLeftWidth borderLeftStyle borderRightStyle borderRightWidth borderTopStyle borderTopColor clear clip display cursor fontSize fontFamily fontWeight height listStyle lineHeight margin listStyleType marginRight marginTop paddingRight paddingLeft pageBreakBefore pixelHeight posHeight pixelWidth posWidth posTop textDecoration textDecorationBlink textDecorationUnderline textDecorationOverline top verticalAlign zIndex       < previous page    backgroundColor background-PositionY borderBottom-Color borderLeft borderRight borderStyle borderTopWidth color filter fontStyle left listStyleImage marginBottom overflow paddingTop pixelLeft position styleFloat textDecoration-Line Through textIndent visibility  background-Image background-Repeat border-BottomStyle borderLeft-Color borderRight-Color borderTop borderWidth cssText font fontVariant letterSpacing listStyle-Position marginLeft padding-Bottom pageBreak-After pixelTop posLeft textAlign text-Decoration-None text-Transform width  page_477  next page >  If you like this book, buy it!   < previous page  page_478  next page > Page 478  Using the STYLE Attribute: The StyleAttribute Example  In our first JavaScript style example, well make the text in a header blue by setting its color style property to blue. In a  new Web page, StyleAttribute.htm, well set the style of one specific header to blue:           Using the STYLE Attribute                 This header is blue              Note the syntax here. We define a style rule for the color style property, followed by the setting we want for that  property: blue. Thats all it takesnow weve given this header blue text by using a stylesheet.  Open this page, StyleAttribute.htm, in Netscape Navigator, as shown in Figure 12-1; the header is blue  although thats  not apparent in this book! . Now weve set a headers style by using the   tags STYLE attribute, so our first style  example is a success.  Coloring a header blue with the STYLE attribute.  Figure 12-1      < previous page    page_478  next page >  If you like this book, buy it!   < previous page  page_479  next page > Page 479  If we wanted to set the headers font size as well as its color, we could use the JavaScript stylesheet property fontSize  note that you  separate properties with a semicolon :  On the other hand, Internet Explorer uses CSS style properties with the STYLE attribute. To set the headers size in Internet Explorer, you  would use the CSS style property font-size instead of fontSize:         This header is blue            This header is blue     NOTE: A stylesheet created with the STYLE attribute is called an inline stylesheet.  TIP: Netscape discourages the use of inline stylesheets, preferring to collect all the style information for a  page in one location, making it easier to maintain or modify.  Thats it for using the STYLE attribute; the code for this page, StyleAttribute.htm, is shown in Listing 12-1.        Listing 12-1  StyleAttribute.htm.          Using the STYLE Attribute                 This header is blue                < previous page    page_479  If you like this book, buy it!  next page >   < previous page  page_480  next page > Page 480  Now well move on, seeing how to work with the tags in a Web page, changing their styles as we like. In this way, we  can customize our Web pages with JavaScript styles.  Styling Tags: The StyleH Example  In the next example, well see how to modify individual HTML tags with a JavaScript stylesheet. In a new page, StyleH. htm, well modify   tags in a page to be 48 point and underlined, and   tags to be 24 point. First, set up the  JavaScript stylesheet well use:  Then we reset the   elements font size and font type and underline the text in those elements; note that we  underline text with the textDecoration style property:         Customizing header tags           .    .    .            Customizing header tags          tags.H1.fontSize = "48"   tags.H1.fontFamily = "roman"   tags.H1.textDecoration = "underline"           .           .           .     We adjust the   tag as well:         Customizing header tags            < previous page    page_480  next page >  If you like this book, buy it!   next page > Page 481  < previous page  page_481   tags.H1.fontSize = "48"   tags.H1.fontFamily = "roman"   tags.H1.textDecoration = "underline"   tags.H2.fontSize = "24"   tags.H2.fontFamily = "arial"     Now when we use those tags, the new styles will automatically be applied:         Customizing header tags          tags.H1.fontSize = "48"   tags.H1.fontFamily = "roman"   tags.H1.textDecoration = "underline"   tags.H2.fontSize = "24"    tags.H2.fontFamily = "arial"            We've applied a stylesheet to this header       And to this one too.            Open this page in Netscape Navigator, as shown in Figure 12-2. As you can see, weve set the styles for the   and    headers.     < previous page  Figure 12-2   Setting header tag styles  page_481  next page >      If you like this book, buy it!   next page > Page 482  < previous page  page_482  Listing 12-2  StyleH.htm.        Customizing header tags          tags.H1.fontSize = "48"   tags.H1.fontFamily = "roman"   tags.H1.textDecoration = "underline"   tags.H2.fontSize = "24"    tags.H2.fontFamily = "arial"            We've applied a stylesheet to this header       And to this one too.           The code for this page, StyleH.htm, is shown in Listing 12-2.  Besides working with tags, we can also define style classes.  Style Classes: The StyleUnderline Example  In our next example, well see how to use JavaScript style classes to underline text. We begin this new page,  StyleUnderline.htm, by declaring a new style class, underline, and setting its textDecoration property to underline:         Using style classes             classes.underline.all.textDecoration = "underline"              .     .     .     < previous page    page_482  next page >  If you like this book, buy it!   < previous page  page_483  next page > Page 483  Now that weve defined this new class, were free to use it in HTML elements, as we do here, specifying this    headers class with its CLASS attribute:         Using style classes             classes.underline.all.textDecoration = "underline"                    Using style classes to underline this text . . .               This gives the   element the underline class, which means the text in that element is underlined, as shown in Figure  12-3. In this way, we can set up our own JavaScript style classes and then apply them to the elements in a Web page.  The code for this example, StyleUnderline.htm, is shown in Listing 123.  Besides setting styles by HTML tag and by class, we can set JavaScript styles according to the ID of HTML elements.  We underline text by using JavaScript style classes.  Figure 12-3      < previous page    page_483  next page >  If you like this book, buy it!   < previous page  page_484  next page > Page 484  Listing 12-3  StyleUnderline.htm.        Using style classes             classes.underline.all.textDecoration = "underline"                    Using style classes to underline this text . . .               Setting Styles by ID: The StyleMultiple Example  In our next example, well display three lines of   headers. Well redefine the   tag to display blue text, so the  first header will be blue. The next line will use a class that displays red text; specifically, using a class like that  overrides our   tag redefinition, so the second line will appear red.  Well give the last   element that same red class, and well add an ID value, setting up the page so all elements with  that ID will appear in 48-point type. This combination of   and ID style means that the last line will appear in red,  48-point type.  Lets make this clearer in code. Start this example, StyleMultiple.htm, by setting all elements with the ID H1Tag to 48  point:           Using multiple styles . . .            ids.H1Tag.fontSize = "48"          .          .          .     < previous page    page_484  next page >  If you like this book, buy it!   < previous page  page_485  next page > Page 485  Next, we set up a class named red that colors its text red, and give the   tags in the page blue text. Note that we  declare our red class as classes.red.H1.color so that it will apply only to   elements  if you want to apply this class  to all HTML elements, you would declare it as classes.red.all.color :           Using multiple styles . . .            ids.H1Tag.fontSize = 48"      classes.red.H1.color = "red"      document.tags.H1.color = "blue"         .      .      .  In this page, then, a simple   tag will appear blue:           Using multiple styles . . .            ids.H1Tag.fontSize = "48"      classes.red.H1.color = "red"      document.tags.H1.color = "blue"               This text is blue . . .       .    .    .              < previous page    If we specifically give an   element the red class, however, that overrides the blue default setting, so this line  appears red:  page_485  next page >  If you like this book, buy it!   < previous page  page_486  next page > Page 486  Finally, we give our last   tag the red class and give it the ID H1Tag, which means that header will appear both red  and in 48-point type:  Using multiple styles . . .            ids.H1Tag.fontSize = "48"      classes.red.H1.color = "red"      document.tags.H1.color = "blue"               This text is blue . . .        This text is red . . .       .    .    .           Using multiple styles . . .             ids.H1Tag.fontSize = "48"      classes.red.H1.color = "red"      document.tags.H1.color = "blue"               This text is blue . . .        This text is red            This text is red and 48 point . . .       .    .    .     < previous page    page_486  next page >  If you like this book, buy it!   < previous page  page_487  next page > Page 487  Now open this page in Netscape Navigator, as shown in Figure 12-4. The page is a success, so now we can set styles by HTML tag ID.  TIP: One reason style classes are popular is that you can define multiple styles for the same class. For  example, heres how to define a class named bigYellow, which colors the text in   elements yellow and  enlarges the text in those elements to 36 point:                     classes.bigYellow.H1.color = "yellow"                classes.bigYellow.H1.fontSize = "36"               The code for this page, StyleMultiple.htm, is shown in Listing 12-4.  Classes are powerful style structures; for example, elements inside other elements inherit the outer elements styles, as well see in the  following section.     < previous page    Figure 12-4   We set styles by HTML IDs.  page_487  If you like this book, buy it!  next page >   < previous page  page_488  next page > Page 488  Listing 12-4  StyleMultiple.htm.          Using multiple styles . . .            ids.H1Tag.fontSize = "48"      classes.red.H1.color = "red"      document.tags.H1.color = "blue"               This text is blue . . .        This text is red . . .         This text is red and 48 point . . .           Style Inheritance: The StyleDiv Example  If an element contains another element, that inner element can inherit the outer elements styles. For example, if we have  a   element that weve styled to make it appear indented on the page, any other   elements it contains will  also appear indented.  Lets make this clearer in an example, StyleDiv.htm. Start by defining a new class, class1, with a font size of 36 points,  and an indentationwhich we set with the marginLeft propertyof 10 percent of the Web page:         Style class inheritance           classes.class1.all.fontSize = 36    classes.class1.all.marginLeft = "10%"        < previous page    page_488  next page >  If you like this book, buy it!   < previous page  page_489  next page > Page 489  Next, we use that class in a   element:         Style class inheritance           classes.class1.all.fontSize = 36    classes.class1.all.marginLeft = "10%"            Class inheritance . . .         This is the  outer  element.          .    .    .  This   element itself contains another   element, as shown here:         Style class inheritance           classes.class1.all.fontSize = 36    classes.class1.all.marginLeft = "10%"            Class inheritance . . .         This is the  outer  element.           This is text in the  inner  element  which has inher-        ited the outer   element's styles .           < previous page    page_489  next page >  If you like this book, buy it!   < previous page  page_490  next page > Page 490  Figure 12-5   Using style class inheritance.  The inner   will inherit the outer  s class, class1, as shown in Figure 12-5, where the text in both  s is  enlarged and indented to 10 percent. In this way, you can build nested style elements in a Web page, passing style  classes from element to element.  The code for this page, StyleDiv.htm, is shown in Listing 12-5.  Its also possible to define JavaScript styles with JavaScript functions, as described in the following section.  Style Functions: The StyleFunction Example  You can set styles with JavaScript functions when a page is first loaded, giving us a powerful technique. For example,  we can use a JavaScript function to set the style of text depending on the time of day. In this example, we will display  the following text in 48 point, unless the time of day is morning, in which case well make it 24 point text  so as not to  wake the user up too brutally .  Start this page, StyleFunction.htm, with the JavaScript function that will set the   tags style, depending on the time  of day. Well name this function checkTime  ; note that we place this function directly in the   element:           < previous page    page_490  next page >  If you like this book, buy it!   next page > Page 491  < previous page  page_491  Listing 12-5  StyleDiv.htm.        Style class inheritance           classes.class1.all.fontSize = 36    classes.class1.all.marginLeft = "10%"            Class inheritance . . .         This is the  outer  element.           This is text in the  inner  element  which has        inherited the outer   element's styles .                     function checkTime        {        .        .        .      }  In this function, we use the date object to check the time of day. If its morning, we set the   elements font size to 24:               function checkTime        {          var currentDate = new Date            var currentHour = currentDate.getHours                 if  currentHour > 6 && currentHour < 12   {               tags.H1.fontSize = "24"          }      }     < previous page    page_491  next page >  If you like this book, buy it!   < previous page  page_492  next page > Page 492  If its not morning, we set the font size to 48:               function checkTime        {          var currentDate = new Date            var currentHour = currentDate.getHours            if  currentHour > 6 && currentHour < 12   {               tags.H1.fontSize = "24"          }          else{              tags.H1.fontSize = "48"          }      }  Now we apply that function to the H1 tag in the   element:               function checkTime        {          var currentDate = new Date            var currentHour = currentDate.getHours            if  currentHour > 6 && currentHour < 12   {               tags.H1.fontSize = "24"          }          else{              tags.H1.fontSize = "48"          }      }      tags.H1.apply = checkTime          Now the   tag will be 24 points in the morning, and 48 points otherwise. We use that tag in the page as shown here:                This is styled to 48 point text, 24 point text in the       morning . . .                 < previous page    page_492  next page >  If you like this book, buy it!   < previous page  page_493  next page > Page 493  We apply styles that differ according to the time of day.  Figure 12-6   Open this page in Netscape Navigator, as shown in Figure 12-6. The text in that page varies according to the time of  day, as weve programmed it to. Now we can use JavaScript functions to set JavaScript styles.  The code for this page, StyleFunction.htm, is shown in Listing 12-6.  Weve gotten a good look at JavaScript stylesheets; now well turn to Cascading Style Sheets  CSS . CSS is supported by  both Netscape Navigator and Internet Explorer.  Cascading Style Sheets  Cascading Style Sheets works much as JavaScript stylesheets do, but you specify a type of text css in the    element instead of text javascript:    declarations    As mentioned, CSS is supported by both Netscape Navigator and Internet Explorer; the CSS properties are listed in  Table 12-3.  Internet Explorer expands the standard CSS property set, as shown in Table 12-4.  Lets start creating some CSS examples.    < previous page    page_493  next page >  If you like this book, buy it!   < previous page  page_494  next page > Page 494  Listing 12-6  StyleFunction.htm.                  function checkTime            {              var currentDate = new Date                var currentHour = currentDate.getHours                if  currentHour > 6 && currentHour < 12   {                   tags.H1.fontSize = "24"              }              else{                  tags.H1.fontSize = "48"              }          }          tags.H1.apply = checkTime                            This is styled to 48 point text, 24 point text in the              morning . . .              CSS Tag Styling: The StyleP Example  In our first CSS example, well see that CSS syntax is different from JavaScript stylesheet syntax. Here, we will change  the style of   tags to 48 point.  In this first CSS example, StyleP.htm, we set the style of the   tag to 48 points by using the CSS property font-size:         Specific tag styling example          P {font-size: 48pt}        < previous page    page_494  next page >  If you like this book, buy it!   < previous page  page_495  next page > Page 495  Table 12-3 The CSS style properties. background background-position border-bottom-width border-right border-top-width display font-size height list-style-image margin-bottom padding padding-top text-transform word-spacing  background-attachment background-repeat border-color border-right-width border-width float font-style letter-spacing list-style-position margin-left padding-bottom text-align vertical-align          tags.P.fontSize = "48"     background-color border border-left border-style clear font font-variant line-height list-style-type margin-right padding-left text-decoration white-space  background-image border-bottom border-left-width border-top color font-family font-weight list-style margin margin-top padding-right text-indent width  Note that this CSS rule is different from the corresponding JavaScript rule, which would look like this:  Were free to use the restyled   elements in our Web page now, and the text in those elements will appear in 48-point font:         Specific tag styling example          P {font-size: 48pt}              < previous page    page_495  next page >  If you like this book, buy it!   < previous page  page_496  next page > Page 496  Table 12-4 Internet Explorers CSS style properties. !important background  background-position  border-bottom border-color  border-left-width border-right-width border-top-style clip float  font-style hover link list-style-type margin-right padding-bottom page-break-after text-align top width  @font-face background-attachment background-repeat border-bottom-color border-left border-right border-style border-top-width color  font font-variant left list-style margin margin-top padding-left page-break-before text-decoration vertical-align z-index     @import background-color  blendTrans   border-bottom-style border-left-color border-right-color border-top border-width cursor font-family font-weight letter-spacing list-style-image margin-bottom overflow padding-right position text-indent  visibility  active background-image border border-bottom-width border-left-style border-right-style border-top-color clear display font-size height line-height list-style-position margin-left padding padding-top revealTrans   text-transform visited     The text in this paragraph is styled to 48 point.        .   .   .     < previous page    page_496  next page >  If you like this book, buy it!   < previous page  page_497  next page > Page 497  Using CSS styles, we make a paragraph 48-point text.  Figure 12-7   Open this page in either Internet Explorer or Netscape Navigator, as shown in Figure 12-7. As you can see, weve redefined the   tag by  using CSS styles.  The code for this page, StyleP.htm is shown in Listing 12-7.  TIP: The way you specify what elementHTML tag, class, or IDyoure defining a style for is by using a style  selector. Cascading Style Sheets provides a new selector: the contextual selector. For example, the  contextual selector P B in the stylesheet rule P B {color:green} colors all text green in   elements that  are inside   elements.     We can also define classes in CSS, just as we can in JavaScript stylesheets.  CSS Style Classes: The StyleClass Example  In this next example, well define a CSS class, underlinedText, that when applied to a text element, underlines the text in that element. In  CSS, you declare a class by prefacing its name with a dot, so heres how we define the underlinedText class in a new example, StyleClass. htm:    < previous page    page_497  next page >  If you like this book, buy it!   next page > Page 498  < previous page  page_498  Listing 12-7  StyleP.htm.        Specific tag styling example          P {font-size: 48pt}              The text in this paragraph is styled to 48 point.                     Using CSS classes           .underlinedText {text-decoration: underline}          .    .    .         Using CSS classes           .underlinedText {text-decoration: underline}                 This text is underlined.          .    .    .  In this case, we underline text by setting the classs text-decoration property to underline. We can apply that class as we  did earlier with our JavaScript stylesheet classes:     < previous page    page_498  next page >   If you like this book, buy it!   < previous page  page_499  next page > Page 499  Figure 12-8   We use CSS classes to underline text.  Open this page now, as shown in Figure 12-8. As you can see, our underlinedText class is at workweve underlined the text by using that  class.  The code for this page, StyleClass.htm, is shown in Listing 12-8.  Just as with JavaScript classes, you can inherit styles from CSS class to class, as described in the following section.  CSS Inheritance: The StyleInherit Example  In this next example, StyleInherit.htm, well see how to enclose a   element inside a   element, just as we did earlier with  JavaScript stylesheets. And just as before, the inner   element will inherit the outer   elements styles.  NOTE: Netscape Navigator doesnt yet allow you to apply CSS styles to   elements, so this example is aimed  at Internet Explorer.     As we did in our previous JavaScript stylesheet inheritance example, well define a class named class1 that sets the font size to 36 points  and indents elements 10 percent. However, this time we use the font-size and margin-left CSS style properties instead of the JavaScript  style properties fontSize and marginLeft:    < previous page    page_499  next page >  If you like this book, buy it!   next page > Page 500  < previous page  page_500  Listing 12-8  StyleClass.htm.        Using CSS classes           .underlinedText {text-decoration: underline}                 This text is underlined.                        CSS class inheritance           .class1 {font-size:36; margin-left:10%}        Now we apply this class to a   element that contains another  :         CSS class inheritance           .class1 {font-size:36; margin-left:10%}            CSS Class inheritance . . .         This is the  outer  element.           This is text in the  inner  element  which has inher-        ited the outer   element's styles      < previous page    page_500  next page >   If you like this book, buy it!   < previous page  page_501  next page > Page 501          .    .    .  The result is the same as with our JavaScript style class inheritance example, as shown in Figure 12-9; the inner    inherits the outer  s classes. Now were supporting class inheritance with CSS.  The code for this page, StyleInherit.htm, is shown in Listing 12-9.  Internet Explorer lets us set style properties on the fly, and well take a look at that now as our last example in the  chapter.  Changing Styles: The StyleDynamic Example  We can apply CSS classes to HTML elements dynamically in Internet Explorer; for example, our new Web page will  have some text in a   element and two buttons with the captions Turn text black and Turn text red. Well set up  two CSS classes, redText and blackText, in this new example, StyleDynamic.htm. When the user clicks the Turn text  red button, well apply the redText class to the  , turning the text red.     < previous page    Figure 12-9   Using CSS class inheritance.  page_501  If you like this book, buy it!  next page >   < previous page  page_502  next page > Page 502  Listing 12-9  StyleInherit.htm.        CSS class inheritance           .class1 {font-size:36; margin-left:10%}            CSS Class inheritance . . .         This is the  outer  element.           This is text in the  inner  element  which has inher-        ited the outer   element's styles              When he or she clicks the Turn text black button, well apply the blackText class, turning the text black.  Start this new page with the   element that encloses the text well work on, as well as the two buttons well use in  our Web page:     Coloring text with dynamic CSS classes               Coloring text with dynamic CSS classes           <INPUT TYPE = BUTTON Value = "Turn text black" onClick =        "TurnBlack  ">   <INPUT TYPE = BUTTON Value = "Turn text red" onClick =        "TurnRed  ">               < previous page    page_502  next page >  If you like this book, buy it!   < previous page  page_503  next page > Page 503  Next, we declare the two CSS classes well need, redText and blackText, in the   element:      .blackText {color:Black}   .redText {color:Red}     Finally, in the   element, we apply those classes to the   element when the user clicks the matching  button:         function TurnBlack div1       {          document.all.Div1.className = "blackText"      }      function TurnRed div1       {          document.all.Div1.className = "redText"      }     Internet Explorer will apply the new style to the   in response to the users button clicks.  Open this page in Internet Explorer, as shown in Figure 12-10. When the user clicks the red text button, we turn the text  red; when he or she clicks the black text button, we turn the text black. In this way, we can apply CSS styles to a Web  page element on the fly.  The code for this page, StyleDynamic.htm, is shown in Listing 12-10.  We change a   elements styles on the fly.  Figure 12-10      < previous page  page_503  next page >      If you like this book, buy it!   next page > Page 504  < previous page  page_504  Listing 12-10  StyleDynamic.htm.     Coloring text with dynamic CSS classes               Coloring text with dynamic CSS classes           <INPUT TYPE = BUTTON Value = "Turn text black" onClick =        "TurnBlack  ">   <INPUT TYPE = BUTTON Value = "Turn text red" onClick =        "TurnRed  ">                .blackText {color:Black}   .redText {color:Red}            function TurnBlack div1       {          document.all.Div1.className = "blackText"      }      function TurnRed div1       {          document.all.Div1.className = "redText"      }           TIP: You can apply styles to individual wordsor even letters in wordsin a Web page with the   tag.     Conclusion  That concludes our look at JavaScript and CSS style sheetsand that concludes this book. Weve come far here, from the basics of  JavaScript all the way up to connecting Java to JavaScript, using cookies, rewriting Web pages on the fly, supporting dragging and  dropping, creating dialog boxes, using animation, and much more.  Weve covered a great deal and been able to add a lot of power to our Web pages. All that remains now is to put JavaScript to work in  your Web pages.    < previous page    page_504  next page >  If you like this book, buy it!   < previous page  page_505  next page > Page 505  This appendix lists the JavaScript and JScript keywords by browser.  Netscape Navigator  Microsoft Internet Explorer  Appendix A  Keyword $1 . . . $9 Properties  *..*   multiline comment      single-line comment  abs acos action Add AddFolders Addition Operator   +   alert alinkColor anchor Anchor object anchors appCodeName Applet applets appName appVersion Area arguments array arguments property Array       < previous page    X X X X X  X X X X X X X X X X X X X X X  X X X X X X X X X X X X X X X X X X X X X X X  page_505  If you like this book, buy it!  next page >   < previous page  page_506  Netscape Navigator  Microsoft Internet Explorer  next page > Page 506  Keyword asin asin Assignment Operator  =  atan atan2 atEnd AtEndOfLine AtEndOfLine Property AtEndOfStream Property Attributes Property AvailableSpace Property back bgColor big Bitwise AND Operator  &  Bitwise Left Shift Operator  &lt;&lt;  Bitwise NOT Operator  ~  Bitwise OR Operator    Bitwise Right Shift Operator  &gt;&gt;  Bitwise XOR Operator  ^  blink blur bold Boolean border break break       < previous page    X X X X X  X X X X X X X X X X X X X X X X  X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_506  If you like this book, buy it!  next page >   < previous page  page_507  Netscape Navigator  Microsoft Internet Explorer  next page > Page 507  Keyword BuildPath Button caller ceil charAt charCodeAt Checkbox checked clearTimeout click close  document object  close  window object  closed Column Property Comma Operator  ,  CompareMode Property Comparison Operators compile complete concat  Array  concat  String  Conditional  trinary  Operator  ?:  Conditional Compilation Conditional Compilation Variables confirm constructor continue cookie       < previous page    X X X X X  X X X X X X X  X  X  X  X X  X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_507  If you like this book, buy it!  next page >   < previous page  page_508  Netscape Navigator  Microsoft Internet Explorer  next page > Page 508  Keyword Copy CopyFile CopyFolder cos Count Property CreateFolder CreateTextFile current Data Type Conversion Date DateCreated Property DateLastAccessed Property DateLastModified Property Decrement Operator    defaultChecked defaultSelected defaultStatus defaultValue delete Operator DeleteFile DeleteFolder description Dictionary Object dimensions Division Operator     do . . . while document domain       < previous page    X  X  X  X X X X X  X  X X X X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_508  If you like this book, buy it!  next page >   < previous page  page_509  Netscape Navigator  Microsoft Internet Explorer  next page > Page 509  Keyword Drive Object Drive Property DriveExists DriveLetter Property Drives Collection Drives Property DriveType Property E elements array elements property embeds array enabledPlugin encoding Enumerator Object Equality Operator  = =  escape eval exec Exists exp fgColor File Object FileExists filename Files Collection Files Property FileSystem Property FileSystemObject Object       < previous page    X X X X X X X X X X  X X  X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_509  If you like this book, buy it!  next page >   < previous page  page_510  Netscape Navigator  Microsoft Internet Explorer  next page > Page 510  X X X X  X X X X X X X X X X  X  X X  Keyword FileUpload fixed floor focus Folder Object FolderExists Folders Collection fontcolor fontsize for for . . . in Form object form property forms forward Frame frames FreeSpace Property fromCharCode Function function GetAbsolutePathName GetBaseName getDate getDay GetDrive GetDriveName GetExtensionName       < previous page    X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_510  If you like this book, buy it!  next page >   < previous page  page_511  Netscape Navigator  Microsoft Internet Explorer  next page > Page 511  Keyword GetFile GetFileName GetFolder getFullYear getHours getItem getMilliseconds getMinutes getMonth GetParentFolderName getSeconds GetSpecialFolder GetTempName getTime getTimezoneOffset getUTCDate getUTCDay getUTCFullYear getUTCHours getUTCMilliseconds getUTCMinutes getUTCMonth getUTCSeconds getVarDate getYear Global Object global Property go       < previous page    X  X X X  X  X X  X  X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_511  If you like this book, buy it!  next page >   < previous page  page_512  Netscape Navigator  Microsoft Internet Explorer  next page > Page 512  Keyword Greater than Operator  &gt;  Greater than or equal to Operator  &gt;=  hash height Hidden history array history object host hostname href hspace if . . . else ignoreCase Property Image images Increment Operator  ++  index indexOf Inequality Operator  !=  Infinity Property input Property isFinite isNaN IsReady Property IsRootFolder Property italics item Item Property       < previous page    X X X X X X X X X X X X  X X X X X  X  X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_512  If you like this book, buy it!  next page >   < previous page  page_513  Netscape Navigator  Microsoft Internet Explorer  next page > Page 513  Keyword Items javaEnabled join Key Property Keys Labeled lastIndex Property  RegExp  lastIndex Property  Regular Expression  lastIndexOf lastMatch Property lastModified lastParen Property lbound leftContext Property length Property  Array  length Property  Function  length Property  String  Less than Operator  &lt;  Less than or equal to Operator  &lt;=  Line Property link linkColor links LN10 LN2 location log LOG10E       < previous page    X X  X  X  X X X X X  X X X X X X X X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_513  If you like this book, buy it!  next page >   < previous page  page_514  Netscape Navigator  Microsoft Internet Explorer  next page > Page 514  Keyword LOG2E Logical AND Operator  &&  Logical NOT Operator  !  Logical OR Operator     lowsrc Math max MAX_VALUE MimeType mimeTypes min MIN_VALUE Modulus Operator  %  Move MoveFile moveFirst MoveFolder moveNext multiline Property Multiplication Operator  *  name NaN navigator NEGATIVE_INFINITY new Operator next Nonidentity Operator  != =  Number       < previous page    X X X X X X X X X X X X X  X X X X X X X X X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_514  If you like this book, buy it!  next page >   < previous page  page_515  Netscape Navigator  Microsoft Internet Explorer  next page > Page 515  Keyword Object Object onAbort onBlur onChange onClick onError onFocus onLoad onMouseOut onMouseOver onReset onSelect onSubmit onUnload open  document object  open  window object  OpenAsTextStream opener OpenTextFile Option options parent ParentFolder Property parse parseFloat parseInt Password Path Property       < previous page    X X X X X X X X X X X X X X X  X  X X X  X X X X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_515  If you like this book, buy it!  next page >   < previous page  page_516  Netscape Navigator  Microsoft Internet Explorer  next page > Page 516  Keyword pathname PI Plugin plugins port POSITIVE_INFINITY pow previous prompt protocol prototype prototype Property Radio random Read ReadAll ReadLine referrer refresh RegExp Object Regular Expression Object Regular Expression Syntax reload Remove RemoveAll replace reset Reset object       < previous page    X X X X X X X X X X X  X X  X X  X  X X X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_516  If you like this book, buy it!  next page >   < previous page  page_517  Netscape Navigator  Microsoft Internet Explorer  next page > Page 517  Keyword return reverse rightContext Property RootFolder Property round ScriptEngine Function ScriptEngineBuildVersion Function ScriptEngineMajorVersion Function ScriptEngineMinorVersion Function scroll search select Select object selected selectedIndex self SerialNumber Property setDate setFullYear setHours setMilliseconds setMinutes setMonth setSeconds setTime setTimeout       < previous page    X X  X  X X X X X X X  X  X  X X X X X  X X X X X X X X X X X X X X X X X X X X X X X X X X  page_517  If you like this book, buy it!  next page >   < previous page  page_518  next page > Page 518  Netscape Navigator  Microsoft Internet Explorer  Keyword setUTCDate setUTCFullYear setUTCHours setUTCMilliseconds setUTCMinutes setUTCMonth setUTCSeconds setYear ShareName Property ShortName Property ShortPath Property sin Size Property Skip SkipLine slice  Array  slice  String  small sort source Property split sqrt SQRT1_2 SQRT2 src status strike String       < previous page    X  X  X X  X X X X X X X X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_518  If you like this book, buy it!  next page >   < previous page  page_519  Netscape Navigator  Microsoft Internet Explorer  next page > Page 519  Keyword sub SubFolders Property submit substr substring Subtraction Operator  -  suffixes sup switch taint taintEnabled tan target test Text object text property Textarea TextStream Object this title toArray toGMTString toLocaleString toLowerCase top toString TotalSize Property toUpperCase       < previous page    X  X  X  X X X X X X X  X X X  X X  X X X X X  X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_519  If you like this book, buy it!  next page >   < previous page  page_520  Netscape Navigator  Microsoft Internet Explorer  next page > Page 520  Keyword toUTCString type typeof Operator ubound Unary Negation Operator  -  unescape Unsigned Right Shift Operator  &gt;&gt;&gt;  untaint URL userAgent UTC value valueOf var VBArray Object vlinkColor void Operator VolumeName Property vspace while width window object window property with write WriteBlankLines WriteLine writeln       < previous page    X X  X X X X X X X X X X  X  X  X X X X X  X  X X X X X X X X X X X X X X X X X X X X X X X X X X X X  page_520  If you like this book, buy it!  next page >   < previous page  page_521  next page > Page 521  Index  + operator, 26, 217  strings, 32  += operator, 217  = operator, 217  A  above property, 260  action set  defining, 301  initializing, 302  ActiveX controls, 241  AddBvrToRun   method, 282  adder   function, 61  addTimeMarker   method, 305  alert boxes, 362-363  displaying JavaScript, 458-459  Hello from JavaScript! message, 11  alert   function, 362, 458  Alerter.htm Web page  code listing, 363  all[] collection, 320  all object, 309  anchors[] collection, 318  placing controls on Web page, 362  text to display on page, 362   animateImage   function, 276-277, 278, 295  animation  moving HTML element on path, 305-310  applying transformations, 290  basic, 276-278  DirectAnimation, 281-292  JavaScript, 274-281  layers, 293-298  randomizer example, 274-281  rotation, 288-291  Sequencer control, 298-304  starting, 290-291, 294-297  translation, 287-288  Animation2.htm Web page  button, 293  code listing, 297-298  ending animation, 295-296  image in layer, 293  immediately starting animation, 296  moving image to starting position, 294  starting animation, 293-294, 294-297  tracking image movement left, 294  Animation.htm Web page  adding DAViewerControl control object, 282-283  animated figure, 282  applying transformations, 290  code listing, 291-292  drawing rest of figure, 286  drawing surfaces, 284-286   drawing yellow rectangle, 286  MeterLibrary routines, 284  rotation, 288-291   . . .  tag section, 283  setting fill color, 285  starting animation, 290-291  translation, 287-288  Twist rotation, 289   . . .  tag, 2, 434-435  MAYSCRIPT attribute, 435  applets, 2  applets[] collection, 318, 436  appName property, 253, 389  navigator object, 199  AppType.htm Web page  code listing, 390  appVersion property, 389-390  Arc   method, 243  ArcDegrees   method, 284  ArcRadians   method, 284    tag, 268  args.htm Web page, 65  code listing, 67  arguments, 65-68  array, 68  dialog boxes, 376-385  naming, 65-66  determining browser type, 389  version number and supported platform, 389-380   passing by reference and not value, 102  Array   constructor, 83  Array object, 83-88  JavaScript methods, 85  JScript methods, 85  methods, 85  Array objects, arrays of, 87  array.htm Web page, 84  code listing, 87-88  arrays, 83-88  Array objects, 87  controls part of, 175  image objects, 275-276  images[], 234  index, 84  indexed data items, 83  loop index, 84  looping all elements, 88-93     < previous page    page_521  next page >  If you like this book, buy it!   < previous page  page_522  next page > Page 522  multidirectional, 87  printing message on one line, 86  slots, 84  assignment operator  = , 24, 34  combining operators with, 218  at   method, 299, 301  parameters, 302  AutoSizeFillScale   method, 284  AutoStart property, 305  B  back   function, 401, 402  back2   function, 402  background color, 94-95  setting with controls, 120-122  background property, 260  BackgroundImage property, 282  basic animation, 276-278  beginPosition variable, 419  below property, 260  layer object, 260  bgColor.htm Web page  code listing, 122  coloring background, 120-121  prompt and button, 120  black.gif file, 236  blue.gif file, 236  bgColor property, 94-95, 120-121, 317-318   blur   method, 110, 114, 126, 130, 142, 152, 158, 181   . . .  tag, 197  attributes, 318  bold   method, 80, 81  Boolean variables, 28  border property, 236  BorderColor   method, 284  BorderDashStyle   method, 284  BorderJoinStyle   method, 284  BorderWidth   method, 284  Bounce property, 305    tag, 165-166  break statement, 42, 52  browser windows  opening new, 353-359  passing URL of document to, 353  built-in objects, 71-79  Array object, 83-88  Internet Explorer, 77-78  Netscape Navigator, 72-74  buttons, 114-120  changing images by clicking, 232-234  connecting to function, 325  event handlers, 114  file controls, 142  form property, 114  Hidden.htm Web page, 146  Hour.htm Web page, 377  Jumper.htm web page, 391-392   methods, 114-120  name property, 114  Open.htm Web page, 356  PassString.htm Web page, 445  Path.htm Web page, 306-307  ReLink.htm Web page, 320-321  Rewrite.htm Web page, 325  Status.htm Web page, 423  Suspend.htm Web page, 435-436  text areas, 127  type property, 114  value property, 114  Buttons.htm Web page  code listing, 118  C  call   method, 466-467  calling by reference, 102  calling by value, 102  captureEvents   method, 262  CGI  Common Gateway Interface , 135  change event, 115  ChangeImage   function, 20, 232-233  CharCode   method, 218  check boxes, 152-157  checked property, 152, 167, 168  checked when displayed, 154  clearing, 167-168  defaultChecked property, 152  calculateCost   function, 166, 169, 170, 171, 177-178   determining which are checked, 169  document.form1.elements[] array, 176  event handlers, 152  form property, 152  methods, 152  name property, 152  number of options selected, 157  properties, 152  read write property, 168  releasing input focus, 110  reporting which has been clicked, 153  representing correct options, 168-169  restoring input focus, 110  together with radio buttons, 163-175  type property, 152  value property, 152     < previous page    page_522  next page >  If you like this book, buy it!   < previous page  page_523  next page > Page 523  check1Clicked event handler  , 177  check1Clicked   function, 153, 154  check2Clicked event handler  , 177  check2Clicked   function, 153, 154  checked property  check boxes, 152, 167, 168  radio buttons, 158  checkForm   function, 137, 139  Checks.htm Web page, 153  adding check boxes, 153-154  code listing, 156-157  naming check boxes, 153  table with cyan background, 153  checkTime   function, 490-491, 492  .class files, 2  class1 class, 488-489  Clear   method, 285  indicating which checkbox is checked, 154-155  clearCheckBoxes   function, 166, 167-168, 175-176  clearInterval   method, 295-296  click event, 115  connecting to ResizeTextbox   function, 123-124  click event handler, 177-178  click   method, 114, 152, 158, 167, 168  client-side image maps, 267-270  clip.bottom property, 260  clip.height property, 260   clip.left property, 260  clip.right property, 260  clip.top property, 260  clip.width property, 260  close   method, 223, 340, 354, 467  closing windows, 354  code, storing data in, 147  collections, 312  document object, 318-323  how many elements in, 321  length property, 321  window object, 352  color property, 226  color style property, 478  colorBackground   function, 120  ColorRgb   method, 285  Colors.htm Web page, 234  code listing, 239-241  imageArray[] array, 236  images[] array, 319-320    tags, 235-236  color for foreground and background, 94-95  loading image into image object, 237  random images, 236-237  storing image in imageArray[] array, 237  comments, enclosing script statements in, 14  complete property, 236  confirm boxes, 364-366  choosing element at random from   tag, 238   confirm   method, 328, 364  Confirmer.htm Web page  code listing, 366  controls for Web page, 364  user clicked Cancel, 365  user clicked OK, 364-365  constructors, 83  Container property, 282  controlling programs  else statement, 38-39  if statement, 33-41  switch statement, 41-46  controls  adding to form1, 123  buttons, 114-120  check boxes, 152-157  DirectAnimation controls, 281  elements[] array, 175-181  enclosing in forms, 113  file controls, 142-145  forms, 114, 134  guestbook forms, 137-139  hidden controls, 146-150  part of an array, 175  password, 129-134  placing on Web page, 110, 362  radio buttons, 157-163  Reset buttons, 134-142  select controls, 181-187   setting text box size, 123-126  setting Web page background color, 120-122  Structured Graphics, 241-249  Submit buttons, 134-142  text boxes, 110-113  for Web page, 364  Controls.htm Web page, 394-395  code listing, 398  navigation buttons, 395  cookie property, 414, 419  Cookie.htm Web page  code listing, 417-418  cookie header, 415  cookie not found error message, 416  displaying cookie text, 415-416  expiration time for cookie, 413-414  finding cookie in document.cookie property, 414-415  Get the cookie button, 412, 413  reading cookies, 414-416  Set   function, 413  Set the cookie button, 412  setting cookie, 414  string from document.cookie property, 415  cookies, 387-388, 412-422    < previous page    page_523  next page >  If you like this book, buy it!   < previous page  page_524  next page > Page 524  keywords, 414  reading, 414-416  setting, 413-414  storing users names, 418-422  CoordinateSystem property, 242  Crop   method, 285  CropPoints   method, 285  CSS  Cascading Style Sheets , 473, 493-499  changing styles, 501-503  inheritance, 499-501  Netscape Navigator, 493  style properties, 476, 494  style properties with STYLE attribute, 479  styled elements in Web page, 495-496  custom objects, 96-97  function keyword, 97  instantiating, 99-100  method creation, 98-99  property creation, 97-98  setting up in code, 97-102  D  data  handling, 23-29  private, 69  public, 69  storing in code, 147  dataObject   function, 102   date object, 331, 379, 413-414, 491-492  date variable, 24, 26, 28  DAViewerControl control, 281-282  adding object, 282-283  embedding, 281  libraries, 284  MeterLibrary, 284  methods, 282  PixelLibrary, 284  properties, 282  Day.htm Web page  code listing, 374-375  controls, 370-371  declaring variables, 24, 26  decrement operator   , 50  defaultChecked property  check boxes, 152  radio buttons, 158  defaultStatus property, 423  defaultValue property  password controls, 130  text areas, 125, 126  text boxes, 110  delete operator, 83  dialog boxes, 370-376  arguments, 376-385  current hour, 377  displaying, 371  initializing, 380   embedding DAViewerControl control, 281  passing argument to, 378-379  properties, 370  reading argument passed to, 379-381  dialog object, 369, 370  dialogArguments property, 379  DirectAnimation, 281-292  DirectAnimation animation  controls, 281  documentation, 281  Sequencer control, 298-304  DirectAnimationControl control  drawing surfaces, 284-286  Direction property, 305  display   method, 96-97, 98-99  displaying  JavaScript alert box, 458-459  DisplayMessage   function, 116, 118, 127  strings, 80  code, 116-117  not passing text box form to, 119-120  referring to forms name, 119  this.form argument, 116  display  method, 100    tag, 250, 251  Move.htm Web page, 253-254  STYLE attribute, 250  Dlg.htm Web page  click handler for radio buttons, 372-373   code listing, 375-376, 383-385  holding selection user makes, 372  loading as dialog box, 371  passing argument to, 378-379  radio buttons, 371-372  radio buttons and OK and Cancel buttons, 378-379  returning selection to main window, 373  document [element] object, 89  document object, 16, 311, 312  accessing from Java, 466  applets[] collection, 436  collections, 316-317, 318-323  cookie property, 414  displaying all properties of, 88, 90  displaying elements of, 89  events, 316-317, 323-324  methods, 316-317, 324  organizational aspect, 315-316  overview, 315-317  properties, 316-317, 317-318     < previous page    page_524  next page >  If you like this book, buy it!   < previous page  page_525  next page > Page 525  calculating cost of donut, 166, 169, 170, 171  checking check boxes representing correct options, 166, 168-169  write   method, 86  writeln   method, 86  document property, 259  document.cookie property, 414-415  document.images[] array, 238  document.writeln   method, 31, 94  domain keyword, 414  Donuts2.htm Web page code listing, 179-181  Donuts.htm Web page  adding check boxes, 164-165  adding radio buttons, 164  clearing check boxes, 166, 167-168  code listing, 172-175  form and user prompt, 163-164  recalculating cost, 171  responding to radio buttons, 170-171  text box, 165-166  dot  .  operator, 70  do-while statement, 57-60  do-while.htm Web page code listing, 59-60  downFlag Boolean flag, 263, 264  Download.htm Web page  code listing, 330  confirm box, 328  displaying larger image, 328   displaying smaller image, 329  downloading .js files, 13  drag and drop  canceling system operation, 256-257  Internet Explorer, 253-258, 256  Netscape Navigator, 256, 259-267  Drag   method, 282  DragIcon property, 282  DragMode property, 282  drawing surfaces, 284-286  methods, 284-285  DrawingSurface property, 242  DrawPath   method, 285  Duration property, 305  dynamically moving images, 250  E  ECMA-262 standard, 6  element variable, 89  elements[] array, 175-181  looping over checkboxes, 177  elements as objects, 233  else statement, 38-39  embedding JavaScript in Web pages, 12-14  embeds[] collection, 319  Emphasize.htm Web page  code listing, 228-230  coloring red, 226  enlarging text, 226  hyperlinks, 225-226   moving mouse away from hyperlink, 226-227  encapsulation, 69  equality operator  == , 34  event handlers  buttons, 114  check boxes, 152  image objects, 236  password controls, 130  radio buttons, 158  select controls, 181  text areas, 126  event object  pageX property, 201  pageY property, 201  properties, 195  which property, 217  event-driven, 115  events, 71  document object, 316-317, 323-324  file controls, 142  path control, 306  Sequencer controls, 299  Structured Graphics control, 244  tying to functions, 115-116  window object, 352, 353  executing JavaScript, 11-12  expires keyword, 414  expressions  flipping logical value of, 55   postfix operators, 50  prefix operators, 50  switch statements, 42  ExtentHeight property, 242  ExtentLeft property, 242  ExtentTop property, 242  ExtentWidth property, 242  F  fgColor property, 94-95  file controls, 142-145  buttons, 142  events, 142  form property, 142  methods, 142  name property, 142  properties, 142     < previous page    page_525  next page >  If you like this book, buy it!   < previous page  page_526  next page > Page 526  text boxes, 142  type property, 142  value property, 142  Filer.htm Web page, 142  code listing, 144-145  fill color, 285  FillColor   method, 285  Filler.htm Web page  blank document created, 360  code listing, 361  HTML for new document, 360  prompt and button, 359-360  FillImage   method, 285  FillPath   method, 285, 286  FillSpline   method, 243  FillStyle   method, 285  FillTexture   method, 285  FixedFillScale   method, 285  FollowLine   method, 287-288  Font   method, 285  fontSize property, 479  style object, 226  font-size property, 479, 499-500  for statement, 47, 58-52  loop_index variable, 49  foreground color, 94-95  focus   method, 110, 114, 126, 130, 142, 152, 158, 181   for.htm Web page code listing, 51  for-in statement, 88-93  for-in.htm Web page, 88  code listing, 92  form elements, 113  form property  buttons, 114  check boxes, 152  file controls, 142  password controls, 130  radio buttons, 158  select controls, 181  text areas, 125, 126  text boxes, 110  form validation, 135  form1  adding controls, 123  form1 object, 71   . . .  tag, 113  forms, 71  controls, 114, 134  naming, 119  text boxes, 110-113  forms[] collection, 319  forward   function, 401, 402  forward2   function, 402  document.form1.elements[] array, 176  Mouser.htm Web page, 197  sending information back to Web server, 134-135   frames, 338  writing documents to others, 340-342  frames[] collection, 319  function keyword, 97  function.htm Web page, 61, 62  code listing, 64-65  functions, 28, 60-65  arguments, 61, 65-68  arguments array, 68  associating with object, 98-99  calling, 60  code execution, 61  connecting buttons to, 325  connecting onChange event handler to, 184-185  declaring, 61  fewer arguments than declared, 68  functionName.arguments[0] argument, 68  functionName.arguments[1] argument, 68  general form, 60-61  more arguments than declared, 68  passing arguments by reference and not value, 102  private, 69  public, 69  returning values, 61, 63  style, 490-493  tying events to, 115-116  G  Get   function, 414-415  getHours   method, 331   getMember   method, 466  getNumber   function, 62-63  passing arguments to, 65  values, 66-67  getSpeed   method, 449-450  get_textString   method, 103  getTime   method, 413-414  global variables, 27, 28  GradientExtent   method, 285  GradientExtentPoints   method, 285  GradientRolloffPower   method, 285  GradientRolloffPowerAnim   method, 285  GradientShape   method, 285  graphics animation. See animation  greater than  >  operator, 34  greater than or equal to  >=  operator, 34  green.gif file, 236  guestbook forms    < previous page    page_526  next page >  If you like this book, buy it!   < previous page  page_527  next page > Page 527  ACTION attribute, 136  CGI programs on server and, 137  colored background, 135-136  controls, 137-139  enclosed in table, 135-136  METHOD attribute, 136  Reset button, 138-139  sending to Web server, 139  Submit button, 138-139  text area, 137-138  text boxes, 137-138  GUIs  graphical user interface , event-driven, 115  H   . . .  tag  CLASS attribute, 482  modifying, 480  STYLE attribute, 478-479  style class usage, 482   . . .  tag, modifying, 480-481  handling data, 23-29  variables, 24-26  Height property  DAViewerControl control, 282  window percentages or pixel measurements, 283  height property, 236  hello.htm Web page, 15-17  code listing, 17   head, 15  JavaScript area, 15  help window  designing, 222-223  opening and closing, 221  HelpContextID property, 282  Helper.htm Web page  checking for Esc key press, 222-223  closing current window, 223  code listing, 224  designing help window, 222-223  displaying message, 222  displaying prompt and help button, 221  Internet Explorer, 221  opening new browser window, 221-222  HelpWindow.htm Web page, 221  code listing, 224  hidden controls, 146-150  properties, 146  reloading text from, 148  Hidden.htm Web page  button, 146  code listing, 149-150  hidden control, 147  loading string into text box, 147  reloading text from hidden control, 147  Restore default button, 147, 148  text box, 146  hide   method, 456-457   hideWindow   function, 455, 456  HighQuality property, 242  history object, 399-404  methods, 399, 400  navigating with, 401-402  properties, 399, 400  History.htm Web page  Back button, 401  buttons for moving two pages at a time, 400-401  Forward button, 401  moving backward and forward two pages at a time, 402  navigation buttons, 401-402  passing number of pages to move, 402  Previous and Next buttons, 400  program listing, 404  HorizontalFillScale   method, 285  converting current hour to 12-hour scale, 379-380  hotspot, 267, 268  Hour.htm Web page  Cancel button, 381  code listing, 383  determining hour of day, 377  initializing dialog box, 380  No selection message, 381  OK button, 381  returning hour of day to, 381  text box and button, 377  Hours.htm Web page, 339  reading argument passed to dialog box, 379-381   HTML controls and JavaScript, 18-23  code listing, 343  hspace property, 236  HTML events, 115-118  HTML objects, 104  hyperlinks  coloring red, 225, 226  connecting to functions, 339-340  Emphasize.htm Web page, 225-226  enlarging text, 225, 226  mouse placed over, 208  placing on Web page, 209  ReLink.htm Web page, 320-321  I  IE   function, 320  if statement, 33-41, 50  if.htm Web page code listing, 40-41    < previous page    page_527  next page >  If you like this book, buy it!   < previous page  page_528  next page > Page 528   . . .  tag, 56  image handling  changing images, 232-234  multiple images, 234-241  positioning images in Web page, 250-253  random images, 236-237  image maps, 267-270  hotspot, 267, 268  Imap2.htm Web page, 409-410  JavaScript URLs, 409-412  naming, 268  image object, 234  caching images, 237  loading image into, 237  image objects, 236  arrays, 275-276  properties, 236  Image property  DAViewerControl control, 282  Structured Graphics control, 242  Image1 layer, 293  image2.gif, reloading, 233  imageArray[] array, 236, 275-276  selecting images at random, 238  storing images in, 237  Image.htm Web page, 233  imagemaps   displaying, 269  Microsoft hotspot, 268  Netscape hotspot, 268-269  ImagePile.htm Web page, 250  adding image to   tag, 250-251  code listing, 252  first image, 250  second image, 251  images  changing by clicking button, 232-234  dragging and dropping, 253-258  drawing one on top of another, 250  IMG1, 19  indexing, 236-237  moving dynamically, 250  moving in Internet Explorer, 253-258  moving in Netscape Navigator, 253  multiple, 234-241  positioning in Web page, 250-253  program control of, 274  random, 236-237  swapping, 213-215  images[] array, 234, 236, 319-320  images[] collection, 319  Imap2.htm Web page  code listing, 411  displaying message in text box, 410  image map and text box, 409-410  setting up map, 409   imap.gif file, 269  Imap.htm Web page code listing, 270    tag, 250-251, 269  choosing element at random from, 238  Colors.htm Web page, 235-236  elements, 274-275  Name attribute, 19  reloading image, 210-211  SRC attribute, 21  SRC property, 233  src property, 70  IMG1 image, 19  IMG1 member object, 71  src property, 70-71  Img.htm Web page  button clicked by user, 232  code listing, 234  first image, 232  reloading image2.gif, 233  img.htm Web page, 18-23  code listing, 23  ImgOut   event handler, 213  ImgOver   event handler, 213  increment   function, 102  increment operator  ++ , 50  Index property, 282  indexed data items, 83  indexing images, 236-237  indexOf   method, 415   inequality operator  != , 54  Inet SDK  Internet Software Development Kit , 6  information, retrieving from URL strings, 405-408  inheritance  CSS  Cascading Style Sheets , 499-501  stylesheets, 488-490  inline stylesheets, 479  innerHTML property, 346, 347    tag, 20  CHECKED attribute, 154, 159  Internet Explorer, 110-111  NAME attribute, 119  Netscape Navigator, 111  onClick attribute, 116  TYPE attribute, 115, 130, 153  VALUE attribute, 115  InputImage property, 282  installing select control, 183  instantiating objects, 99-100  inString string, 218  Internet Explorer, xix, xx  built-in objects, 77-78  cookies, 388  CSS  Cascading Style Sheets , 473, 493  CSS style properties, 496     < previous page    page_528  next page >  If you like this book, buy it!   < previous page  page_529  next page > Page 529  document object properties, collections, events, and methods, 317  JavaScript and JScript keywords, 505-520  date object, 331  dialog object properties, 370  DirectAnimation, 281-292  drag and drop, 256  dragging and dropping, 253-258  elements as objects, 233  for-in.htm Web page, 91-92  Helper.htm Web page, 221  history object, 400  HTML tags, 123    tag, 110-111  JavaScript and, 3-10  location object, 391  mouse events, 196-197  mouse handlers, 197  mouse position, 208  mouseDown event handler, 198  Mouser.htm Web page, 199-201  moving images, 253-258  navigator object, 199, 388  object hierarchy, 312-314    tag, 102, 103  objects associated with tags, 71  Path control, 305-310  reading keys, 218-219   scriptlets, 103-107   . . .  tag, 13-14  Sequencer control, 298-304  setting text box size with controls, 123-126  setting Web page background color with controls, 121  Structured Graphics control, 241-249  style object, 476  style object properties, 477  stylesheets and, 475-477  window object, 352  window.event object, 196  window.open   method, 355  intro.htm Web page, 338-339  italic text, 56  J  Java  applet and application creation, 2  calling JavaScript from, 458-465  .class files, 2  versus JavaScript, 2-3  passing JavaScript arguments to, 438-443  passing strings from JavaScript, 444-448  reaching methods from JavaScript, 434-438  returning values to JavaScript, 449-454  rewriting window in JavaScript, 465-471  statements in JavaScript, 454-458  variable types, 28  Java applets  changing delay time, 439   delay time between images, 438, 439  loading new time variable, 439-440  methods, 436  properties, 436  reaching from JavaScript, 436  java object, 454  JavaAlert.htm Web page  code listing, 464-465  Show time button, 461  JavaAlert.java applet  placing JavaScript alert box on-screen, 461  adding showTime   method to, 458-459  JavaScript  code listing, 462-464  getting JavaScript window, 460  JSObject class, 460-461  placing alert box on-screen, 461  string creation, 460-461  animation, 274-281  browser-dependency, 2  calling from Java, 458-465  differences from JScript, 3  ECMA-262 standard, 6  executing, 11-12  HTML controls and, 18-23  image maps and URLs, 409-412  Internet Explorer and, 3-10  versus Java, 2-3  Java statements in, 454-458   keywords, 4-5  keywords by browser, 505-520  Netscape Navigator and, 3-10  passing arguments to Java, 438-443  passing strings to Java, 444-448  preparing Java applets for connection to, 427-433  reading Java methods from, 434-438  returning values from Java, 449-454  rewriting window from Java, 465-471  semicolon  ;  at end of statements, 11  tentative standard, 6  URLs, 387  versions, 3-10  Web servers and, 135  writing directly into Web pages, 2  javascript: ShowMessage   URL, 409  JavaScript Web page example, 12  header, 12  writing directly in Web page, 12     < previous page    page_529  next page >  If you like this book, buy it!   < previous page  page_530  next page > Page 530  .js files, 13  JScript  downloading, 13  Booleans, 29  current version, 6  data types, 29  differences from JavaScript, 3  keywords, 7-10  keywords by browser, 505-520  null, 29  numbers, 29  objects, 29  scriptlets, 103  semicolon  ;  at end of statements, 11  strings, 29  undefined data type, 29  JSObject, 466  JSObject class, 459  JSObject.class, 460-461  Jumper.htm Web page  button and text box, 391-392  code listing, 393-394  setting location object to new URL, 392  K  keyboard  controlling window with keystrokes, 221-224  reading keys, 215-221   keyCode property, 218  keyFrame   method, 306  keyPress event, 215-216, 222  Netscape Navigator, 216-217  keyPress   event handler, 216, 222  Netscape Navigator, 217  keys, reading, 215-221  Keys.htm Web page, 221  code listing, 220  keyPress event, 215-216  prompt and text box, 216  keywords  JavaScript, 4-5, 505-520  JScript, 7-10, 505-520  L  labeled breaks, 52  LanguageName variable, 13  large programs, 69  LastLoc.htm Web page  code listing, 408  layer object, 264  methods, 260-261  properties, 259-260  layers, 253, 259  animation, 293-298  left property, 295  Left property  DAViewerControl control, 282  hyperlink to NewLoc.htm?LastLoc.htm, 405   window percentages or pixel measurements, 283  left property  layer object, 259  layers, 295  length property, 80, 81  collections, 321  select controls, 181, 189  less than  <  operator, 34  less than or equal to  <=  operator, 34  Library property  Path control, 305  Structured Graphics control, 242  Line   method, 285, 287-288  LineColor   method, 284  LineDashStyle   method, 284  LineEndStyle   method, 284  LineJoinStyle   method, 284  LinePoints   method, 284  LineWidth   method, 284  link1Over   event handler, 209  link2Over   event handler, 209  links[] array, 321  links[] collection, 319, 320  Load event, 296, 297  load   method, 261  local variables, 27, 28  location object, 391-394  Internet Explorer, 391  Netscape Navigator, 391   properties, 391  location.ref property, 392  logical AND operator  && , 199  loop index tracking image movement left, 294  loop_index variable, 49, 55  declaring, 49  looping  all elements of objects or arrays, 88-93  over indexed array, 177  loops, 47, 48-52  assembling array objects, 86  breaking, 52  ending, 52  expression executed at least once, 58  if statement, 50  labeled breaks, 52  loop index, 54-55     < previous page    page_530  next page >  If you like this book, buy it!   < previous page  page_531  next page > Page 531  test expression at end of, 57-60  while expression is true, 53-57  loosely typed language, 28  lowscr property, 236  M    tag, 268  USEMAP attribute, 269  marginLeft property, 488-489  margin-left property, 499-500  member objects, 71  Menu.htm Web page  code listing, 344-345  links in bulleted list, 339  message[] object, 85  MeterLibrary, 284  routine names, 287  MeterLibrary property, 282  methods, 70  Array object, 85  buttons, 114-120  check boxes, 152  custom object creation, 98-99  DAViewerControl control, 282  document object, 316-317, 324  drawing surface, 284-285  file controls, 142  history object, 399, 400   Java applets, 436  layer object, 260-261  password controls, 130  Path control, 305-306  private, 70  public, 70, 103  radio buttons, 158  select controls, 181  Sequencer controls, 299  String object, 79-80  reaching Java methods from JavaScript, 434-438  Structured Graphics control, 242-243  text boxes, 110  window object, 352, 353  Microsoft Web site, xx  DirectAnimation documentation, 281  Inet SDK  Internet Software Development Kit , 6  MIME types, 104  MorningTrains   function, 340  mouse  determining which button pressed, 194  highlighting text with, 225-229  moving away from hyperlink, 226  placed over hyperlinks, 208  preview pages, 208-211  swapping images, 213-215  mouse events  Internet Explorer, 196-197  Netscape Navigator, 194-195   mouse handlers  Internet Explorer, 197  mouse handling, 194-208  mouseDown event, 194, 195, 198  capturing all, 262-263  mouseDownHandler   event handler, 262  mouseDownHandler   function, 194, 195, 198  MouseEventsEnabled property, 242  mouseMove event, 262-266  Move.htm Web page, 254-255  mouseMove handler, 265  mouseMoveHandler   event handler, 264  mouseOut event, 213, 225  mouseOver event, 208, 209, 213, 225  mouseOver event handler in  . . .  tag, 210  Mouser.htm Web page, 194   . . .  tag, 197  checking for Shift, Ctrl, or Alt keys, 199, 200-201  checking for Shift and Ctrl keys combination, 199-200  code listing, 205-208  connection to Internet Explorer mouse handlers, 197  form1, 197  Internet Explorer, 199-201  logical AND operator  && , 199  mouse events, 343-324  mouse position, 199, 201-202  mouseDown events, 198  mouseUp events, 198  Netscape Navigator, 201-203   text box, 197  mouseUp event, 194, 198, 202-203  capturing all, 262-263  mouseUpHandler   function, 194  Move   method, 282  Move2.htm Web page  canceling system drag and drop, 265-266  capturing all mouse events, 262-263  code listing, 266-267  giving layer position, 261-262  moving image to match mouse, 264  moving layer to correspond with mouse location, 265  naming layers, 261-262  setting up layer1 and layer2, 261  tracking state of mouse button, 263-264  moveAbove   method, 261  moveBelow   method, 261    < previous page    page_531  next page >  If you like this book, buy it!   < previous page  page_532  next page > Page 532  moveBy   method, 260  Move.htm Web page  actual location of image, 255-256  canceling system drag and drop, 256-257  code listing, 258    tag, 253-254  mouseMove event, 254-255  user not pressing button, 255  user pressing button, 255  y location of image, 256  moveTo   method, 260, 265, 294  moveToAbsolute   method, 260  multidirectional arrays, 87  multiple images, 234-241  Multiple.htm Web page, 187  adding items to text area, 189  code listing, 191  determining items selected, 189  text area, 188  multiple-selection select control, 187-190  adding items to text area, 189  determining items selected, 189  options[] internal array, 189  scrollable list, 188  text area, 188  N  Name property, 282   name property  buttons, 114  check boxes, 152  file controls, 142  hidden controls, 146  image objects, 236  layer object, 259  password controls, 130  radio buttons, 158  select controls, 181  text areas, 125, 126  text boxes, 110  naming forms, 119  navigating with history object, 401-402  navigator object, 198-199, 388  AppType example, 389-391  properties, 388  Netscape Enterprise Server, 135  Netscape LiveWire, 135  Netscape Navigator, xix, xx  += operator, 217  animation with layers, 293-298  applying CSS styles to   element, 499  built-in objects, 72-74  canceling system drag and drop, 265-266  cookies, 388  date object, 331  CSS  Cascading Style Sheets , 493  document object properties, collections, events, and methods, 317   JavaScript and JScript keywords, 505-520  drag and drop, 256  dragging and dropping, 259-267  elements as objects, 233  event object, 195  event object properties, 195  executing JavaScript, 11-12  for-in.htm Web page, 90-91  history object, 399  history object as array, 400  inline stylesheets, 479    tag, 111  JavaScript and, 3-10  javascript typein frame, 11  keyPress event, 216-217  KeyPress   event handler, 217  layers, 253, 259  location object, 391  mouse events, 194-195  mouse position, 208  mouseDown event handler, 198  mouseMove event, 262-266  mouseOut event, 213  mouseOver event, 213  Mouser.htm Web page, 201-203  moving images, 253  navigator object, 199, 388  object hierarchy, 314-315  Open Page command, 11   Open Page dialog box, 11  reading ASCII code of struck key, 217  reading keys, 216-218   . . .  tag, 13  setting Web page background color with controls, 121  stylesheets, 476-477  uppercase letters, 219  window object, 353  window.open   method, 354  Netscape servers, 135  Netscape Web site, xx  current version of JavaScript, 3  JavaScript handbook, 3  new operator, 82-83  NewDrawingSurface   method, 284  newImage   function, 236  NewLoc.htm Web page    < previous page    page_532  next page >  If you like this book, buy it!   < previous page  page_533  next page > Page 533  code listing, 408  determining last location of user, 405  displaying string, 406-407  search string from search property, 406   . . .  tag, 253  next   method, 395  next property, 396  next variable, 395  Not  !  logical operator, 55  NS   function, 320  Number object, 217  number variable, 28, 30, 34  number1 variable, 26  number30 variable, 26  numbers[] array, 83-84  O  Object property, 282    tag, 102, 103  object-based programming, 68-71  object.htm Web page, 96-97  code listing, 101-102   . . .  tag, 242-243  ActiveX controls, 241  embedding Sequencer controls, 299  scriptlet.htm Web page, 103-104  objects, 28  associating methods with, 98-99   built-in, 71-79  constructor, 83  creation from script, 103-107  custom, 96-97  declaring, 99-100  declaring new, 82-83  definition, 69  elements as, 233  encapsulation, 69  getting rid of, 83  HTML, 104  initializing, 99-100  instantiating, 99-100  Internet Explorer hierarchy, 312-314  looping all elements of, 88-93  methods, 70  name as indexed array of internal members, 89-90  Netscape Navigator hierarchy, 314-315  passing arguments to functions by reference and not value, 102  private data, 69  private functions, 69  properties, 70-71  public data, 69  public functions, 69  referring to current, 98  referring to many properties and methods, 93-96  self-contained, 69  storing string of text, 96-102  text type, 99   onAbort event handler, 236  onBlur event, 142  onBlur event handler, 114, 126, 130, 152, 158, 181  onChange event, 142  onChange event handler, 126, 181, 182  connecting to function, 184-185  onClick attribute, 116  onClick event, 20, 244, 346-347  onClick event handler, 114, 152, 158  onDblClick event, 244  onError event handler, 236  onFocus event, 142  onFocus event handler, 114, 126, 130, 152, 158, 181  onInit event, 299  onKeyDown event, 323  onLoad event handler, 236  onMarker event, 306  onMouseDown event, 244, 323  onMouseMove event, 244  onMouseOut event, 244  onMouseOver event, 244  onMouseUp event, 244  onPause event, 299, 306  onPlay event, 299, 306  onPlayMarker event, 306  onSeek event, 299, 306  onSelect event handler, 126  onStop event, 299, 306  onSubmit event handler, 137   OOP  object-oriented programming , 68  local data, 28  Opacity   method, 284  OpacityAnim   method, 285  open   method, 221-222, 353, 466  Opener.htm Web page  code listing, 471  displaying applet, 468  Opener.java applet  accessing document object, 466  calling JSObject methods, 467-468  closing document, 467-468  code listing, 469-470  modifying suspend   method, 465-466  rewriting page from scratch, 466  suspending Web page, 467  Open.htm Web page, 354  button, 356  code listing, 358     < previous page    document displayed in window, 356-357  page_533  next page >  If you like this book, buy it!   < previous page  page_534  next page > Page 534  prompt to user, 356  setting browser window features, 356  user clicking button, 356  combined with assignment operator  = , 218  opening  new window, 353-359  windows, 354  OpenWindow   function, 356  operators, 24  listing of, 25  postfix, 50  prefix, 50    tag, 184  options property, 182  OR logical operator   , 333  outerHTML property, 346  OuterLoop label, 52  Oval   method, 243, 247, 285  oval   method, 305  OverlayImage   method, 285  P  pageX property  event object, 201  layer object, 259  pageY property  event object, 201  layer object, 259   ParallelTransform2   method, 289    tag, 241  parent keyword, 340  Parent property, 282  parent windows, 352  parent.frames[1] frame, 340  parent.frames[1].document frame, 340  parentLayer property, 260  parseFloat   method, 379  parseInt   method  PassString.htm Web page  buttons, 445  code listing, 448  PassString.java applet  code listing, 446-448  passing string, 444-445  password controls, 129-134  passing required string to applet, 445  copying text and displaying, 131-132  defaultValue property, 130  event handlers, 130  methods, 130  minimum security of, 132  properties, 130  Password.htm Web page  button for displaying unmasked text, 131  code listing, 133-134  copying password control text and displaying, 131-132  password control, 130   text box, 130-131  Path control, 281, 305-310  adding, 307  events, 306  methods, 305-306  pathImage target, 308  properties, 305  path keyword, 414  Path.htm Web page  adding Path control, 307  all object, 309  buttons, 306-307  code listing, 309-310  hidden image, 306-307  pathImage target, 308  pause   method, 299, 306  Perl programming, 135  Pie   method, 243, 247-248  PieDegrees   method, 285  PieRadians   method, 285  pixelLeft property, 255-256  PixelLibrary, 284  routine names, 287  PixelLibrary property, 282  making image move on-screen, 309  pathImage target, 308  specifying path, 308  starting animation, 308-309  traversal speed of image on path, 308   pixelTop property, 255-256  play   method, 299, 302, 306, 309  PlayState property, 305  plug-ins, reaching from JavaScript, 436  plugins[] collection, 319, 436  Point2   method, 287  Polygon   method, 243, 285  polygon   method, 306  PolyLine   method, 285, 286, 308  polyLine   method, 306  PolySpline   method, 243  postfix operators, 50    tag, 38  prefix operators, 50  PreserveAspectRatio property, 242  preview pages, 208-211  Preview.htm Web page, 208  code listing, 211-212     < previous page    mouseOver event handlers in  . . .  tag, 210  page_534  next page >  If you like this book, buy it!   < previous page  page_535  next page > Page 535  placing hyperlinks on Web page, 209  reloading   tag image, 210-211  printing array message on one line, 86  previous   method, 395  previous property, 396  previous variable, 395  private data, 69  private functions, 69  private methods, 70  private properties, 70  programming  object-based, 68-71  OOP  object-oriented , 68  programs  controlling, 33-41  large and small, 69  prompt   method, 367, 368  Prompter.htm Web page  controls, 367  displaying text user entered, 368  program listing, 370  prompt box and default string, 367  user didnt enter text, 368  properties, 70-71  check boxes, 152  custom object creation, 97-98  DAViewerControl control, 282   dialog box, 370  document object, 317-318  document objects, 316-317  event object, 195  file controls, 142  hidden controls, 146  history object, 399, 400  image objects, 236  Internet Explorer style object, 477  Java applets, 436  layer object, 259-260  location object, 391  navigator object, 388  password controls, 130  Path control, 305  private, 70  public, 70, 103  radio buttons, 158  select controls, 181-182  Structured Graphics control, 242  stylesheets, 474  window object, 352, 353  window.event object, 196-197  prototype property, 236  public data, 69  public functions, 69  dot  .  operator, 70  public methods, 70, 103  public properties, 70   public property, 103  R  radio buttons, 157-163  checked property, 158  defaultChecked property, 158  Dlg.htm Web page, 371-372, 378-379  document.form1.elements[] array, 176  event handlers, 158  form property, 158  methods, 158  name property, 158  only selection of one, 157, 158  properties, 158  responding to, 170-171  together with check boxes, 163-175  type property, 158  value property, 158  radio1Clicked   function, 160-161  radio2Clicked   function, 160-161  Radios.htm Web page  code listing, 162-163  connecting radio buttons to functions, 160-161  giving radio buttons same name, 159  grouping radio buttons, 159-160  Railroad.htm Web page  code listing, 343  target of hyperlinks, 338  random images, 236-237  Random.htm Web page, 274   basic animation, 276-278  code listing, 279-281  delay in repeated operation, 276-277  imageArray[] array, 275-276    elements, 274-275  keeping animation going, 278  placing images into array of image objects, 275-276  placing random image in   element, 277-278  reading keys, 215-221  Internet Explorer, 218-219  Netscape Navigator, 216-218  reading text sent in URL, 406-407  readString   function, 444  read write property, 168  Rect   method, 243, 246, 285  rect   method, 306  red class, 485-486  red.gif file, 236  ReHead.htm Web page  code listing, 348     < previous page    connecting onClick event to function, 346-347  page_535  next page >  If you like this book, buy it!   < previous page  page_536  next page > Page 536  header, 346  Relative property, 305  ReLink.htm Web page  code listing, 322-323  hyperlinks, 320-321  links[] array, 321  Repeat property, 305  Reset buttons, 134-142  Reset   method, 285  resetTime   function, 441  resetTime   method, 439-440  resizeBy   method, 260  setting hyperlinks HREF attribute, 321  Resize.htm Web page code listing, 125-126  ResizeTextbox   function, 123-124  resizeTo   method, 261  restoreData   function, 147, 148  RestoreGraphicsState   method, 285  resume   function, 445  resume   method, 432, 434, 435-436, 444  return   function, 63  returnValue property  window object, 373  window.event object, 256-257  RetVal.htm Web page  code listing, 453-454  displaying current animation delay in text box, 451   returning variable from getSpeed   method, 449-450  Get spin time button, 450  RetVal.java applet  code listing, 452-453  Rewrite   function, 325-326  rewriteHeader   function, 346-347  Rewrite.htm Web page  button, 325  code listing, 327  connecting button to function, 325  Rewrite function, 325-326  rotate   method, 299, 303  Rotate3RateDegrees   method, 289  Rotate.htm Web page  activating Sequencer control, 301-303  adding Sequencer control, 300-301  code listing, 303-304  graphic creation, 300  initializing action set, 302  rotating image in three dimensions, 303  starting Sequencer control, 302  Structured Graphics control, 300  rotateImage   function, 302  rotation, 288-291  RoundRect   method, 243, 285  S  SaveGraphicsState   method, 285  Schedule.htm Web page  checking time and writing page accordingly, 333   code listing, 336-338  current hour, 331  date and time, 331  displaying afternoon schedule, 333-334  displaying date and time with message, 331  displaying evening schedule, 334-335  displaying morning schedule, 332-333  scr property, 236  scripting objects, 312  Scriptlet1 object  MIME type, 104  textString property, 104-105  Scriptlet.htm Web page, 103  code listing, 106-107   . . .  tag, 103-104  scriptlets, 103-107  JScript, 103  scripts  enclosing statements in comments, 14  preventing from passing private information, 388  printing multiple lines on Web page, 38   . . .  tag, 2, 13-14, 185  adding event handlers, 213-214  Animation.htm Web page, 283  JavaScript version, 13  mouseOver event handlers, 210  original status bar text, 423  SRC attribute, 13  Web pages, 15   search property, 406  SecondaryFillColor   method, 285  secure keyword, 414  seek   method, 299, 306  select controls, 181-187  drop-down list, 182-183  event handlers, 181  form property, 181  installing, 183  installing options, 183-186  length property, 181, 189  methods, 181  multiple items in, 187-190  name property, 181  options[] internal array, 189  options property, 182  properties, 181-182  selectedIndex property, 182, 185  text of current selection, 185  text property, 182, 185     < previous page    page_536  next page >  If you like this book, buy it!   < previous page  page_537  next page > Page 537  type property, 182  select   method, 110, 126, 130    tag, 183  MULTIPLE option, 187-189  select1 control, 183  selectedIndex property, 182, 185  Select.htm Web page  code listing, 187  reporting selection made, 186  selecting text box text, 110  selectionMade   function, 184-185  self identifier, 352  self-contained objects, 69  self-modifying Web pages, 324  afternoon train schedule, 341  Download example, 328-330  installing select control, 183  installing select control options, 183-186  downloading large graphic confirm box, 328-329  evening train schedule, 341  hyperlinks in one frame and train schedule in another, 338-346  morning train schedule, 340-341  prompting user to click button, 325  prompting user to click button and rewrite page, 325-326  Railroad example, 338-346  Rewrite example, 325-327  rewriting based on time of day, 331-338   rewriting header, 346-348  writing documents to other frames, 340-342  semicolon  ;  at end of statements, 48  Sequence.htm Web page  code listing, 397  Next and Previous buttons, 394-395  setting up frames, 394-395  setCheckBox   function, 166, 168-169, 176-177  Sequencer control, 281  activating, 301-303  adding, 300-301  animation, 298-304  defining action set, 301  embedding in Web page, 299  events, 299  methods, 299  starting, 302  Set   function, 413  SetFillColor   method, 243, 245  SetFillStyle   method, 243  SetFocus   method, 282  SetFont   method, 243  SetGradientFill   method, 243  SetGradientShape   method, 243  SetHatchFill   method, 243  setInterval   method, 294-295  SetLineColor   method, 243, 245  SetLineStyle   method, 243  SetTextureFill   method, 243   setTime   function, 441  setTimeout   method, 276, 277, 278  ShowMessage   function, 410, 423-424  showModalDialog   method, 370, 371, 373  currentHour argument, 378  showTime   method, 458, 462  ShowWhatsThis   method, 282  showWindow   function, 455  s.htm file, 103, 104  siblingAbove property, 260  siblingBelow property, 260  sizing windows, 354  slideshow, 394-399  Next and Previous buttons, 395-396  reading top frame slide in, 396  slides, 394  tracking location, 395  slots, 84  small programs, 69  Sound property, 282  SourceURL property, 242  spline   method, 306  Sprite control, 281  src property, 70-71  layer object, 260  Start   method, 282, 290-291  startAnimation   function, 293-294, 296, 308-309  statements  Java in JavaScript, 454-458   performed after equality test, 41-42  semicolon  ;  at end of, 11, 48  status bar, changing text in, 423-425  Status.htm Web page  button, 423  code listing, 425  original status text, 423  resetting default status bar text, 423-424  stop   method, 299, 306  storing data in code, 147  String class, 79, 218  constructor, 83  String   constructor, 83  String object, 79-82  declaring, 82  doubling as variable type, 82  JavaScript methods, 80  JScript methods, 79  length property, 80, 81  methods, 79-80  string variables, 28  String.htm Web page, 80  code listing, 82     < previous page    page_537  next page >  If you like this book, buy it!   < previous page  page_538  next page > Page 538  strings  + operator, 32  displaying, 80  converting number representation to integer, 379  entering on Web pages, 367-370  parsing into floating point number, 379  passing from JavaScript to Java, 444-448  storing in array, 84-88  Struct.htm Web page  code listing, 249  drawing ovals, 247  drawing pie sections, 247-248  drawing rectangles, 246  fill color, 245  fill style, 246  naming   elements, 244  SetLineColor   method, 245  setting drawing colors, 245-246  Structured Graphics control creation, 244  Structured Graphics control, 241-249, 281, 299  CoordinateSystem property, 242  DrawingSurface property, 242  events, 244  ExtentHeight property, 242  ExtentLeft property, 242  ExtentTop property, 242  ExtentWidth property, 242   HighQuality property, 242  ID value, 241  Image property, 242  Library property, 242  methods, 242-243  MouseEventsEnabled property, 242  PreserveAspectRatio property, 242  properties, 242  Rotate.htm Web page, 300  SourceURL property, 242  Transform property, 242  using properties, 241  style classes, 482-484  popularity of, 487  style functions, 490-493  style inheritance, 488-490  style object  Internet Explorer, 476  properties, 226  style properties  CSS  Cascading Style Sheets , 476  Internet Explorer CSS, 496  StyleAttribute.htm Web page  blue header, 478  code listing, 479  StyleClass.htm Web page code listing, 500  StyleDiv.htm Web page  code listing, 491  defining new class, 488-489     element containing another   element, 489  StyleDynamic.htm Web page, 501  code listing, 503  enclosing text and buttons, 501-502  StyleFunction.htm Web page  checking time of day, 491-492  heading 1 tag, 492  setting heading 1 style, 490-491  sizing heading 1 element according to time, 491-492  StyleH.htm Web page  automatically applying new styles, 482  code listing, 482  resetting heading 1 fonts, 480  resetting heading 2 fonts, 480-481  setting up stylesheet, 480  StyleInherit.htm Web page  applying class to   element inside   element, 500-501  defining class1, 499-500  enclosing   element inside   element, 499  StyleMultiple.htm Web page  applying color to heading 1, 485  code listing, 488  overriding color setting, 485-486  red text, 485  setting all elements larger, 484  StyleP.htm Web page code listing, 498  styles, setting by ID, 484-488  stylesheets, 473, 474-478  external file holding, 475   fontSize property, 479  inheritance, 488-490  inline, 479  Internet Explorer and, 475-477  modifying individual HTML tags, 480-482  Netscape Navigator, 476-477  properties, 474  setting styles by ID, 484-488  style classes, 482-484  style functions, 490-493   . . .  tag, 474  StyleUnderline.htm Web page  code listing, 484  declaring new style class, 482  Submit buttons, 134-142  Submit.htm Web page  actions of, 140  code listing, 140-141  style classes used in HTML elements, 483  colored background, 135-136  form enclosed in table, 135-136  prompting user to enter information, 136     < previous page    page_538  next page >  If you like this book, buy it!   < previous page  page_539  next page > Page 539  substring   method, 406, 415  suspend   function, 445  suspend   method, 432, 434, 435-436, 444, 465-466  Suspend2.htm Web page  adding applet and Reset spin time button, 440-441  calling applet resetTime   function, 440-441  code listing, 443  Suspend2.java applet code listing, 442-443  Suspend.htm Web page  adding buttons, 435-436  code listing, 437-438  connecting buttons to functions, 435-436  placing Suspend.class applet in, 434-435  reaching applet from JavaScript, 436  Suspend.java applet  code listing, 433  compiling, 432  SwapImage.htm Web page, 213  code listing, 215  ImgOut   event handler, 213  ImgOver   event handler, 213  mouseOut event, 213  mouseOver event, 213  restoring first image, 214  swapping images, 213-215  Sweep translation, 287-288  adding event handlers to  . . .  tag, 213-214   switch statements, 41-46  break statement and, 42  variables and expressions, 42  switch.htm example, 43-45  code listing, 45-46   . . .  tag  ALIGN attribute, 164, 165  TabStop property, 282  Tag property, 282  T  tags  innerHTML property, 346, 347  Internet Explorer, 123  modifying with stylesheets, 480-482  outerHTML property, 346  taint   method, 388  taintEnabled   method, 388  tainting, 388  Target property, 305  Target1.htm Web page, 394  code listing, 398  Target2.htm Web page, 394, 395  code listing, 399  Target3.htm Web page, 394  code listing, 399  test variable, 42  testing  conditions, 33-34  for equality, 34-37   text  changing in status bar, 423-425  highlighting with mouse, 225-229  italics, 56  multiple lines of, 126-128  reading from URL, 406-407  underlining, 482-484  writing line to screen, 69  text areas, 126-129  button, 127  Display Message button, 128  event handlers, 126  guestbook forms, 137-138  methods, 125  Multiple.htm Web page, 188  multiple-selection select control, 188  properties, 125-126  sizing, 127  text boxes, 110-113  buttons, 114-115  default width, 112  file controls, 142  guestbook forms, 137-138  Hidden.htm Web page, 146  Hour.htm Web page, 377  Imap2.htm Web page, 409-410  Jumper.htm web page, 391-392  methods, 110  Mouser.htm Web page, 197   name property, 110  placing message in, 124-125  properties, 110  releasing check box input focus, 110  restoring check box input focus, 110  selecting text, 110  setting size with controls, 123-126  text controls. See text boxes  text editors, xx  Text   method, 243, 285  text property, 182, 185  text strings, 79  bold, 80  indicating length, 80  objects storing, 96-102  text type, 99    tag  COLS attribute, 127  ROWS attribute, 127  Textarea.htm Web page, 128    < previous page    page_539  next page >  If you like this book, buy it!   < previous page  page_540  next page > Page 540  code listing, 129  Textbox.htm Web page, 111-112  code listing, 113  textDecoration property, 482  text-decoration property, 498  textDecoration style property, 480  TextPoint   method, 285  textString property, 97-98, 103, 104-105  this keyword, 98  this.form argument, 116  Time property, 305  time variable, 439-440  TimerInterval property, 305  toLocaleString   method, 331-332  ToolTipText property, 282  Top property  DAViewerControl control, 282  top property, 396  layer object, 259  topmost windows, 352  toString   method, 217  Transform   method, 285  Transform property, 242  transformations, applying, 290  translation, 287-288  Twist rotation, 289  window percentages or pixel measurements, 283   type property  buttons, 114  check boxes, 152  file controls, 142  hidden controls, 146  password controls, 130  radio buttons, 158  select controls, 182  text areas, 125, 126  text boxes, 110  typeOf operator, 68  U-V  undeclared variables, 26, 28  underlining text, 482-484  unescape   method, 217  Unload event, 297  UpdateInterval property, 282  URLs  JavaScript statements as, 409  reading text sent in, 406-407  retrieving information from string, 405-408  UseJava.htm Web page  checking to See if window is open, 456-457  code listing, 457-458  connecting buttons to functions, 455  Show window and Hide window buttons, 454-455  showing and closing window, 455-456  sizing window, 456  text field message, 456   returning from Java to JavaScript, 449-454  displaying value in variable, 31-32  value property  buttons, 114  check boxes, 152  file controls, 142  hidden controls, 146, 147  password controls, 130  radio buttons, 158  text areas, 125, 126, 127-128  text boxes, 110, 117, 119  values  adding two, 61  var example, 29-33  var keyword, 28  var.htm Web page, 30-33  code listing, 33  variables, 24-26  adding data, 24, 26  Boolean, 28  declaring, 24, 26, 30  displaying value in, 31-32  global, 27, 28  local, 27, 28  naming conventions, 29  number, 28  operators, 24  placing value in, 26  scope, 27-28   string, 28  switch statements, 42  types, 28-29  undeclared, 26, 28  Vector   method, 288-289  VerticalFillScale   method, 285  visibility property, 259  Visible property, 282  vspace property, 236  W  Web browsers  changing text in status bar, 423-425  controlling where navigates to, 391-394  hiding layer elements from, 253  information about, 388, 389-391  JavaScript and, 3-10  navigator object, 198-199  not supporting JavaScript, 14  opening new windows, 221     < previous page    page_540  next page >  If you like this book, buy it!   < previous page  page_541  next page > Page 541  tracking where it has been, 399-404  type, 389  types of built-in objects, 79  version number and supported platform, 389-380  which one user has, 198-199  Web page editors, xx  Web pages  adding button, 20  Change Image button, 22  elements as member objects of document object, 315-316  embedding JavaScript in, 12-14  embedding Sequencer control, 299  forms, 71  hidden text data storage, 146  JavaScript area, 15  Path control, 305  placing controls on, 110  placing hyperlinks on, 209  positioning images, 250-253  printing multiple lines on, 38   . . .  tag, 15  self-modifying, 324  watching for user click, 18  working with HTML elements in, 2  writing directly into, 2  writing to example, 14-17  setting background color with controls, 120-122   Web servers  JavaScript and, 135  weekday variable, 372  Welcome.htm Web page  sending information back to, 134-135  checking for cookie existance, 418-419  code listing, 422  displaying users name, 419  prompt for user to type name, 419  reading user name from cookie, 419  WhatsThisHelpID property, 282  which property, 217  while statement, 53-57  loop index, 54  while.htm Web page, 53  code listing, 57  white.gif file, 236  Width property  DAViewerControl control, 282  window percentages or pixel measurements, 283  width property, 236  window identifier, 352  window object, 221-222, 312, 352-353  collections, 352  events, 352, 353  Internet Explorer, 352  methods, 352, 353  Netscape Navigator, 353  properties, 352, 353   returnValue property, 373  window.alert   method, 362  window.close   method, 356, 357  window.confirm   method, 364-365  window.event object  properties, 196-197  scrElement member, 255  window.event.altKey flag, 199  window.event.ctrlKey flag, 199  window.event.shiftKey flag, 199  window.open   method, 353, 354  Internet Explorer, 355  Netscape Navigator, 354  windows  controlling with keystrokes, 221-224  alert boxes, 362-363  closing, 354  confirm boxes, 364-366  dialog boxes, 370-376  entering string, 367-370  opening and sizing, 354  opening new, 353-359  parent, 352  passing URL of document to, 353  referring to, 352  rewriting in JavaScript from Java, 465-471  status bar, 354  status property, 425  topmost, 352   writing to opened, 359-361  Windows 95, canceling system drag and drop, 256-257  with statement, 92, 93-96  code block, 94  with.htm Web page, 94  code listing, 96  Wnd.htm Web page, 356-357  code listing, 358-359  write   method, 16, 86, 324, 338, 360, 467  writeln   method, 16, 69, 80, 86, 94, 311-312, 324  writeln   public method, 70  writing  to opened window, 359-361  to Web pages example, 14-17  writing line of text to screen, 69  X-Y-Z  x properties, 199  y properties, 199  zIndex property, 259  ZOrder   method, 282    < previous page    page_541  next page >  If you like this book, buy it!   < previous page  page_542  Page 542  About the Author  Steven Holzner is a top programmer and one of the most respected authors in the industry. With more than 35 books to  his credit, he has taught more than a million people how to program more effectively. Among his most popular titles are  XML Complete and Java 1.1: No Experience Required. Holzner lives in Cambridge, Massachusetts.    < previous page    page_542  If you like this book, buy it!
