Values, Units, and Colors  Eric A. Meyer  Beijing   Cambridge   Farnham   Köln   Sebastopol   Tokyo   Values, Units, and Colors by Eric A. Meyer  Copyright   2012 O’Reilly Media. All rights reserved. Printed in the United States of America.  Published by O’Reilly Media, Inc., 1005 Gravenstein Highway North, Sebastopol, CA 95472.  O’Reilly books may be purchased for educational, business, or sales promotional use. Online editions are also available for most titles  http:  my.safaribooksonline.com . For more information, contact our corporate institutional sales department: 800-998-9938 or corporate@oreilly.com.  Editors: Simon St. Laurent and Meghan Blanchette Production Editor: Kristen Borg Copyeditor: Rachel Leach Proofreader: O’Reilly Production Services  Cover Designer: Karen Montgomery Interior Designer: David Futato Illustrator: Robert Romano  Revision History for the First Edition:  2012-09-25  First release  See http:  oreilly.com catalog errata.csp?isbn=9781449342517 for release details.  Nutshell Handbook, the Nutshell Handbook logo, and the O’Reilly logo are registered trademarks of O’Reilly Media, Inc. Values, Units, and Colors, the image of a salmon, and related trade dress are trade- marks of O’Reilly Media, Inc.  Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and O’Reilly Media, Inc., was aware of a trademark claim, the designations have been printed in caps or initial caps.  While every precaution has been taken in the preparation of this book, the publisher and authors assume no responsibility for errors or omissions, or for damages resulting from the use of the information con- tained herein.  ISBN: 978-1-449-34251-7  [LSI]  1348247002   Table of Contents  Preface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . v  Distances  Numbers and Percentages  Integers Numbers Percentages  Keywords, Strings, and Other Text Values  Keywords Strings URLs Images Identifiers  Values, Units, and Colors  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1 1 1 3 4 5 6 6 6 6 7 7 7 10 11 16 16 17 21 24 25 26 26 27 28  Angles Time and Frequency Position Summary Color Equivalence Table  Named Colors Colors by RGB and RGBa Colors by HSL and HSLa Bringing the Colors Together  Absolute Length Units Resolution Units Relative Length Units  Color  iii    Preface  Conventions Used in This Book The following typographical conventions are used in this book:  Italic  Constant width  Constant width bold  Constant width italic  Indicates new terms, URLs, email addresses, filenames, and file extensions.  Used for program listings, as well as within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.  Shows commands or other text that should be typed literally by the user.  Shows text that should be replaced with user-supplied values or by values deter- mined by context.  This icon signifies a tip, suggestion, or general note.  This icon indicates a warning or caution.  Using Code Examples This book is here to help you get your job done. In general, you may use the code in this book in your programs and documentation. You do not need to contact us for permission unless you’re reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. Selling or distributing a CD-ROM of examples from O’Reilly books does  v   require permission. Answering a question by citing this book and quoting example code does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission. We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: “Values, Units, and Colors by Eric A. Meyer  O’Reilly . Copyright 2012 O’Reilly Media, Inc., 978-1-449-34251-7.” If you feel your use of code examples falls outside fair use or the permission given above, feel free to contact us at permissions@oreilly.com.  Safari® Books Online  Safari Books Online  www.safaribooksonline.com  is an on-demand digital library that delivers expert content in both book and video form from the world’s leading authors in technology and business.  Technology professionals, software developers, web designers, and business and cre- ative  professionals  use  Safari  Books  Online  as  their  primary  resource  for  research, problem solving, learning, and certification training. Safari Books Online offers a range of product mixes and pricing programs for organi- zations, government agencies, and individuals. Subscribers have access to thousands of books, training videos, and prepublication manuscripts in one fully searchable da- tabase from publishers like O’Reilly Media, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, Course Tech- nology, and dozens more. For more information about Safari Books Online, please visit us online.  How to Contact Us Please address comments and questions concerning this book to the publisher:  O’Reilly Media, Inc. 1005 Gravenstein Highway North Sebastopol, CA 95472 800-998-9938  in the United States or Canada  707-829-0515  international or local  707-829-0104  fax   We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at http:  oreil.ly values-units-colors. To  comment  or  ask  technical  questions  about  this  book,  send  email  to bookquestions@oreilly.com.  vi   Preface   For more information about our books, courses, conferences, and news, see our website at http:  www.oreilly.com. Find us on Facebook: http:  facebook.com oreilly Follow us on Twitter: http:  twitter.com oreillymedia Watch us on YouTube: http:  www.youtube.com oreillymedia  Preface  vii    Values, Units, and Colors  In this book, we’ll tackle features that are the basis for almost everything you can do with CSS: the units that affect the colors, distances, and sizes of a whole host of prop- erties, as well as the units that help to define those values. Without units, you couldn’t declare that an image should have 10 pixels of blank space around it, or that a heading’s text should be a certain size. By understanding the concepts put forth here, you’ll be able to learn and use the rest of CSS much more quickly.  Keywords, Strings, and Other Text Values Of course, everything in a style sheet is text, but there are certain value types that directly represent strings of text as opposed to, say, numbers or colors. Included in this category are URLs and, interestingly enough, images.  Keywords For those times when a value needs to be described with a word of some kind, there are keywords. A very common example is the keyword none, which is distinct from 0  zero . Thus, to remove the underline from links in an HTML document, you would write:  a:link, a:visited {text-decoration: none;}  Similarly, if you want to force underlines on the links, then you would use the keyword underline. If a property accepts keywords, then its keywords will be defined only for the scope of that property. If two properties use the same word as a keyword, the behavior of the keyword for one property will not necessarily be shared with the other. As an example, normal,  as  defined  for  letter-spacing,  means  something  very  different  than  the normal defined for font-style. CSS3  defines  two  “global”  keywords,  one  of  which  has  fairly  widespread  support: inherit and initial.  1   inherit The keyword inherit makes the value of a property on an element the same as the value of that property on its parent element. In other words, it forces inheritance to occur even in situations where it would not normally operate. In many cases, you don’t need to specify inheritance, since many properties inherit naturally. Nevertheless, inherit can still be very useful. For example, consider the following styles and markup:  toolbar {background: blue; color: white;}     One    Two    Three     The div itself will have a blue background and a white foreground, but the links will be styled according to the browser’s preference settings. They’ll most likely end up as blue text on a blue background, with white vertical bars between them. You could write a rule that explicitly sets the links in the “toolbar” to be white, but you can make things a little more robust by using inherit. You simply add the following rule to the style sheet:  toolbar a {color: inherit;}  This will cause the links to use the inherited value of color in place of the user agent’s default  styles.  Ordinarily,  directly  assigned  styles  override  inherited  styles,  but inherit can undo that behavior. Similarly, you can pull a property value down from a parent even if it wouldn’t happen normally. Take border, for example, which is  rightfully  not inherited. If you want a span to inherit the border of its parent, all you need is span {border: inherit;}. More likely, though, you just want the border on a span to use the same border color as its parent. In that case span {border-color: inherit;} will do the trick.  Internet Explorer did not support inherit until IE8.  initial The keyword initial sets the value of a property to the defined initial value, which in a way means it “resets” the value. For example, the default value of  font-weight is normal. Thus, declaring font-weight: initial is the same as declaring font-weight: normal.  2  Values, Units, and Colors   This might seem a little bit silly until you consider that not all values have explicitly defined initial values. For example, the initial value for color is “depends on user agent.” That’s not a funky keyword you should type! What it means is that the default value of color depends on things like the preferences settings in a browser. While almost nobody changes the default text color setting from black, someone might set it to a dark gray or even a bright red. By declaring color: initial;, you’re telling the browser to set the color of the element to whatever the user’s default color is set to be.  As of mid-2012, there was limited browser support for initial: Safari and  Chrome  supported  it  as-is,  whereas  Firefox  supported  it  as –moz-initial.  Strings A string value is an arbitrary sequence of characters wrapped in either single or double quotes, and is represented in value definitions with  . Two simple examples:  "I like to play with strings." 'Strings are fun to play with.'  Note that the quotes balance, which is to say that you always start and end with the same kind of quotes. Getting this wrong can lead to all kinds of parsing problems, since starting with one kind of quote and trying to end with the other means the string won’t actually  be  terminated.  You  could  accidentally  incorporate  following  rules  into  the string that way! If you want to put quote marks inside strings, that’s okay as long as they’re either not the kind you used to enclose the string or are escaped using a backslash.  "I've always liked to play with strings." 'He said to me, "I like to play with strings."' "It's been said that \"haste makes waste.\"" 'There\'s never been a "string theory" that I\'ve liked.'  Note that the only acceptable string delimiters are ' and ", sometimes called “straight quotes.” That means you can’t use “curly” or “smart” quotes to begin or end a string value. You can use them inside a string value, though, and they don’t have to be escaped.  "It’s been said that “haste makes waste.”" 'There’s never been a “string theory” that I’ve liked.'  Of course, this requires that you use Unicode encoding for your documents, but you should be doing that regardless. If you have some reason to include a newline in your string value, you can do that by escaping the newline itself. CSS will then remove it, making things as if it had never been there. Thus, the following two string values are identical from a CSS point of view:  Keywords, Strings, and Other Text Values   3   "This is the right place \ for a newline." "This is the right place for a newline."  If, on the other hand, you actually want a string value that includes a newline character, then use the Unicode reference \A where you want the newline to occur.  "This is a better place \Afor a newline."  URLs If you’ve written web pages, you’re obviously familiar with URLs  or, as in CSS2.1, URIs . Whenever you need to refer to one—as in the @import statement, which is used when importing an external style sheet—the general format is:  url protocol:  server pathname   This example defines what is known as an absolute URL. By absolute, I mean a URL that will work no matter where  or rather, in what page  it’s found, because it defines an absolute location in web space. Let’s say that you have a server called web.waffles.org  http:  web.waffles.org . On that server, there is a directory called pix, and in this di- rectory is an image waffle22.gif. In this case, the absolute URL of that image would be:  http:  web.waffles.org pix waffle22.gif  This URL is valid no matter where it is found, whether the page that contains it is located on the server web.waffles.org or web.pancakes.com. The other type of URL is a relative URL, so named because it specifies a location that is relative to the document that uses it. If you’re referring to a relative location, such as a file in the same directory as your web page, then the general format is:  This works only if the image is on the same server as the page that contains the URL. For argument’s sake, assume that you have a web page located at http:  web.waffles.org  syrup.html and that you want the image waffle22.gif to appear on this page. In that case, the URL would be:  url pathname   pix waffle22.gif  This path works because the web browser knows that it should start with the place it found the web document and then add the relative URL. In this case, the pathname pix waffle22.gif added to the server name http:  web.waffles.org equals http:  web.waf fles.org pix waffle22.gif. You can almost always use an absolute URL in place of a rel- ative URL; it doesn’t matter which you use, as long as it defines a valid location. In CSS, relative URLs are relative to the style sheet itself, not to the HTML document that uses the style sheet. For example, you may have an external style sheet that imports another style sheet. If you use a relative URL to import the second style sheet, it must be relative to the first style sheet.  4  Values, Units, and Colors   As  an  example,  consider  an  HTML  document  at  http:  web.waffles.org toppings tips .html, which has a link to the style sheet http:  web.waffles.org styles basic.css:  <link rel="stylesheet" type="text css"     href="http:  web.waffles.org styles basic.css">  Inside the file basic.css is an @import statement referring to another style sheet:  @import url special toppings.css ;  This @import will cause the browser to look for the style sheet at http:  web.waffles.org  styles special toppings.css, not at http:  web.waffles.org toppings special toppings.css. If you have a style sheet at the latter location, then the @import in basic.css should read:  @import url http:  web.waffles.org toppings special toppings.css ;  Note that there cannot be a space between the url and the opening parenthesis:  body {background: url http:  www.pix.web picture1.jpg ;}    * correct *  body {background: url   images picture2.jpg ;}           * INCORRECT *   If the space is present, the entire declaration will be invalidated and thus ignored.  Images An image value is a reference to an image, as you might have guessed. Its syntax rep- resentation is  . At the most basic level of support, which his to say the one every CSS engine on the planet would understand, an   value is simply a   value. In more advanced user agents,   stands for one of the following:        A URL identifier of an external resource; in this case, the URL of an image.  Perhaps unsurprisingly, a list of images. As of mid-2012 there was no support for this value type.    Refers to an element within the document. The element is then copied and used as an image, possibly as a “live” copy—that is to say, a copy that updates if the element is altered through Dom scripting or user interaction. As of mid-2012, only Firefox supported this capability.     Refers to either a linear or radial gradient image. Gradients are fairly complex.  Keywords, Strings, and Other Text Values   5   Identifiers There are a few properties that accept an identifier value, which is a user-defined iden- tifier of some kind; the most common example is generated list counters. They are represented in the value syntax as  . Identifiers themselves are strings, and are case-sensitive; thus, myID and MyID are, as far as CSS is concerned, completely distinct and unrelated to each other. In cases where a property accepts both an identifier and one or more keywords, the user cannot define an identifier identical to a valid keyword.  Numbers and Percentages These value types are special because they serve as the foundation for so many other values types. For example, font sizes can be defined using the em identifier  covered later in this text  preceded by a number. But what kind of number? Defining the types of numbers here lets us speak clearly later on.  Integers An integer value is about as simple as it gets: one or more numbers, optionally prefixed by a + or − sign to indicate a positive or negative value. That’s it. Integer values are represented in value syntax as  . Examples include 13, −42, 712, and 1066. Integer values that fall outside a defined range are, by default, considered invalid and cause the entire declaration to be ignored. However, some properties define behavior that causes values outside the accepted range to be set to the accepted value closest to the declared value. In cases  such as the property z-index  where there is no restricted range, user agents must support values up to ±1,073,741,824  ±230 .  Numbers A number value is either an    or a real number, which is to say an integer followed by a dot and then some number of following integers. Additionally, it can be prefixed by either + or − to indicate positive or negative values. Number values are represented  in  value  syntax  as   .  Examples  include  2.7183,  −3.1416,  and 6.2832. The reason a   can be an   and yet there are separate value types is that some properties will only accept integers  e.g., z-index , whereas others will accept any real number  e.g.,  opacity . As with integer values, number values may have limits imposed on them by a property definition; for example, opacity restricts its value to be any valid   in the range 0 to 1, inclusive. As with integers, number values that fall outside a defined range are, by default, considered invalid and cause the entire declaration to be ignored. However, some properties define behavior that causes values outside the accepted range to be set to the accepted value closest to the declared value.  6  Values, Units, and Colors   Percentages A percentage value is a   followed by a percentage sign  % , and is represented in value syntax as  . Examples would include 50% and 33.333%. Percentage values are always relative to another value, which can be anything—the value of another property of the same element, a value inherited from the parent element, or a value of an ancestor element. Any property that accepts percentage values will define any re- strictions on the range of allowed percentage values, and will also define the way in which the percentage is relatively calculated.  Distances Many CSS properties, such as margins, depend on length measurements to properly display various page elements. It’s no surprise, then, that there are a number of ways to measure length in CSS. All length units can be expressed as either positive or negative numbers followed by a label  although some properties will accept only positive numbers . You can also use real numbers—that is, numbers with decimal fractions, such as 10.5 or 4.561. All length units are followed by short abbreviation  usually two characters  that represents the actual unit of length being specified, such as in  inches  or pt  points . The only ex- ception to this rule is a length of 0  zero , which need not be followed by a unit. These length units are divided into two types: absolute length units and relative length units.  Absolute Length Units We’ll start with absolute units because they’re easiest to understand, despite the fact that they’re almost unusable in regular web design. The six types of absolute units are as follows:  Inches  in   Centimeters  cm   Millimeters  mm   As you might expect, this notation refers to the inches you’d find on a ruler in the United States.  The fact that this unit is in the specification, even though almost the entire world uses the metric system, is an interesting insight into the perva- siveness of U.S. interests on the Internet—but let’s not get into virtual sociopolitical theory right now.   Refers to the centimeters that you’d find on rulers the world over. There are 2.54 centimeters to an inch, and one centimeter equals 0.394 inches.  For those Americans who are metric-challenged, there are 10 millimeters to a cen- timeter, so an inch equals 25.4 millimeters, and a millimeter equals 0.0394 inches.  Distances   7   Points  pt   Picas  pc   Pixels  px   Points are standard typographical measurements that have been used by printers and typesetters for decades and by word processing programs for many years. Tra- ditionally, there are 72 points to an inch  points were defined before widespread use of the metric system . Therefore, the capital letters of text set to 12 points should be one-sixth of an inch tall. For example, p {font-size: 18pt;} is equivalent to p {font-size: 0.25in;}.  Picas  are  another  typographical  term.  A  pica  is  equivalent  to  12  points,  which means there are 6 picas to an inch. As just shown, the capital letters of text set to 1 pica should be one-sixth of an inch tall. For example,  p {font-size:  1.5pc;} would set text to the same size as the example declarations found in the definition of points.  A pixel is a small box on screen, but CSS defines pixels more abstractly. In CSS terms, a pixel is defined to be the size required to yield 96 pixels per inch. Many user agents ignore this definition in favor of simply addressing the pixels on the monitor. Scaling factors are brought into play when page zooming or printing, where an element 100px wide can be rendered more than 100 device dots wide.  Of course, these units are really useful only if the browser knows all the details of the monitor on which your page is displayed, the printer you’re using, or whatever other user agent might apply. On a web browser, display is affected by the size of the monitor and the resolution to which the monitor is set—and there isn’t much that you, as the author, can do about these factors. You can only hope that, if nothing else, the meas- urements will be consistent in relation to each other—that is, that a setting of 1.0in will be twice as large as 0.5in, as shown in Figure 1.  Figure 1. Setting absolute-length left margins  Nevertheless, despite all that, let’s make the highly suspect assumption that your com- puter knows enough about its display system to accurately reproduce real-world meas- urements. In that case, you could make sure every paragraph has a top margin of half an inch by declaring p {margin-top: 0.5in;}. Regardless of font size or any other cir- cumstances, a paragraph will have a half-inch top margin. Absolute units are much more useful in defining style sheets for printed documents, where measuring things in terms of inches, points, and picas is much more common.  8  Values, Units, and Colors   Pixel lengths On  the  face  of  things,  pixels  are  straightforward.  If  you  look  at  a  monitor  closely enough, you can see that it’s broken up into a grid of tiny little boxes. Each box is a pixel. If you define an element to be a certain number of pixels tall and wide, as in the following markup:    The following image is 20 pixels tall and wide: <img src="test.gif"   style="width: 20px; height: 20px;" alt=""  >    …then it follows that the element will be that many monitor elements tall and wide, as shown in Figure 2.  Figure 2. Using pixel lengths  In general, if you declare something like font-size: 18px, a web browser will almost certainly use actual pixels on your monitor—after all, they’re already there—but with other display devices, like printers, the user agent will have to rescale pixel lengths to something more sensible. In other words, the printing code has to figure out how many dots there are in a pixel. Unfortunately, there is a potential drawback to using pixels. If you set font sizes in pixels, then users of Internet Explorer for Windows previous to IE7 cannot resize the text using the Text Size menu in their browser. This can be a problem if your text is too small for a user to comfortably read. If you use more flexible measurements, such as em, the user can resize text.  If you’re exceedingly protective of your design, you might call that a drawback, of course.   One example of a problem with pixel measurements can be found in an early CSS1 implementation. In Internet Explorer 3.x, when a document was printed, IE3 assumed that 18px was the same as 18 dots, which on a 600dpi printer works out to be 18 600, or 3 100, of an inch—or, if you prefer, .03in. That’s pretty small text!  On the other hand, pixel measurements are perfect for expressing the size of images, which are already a certain number of pixels tall and wide. In fact, the only time you would not want pixels to express image size is when you want them scaled along with the size of the text. This is an admirable and sometimes useful approach. You do end up relying on the image-scaling routines in user agents, but those have been getting pretty good. Scaling of images really makes sense with vector-based images like SVG, of course.  Distances   9   Pixel theory In its discussion of pixels, the CSS specification recommends that in cases where a display type is significantly different than 96 pixels per inch  ppi , user agents should scale pixel measurements to a “reference pixel.” CSS2 recommended 90ppi as the ref- erence pixel, but CSS2.1 and CSS3 recommend 96ppi. The most common example is a printer, which has dots instead of pixels, and which has a lot more dots per inch than 96! In printing web content, then, it may assume 96 pixels per inch and scale its output accordingly. If a display’s resolution is set to 1,024 pixels wide by 768 pixels tall, its screen size is exactly ten and two-thirds inches wide by eight inches tall, and the screen it is filled entirely by the display pixels, then each pixel will be 1 96 of an inch wide and tall. As you might guess, this scenario is a fairly rare occurrence. So, on most displays, the actual number of pixels per inch  ppi  is higher than 96—sometimes much higher. The Retina display on an iPhone 4S, for example, is 326ppi; the display on the iPad 3,264ppi.  As a Windows 7 user, you should be able to set your display driver to make the display of elements correspond correctly to real-world meas- urements. To do so, click Start→Control Panel. In the Control Panel click Display; then click “Set custom text size  DPI ” in the left sidebar; then hold a ruler up to the screen and move the slider until the onscreen ruler matches the physical ruler. Click OK until you’re free of dialog boxes, and you’re set. In Windows XP, the path to the ruler dialog is Start→Control Panel; double-click Display; click the Settings tab; then click Advanced to re- veal a dialog box  which may differ on each PC . You should see a drop- down or other form control labeled “Font Size;” select “Other.”  Resolution Units With the advent of media queries, three new unit types were introduced in order to be able to describe display resolution:  Dots per inch  dpi   The number of display dots per linear inch. This can refer to the dots in a paper printer’s output, the physical pixels in an LED monitor or other device, or the elements in an e-ink display such as that used by a Kindle.  Dots per centimeter  dpcm   Dots per pixel unit  dppx   Same as dpi, except the linear measure is one centimeter instead of one inch.  The number of display dots per CSS px unit, as described previously. As of CSS3, 1dppx is equivalent to 96dpi because CSS defines pixel units at that ratio. Of course, that ratio could change in future versions of CSS.  10  Values, Units, and Colors   As of mid-2012, these units are only used in the context of media queries. As an ex- ample, an author can set a media block to be used only on displays that have higher than 500dpi:  @media  min-resolution: 500dpi  {...}  Interestingly, dppx is not defined by the Media Queries module, but appears in the Units and Values modules alongside dpi and dpcm, which are defined in Media Queries. What this means for the future is by no means clear.  Relative Length Units Relative units are so called because they are measured in relation to other things. The actual  or absolute  distance they measure can change due to factors beyond their con- trol, such as screen resolution, the width of the viewing area, the user’s preference settings, and a whole host of other things. In addition, for some relative units, their size is almost always relative to the element that uses them and will thus change from ele- ment to element.  em and ex units First, let’s consider em and ex, which are closely related. In CSS, one “em” is defined to be the value of font-size for a given font. If the font-size of an element is 14 pixels, then for that element, 1em is equal to 14 pixels. Obviously, this value can change from element to element. For example, let’s say you have an h1 with a font size of 24 pixels, an h2 element with a font size of 18 pixels, and a paragraph with a font size of 12 pixels. If you set the left margin of all three at 1em, they will have left margins of 24 pixels, 18 pixels, and 12 pixels, respectively:  h1 {font-size: 24px;} h2 {font-size: 18px;} p {font-size: 12px;} h1, h2, p {margin-left: 1em;} small {font-size: 0.8em;}   Left margin =  24 pixels    Left margin =  18 pixels    Left margin =  12 pixels    When setting the size of the font, on the other hand, the value of em is relative to the font size of the parent element, as illustrated by Figure 3.  Figure 3. Using em for margins and font sizing  Distances   11   In theory, one “em” is equal to the width of a lowercase “m” in the font used—that’s where the name comes from, in fact. It’s an old typographer’s term. However, this is not assured in CSS. ex, on the other hand, refers to the height of a lowercase x in the font being used. Therefore, if you have two paragraphs in which the text is 24 points in size, but each paragraph uses a different font, then the value of ex could be different for each para- graph. This is because different fonts have different heights for x, as you can see in Figure 4. Even though the examples use 24-point text—and therefore, each example’s em value is 24 points—the x-height for each is different.  Figure 4. Varying x-heights  The rem unit Like the em unit, the rem unit is based on declared font size. The difference—and it’s a doozy—is that whereas em is calculated using the font size of the element to which it’s applied,  rem is always calculated using the root element. In HTML, that’s the  html element. Thus, declaring any element to have font-size: 1rem; is setting it to have the same font-size value as the root element of the document.  12  Values, Units, and Colors   As an example, consider the following markup fragment. It will have the result shown in Figure 5.    This paragraph has the same font size as the root element thanks to inheritance.       This paragraph has the same font size as its parent  element.     This paragraph has the same font size as the root  element.     Figure 5. ems versus rems  Basically, rem acts as a reset for font size: no matter what relative font sizing has hap- pened to the ancestors of an element, giving it font-size: 1rem; will put it right back where the root element is set. This will usually be the user’s default font size, unless of course you  or the user  have set the root element to a specific font size. For example, given this declaration, 1rem will always be equivalent to 13px:  However, given this declaration, 1rem will always be equivalent to three-quarters the user’s default font size:  html {font-size: 13px;}  html {font-size: 75%;}  In this case, if the user’s default is 16 pixels, then 1rem will equal 12px. If the user has actually set their default to 12 pixels—a few people do this—then 1rem will equal 9px; if the default setting is 20 pixels, then 1rem equals 15px. And so on. Of course, you are not restricted to the value 1rem. Any real number can be used, just as with the em unit, so you can do fun things like set all of your headings to be multiples of the root element’s font size:  h1 {font-size: 2rem;} h2 {font-size: 1.75rem;} h3 {font-size: 1.4rem;} h4 {font-size: 1.1rem;} h5 {font-size: 1rem;} h6 {font-size: 0.8rem;}  As of mid-2012, support for rem was fairly widespread, missing only in older versions of browsers that could still be hanging around.  Distances   13   The ch unit An interesting addition to CSS3 is the ch unit, which is broadly meant to represent “one character.” The way it is defined in CSS3 is:  Equal to the advance measure of the “0”  ZERO, U+0030  glyph found in the font used to render it.  The term “advance measure” is actually a CSS-ism that corresponds to the term “ad- vance width” in font typography.  CSS uses the term “measure” because some scripts are not right-to-left or left-to-right, and so may have an advance height rather than an advance width.  Without getting into too many details, a character glyph’s advance width is the distance from the start of a character glyph to the start of the next. This generally corresponds to the width of the glyph itself plus any built-in spacing to the sides.  Although that built-in spacing can be either positive or negative.  As mentioned previously, CSS pins the ch unit to the advance width of a zero in a given font. This is in parallel to the way that em is calculated with respect to the font-size value of an element. The easiest way to demonstrate this unit is to run a bunch of zeroes together and then set an image to have a width with the same number of ch units as the number of zeroes, as shown in Figure 6.  img {height: 1em; width: 25ch;}  Figure 6. Character-relative sizing  14  Values, Units, and Colors   Given a monospace font, all characters are by definition 1ch wide. In any proportional face type, which is what the vast majority of Western typefaces are, characters may be wider or narrower than the “0” and so cannot be assumed to be 1ch wide.  As of mid-2012, support for ch was limited to Firefox.  Viewport-relative units Another  new  addition  in  CSS3  are  the  three  viewport-relative  size  units.  These  are calculated with respect to the size of the viewport—browser window, printable area, mobile device display, etc.  Viewport width unit  vw   This unit is calculated with respect to the viewport’s width, which is divided by 100. Therefore, if the viewport is 937 pixels wide, 1vw is equal to 9.37px. If the viewport’s width changes, say by dragging the browser window wider or more narrow, the value of vw changes along with it.  Viewport height unit  vh   This unit is calculated with respect to the viewport’s height, which is divided by 100. Therefore, if the viewport is 650 pixels tall, 1vh is equal to 6.5px. If the view- port’s height changes, say by dragging the browser window taller or shorter, the value of vh changes along with it.  Viewport minimum unit  vmin   This unit is 1 100 of the viewport’s width or height, whichever is lesser. Thus, given a viewport that is 937 pixels wide by 650 pixels tall, 1vmin is equal to 6.5px.  These units are particularly handy for creating full-viewport interfaces, such as those one would expect to find on a mobile device, because it can allow elements to be sized compared to the viewport and not any of the elements within the document tree. It’s thus very simple to fill up the entire viewport, or at least major portions of it, and not have to worry about the precise dimensions of the actual viewport in any particular case. Here’s a very basic example of viewport-relative sizing, which is illustrated in Figure 7.  div {width: 50vh; height: 33vw; background: gray;}  An interesting  though perhaps not useful  fact about these units is that they aren’t bound to their own primary axis. Thus, for example, you can declare width: 25vh; to make an element as wide as one-quarter the height of the viewport.  As of mid-2012, support for these units was limited to Internet Explorer 9 and above.  Distances   15   Figure 7. Viewport-relative sizing  Color One of the first questions every starting web author asks is, “How do I set colors on my page?” Under HTML, you have two choices: you could use one of a small number of colors with names, such as red or purple, or employ a vaguely cryptic method using hexadecimal codes. Both of these methods for describing colors remain in CSS, along with some other—and, I think, more intuitive—methods.  Named Colors Assuming  that  you’re  content  to  pick  from  a  small,  basic  set  of  colors,  the  easiest method is simply to use the name of the color you want. CSS calls these color choices, logically enough, named colors. As of CSS3, the CSS color specification defines 16 basic color keywords, which are the 16 colors defined in HTML 4.01, as shown in Table 1.  Table 1. The basic 16 color keywords  aqua  black  blue  fuchsia  gray  green  lime  maroon  navy  olive  purple  red  silver  teal  white  yellow  So, let’s say you want all first-level headings to be maroon. The best declaration would be:  h1 {color: maroon;}  16  Values, Units, and Colors   Simple and straightforward, isn’t it? Figure 8 shows a few more examples:  h1 {color: silver;} h2 {color: fuchsia;} h3 {color: navy;}  Figure 8. Naming colors  Of course, you’ve probably seen  and maybe even used  color names other than the ones listed earlier. For example, if you specify:  h1 {color: lightgreen;}  As of the CSS3 color specification, the 16 colors from HTML 4.01 have been subsumed into a longer list of 147 color keywords. This extended list is based on the standard X11 RGB values that have been in use for decades, and have been recognized by brows- ers for many years, with the addition of some color names from SVG  mostly involving variants of “gray” and “grey” . A table of color equivalents for all 147 keywords defined in the CSS Color Module Level 3 is given in “Color Equivalence Table” on page 28. Fortunately, there are more detailed and precise ways to specify colors in CSS. The advantage is that, with these methods, you can specify any color in the color spectrum, not just 17  or 140  named colors.  Colors by RGB and RGBa Computers create colors by combining different levels of red, green, and blue, a com- bination that is often referred to as RGB color. Each point of display is known as a pixel, which is a term discussed earlier in the chapter. Given the way colors are created on a monitor, it makes sense that you should have direct access to those colors, determining your own mixture of the three for maximum control. That solution is complex, but possible, and the payoffs are worth it because there are very few limits on which colors you can produce. There are four ways to affect color in this manner.  Functional RGB colors There are two color value types that use functional RGB notation as opposed to hexa- decimal notation. The generic syntax for this type of color value is rgb color , where color is expressed using a triplet of either percentages or integers. The percentage values can be in the range 0%–100%, and the integers can be in the range 0–255.  Color   17   Thus, to specify white and black, respectively, using percentage notation, the values would be:  Using the integer-triplet notation, the same colors would be represented as:  rgb 100%,100%,100%  rgb 0%,0%,0%   rgb 255,255,255  rgb 0,0,0   Assume you want your h1 elements to be a shade of red that lies between the values for red and maroon. red is equivalent to rgb 100%,0%,0% , whereas maroon is equal to  50%, 0%,0% . To get a color between those two, you might try this:  h1 {color: rgb 75%,0%,0% ;}  This makes the red component of the color lighter than maroon, but darker than red. If, on the other hand, you want to create a pale red color, you would raise the green and blue levels:  h1 {color: rgb 75%,50%,50% ;}  The closest equivalent color using integer-triplet notation is:  h1 {color: rgb 191,127,127 ;}  The easiest way to visualize how these values correspond to color is to create a table of gray values. The result is shown in Figure 9:  p.one {color: rgb 0%,0%,0% ;} p.two {color: rgb 20%,20%,20% ;} p.three {color: rgb 40%,40%,40% ;} p.four {color: rgb 60%,60%,60% ;} p.five {color: rgb 80%,80%,80% ;} p.six {color: rgb 0,0,0 ;} p.seven {color: rgb 51,51,51 ;} p.eight {color: rgb 102,102,102 ;} p.nine {color: rgb 153,153,153 ;} p.ten {color: rgb 204,204,204 ;}  Figure 9. Text set in shades of gray  18  Values, Units, and Colors   Of course, since we’re dealing in shades of gray, all three RGB values are the same in each statement. If any one of them were different from the others, then a color hue would start to emerge. If, for example, rgb 50%,50%,50%  were modified to be rgb 50%, 50%,60% , the result would be a medium-dark color with just a hint of blue. It is possible to use fractional numbers in percentage notation. You might, for some reason, want to specify that a color be exactly 25.5 percent red, 40 percent green, and 98.6 percent blue:  h2 {color: rgb 25.5%,40%,98.6% ;}  A user agent that ignores the decimal points  and some do  should round the value to the nearest integer, resulting in a declared value of rgb 26%,40%,99% . In integer triplets, of course, you are limited to integers. Values that fall outside the allowed range for each notation are “clipped” to the nearest range edge, meaning that a value that is greater than 100% or less than 0% will default to those allowed extremes. Thus, the following declarations would be treated as if they were the values indicated in the comments:  P.one {color: rgb 300%,4200%,110% ;}    *  100%,100%,100%  *  P.two {color: rgb 0%,-40%,-5000% ;}    *  0%,0%,0%  *  p.three {color: rgb 42,444,-13 ;}     * 42,255,0  *   Conversion between percentages and integers may seem arbitrary, but there’s no need to guess at the integer you want—there’s a simple formula for calculating them. If you know the percentages for each of the RGB levels you want, then you need only apply them to the number 255 to get the resulting values. Let’s say you have a color of 25 percent red, 37.5 percent green, and 60 percent blue. Multiply each of these percentages by 255, and you get 63.75, 95.625, and 153. Round these values to the nearest integers, and voilà: rgb 64,96,153 . Of course, if you already know the percentage values, there isn’t much point in con- verting them into integers. Integer notation is more useful for people who use programs such as Photoshop, which can display integer values in the “Info” dialog, or for those who are so familiar with the technical details of color generation that they normally think in values of 0–255.  RGBa colors As of CSS3, the two functional RGB notations were extended into a functional RGBa notation. This notation simply adds an alpha value to the end of the RGB triplets; thus, “red-green-blue-alpha” becomes RGBa. The alpha stands for alpha channel, which is a measure of opacity. For example, suppose you wanted an element’s text to be half-opaque white. That way, any background color behind the text would “shine through,” mixing with the half- transparent white. You would write one of the following two values:  Color   19   rgba 255,255,255,0.5  rgba 100%,100%,100%,0.5   To make a color completely transparent, you simply set the alpha value to 0; to be completely opaque, the correct value is 1. Thus, rgb 0,0,0  and rgba 0,0,0,1  will yield precisely the same result  black . Figure 10 shows a series of paragraphs set in increas- ingly transparent black, which is the result of the following rules.  p.one {color: rgba 0,0,0,1 ;} p.two {color: rgba 0%,0%,0%,0.8 ;} p.three {color: rgba 0,0,0,0.6 ;} p.four {color: rgba 0%,0%,0%,0.4 ;} p.five {color: rgba 0,0,0,0.2 ;}  Figure 10. Text set in progressive translucency  As you’ve no doubt already inferred, alpha values are always real numbers in the range 0 to 1. Any value outside that range will either be ignored or reset to the nearest valid alpha value. You cannot use   to represent alpha values, despite the math- ematical equivalence.  Hexadecimal RGB colors CSS allows you to define a color using the same hexadecimal color notation so familiar to old-school HTML web authors:  h1 {color: FF0000;}    * set H1s to red *  h2 {color: 903BC0;}    * set H2s to a dusky purple *  h3 {color: 000000;}    * set H3s to black *  h4 {color: 808080;}    * set H4s to medium gray *   Computers have been using “hex notation” for quite some time now, and programmers are typically either trained in its use or pick it up through experience. Their familiarity with hexadecimal notation likely led to its use in setting colors in HTML. The practice was simply carried over to CSS. Here’s how it works: by stringing together three hexadecimal numbers in the range 00 through FF, you can set a color. The generic syntax for this notation is RRGGBB. Note that there are no spaces, commas, or other separators between the three numbers.  20  Values, Units, and Colors   Hexadecimal notation is mathematically equivalent to the integer-pair notation dis- cussed in the previous section. For example, rgb 255,255,255  is precisely equivalent to  FFFFFF, and  rgb 51,102,128  is the same as  336680. Feel free to use whichever notation you prefer—it will be rendered identically by most user agents. If you have a calculator that converts between decimal and hexadecimal, making the jump from one to the other should be pretty simple. For hexadecimal numbers that are composed of three matched pairs of digits, CSS permits a shortened notation. The generic syntax of this notation is RGB:  h1 {color: 000;}    * set H1s to black *  h2 {color: 666;}    * set H2s to dark gray *  h3 {color: FFF;}    * set H3s to white *   As you can see from the markup, there are only three digits in each color value. How- ever, since hexadecimal numbers between 00 and FF need two digits each, and you have only three total digits, how does this method work? The answer is that the browser takes each digit and replicates it. Therefore, F00 is equivalent to FF0000, 6FA would be the same as 66FFAA, and FFF would come out FFFFFF, which is the same as white. Obviously, not every color can be represented in this manner. Medium gray, for example, would be written in standard hexadecimal notation  as  808080.  This  cannot  be  expressed  in  shorthand;  the  closest  equivalent would be 888, which is the same as 888888. There is no hexadecimal notation that includes alpha values.  Colors by HSL and HSLa New to CSS3  though not to the world of color theory in general  are HSL notations. HSL stands for Hue, Saturation, and Lightness, where the hue is a hue angle in the range 0–360, saturation is a percentage value from 0  no saturation  to 100  full satu- ration , and lightness is a percentage value from 0  completely dark  to 100  completely light . The hue angle is expressed in terms of a circle around which the full spectrum of colors progresses. It starts with red at zero degrees and then proceeds through the rainbow until it comes to red again at 360 degrees. Figure 11 illustrates this visually by showing the angles and colors of the spectrum on a wheel as well as a linear strip. If you’re intimately familiar with RGB, then HSL may be confusing at first.  But then, RGB is confusing for people familiar with HSL.  You may be able to better grasp the hues in HSL by contemplating the diagram in Figure 12, which shows the spectrum results from placing and then mixing red, green, and blue.  Color   21   Figure 11. The spectrum on a wheel and a strip  Figure 12. Mixing RGB to create the spectrum  22  Values, Units, and Colors   As for the other two values, saturation measures the intensity of a color. A saturation of  0%  always  yields  a  shade  of  gray,  no  matter  what  hue  angle  you  have  set,  and  a saturation of 100% creates the most vivid shade of that hue for a given lightness. Simi- larly, lightness defines how dark or light the color appears. A lightness of 0% is always black, regardless of the other hue and saturation values, just as a lightness of 100% always yields white. Consider the results of the following styles, illustrated on the left side of Figure 13.  p.one {color: hsl 0,0%,0% ;} p.two{color: hsl 60,0%,25% ;} p.three {color: hsl 120,0%,50% ;} p.four {color: hsl 180,0%,75% ;} p.five {color: hsl 240,0%,0% ;} p.six {color: hsl 300,0%,25% ;} p.seven {color: hsl 360,0%,50% ;}  Figure 13. Varying lightness and hues  The gray you see isn’t just a function of the limitations of print: every single one of those bits of text is a shade of gray, because every color value has 0% in the saturation  middle  position. The degree of lightness or darkness is set by the lightness  third  position. In all seven examples, the hue angle changes, and in none of them does it matter. But that’s only so long as the saturation remains at 0%. If that value is raised to, say, 50%, then the hue angle will become very important, because it will control what sort of color you see. Consider the same set of values that we saw before, but all set to 50% saturation, as illustrated on the right side of Figure 13. It can be instructive to take the 16 color keywords defined in HTML4  Table 1  and plot them against a hue-and-lightness wheel, as shown in Figure 14. The color wheel not only features the full spectrum around the rim, but also runs from 50 percent light- ness at the edge to 0 percent lightness in the center.  The saturation is 100 percent throughout.  As you can see, the twelve keywords of color are regularly placed through- out the wheel, which bespeaks careful choice on the part of whoever chose them. The gray shades aren’t quite as regularly placed, but are probably the most useful distribu- tion of shades given that there were only four of them.  Color   23   Figure 14. Keyword-equivalent hue angles and lightnesses  Just as RGB has its RGBa counterpart, HSL has an HSLa counterpart. This is simply an HSL triplet followed by an alpha value in the range 0–1. The following HSLa values are all black with varying shades of transparency, just as in the RGBa section earlier  and illustrated in Figure 10 .  p.one {color: hsla 0,0%,0%,1 ;} p.two {color: hsla 0,0%,0%,0.8 ;} p.three {color: hsla 0,0%,0%,0.6 ;} p.four {color: hsla 0,0%,0%,0.4 ;} p.five {color: hsla 0,0%,0%,0.2 ;}  Bringing the Colors Together Table 2 presents an overview of some of the colors we’ve discussed. Note that there are some rows that do not contain shortened hexadecimal values. That happens in cases where the longer  six-digit  values cannot be shortened. For example, the value 880 expands to 888800, not 808000  otherwise known as olive . Therefore, there is no shortened version of 808000, and the appropriate entry in the table is blank.  24  Values, Units, and Colors   Table 2. Color equivalents  Color aqua  black  blue  fuchsia  gray  green  lime  maroon  navy  olive  purple  red  silver  teal  white  yellow  Hexa-decimal 00FFFF* 000000* 0000FF* FF00FF* 808080  RGB Decimal rgb 0,255,255   RGB Percentage rgb 0%,100%,100%   HSL hsl 180,100%,50%   rgb 0,0,0   rgb 0%,0%,0%   hsl 0,0%,0%   rgb 0,0,255   rgb 0%,0%,100%   hsl 240,100%,50%   rgb 255,0,255   rgb 100%,0%,100%   hsl 300,100%,50%   rgb 128,128,128   rgb 50%,50%,50%   hsl 0,0%,50%   008000 00FF00* 800000  000080  808000  800080 FF0000* C0C0C0  008080 FFFFFF* FFFF00*  rgb 0,128,0   rgb 0,255,0   rgb 128,0,0   rgb 0,0,128   rgb 0%,50%,0%   hsl 120,100%,50%   rgb 0%,100%,0%   hsl 120,100%,50%   rgb 50%,0%,0%   rgb 0%,0%,50%   hsl 0,100%,25%   hsl 240,100%,25%   rgb 128,128,0   rgb 50%,50%,0%   hsl 60,100%,25%   rgb 128,0,128   rgb 50%,0%,50%   hsl 300,100%,25%   rgb 255,0,0   rgb 100%,0%,0%   hsl 0,100%,50%   rgb 192,192,192   rgb 75%,75%,75%   hsl 0,0%,80%   rgb 0,128,128   rgb 0%,50%,50%   hsl 180,100%,25%   rgb 255,255,255   rgb 100%,100%,100%   hsl 0,0%,100%   rgb 255,255,0   rgb 100%,100%,0%   hsl 60,100%,50%   * Can be represented using the “short-hex” pattern  e.g., 000 .  Angles Since we just finished talking about hue angles in HSL, this would be a good time to talk about angle units. Angles in general are represented as  , which is a <num ber> followed by one of four unit types:  deg  grad  rad  turn  Degrees, of which there are 360 in a full circle.  Gradians, of which there are 400 in a full circle. Also known as “grades” or “gons.”  Radians, of which there are 2π  approximately 6.28  in a full circle.  Turns, of which there is one in a full circle. This unit is mostly useful when ani- mating a rotation and you wish to have it turn multiple times, such as 10turn to make  it  spin  ten  times.   Sadly,  the  pluralization  turns  is  invalid,  at  least  as  of mid-2012.   Angles   25   Table 3. Angle equivalents  Degrees 45deg  90deg  180deg  270deg  360deg  Gradians 50grad  100grad  200grad  300grad  400grad  Radians 0.785rad  1.571rad  3.142rad  4.712rad  6.283rad  Turns 0.125turn  0.25turn  0.5turn  0.75turn  1turn  Angle units are mostly used in 2D and 3D transforms, though they do appear in a few other places. Note that angle units are not used in HSL colors, where all hue angle values are always degrees and thus do not use the deg unit!  Time and Frequency In cases where a property needs to express a period of time, the value is represented as   and is a   followed by either s  seconds  or ms  milliseconds.  Time values are most often used in transitions and animations, either to define durations or delays. The following two declarations will have exactly the same result.  a[href] {transition-duration: 2.4s;} a[href] {transition-duration: 2400ms;}  Time values are also used in aural CSS, again to define durations or delays, but support for aural CSS is extremely limited as of this writing. Another value type historically used in aural CSS is  , which is a   followed by either Hz  Hertz  or kHz  kiloHertz . As usual, the identifiers are case-in- sensitive, so Hz and hz are equivalent. The following two declarations will have exactly the same result:  h1 {pitch: 128hz;} h1 {pitch: 0.128khz;}  Position A position value is how you specify the placement of an origin image in a background area, and is represented as  . Its syntactical structure is rather complicated:  [   [ left  center  right  top  bottom       ]    [ left  center  right       ]   [ top  center  bottom       ]    [ center  [ left  right ] [      ]? ] &&   [ center  [ top  bottom ] [      ]? ] ]  26  Values, Units, and Colors   That might seem a little nutty, but it’s all down to the subtly complex patterns that this value type has to allow. If you declare only one value, such as left or 25%, then a second value is set to center. Thus, left is the same as left center and 25% is the same as 25% center. If you declare  either implicitly, as above, or explicitly  two values and the first one is a length or percentage, then it is always considered to be the horizontal value. This means that given 25% 35px, the 25% is a horizontal distance and the 35px is a vertical distance. If you swap them to say 35px 25%, then 35px is horizontal and 25% is vertical. This means that if you write 25% left or 35px right, the entire value is invalid because you have supplied two horizontal distances and no vertical distance.  Similarly, a value of right left or top bottom is invalid and will be ignored.  On the other hand, if you write left 25% or right 35px, there is no problem because you’ve given a horizontal distance  with the keyword  and a vertical distance  with the percentage or length . If you declare four values  we’ll deal with three just in a moment , then you must have two lengths or percentages, each of which is preceded by a keyword. In this case, each length or percentage specifies an offset distance, and each keyword defines the edge from which the offset is calculated. Thus, right 10px bottom 30px means an offset of 10 pixels to the left of the right edge, and an offset of 30 pixels up from the bottom edge. Similarly, top 50% left 35px means a 50 percent offset from the top and a 35- pixels-to-the-right offset from the left. If you declare three values, the rules are the same as for four except the last offset is set to be zero  no offset . Thus right 20px top is the same as right 20px top 0.  Summary Units and values cover a wide spectrum of areas, from length units to special keywords that describe effects  such as underline  to color units to the location of files  such as images . For the most part, units are the one area that user agents get almost totally correct, but it’s those few little bugs and quirks that can get you. Navigator 4.x’s failure to interpret relative URLs correctly, for example, has bedeviled many authors and led to an overreliance on absolute URLs. Colors are another area where user agents almost always do well, except for a few little quirks here and there. The vagaries of length units, however, far from being bugs, are an interesting problem for any author to tackle. These units all have their advantages and drawbacks, depending upon the circumstances in which they’re used.  Summary  27                                                         C D 5 F 5 F   4 C 4 E F F   0 0 0 0 0 0   D C B E F F   2 E B 2 A 8   A 2 A 2 5 A   7 8 8 B E D   0 A E 9 F 5   0 0 F F F 7   E 1 9 6 2 D   0 5 F 7 F F   D E 5 9 4 6   C D 8 F F F   C 3 4 1 C D     % 3 5 , % 6 7 , 1 7 2   l s h    % 9 8 , % 7 1 , % 4 5   b g r    6 2 2 , 3 4 , 8 3 1   b g r    % 1 4 , % 9 5 , 0   l s h    % 6 1 , % 6 1 , % 5 6   b g r    2 4 , 2 4 , 5 6 1   b g r    % 0 7 , % 7 5 , 4 3   l s h    % 3 5 , % 2 7 , % 7 8   b g r    5 3 1 , 4 8 1 , 2 2 2   b g r    % 0 5 , % 5 2 , 2 8 1   l s h    % 3 6 , % 2 6 , % 7 3   b g r    0 6 1 , 8 5 1 , 5 9   b g r    % 0 5 , % 0 0 1 , 0 9   l s h    % 0 , % 0 0 1 , % 0 5   b g r    0 , 5 5 2 , 7 2 1   b g r    % 7 4 , % 5 7 , 5 2   l s h    % 2 1 , % 1 4 , % 2 8   b g r    0 3 , 5 0 1 , 0 1 2   b g r    % 6 6 , % 0 0 1 , 6 1   l s h    % 1 3 , % 0 5 , % 0 0 1   b g r    0 8 , 7 2 1 , 5 5 2   b g r  F F 0   F F F F 0 0     % 0 5 , % 0 0 1 , 0 8 1   l s h    % 0 0 1 , % 0 0 1 , % 0   b g r    5 5 2 , 5 5 2 , 0   b g r  B 8 0 0 0 0     % 7 2 , % 0 0 1 , 0 4 2   l s h    % 5 5 , % 0 , % 0   b g r    9 3 1 , 0 , 0   b g r    % 3 9 , % 0 0 1 , 8 4   l s h    % 6 8 , % 7 9 , % 0 0 1   b g r    0 2 2 , 8 4 2 , 5 5 2   b g r    % 7 4 , % 3 8 , 8 4 3   l s h    % 4 2 , % 8 , % 6 8   b g r    0 6 , 0 2 , 0 2 2   b g r    % 6 6 , % 9 7 , 9 1 2   l s h    % 3 9 , % 8 5 , % 9 3   b g r    7 3 2 , 9 4 1 , 0 0 1   b g r  e u l b r e w o l f n r o c  Color Equivalence Table  x e H   t r o h S  l a m  i c e d - a x e H  L S H  e g a t n e c r e P B G R     l a m  i c e D B G R     F F 8 F 0 F     % 7 9 , % 0 0 1 , 8 0 2   l s h    % 0 0 1 , % 7 9 , % 4 9   b g r    5 5 2 , 8 4 2 , 0 4 2   b g r  F F 0   F F F F 0 0     % 0 5 , % 0 0 1 , 0 8 1   l s h    % 0 0 1 , % 0 0 1 , % 0   b g r    5 5 2 , 5 5 2 , 0   b g r  7 D B E A F     % 1 9 , % 8 7 , 4 3   l s h    % 4 8 , % 2 9 , % 8 9   b g r    5 1 2 , 5 3 2 , 0 5 2   b g r  e t i h w e u q i t n a  0 0 0     % 0 , % 0 , 0   l s h    % 0 , % 0 , % 0   b g r    0 , 0 , 0   b g r  4 D F F F 7     % 5 7 , % 0 0 1 , 0 6 1   l s h    % 3 8 , % 0 0 1 , % 0 5   b g r    2 1 2 , 5 5 2 , 7 2 1   b g r  F F F F 0 F     % 7 9 , % 0 0 1 , 0 8 1   l s h    % 0 0 1 , % 0 0 1 , % 4 9   b g r    5 5 2 , 5 5 2 , 0 4 2   b g r    % 1 9 , % 6 5 , 0 6   l s h    % 6 8 , % 6 9 , % 6 9   b g r    0 2 2 , 5 4 2 , 5 4 2   b g r    % 8 8 , % 0 0 1 , 3 3   l s h    % 7 7 , % 9 8 , % 0 0 1   b g r    6 9 1 , 8 2 2 , 5 5 2   b g r  F 0 0   F F 0 0 0 0     % 0 5 , % 0 0 1 , 0 4 2   l s h    % 0 0 1 , % 0 , % 0   b g r    5 5 2 , 0 , 0   b g r    % 0 9 , % 0 0 1 , 6 3   l s h    % 0 8 , % 2 9 , % 0 0 1   b g r    5 0 2 , 5 3 2 , 5 5 2   b g r  d n o m l a d e h c n a l b  28  Values, Units, and Colors  e m a n   r o l o C  e u l b e c i l a  e n i r a m a u q a  a u q a  e r u z a  e g i e b  e u q s i b  k c a l b  t e l o i v e u l b  n w o r b  d o o w y l r u b  e u l b t e d a c  e s u e r t r a h c  e t a l o c o h c  l a r o c  e u l b  k l i s n r o c  n o s m i r c  e u l b k r a d  n a y c                                                                     B 0 6 8 8 B   9 A 9 A 9 A   9 A 9 A 9 A   B 6 7 B D B   F 2 B 6 5 5   0 0 C 8 F F   C C 2 3 9 9   0 0 0 0 B 8   A 7 6 9 9 E   F 8 C B F 8   B 8 D 3 8 4   F 4 F 4 F 2   F 4 F 4 F 2   1 D E C 0 0     % 1 4 , % 0 0 1 , 1 8 1   l s h    % 2 8 , % 1 8 , % 0   b g r    9 0 2 , 6 0 2 , 0   b g r  3 D 0 0 4 9     % 1 4 , % 0 0 1 , 2 8 2   l s h    % 3 8 , % 0 , % 8 5   b g r    1 1 2 , 0 , 8 4 1   b g r  3 9 4 1 F F     % 4 5 , % 0 0 1 , 8 2 3   l s h    % 8 5 , % 8 , % 0 0 1   b g r    7 4 1 , 0 2 , 5 5 2   b g r  F F F B 0 0     % 0 5 , % 0 0 1 , 5 9 1   l s h    % 0 0 1 , % 5 7 , % 0   b g r    5 5 2 , 1 9 1 , 0   b g r  9 6 9 6 9 6   9 6 9 6 9 6     % 1 4 , % 0 , 0   l s h    % 1 4 , % 1 4 , % 1 4   b g r    5 0 1 , 5 0 1 , 5 0 1   b g r    % 1 4 , % 0 , 0   l s h    % 1 4 , % 1 4 , % 1 4   b g r    5 0 1 , 5 0 1 , 5 0 1   b g r    % 0 5 , % 0 0 1 , 3 3   l s h    % 0 , % 5 5 , % 0 0 1   b g r    0 , 0 4 1 , 5 5 2   b g r    % 0 5 , % 1 6 , 0 8 2   l s h    % 0 8 , % 0 2 , % 0 6   b g r    4 0 2 , 0 5 , 3 5 1   b g r    % 7 2 , % 0 0 1 , 0   l s h    % 0 , % 0 , % 5 5   b g r    0 , 0 , 9 3 1   b g r    % 0 7 , % 2 7 , 5 1   l s h    % 8 4 , % 9 5 , % 1 9   b g r    2 2 1 , 0 5 1 , 3 3 2   b g r    % 5 6 , % 5 2 , 0 2 1   l s h    % 6 5 , % 4 7 , % 6 5   b g r    3 4 1 , 8 8 1 , 3 4 1   b g r    % 9 3 , % 9 3 , 8 4 2   l s h    % 5 5 , % 4 2 , % 8 2   b g r    9 3 1 , 1 6 , 2 7   b g r    % 5 2 , % 5 2 , 0 8 1   l s h    % 1 3 , % 1 3 , % 8 1   b g r    9 7 , 9 7 , 7 4   b g r    % 5 2 , % 5 2 , 0 8 1   l s h    % 1 3 , % 1 3 , % 8 1   b g r    9 7 , 9 7 , 7 4   b g r  x e H   t r o h S  l a m  i c e d - a x e H  L S H  e g a t n e c r e P B G R     l a m  i c e D B G R     B 8 B 8 0 0     % 7 2 , % 0 0 1 , 0 8 1   l s h    % 5 5 , % 5 5 , % 0   b g r    9 3 1 , 9 3 1 , 0   b g r    % 8 3 , % 9 8 , 3 4   l s h    % 4 , % 3 5 , % 2 7   b g r    1 1 , 4 3 1 , 4 8 1   b g r  d o r n e d l o g k r a d  0 0 4 6 0 0     % 0 2 , % 0 0 1 , 0 2 1   l s h    % 0 , % 9 3 , % 0   b g r    0 , 0 0 1 , 0   b g r    % 6 6 , % 0 , 0   l s h    % 6 6 , % 6 6 , % 6 6   b g r    9 6 1 , 9 6 1 , 9 6 1   b g r    % 8 5 , % 8 3 , 6 5   l s h    % 2 4 , % 2 7 , % 4 7   b g r    7 0 1 , 3 8 1 , 9 8 1   b g r    % 6 6 , % 0 , 0   l s h    % 6 6 , % 6 6 , % 6 6   b g r    9 6 1 , 9 6 1 , 9 6 1   b g r  B 8 0 0 B 8     % 7 2 , % 0 0 1 , 0 0 3   l s h    % 5 5 , % 0 , % 5 5   b g r    9 3 1 , 0 , 9 3 1   b g r  a t n e g a m k r a d    % 0 3 , % 9 3 , 2 8   l s h    % 8 1 , % 2 4 , % 3 3   b g r    7 4 , 7 0 1 , 5 8   b g r  n e e r g e v i l o k r a d  e m a n   r o l o C  n a y c k r a d  y a r g k r a d  n e e r g k r a d  y e r g k r a d  i k a h k k r a d  e g n a r o k r a d  d i h c r o k r a d  d e r k r a d  n o m l a s k r a d  n e e r g a e s k r a d  e u l b e t a l s k r a d  y a r g e t a l s k r a d  y e r g e t a l s k r a d  e s i o u q r u t k r a d  t e l o i v k r a d  k n i p p e e d  e u l b y k s p e e d  y a r g m i d  y e r g m i d  Color Equivalence Table  29                                                                  0 0 7 D F F   0 2 5 A A D   0 8 0 8 0 8   F 2 F F D A   0 8 0 8 0 8   x e H   t r o h S  l a m  i c e d - a x e H  L S H  e g a t n e c r e P B G R     l a m  i c e D B G R     F 0 F   F F 0 0 F F     % 0 5 , % 0 0 1 , 0 0 3   l s h    % 0 0 1 , % 0 , % 0 0 1   b g r    5 5 2 , 0 , 5 5 2   b g r  C D C D C D     % 6 8 , % 0 , 0   l s h    % 6 8 , % 6 8 , % 6 8   b g r    0 2 2 , 0 2 2 , 0 2 2   b g r  F F 8 F 8 F     % 9 9 , % 0 0 1 , 0 4 2   l s h    % 0 0 1 , % 7 9 , % 7 9   b g r    5 5 2 , 8 4 2 , 8 4 2   b g r  F F 0 9 E 1     % 6 5 , % 0 0 1 , 0 1 2   l s h    % 0 0 1 , % 6 5 , % 2 1   b g r    5 5 2 , 4 4 1 , 0 3   b g r  2 2 2 2 2 B   0 F A F F F   2 2 B 8 2 2     % 7 9 , % 0 0 1 , 0 4   l s h    % 4 9 , % 8 9 , % 0 0 1   b g r    0 4 2 , 0 5 2 , 5 5 2   b g r    % 4 3 , % 1 6 , 0 2 1   l s h    % 3 1 , % 5 5 , % 3 1   b g r    4 3 , 9 3 1 , 4 3   b g r    % 2 4 , % 8 6 , 0   l s h    % 3 1 , % 3 1 , % 0 7   b g r    4 3 , 4 3 , 8 7 1   b g r  0 0 0 8 0 0     % 5 2 , % 0 0 1 , 0 2 1   l s h    % 0 , % 0 5 , % 0   b g r    0 , 8 2 1 , 0   b g r    % 0 5 , % 0 0 1 , 1 5   l s h    % 0 , % 4 8 , % 0 0 1   b g r    0 , 5 1 2 , 5 5 2   b g r    % 9 4 , % 4 7 , 3 4   l s h    % 3 1 , % 5 6 , % 5 8   b g r    2 3 , 5 6 1 , 8 1 2   b g r    % 0 5 , % 0 , 0   l s h    % 0 5 , % 0 5 , % 0 5   b g r    8 2 1 , 8 2 1 , 8 2 1   b g r  0 F F F 0 F     % 7 9 , % 0 0 1 , 0 2 1   l s h    % 4 9 , % 0 0 1 , % 4 9   b g r    0 4 2 , 5 5 2 , 0 4 2   b g r  4 B 9 6 F F     % 1 7 , % 0 0 1 , 0 3 3   l s h    % 1 7 , % 1 4 , % 0 0 1   b g r    0 8 1 , 5 0 1 , 5 5 2   b g r  C 5 C 5 D C     % 8 5 , % 3 5 , 0   l s h    % 6 3 , % 6 3 , % 0 8   b g r    2 9 , 2 9 , 5 0 2   b g r  2 8 0 0 B 4     % 5 2 , % 0 0 1 , 5 7 2   l s h    % 1 5 , % 0 , % 9 2   b g r    0 3 1 , 0 , 5 7   b g r  0 F F F F F   C 8 6 E 0 F   A F 6 E 6 E     % 7 9 , % 0 0 1 , 0 6   l s h    % 4 9 , % 0 0 1 , % 0 0 1   b g r    0 4 2 , 5 5 2 , 5 5 2   b g r    % 5 7 , % 7 7 , 4 5   l s h    % 5 5 , % 0 9 , % 4 9   b g r    0 4 1 , 0 3 2 , 0 4 2   b g r    % 4 9 , % 7 6 , 0 4 2   l s h    % 8 9 , % 0 9 , % 0 9   b g r    0 5 2 , 0 3 2 , 0 3 2   b g r    % 0 5 , % 0 , 0   l s h    % 0 5 , % 0 5 , % 0 5   b g r    8 2 1 , 8 2 1 , 8 2 1   b g r  e u l b r e g d o d  k c i r b e r i f  e m a n   r o l o C  e t i h w l a r o l f  n e e r g t s e r o f  o r o b s n i a g  e t i h w t s o h g  a i s h c u f  d o r n e d l o g  d l o g  y a r g  n e e r g  w e d y e n o h  k n i p t o h  d e r n a i d n i  y e r g  o g i d n i  y r o v i  i k a h k  r e d n e v a l  5 F 0 F F F     % 7 9 , % 0 0 1 , 0 4 3   l s h    % 6 9 , % 4 9 , % 0 0 1   b g r    5 4 2 , 0 4 2 , 5 5 2   b g r  h s u l b r e d n e v a l  0 0 C F C 7     % 9 4 , % 0 0 1 , 0 9   l s h    % 0 , % 9 9 , % 9 4   b g r    0 , 2 5 2 , 4 2 1   b g r  n e e r g n w a l    % 9 5 , % 0 0 1 , 4 8   l s h    % 8 1 , % 0 0 1 , % 8 6   b g r    7 4 , 5 5 2 , 3 7 1   b g r  w o l l e y n e e r g  30  Values, Units, and Colors   x e H   t r o h S  l a m  i c e d - a x e H  L S H  e g a t n e c r e P B G R     l a m  i c e D B G R     F F F F 0 E     % 4 9 , % 0 0 1 , 0 8 1   l s h    % 0 0 1 , % 0 0 1 , % 8 8   b g r    5 5 2 , 5 5 2 , 4 2 2   b g r    % 0 9 , % 0 0 1 , 4 5   l s h    % 0 8 , % 8 9 , % 0 0 1   b g r    5 0 2 , 0 5 2 , 5 5 2   b g r    % 9 7 , % 3 5 , 5 9 1   l s h    % 0 9 , % 5 8 , % 8 6   b g r    0 3 2 , 6 1 2 , 3 7 1   b g r    % 2 7 , % 9 7 , 0   l s h    % 0 5 , % 0 5 , % 4 9   b g r    8 2 1 , 8 2 1 , 0 4 2   b g r                                                        9 8 7   9 8 7   D C A F F F   6 E 8 D D A   0 8 0 8 0 F   2 D A F A F   3 D 3 D 3 D   0 9 E E 0 9   3 D 3 D 3 D   A 7 0 A F F   A A 2 B 0 2   A F E C 7 8   9 9 8 8 7 7   9 9 8 8 7 7   E D 4 C 0 B   0 E F F F F   2 3 D C 2 3   6 E 0 F A F   0 0 0 0 0 8   A A D C 6 6   1 C 6 B F F     % 6 8 , % 0 0 1 , 1 5 3   l s h    % 6 7 , % 1 7 , % 0 0 1   b g r    3 9 1 , 2 8 1 , 5 5 2   b g r    % 5 7 , % 3 7 , 0 2 1   l s h    % 6 5 , % 3 9 , % 6 5   b g r    4 4 1 , 8 3 2 , 4 4 1   b g r    % 3 8 , % 0 , 0   l s h    % 3 8 , % 3 8 , % 3 8   b g r    1 1 2 , 1 1 2 , 1 1 2   b g r    % 3 8 , % 0 , 0   l s h    % 3 8 , % 3 8 , % 3 8   b g r    1 1 2 , 1 1 2 , 1 1 2   b g r    % 4 7 , % 0 0 1 , 7 1   l s h    % 8 4 , % 3 6 , % 0 0 1   b g r    2 2 1 , 0 6 1 , 5 5 2   b g r    % 1 4 , % 0 7 , 7 7 1   l s h    % 7 6 , % 0 7 , % 3 1   b g r    0 7 1 , 8 7 1 , 2 3   b g r    % 5 7 , % 2 9 , 3 0 2   l s h    % 8 9 , % 1 8 , % 3 5   b g r    0 5 2 , 6 0 2 , 5 3 1   b g r    % 3 5 , % 4 1 , 0 1 2   l s h    % 0 6 , % 3 5 , % 7 4   b g r    3 5 1 , 6 3 1 , 9 1 1   b g r    % 3 5 , % 4 1 , 0 1 2   l s h    % 0 6 , % 3 5 , % 7 4   b g r    3 5 1 , 6 3 1 , 9 1 1   b g r    % 8 7 , % 1 4 , 4 1 2   l s h    % 7 8 , % 7 7 , % 9 6   b g r    2 2 2 , 6 9 1 , 6 7 1   b g r    % 4 9 , % 0 0 1 , 0 6   l s h    % 8 8 , % 0 0 1 , % 0 0 1   b g r    4 2 2 , 5 5 2 , 5 5 2   b g r  0 F 0   0 0 F F 0 0     % 0 5 , % 0 0 1 , 0 2 1   l s h    % 0 , % 0 0 1 , % 0   b g r    0 , 5 5 2 , 0   b g r    % 0 5 , % 1 6 , 0 2 1   l s h    % 0 2 , % 0 8 , % 0 2   b g r    0 5 , 5 0 2 , 0 5   b g r    % 4 9 , % 7 6 , 0 3   l s h    % 0 9 , % 4 9 , % 8 9   b g r    0 3 2 , 0 4 2 , 0 5 2   b g r  F 0 F   F F 0 0 F F     % 0 5 , % 0 0 1 , 0 0 3   l s h    % 0 0 1 , % 0 , % 0 0 1   b g r    5 5 2 , 0 , 5 5 2   b g r    % 5 2 , % 0 0 1 , 0   l s h    % 0 , % 0 , % 0 5   b g r    0 , 0 , 8 2 1   b g r  n o f f i h c n o m e l  e m a n   r o l o C  e u l b t h g i l  l a r o c t h g i l  n a y c t h g i l  y a r g t h g i l  n e e r g t h g i l  y e r g t h g i l  k n i p t h g i l  n e e r g a e s t h g i l  e u l b y k s t h g i l  n o m l a s t h g i l  y a r g e t a l s t h g i l  y e r g e t a l s t h g i l  e u l b l e e t s t h g i l  w o l l e y t h g i l  n e e r g e m i l  e m i l  a t n e g a m  n o o r a m  n e n i l    % 0 6 , % 1 5 , 0 6 1   l s h    % 7 6 , % 0 8 , % 0 4   b g r    0 7 1 , 5 0 2 , 2 0 1   b g r  e n i r a m a u q a m u i d e m    % 0 9 , % 0 8 , 0 6   l s h    % 2 8 , % 8 9 , % 8 9   b g r    0 1 2 , 0 5 2 , 0 5 2   b g r  w o l l e y d o r n e d l o g t h g i l  Color Equivalence Table  31   x e H   t r o h S  l a m  i c e d - a x e H  L S H  e g a t n e c r e P B G R     l a m  i c e D B G R     D C 0 0 0 0     % 0 4 , % 0 0 1 , 0 4 2   l s h    % 0 8 , % 0 , % 0   b g r    5 0 2 , 0 , 0   b g r    % 8 5 , % 9 5 , 8 8 2   l s h    % 3 8 , % 3 3 , % 3 7   b g r    1 1 2 , 5 8 , 6 8 1   b g r    % 5 6 , % 0 6 , 0 6 2   l s h    % 6 8 , % 4 4 , % 8 5   b g r    9 1 2 , 2 1 1 , 7 4 1   b g r  e u l b m u i d e m  e m a n   r o l o C  d i h c r o m u i d e m  e l p r u p m u i d e m                                                                    3 D 5 5 A B   B D 0 7 3 9   1 7 3 B C 3   E E 8 6 B 7   C C 1 D 8 4   5 8 5 1 7 C   0 7 9 1 9 1   1 E 4 E F F   5 B 4 E F F   D A E D F F   6 E 5 F D F   0 0 0 8 0 8   3 2 E 8 B 6   0 0 5 A F F   0 0 5 4 F F   6 D 0 7 A D   A A 8 E E E   8 9 B F 8 9   A 9 A F 0 0     % 9 4 , % 0 0 1 , 7 5 1   l s h    % 0 6 , % 8 9 , % 0   b g r    4 5 1 , 0 5 2 , 0   b g r  n e e r g g n i r p s m u i d e m    % 7 4 , % 0 5 , 7 4 1   l s h    % 4 4 , % 0 7 , % 4 2   b g r    3 1 1 , 9 7 1 , 0 6   b g r  n e e r g a e s m u i d e m    % 7 6 , % 0 8 , 9 4 2   l s h    % 3 9 , % 1 4 , % 8 4   b g r    8 3 2 , 4 0 1 , 3 2 1   b g r  e u l b e t a l s m u i d e m    % 5 5 , % 0 6 , 8 7 1   l s h    % 0 8 , % 2 8 , % 8 2   b g r    4 0 2 , 9 0 2 , 2 7   b g r    % 3 4 , % 1 8 , 2 2 3   l s h    % 2 5 , % 8 , % 8 7   b g r    3 3 1 , 1 2 , 9 9 1   b g r    % 7 2 , % 4 6 , 0 4 2   l s h    % 4 4 , % 0 1 , % 0 1   b g r    2 1 1 , 5 2 , 5 2   b g r  e s i o u q r u t m u i d e m  d e r t e l o i v m u i d e m  e u l b t h g i n d i m  A F F F 5 F     % 8 9 , % 0 0 1 , 0 5 1   l s h    % 8 9 , % 0 0 1 , % 6 9   b g r    0 5 2 , 5 5 2 , 5 4 2   b g r    % 4 9 , % 0 0 1 , 6   l s h    % 8 8 , % 9 8 , % 0 0 1   b g r    5 2 2 , 8 2 2 , 5 5 2   b g r    % 5 8 , % 0 0 1 , 8 3   l s h    % 1 7 , % 9 8 , % 0 0 1   b g r    1 8 1 , 8 2 2 , 5 5 2   b g r  0 8 0 0 0 0     % 5 2 , % 0 0 1 , 0 4 2   l s h    % 0 5 , % 0 , % 0   b g r    8 2 1 , 0 , 0   b g r    % 4 8 , % 0 0 1 , 6 3   l s h    % 8 6 , % 7 8 , % 0 0 1   b g r    3 7 1 , 2 2 2 , 5 5 2   b g r  e t i h w o j a v a n    % 5 9 , % 5 8 , 9 3   l s h    % 0 9 , % 6 9 , % 9 9   b g r    0 3 2 , 5 4 2 , 3 5 2   b g r    % 5 2 , % 0 0 1 , 0 6   l s h    % 0 , % 0 5 , % 0 5   b g r    0 , 8 2 1 , 8 2 1   b g r    % 5 3 , % 0 6 , 0 8   l s h    % 4 1 , % 6 5 , % 2 4   b g r    5 3 , 2 4 1 , 7 0 1   b g r    % 0 5 , % 0 0 1 , 9 3   l s h    % 0 , % 5 6 , % 0 0 1   b g r    0 , 5 6 1 , 5 5 2   b g r    % 0 5 , % 0 0 1 , 6 1   l s h    % 0 , % 7 2 , % 0 0 1   b g r    0 , 9 6 , 5 5 2   b g r    % 5 6 , % 9 5 , 2 0 3   l s h    % 4 8 , % 4 4 , % 5 8   b g r    4 1 2 , 2 1 1 , 8 1 2   b g r    % 0 8 , % 7 6 , 5 5   l s h    % 7 6 , % 1 9 , % 3 9   b g r    0 7 1 , 2 3 2 , 8 3 2   b g r  d o r n e d l o g e l a p    % 9 7 , % 3 9 , 0 2 1   l s h    % 0 6 , % 8 9 , % 0 6   b g r    2 5 1 , 1 5 2 , 2 5 1   b g r  n e e r g e l a p  m a e r c t n i m  e s o r y t s i m  n i s a c c o m  e c a l d l o  e v i l o  y v a n  b a r d e v i l o  d e r e g n a r o  e g n a r o  d i h c r o  32  Values, Units, and Colors                                                                  E E E E F A   3 9 0 7 B D   5 D F E F F   9 B A D F F   F 3 5 8 D C   D D 0 A D D   6 E 0 E 0 B   0 0 0 0 F F   F 8 F 8 C B   1 E 9 6 1 4   3 1 5 4 B 8   2 7 0 8 A F   0 6 4 A 4 F   7 5 B 8 E 2   E E 5 F F F   D 2 2 5 0 A   0 C 0 C 0 C   B E E C 7 8   D C A 5 A 6   0 9 0 8 0 7   x e H   t r o h S  l a m  i c e d - a x e H  L S H  e g a t n e c r e P B G R     l a m  i c e D B G R     B C 0 C F F     % 8 8 , % 0 0 1 , 0 5 3   l s h    % 0 8 , % 5 7 , % 0 0 1   b g r    3 0 2 , 2 9 1 , 5 5 2   b g r    % 5 7 , % 7 4 , 0 0 3   l s h    % 7 8 , % 3 6 , % 7 8   b g r    1 2 2 , 0 6 1 , 1 2 2   b g r    % 1 8 , % 5 6 , 0 8 1   l s h    % 3 9 , % 3 9 , % 9 6   b g r    8 3 2 , 8 3 2 , 5 7 1   b g r    % 5 6 , % 0 6 , 0 4 3   l s h    % 8 5 , % 4 4 , % 6 8   b g r    7 4 1 , 2 1 1 , 9 1 2   b g r    % 2 9 , % 0 0 1 , 7 3   l s h    % 4 8 , % 4 9 , % 0 0 1   b g r    3 1 2 , 9 3 2 , 5 5 2   b g r    % 6 8 , % 0 0 1 , 8 2   l s h    % 3 7 , % 5 8 , % 0 0 1   b g r    5 8 1 , 8 1 2 , 5 5 2   b g r    % 3 5 , % 9 5 , 0 3   l s h    % 5 2 , % 2 5 , % 0 8   b g r    3 6 , 3 3 1 , 5 0 2   b g r  0 0 F     % 0 5 , % 0 0 1 , 0   l s h    % 0 , % 0 , % 0 0 1   b g r    0 , 0 , 5 5 2   b g r  0 8 0 0 0 8     % 5 2 , % 0 0 1 , 0 0 3   l s h    % 0 5 , % 0 , % 0 5   b g r    8 2 1 , 0 , 8 2 1   b g r    % 0 8 , % 2 5 , 7 8 1   l s h    % 0 9 , % 8 8 , % 9 6   b g r    0 3 2 , 4 2 2 , 6 7 1   b g r  e u l b r e d w o p    % 7 5 , % 3 7 , 5 2 2   l s h    % 8 8 , % 1 4 , % 5 2   b g r    5 2 2 , 5 0 1 , 5 6   b g r    % 5 6 , % 5 2 , 0   l s h    % 6 5 , % 6 5 , % 4 7   b g r    3 4 1 , 3 4 1 , 8 8 1   b g r    % 1 3 , % 6 7 , 5 2   l s h    % 7 , % 7 2 , % 5 5   b g r    9 1 , 9 6 , 9 3 1   b g r    % 1 7 , % 3 9 , 6   l s h    % 5 4 , % 0 5 , % 8 9   b g r    4 1 1 , 8 2 1 , 0 5 2   b g r    % 7 6 , % 7 8 , 8 2   l s h    % 8 3 , % 4 6 , % 6 9   b g r    6 9 , 4 6 1 , 4 4 2   b g r    % 6 3 , % 0 5 , 6 4 1   l s h    % 4 3 , % 5 5 , % 8 1   b g r    7 8 , 9 3 1 , 6 4   b g r    % 7 9 , % 0 0 1 , 5 2   l s h    % 3 9 , % 6 9 , % 0 0 1   b g r    8 3 2 , 5 4 2 , 5 5 2   b g r    % 0 4 , % 6 5 , 9 1   l s h    % 8 1 , % 2 3 , % 3 6   b g r    5 4 , 2 8 , 0 6 1   b g r    % 3 7 , % 1 7 , 7 9 1   l s h    % 2 9 , % 1 8 , % 3 5   b g r    5 3 2 , 6 0 2 , 5 3 1   b g r    % 8 5 , % 3 5 , 8 4 2   l s h    % 0 8 , % 5 3 , % 2 4   b g r    5 0 2 , 0 9 , 6 0 1   b g r    % 0 5 , % 3 1 , 0 1 2   l s h    % 6 5 , % 0 5 , % 4 4   b g r    4 4 1 , 8 2 1 , 2 1 1   b g r    % 5 7 , % 0 , 0   l s h    % 5 7 , % 5 7 , % 5 7   b g r    2 9 1 , 2 9 1 , 2 9 1   b g r  e s i o u q r u t e l a p  d e r t e l o i v e l a p  e m a n   r o l o C  p i h w a y a p a p  f f u p h c a e p  u r e p  k n i p  m u l p  n w o r b y s o r  e u l b l a y o r  n w o r b e l d d a s  n w o r b y d n a s  n o m l a s  e l p r u p  d e r  n e e r g a e s  l l e h s a e s  a n n e i s  r e v l i s  e u l b y k s  e u l b e t a l s  y a r g e t a l s  Color Equivalence Table  33                                          F F F   0 F F   0 9 0 8 0 7   A F A F F F   4 B 2 8 6 4   C 8 4 B 2 D   8 D F B 8 D   7 4 3 6 F F   0 D 0 E 0 4   E E 2 8 E E   3 B E D 5 F   F F F F F F   5 F 5 F 5 F   0 0 F F F F   2 3 D C A 9   x e H   t r o h S  l a m  i c e d - a x e H  L S H  e g a t n e c r e P B G R     l a m  i c e D B G R     F 7 F F 0 0     % 0 5 , % 0 0 1 , 0 5 1   l s h    % 0 5 , % 0 0 1 , % 0   b g r    7 2 1 , 5 5 2 , 0   b g r  0 8 0 8 0 0     % 5 2 , % 0 0 1 , 0 8 1   l s h    % 0 5 , % 0 5 , % 0   b g r    8 2 1 , 8 2 1 , 0   b g r    % 9 4 , % 4 4 , 7 0 2   l s h    % 1 7 , % 1 5 , % 7 2   b g r    0 8 1 , 0 3 1 , 0 7   b g r    % 9 6 , % 4 4 , 4 3   l s h    % 5 5 , % 1 7 , % 2 8   b g r    0 4 1 , 0 8 1 , 0 1 2   b g r    % 0 5 , % 3 1 , 0 1 2   l s h    % 6 5 , % 0 5 , % 4 4   b g r    4 4 1 , 8 2 1 , 2 1 1   b g r    % 9 9 , % 0 0 1 , 0   l s h    % 8 9 , % 8 9 , % 0 0 1   b g r    0 5 2 , 0 5 2 , 5 5 2   b g r    % 0 8 , % 4 2 , 0 0 3   l s h    % 5 8 , % 5 7 , % 5 8   b g r    6 1 2 , 1 9 1 , 6 1 2   b g r    % 4 6 , % 0 0 1 , 9   l s h    % 8 2 , % 9 3 , % 0 0 1   b g r    1 7 , 9 9 , 5 5 2   b g r    % 6 5 , % 2 7 , 4 7 1   l s h    % 2 8 , % 8 8 , % 5 2   b g r    8 0 2 , 4 2 2 , 4 6   b g r    % 2 7 , % 6 7 , 0 0 3   l s h    % 3 9 , % 1 5 , % 3 9   b g r    8 3 2 , 0 3 1 , 8 3 2   b g r    % 3 8 , % 7 7 , 9 3   l s h    % 0 7 , % 7 8 , % 6 9   b g r    9 7 1 , 2 2 2 , 5 4 2   b g r    % 0 0 1 , % 0 , 0   l s h    % 0 0 1 , % 0 0 1 , % 0 0 1   b g r    5 5 2 , 5 5 2 , 5 5 2   b g r    % 6 9 , % 0 , 0   l s h    % 6 9 , % 6 9 , % 6 9   b g r    5 4 2 , 5 4 2 , 5 4 2   b g r    % 0 5 , % 0 0 1 , 0 6   l s h    % 0 , % 0 0 1 , % 0 0 1   b g r    0 , 5 5 2 , 5 5 2   b g r    % 0 5 , % 1 6 , 0 8   l s h    % 0 2 , % 0 8 , % 0 6   b g r    0 5 , 5 0 2 , 4 5 1   b g r  e m a n   r o l o C  y e r g e t a l s  w o n s  n e e r g g n i r p s  e u l b l e e t s  e l t s i h t  o t a m o t  e s i o u q r u t  t e l o i v  t a e h w  e t i h w  n a t  l a e t  e k o m s e t i h w  w o l l e y  n e e r g w o l l e y  34  Values, Units, and Colors   About the Author Eric A. Meyer has been working with the Web since late 1993 and is an internationally recognized expert on the subjects of HTML, CSS, and web standards. A widely read author, he is a past member of the CSS&FP Working Group and was the primary creator of the W3C's CSS1 Test Suite. In 2006, Eric was inducted into the International Acad- emy of Digital Arts and Sciences for “international recognition on the topics of HTML and CSS” and helping to “inform excellence and efficiency on the Web.” Eric is currently the principal founder at Complex Spiral Consulting, which counts among its clients a wide variety of corporations, educational institutions, and govern- ment agencies. He is also, along with Jeffrey Zeldman, co-founder of An Event Apart  “The design conference for people who make websites” , and he speaks regularly at that conference as well as many others. Eric lives with his family in Cleveland, Ohio, which is a much nicer city than you've been led to believe. A historian by training and inclination, he enjoys a good meal whenever he can and considers almost every form of music to be worthwhile.

@highlight

Nearly everything you do with CSS involves units for determining the look and formatting of your web page elements. With this concise guide, you’ll learn how to work with an array of units—including measurements and keywords—that help you define color, text, distance between elements, location of external files, and other values. This book contains chapters from the upcoming fourth edition of CSS: The Definitive Guide. When you purchase either the print or the ebook edition of Values, Units, and Colors, you’ll receive a significant discount on the entire Definitive Guide when it’s released