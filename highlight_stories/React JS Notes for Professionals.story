React JS  React JS  Notes for Professionals  Notes for Professionals  100+ pages  of professional hints and tricks  GoalKicker.com Free Programming Books  Disclaimer This is an unocial free book created for educational purposes and is not aliated with ocial React JS group s  or company s . All trademarks and registered trademarks are the property of their respective owners   Contents  Chapter 2: Components   Chapter 4: State in React   Chapter 3: Using ReactJS with TypeScript   About  Chapter 1: Getting started with React   Section 3.1: ReactJS component written in TypeScript  Section 3.2: Installation and Setup  Section 3.3: Stateless React Components in TypeScript  Section 3.4: Stateless and property-less Components   Section 2.1: Creating Components  Section 2.2: Basic Component  Section 2.3: Nesting Components  Section 2.4: Props  Section 2.5: Component states - Dynamic user-interface  Section 2.6: Variations of Stateless Functional Components  Section 2.7: setState pitfalls   Section 1.1: What is ReactJS?  Section 1.2: Installation or Setup  Section 1.3: Hello World with Stateless Functions  Section 1.4: Absolute Basics of Creating Reusable Components  Section 1.5: Create React App  Section 1.6: Hello World  Section 1.7: Hello World Componentection 5.1: Introduction  Section 5.2: Default props  Section 5.3: PropTypes  Section 5.4: Passing down props using spread operator  Section 5.5: Props.children and component composition  Section 5.6: Detecting the type of Children components   Section 6.1: Component Creation  Section 6.2: Component Removal  Section 6.3: Component Update  Section 6.4: Lifecycle method call in dierent states  Section 6.5: React Component Container   Section 4.1: Basic State  Section 4.2: Common Antipattern  Section 4.3: setState    Section 4.4: State, Events And Managed Controls   Section 8.1: react-starter project  Section 8.2: Setting up the project   1 2 2 3 4 5 6 7 8 11 11 13 14 16 17 19 20 22 22 22 23 24 25 25 25 26 28 30 30 30 31 32 33 34 35 35 37 38 39 40 42 42 42 44 44 45  Chapter 7: Forms and User Input  Section 7.1: Controlled Components  Section 7.2: Uncontrolled Components   Chapter 8: React Boilerplate [React + Babel + Webpack]   Chapter 6: React Component Lifecycle   Chapter 5: Props in React    Section 15.1: Child to Parent Components  Section 15.2: Not-related Components  Section 15.3: Parent to Child Components   Chapter 9: Using ReactJS with jQuery   Section 9.1: ReactJS with jQuery   Chapter 10: React Routing   Section 10.1: Example Routes.js ﬁle, followed by use of Router Link in component  Section 10.2: React Routing Async   Chapter 11: Communicate Between Components   Section 11.1: Communication between Stateless Functional Components   Chapter 12: How to setup a basic webpack, react and babel environment   Section 12.1: How to build a pipeline for a customized "Hello world" with images   Chapter 13: React.createClass vs extends React.Component   Section 13.1: Create React Component  Section 13.2: "this" Context  Section 13.3: Declare Default Props and PropTypes  Section 13.4: Mixins  Section 13.5: Set Initial State  Section 13.6: ES6 React “this” keyword with ajax to get data from server   Chapter 14: React AJAX call  Section 14.1: HTTP GET request  Section 14.2: HTTP GET request and looping through data  Section 14.3: Ajax in React without a third party library - a.k.a with VanillaJS   Chapter 15: Communication Between Componentshapter 16: Stateless Functional Components   Section 16.1: Stateless Functional Component   Chapter 17: Performance   Section 17.1: Performance measurement with ReactJS  Section 17.2: React's di algorithm  Section 17.3: The Basics - HTML DOM vs Virtual DOM  Section 17.4: Tips & Tricks   Chapter 18: Introduction to Server-Side Rendering   Section 18.1: Rendering components   Chapter 19: Setting Up React Environment   Section 19.1: Simple React Component  Section 19.2: Install all dependencies  Section 19.3: Conﬁgure webpack  Section 19.4: Conﬁgure babel  Section 19.5: HTML ﬁle to use react component  Section 19.6: Transpile and bundle your component   Chapter 20: Using React with Flow   Chapter 21: JSX   Section 21.1: Props in JSX  Section 21.2: Children in JSX  Chapter 22: React Forms   Section 22.1: Controlled Components   Section 20.1: Using Flow to check prop types of stateless functional components  Section 20.2: Using Flow to check prop types    Chapter 23: User interface solutions   Section 24.1: Data Flow   Section 26.1: Basic Example  Chapter 27: Keys in react   Chapter 26: How and why to use keys in React   Chapter 25: React, Webpack & TypeScript installation   Section 25.1: webpack.conﬁg.js  Section 25.2: tsconﬁg.json  Section 25.3: My First Component   Section 23.1: Basic Pane  Section 23.2: Panel  Section 23.3: Tab  Section 23.4: PanelGroup  Section 23.5: Example view with `PanelGroup`s  Chapter 24: Using ReactJS in Flux wayection 29.1: Using Connect  Appendix A: Installation  Section A.1: Simple setup  Section A.2: Using webpack-dev-server   Section 28.1: Higher Order Component that checks for authentication  Section 28.2: Simple Higher Order Component   Section 27.1: Using the id of an element  Section 27.2: Using the array index   Chapter 28: Higher Order Components   Credits  You may also like   Chapter 29: React with Redux   Appendix B: React Tools   Section B.1: Links    About  Please feel free to share this PDF with anyone for free, latest version of this book can be downloaded from:  https:  goalkicker.com ReactJSBook  This React JS Notes for Professionals book is compiled from Stack Overﬂow  Documentation, the content is written by the beautiful people at Stack Overﬂow. Text content is released under Creative Commons BY-SA, see credits at the end of this book whom contributed to the various chapters. Images may be copyright  of their respective owners unless otherwise speciﬁed  This is an unoﬃcial free book created for educational purposes and is not aﬃliated with oﬃcial React JS group s  or company s  nor Stack Overﬂow. All trademarks and registered trademarks are the property of their respective  company owners  The information presented in this book is not guaranteed to be correct nor  accurate, use at your own risk  Please send feedback and corrections to web@petercv.com  GoalKicker.com – React JS Notes for Professionals  1   Chapter 1: Getting started with React  Version Release Date 0.3.0 0.4.0 0.5.0 0.8.0 0.9.0 0.10.0 0.11.0 0.12.0 0.13.0 0.14.0 15.0.0 15.1.0 15.2.0 15.2.1 15.3.0 15.3.1 15.3.2 15.4.0 15.4.1 15.4.2 15.5.0 15.6.0 15.6.1 15.6.2 16.0.0 16.1.0 16.1.1 16.3.0 16.3.1 16.3.2  2013-05-29 2013-07-17 2013-10-16 2013-12-19 2014-02-20 2014-03-21 2014-07-17 2014-10-28 2015-03-10 2015-10-07 2016-04-07 2016-05-20 2016-07-01 2016-07-08 2016-07-29 2016-08-19 2016-09-19 2016-11-16 2016-11-23 2017-01-06 2017-04-07 2017-06-13 2017-06-14 2017-09-25 2017-09-26 2017-11-09 2017-11-13 2018-03-29 2018-04-03 2018-04-16  Section 1.1: What is ReactJS? ReactJS is an open-source, component based front end library responsible only for the view layer of the application. It is maintained by Facebook.  ReactJS uses virtual DOM based mechanism to ﬁll in data  views  in HTML DOM. The virtual DOM works fast owning to the fact that it only changes individual DOM elements instead of reloading complete DOM every time  A React application is made up of multiple components, each responsible for outputting a small, reusable piece of HTML. Components can be nested within other components to allow complex applications to be built out of simple building blocks. A component may also maintain internal state - for example, a TabList component may store a variable corresponding to the currently open tab.  GoalKicker.com – React JS Notes for Professionals  2   React allows us to write components using a domain-speciﬁc language called JSX. JSX allows us to write our components using HTML, whilst mixing in JavaScript events. React will internally convert this into a virtual DOM, and will ultimately output our HTML for us.  React "reacts" to state changes in your components quickly and automatically to rerender the components in the HTML DOM by utilizing the virtual DOM. The virtual DOM is an in-memory representation of an actual DOM. By doing most of the processing inside the virtual DOM rather than directly in the browser's DOM, React can act quickly and only add, update, and remove components which have changed since the last render cycle occurred.  Section 1.2: Installation or Setup  ReactJS is a JavaScript library contained in a single ﬁle react- .js that can be included in any HTML page. People also commonly install the React DOM library react-dom- .js along with the main React ﬁle:  Basic Inclusion                                                  Use react JavaScript code here or in a separate file                To get the JavaScript ﬁles, go to the installation page of the oﬃcial React documentation.  React also supports JSX syntax. JSX is an extension created by Facebook that adds XML syntax to JavaScript. In order to use JSX you need to include the Babel library and change   to <script type="text babel"> in order to translate JSX to Javascript code.                                                         Use react JSX code here or in a separate file                Installing via npm  You can also install React using npm by doing the following:  npm install --save react react-dom  To use React in your JavaScript project, you can do the following:  var React = require 'react' ; var ReactDOM = require 'react-dom' ;  GoalKicker.com – React JS Notes for Professionals  3   ReactDOM.render  , ... ;  Installing via Yarn  yarn add react react-dom  Facebook released its own package manager named Yarn, which can also be used to install React. After installing Yarn you just need to run this command:  You can then use React in your project in exactly the same way as if you had installed React via npm.  Section 1.3: Hello World with Stateless Functions  Stateless components are getting their philosophy from functional programming. Which implies that: A function returns all time the same thing exactly on what is given to it.  For example: const statelessSum =  a, b  => a + b;  let a = 0; const statefulSum =    => a++;  As you can see from the above example that, statelessSum is always will return the same values given a and b. However, statefulSum function will not return the same values given even no parameters. This type of function's behaviour is also called as a side-eﬀect. Since, the component aﬀects somethings beyond.  So, it is advised to use stateless components more often, since they are side-eﬀect free and will create the same behaviour always. That is what you want to be after in your apps because ﬂuctuating state is the worst case scenario for a maintainable program.  The most basic type of react component is one without state. React components that are pure functions of their props and do not require any internal state management can be written as simple JavaScript functions. These are said to be Stateless Functional Components because they are a function only of props, without having any state to keep track of.  Here is a simple example to illustrate the concept of a Stateless Functional Component:     In HTML        In React const MyComponent = props => {     return  Hello, {props.name}! ; };  ReactDOM.render  , element ;    Will render  Hello, Arun!   import React from 'react'  const HelloWorld = props =>        Hello, {props.name}!     Note that all that this component does is render an h1 element containing the name prop. This component doesn't keep track of any state. Here's an ES6 example as well:  GoalKicker.com – React JS Notes for Professionals  4   HelloWorld.propTypes = {     name: React.PropTypes.string.isRequired }  export default HelloWorld  Since these components do not require a backing instance to manage the state, React has more room for optimizations. The implementation is clean, but as of yet no such optimizations for stateless components have been implemented.  Section 1.4: Absolute Basics of Creating Reusable Components Components and Props  As React concerns itself only with an application's view, the bulk of development in React will be the creation of components. A component represents a portion of the view of your application. "Props" are simply the attributes used on a JSX node  e.g.   , and are the primary way our application interacts with our components. In the snippet above, inside of SomeComponent, we would have access to this.props, whose value would be the object {someProp: "some prop's value"}.  It can be useful to think of React components as simple functions - they take input in the form of "props", and produce output as markup. Many simple components take this a step further, making themselves "Pure Functions", meaning they do not issue side eﬀects, and are idempotent  given a set of inputs, the component will always produce the same output . This goal can be formally enforced by actually creating components as functions, rather than "classes". There are three ways of creating a React component:  Functional  "Stateless"  Components  const FirstComponent = props =>        {props.content}   ;  React.createClass    const SecondComponent = React.createClass {     render: function    {         return                {this.props.content}           ;     } } ;  ES2015 Classes  class ThirdComponent extends React.Component {     render   {         return                {this.props.content}           ;     } }  These components are used in exactly the same way:  const ParentComponent = function  props  {     const someText = "FooBar";  GoalKicker.com – React JS Notes for Professionals  5       return                                      ; }  The above examples will all produce identical markup.  Functional components cannot have "state" within them. So if your component needs to have a state, then go for class based components. Refer Creating Components for more information.  As a ﬁnal note, react props are immutable once they have been passed in, meaning they cannot be modiﬁed from within a component. If the parent of a component changes the value of a prop, React handles replacing the old props with the new, the component will rerender itself using the new values.  See Thinking In React and Reusable Components for deeper dives into the relationship of props to components.  Section 1.5: Create React App  create-react-app is a React app boilerplate generator created by Facebook. It provides a development environment conﬁgured for ease-of-use with minimal setup, including:  ES6 and JSX transpilation Dev server with hot module reloading Code linting CSS auto-preﬁxing Build script with JS, CSS and image bundling, and sourcemaps Jest testing framework  Installation  First, install create-react-app globally with node package manager  npm .  npm install -g create-react-app  Then run the generator in your chosen directory.  create-react-app my-app  Navigate to the newly created directory and run the start script.  cd my-app  npm start  Conﬁguration  npm run eject  Alternatives  create-react-app is intentionally non-conﬁgurable by default. If non-default usage is required, for example, to use a compiled CSS language such as Sass, then the eject command can be used.  This allows editing of all conﬁguration ﬁles. N.B. this is an irreversible process.  GoalKicker.com – React JS Notes for Professionals  6   Here's a basic example that uses React's main API to create a React element and the React DOM API to render the React element in the browser.  To build your app for production ready, run following command  Alternative React boilerplates include:  enclave nwb motion rackt-cli budō rwb quik sagui roc  Build React App  npm run build  Section 1.6: Hello World Without JSX                     Hello React!                                                        create a React element rElement       var rElement = React.createElement 'h1', null, 'Hello, world!' ;           dElement is a DOM container       var dElement = document.getElementById 'example' ;           render the React element in the DOM container       ReactDOM.render rElement, dElement ;                With JSX  GoalKicker.com – React JS Notes for Professionals  7   Instead of creating a React element from strings one can use JSX  a Javascript extension created by Facebook for adding XML syntax to JavaScript , which allows to write  var rElement = React.createElement 'h1', null, 'Hello, world!' ;  as the equivalent  and easier to read for someone familiar with HTML   var rElement =  Hello, world! ;  The code containing JSX needs to be enclosed in a   tag. Everything within this tag will be transformed to plain Javascript using the Babel library  that needs to be included in addition to the React libraries .  So ﬁnally the above example becomes:                     Hello React!                                                                    create a React element rElement using JSX       var rElement =  Hello, world! ;           dElement is a DOM container       var dElement = document.getElementById 'example' ;           render the React element in the DOM container       ReactDOM.render rElement, dElement ;                Section 1.7: Hello World Component  A React component can be deﬁned as an ES6 class that extends the base React.Component class. In its minimal form, a component must deﬁne a render method that speciﬁes how the component renders to the DOM. The render method returns React nodes, which can be deﬁned using JSX syntax as HTML-like tags. The following example shows how to deﬁne a minimal Component:  import React from 'react'  class HelloWorld extends React.Component {     render   {  GoalKicker.com – React JS Notes for Professionals  8   A Component can also receive props. These are properties passed by its parent in order to specify some values the component cannot know by itself; a property can also contain a function that can be called by the component after certain events occur - for example, a button could receive a function for its onClick property and call it whenever it is clicked. When writing a component, its props can be accessed through the props object on the Component itself:          return  Hello, World!      } }  export default HelloWorld  import React from 'react'  class Hello extends React.Component {     render   {         return  Hello, {this.props.name}!      } }  export default Hello  The example above shows how the component can render an arbitrary string passed into the name prop by its parent. Note that a component cannot modify the props it receives.  A component can be rendered within any other component, or directly into the DOM if it's the topmost component, using ReactDOM.render and providing it with both the component and the DOM Node where you want the React tree to be rendered:  import React from 'react' import ReactDOM from 'react-dom' import Hello from '. Hello'  ReactDOM.render  , document.getElementById 'main'    By now you know how to make a basic component and accept props. Lets take this a step further and introduce state.  For demo sake, let's make our Hello World app, display only the ﬁrst name if a full name is given.  import React from 'react'  class Hello extends React.Component {      constructor props {            Since we are extending the default constructor,           handle default activities first.         super props ;            Extract the first-name from the prop         let firstName = this.props.name.split " " [0];                   In the constructor, feel free to modify the           state property on the current context.         this.state = {             name: firstName         }  GoalKicker.com – React JS Notes for Professionals  9       }   Look maa, no comma required in JSX based class defs!      render   {         return  Hello, {this.state.name}!      } }  export default Hello  Note: Each component can have it's own state or accept it's parent's state as a prop.  Codepen Link to Example.  GoalKicker.com – React JS Notes for Professionals  10   Chapter 2: Components Section 2.1: Creating Components  This is an extension of Basic Example:  Basic Structure import React, { Component } from 'react'; import { render } from 'react-dom';  class FirstComponent extends Component {     render   {         return                                 Hello, {this.props.name}! I am a FirstComponent.                        ;     } }  render       ,     document.getElementById 'content'   ;  The above example is called a stateless component as it does not contain state  in the React sense of the word .  In such a case, some people ﬁnd it preferable to use Stateless Functional Components, which are based on ES6 arrow functions.  Stateless Functional Components  In many applications there are smart components that hold state but render dumb components that simply receive props and return HTML as JSX. Stateless functional components are much more reusable and have a positive performance impact on your application.  They have 2 main characteristics:  1. 2.  When rendered they receive an object with all the props that were passed down They must return the JSX to be rendered     When using JSX inside a module you must import React import React from 'react'; import PropTypes from 'prop-types';  const FirstComponent = props =>                 Hello, {props.name}! I am a FirstComponent.        ;    arrow components also may have props validation FirstComponent.propTypes = {     name: PropTypes.string.isRequired, }     To use FirstComponent in another file it must be exposed through an export call:  GoalKicker.com – React JS Notes for Professionals  11   In contrast to the 'stateless' components shown above, 'stateful' components have a state object that can be updated with the setState method. The state must be initialized in the constructor before it can be set:  export default FirstComponent; Stateful Components  import React, { Component } from 'react';  class SecondComponent extends Component {     constructor props  {         super props ;          this.state = {             toggle: true         };             This is to bind context when passing onClick as a callback         this.onClick = this.onClick.bind this ;     }      onClick   {         this.setState  prevState, props  =>  {             toggle: !prevState.toggle         }  ;     }         render   {         return                                 Hello, {this.props.name}! I am a SecondComponent.                                   Toggle is: {this.state.toggle}                        ;     } }  Extending a component with PureComponent instead of Component will automatically implement the shouldComponentUpdate   lifecycle method with shallow prop and state comparison. This keeps your application more performant by reducing the amount of un-necessary renders that occur. This assumes your components are 'Pure' and always render the same output with the same state and props input.  Higher Order Components  Higher order components  HOC  allow to share component functionality.  import React, { Component } from 'react';  const PrintHello = ComposedComponent => class extends Component {     onClick   {         console.log 'hello' ;     }          * The higher order component takes another component as a parameter     and then renders it with additional props *      render   {         return       } }  GoalKicker.com – React JS Notes for Professionals  12   const FirstComponent = props =>                 Hello, {props.name}! I am a FirstComponent.        ;  const ExtendedComponent = PrintHello FirstComponent ;  Section 2.2: Basic Component  Given the following HTML ﬁle:  index.html  Higher order components are used when you want to share logic across several components regardless of how diﬀerent they render.                     React Tutorial                                                    You can create a basic component using the following code in a separate ﬁle:  scripts example.js  import React, { Component } from 'react'; import ReactDOM from 'react-dom';  class FirstComponent extends Component {   render   {     return                   Hello, world! I am a FirstComponent.              ;   } } ReactDOM.render     ,    Note that this is the same as the variable you stored above   document.getElementById 'content'   ;  You will get the following result  note what is inside of divcontent :                 GoalKicker.com – React JS Notes for Professionals  13        React Tutorial                                                           Hello, world! I am a FirstComponent.                               Section 2.3: Nesting Components  A lot of the power of ReactJS is its ability to allow nesting of components. Take the following two components:  var React = require 'react' ; var createReactClass = require 'create-react-class' ;  var CommentList = reactCreateClass {   render: function   {     return                   Hello, world! I am a CommentList.              ;   } } ;  var CommentForm = reactCreateClass {   render: function   {     return                   Hello, world! I am a CommentForm.              ;   } } ;  You can nest and refer to those components in the deﬁnition of a diﬀerent component:  var React = require 'react' ; var createReactClass = require 'create-react-class' ;  var CommentBox = reactCreateClass {   render: function   {     return                    Comments               Which was defined above and can be reused              Same here              ;   } } ;  Further nesting can be done in three ways, which all have their own places to be used.  GoalKicker.com – React JS Notes for Professionals  14   Easy and fast to separate UI elements Easy to inject props down to children based on the parent component's state  1. Nesting without using children   continued from above   var CommentList = reactCreateClass {   render: function   {     return                             Hello, world! I am a CommentList.              ;   } } ;  This is the style where A composes B and B composes C.  Pros  Cons  Good if  Less visibility into the composition architecture Less reusability  B and C are just presentational components B should be responsible for C's lifecycle  2. Nesting using children   continued from above   var CommentBox = reactCreateClass {   render: function   {     return                    Comments                             child                                  ;   } } ;  Pros  Cons  Better components lifecycle management Better visibility into the composition architecture Better reusuability  This is the style where A composes B and A tells B to compose C. More power to parent components.  GoalKicker.com – React JS Notes for Professionals  15   Injecting props can become a little expensive Less ﬂexibility and power in child components  Good if  B should accept to compose something diﬀerent than C in the future or somewhere else A should control the lifecycle of C  B would render C using this.props.children, and there isn't a structured way for B to know what those children are for. So, B may enrich the child components by giving additional props down, but if B needs to know exactly what they are, 3 might be a better option.  3. Nesting using props   continued from above   var CommentBox = reactCreateClass {   render: function   {     return                    Comments              prop                        ;   } } ;  Composition as a feature Easy validation Better composaiblility  Pros  Cons  Good if  Injecting props can become a little expensive Less ﬂexibility and power in child components  B has speciﬁc features deﬁned to compose something B should only know how to render not what to render  This is the style where A composes B and B provides an option for A to pass something to compose for a speciﬁc purpose. More structured composition.  3 is usually a must for making a public library of components but also a good practice in general to make composable components and clearly deﬁne the composition features. 1 is the easiest and fastest to make something that works, but 2 and 3 should provide certain beneﬁts in various use cases.  Section 2.4: Props  Props are a way to pass information into a React component, they can have any type including functions - sometimes referred to as callbacks.  In JSX props are passed with the attribute syntax  GoalKicker.com – React JS Notes for Professionals  16      Inside the deﬁnition for MyComponent userID will now be accessible from the props object     The render function inside MyComponent render   {     return            The user's ID is {this.props.userID}        }  It's important to deﬁne all props, their types, and where applicable, their default value:     defined at the bottom of MyComponent MyComponent.propTypes = {     someObject: React.PropTypes.object,     userID: React.PropTypes.number.isRequired,     title: React.PropTypes.string };  MyComponent.defaultProps = {     someObject: {},     title: 'My Default Title' }  Using defaultProps allows you to simplify  const { title = 'My Default Title' } = this.props; console.log title ;  to  console.log this.props.title ;  In this example the prop someObject is optional, but the prop userID is required. If you fail to provide userID to MyComponent, at runtime the React engine will show a console warning you that the required prop was not provided. Beware though, this warning is only shown in the development version of the React library, the production version will not log any warnings.  It's also a safeguard for use of object array and functions. If you do not provide a default prop for an object, the following will throw an error if the prop is not passed:  if  this.props.someObject.someKey   In example above, this.props.someObject is undefined and therefore the check of someKey will throw an error and the code will break. With the use of defaultProps you can safely use the above check.  Section 2.5: Component states - Dynamic user-interface  Suppose we want to have the following behaviour - We have a heading  say h3 element  and on clicking it, we want it to become an input box so that we can modify heading name. React makes this highly simple and intuitive using component states and if else statements.  Code explanation below      I have used ReactBootstrap elements. But the code works with regular html elements also var Button = ReactBootstrap.Button; var Form = ReactBootstrap.Form;  GoalKicker.com – React JS Notes for Professionals  17   var FormGroup = ReactBootstrap.FormGroup; var FormControl = ReactBootstrap.FormControl;  var Comment = reactCreateClass {   getInitialState: function   {     return {show: false, newTitle: ''};   },    handleTitleSubmit: function   {        code to handle input box submit - for example, issue an ajax request to change name in database   },    handleTitleChange: function e  {       code to change the name in form input box. newTitle is initialized as empty string. We need to update it with the string currently entered by user in the form     this.setState {newTitle: e.target.value} ;   },    changeComponent: function   {        this toggles the show variable which is used  for dynamic UI     this.setState {show: !this.state.show };   },    render: function   {      var clickableTitle;      if this.state.show  {         clickableTitle =                                                                                                                              ;     } else {         clickabletitle =                                                                   Default Text                                                           ;     }      return                         {clickableTitle}                ;   } } ;  ReactDOM.render       , document.getElementById 'content'   ;  The main part of the code is the clickableTitle variable. Based on the state variable show, it can be either be a Form element or a Button element. React allows nesting of components.  So we can add a {clickableTitle} element in the render function. It looks for the clickableTitle variable. Based on the value 'this.state.show', it displays the corresponding element.  GoalKicker.com – React JS Notes for Professionals  18   Section 2.6: Variations of Stateless Functional Components  const languages = [   'JavaScript',   'Python',   'Java',   'Elm',   'TypeScript',   'C',   'F' ]     one liner const Language =  {language}  =>  {language}   Language.propTypes = {   message: React.PropTypes.string.isRequired }   ** * If there are more than one line. * Please notice that round brackets are optional here, * However it's better to use them for readability *  const LanguagesList =  {languages}  => {         {languages.map language =>   }     }  LanguagesList.PropTypes = {   languages: React.PropTypes.array.isRequired }   **  * This syntax is used if there are more work beside just JSX presentation  * For instance some data manipulations needs to be done.  * Please notice that round brackets after return are required,  * Otherwise return will return nothing  undefined   *  const LanguageSection =  {header, languages}  => {      do some work   const formattedLanguages = languages.map language => language.toUpperCase      return                {header}                    }  LanguageSection.PropTypes = {   header: React.PropTypes.string.isRequired,   languages: React.PropTypes.array.isRequired }  ReactDOM.render    <LanguageSection  GoalKicker.com – React JS Notes for Professionals  19   You should use caution when using setState in an asynchronous context. For example, you might try to call setState in the callback of a get request:      header="Languages"     languages={languages}  >,   document.getElementById 'app'     Here you can ﬁnd working example of it.  Section 2.7: setState pitfalls  class MyClass extends React.Component {     constructor   {         super  ;          this.state = {             user: {}         };     }      componentDidMount   {         this.fetchUser  ;     }      fetchUser   {         $.get ' api users self'              .then  user  => {                 this.setState {user: user} ;             } ;     }      render   {         return  {this.state.user} ;     } }  class MyClass extends React.Component {     constructor   {         super  ;          this.state = {             user: {},             xhr: null         };     }      componentWillUnmount   {         let xhr = this.state.xhr;  This could call problems - if the callback is called after the Component is dismounted, then this.setState won't be a function. Whenever this is the case, you should be careful to ensure your usage of setState is cancellable.  In this example, you might wish to cancel the XHR request when the component dismounts:             Cancel the xhr request, so the callback is never called         if  xhr && xhr.readyState != 4  {             xhr.abort  ;         }     }  GoalKicker.com – React JS Notes for Professionals  20   The async method is saved as a state. In the componentWillUnmount you perform all your cleanup - including canceling the XHR request.  You could also do something more complex. In this example, I'm creating a 'stateSetter' function that accepts the this object as an argument and prevents this.setState when the function cancel has been called:      componentDidMount   {         this.fetchUser  ;     }      fetchUser   {         let xhr = $.get ' api users self'              .then  user  => {                 this.setState {user: user} ;             } ;          this.setState {xhr: xhr} ;     } }  function stateSetter context  {     var cancelled = false;     return {         cancel: function    {             cancelled = true;         },         setState newState  {             if  !cancelled  {                 context.setState newState ;             }         }     } }  class Component extends React.Component {     constructor props  {         super props ;         this.setter = stateSetter this ;         this.state = {             user: 'loading'         };     }     componentWillUnmount   {         this.setter.cancel  ;     }     componentDidMount   {         this.fetchUser  ;     }     fetchUser   {         $.get ' api users self'              .then  user  => {                 this.setter.setState {user: user} ;             } ;     }     render   {         return  {this.state.user}      } }  This works because the cancelled variable is visible in the setState closure we created.  GoalKicker.com – React JS Notes for Professionals  21   Chapter 3: Using ReactJS with TypeScript Section 3.1: ReactJS component written in TypeScript  Actually you can use ReactJS's components in Typescript as in facebook's example. Just replace 'jsx' ﬁle's extension to 'tsx':  But in order to make full use of Typescript's main feature  static type checking  should be done couple things:    helloMessage.tsx: var HelloMessage = React.createClass {   render: function   {     return  Hello {this.props.name} ;   } } ; ReactDOM.render  , mountNode ;  1  convert React.createClass example to ES6 Class:    helloMessage.tsx: class HelloMessage extends React.Component {   render   {     return  Hello {this.props.name} ;   } } ReactDOM.render  , mountNode ;  2  next add Props and State interfaces:  interface IHelloMessageProps {     name:string; }  interface IHelloMessageState {     empty in our case }  class HelloMessage extends React.Component  {   constructor  {     super  ;   }     render   {     return  Hello {this.props.name} ;   } } ReactDOM.render  , mountNode ;  Now Typescript will display an error if the programmer forgets to pass props. Or if they added props that are not deﬁned in the interface.  Section 3.2: Installation and Setup  To use typescript with react in a node project, you must ﬁrst have a project directory initialized with npm. To initialize the directory with npm init  Installing via npm or yarn  GoalKicker.com – React JS Notes for Professionals  22   You can install React using npm by doing the following:  npm install --save react react-dom  Facebook released its own package manager named Yarn, which can also be used to install React. After installing Yarn you just need to run this command:  yarn add react react-dom  You can then use React in your project in exactly the same way as if you had installed React via npm.  Installing react type deﬁnitions in Typescript 2.0+  To compile your code using typescript, add install type deﬁnition ﬁles using npm or yarn.  npm install --save-dev @types react @types react-dom  or, using yarn  yarn add --dev @types react @types react-dom  Installing react type deﬁnitions in older versions of Typescript  You have to use a separate package called tsd  tsd install react react-dom --save  Adding or Changing the Typescript conﬁguration  To use JSX, a language mixing javascript with html xml, you have to change the typescript compiler conﬁguration. In the project's typescript conﬁguration ﬁle  usually named tsconfig.json , you will need to add the JSX option as:  "compilerOptions": { "jsx": "react" },  That compiler option basically tells the typescript compiler to translate the JSX tags in code to javascript function calls.  To avoid typescript compiler converting JSX to plain javascript function calls, use  Section 3.3: Stateless React Components in TypeScript  React components that are pure functions of their props and do not require any internal state can be written as JavaScript functions instead of using the standard class syntax, as:  "compilerOptions": {     "jsx": "preserve" },  import React from 'react'  const HelloWorld =  props  =>        Hello, {props.name}!   ;  The same can be achieved in Typescript using the React.SFC class:  GoalKicker.com – React JS Notes for Professionals  23   import * as React from 'react';  class GreeterProps {    name: string }  const Greeter : React.SFC  = props =>      Hello, {props.name}! ;  Note that, the name React.SFC is an alias for React.StatelessComponent So, either can be used.  Section 3.4: Stateless and property-less Components  The simplest react component without a state and no properties can be written as:  import * as React from 'react';  const Greeter =    =>  Hello, World!   That component, however, can't access this.props since typescript can't tell if it is a react component. To access its props, use:  import * as React from 'react';  const Greeter: React.SFC  = props =>    =>  Hello, World!   Even if the component doesn't have explicitly deﬁned properties, it can now access props.children since all components inherently have children.  Another similar good use of stateless and property-less components is in simple page templating. The following is an examplinary simple Page component, assuming there are hypothetical Container, NavTop and NavBottom components already in the project:  import * as React from 'react';  const Page: React.SFC  = props =>    =>                         {props.children}                  const LoginPage: React.SFC  = props =>    =>               Login Pass:          In this example, the Page component can later be used by any other actual page as a base template.  GoalKicker.com – React JS Notes for Professionals  24   Chapter 4: State in React Section 4.1: Basic State  State in React components is essential to manage and communicate data in your application. It is represented as a JavaScript object and has component level scope, it can be thought of as the private data of your component.  In the example below we are deﬁning some initial state in the constructor function of our component and make use of it in the render function.  class ExampleComponent extends React.Component {   constructor props {     super props ;         Set-up our initial state     this.state = {       greeting: 'Hiya Buddy!'     };   }    render   {        We can access the greeting property through this.state     return         {this.state.greeting}       ;   } }  Section 4.2: Common Antipattern  You should not save props into state. It is considered an anti-pattern. For example:  export default class MyComponent extends React.Component {     constructor   {         super  ;          this.state = {             url: ''         }          this.onChange = this.onChange.bind this ;     }      onChange e  {         this.setState {             url: this.props.url + ' days=?' + e.target.value         } ;     }      componentWillMount   {         this.setState {url: this.props.url} ;     }      render   {         return                                    GoalKicker.com – React JS Notes for Professionals  25                   URL: {this.state.url}                             } }  The prop url is saved on state and then modiﬁed. Instead, choose to save the changes to a state, and then build the full path using both state and props:  export default class MyComponent extends React.Component {     constructor   {         super  ;          this.state = {             days: ''         }          this.onChange = this.onChange.bind this ;     }      onChange e  {         this.setState {             days: e.target.value         } ;     }      render   {         return                                                    URL: {this.props.url + ' days?=' + this.state.days}                             } }  This is because in a React application we want to have a single source of truth - i.e. all data is the responsibility of one single component, and only one component. It is the responsibility of this component to store the data within its state, and distribute the data to other components via props.  In the ﬁrst example, both the MyComponent class and its parent are maintaining 'url' within their state. If we update state.url in MyComponent, these changes are not reﬂected in the parent. We have lost our single source of truth, and it becomes increasingly diﬃcult to track the ﬂow of data through our application. Contrast this with the second example - url is only maintained in the state of the parent component, and utilised as a prop in MyComponent - we therefore maintain a single source of truth.  Section 4.3: setState    The primary way that you make UI updates to your React applications is through a call to the setState   function. This function will perform a shallow merge between the new state that you provide and the previous state, and will trigger a re-render of your component and all decedents.  Parameters  1.  updater: It can be an object with a number of key-value pairs that should be merged into the state or a function that returns such an object.  GoalKicker.com – React JS Notes for Professionals  26   2.  callback  optional : a function which will be executed after setState   has been executed successfully. Due to the fact that calls to setState   are not guaranteed by React to be atomic, this can sometimes be useful if you want to perform some action after you are positive that setState   has been executed successfully.  Usage:  The setState method accepts an updater argument that can either be an object with a number of key-value-pairs that should be merged into the state, or a function that returns such an object computed from prevState and props.  Using setState   with an Object as updater       An example ES6 style component, updating the state on a simple button click.    Also demonstrates where the state can be set directly and where setState should be used.    class Greeting extends React.Component {     constructor props  {         super props ;         this.click = this.click.bind this ;            Set initial state  ONLY ALLOWED IN CONSTRUCTOR          this.state = {             greeting: 'Hello!'         };     }     click e  {         this.setState {               greeting: 'Hello World!'         } ;     }     render   {         return                                 {this.state.greeting}                   Click me                         ;     }     } Using setState   with a Function as updater       This is most often used when you want to check or make use    of previous state before updating any values.     this.setState function previousState, currentProps  {   return {     counter: previousState.counter + 1   }; } ;  This can be safer than using an object argument where multiple calls to setState   are used, as multiple calls may be batched together by React and executed at once, and is the preferred approach when using current props to set state.  this.setState { counter: this.state.counter + 1 } ; this.setState { counter: this.state.counter + 1 } ;  GoalKicker.com – React JS Notes for Professionals  27   this.setState { counter: this.state.counter + 1 } ;  These calls may be batched together by React using Object.assign  , resulting in the counter being incremented by 1 rather than 3.  The functional approach can also be used to move state setting logic outside of components. This allows for isolation and re-use of state logic.     Outside of component class, potentially in another file module  function incrementCounter previousState, currentProps  {     return {         counter: previousState.counter + 1     }; }     Within component  this.setState incrementCounter ; Calling setState   with an Object and a callback function       'Hi There' will be logged to the console after setState completes     this.setState { name: 'John Doe' }, console.log 'Hi there'  ;  Section 4.4: State, Events And Managed Controls  Here's an example of a React component with a "managed" input ﬁeld. Whenever the value of the input ﬁeld changes, an event handler is called which updates the state of the component with the new value of the input ﬁeld. The call to setState in the event handler will trigger a call to render updating the component in the dom.  import React from 'react'; import {render} from 'react-dom';  class ManagedControlDemo extends React.Component {    constructor props {     super props ;     this.state = {message: ""};   }    handleChange e {     this.setState {message: e.target.value} ;   }    render   {     return                    Type something here            <input             onChange={this.handleChange.bind this }             value={this.state.message}             autoFocus  >          {this.state.message}              ;  GoalKicker.com – React JS Notes for Professionals  28     } }  render  , document.querySelector 'app'  ;  Its very important to note the runtime behavior. Every time a user changes the value in the input ﬁeld  handleChange will be called and so setState will be called and so render will be called  Pop quiz, after you type a character in the input ﬁeld, which DOM elements change  1. 2. 3. 4.  all of these - the top level div, legend, input, h1 only the input and h1 nothing whats a DOM?  You can experiment with this more here to ﬁnd the answer  GoalKicker.com – React JS Notes for Professionals  29   Chapter 5: Props in React Section 5.1: Introduction  props are used to pass data and methods from a parent component to a child component.  Interesting things about props  1. 2.  They are immutable. They allow us to create reusable components.  Basic example  class Parent extends React.Component{   doSomething  {      console.log "Parent component" ;   }   render   {     return            <Child            text="This is the child number 1"            title="Title 1"            onClick={this.doSomething}  >          <Child            text="This is the child number 2"            title="Title 2"            onClick={this.doSomething}  >           } }  class Child extends React.Component{   render   {     return           {this.props.title}          {this.props.text}            } }  Syntax  ES5  var MyClass = React.createClass {   getDefaultProps: function   {     return {       randomObject: {},  As you can see in the example, thanks to props we can create reusable components.  Section 5.2: Default props  defaultProps allows you to set default, or fallback, values for your component props. defaultProps are useful when you call components from diﬀerent views with ﬁxed props, but in some views you need to pass diﬀerent value.  GoalKicker.com – React JS Notes for Professionals  30         ...     };   } }  ES6  ES7  class MyClass extends React.Component {...}   MyClass.defaultProps = {     randomObject: {},     ... }  class MyClass extends React.Component {       static defaultProps = {         randomObject: {},         ...     }; }    optionalArray: React.PropTypes.array,   optionalBool: React.PropTypes.bool,   optionalFunc: React.PropTypes.func,   optionalNumber: React.PropTypes.number,   optionalObject: React.PropTypes.object,   optionalString: React.PropTypes.string,   optionalSymbol: React.PropTypes.symbol  Syntax  ES5  var MyClass = React.createClass {   propTypes: {     randomObject: React.PropTypes.object,  The result of getDefaultProps   or defaultProps will be cached and used to ensure that this.props.randomObject will have a value if it was not speciﬁed by the parent component.  Section 5.3: PropTypes  propTypes allows you to specify what props your component needs and the type they should be. Your component will work without setting propTypes, but it is good practice to deﬁne these as it will make your component more readable, act as documentation to other developers who are reading your component, and during development, React will warn you if you you try to set a prop which is a diﬀerent type to the deﬁnition you have set for it.  Some primitive propTypes and commonly useable propTypes are -  If you attach isRequired to any propType then that prop must be supplied while creating the instance of that component. If you don't provide the required propTypes then component instance can not be created.  GoalKicker.com – React JS Notes for Professionals  31       callback: React.PropTypes.func.isRequired,     ...   } }  class MyClass extends React.Component {...}   MyClass.propTypes = {     randomObject: React.PropTypes.object,     callback: React.PropTypes.func.isRequired,     ... };  ES6  ES7  class MyClass extends React.Component {        static propTypes = {         randomObject: React.PropTypes.object,         callback: React.PropTypes.func.isRequired,         ...     }; }  More complex props validation  In the same way, PropTypes allows you to specify more complex validation  Validating an object  ...     randomObject: React.PropTypes.shape {         id: React.PropTypes.number.isRequired,         text: React.PropTypes.string,     } .isRequired, ...  Validating on array of objects  ...     arrayOfObjects: React.PropTypes.arrayOf React.PropTypes.shape {         id: React.PropTypes.number.isRequired,         text: React.PropTypes.string,     }  .isRequired, ...  Section 5.4: Passing down props using spread operator  Instead of  var component =  ;  Where each property needs to be passed as a single prop value you could use the spread operator ... supported for arrays in ES6 to pass down all your values. The component will now look like this.  GoalKicker.com – React JS Notes for Professionals  32   var component =  ;  Remember that the properties of the object that you pass in are copied onto the component's props.  The order is important. Later attributes override previous ones.   var props = { foo: 'default' };  var component =  ;  console.log component.props.foo ;    'override'  Another case is that you also can use spread operator to pass only parts of props to children components, then you can use destructuring syntax from props again.  It's very useful when children components need lots of props but not want pass them one by one.   const { foo, bar, other } = this.props    { foo: 'foo', bar: 'bar', other: 'other' };  var component =  ;  const { foo, bar } = component.props  console.log foo, bar ;    'foo bar'  Section 5.5: Props.children and component composition  The "child" components of a component are available on a special prop, props.children. This prop is very useful for "Compositing" components together, and can make JSX markup more intuitive or reﬂective of the intended ﬁnal structure of the DOM:  var SomeComponent = function    {     return                          {this.props.heading}                                {this.props.children}                              ; }  var ParentComponent = function    {     return                           Lots of content                 Or not                  ; }  Which allows us to include an arbitrary number of sub-elements when using the component later:  Props.children can also be manipulated by the component. Because props.children may or may not be an array, React provides utility functions for them as React.Children. Consider in the previous example if we had wanted to wrap each paragraph in its own   element:  var SomeComponent = function    {     return                          {this.props.heading}                 GoalKicker.com – React JS Notes for Professionals  33                   {React.Children.map this.props.children, function  child  {                     return                                                         React.cloneElement child                                                 ;                 } }                              ; }  Note the use of React.cloneElement to remove the props from the child   tag - because props are immutable, these values cannot be changed directly. Instead, a clone without these props must be used.  Additionally, when adding elements in loops, be aware of how React reconciles children during a rerender, and strongly consider including a globally unique key prop on child elements added in a loop.  Section 5.6: Detecting the type of Children components  Sometimes it's really useful to know the type of child component when iterating through them. In order to iterate through the children components you can use React Children.map util function:  React.Children.map this.props.children,  child  => {   if  child.type === MyComponentType  {     ...   } } ;  The child object exposes the type property which you can compare to a speciﬁc component.  GoalKicker.com – React JS Notes for Professionals  34   Chapter 6: React Component Lifecycle  Lifecycle methods are to be used to run code and interact with your component at diﬀerent points in the components life. These methods are based around a component Mounting, Updating, and Unmounting.  Section 6.1: Component Creation  When a React component is created, a number of functions are called:  If you are using React.createClass  ES5 , 5 user deﬁned functions are called If you are using class Component extends React.Component  ES6 , 3 user deﬁned functions are called  Prop values returned by this function will be used as defaults if they are not deﬁned when the component is instantiated.  In the following example, this.props.name will be defaulted to Bob if not speciﬁed otherwise:  getDefaultProps    ES5 only   This is the ﬁrst method called.  getDefaultProps   {   return {     initialCount: 0,     name: 'Bob'   }; } getInitialState    ES5 only   This is the second method called.  getInitialState   {   return {     count : this.props.initialCount   }; } componentWillMount    ES5 and ES6   This is the third method called.  componentWillMount   {   ... } render    ES5 and ES6   This is the fourth method called.  The return value of getInitialState   deﬁnes the initial state of the React component. The React framework will call this function and assign the return value to this.state.  In the following example, this.state.count will be intialized with the value of this.props.initialCount:  This function can be used to make ﬁnal changes to the component before it will be added to the DOM.  The render   function should be a pure function of the component's state and props. It returns a single element  GoalKicker.com – React JS Notes for Professionals  35   which represents the component during the rendering process and should either be a representation of a native DOM component  e.g.    or a composite component. If nothing should be rendered, it can return null or undefined.  This function will be recalled after any change to the component's props or state.  The component has been mounted and you are now able to access the component's DOM nodes, e.g. via refs.  render   {   return               Hello, {this.props.name}!          ; } componentDidMount    ES5 and ES6   This is the ﬁfth method called.  This method should be used for:  Preparing timers Fetching data Adding event listeners Manipulating DOM elements  componentDidMount   {   ... } ES6 Syntax  If the component is deﬁned using ES6 class syntax, the functions getDefaultProps   and getInitialState   cannot be used.  Instead, we declare our defaultProps as a static property on the class, and declare the state shape and initial state in the constructor of our class. These are both set on the instance of the class at construction time, before any other React lifecycle function is called.  The following example demonstrates this alternative approach:  class MyReactClass extends React.Component {   constructor props {     super props ;      this.state = {       count: this.props.initialCount     };   }     upCount   {     this.setState  prevState  =>  {       count: prevState.count + 1     }  ;   }     render   {     return            GoalKicker.com – React JS Notes for Professionals  36           Hello, {this.props.name}!          You clicked the button {this.state.count} times.           Click here!               ;   } }  Default values for the component props are speciﬁed by setting the defaultProps property of the class:  The idiomatic way to set up the initial state of the component is to set this.state in the constructor:  MyReactClass.defaultProps = {   name: 'Bob',   initialCount: 0 };  Replacing getDefaultProps    MyReactClass.defaultProps = {   name: 'Bob',   initialCount: 0 };  Replacing getInitialState    constructor props {   super props ;    this.state = {     count: this.props.initialCount   }; }  Section 6.2: Component Removal  componentWillUnmount    This method is called before a component is unmounted from the DOM.  It is a good place to perform cleaning operations like:  Removing event listeners. Clearing timers. Stopping sockets. Cleaning up redux states.  componentWillUnmount  {   ... }  An example of removing attached event listener in componentWillUnMount  import React, { Component } from 'react';  export default class SideMenu extends Component {  GoalKicker.com – React JS Notes for Professionals  37     constructor props  {     super props ;     this.state = {         ...       };     this.openMenu = this.openMenu.bind this ;     this.closeMenu = this.closeMenu.bind this ;   }    componentDidMount   {     document.addEventListener "click", this.closeMenu ;   }    componentWillUnmount   {     document.removeEventListener "click", this.closeMenu ;   }    openMenu   {     ...   }    closeMenu   {     ...   }    render   {     return                   <a           href      = "javascript:void 0 "           className = "closebtn"           onClick   = {this.closeMenu}         >           ×                               Some other structure                        ;   } }  Section 6.3: Component Update  componentWillReceiveProps nextProps   This is the ﬁrst function called on properties changes.  When component's properties change, React will call this function with the new properties. You can access to the old props with this.props and to the new props with nextProps.  With these variables, you can do some comparison operations between old and new props, or call function because a property change, etc.  componentWillReceiveProps nextProps {   if  nextProps.initialCount && nextProps.initialCount > this.state.count {     this.setState {       count : nextProps.initialCount     } ;  GoalKicker.com – React JS Notes for Professionals  38     } } shouldComponentUpdate nextProps, nextState   This is the second function called on properties changes and the ﬁrst on state changes.  By default, if another component   your component change a property   a state of your component, React will render a new version of your component. In this case, this function always return true.  You can override this function and choose more precisely if your component must update or not.  This function is mostly used for optimization.  In case of the function returns false, the update pipeline stops immediately.  This function works like componentWillMount  . Changes aren't in DOM, so you can do some changes just before the update will perform.  componentShouldUpdate nextProps, nextState {   return this.props.name !== nextProps.name      this.state.count !== nextState.count; } componentWillUpdate nextProps, nextState    !\ : you cannot use this.setState  .  componentWillUpdate nextProps, nextState {} render    There's some changes, so re-render the component.  componentDidUpdate prevProps, prevState   Same stuﬀ as componentDidMount   : DOM is refreshed, so you can do some work on the DOM here.  componentDidUpdate prevProps, prevState {}  Section 6.4: Lifecycle method call in dierent states  This example serves as a complement to other examples which talk about how to use the lifecycle methods and when the method will be called.  This example summarize Which methods  componentWillMount, componentWillReceiveProps, etc  will be called and in which sequence will be diﬀerent for a component in diﬀerent states:  When a component is initialized:  1. 2. 3. 4. 5.  getDefaultProps getInitialState componentWillMount render componentDidMount  When a component has state changed:  1.  shouldComponentUpdate  GoalKicker.com – React JS Notes for Professionals  39   2. 3. 4.  componentWillUpdate render componentDidUpdate  When a component has props changed:  1. 2. 3. 4. 5.  componentWillReceiveProps shouldComponentUpdate componentWillUpdate render componentDidUpdate  When a component is unmounting:  1.  componentWillUnmount  Section 6.5: React Component Container  When building a React application, it is often desirable to divide components based on their primary responsibility, into Presentational and Container components. Presentational components are concerned only with displaying data - they can be regarded as, and are often implemented as, functions that convert a model to a view. Typically they do not maintain any internal state. Container components are concerned with managing data. This may be done internally through their own state, or by acting as intermediaries with a state-management library such as Redux. The container component will not directly display data, rather it will pass the data to a presentational component.     Container component import React, { Component } from 'react'; import Api from 'path to api';  class CommentsListContainer extends Component {     constructor   {         super  ;            Set initial state         this.state = { comments: [] }     }      componentDidMount   {            Make API call and update state with returned comments         Api.getComments  .then comments => this.setState { comments }  ;     }      render   {            Pass our state comments to the presentational component         return                ;          ;     } }     Presentational Component const CommentsList =  { comments }  =>                 {comments.map comment =>                {comment}           }        ;  GoalKicker.com – React JS Notes for Professionals  40   CommentsList.propTypes = {     comments: React.PropTypes.arrayOf React.PropTypes.string  }  GoalKicker.com – React JS Notes for Professionals  41   Chapter 7: Forms and User Input Section 7.1: Controlled Components  Controlled form components are deﬁned with a value property. The value of controlled inputs is managed by React, user inputs will not have any direct inﬂuence on the rendered input. Instead, a change to the value property needs to reﬂect this change.  class Form extends React.Component {   constructor props  {     super props ;         this.onChange = this.onChange.bind this ;         this.state = {       name: ''     };   }     onChange e  {     this.setState {       name: e.target.value     } ;   }     render   {     return                    Name:           <input           id='name-input'           onChange={this.onChange}           value={this.state.name}  >                 } }  The above example demonstrates how the value property deﬁnes the current value of the input and the onChange event handler updates the component's state with the user's input.  Form inputs should be deﬁned as controlled components where possible. This ensures that the component state and the input value is in sync at all times, even if the value is changed by a trigger other than a user input.  Section 7.2: Uncontrolled Components  Uncontrolled components are inputs that do not have a value property. In opposite to controlled components, it is the application's responsibility to keep the component state and the input value in sync.  class Form extends React.Component {   constructor props  {     super props ;         this.onChange = this.onChange.bind this ;         this.state = {       name: 'John'  GoalKicker.com – React JS Notes for Professionals  42       };   }     onChange e  {     this.setState {       name: e.target.value     } ;   }     render   {     return                    Name:           <input           id='name-input'           onChange={this.onChange}           defaultValue={this.state.name}  >                 } }  Here, the component's state is updated via the onChange event handler, just as for controlled components. However, instead of a value property, a defaultValue property is supplied. This determines the initial value of the input during the ﬁrst render. Any subsequent changes to the component's state are not automatically reﬂected by the input value; If this is required, a controlled component should be used instead.  GoalKicker.com – React JS Notes for Professionals  43   Chapter 8: React Boilerplate [React + Babel + Webpack] Section 8.1: react-starter project About this Project  This is simple boilerplate project. This post will guide you to set up the environment for ReactJs + Webpack + Bable.  Lets get Started  we will need node package manager for ﬁre up express server and manage dependencies throughout the project. if you are new to node package manager, you can check here. Note : Installing node package manager is require here.  Create a folder with suitable name and navigate into it from terminal or by GUI.Then go to terminal and type npm init this will create a package.json ﬁle, Nothing scary , it will ask you few question like name of your project ,version, description, entry point, git repository, author, license etc. Here entry point is important because node will initially look for it when you run the project. At the end it will ask you to verify the information you provide. You can type yes or modify it. Well that's it , our package.json ﬁle is ready.  Express server setup run npm install express@4 --save. This is all the dependencies we needed for this project.Here save ﬂag is important, without it package.js ﬁle will not be updated. Main task of package.json is to store list of dependencies. It will add express version 4. Your package.json will look like "dependencies": { "express": "^4.13.4", ............. },  After complete download you can see there is node_modules folder and sub folder of our dependencies. Now on the root of project create new ﬁle server.js ﬁle. Now we are setting express server. I am going to past all the code and explain it later.  var express = require 'express' ;    Create our app var app = express  ;  app.use express.static 'public'  ;  app.listen 3000, function    {   console.log 'Express server is using port:3000' ; } ;  var express = require 'express' ; this will gave you the access of entire express api.  var app = express  ; will call express library as function. app.use  ; let the add the functionality to your express application. app.use express.static 'public'  ; will specify the folder name that will be expose in our web server. app.listen port, function  {}  will here our port will be 3000 and function we are calling will verify that out web server is running properly. That's it express server is set up.  Now go to our project and create a new folder public and create index.html ﬁle. index.html is the default ﬁle for you application and Express server will look for this ﬁle. The index.html is simple html ﬁle which looks like          GoalKicker.com – React JS Notes for Professionals  44               hello World        And go to the project path through the terminal and type node server.js. Then you will see * console.log 'Express server is using port:3000' ;*.  Go to the browser and type http:  localhost:3000 in nav bar you will see hello World.  Now go inside the public folder and create a new ﬁle app.jsx. JSX is a preprocessor step that adds XML syntax to your JavaScript.You can deﬁnitely use React without JSX but JSX makes React a lot more elegant. Here is the sample code for app.jsx  ReactDOM.render     Hello World!!! ,   document.getElementById 'app'   ;       Now go to index.html and modify the code , it should looks like this          <script src="https:  cdnjs.cloudflare.com ajax libs babel-core 5.8.23                                               browser.min.js">                                                                 With this in place you are all done, I hope you ﬁnd it simple.  Section 8.2: Setting up the project  You need Node Package Manager to install the project dependencies. Download node for your operating system from Nodejs.org. Node Package Manager comes with node.  You can also use Node Version Manager to better manage your node and npm versions. It is great for testing your project on diﬀerent node versions. However, it is not recommended for production environment.  Once you have installed node on your system, go ahead and install some essential packages to blast oﬀ your ﬁrst React project using Babel and Webpack.  GoalKicker.com – React JS Notes for Professionals  45   Before we actually start hitting commands in the terminal. Take a look at what Babel and Webpack are used for.  You can start your project by running npm init in your terminal. Follow the initial setup. After that, run following commands in your terminal-  npm install babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0 webpack webpack-dev-server react-hot-loader --save-dev  npm install react react-dom --save  Dependencies:  Dev Dependecies:  Optional Dev Dependencies:  npm install eslint eslint-plugin-react babel-eslint --save-dev  You may refer to this sample package.json  Create .babelrc in your project root with following contents:  {   "presets": ["es2015", "stage-0", "react"] }  Optionally create .eslintrc in your project root with following contents:  {   "ecmaFeatures": {     "jsx": true,     "modules": true   },   "env": {     "browser": true,     "node": true   },   "parser": "babel-eslint",   "rules": {     "quotes": [2, "single"],     "strict": [2, "never"],   },   "plugins": [     "react"   ] }  node_modules npm-debug.log .DS_Store dist  Create a .gitignore ﬁle to prevent uploading generated ﬁles to your git repo.  Create webpack.config.js ﬁle with following minimum contents.  var path = require 'path' ; var webpack = require 'webpack' ;  GoalKicker.com – React JS Notes for Professionals  46   module.exports = {   devtool: 'eval',   entry: [     'webpack-dev-server client?http:  localhost:3000',     'webpack hot only-dev-server',     '. src index'   ],   output: {     path: path.join __dirname, 'dist' ,     filename: 'bundle.js',     publicPath: ' static '   },   plugins: [     new webpack.HotModuleReplacementPlugin     ],   module: {     loaders: [{       test:  \.js$ ,       loaders: ['react-hot', 'babel'],       include: path.join __dirname, 'src'      }]   } };  var webpack = require 'webpack' ; var WebpackDevServer = require 'webpack-dev-server' ; var config = require '. webpack.config' ;  new WebpackDevServer webpack config , {   publicPath: config.output.publicPath,   hot: true,   historyApiFallback: true } .listen 3000, 'localhost', function  err, result  {   if  err  {     return console.log err ;   }  And ﬁnally, create a sever.js ﬁle to be able to run npm start, with following contents:    console.log 'Serving your awesome project at http:  localhost:3000 ' ; } ;  Create src app.js ﬁle to see your React project do something.  import React, { Component } from 'react';  export default class App extends Component {   render   {     return          Hello, world.       ;   } }  Run node server.js or npm start in the terminal, if you have deﬁned what start stands for in your package.json  GoalKicker.com – React JS Notes for Professionals  47   Chapter 9: Using ReactJS with jQuery Section 9.1: ReactJS with jQuery Firstly, you have to import jquery library . We also need to import ﬁndDOmNode as we’re going to manipulate the dom. And obviously we are importing React as well.  We are setting an arrow function ‘handleToggle’ that will ﬁre when an icon will be clicked. We’re just showing and hiding a div with a reference naming ‘toggle’ onClick over an icon.  import React from 'react'; import { findDOMNode } from ‘react-dom’; import $ from ‘jquery’;  handleToggle =    => {     const el = findDOMNode this.refs.toggle ;     $ el .slideToggle  ; };  Let’s now set the reference naming ‘toggle’             Office Email    me@shuvohabib.com        The div element where we will ﬁre the ‘handleToggle’ on onClick.              Let review the full code below, how it looks like .  import React from ‘react’; import { findDOMNode } from ‘react-dom’; import $ from ‘jquery’;  export default class FullDesc extends React.Component {     constructor   {         super  ;     }      handleToggle =    => {         const el = findDOMNode this.refs.toggle ;         $ el .slideToggle  ;     };      render   {         return                                                                                  User Name :   Shuvo Habib  GoalKicker.com – React JS Notes for Professionals  48                                                                                                             Office Email  me@shuvohabib.com                                                                                                                                          ;     } }  We are done! This is the way, how we can use jQuery in React component.  GoalKicker.com – React JS Notes for Professionals  49   Chapter 10: React Routing Section 10.1: Example Routes.js ﬁle, followed by use of Router Link in component Place a ﬁle like the following in your top level directory. It deﬁnes which components to render for which paths  import React from 'react'; import { Route, IndexRoute } from 'react-router'; import New from '. containers new-post'; import Show from '. containers show';  import Index from '. containers home'; import App from '. components app';  export default                              ;  import React from 'react'; import ReactDOM from 'react-dom'; import { Router, browserHistory } from 'react-router';    import the routes component we created in routes.js import routes from '. routes';     entry point ReactDOM.render          , document.getElementById 'main'  ;  import React from 'react'; import { Link } from 'react-router';  export default function PostButton props  {   return                         {props.title}          {props.tags}                   ; }  Now in your top level index.js that is your entry point to the app, you need only render this Router component like so:  Now it is simply a matter of using Link instead of   tags throughout your application. Using Link will communicate with React Router to change the React Router route to the speciﬁed link, which will in turn render the correct component as deﬁned in routes.js  GoalKicker.com – React JS Notes for Professionals  50   Section 10.2: React Routing Async  import React from 'react'; import { Route, IndexRoute } from 'react-router';  import Index from '. containers home'; import App from '. components app';    for single Component lazy load use this const ContactComponent =    => {   return {       getComponent:  location, callback => {         require.ensure [], require => {           callback null, require '. components Contact' ["default"] ;         }, 'Contact' ;       }     } };    for multiple componnets  const groupedComponents =  pageName  => {   return {       getComponent:  location, callback => {         require.ensure [], require => {           switch pageName {             case 'about' :                 callback null, require  ". components about"  ["default"] ;                     break ;             case 'tos' :                 callback null, require  ". components tos"  ["default"] ;                     break ;           }         }, "groupedComponents" ;       }     } }; export default                                   ;  GoalKicker.com – React JS Notes for Professionals  51   Chapter 11: Communicate Between Components Section 11.1: Communication between Stateless Functional Components  In this example we will make use of Redux and React Redux modules to handle our application state and for auto re-render of our functional components., And ofcourse React and React Dom  You can checkout the completed demo here  In the example below we have three diﬀerent components and one connected component  UserInputForm: This component display an input ﬁeld And when the ﬁeld value changes, it calls inputChange method on props  which is provided by the parent component  and if the data is provided as well, it displays that in the input ﬁeld.  UserDashboard: This component displays a simple message and also nests UserInputForm component, It also passes inputChange method to UserInputForm component, UserInputForm component inturn makes use of this method to communicate with the parent component.  UserDashboardConnected: This component just wraps the UserDashboard component using ReactRedux connect method., This makes it easier for us to manage the component state and update the component when the state changes.  App: This component just renders the UserDashboardConnected component.  const UserInputForm =  props  => {     let handleSubmit =  e  => {     e.preventDefault  ;   }    return               Please enter your name                <input type="text" id="name" defaultValue={props.data.name  ''} onChange={ props.inputChange }  >            }  const UserDashboard =  props  => {       let inputChangeHandler =  event  => {     props.updateName event.target.value ;   }    return               Hi { props.user.name  'User' }                 GoalKicker.com – React JS Notes for Professionals  52        }  const mapStateToProps =  state  => {   return {     user: state   }; } const mapDispatchToProps =  dispatch  => {   return {     updateName:  data  => dispatch  Action.updateName data   ,   }; };  const { connect, Provider } = ReactRedux; const UserDashboardConnected = connect    mapStateToProps,   mapDispatchToProps   UserDashboard ;  const App =  props  => {   return               Communication between Stateless Functional Components                    }  const user =  state={name: 'John'}, action  => {   switch  action.type  {     case 'UPDATE_NAME':       return Object.assign  {}, state, {name: action.payload}   ;      default:       return state;   } };  const { createStore } = Redux; const store = createStore user ; const Action = {   updateName:  data  => {     return { type : 'UPDATE_NAME', payload: data }   }, }  ReactDOM.render               ,   document.getElementById 'application'   ;  JS Bin URL  GoalKicker.com – React JS Notes for Professionals  53   Chapter 12: How to setup a basic webpack, react and babel environment Section 12.1: How to build a pipeline for a customized "Hello world" with images Step 1: Install Node.js  The build pipeline you will be building is based in Node.js so you must ensure in the ﬁrst instance that you have this installed. For instructions on how to install Node.js you can checkout the SO docs for that here  Step 2: Initialise your project as an node module  Open your project folder on the command line and use the following command:  npm init  For the purposes of this example you can feel free to take the defaults or if you'd like more info on what all this means you can check out this SO doc on setting up package conﬁguration.  Step 3: Install necessary npm packages  Run the following command on the command line to install the packages necessary for this example:  npm install --save react react-dom  Then for the dev dependencies run this command:  npm install --save-dev babel-core babel-preset-react babel-preset-es2015 webpack babel-loader css- loader style-loader file-loader image-webpack-loader  Finally webpack and webpack-dev-server are things that are worth installing globally rather than as a dependency of your project, if you'd prefer to add it as a dependency then that will work to, I don't. Here is the command to run:  npm install --global webpack webpack-dev-server  Step 3: Add a .babelrc ﬁle to the root of your project  This will setup babel to use the presets you've just installed. Your .babelrc ﬁle should look like this:  Set yourself up a directory stucture that looks like the below in the root of your directory:  {   "presets": ["react", "es2015"] }  Step 4: Setup project directory structure  - node_modules - src    - components    - images    - styles    - index.html  GoalKicker.com – React JS Notes for Professionals  54     - index.jsx - .babelrc - package.json  NOTE: The node_modules, .babelrc and package.json should all have already been there from previous steps I just included them so you can see where they ﬁt.  Step 5: Populate the project with the Hello World project ﬁles  This isn't really important to the process of building a pipeline so I'll just give you the code for these and you can copy paste them in:  src components HelloWorldComponent.jsx  import React, { Component } from 'react';  class HelloWorldComponent extends Component {   constructor props  {     super props ;     this.state = {name: 'Student'};     this.handleChange = this.handleChange.bind this ;   }    handleChange e  {     this.setState {name: e.target.value} ;   }    render   {     return                                                                                         My name is {this.state.name} and I'm a clever cloggs because I built a React build pipeline                                    ;   } }  export default HelloWorldComponent;  src images myImage.gif  Feel free to substitute this with any image you'd like it's simply there to prove the point that we can bundle up images as well. If you provide your own image and you name it something diﬀerent then you'll have to update the HelloWorldComponent.jsx to reﬂect your changes. Equally if you choose an image with a diﬀerent ﬁle extension then you need to modify the test property of the image loader in the webpack.conﬁg.js with appropriate regex to match your new ﬁle extension..  src styles styles.css  .form {   margin: 25px;  GoalKicker.com – React JS Notes for Professionals  55     padding: 25px;   border: 1px solid ddd;   background-color: eaeaea;   border-radius: 10px; }  .form div {   padding-top: 25px; }  .image-container {   display: flex;   justify-content: center; }  index.html               Learning to build a react pipeline                     index.jsx  import React from 'react'; import { render } from 'react-dom'; import HelloWorldComponent from '. components HelloWorldComponent.jsx';  require '. images myImage.gif' ; require '. styles styles.css' ; require '. index.html' ;  Step 6: Create webpack conﬁguration  render  , document.getElementById 'content'  ;  Create a ﬁle called webpack.conﬁg.js in the root of your project and copy this code into it:  webpack.conﬁg.js  var path = require 'path' ;  var config = {   context: path.resolve __dirname + ' src' ,   entry: '. index.jsx',   output: {     filename: 'app.js',     path: path.resolve __dirname + ' dist' ,   },   devServer: {     contentBase: path.join __dirname + ' dist' ,     port: 3000,     open: true,  GoalKicker.com – React JS Notes for Professionals  56     },   module: {     loaders: [       {         test:  \. jsjsx $ ,         exclude:  node_modules ,         loader: 'babel-loader'       },       {         test:  \.css$ ,         loader: "style!css"       },       {         test:  \.gif$ ,         loaders: [           'file?name=[path][name].[ext]',           'image-webpack',         ]       },       { test:  \. html $ ,         loader: "file?name=[path][name].[ext]"       }     ],   }, };  module.exports = config;  Step 7: Create npm tasks for your pipeline  To do this you will need to add two properties to the scripts key of the JSON deﬁned in the package.json ﬁle in the root of your project. Make your scripts key look like this:    "scripts": {     "start": "webpack-dev-server",     "build": "webpack",     "test": "echo \"Error: no test specified\" && exit 1"   },  The test script will have already been there and you can choose whether to keep it or not, it's not important to this example.  From the command line, if you are in the project root directory you should now be able to run the command:  This will bundle up the little application you've built and place it in the dist  directory that it will create in the root of your project folder.  Step 8: Use the pipeline  npm run build  If you run the command:  npm start  Then the application you've built will be served up in your default web browser inside of a webpack dev server instance.  GoalKicker.com – React JS Notes for Professionals  57   Chapter 13: React.createClass vs extends React.Component Section 13.1: Create React Component  Let's explore the syntax diﬀerences by comparing two code examples.  React.createClass  deprecated   Here we have a const with a React class assigned, with the render function following on to complete a typical base component deﬁnition.  import React from 'react';  const MyComponent = React.createClass {   render   {     return                 ;   } } ;  export default MyComponent;  React.Component  import React from 'react';  class MyComponent extends React.Component {   render   {     return                 ;   } }  export default MyComponent;  Let's take the above React.createClass deﬁnition and convert it to use an ES6 class.  In this example we're now using ES6 classes. For the React changes, we now create a class called MyComponent and extend from React.Component instead of accessing React.createClass directly. This way, we use less React boilerplate and more JavaScript.  PS: Typically this would be used with something like Babel to compile the ES6 to ES5 to work in other browsers.  Section 13.2: "this" Context  Using React.createClass will automatically bind this context  values  correctly, but that is not the case when using ES6 classes.  React.createClass  Note the onClick declaration with the this.handleClick method bound. When this method gets called React will apply the right execution context to the handleClick.  GoalKicker.com – React JS Notes for Professionals  58   With ES6 classes this is null by default, properties of the class do not automatically bind to the React class  component  instance.  import React from 'react';  const MyComponent = React.createClass {   handleClick   {     console.log this ;    the React Component instance   },   render   {     return                 ;   } } ;  export default MyComponent;  React.Component  import React from 'react';  class MyComponent extends React.Component {   constructor props  {     super props ;   }   handleClick   {     console.log this ;    null   }   render   {     return                 ;   } }  export default MyComponent;  There are a few ways we could bind the right this context.  Case 1: Bind inline: import React from 'react';  class MyComponent extends React.Component {   constructor props  {     super props ;   }   handleClick   {     console.log this ;    the React Component instance   }   render   {     return                 ;   } }  export default MyComponent;  GoalKicker.com – React JS Notes for Professionals  59   Case 2: Bind in the class constructor  Another approach is changing the context of this.handleClick inside the constructor. This way we avoid inline repetition. Considered by many as a better approach that avoids touching JSX at all:  import React from 'react';  class MyComponent extends React.Component {   constructor props  {     super props ;     this.handleClick = this.handleClick.bind this ;   }   handleClick   {     console.log this ;    the React Component instance   }   render   {     return                 ;   } }  export default MyComponent;  Case 3: Use ES6 anonymous function  import React from 'react';  class MyComponent extends React.Component {   constructor props  {     super props ;   }   handleClick =    => {     console.log this ;    the React Component instance   }   render   {     return                 ;   } }  export default MyComponent;  You can also use ES6 anonymous function without having to bind explicitly:  Section 13.3: Declare Default Props and PropTypes  There are important changes in how we use and declare default props and their types.  React.createClass  In this version, the propTypes property is an Object in which we can declare the type for each prop. The getDefaultProps property is a function that returns an Object to create the initial props.  import React from 'react';  const MyComponent = React.createClass {  GoalKicker.com – React JS Notes for Professionals  60   This version uses propTypes as a property on the actual MyComponent class instead of a property as part of the createClass deﬁnition Object.  The getDefaultProps has now changed to just an Object property on the class called defaultProps, as it's no longer a "get" function, it's just an Object. It avoids more React boilerplate, this is just plain JavaScript.    propTypes: {     name: React.PropTypes.string,     position: React.PropTypes.number   },   getDefaultProps   {     return {       name: 'Home',       position: 1     };   },   render   {     return                 ;   } } ;  export default MyComponent;  React.Component  import React from 'react';  class MyComponent extends React.Component {   constructor props  {     super props ;   }   render   {     return                 ;   } } MyComponent.propTypes = {   name: React.PropTypes.string,   position: React.PropTypes.number }; MyComponent.defaultProps = {   name: 'Home',   position: 1 };  export default MyComponent;  import React from 'react';  class MyComponent extends React.Component {   static propTypes = {     name: React.PropTypes.string,     position: React.PropTypes.number   };  GoalKicker.com – React JS Notes for Professionals  Additionally, there is another syntax for propTypes and defaultProps. This is a shortcut if your build has ES7 property initializers turned on:  61     static defaultProps = {     name: 'Home',     position: 1   };   constructor props  {     super props ;   }   render   {     return                 ;   } }  export default MyComponent;  Section 13.4: Mixins  We can use mixins only with the React.createClass way.  React.createClass  In this version we can add mixins to components using the mixins property which takes an Array of available mixins. These then extend the component class.  import React from 'react';  var MyMixin = {   doSomething   {    } }; const MyComponent = React.createClass {   mixins: [MyMixin],   handleClick   {     this.doSomething  ;    invoke mixin's method   },   render   {     return          Do Something       ;   } } ;  export default MyComponent;  React.Component  Section 13.5: Set Initial State  There are changes in how we are setting the initial states.  React.createClass  React mixins are not supported when using React components written in ES6. Moreover, they will not have support for ES6 classes in React. The reason is that they are considered harmful.  We have a getInitialState function, which simply returns an Object of initial states.  GoalKicker.com – React JS Notes for Professionals  62   In this version we declare all state as a simple initialisation property in the constructor, instead of using the getInitialState function. It feels less "React API" driven since this is just plain JavaScript.  import React from 'react';  const MyComponent = React.createClass {   getInitialState    {     return {       activePage: 1     };   },   render   {     return                 ;   } } ;  export default MyComponent;  React.Component  import React from 'react';  class MyComponent extends React.Component {   constructor props  {     super props ;     this.state = {       activePage: 1     };   }   render   {     return                 ;   } }  export default MyComponent;  import React from 'react';  class SearchEs6 extends React.Component{     constructor props  {         super props ;         this.state = {             searchResults: []         };     }      showResults response {         this.setState {             searchResults: response.results         }      }  Section 13.6: ES6 React “this” keyword with ajax to get data from server  GoalKicker.com – React JS Notes for Professionals  63       search url {         $.ajax {             type: "GET",             dataType: 'jsonp',             url: url,             success:  data  => {                 this.showResults data ;             },             error:  xhr, status, err  => {                 console.error url, status, err.toString   ;             }         } ;     }      render   {         return                                                                            ;     } }  GoalKicker.com – React JS Notes for Professionals  64   Chapter 14: React AJAX call Section 14.1: HTTP GET request  Sometimes a component needs to render some data from a remote endpoint  e.g. a REST API . A standard practice is to make such calls in componentDidMount method.  Here is an example, using superagent as AJAX helper:  import React from 'react' import request from 'superagent'  class App extends React.Component {   constructor    {     super       this.state = {}   }   componentDidMount    {     request       .get ' search'        .query { query: 'Manny' }        .query { range: '1..5' }        .query { order: 'desc' }        .set 'API-Key', 'foobar'        .set 'Accept', 'application json'        .end  err, resp  => {         if  !err  {           this.setState {someData: resp.text}          }       }    },   render   {     return          {this.state.someData  'waiting for response...'}          } }  React.render  , document.getElementById 'root'    A request can be initiated by invoking the appropriate method on the request object, then calling .end   to send the request. Setting header ﬁelds is simple, invoke .set   with a ﬁeld name and value.  The .query   method accepts objects, which when used with the GET method will form a query-string. The following will produce the path  search?query=Manny&range=1..5&order=desc.  POST requests  request.post ' user'    .set 'Content-Type', 'application json'    .send '{"name":"tj","pet":"tobi"}'    .end callback   See Superagent docs for more details.  GoalKicker.com – React JS Notes for Professionals  65   Section 14.2: HTTP GET request and looping through data  The following example shows how a set of data obtained from a remote source can be rendered into a component.  We make an AJAX request using fetch, which is build into most browsers. Use a fetch polyﬁll in production to support older browsers. You can also use any other library for making requests  e.g. axios, SuperAgent, or even plain Javascript .  We set the data we receive as component state, so we can access it inside the render method. There, we loop through the data using map. Don't forget to always add a unique key attribute  or prop  to the looped element, which is important for React's rendering performance.  import React from 'react';  class Users extends React.Component {   constructor   {     super  ;     this.state = { users: [] };   }    componentDidMount   {     fetch ' api users'        .then response => response.json          .then json => this.setState { users: json.data }  ;   }    render   {     return                    Users          {           this.state.users.length == 0             ? 'Loading users...'             : this.state.users.map user =>                                                                         {user.name}                                                          }              ;   } }  ReactDOM.render  , document.getElementById 'root'  ;  Working example on JSBin.  Section 14.3: Ajax in React without a third party library - a.k.a with VanillaJS  The following would work in IE9+  import React from 'react'  GoalKicker.com – React JS Notes for Professionals  66   class App extends React.Component {   constructor    {     super       this.state = {someData: null}   }   componentDidMount    {     var request = new XMLHttpRequest  ;     request.open 'GET', ' my url', true ;         request.onload =    => {       if  request.status >= 200 && request.status < 400  {            Success!         this.setState {someData: request.responseText}        } else {            We reached our target server, but it returned an error            Possibly handle the error by changing your state.       }     };         request.onerror =    => {          There was a connection error of some sort.          Possibly handle the error by changing your state.     };         request.send  ;   },   render   {     return          {this.state.someData  'waiting for response...'}          } }  React.render  , document.getElementById 'root'    GoalKicker.com – React JS Notes for Professionals  67   Chapter 15: Communication Between Components Section 15.1: Child to Parent Components Sending data back to the parent, to do this we simply pass a function as a prop from the parent component to the child component, and the child component calls that function.  In this example, we will change the Parent state by passing a function to the Child component and invoking that function inside the Child component.  import React from 'react';  class Parent extends React.Component {     constructor props  {         super props ;         this.state = { count: 0 };          this.outputEvent = this.outputEvent.bind this ;     }     outputEvent event  {            the event context comes from the Child         this.setState { count: this.state.count++ } ;     }      render   {         const variable = 5;         return                                 Count: { this.state.count }                                          ;     } }  class Child extends React.Component {     render   {         return                                 Add One More                        ;     } }  export default Parent;  Note that the Parent's outputEvent method  that changes the Parent state  is invoked by the Child's button onClick event.  Section 15.2: Not-related Components  The only way if your components does not have a parent-child relationship  or are related but too further such as a grand grand grand son  is to have some kind of a signal that one component subscribes to, and the other writes into.  GoalKicker.com – React JS Notes for Professionals  68   Those are the 2 basic operations of any event system: subscribe listen to an event to be notify, and send trigger publish dispatch a event to notify the ones who wants.  There are at least 3 patterns to do that. You can ﬁnd a comparison here.  Here is a brief summary:  Pattern 1: Event Emitter Target Dispatcher: the listeners need to reference the source to subscribe.  to subscribe: otherObject.addEventListener 'click',    => { alert 'click!' ; } ; to dispatch: this.dispatchEvent 'click' ;  Pattern 2: Publish Subscribe: you don't need a speciﬁc reference to the source that triggers the event, there is a global object accessible everywhere that handles all the events.  to subscribe: globalBroadcaster.subscribe 'click',    => { alert 'click!' ; } ; to dispatch: globalBroadcaster.publish 'click' ;  Pattern 3: Signals: similar to Event Emitter Target Dispatcher but you don't use any random strings here. Each object that could emit events needs to have a speciﬁc property with that name. This way, you know exactly what events can an object emit.  to subscribe: otherObject.clicked.add     => { alert 'click' ; } ; to dispatch: this.clicked.dispatch  ;  Section 15.3: Parent to Child Components  That the easiest case actually, very natural in the React world and the chances are - you are already using it.  You can pass props down to child components. In this example message is the prop that we pass down to the child component, the name message is chosen arbitrarily, you can name it anything you want.  import React from 'react';  class Parent extends React.Component {     render   {         const variable = 5;         return                                                                            ;     } }  class Child extends React.Component {     render   {         return  {this.props.message}      } }  export default Parent;  Here, the   component renders two   components, passing message for child inside the ﬁrst component and 5 inside the second one.  GoalKicker.com – React JS Notes for Professionals  69   In summary, you have a component  parent  that renders another one  child  and passes to it some props.  GoalKicker.com – React JS Notes for Professionals  70   Chapter 16: Stateless Functional Components Section 16.1: Stateless Functional Component  Components let you split the UI into independent, reusable pieces. This is the beauty of React; we can separate a page into many small reusable components.  Prior to React v14 we could create a stateful React component using React.Component  in ES6 , or React.createClass  in ES5 , irrespective of whether it requires any state to manage data or not.  React v14 introduced a simpler way to deﬁne components, usually referred to as stateless functional components. These components use plain JavaScript functions.  For example:  function Welcome props  {   return  Hello, {props.name} ; }  This function is a valid React component because it accepts a single props object argument with data and returns a React element. We call such components functional because they are literally JavaScript functions.  Stateless functional components typically focus on UI; state should be managed by higher-level “container” components, or via Flux Redux etc. Stateless functional components don’t support state or lifecycle methods.  Beneﬁts:  1. 2. 3. 4. 5.  No class overhead Don't have to worry about this keyword Easy to write and easy to understand Don't have to worry about managing state values Performance improvement  Summary: If you are writing a React component that doesn't require state and would like to create a reusable UI, instead of creating a standard React Component you can write it as a stateless functional component.  Let's take a simple example :  Let's say we have a page that can register a user, search for registered users, or display a list of all the registered users.  This is entry point of the application, index.js:  import React from 'react'; import ReactDOM from 'react-dom';  import HomePage from '. homepage'  ReactDOM.render       ,     document.getElementById 'app'   ;  GoalKicker.com – React JS Notes for Professionals  71   The HomePage component provides the UI to register and search for users. Note that it is a typical React component including state, UI, and behavioral code. The data for the list of registered users is stored in the state variable, but our reusable List  shown below  encapsulates the UI code for the list.  homepage.js:  import React from 'react' import {Component} from 'react';  import List from '. list';  export default class Temp extends Component{         constructor props  {         super  ;         this.state={users:[], showSearchResult: false, searchResult: []};     }      registerClick  {         let users = this.state.users.slice  ;         if users.indexOf this.refs.mail_id.value  == -1 {             users.push this.refs.mail_id.value ;             this.refs.mail_id.value = '';             this.setState {users} ;         }else{             alert 'user already registered' ;         }     }      searchClick  {         let users = this.state.users;         let index = users.indexOf this.refs.search.value ;         if index >= 0 {             this.setState {searchResult: users[index], showSearchResult: true} ;         }else{             alert 'no user found with this mail id' ;         }     }      hideSearchResult  {         this.setState {showSearchResult: false} ;     }      render   {         return                                                   <input type='submit' value='Click here to register' onClick={this.registerClick.bind this } >                                   <input type='submit' value='Click here to register' onClick={this.searchClick.bind this } >                 {this.state.showSearchResult ?                                               Search Result:                                                    Close this                                            :                                               Registered users:  GoalKicker.com – React JS Notes for Professionals  72   Finally, our stateless functional component List, which is used display both the list of registered users and the search results, but without maintaining any state itself.                                                    {this.state.users.length ?                                                           :                             "no user is registered"                         }                                       }                        ;     } }  list.js:  import React from 'react'; var colors = ['6A1B9A', '76FF03', '4527A0'];  var List =  props  => {     return                        {                 props.users.map  user, i =>{                     return                                                        {user}                                                ;                                 }              }                ; }  export default List;  Reference: https:  facebook.github.io react docs components-and-props.html  GoalKicker.com – React JS Notes for Professionals  73   Chapter 17: Performance Section 17.1: Performance measurement with ReactJS You can't improve something you can't measure. To improve the performance of React components, you should be able to measure it. ReactJS provides with addon tools to measure performance. Import the react-addons-perf module to measure the performance  import Perf from 'react-addons-perf'    ES6 var Perf = require 'react-addons-perf'     ES5 with npm var Perf = React.addons.Perf;    ES5 with react-with-addons.js  You can use below methods from the imported Perf module:  Perf.printInclusive   Perf.printExclusive   Perf.printWasted   Perf.printOperations   Perf.printDOM    The most important one which you will need most of the time is Perf.printWasted   which gives you the tabular representation of your individual component's wasted time  You can note the Wasted time column in the table and improve Component's performance using Tips & Tricks section above  Refer the React Oﬃcial Guide and excellent article by Benchling Engg. on React Performance  Section 17.2: React's di algorithm  Generating the minimum number of operations to transform one tree into another have a complexity in the order of O n^3  where n is the number of nodes in the tree. React relies on two assumptions to solve this problem in a linear time - O n   1.  Two components of the same class will generate similar trees and tw components of diﬀerent classes will generate diﬀerent trees.  2.  It is possible to provide a unique key for elements that is stable across diﬀerent renders.  In order to decide if two nodes are diﬀerent, React diﬀerentiates 3 cases  1.  Two nodes are diﬀerent, if they have diﬀerent types.  for example,  ...  is diﬀerent from  ...   GoalKicker.com – React JS Notes for Professionals  74   2.  Whenever two nodes have diﬀerent keys  for example,  ...  is diﬀerent from  ...   Moreover, what follows is crucial and extremely important to understand if you want to optimise performance  If they [two nodes] are not of the same type, React is not going to even try at matching what they render. It is just going to remove the ﬁrst one from the DOM and insert the second one.  Here's why  It is very unlikely that a element is going to generate a DOM that is going to look like what a would generate. Instead of spending time trying to match those two structures, React just re-builds the tree from scratch.  Section 17.3: The Basics - HTML DOM vs Virtual DOM HTML DOM is Expensive  Each web page is represented internally as a tree of objects. This representation is called Document Object Model. Moreover, it is a language-neutral interface that allows programming languages  such as JavaScript  to access the HTML elements.  In other words  The HTML DOM is a standard for how to get, change, add, or delete HTML elements.  However, those DOM operations are extremely expensive.  Virtual DOM is a Solution  So React's team came up with the idea to abstract the HTML DOM and create its own Virtual DOM in order to compute the minimum number of operations we need to apply on the HTML DOM to replicate current state of our application.  The Virtual DOM saves time from unnecessary DOM modiﬁcations.  How Exactly?  At each point of time, React has the application state represented as a Virtual DOM. Whenever application state changes, these are the steps that React performs in order to optimise performance  1.  Generate a new Virtual DOM that represents the new state of our application  2.  Compare the old Virtual DOM  which represents the current HTML DOM  vs the new Virtual DOM  3.  Based on 2. ﬁnd the minimum number of operations to transform the old Virtual DOM  which represents the current HTML DOM  into the new Virtual DOM  to learn more about that - read React's Diﬀ Algorithm  4.  After those operations are found, they are mapped into their equivalent HTML DOM operations  GoalKicker.com – React JS Notes for Professionals  75   remember, the Virtual DOM is only an abstraction of the HTML DOM and there is a isomorphic relation between them  5.  Now the minimum number of operations that have been found and transferred to their equivalent HTML DOM operations are now applied directly onto the application's HTML DOM, which saves time from modifying the HTML DOM unnecessarily.  Note: Operations applied on the Virtual DOM are cheap, because the Virtual DOM is a JavaScript Object.  Section 17.4: Tips & Tricks  When two nodes are not of the same type, React doesn't try to match them - it just removes the ﬁrst node from the DOM and inserts the second one. This is why the ﬁrst tip says  1.  If you see yourself alternating between two components classes with very similar output, you may want to make it the same class.  2.  Use shouldComponentUpdate to prevent component from rerender, if you know it is not going to change, for example  shouldComponentUpdate: function nextProps, nextState  {   return nextProps.id !== this.props.id; }  GoalKicker.com – React JS Notes for Professionals  76   Chapter 18: Introduction to Server-Side Rendering Section 18.1: Rendering components  There are two options to render components on server: renderToString and renderToStaticMarkup.  renderToString  This will render React components to HTML on server. This function will also add data-react- properties to HTML elements so React on client won't have to render elements again.  import { renderToString } from "react-dom server"; renderToString   ; renderToStaticMarkup  This will render React components to HTML, but without data-react- properties, it is not recommended to use components that will be rendered on client, because components will rerender.  import { renderToStaticMarkup } from "react-dom server"; renderToStaticMarkup   ;  GoalKicker.com – React JS Notes for Professionals  77   Chapter 19: Setting Up React Environment Section 19.1: Simple React Component  We want to be able to compile below component and render it in our webpage  Filename: src index.jsx  import React from 'react'; import ReactDOM from 'react-dom';  class ToDo extends React.Component {     render   {         return   I am working  ;     } }  ReactDOM.render  , document.getElementById 'App'  ;  Section 19.2: Install all dependencies   install react and react-dom $ npm i react react-dom --save   install webpack for bundling $ npm i webpack -g   install babel for module loading, bundling and transpiling $ npm i babel-core babel-loader --save   install babel presets for react and es6 $ npm i babel-preset-react babel-preset-es2015 --save  Section 19.3: Conﬁgure webpack  Create a ﬁle webpack.config.js in the root of your working directory  Filename: webpack.conﬁg.js  module.exports = {     entry: __dirname + " src index.jsx",     devtool: "source-map",     output: {         path: __dirname + " build",         filename: "bundle.js"     },     module: {         loaders: [             {test:  \.jsx?$ , exclude:  node_modules , loader: "babel-loader"}         ]     } }  GoalKicker.com – React JS Notes for Professionals  78   Section 19.4: Conﬁgure babel  Create a ﬁle .babelrc in the root of our working directory  Filename: .babelrc  {     "presets": ["es2015","react"] }  Section 19.5: HTML ﬁle to use react component  Setup a simple html ﬁle in the root of the project directory  Filename: index.html                                                    Using webpack, you can bundle your component:  $ webpack  This will create our output ﬁle in build directory.  Open the HTML page in a browser to see component in action  Section 19.6: Transpile and bundle your component  GoalKicker.com – React JS Notes for Professionals  79   Chapter 20: Using React with Flow  How to use the Flow type checker to check types in React components.  Section 20.1: Using Flow to check prop types of stateless functional components  type Props = {   posts: Array ,   dispatch: Function,   children: ReactElement }  const AppContainer =    { posts, dispatch, children }: Props  =>                       {children}            Section 20.2: Using Flow to check prop types  import React, { Component } from 'react';  type Props = {   posts: Array ,   dispatch: Function,   children: ReactElement }  class Posts extends Component {   props: Props;    render    {        rest of the code goes here   } }  GoalKicker.com – React JS Notes for Professionals  80   Chapter 21: JSX Section 21.1: Props in JSX  There are several diﬀerent ways to specify props in JSX.  JavaScript Expressions  You can pass any JavaScript expression as a prop, by surrounding it with {}. For example, in this JSX:     Inside the MyComponent, the value of props.count will be 10, because the expression 1 + 2 + 3 + 4 gets evaluated.  If statements and for loops are not expressions in JavaScript, so they can't be used in JSX directly.  Of course, you can just pass any string literal as a prop too. These two JSX expressions are equivalent:  When you pass a string literal, its value is HTML-unescaped. So these two JSX expressions are equivalent:  String Literals              Props Default Value        This behavior is usually not relevant. It's only mentioned here for completeness.  If you pass no value for a prop, it defaults to true. These two JSX expressions are equivalent:  However, the React team says in their docs using this approach is not recommended, because it can be confused with the ES6 object shorthand {foo} which is short for {foo: foo} rather than {foo: true}. They say this behavior is just there so that it matches the behavior of HTML.  Spread Attributes  If you already have props as an object, and you want to pass it in JSX, you can use ... as a spread operator to pass the whole props object. These two components are equivalent:  function Case1   {   return  ; }  GoalKicker.com – React JS Notes for Professionals  81   function Case2   {   const person = {firstName: 'Kaloyan', lastName: 'Kosev'};   return  ; }  Section 21.2: Children in JSX  In JSX expressions that contain both an opening tag and a closing tag, the content between those tags is passed as a special prop: props.children. There are several diﬀerent ways to pass children:  You can put a string between the opening and closing tags and props.children will just be that string. This is useful for many of the built-in HTML elements. For example:  String Literals         Hello world!     This is valid JSX, and props.children in MyComponent will simply be  Hello world! .  Note that the HTML is unescaped, so you can generally write JSX just like you would write HTML.  Bare in mind, that in this case JSX:  removes whitespace at the beginning and ending of a line; removes blank lines; new lines adjacent to tags are removed; new lines that occur in the middle of string literals are condensed into a single space.  You can provide more JSX elements as the children. This is useful for displaying nested components:  You can mix together diﬀerent types of children, so you can use string literals together with JSX children. This is another way in which JSX is like HTML, so that this is both valid JSX and valid HTML:  JSX Children                    Here is a list           Item 1       Item 2         Note that a React component can't return multiple React elements, but a single JSX expression can have multiple children. So if you want a component to render multiple things you can wrap them in a div like the example above.  GoalKicker.com – React JS Notes for Professionals  82   You can pass any JavaScript expression as children, by enclosing it within {}. For example, these expressions are equivalent:  JavaScript Expressions   foo    {'foo'}   const Item =  { message }  =>      { message }   ;  This is often useful for rendering a list of JSX expressions of arbitrary length. For example, this renders an HTML list:  const TodoList =    => {   const todos = ['finish doc', 'submit review', 'wait stackoverflow review'];   return               { todos.map message =>      }          ; };  Note that JavaScript expressions can be mixed with other types of children.  Functions as Children  Normally, JavaScript expressions inserted in JSX will evaluate to a string, a React element, or a list of those things. However, props.children works just like any other prop in that it can pass any sort of data, not just the sorts that React knows how to render. For example, if you have a custom component, you could have it take a callback as props.children:  const ListOfTenThings =    =>           { index  =>  This is item {index} in the list }      ;     Calls the children callback numTimes to produce a repeated component const Repeat =  { numTimes, children }  => {   let items = [];   for  let i = 0; i < numTimes; i++  {     items.push children i  ;   }   return  {items} ; };  Children passed to a custom component can be anything, as long as that component transforms them into something React can understand before rendering. This usage is not common, but it works if you want to stretch what JSX is capable of.  Ignored Values  Note that false, null, undefined, and true are valid children. But they simply don't render. These JSX expressions  GoalKicker.com – React JS Notes for Professionals  83   will all render to the same thing:          {false}    {null}    {true}       {showHeader &&  }       This is extremely useful to conditionally render React elements. This JSX only renders a if showHeader is true:  One important caveat is that some "falsy" values, such as the 0 number, are still rendered by React. For example, this code will not behave as you might expect because 0 will be printed when props.messages is an empty array:  One approach to ﬁx this is to make sure that the expression before the && is always boolean:      {props.messages.length &&       }        {props.messages.length > 0 &&       }    Lastly, bare in mind that if you want a value like false, true, null, or undefined to appear in the output, you have to convert it to a string ﬁrst:      My JavaScript variable is {String myVariable }.    GoalKicker.com – React JS Notes for Professionals  84   Chapter 22: React Forms Section 22.1: Controlled Components  A controlled component is bound to a value and its changes get handled in code using event based callbacks.  class CustomForm extends React.Component { constructor   {     super  ;     this.state = {         person: {             firstName: '',             lastName: ''         }     } }  handleChange event  {     let person = this.state.person;     person[event.target.name] = event.target.value;     this.setState {person} ; }  render   {     return                         <input             type="text"             name="firstName"             value={this.state.firstName}             onChange={this.handleChange.bind this }  >              <input             type="text"             name="lastName"             value={this.state.lastName}             onChange={this.handleChange.bind this }  >                 }  }  In this example we initialize state with an empty person object. We then bind the values of the 2 inputs to the individual keys of the person object. Then as the user types, we capture each value in the handleChange function. Since the values of the components are bound to state we can rerender as the user types by calling setState  .  NOTE: Not calling setState   when dealing with controlled components, will cause the user to type, but not see the input because React only renders changes when it is told to do so.  It's also important to note that the names of the inputs are same as the names of the keys in the person object. This allows us to capture the value in dictionary form as seen here.  handleChange event  {     let person = this.state.person;     person[event.target.name] = event.target.value;     this.setState {person} ;  GoalKicker.com – React JS Notes for Professionals  85   }  person[event.target.name] is the same is a person.firstName  person.lastName. Of course this would depend on which input is currently being typed in. Since we don't know where the user will be typing, using a dictionary and matching the input names to the names of the keys, allows us to capture the user input no matter where the onChange is being called from.  GoalKicker.com – React JS Notes for Professionals  86   Chapter 23: User interface solutions  Let's say we get inspired of some ideas from modern user interfaces used in programs and convert them to React components. That's what "User interface solutions" topic consists of. Attribution is appretiated. Section 23.1: Basic Pane  import React from 'react';  class Pane extends React.Component {     constructor props  {         super props ;     }      render   {         return React.createElement              'section', this.props          ;     } }  Section 23.2: Panel  import React from 'react';  class Panel extends React.Component {     constructor props  {         super props ;     }         render ...elements  {         var props = Object.assign {             className: this.props.active ? 'active' : '',             tabIndex: -1         }, this.props ;          var css = this.css  ;         if  css != ''  {             elements.unshift React.createElement                  'style', null,                 css               ;         }          return React.createElement              'div', props,             ...elements          ;     }         static title   {         return '';     }     static css   {         return '';     } }  GoalKicker.com – React JS Notes for Professionals  87   Major diﬀerences from simple pane are:  panel has focus in instance when it is called by script or clicked by mouse; panel has title static method per component, so it may be extended by other panel component with overridden title  reason here is that function can be then called again on rendering for localization purposes, but in bounds of this example title doesn't make sense ; it can contain individual stylesheet declared in css static method  you can pre-load ﬁle contents from PANEL.css .  Section 23.3: Tab  import React from 'react';  class Tab extends React.Component {     constructor props  {         super props ;     }      render   {         var props = Object.assign {             className: this.props.active ? 'active' : ''         }, this.props ;         return React.createElement              'li', props,             React.createElement                  'span', props,                 props.panelClass.title                          ;     } }  Section 23.4: PanelGroup  import React from 'react'; import Tab from '. Tab.js';  class PanelGroup extends React.Component {     constructor props  {         super props ;         this.setState {             panels: props.panels         } ;     }  panelClass property of Tab instance must contain class of panel used for description.      render   {         this.tabSet = [];         this.panelSet = [];         for  let panelData of this.state.panels  {             var tabIsActive = this.state.activeTab == panelData.name;             this.tabSet.push React.createElement                  Tab, {                     name: panelData.name,                     active: tabIsActive,                     panelClass: panelData.class,                     onMouseDown:    => this.openTab panelData.name                  }  GoalKicker.com – React JS Notes for Professionals  88                 ;             this.panelSet.push React.createElement                  panelData.class, {                     id: panelData.name,                     active: tabIsActive,                     ref: tabIsActive ? 'activePanel' : null                 }               ;         }         return React.createElement              'div', { className: 'PanelGroup' },             React.createElement                  'nav', null,                 React.createElement                      'ul', null,                     ...this.tabSet                                ,             ...this.panelSet          ;     }      openTab name  {         this.setState { activeTab: name } ;         this.findDOMNode this.refs.activePanel .focus  ;     } }  name - identiﬁer of panel used by controller script; class - panel's class.  Don't forget to set property activeTab to name of needed tab.  Clariﬁcation  import React from 'react'; import Pane from '. components Pane.js'; import Panel from '. components Panel.js'; import PanelGroup from '. components PanelGroup.js';  class MainView extends React.Component {     constructor props  {         super props ;     }      render   {         return React.createElement              'main', null,             React.createElement                  Pane, { id: 'common' },                 React.createElement                      PanelGroup, {  panels property of PanelGroup instance must contain array with objects. Every object there declares important data about panels:  When tab is down, needed panel is getting class name active on DOM element  means that it gonna be visible  and it's focused now.  Section 23.5: Example view with `PanelGroup`s  GoalKicker.com – React JS Notes for Professionals  89                           panels: [                             {                                 name: 'console',                                 panelClass: ConsolePanel                             },                             {                                 name: 'figures',                                 panelClass: FiguresPanel                             }                         ],                         activeTab: 'console'                     }                                ,             React.createElement                  Pane, { id: 'side' },                 React.createElement                      PanelGroup, {                         panels: [                             {                                 name: 'properties',                                 panelClass: PropertiesPanel                             }                         ],                         activeTab: 'properties'                     }                                          ;     } }  class ConsolePanel extends Panel {     constructor props  {         super props ;     }      static title   {         return 'Console';     } }  class FiguresPanel extends Panel {     constructor props  {         super props ;     }      static title   {         return 'Figures';     } }  class PropertiesPanel extends Panel {     constructor props  {         super props ;     }      static title   {         return 'Properties';     } }  GoalKicker.com – React JS Notes for Professionals  90   Chapter 24: Using ReactJS in Flux way  It comes very handy to use Flux approach, when your application with ReactJS on frontend is planned to grow, because of limited structures and a little bit of new code to make state changes in runtime more easing.  Section 24.1: Data Flow  This is outline of comprehensive Overview.  Flux pattern assumes the use of unidirectional data ﬂow.  Action — simple object describing action type and other input data.  1.  2.  3.  4.  Dispatcher — single action receiver and callbacks controller. Imagine it is central hub of your application.  Store — contains the application state and logic. It registers callback in dispatcher and emits event to view when change to the data layer has occurred.  View — React component that receives change event and data from store. It causes re-rendering when something is changed.  As of Flux data ﬂow, views may also create actions and pass them to dispatcher for user interactions.  Reverted  To make it more clearer, we can start from the end.  Diﬀerent React components  views  get data from diﬀerent stores about made changes.  Few components may be called controller-views, cause they provide the glue code to get the data from the stores and to pass data down the chain of their descendants. Controller-views represent any signiﬁcant section of the page.  Stores can be remarked as callbacks that compare action type and other input data for business logic of your application.  Dispatcher is common actions receiver and callbacks container.  Actions are nothing than simple objects with required type property.  Formerly, you'll want to use constants for action types and helper methods  called action creators .  GoalKicker.com – React JS Notes for Professionals  91   Chapter 25: React, Webpack & TypeScript installation Section 25.1: webpack.conﬁg.js  The main components are  in addition to the standard entry, output and other webpack properties :  For this you need to create a rule that tests for the .ts and .tsx ﬁle extensions, specify ts-loader as the loader.  You also need to add the .ts and .tsx extensions in the resolve array, or webpack won't see them.  module.exports = {     entry: '. src index',     output: {         path: __dirname + ' build',         filename: 'bundle.js'     },     module: {         rules: [{             test:  \.tsx?$ ,             loader: 'ts-loader',             exclude:  node_modules          }]     },     resolve: {         extensions: ['.ts', '.tsx']     } };  The loader  Resolve TS extensions  Section 25.2: tsconﬁg.json  This is a minimal tsconﬁg to get you up and running.  {     "include": [         "src *"     ],     "compilerOptions": {         "target": "es5",         "jsx": "react",         "allowSyntheticDefaultImports": true     } }  Let's go through the properties one by one:  include  This is an array of source code. Here we have only one entry, src *, which speciﬁes that everything in the src directory is to be included in compilation.  compilerOptions.target  GoalKicker.com – React JS Notes for Professionals  92   Speciﬁes that we want to compile to ES5 target  compilerOptions.jsx  Setting this to true will make TypeScript automatically compile your tsx syntax from   to React.createElement "div" .  compilerOptions.allowSyntheticDefaultImports  Handy property which will allow you to import node modules as if they are ES6 modules, so instead of doing  import * as React from 'react' const { Component } = React  you can just do  import React, { Component } from 'react'  without any errors telling you that React has no default export.  Section 25.3: My First Component  import React, { Component } from 'react'; import ReactDOM from 'react-dom';  interface AppProps {     name: string; } interface AppState {     words: string[]; }  class App extends Component  {     constructor   {         super  ;         this.state = {             words: ['foo', 'bar']         };     }      render   {         const { name } = this.props;         return   Hello {name}!  ;     } }  const root = document.getElementById 'root' ; ReactDOM.render  , root ;  When using TypeScript with React, once you've downloaded the React DeﬁnitelyTyped type deﬁnitions  npm install --save @types react , every component will require you to add type annotations.  You do this like so:  class App extends Component  { }  where AppProps and AppState are interfaces  or type aliases  for your components' props and state respectively.  GoalKicker.com – React JS Notes for Professionals  93   Chapter 26: How and why to use keys in React  Whenever you are rendering a list of React components, each component needs to have a key attribute. The key can be any value, but it does need to be unique to that list.  When React has to render changes on a list of items, React just iterates over both lists of children at the same time and generates a mutation whenever there's a diﬀerence. If there are no keys set for the children, React scans each child. Otherwise, React compares the keys to know which were added or removed from the list  Section 26.1: Basic Example  For a class-less React component:  function SomeComponent props {      const ITEMS = ['cat', 'dog', 'rat']     function getItemsList  {         return ITEMS.map item =>  {item}  ;     }         return                         {getItemsList  }                ; }  For this example, the above component resolves to:         cat       dog       rat     GoalKicker.com – React JS Notes for Professionals  94   Chapter 27: Keys in react  Keys in react are used to identify a list of DOM elements from the same hierarchy internally.  So if you are iterating over an array to show a list of li elements, each of the li elements needs a unique identiﬁer speciﬁed by the key property. This usually can be the id of your database item or the index of the array.  Section 27.1: Using the id of an element  Here we are having a list of todo items that is passed to the props of our component.  Each todo item has a text and id property. Imagine that the id property comes from a backend datastore and is a unique numeric value:  todos = [   {     id: 1,     text: 'value 1'   },   {     id: 2,     text: 'value 2'   },   {     id: 3,     text: 'value 3'   },   {     id: 4,     text: 'value 4'   }, ];  render   {   const { todos } = this.props;   return               { todos.map  todo  =>                     { todo.text }                 }          ; }  render   {   const { todos } = this.props;   return               { todos.map  todo, index  =>  We set the key attribute of each iterated list element to todo-${todo.id} so that react can identify it internally:  Section 27.2: Using the array index  If you don't have unique database ids at hand, you could also use the numeric index of your array like this:  GoalKicker.com – React JS Notes for Professionals  95                       { todo.text }                 }          ; }  GoalKicker.com – React JS Notes for Professionals  96   Chapter 28: Higher Order Components  Higher Order Components  "HOC" in short  is a react application design pattern that is used to enhance components with reusable code. They enable to add functionality and behaviors to existing component classes.  A HOC is a pure javascript function that accepts a component as it's argument and returns a new component with the extended functionality.  Section 28.1: Higher Order Component that checks for authentication  Let's say we have a component that should only be displayed if the user is logged in.  So we create a HOC that checks for the authentication on each render  :  AuthenticatedComponent.js  import React from "react";  export function requireAuthentication Component  {     return class AuthenticatedComponent extends React.Component {           **          * Check if the user is authenticated, this.props.isAuthenticated          * has to be set from your application logic  or use react-redux to retrieve it from global state .          *          isAuthenticated   {             return this.props.isAuthenticated;         }           **          * Render          *          render   {             const loginErrorMessage =                                         Please  login  in order to view this part of the application.                                ;              return                                         { this.isAuthenticated === true ?   : loginErrorMessage }                                ;         }     }; }  export default requireAuthentication;  We then just use this Higher Order Component in our components that should be hidden from anonymous users:  MyPrivateComponent.js  GoalKicker.com – React JS Notes for Professionals  97   import React from "react"; import {requireAuthentication} from ". AuthenticatedComponent";  export class MyPrivateComponent extends React.Component {      **      * Render      *      render   {         return                                 My secret search, that is only viewable by authenticated users.                        ;     } }     Now wrap MyPrivateComponent with the requireAuthentication function export default requireAuthentication MyPrivateComponent ;  This example is described in more detail here.  Section 28.2: Simple Higher Order Component  Let's say we want to console.log each time the component mounts:  hocLogger.js  export default function hocLogger Component  {   return class extends React.Component {     componentDidMount   {       console.log 'Hey, we are mounted!' ;     }     render   {       return  ;     }   } }  Use this HOC in your code:  MyLoggedComponent.js  import React from "react"; import {hocLogger} from ". hocLogger";  export class MyLoggedComponent extends React.Component {     render   {         return                                 This component gets logged to console on each mount.                        ;     } }     Now wrap MyLoggedComponent with the hocLogger function export default hocLogger MyLoggedComponent ;  GoalKicker.com – React JS Notes for Professionals  98   Chapter 29: React with Redux  Redux has come to be the status quo for managing application-level state on the front-end these days, and those who work on "large-scale applications" often swear by it. This topic covers why and how you should use the state management library, Redux, in your React applications.  Section 29.1: Using Connect  Create a Redux store with createStore.  import { createStore } from 'redux' import todoApp from '. reducers' let store = createStore todoApp, { inistialStateVariable: "derp"}   Use connect to connect component to Redux store and pull props from store to component.  Deﬁne actions that allow your components to send messages to the Redux store.  import { connect } from 'react-redux'  const VisibleTodoList = connect    mapStateToProps,   mapDispatchToProps   TodoList   export default VisibleTodoList   *  * action types  *   export const ADD_TODO = 'ADD_TODO'  export function addTodo text  {   return { type: ADD_TODO, text } }  Handle these messages and create a new state for the store in reducer functions.  function todoApp state = initialState, action  {   switch  action.type  {     case SET_VISIBILITY_FILTER:       return Object.assign {}, state, {         visibilityFilter: action.filter       }      default:       return state   } }  GoalKicker.com – React JS Notes for Professionals  99   Appendix A: Installation Section A.1: Simple setup Setting up the folders  This example assumes code to be in src  and the output to be put into out . As such the folder structure should look something like  example  -- src     -- index.js    `-- ... -- out  `-- package.json Setting up the packages  Assuming a setup npm environment, we ﬁrst need to setup babel in order to transpile the React code into es5 compliant code.  $npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react  The above command will instruct npm to install the core babel libraries as well as the loader module for use with webpack. We also install the es6 and react presets for babel to understand JSX and es6 module code.  More information about the presets can be found here Babel presets   $npm i -D webpack  This command will install webpack as a development dependency.  i is the shorthand for install and -D the shorthand for --save-dev   You might also want to install any additional webpack packages  such as additional loaders or the webpack-dev- server extension   With the dependencies setup we will need a webpack.conﬁg.js ﬁle to tell webpack what to do  Lastly we will need the actual react code  $npm i -D react react-dom  Setting up webpack  simple webpack.conﬁg.js:  var path = require 'path' ;  module.exports = {   entry: '. src index.js',   output: {     path: path.resolve __dirname, 'out' ,     filename: 'bundle.js'   },   module: {     loaders: [       {         test:  \.js$ ,  GoalKicker.com – React JS Notes for Professionals  100   This ﬁle tells webpack to start with the index.js ﬁle  assumed to be in src    and convert it into a single bundle.js ﬁle in the out directory.  The module block tells webpack to test all ﬁles encountered against the regular expression and if they match, will invoke the speciﬁed loader.  babel-loader in this case  Furthermore, the exclude regex tells webpack to ignore this special loader for all modules in the node_modules folder, this helps speed up the transpilation process. Lastly, the query option tells webpack what parameters to pass to babel and is used to pass along the presets we installed earlier.  All that is left now is to create the src index.js ﬁle and try packing the application          exclude:   node_modules  ,         loader: 'babel-loader',         query: {           presets: ['es2015', 'react']         }       }     ]   } };  Testing the setup  src index.js:  'use strict'  import React from 'react' import { render } from 'react-dom'  const App =    => {   return  Hello world!  }  render     ,   document. getElementById 'app'     This ﬁle would normally render a simple  Hello world!  Header into the html tag with the id 'app', but for now it should be enough to transpile the code once.  $. node_modules .bin webpack . Will execute the locally installed version of webpack  use $webpack if you installed webpack globally with -g   This should create the ﬁle out bundle.js with the transpiled code inside and concludes the example.  Section A.2: Using webpack-dev-server Setup  After setting up a simple project to use webpack, babel and react issuing $npm i -g webpack-dev-server will install the development http server for quicker development.  Modifying webpack.conﬁg.js var path = require 'path' ;  GoalKicker.com – React JS Notes for Professionals  101   module.exports = {   entry: '. src index.js',   output: {     path: path.resolve __dirname, 'out' ,     publicPath: ' public ',     filename: 'bundle.js'   },   module: {     loaders: [       {         test:  \.js$ ,         exclude:   node_modules  ,         loader: 'babel',         query: {           presets: ['es2015', 'react']         }       }     ]   },   devServer: {     contentBase: path.resolve __dirname, 'public' ,     hot: true   } };  And ﬁnally we just need a simple index.html to test our app in.  index.html:                     React Sandbox                                The modiﬁcations are in  devServer  output.publicPath which sets up a path to have our bundle be served from  see Webpack conﬁguration ﬁles for more info   contentBase the base path to serve static ﬁles from  for example index.html  hot sets the webpack-dev-server to hot reload when changes get made to ﬁles on disk  With this setup running $webpack-dev-server should start a local http server on port 8080 and upon connecting should render a page containing a  Hello world! .  GoalKicker.com – React JS Notes for Professionals  102   Appendix B: React Tools Section B.1: Links  Places to ﬁnd React components and libraries;  Catalog of React Components JS.coach  GoalKicker.com – React JS Notes for Professionals  103   Thank you greatly to all the people from Stack Overﬂow Documentation who helped provide this content,  more changes can be sent to web@petercv.com for new content to be published or updated  Credits  abhirathore2006 Adam Aditya Singh Adrián Daraš Ahmad akashrajkn Alex Young Alexander Alexg2195 Anuj Aron Bart Riordan Bond Brad Colthurst Brandon Roberts brillout Chaim Friedman Daksh Gupta Danillo Corvalan David Dennis Stücken F. Kauder Fabian Schultz Faktor 10 ghostﬀcode Gianluca Esposito goldbullet GordyD hmnzr Inanc Gumus ivarni Jack7 Jagadish Upadhyay Jason Bourne Jim JimmyLv John Ruddell jolyonruss Jon Chan jonathangoodman JordanHendrix juandemarco justabuzz Kaloyan Kosev Kousha leonardoborges Leone  Chapter 10 Chapter 16 Chapter 17 Chapter 18 Chapter 5 Chapter 2 Chapters 1 and 4 Chapter 4 Chapter 6 Chapters 1, 5 and 6 Chapter 25 Chapters 1, 2 and 12 Chapter 2 Chapter 4 Chapter 2 Chapter 31 Chapter 22 Chapter 1 Chapter 5 Chapter 15 Chapters 27 and 28 Chapter 6 Chapter 14 Chapter 5 Chapter 19 Chapter 1 Chapter 2 Chapter 2 Chapter 2 Chapter 1 Chapter 2 Chapter 5 Chapter 5 Chapter 14 Chapter 29 Chapters 5 and 20 Chapters 3 and 6 Chapters 1 and 2 Chapters 1 and 2 Chapter 2 Chapters 1 and 2 Chapter 1 Chapter 2 Chapters 13, 15 and 21 Chapters 2 and 4 Chapter 13 Chapter 3  GoalKicker.com – React JS Notes for Professionals  104   Chapter 17 lustoykov Chapter 2 Maayan Glikser Chapter 16 Mark Lapierre Chapters 1 and 5 MaxPRaﬀerty Chapter 16 Mayank Shukla Chapter 14 McGrady Chapter 1 Md Sifatul Islam Md. Nahiduzzaman Rose Chapter 1 Michael Peyper Mihir MMachinegun m_callens Nick Bartlett orvi parlad neupane Qianyue QoP Rajab Shakirov Random User Rene R Rifat Robeen rossipedia Salman Saleem Sammy I. Sergii Bishyr Shabin Hashim Shuvo Habib Simplans sjmarshy skav sqzaman Sunny R Gupta thibmaek Timo user2314737 vintproykt Vivian Vlad Bezden WitVault Zac Braddy Zakaria Ridouh  Chapters 2 and 13 Chapter 8 Chapter 1 Chapter 2 Chapter 1 Chapter 1 Chapter 8 Chapter 13 Chapters 4, 5 and 6 Chapter 3 Chapter 11 Chapter 30 Chapter 20 Chapter 10 Chapter 1 Chapter 6 Chapter 26 Chapter 5 Chapter 1 Chapter 9 Chapter 1 Chapter 2 Chapters 4 and 6 Chapter 13 Chapters 1 and 14 Chapter 27 Chapters 1, 4, 6 and 7 Chapter 1 Chapters 23 and 24 Chapter 6 Chapter 2 Chapters 5 and 6 Chapter 12 Chapter 2  GoalKicker.com – React JS Notes for Professionals  105   You may also like

@highlight

The React JS Notes for Professionals book is compiled from Stack Overflow Documentation, the content is written by the beautiful people at Stack Overflow. Text content is released under Creative Commons BY-SA. See credits at the end of this book whom contributed to the various chapters. Images may be copyright of their respective owners unless otherwise specified. Book created for educational purposes and is not affiliated with React JS group(s), company(s) nor Stack Overflow. All trademarks belong to their respective company owners