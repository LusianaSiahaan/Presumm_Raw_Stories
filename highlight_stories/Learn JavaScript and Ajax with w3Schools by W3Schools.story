Learn JavaScript® and AJAX with w3schools Published by  Wiley Publishing, Inc.  111 River Street  Hoboken, NJ 07030-5774  www.wiley.com  Copyright   2010 by Wiley Publishing, Inc., Indianapolis, Indiana  Published simultaneously in Canada  ISBN: 978-0-470-61194-4  LOC CIP: 2010925161  Manufactured in the United States of America  10 9 8 7 6 5 4 3 2 1  No part of this publication may be reproduced, stored in a retrieval system or transmitted in any  form  or  by  any  means,  electronic,  mechanical,  photocopying,  recording,  scanning  or  otherwise,  except as permitted under Sections 107 or 108 of the 1976 United States Copyright Act, without  either the prior written permission of the Publisher, or authorization through payment of the appro- priate per-copy fee to the Copyright Clearance Center, 222 Rosewood Drive, Danvers, MA 01923,   978  750-8400, fax  978  646-8600. Requests to the Publisher for permission should be addressed  to the Permissions Department, John Wiley & Sons, Inc., 111 River Street, Hoboken, N 07030,   201  748-6011, fax  201  748-6008, or online at http:  www.wiley.com go permissions.  Limit of Liability Disclaimer of Warranty: The publisher and the author make no representations  or warranties with respect to the accuracy or completeness of the contents of this work and spe- cifically disclaim all warranties, including without limitation warranties of fitness for a particular  purpose. No warranty may be created or extended by sales or promotional materials. The advice  and strategies contained herein may not be suitable for every situation. This work is sold with the  understanding that the publisher is not engaged in rendering legal, accounting, or other professional  services. If professional assistance is required, the services of a competent professional person should  be sought. Neither the publisher nor the author shall be liable for damages arising herefrom. The  fact that an organization or Website is referred to in this work as a citation and or a potential source  of further information does not mean that the author or the publisher endorses the information the  organization or Website may provide or recommendations it may make. Further, readers should be  aware that Internet Websites listed in this work may have changed or disappeared between when this  work was written and when it is read.  For  general  information  on  our  other  products  and  services  please  contact  our  Customer  Care  Department within the United States at  877  762-2974, outside the United States at  317  572- 3993 or fax  317  572-4002.  Trademarks:  Wiley,  the  Wiley  logo,  and  related  trade  dress  are  trademarks  or  registered  trade- marks of John Wiley & Sons, Inc. and or its affiliates, in the United States and other countries,  and may not be used without written permission. w3schools and the w3schools logo are registered  trademarks of w3schools. JavaScript is a registered trademark of Sun Microsystems, Inc. All other  trademarks are the property of their respective owners. Wiley Publishing, Inc., is not associated with  any product or vendor mentioned in this book.  Wiley also publishes its books in a variety of electronic formats. Some content that appears in print  may not be available in electronic books.  Library of Congress CIP Data is available from the publisher.                w3schools Authors Editors  w3schools’ mission is to publish well-organized and easy-to-understand online tutorials  based on the W3C Web standards. Hege Refsnes Hege is a writer and editor for w3schools. She works to improve the usability and acces- sibility of the Web.  Hege has been writing tutorials for w3schools since 1998. Ståle Refsnes Ståle has ten years of Internet development experience, developing all the Web-based solu- tions for The Norwegian Handball Federation.  Ståle has been writing tutorials for w3schools since 1999. Kai Jim Refsnes Kai Jim has been around computers since childhood, working with them since the age  of 14.  He has been writing tutorials for w3schools since completing a bachelor’s degree in infor- mation technology in 2005. Jan Egil Refsnes Jan Egil is the president and founder of w3schools.  He is a senior system developer with a master’s degree in information technology and  more than 30 years of computing experience.  “Jani”  has  supervised  a  large  number  of  company-critical  development  projects  for  oil  companies like Amoco, British Petroleum, ELF, Halliburton, and Brown & Root. He has  also developed computer-based solutions for more than 20 governmental institutions like  The National Library, Norwegian High Schools, The State Hospital, and many others.  Jani started w3schools in 1998.                Credits  Acquisitions Editor Scott Meyers Production Abshier House Technical Editor Harry Buss Copy Editor Abshier House Associate Director of Marketing David Mayhew Production Manager Tim Tate  Vice President and Executive Group  Publisher Richard Swadley Vice President and Executive Publisher Barry Pruett Associate Publisher Jim Minatel Project Coordinator, Cover Lynsey Stanford Proofreading and Indexing Abshier House Cover Designer Michael Trent                TAblE of ConTEnTs  Introduction .................................................1 JavaScript ........................................................................................... 1 AJAX .................................................................................................. 3 How To Use This Book ...................................................................... 4  Section I: JavaScript Basic .............................7  CHAPTER 1: JavaScript How To and Where To .............. 9 How To Put a JavaScript into an HTML Page .................................... 9 How to Handle Simple Browsers ...................................................... 12 Where to Put the JavaScript ............................................................. 12 Using an External JavaScript ............................................................ 15  CHAPTER 2: JavaScript Statements and Comments ...... 16 JavaScript Statements ....................................................................... 16 JavaScript Comments ....................................................................... 18  CHAPTER 3: JavaScript Variables .................................. 23 Do You Remember Algebra from School? ......................................... 23 JavaScript Variables .......................................................................... 23 Declaring  Creating  JavaScript Variables ......................................... 25 Assigning Values to Undeclared JavaScript Variables ......................... 25 Redeclaring JavaScript Variables ....................................................... 26 JavaScript Arithmetic ....................................................................... 26  v                Table of Contents  CHAPTER 4: JavaScript Operators ................................ 27 JavaScript Arithmetic Operators ....................................................... 27 JavaScript Assignment Operators ...................................................... 28 The + Operator Used on Strings ....................................................... 28 Adding Strings and Numbers ........................................................... 28  CHAPTER 5: JavaScript Comparisons ........................... 30 Comparison Operators ..................................................................... 30 How to Use Comparisons ................................................................ 31 Logical Operators ............................................................................. 31 Conditional Operator....................................................................... 31  CHAPTER 6: JavaScript If...Else Statements .................. 32 Conditional Statements .................................................................... 32 if Statement ...................................................................................... 33 if...else Statement ............................................................................. 34 if...else if...else Statement .................................................................. 36  CHAPTER 7: JavaScript Loops ...................................... 39 The for Loop .................................................................................... 39 The while Loop ................................................................................ 41 The do...while Loop ......................................................................... 43  CHAPTER 8: Additional JavaScript Flow Control  Statements ................................................................... 46 The break Statement ........................................................................ 46 The continue Statement ................................................................... 47 JavaScript for...in Statement ............................................................. 48 JavaScript switch Statement .............................................................. 50  vi                Table of Contents  CHAPTER 9: JavaScript Popup Boxes ............................ 53 Popup Boxes ..................................................................................... 53  CHAPTER 10: JavaScript Functions .............................. 58 How to Define a Function................................................................ 58 JavaScript Function Examples .......................................................... 59 The return Statement ....................................................................... 62 The Lifetime of JavaScript Variables ................................................. 63  CHAPTER 11: JavaScript Events .................................... 64 onLoad and onUnload ..................................................................... 64 onFocus, onBlur, and onChange ...................................................... 65 onSubmit ......................................................................................... 65 onMouseOver and onMouseOut ...................................................... 66 onClick ............................................................................................ 66  CHAPTER 12: Javascript try…catch and  throw Statements ......................................................... 67 JavaScript—Catching Errors ............................................................ 67 The try...catch Statement.................................................................. 67 The throw Statement ........................................................................ 70  CHAPTER 13: JavaScript Special Characters and Guidelines ................................................................... 73 Insert Special Characters................................................................... 73 JavaScript Is Case Sensitive ............................................................... 74 White Space ..................................................................................... 74 Break up a Code Line ....................................................................... 74       vii           Table of Contents  Section II: JavaScript Objects ......................77  CHAPTER 14: JavaScript Objects Intro ......................... 79 Object-Oriented Programming ........................................................ 79 Properties ......................................................................................... 79 Methods ........................................................................................... 80  CHAPTER 15: JavaScript String Object ......................... 81 String Object .................................................................................... 81 Examples .......................................................................................... 82  CHAPTER 16: JavaScript Date Object ........................... 88 Create a Date Object ........................................................................ 88 Set Dates .......................................................................................... 89 Compare Two Dates ......................................................................... 89 Examples .......................................................................................... 90  CHAPTER 17: JavaScript Array Object .......................... 95 What Is an Array? ............................................................................. 95 Create an Array ................................................................................ 96 Access an Array ................................................................................ 96 Modify Values in an Array ................................................................ 96 Examples .......................................................................................... 97  CHAPTER 18: JavaScript Boolean Object ................... 107 Create a Boolean Object ................................................................. 107 Examples ........................................................................................ 108  viii                Table of Contents  CHAPTER 19: JavaScript Math Object ........................ 110 Math Object .................................................................................. 110 Mathematical Constants ................................................................. 110 Mathematical Methods................................................................... 111 Examples ........................................................................................ 112  CHAPTER 20: JavaScript RegExp Object .................... 115 What Is RegExp? ............................................................................ 115 RegExp Modifiers ........................................................................... 116 test   ............................................................................................... 118 exec  .............................................................................................. 119  Section III: JavaScript Advanced ................121  CHAPTER 21: JavaScrip Browser Detection ................ 123 Browser Detection .......................................................................... 123 The Navigator Object .................................................................... 124  CHAPTER 22: JavaScript Cookies ............................... 129 What Is a Cookie? .......................................................................... 129 Create and Store a Cookie .............................................................. 130  CHAPTER 23: JavaScript Form Validation .................. 134 Required Fields............................................................................... 134 E-mail Validation ........................................................................... 136       ix           Table of Contents  CHAPTER 24: JavaScript Animation ........................... 138 The HTML Code .......................................................................... 138 The JavaScript Code ....................................................................... 139 The Entire Code ............................................................................ 139  CHAPTER 25: JavaScript Image Maps ......................... 141 HTML Image Maps ....................................................................... 141 Adding Some JavaScript ................................................................. 142  CHAPTER 26: JavaScript Timing Events ..................... 144 The setTimeout   Method .............................................................. 144 The clearTimeout   Method ........................................................... 149  CHAPTER 27: Create Your Own Objects  with JavaScript ........................................................... 151 JavaScript Objects .......................................................................... 151 Creating Your Own Objects ........................................................... 152  Section IV: AJAX Basic ...............................157  CHAPTER 28: AJAX XMLHttpRequest ...................... 159 AJAX Uses the XMLHttpRequest Object ....................................... 159 The XMLHttpRequest Object ....................................................... 159 Your First AJAX Application .......................................................... 160  CHAPTER 29: AJAX Browser Support ........................ 163 The XMLHttpRequest ................................................................... 163 All Together Now ........................................................................... 164  x                Table of Contents  CHAPTER 30: AJAX—The XMLHttpRequest  Object’s Methods and Properties ................................ 166 Important Methods ........................................................................ 166 Sending an AJAX Request to a Server ............................................. 167 Important Properties ...................................................................... 167 The responseText Property ............................................................. 167 XMLHttpRequest Open—Using False ........................................... 167 XMLHttpRequest Open—Using True ........................................... 168 The readyState Property ................................................................. 168 The onreadystatechange Property ................................................... 169  CHAPTER 31: AJAX Server ......................................... 170 XMLHttpRequest Object Can Request Any Data .......................... 170 Requesting Files ............................................................................. 170 Submitting Forms .......................................................................... 171  Section V: AJAX Advanced ........................173  CHAPTER 32: AJAX Suggest ...................................... 175 The HTML Form .......................................................................... 175 The showHint   Function .............................................................. 176 The GetXmlHttpObject   Function ............................................... 177 The stateChanged   Function ......................................................... 177 AJAX Suggest Source Code ............................................................ 178  CHAPTER 33: AJAX Database Example ...................... 184 The AJAX JavaScript ...................................................................... 185 The AJAX Server Page .................................................................... 186       xi           Table of Contents  CHAPTER 34: AJAX XML Example ........................... 188 The AJAX JavaScript ...................................................................... 189 The AJAX Server Page .................................................................... 190 The XML File ................................................................................ 191  CHAPTER 35: AJAX ResponseXML Example ............. 198 The AJAX JavaScript ...................................................................... 199 The AJAX Server Page .................................................................... 201  Appendixes ..............................................203 Appendix A: JavaScript Objects .......................................................................203  Appendix B: HTML DOM Objects ................................................................214  Index ........................................................245  xii                InTroduCTIon  Welcome  to  Learn  JavaScript  and  Ajax  with  w3schools. This  book  is  for  Web  site   designers and builders who want to learn to add interactivity to their Web pages   with JavaScript and Ajax.   w3schools  www.w3schools.com , is one of the top Web destinations to learn JavaScript  and many other key Web languages. Founded in 1998, w3schools’ tutorials are recom- mended reading in more than 100 universities and high schools all over the world. This  book  is  a  great  companion  to  the  JavaScript  and  Ajax  tutorials  on  the  w3schools  site,  which were written by Jan Egil Refsnes, Ståle Refsnes, Kai Jim Refsnes, and Hege Refsnes.  Like the w3schools online tutorials, this book features a brief presentation of each topic,  trading lengthy explanations for abundant examples showcasing each key feature. This  book, as well as other w3schools books published by Wiley, features straight-forward and  concise tutorials on each topic from which the beginning Web developer can easily learn.  All of the book’s content is derived from w3schools’ accurate, user-tested content used by  millions of learners every month.  Javascript JavaScript is the scripting language of the Web. JavaScript is used in millions of Web pages  to add functionality, validate forms, detect browsers, and much more. JavaScript is the  most popular scripting language on the Internet and works in all major browsers, such as  Internet Explorer, Firefox, Chrome, Opera, and Safari.  What You should Already Know Before you continue you should have a basic understanding of HTML.  If you want to study this subject first, please read Learn HTML and CSS with w3schools.  What Is Javascript?   8  JavaScript was designed to add interactivity to HTML pages.   8  JavaScript is a scripting language.   8  A scripting language is a lightweight programming language.   8  JavaScript is usually embedded directly into HTML pages.                learn Javascript and AJAX with w3schools   8  JavaScript is an interpreted language  means that scripts execute without pre-  liminary compilation .   8  Everyone can use JavaScript without purchasing a license.  Are Java and Javascript the same? No, they are not. Java and JavaScript are two completely different languages in both con- cept and design.  Java  developed by Sun Microsystems  is a powerful and much more complex program- ming language in the same category as C and C++.  What Can Javascript do?   8  JavaScript  gives  HTML  designers  a  programming  tool.  HTML  authors  are normally not programmers, but JavaScript is a scripting language with a  very simple syntax. Almost anyone can put small “snippets” of code into their  HTML pages.   8  JavaScript can put dynamic text into an HTML page. A JavaScript state- ment like document.write “ ” + name + “ ”  can write a vari- able text into an HTML page.   8  JavaScript can react to events. A JavaScript script can be set to execute when  something happens, like when a page has finished loading or when a user clicks  on an HTML element.   8  JavaScript can read and write HTML elements. A JavaScript script can read   and change the content of an HTML element.   8  JavaScript can be used to validate data. A JavaScript script can be used to  validate form data before it is submitted to a server. This saves the server from  extra processing.   8  JavaScript can be used to detect the visitor’s browser. A JavaScript script  can be used to detect the visitor’s browser, and depending on the browser, load  another page specifically designed for that browser.   8  JavaScript can be used to create cookies. A JavaScript script can be used to   store and retrieve information on the visitor’s computer.  The real name Is ECMAscript JavaScript’s  official  name  is  ECMAScript,  which  is  developed  and  maintained  by  the  ECMA International organization.   The language was invented by Brendan Eich at Netscape  with Navigator 2.0  and has  appeared in all Netscape and Microsoft browsers since 1996.  2                Introduction  ECMA-262 is the official JavaScript standard. The development of ECMA-262 started in  1996, and the first edition of was adopted by the ECMA General Assembly in June 1997.  The standard was approved as an international ISO  ISO IEC 16262  standard in 1998.  The development of the standard is still in progress.  AJAX AJAX equals Asynchronous JavaScript and XML.  AJAX is based on JavaScript and HTTP requests. AJAX is not a new programming lan- guage, but a new way to use existing standards.  AJAX is the art of trading data with a Web server, and changing parts of a Web page,  without reloading the whole page.  What You should Already Know  Before you continue you should have a basic understanding of the following:   8  HTML   8  JavaScript  If you want to study these subjects first, find the tutorials on the w3schools home  page.  AJAX = Asynchronous Javascript and XMl AJAX is not a new programming language, but a new technique for creating better, faster,  and more interactive Web applications.  With AJAX, a JavaScript can communicate directly with the server, with the XMLHttpRe- quest object. With this object, a JavaScript can trade data with a Web server, without  reloading the page.  AJAX uses asynchronous data transfer  HTTP requests  between the browser and the Web  server, allowing Web pages to request small bits of information from the server instead of  whole pages.  The AJAX technique makes Internet applications smaller, faster, and more user friendly.  AJAX Is based on Internet standards AJAX is based on the following Web standards:   8  JavaScript   8  XML       3           learn Javascript and AJAX with w3schools   8  HTML   8  CSS  AJAX applications are browser- and platform-independent.  AJAX Is About better Internet-Applications Internet  applications  have  many  benefits  over  desktop  applications: They  can  reach  a  larger audience; they are easier to install and support; and they are easier to develop.  However, Internet applications are not always as “rich” and user friendly as traditional  desktop applications.   With AJAX, Internet applications can be made richer and more user friendly.  start using AJAX Today There is nothing new to learn. AJAX is based on existing standards. These standards have  been used by developers for several years.  How To use This book Throughout this book, you will see several icons:  Try it yourself >>  The Try It Yourself icon indicates an opportunity for you to practice what you’ve just  learned. The code and examples under this icon come from examples on the w3schools  site, which allow you to make changes to the code and see the results immediately. You  do not have to type in the code examples in this book; you will find them all on the  w3schools site.    The w3schools icon indicates that more information is available on the w3schools  site.   This icon indicates where you will find further information about a topic that is   covered more thoroughly elsewhere within the book.  This book is divided into five sections:   8  Section I: JavaScript Basic   8  Section II: JavaScript Objects   8  Section III: JavaScript Advanced   8  Section IV: AJAX Basic   8  Section V: SectionAJAX Advanced  4                If you’re anxious to improve your Web pages and to add some interactivity, jump right  in with JavaScript Basic. Plenty of examples and opportunities to try things await, and  w3schools will be right there when you need them!  Introduction       5                         Section I JavaScript   Basic     Chapter 1: JavaScript How To and Where To      Chapter 2: JavaScript Statements and  Comments     Chapter 3: JavaScript Variables    Chapter 4: JavaScript Operators    Chapter 5: JavaScript Comparisons    Chapter 6: JavaScript If…Else    Chapter 7: JavaScript Loops    Chapter 8: JavaScript Flow Control Statements     Chapter 9: JavaScript Switch and Popup Boxes    Chapter 10: JavaScript Functions    Chapter 11: JavaScript Events      Chapter 12: JavaScript Try…Catch and Throw  Statements  Chapter 13: JavaScript Special Characters and  Guidelines      7                              CHaPTEr 1  JaVaSCrIPT HOW TO  and WHErE TO  In This Chapter  	  	 How	To	Put	a	JavaScript	into	an	HTML	Page  	  	 How	To	Handle	Simple	Browsers  	  	 Where	To	Put	the	JavaScript  	  	 Using	an	External	JavaScript  The	HTML	 	tag	is	used	to	insert	a	JavaScript	into	an	HTML	page.  How To Put a JavaScript into an HTML  Page  The	following	example	shows	how	to	use	JavaScript	to	write	text	on	a	Web	page.  The	result	of	this	script	is	shown	in	Figure	1.1.     document.write "Hello World!" ;                 Figure 1.1  9                Learn JavaScript and ajax with w3schools  Here’s	your	first	opportunity	to	personalize	JavaScript.	Change	the	“Hello	World”	 text	to	“Happy,	Happy,	Joy,	Joy!”	and	see	what	happens.	The	result	of	your	changes	 is	shown	in	Figure	1.2.  Try it yourself >>     document.write "Happy, Happy, Joy, Joy!" ;  The	following	example	shows	how	to	add	HTML	tags	to	the	JavaScript.	The	result	 of	this	code	is	shown	in	Figure	1.3.     document.write " Hello World! " ;  Continuing	with	our	happier	version	of	the	code,	change	the	“Hello	World!”	text	 to	“Happy,	Happy,	Joy,	Joy!”	and	see	what	happens.	The	result	of	your	changes	is	 shown	in	Figure	1.4.                 Figure 1.2                 Figure 1.3  10                Chapter 1: JavaScript How To and Where To  Try it yourself >>     document.write " Happy, Happy, Joy, Joy! " ;                 Figure 1.4        ...           To	insert	a	JavaScript	into	an	HTML	page,	we	use	the	 	tag.	Inside	the	  	tag	we	use	the	type	attribute	to	define	the	scripting	language.  So,	 	and	 	tell	where	the	Java- Script	starts	and	ends:     The	 document.write	command	is	a	standard	JavaScript	command	for	writing	 output	to	a	page.  When	you	type	the	document.write	command	between	the	 	and	<  script>	tags,	the	browser	will	recognize	it	as	a	JavaScript	command	and	execute	 the	code	line.	In	this	case,	the	browser	writes	Hello	World!	to	the	page:           document.write "Hello World!" ;   continued   11                Learn JavaScript and ajax with w3schools   continued            n O T E If we had not typed the   tag, the browser would have treated  the  document.write “Hello  World!”   command  as  pure  text  and  would  just  write the entire line on the page, as shown in Figure 1.5.  How to Handle Simple Browsers  Browsers	that	do	not	support	JavaScript	will	display	JavaScript	as	page	content.  To	 prevent	 them	 from	 doing	 this	 and	 as	 a	 part	 of	 the	 JavaScript	 standard,	 the	 HTML	comment	tag	should	be	used	to	“hide”	the	JavaScript.  Just	add	an	HTML	comment	tag	<!--	before	the	first	JavaScript	statement,	and	an	 end-of–comment	tag	-->	after	the	last	JavaScript	statement,	like	this:     document.write "Hello World!" ;  Figure 1.5        <!--    -->           The	two	forward	slashes	at	the	end	of	comment	line	    	comprise	the	JavaScript	 comment	symbol.	This	prevents	JavaScript	from	executing	the	-->	tag.  Where to Put the JavaScript  JavaScripts	in	a	page	will	be	executed	immediately	while	the	page	loads	into	the	 browser.	This	is	not	always	what	we	want.	Sometimes	we	want	to	execute	a	script	 when	a	page	loads,	or	at	a	later	event,	such	as	when	a	user	clicks	a	button.	When	 this	is	the	case	we	put	the	script	inside	a	function.	You	will	learn	about	functions	in	 Chapter	10,	“JavaScript	Functions.”  12                Chapter 1: JavaScript How To and Where To  Scripts in   Scripts	to	be	executed	when	they	are	called,	or	when	an	event	is	triggered,	are	placed	 in	functions.  Put	your	functions	in	the	head	section.	This	way	they	are	all	in	one	place,	and	they	 do	not	interfere	with	page	content.	The	resulting	alert	box	is	shown	in	Figure	1.6.  alert "This alert box was called with the onload event" ;  Try it yourself >>     function message             {  }              Figure 1.6  Scripts in   If	you	don’t	want	your	script	to	be	placed	inside	a	function,	or	if	your	script	should	 write	page	content,	it	should	be	placed	in	the	body	section.	Figure	1.7	shows	the	 result.       13           Learn JavaScript and ajax with w3schools  Try it yourself >>     document.write "This message is written by JavaScript" ;  Scripts in   and   You	can	place	an	unlimited	number	of	scripts	in	your	document,	so	you	can	have	 scripts	in	both	the	body	and	the	head	section.           function message    alert "This alert box was called with the onload event" ;            document.write "This message is written by JavaScript" ;                       Figure 1.7  {  }                14           Chapter 1: JavaScript How To and Where To  Using an External JavaScript  If	you	want	to	run	the	same	JavaScript	on	several	pages	without	having	to	write	the	 same	script	on	every	page,	you	can	write	a	JavaScript	in	an	external	file.  Save	the	external	JavaScript	file	with	a	.js	file	extension.	Your	results	are	shown	in	 Figure	1.8.  n O T E  The external script cannot contain the   tag!  Try it yourself >>  To	use	the	external	script,	point	to	the	.js	file	in	the	src	attribute	of	the	 	 tag	as	shown:      Remember to place the script exactly where you normally would write the                     Figure 1.8  n O T E script!       15           Chapter 2  JavaSCript   StatementS and  CommentS  in this Chapter  	  	 JavaScript	Code  	  	 JavaScript	Blocks  	  	 JavaScript	Multiline	Comments  	  	 Using	Comments	To	Prevent	Execution  	  	 Using	Comments	at	the	End	of	a	Line  JavaScript	is	a	sequence	of	statements	to	be	executed	by	the	browser.	Unlike	HTML,	 JavaScript	is	case-sensitive;	therefore,	watch	your	capitalization	closely	when	you	 write	JavaScript	statements	and	create	or	call	variables,	objects,	and	functions.  JavaScript Statements  A	JavaScript	statement	is	a	command	to	a	browser.	The	purpose	of	the	command	is	 to	tell	the	browser	what	to	do.  The	following	JavaScript	statement	tells	the	browser	to	write	“Hello	Dolly”	to	the	 Web	page:  document.write "Hello Dolly" ;  It	 is	 normal	 to	 add	 a	 semicolon	 at	 the	 end	 of	 each	 executable	 statement.	 Most	 people	think	this	is	a	good	programming	practice,	and	most	often	you	will	see	this	 in	JavaScript	examples	on	the	Web.  The	semicolon	is	optional	 according	to	the	JavaScript	standard ,	and	the	browser	 is	supposed	to	interpret	the	end	of	the	line	as	the	end	of	the	statement.	You	often	 will	see	examples	without	the	semicolon	at	the	end.  16                Chapter 2: JavaScript Statements and Comments  n o t e Using semicolons makes it possible to write multiple statements on one  line, although good programming practice encourages placing only one statement per  line.   JavaScript Code JavaScript	 code	  or	 just	 JavaScript 	 is	 a	 sequence	 of	 JavaScript	 statements.	 Each	 statement	is	executed	by	the	browser	in	the	sequence	it	is	written.  This	example	will	write	a	heading	and	two	paragraphs	to	a	Web	page	as	shown	in	 Figure	2.1.  Try it yourself >>           document.write " This is a heading " ;  document.write " This is a paragraph. " ;  document.write " This is another paragraph. " ;           Figure 2.1       JavaScript Blocks JavaScript	statements	can	be	grouped	together	in	blocks.	Blocks	start	with	a	left	 curly	bracket	{	and	end	with	a	right	curly	bracket	}.  The	purpose	of	a	block	is	to	make	the	sequence	of	statements	execute	together.	  The	 following	 example	 writes	 a	 heading	 and	 two	 paragraphs	 to	 a	 Web	 page	 as	 shown	in	Figure	2.2.  17           Learn JavaScript and ajax with w3schools  Try it yourself >>           document.write " This is a heading " ;  document.write " This is a paragraph. " ;  document.write " This is another paragraph. " ;  {  }           Figure 2.2  The	preceding	example	is	not	very	useful.	It	just	demonstrates	the	use	of	a	block.	 Normally,	a	block	is	used	to	group	statements	together	in	a	function	or	in	a	condi- tion	 in	which	a	group	of	statements	should	be	executed	if	a	condition	is	met .  You	will	learn	more	about	functions	and	conditions	in	Chapters	6	and	10.  JavaScript Comments  JavaScript	comments	can	be	added	to	explain	the	JavaScript	script	or	to	make	the	 code	more	readable.  Single	line	comments	start	with	  .  The	following	example	uses	single-line	comments	to	explain	the	code.  18                Chapter 2: JavaScript Statements and Comments  Your	result	is	shown	in	Figure	2.3.  Try it yourself >>              Write a heading  document.write " This is a heading " ;     Write two paragraphs:  document.write " This is a paragraph. " ;  document.write " This is another paragraph. " ;           Figure 2.3  JavaScript multiline Comments Multiline	comments	start	with	 *	and	end	with	* .  The	following	example	uses	a	multiline	comment	to	explain	the	code.  Your	result	is	shown	in	Figure	2.4.  Try it yourself >>            continued  19                Learn JavaScript and ajax with w3schools   continued   *  *   The code below will write  one heading and two paragraphs  document.write " This is a heading " ;  document.write " This is a paragraph. " ;  document.write " This is another paragraph. " ;           Figure 2.4  Using Comments to prevent execution In	the	following	example,	the	comment	is	used	to	prevent	the	execution	of	a	single	 code	line	 can	be	suitable	for	debugging :  Your	result	is	shown	in	Figure	2.5.  Try it yourself >>             document.write " This is a heading " ;  document.write " This is a paragraph. " ;  document.write " This is another paragraph. " ;  20                Chapter 2: JavaScript Statements and Comments           Figure 2.5  Try it yourself >>         *  *            Your	result	would	be	a	blank	screen.  In	the	following	example,	the	comment	is	used	to	prevent	the	execution	of	a	code	 block	 can	be	suitable	for	debugging :     document.write " This is a heading " ;  document.write " This is a paragraph. " ;  document.write " This is another paragraph. " ;       21           Learn JavaScript and ajax with w3schools  Using Comments at the end of a Line In	the	following	example,	the	comment	is	placed	at	the	end	of	a	code	line.	Your	 result	is	shown	in	Figure	2.6.     document.write "Hello" ;    Write "Hello"  document.write " Dolly!" ;    Write " Dolly!"  Try it yourself >>                 Figure 2.6  22                Chapter 3  JavaSCript   variableS  in this Chapter  	  	 Do	You	Remember	Algebra	from	School?  	  	 JavaScript	Variables  	  	 Declaring	 Creating 	JavaScript	Variables  	  	 Assigning	Values	to	Undeclared	JavaScript	Variables  	  	 Redeclaring	JavaScript	Variables  	  	 JavaScript	Arithmetic  Variables	are	“containers”	for	storing	information.  Do You remember algebra from  School?  Do	you	remember	algebra	from	school?  x	=	5,	y	=	6,	z	=	x	+ y  Do	you	remember	that	a	letter	 like	x 	could	be	used	to	hold	a	value	 like	5 ,	and	 that	you	could	use	the	information	given	to	calculate	the	value	of	z	to	be	11?  These	letters	are	called	variables.	Variables	can	be	used	to	hold	values	 x	=	5 	or	 expressions	 z	=	x +	y .  JavaScript variables  As	with	algebra,	JavaScript	variables	are	used	to	hold	values	or	expressions.	A	vari- able	can	have	a	short	name,	like	x,	or	a	more	descriptive	name,	like	carname.  23                learn JavaScript and ajax with w3schools  Rules	for	JavaScript	variable	names:  	8	 Variable	names	are	case	sensitive	 y	and	Y	are	two	different	variables .  	8	 Variable	names	must	begin	with	a	letter,	the	underscore	character,	or	a	dollar	  sign.	 The	$	character	is	used	primarily	by	code-generation	tools.   	8	 Subsequent	characters	may	be	letter,	number,	underscore,	or	dollar	sign.  There are 59 reserved words that are not legal variable names.  Because JavaScript is case sensitive, variable names are case sensitive.  N O t e  t i p  A	variable’s	value	can	change	during	the	execution	of	a	script.	You	can	refer	to	a	vari- able	by	its	name	to	display	or	change	its	value.	Your	result	is	shown	in	Figure	3.1.  Try it yourself >>           var firstname;  firstname="Hege";  document.write firstname ;  document.write " " ;  firstname="Tove";  document.write firstname ;      The script above declares a variable,  assigns a value to it, displays the value, changes the    value,and displays the value again.         24                Chapter 3: Javascript variables  Figure 3.1  Declaring  Creating  JavaScript   variables  Creating	variables	in	JavaScript	is	most	often	referred	to	as	“declaring”	variables.  You	can	declare	JavaScript	variables	with	the	var statement:  var x;  var carname;  var x=5;  var carname="Volvo";  After	the	declaration	shown,	the	variables	are	empty.	 They	have	no	values	yet. 	 However,	you	can	also	assign	values	to	the	variables	when	you	declare	them:  After	the	execution	of	the	preceding	statements,	the	variable	x	will	hold	the	value	5,	 and	carname	will	hold	the	value	Volvo.  N O t e  When you assign a text value to a variable, use quotes around the value.  assigning values to Undeclared   JavaScript variables  If	you	assign	values	to	variables	that	have	not	yet	been	declared,	the	variables	will	 automatically	be	declared.  The	following	statements:  x=5;  carname="Volvo";   continued   25                learn JavaScript and ajax with w3schools   continued   have	the	same	effect	as	these:  var x=5;  var carname="Volvo";  redeclaring JavaScript variables If	you	redeclare	a	JavaScript	variable,	it	will	not	lose	its	original	value.  var x=5;  var x;  y=x-5;  z=y+5;  After	the	execution	of	the	preceding	statements,	the	variable x	will	still	have	the	 value	of	5.	The	value	of	x	is	not	reset	 or	cleared 	when	you	redeclare	it.  JavaScript arithmetic  As	with	algebra,	you	can	do	arithmetic	operations	with	JavaScript	variables:  N O t e Sometimes the results seem unpredictable. If at least one variable on the  right side of an assignment expression contains a string value, the result will be a string  and the “+” operator is applied as the concatenation operator to the toString   values of  the variables.  Only if all the variables to the right of the assignment operator are num- bers will the result be a number.  	You	will	learn	more	about	the	operators	that	can	be	used	in	Chapter	4,	  “JavaScript	Operators.”  26                Chapter 4  JavaSCript   OperatOrS  in this Chapter  	  	 JavaScript	Arithmetic	Operators  	  	 JavaScript	Assignment	Operators  	  	 The	+	Operator	Used	on	Strings  	  	 Adding	Strings	and	Numbers  The	assignment	operator,	=,	is	used	to	assign	values	to	JavaScript	variables,	as	shown	 in	the	first	two	lines	of	the	following	code.  The	arithmetic	operator,	+,	is	used	to	add	values	together,	as	shown	in	the	last	line	 of	the	following	code.  y = 5;  z = 2;  x = y+z;  The	value	of	x,	after	the	execution	of	the	preceding	statements	is	7.  JavaScript arithmetic Operators  Arithmetic	operators	are	used	to	perform	arithmetic	between	variables	and or	val- ues.  Given	that	y	=	5,	the	following	table	explains	the	arithmetic	operators.  Operator + - *   % ++ --  Description Addition Subtraction Multiplication Division Modulus  division remainder  Increment Decrement  27  example x = y+2 x = y-2 x = y*2 x = y 2 x = y%2 x = ++y x = --y  result x = 7 x = 3 x = 10 x = 2.5 x = 1 x = 6 x = 4                Learn JavaScript and ajax with w3schools  JavaScript assignment Operators Assignment	operators	are	used	to	assign	values	to	JavaScript	variables.  Given	that	x	=	10	and	y	=	5,	the	following	table	explains	the	assignment	operators:  Operator = += -= *=  = %=  example x = y x+ = y x- = y x* = y x  = y x% = y  Same as   x = x+y x = x-y x = x*y x = x y x = x%y  result x = 5 x = 15 x = 5 x = 50 x = 2 x = 0  the + Operator Used on Strings  The	 +	 operator	 also	 can	 be	 used	 to	 concatenate	 string	 variables	 or	 text	 values	 together.	To	concatenate	two	or	more	string	variables	together,	use	the	+	operator:  After	the	execution	of	the	preceding	statements,	the	variable	txt3	contains	“What	 a	verynice	day”.  To	add	a	space	between	the	two	strings,	insert	a	space	into	one	of	the	strings:  txt1="What a very";  txt2="nice day";  txt3=txt1+txt2;  txt1="What a very ";  txt2="nice day";  txt3=txt1+txt2;  Or	insert	a	space	into	the	expression:  txt1="What a very";  txt2="nice day";  txt3=txt1+" "+txt2;  After	the	execution	of	the	preceding	statements,	the	variable	txt3	contains:  “What	a	very	nice	day”  adding Strings and Numbers  The	rule	is	as	follows:  If	you	add	a	number	and	a	string,	the	result	will	be	a	string!	Your	results	are	shown	 in	Figure	4.1.  28                Chapter 4: Javascript Operators     Try it yourself >>        x=5+5;  document.write x ;  document.write " " ;  x="5"+"5";  document.write x ;  document.write " " ;  x=5+"5";  document.write x ;  document.write " " ;  x="5"+5;  document.write x ;  document.write " " ;      The rule is: If you add a number and a string, the result   will be a string.         Figure 4.1       29           Chapter 5  JavaSCript   CompariSonS  in this Chapter 	  	 Comparison	Operators  	  	 How	to	Use	Comparisons  	  	 Logical	Operators  	  	 Conditional	Operator  Comparison	and	logical	operators	are	used	to	test	for	true	or	false.  Comparison operators  Comparison	operators	are	used	in	logical	statements	to	determine	equality	or	differ- ence	between	variables	or	values.  Given	that	x =	5,	the	following	table	explains	the	comparison	operators:  operator == ===  Description is equal to value...is equal to value is exactly equal to value and type  != > < >= <=  is not equal is greater than is less than is greater than or equal to is less than or equal to  example x == 8 is false  x === 5 is true  x === “5” is false x! = 8 is true x > 8 is false x < 8 is true x >= 8 is false x <= 8 is true  30                Chapter 5: Javascript Comparisons  how to Use Comparisons  Comparison	operators	can	be	used	in	conditional	statements	to	compare	values	and	 take	action	depending	on	the	result:  if  age<18  document.write "Too young" ;  	You	will	learn	more	about	the	use	of	conditional	statements	in	the	next	  chapter.  Logical operators  Logical	operators	are	used	to	determine	the	logic	between	variables	or	values.  Given	that	x =	6	and	y	=	3,	the	following	table	explains	the	logical	operators:	  operator &&  !  Description and or not  example  x   1  is true  x == 5  y == 5  is false ! x == y  is true  Conditional operator  JavaScript	 also	 contains	 a	 conditional	 operator	 that	 assigns	 a	 value	 to	 a	 variable	 based	on	some	condition.	The	syntax	is	as	follows:  variablename= condition ?value1:value2  For	example,  greeting= visitor=="PRES" ?"Dear President ":"Dear ";  If	 the	 variable	 visitor	 has	 the	 value	 of	 "PRES",	 then	 the	 variable	 greeting	 will	 be	 assigned	the	value	"Dear President "	else	it	will	be	assigned	"Dear".       31           Chapter 6  JavaSCript if...elSe  StatementS  in this Chapter 	  	 Conditional	Statements  	  	 if	Statement  	  	 if...else	Statement  	  	 if...else	if...else	Statement  Conditional	 statements	 are	 used	 to	 perform	 different	 actions	 based	 on	 different	 conditions.  Conditional Statements  Very	often	when	you	write	code,	you	want	to	perform	different	actions	for	different	 decisions.	You	can	use	conditional	statements	in	your	code	to	do	this.  JavaScript	has	the	following	conditional	statements:  	8	 if statement. Use	this	statement	to	execute	some	code	only	if	a	specified	condi-  tion	is	true.  	8	 if...else statement. Use	this	statement	to	execute	some	code	if	the	condition	is	  true	and	another	code	if	the	condition	is	false.  	8	 if...else if....else statement. Use	this	statement	to	select	one	of	many	blocks	of	  	8	 switch statement.	Use	this	statement	to	select	one	of	many	blocks	of	code	to	  code	to	be	executed.  be	executed.  32                Chapter 6: JavaScript if...else Statements  t i p With conditionals, a { } block must contain the statements to be executed. If  curly braces are not present, only the subsequent statement is executed, which is a very  common programming error.      }    all three statements are executed  if  condition       {        statement 1;        statement 2;        statement 3;  if  condition       statement 1;      statement 2;      statement 3;          only statement 1 is executed  if Statement  Use	the	if	statement	to	execute	some	code	only	if	a	specified	condition	is	true.  The	syntax	is	as	follows:  if  condition     {    }  Your	result	is	shown	in	Figure	6.1.    code to be executed if condition is true  t i p JavaScript error!  if is written in lowercase letters. Using uppercase letters  IF  will generate a   Try it yourself >>           var d = new Date  ;  var time = d.getHours  ;   continued  33                learn JavaScript and ajax with w3schools   continued   if  time < 10      {    }       document.write " Good morning " ;   This example demonstrates the If statement.    If the time on your browser is less than 10, you will get   a "Good morning" greeting.         figure 6.1    {    }  else    {    }  34       n O t e code only if the specified condition is true.  There is no ..else.. in this syntax. You tell the browser to execute some   if...else Statement  Use	the	 if....else	statement	to	execute	some	code	if	a	condition	is	true	and	 another	code	if	the	condition	is	not	true.  The	syntax	is	as	follows:  if  condition     code to be executed if condition is true    code to be executed if condition is not true           Chapter 6: JavaScript if...else Statements  Try it yourself >>           var d = new Date  ;  var time = d.getHours  ;  if  time < 10    document.write " Good morning " ;  document.write " Good day " ;     This example demonstrates the If...Else statement.  If the time on your browser is less than 10,  you will get a "Good morning" greeting.  Otherwise you will get a "Good day" greeting.  Your	result	is	shown	in	Figure	6.2.  {  }  {  }  else                    figure 6.2       35           learn JavaScript and ajax with w3schools  The	following	example	demonstrates	a	random	link.	When	you	click	on	the	link,	 it	will	take	you	to	w3schools.com	OR	to	RefsnesData.no.	There	is	a	50	percent	 chance	for	each	of	them.	Your	result	is	shown	in	Figure	6.3.  Try it yourself >>           var r=Math.random  ;  if  r>0.5   document.write " Learn Web   Development! " ;  document.write " Visit   Refsnes Data! " ;  {  }  {  }  else           figure 6.3  36       if...else if...else Statement  Use	the	if....else if...else	statement	to	select	one	of	several	blocks	of	code	 to	be	executed.  The	syntax	is	as	follows:  if  condition1     {    code to be executed if condition1 is true           Chapter 6: JavaScript if...else Statements  else if  condition2     code to be executed if condition2 is true    code to be executed if condition1 and condition2 are not     }    {    }  else    {  true    }  {  }  {  }  {  }  else        Your	result	is	shown	in	Figure	6.4.  Try it yourself >>           var d = new Date  ;  var time = d.getHours  ;  if  time<10   document.write " Good morning " ;  else if  time>=10 && time<16   document.write " Good day " ;  document.write " Hello World! " ;     This example demonstrates the if..else if...else statement.   continued   37                learn JavaScript and ajax with w3schools   continued         figure 6.2  38                JavaSCript LoopS  Chapter 7  in this Chapter  	  	 The	for	Loop  	  	 The	while	Loop  	  	 The	do...while	Loop  Loops	 execute	 a	 block	 of	 code	 a	 specified	 number	 of	 times	 or	 while	 a	 specified	 condition	is	true.  Often	when	you	write	code,	you	want	the	same	block	of	code	to	run	over	and	over	 again	in	a	row.	Instead	of	adding	several	almost	equal	lines	in	a	script,	you	can	use	 loops	to	perform	a	task	like	this.  In	JavaScript,	there	are	two	kinds	of	loops:  	8	 for. Loops	through	a	block	of	code	a	specified	number	of	times  	8	 while. Loops	through	a	block	of	code	while	a	specified	condition	is	true  The	for	loop	is	used	when	you	know	in	advance	how	many	times	the	script	should	 run.  for  var=startvalue;var<=endvalue;var=var+increment   the for Loop  The	syntax	is	as	follows:  {  }  code to be executed  The	following	example	defines	a	loop	that	starts	with	i = 0.	The	loop	will	continue	 to	run	as	long	as	i	is	less	than	or	equal	to	5.	i	will	increase	by	1	each	time	the	loop	 runs.	Your	result	is	shown	in	Figure	7.1.  N o t e comparing statement.  The increment parameter could also be negative, and the <= could be any   39                Learn JavaScript and ajax with w3schools  Try it yourself >>           for  i = 0; i <= 5; i++   document.write "The number is " + i ;  document.write " " ;  {  }      Explanation:    This for loop starts with i=0.    As long as  i  is less than, or equal to 5, the loop   will continue to run.     i  will increase by 1 each time the loop runs.         Figure 7.1  40                Chapter 7: Javascript Loops  In	the	following	example,	you	loop	through	the	six	different	HTML	headings.	Your	 result	is	shown	in	Figure	7.2.  Try it yourself >>           for  i = 1; i <= 6; i++   {  }           document.write " This is heading " + i ;  document.write " " ;  Figure 7.2  the while Loop  The	syntax	is	as	follows:  while  var<=endvalue     {  The	while	loop	loops	through	a	block	of	code	a	specified	number	of	times	or	while	 a	specified	condition	is	true.   continued  41                Learn JavaScript and ajax with w3schools    code to be executed   continued     }  N o t e  The <= could be any comparing statement.  t i p The distinction between the for and the while is that in the for loop, the  conditions are known and can be specified beforehand. The while loop is used when  the initial conditions are known, but the terminal condition is discovered as the block is  executed.  The	following	example	defines	a	loop	that	starts	with	i = 0.	The	loop	will	continue	 to	run	as	long	as	i	is	less	than	or	equal	to	5.	i	will	increase	by	1	each	time	the	loop	 runs,	as	shown	in	Figure	7.3.  Try it yourself >>  while  i<=5         i=0;  {  i++;  }        document.write "The number is " + i ;  document.write " " ;   Explanation:     i  is equal to 0.    While  i  is less than, or equal to, 5, the loop   will continue to run.     i  will increase by 1 each time the loop runs.         42                Chapter 7: Javascript Loops  the do...while Loop  The	do...while	loop	is	a	variant	of	the	while	loop.	This	loop	will	execute	the	 block	of	code	once,	and	then	it	will	repeat	the	loop	as	long	as	the	specified	condi- tion	is	true.  Figure 7.3  The	syntax	is	as	follows:  do    {    }    code to be executed  while  var<=endvalue ;  The	 following	 example	 uses	 a	 do...while  loop.	 The	 do...while	 loop	 will	 always	be	executed	at	least	once,	even	if	the	condition	is	false,	because	the	state- ments	are	executed	before	the	condition	is	tested.	The	result	is	shown	in	Figure	7.4.  t i p The difference between the while and do…while loops should be character- ized by whether the condition is checked before or after the block is executed. In the  case of the while loop, the condition is checked first, so if false, the block will not be  executed. In the do…while loop, the condition is checked after the block is executed;  therefore the block is always executed at least once.       43           Learn JavaScript and ajax with w3schools  Try it yourself >>     document.write "The number is " + i ;  document.write " " ;  while  i <= 5       Explanation:     i   equal to 0.    The loop will run         i = 0;  do  {  i++;  }          i  will increase by 1 each time the loop runs.    While  i  is less than, or equal to, 5, the loop   will continue to run.   44                Chapter 7: Javascript Loops  45          Figure 7.4        Chapter 8  additional   JavaSCript Flow  Control   StatementS  in this Chapter 	  	 The	break	Statement  	  	 The	continue	Statement  	  	 JavaScript	for...in	Statement  	  	 JavaScript	switch	Statement  The	 break	 and	 continue	 statements	 are	 used	 to	 control	 loop	 execution.	The	 break	statement	can	be	used	to	halt	execution	of	a	loop	if,	for	example,	an	error	 condition	is	encountered.	The	continue	statement	is	used	to	begin	the	next	itera- tion	of	a	loop	without	executing	all	the	statements	in	the	block.  the break Statement  The	break	statement	will	terminate	execution	of	the	loop	and	continue	executing	 the	code	that	follows	after	the	loop	 if	any .	Your	result	is	shown	in	Figure	8.1.  Try it yourself >>           var i=0;  for  i=0;i<=10;i++   46                Chapter 8: additional JavaScript Flow Control Statements  document.write "The number is " + i ;  document.write " " ;   Explanation: The loop will break when i=3.   if  i==3     break;  {    {    }  }           Figure 8.1  the continue Statement  The	continue	statement	will	terminate	the	current	iteration	and	restart	the	loop	 with	the	next	value.	Your	result	is	shown	in	Figure	8.2.  Try it yourself >>           var i=0;  for  i=0;i<=10;i++   if  i==3     continue;  {    {    }  document.write "The number is " + i ;  document.write " " ;   continued  47                learn JavaScript and ajax with w3schools   Explanation: The loop will break the current loop and   continue with the next value when i=3.    continued   }           Figure 8.2  48       JavaScript for...in Statement  The	for...in	statement	loops	through	the	elements	of	an	array	or	through	the	 properties	of	an	object.  The	syntax	is	as	follows:  for  variable in object     {     }    code to be executed  n o t e element property.  The  code  in  the  body  of  the  for...in  loop  is  executed  once  for  each            Chapter 8: additional JavaScript Flow Control Statements  n o t e property of an object.  The  variable  argument  can  be  a  named  variable,  an  array  element,  or  a   	Arrays	are	discussed	more	fully	in	Chapter	17,	“JavaScript	Array	Object.”  In	the	following	example,	use	the	for...in	statement	to	loop	through	an	array.	 Your	result	is	shown	in	Figure	8.3.     Try it yourself >>        var x;  var mycars = new Array  ;  mycars[0] = "Saab";  mycars[1] = "Volvo";  mycars[2] = "BMW";  for  x in mycars   document.write mycars[x] + " " ;  {  }           Figure 8.3       Conditional	 statements	 are	 used	 to	 perform	 different	 actions	 based	 on	 different	 conditions.  49           learn JavaScript and ajax with w3schools  JavaScript switch Statement  Use	the	switch	statement	to	select	one	of	many	blocks	of	code	to	be	executed.  The	syntax	is	as	follows:    execute code block 1    execute code block 2  switch n   {  case 1:    break;  case 2:    break;  default:  }    code to be executed if n is different from case 1 and 2  This	is	how	it	works:	First	we	have	a	single	expression	n	 most	often	a	variable 	that	 is	evaluated	once.	The	value	of	the	expression	is	then	compared	with	the	values	for	 each	case	in	the	structure.	If	there	is	a	match,	the	block	of	code	associated	with	that	 case	is	executed.	  Execution	continues	until	either	the	end	of	the	switch	block	is	reached	or	a	break	 statement	is	encountered.	For	example:           var i = 1;  switch  i   {  case 0:  case 1:  case 2:      break;  case 3:      break;      document.write " i == 0  " ;      document.write " i == 1  " ;      document.write " i == 2  " ;      document.write " i == 3  " ;  50                Chapter 8: additional JavaScript Flow Control Statements      document.write " i > 3  " ;   Note that when i == 1 execution begins with case 1: but   continues until the break statement is encountered.   default:  }           Your	results	are	shown	in	Figure	8.4.  Try it yourself >>        var d = new Date  ;  theDay=d.getDay  ;  switch  theDay        document.write " Finally Friday " ;    document.write " Super Saturday " ;    document.write " Sleepy Sunday " ;  {  case 5:    break;  case 6:    break;  case 0:    break;  default:    document.write " I'm really looking forward to this   weekend! " ;  }      This JavaScript will generate a different greeting based   on what day it is. Note that Sunday=0, Monday=1, Tues- day=2, etc.    continued        51           learn JavaScript and ajax with w3schools   continued         Figure 8.4  52                Chapter 9  JavaSCript   popup BoxeS  in this Chapter  	  	 Popup	Boxes  	  	 Alert	Box  	  	 Confirm	Box  	  	 Prompt	Box  popup Boxes  JavaScript	has	three	types	of	popup	boxes:	alert	box,	confirm	box,	and	prompt	box.  alert Box An	alert	box	is	often	used	when	you	want	to	display	information	to	the	user.  When	an	alert	box	pops	up,	the	user	will	have	to	click	OK	to	proceed.	  Your	results	are	shown	in	Figure	9.1.	When	you	click	the	button,	the	alert	box	in	 Figure	9.2	pops	up.  The	syntax	is	as	follows:  alert "sometext" ;  Try it yourself >>         continued   53                Learn JavaScript and ajax with w3schools   continued      function show_alert    alert "Hello! I am an alert box!" ;  <input type="button" onclick="show_alert  " value="Show   alert box"  >  {  }                 Figure 9.1  Figure 9.2  54  {  }       The	following	example	creates	an	alert	box	with	line	breaks.  Your	results	are	shown	in	Figures	9.3	and	9.4.  Try it yourself >>           function disp_alert    alert "Hello again! This is how we" + '\n' + "add line   breaks to an alert box!" ;           Chapter 9: JavaScript popup Boxes  <input type="button" onclick="disp_alert  " value="Display   alert box"  >                 Figure 9.3  Figure 9.4  Confirm Box A	confirm	box	is	often	used	if	you	want	the	user	to	verify	or	accept	something.  When	a	confirm	box	pops	up,	the	user	will	have	to	click	either	OK	or	Cancel	to	 proceed.	  If	the	user	clicks	OK,	the	box	returns	true.	If	the	user	clicks	Cancel,	the	box	returns	 false.  The	syntax	is	as	follows:  confirm "sometext" ;  Your	results	are	shown	in	Figures	9.5	and	9.6.  Try it yourself >>        {     function show_confirm     continued  55                Learn JavaScript and ajax with w3schools   continued   var r=confirm "Press a button!" ;  if  r==true     alert "You pressed OK!" ;    alert "You pressed Cancel!" ;  <input type="button" onclick="show_confirm  " value="Show a   confirm box"  >    {    }  else    {    }  }                 Figure 9.5  Figure 9.6  56       prompt Box A	prompt	box	is	often	used	if	you	want	the	user	to	input	a	value	while	on	a	page	 or	from	a	page.  When	a	prompt	box	pops	up,	the	user	will	have	to	click	either	OK	or	Cancel	to	 proceed	after	entering	an	input	value.	           Chapter 9: JavaScript popup Boxes  If	the	user	clicks	OK,	the	box	returns	the	input	value.	If	the	user	clicks	Cancel,	the	 box	returns	null.  The	syntax	is	as	follows:  prompt "sometext","defaultvalue" ;  Your	results	are	shown	in	Figure	9.7.  Try it yourself >>     function disp_prompt    var fname=prompt "Please enter your name:","Your name"   document.getElementById "msg" .innerHTML="Greetings, " +   <input type="button" onclick="disp_prompt  " value="Display   a prompt box"  >                {  }  fname                 Figure 9.7       57           Chapter 10  JavaSCript   FunCtionS  in this Chapter  	  	 How	to	Define	a	Function  	  	 JavaScript	Function	Examples  	  	 The	return	Statement  	  	 The	Lifetime	of	JavaScript	Variables  A	function	will	be	executed	by	an	event	or	by	an	explicit	call	to	the	function.  To	keep	the	browser	from	executing	a	script	when	the	page	loads,	you	can	put	your	 script	into	a	function.  A	function	contains	code	that	will	be	executed	by	an	event	or	by	a	call	to	the	func- tion.  You	may	call	a	function	from	anywhere	within	a	page	 or	even	from	other	pages	if	 the	function	is	embedded	in	an	external	.js	file .  Functions	can	be	defined	both	in	the	 	and	in	the	 	section	of	a	docu- ment.	However,	to	ensure	that	a	function	is	read loaded	by	the	browser	before	it	is	 called,	it	should	be	placed	in	the	 	section.  how to Define a Function  The	syntax	is	as	follows:  function functionname var1,var2,...,varX   some code  {  }       58           Chapter 10: JavaScript Functions  The	 parameters	 var1,	 var2,	 and	 so	 on,	 are	 variables	 or	 values	 passed	 into	 the	 function.	The	{	and	the	}	defines	the	start	and	end	of	the	function.  n o t e function name.  A function with no parameters must include the parentheses    after the   t i p Do not forget about the importance of capitalization in JavaScript! The word  function must be written in lowercase letters, otherwise a JavaScript error occurs. Also  note that you must call a function with the exact same capitalization as in the function  declaration.  JavaScript Function examples  In	the	following	example,	if	the	line	alert "Hello world!!" 	had	not	been	put	 within	a	function,	it	would	have	been	executed	as	soon	as	the	line	was	loaded.	Now,	 the	script	will	not	be	executed	before	a	user	clicks	the	input	button.	The	function	 displaymessage  	will	be	executed	if	the	input	button	is	clicked.  Your	results	are	shown	in	Figures	10.1	and	10.2.  Try it yourself >>     function displaymessage    alert "Hello World!" ;        {  }                 <input type="button" value="Click me!"   onclick="displaymessage  "  >   By pressing the button above, a function will be called.   The function will alert a message.    continued   59                Learn JavaScript and ajax with w3schools   continued         Figure 10.1  Figure 10.2  Events.”  alert txt ;              {  }       	You	will	learn	more	about	JavaScript	events	in	the	Chapter	11,	“JavaScript	  The	following	example	of	a	function	with	a	parameter	shows	how	to	pass	a	variable	 to	a	function	and	use	the	variable	in	the	function.  Your	results	are	shown	in	Figures	10.3	and	10.4.  Try it yourself >>           function myfunction txt   <input type="button" onclick="myfunction 'Hello' "   value="Call function">     60           Chapter 10: JavaScript Functions   By pressing the button above, a function will be called  with "Hello" as a parameter. The function will alert the  parameter.         Figure 10.3  Figure 10.4  The	following	example	shows	how	to	let	a	function	return	a	value.  Your	results	are	shown	in	Figure	10.5     function myFunction    return  "Hello world!" ;  Try it yourself >>        {  }              document.write myFunction         continued   61                the return Statement  The	 return	 statement	 is	 used	 to	 specify	 the	 value	 that	 is	 returned	 from	 the	 function.  So,	functions	that	are	going	to	return	a	value	must	use	the	return	statement.  A	return	statement	also	may	be	used	in	a	function	that	does	not	return	a	value	to	 end	execution	at	any	given	point	in	the	function;	for	example,	if	an	error	condition	 is	encountered:  The	following	example	returns	the	product	of	two	numbers	 a	and	b .  Your	results	are	shown	in	Figure	10.6.  Learn JavaScript and ajax with w3schools   continued         Figure 10.5  Var globalName;  function setGlobalName name   {  {      if  name.length == 0   Alert "no name specified"   return;          }     }     globalName = name;  Try it yourself >>           function product a,b   return a*b;  62  {                Chapter 10: JavaScript Functions     document.write product 4,3  ;   The script in the body section calls a function with two   parameters  4 and 3 .    The function will return the product of these two param-  }              eters.         Figure 10.6  the Lifetime of JavaScript variables  If	you	declare	a	variable	within	a	function,	the	variable	can	be	accessed	only	within	 that	function.	When	you	exit	the	function,	the	variable	is	destroyed.	These	vari- ables	are	called	local variables.	You	can	have	local	variables	with	the	same	name	in	 different	functions,	because	each	is	recognized	only	by	the	function	in	which	it	is	 declared.  If	you	declare	a	variable	outside	a	function,	all	the	functions	on	your	page	can	access	 it.	These	variables	are	called	global variables.  The	lifetime	of	these	variables	starts	when	they	are	declared	and	ends	when	the	page	 is	closed.       63           JavaSCript eventS  Chapter 11  in this Chapter 	  	 onLoad	and	onUnload  	  	 onFocus,	onBlur,	and	onChange  	  	 onSubmit  	  	 onClick  	  	 onMouseOver	and	onMouseOut  Events	are	actions	that	can	be	detected	by	JavaScript.  By	using	JavaScript,	we	have	the	ability	to	create	dynamic	Web	pages.  Every	element	on	a	Web	page	has	certain	events	that	can	trigger	a	JavaScript.	For	 example,	 we	 can	 use	 the	 onClick	 event	 of	 a	 button	 element	 to	 indicate	 that	 a	 function	will	run	when	a	user	clicks	the	button.	We	define	the	events	in	the	HTML	 tags.  Examples	of	events:  	8	 A	mouse	click  	8	 A	Web	page	or	an	image	loading  	8	 Mousing	over	a	hot	spot	on	the	Web	page  	8	 Selecting	an	input	field	in	an	HTML	form  	8	 Submitting	an	HTML	form  n O t e will not be executed before the event occurs!  Events are normally used in combination with functions, and the function   onLoad and onUnload  The	onLoad	and	onUnload	events	are	triggered	when	the	user	enters	or	leaves	the	 page.  The	 onLoad	event	is	often	used	to	check	the	visitor’s	browser	type	and	browser	 version	and	load	the	proper	version	of	the	Web	page	based	on	the	information.  64                Chapter 11: JavaScript events  Both	the	 onLoad	and	 onUnload	events	often	are	used	to	deal	with	cookies	that	 should	be	set	when	a	user	enters	or	leaves	a	page.	For	example,	you	could	have	a	 popup	asking	for	the	user’s	name	upon	his	first	arrival	to	your	page.	The	name	is	 then	stored	in	a	cookie.	Next	time	the	visitor	arrives	at	your	page,	you	could	have	 another	popup	saying	something	like:	“Welcome	John	Doe!”.  onFocus, onBlur, and onChange  The	onFocus,	onBlur,	and	onChange	events	are	often	used	in	combination	with	 validation	of	form	fields.  The	onFocus	and	onBlur	events	are	complementary	and	are	caused	by	the	user	 clicking	outside	of	the	current	window,	frame,	or	form	element	or	using	the	Tab	key	 to	move	among	fields	or	elements.		When	the	user	leaves	an	element,	that	element	 triggers	a	blur	event.		When	the	user	moves	to	a	new	element,	that	element	triggers	 a	focus	event.	  Following	is	an	example	of	how	to	use	the	onChange	event.	The	checkEmail  	 function	will	be	called	whenever	the	user	changes	the	content	of	the	field:  <input type="text" size="30" id="email"   onchange="checkEmail  ">  onSubmit  The	 onSubmit	 event	 may	 be	 used	 to	 validate	 form	 fields	 before	 submitting	 the	 form.  t i p can validate any, all, or no inputs as he sees fit.  Because  the  programmer  controls  the  function  executed  on  onSubmit,  he   Following	is	an	example	of	how	to	use	the	onSubmit	event.	The	 checkForm  	 function	 will	 be	 called	 when	 the	 user	 clicks	 the	 Submit	 button	 in	 the	 form.	 If		 the	 field	 values	 are	 not	 accepted,	 the	 submit	 should	 be	 cancelled.	The	 function	 checkForm  	returns	either	true	or	false.	If	it	returns	true,	the	form	will	be	submit- ted,	otherwise	the	submit	will	be	cancelled:  <form method="post" action="xxx.htm" onsubmit="return    checkForm  ">       65           Learn JavaScript and ajax with w3schools  onMouseOver and onMouseOut  onMouseOver	and	onMouseOut	often	are	used	to	create	Rollover	buttons.  Following	is	an	example	of	an	onMouseOver	event.	An	alert	box	appears	when	an	 onMouseOver	event	is	detected:  <a href="http:  www.w3schools.com" onmouseover="alert 'An   onMouseOver event' ;return false"><img src="w3s.gif"  alt="w3schools"  >   onClick  The	onClick	event	occurs	when	the	user	mouse	clicks	on	a	visible	element	on	the	 screen.	 	The	 following	 example	 could	 be	 used	 to	 translate	 text	 on	 a	 page	 when	 requested	by	the	user:  <input type="button" name="language" value="Click for    Spanish"  onclick="translate  ">  66                Chapter 12  javasCript   try…CatCh and  throw statements  in this Chapter  	  	 JavaScript—Catching	Errors  	  	 The	try...catch	Statement  	  	 The	throw	Statement  The	try…catch	statement	enables	you	to	trap	errors	that	occur	during	the	execu- tion	of	a	block	of	code.  javascript—Catching errors  When	browsing	Web	pages	on	the	Internet,	we	all	have	seen	a	JavaScript	alert	box	 telling	us	there	is	a	runtime	error	and	asking	“Do	you	wish	to	debug?”	Error	mes- sages	like	this	may	be	useful	for	developers	but	not	for	users.	When	users	see	errors,	 they	often	leave	the	Web	page.  This	chapter	teaches	you	how	to	catch	and	handle	JavaScript	error	messages	so	you	 don’t	lose	your	audience.  the try...catch statement  The	try…catch	statement	enables	you	to	trap	errors	that	occur	during	the	execu- tion	of	a	block	of	code.	The	try	block	contains	the	code	to	be	run,	and	the	catch	 block	contains	the	code	to	be	executed	if	an	error	occurs.  67                Learn javascript and ajax with w3schools  The	syntax	is	as	follows:  try    {    }    {    }      Run some code here  catch err       Handle errors here  n o t e letters will generate a JavaScript error!  Note that try...catch is written in lowercase letters. Using uppercase   The	following	example	is	supposed	to	alert	“Welcome	guest!”	when	the	button	is	 clicked.	However,	there’s	a	typo	in	the	message  	function.	alert  	is	misspelled	 as	adddlert  .	A	JavaScript	error	occurs.	The	catch	block	catches	the	error	and	 executes	 a	 custom	 code	 to	 handle	 it.	The	 code	 displays	 a	 custom	 error	 message	 informing	the	user	what	happened.	Your	results	are	shown	in	Figures	12.1	and	12.2.  Try it yourself >>        var txt="";  function message         adddlert "Welcome guest!" ;  catch err     txt="There was an error on this page.\n\n";    txt+="Error message: " + err.message + "\n\n";    txt+="Click OK to continue.\n\n";    alert txt ;  {  try    {    }    {    }  }             68           Chapter 12: javascript try…Catch and throw statements  <input type="button" value="View message" onclick="message  "       >        Figure 12.1  Figure 12.2  The	next	example	uses	a	confirm	box	to	display	a	custom	message	telling	users	they	 can	click	OK	to	continue	viewing	the	page	or	click	Cancel	to	go	to	the	homepage.	 If	the	confirm	method	returns	false,	the	user	clicked	Cancel,	and	the	code	redirects	 the	user.	If	the	confirm	method	returns	true,	the	code	does	nothing.	Your	results	are	 shown	in	Figures	12.3	and	12.4.     Try it yourself >>        var txt="";  function message    {  try    {    }    {  catch err     adddlert "Welcome guest!" ;   continued   69                Learn javascript and ajax with w3schools   continued     txt="There was an error on this page.\n\n";    txt+="Click OK to continue viewing this page,\n";    txt+="or Cancel to return to the home page.\n\n";    if !confirm txt        document.location.href="http:  www.w3schools.com ";  <input type="button" value="View message" onclick="message  "       {      }    }  }            >        Figure 12.3  Figure 12.4  70       the throw statement  The	throw	statement	allows	you	to	create	an	exception.	If	you	use	this	statement	 together	with	the	try...catch	statement,	you	can	control	program	flow	and	gen- erate	accurate	error	messages.           Chapter 12: javascript try…Catch and throw statements  The	syntax	is	as	follows:  throw exception   The	exception	can	be	a	string,	integer,	Boolean,	or	an	object.  n o t e a JavaScript error!  throw is written in lowercase letters. Using uppercase letters will generate   The	following	example	determines	the	value	of	a	variable	called	x.	If	the	value	of	x	 is	higher	than	10,	lower	than	0,	or	not	a	number,	we	are	going	to	throw	an	error.	 The	error	is	then	caught	by	the	catch	argument,	and	the	proper	error	message	is	 displayed:     var x=prompt "Enter a number between 0 and 10:","" ;        try  {     {    }    {    }    {    }  }  {    {    }    {  if x>10     throw "Err1";  else if x<0     throw "Err2";  else if isNaN x      throw "Err3";  catch er   if er=="Err1"   if er=="Err2"     alert "Error! The value is too high" ;    alert "Error! The value is too low" ;   continued   71                Learn javascript and ajax with w3schools   continued    }  if er=="Err3"     {    }  }             alert "Error! The value is not a number" ;  72                Chapter 13  JavaSCript SpeCial  CharaCterS and  GuidelineS  in this Chapter 	  	 Insert	Special	Characters  	  	 JavaScript	Is	Case	Sensitive  	  	 White	Space  	  	 Break	up	a	Code	Line  In	 JavaScript,	 you	 can	 add	 special	 characters	 to	 a	 text	 string	 by	 using	 the	 back- slash	character.	Also,	when	scripting	with	JavaScript,	you	should	know	some	other	 important	guidelines.  insert Special Characters  The	backslash	 \ 	is	used	to	insert	apostrophes,	new	lines,	quotes,	and	other	special	 characters	into	a	text	string.  Look	at	the	following	JavaScript	code:  var txt="We are the so-called "Vikings" from the north.";  document.write txt ;  In	JavaScript,	a	string	is	started	and	stopped	with	either	single	or	double	quotes.	 This	means	that	the	preceding	string	will	be	chopped	to	We are the so-called.  To	solve	this	problem,	you	must	place	a	backslash	 \ 	before	each	double	quote	in	 “Viking”.	This	turns	each	double	quote	into	a	string	literal:  var txt="We are the so-called \"Vikings\" from the north.";  document.write txt ;  73                learn JavaScript and ajax with w3schools  JavaScript	will	now	output	the	proper	text	string:	We are the so-called “Vikings” from  the north.  Here	is	another	example:  document.write  "You \& I are singing!" ;  The	previous	example	will	produce	the	following	output:  You & I are singing!  The	following	table	lists	other	special	characters	that	can	be	added	to	a	text	string	 with	the	backslash	sign:  Outputs single quote double quote ampersand backslash new line carriage return tab backspace form feed  JavaScript is Case Sensitive  A	 function	 named	 myfunction	 is	 not	 the	 same	 as	 myFunction	 and	 a	 variable	 named	myVar	is	not	the	same	as	myvar.  JavaScript	is	case	sensitive;	therefore,	watch	your	capitalization	closely	when	you	 create	or	call	variables,	objects,	and	functions.  White Space  name="Hege";  name = "Hege";  JavaScript	ignores	extra	spaces.	You	can	add	white	space	to	your	script	to	make	it	 more	readable.	The	following	lines	are	equivalent:  Break up a Code line  Text	in	code	statements	contained	within	quotes	is	called	a	string literal.	A	string	 literal	may	not	be	broken	across	lines	except	by	inserting	the	backslash	character	 \ 	 at	the	point	where	you	want	to	break	the	string:  document.write "Hello \  World!" ;  Code \’ \” \& \\ \n \r \t \b \f  74                Chapter 13: JavaScript Special Characters and Guidelines  The	following	will	generate	an	“unterminated	string	literal”	script	error:  document.write "Hello   World!" ;  document.write "Hello "+  "World!" ;  Another	option	is	to	use	the	concatenate	operator	 + 	to	break	the	string:  Code	statements	may	be	broken	across	lines,	but	the	backslash	character	must	not	 be	used	in	this	case.  The	following	is	legal	JavaScript:  document.write   "Hello "  +   ;  World!"  As	a	rule,	break	code	statements	or	string	literals	across	lines	only	when	the	length	 of	the	line	or	literal	makes	it	difficult	to	read.  You	can	break	up	a	code	line	within a text string	with	a	backslash.	The	following	 example	will	be	displayed	properly:  document.write "Hello \  World!" ;  However,	you	cannot	break	up	a	code	line	like	this:  document.write \   "Hello World!" ;       75                         Section II JavaScript   Objects     Chapter 14: JavaScript Objects Intro   	 Chapter 15: JavaScript String Object   	 Chapter 16: JavaScript Date Object   	 Chapter 17: JavaScript Array Object   	  	Chapter 18: JavaScript Boolean  Object   	 Chapter 19: JavaScript Math Object   	  	Chapter 20: JavaScript RegExp  Objects  77                              ChAptER 14  JAvASCRIpt  OBJECtS IntRO  In this Chapter  	  	 Object-Oriented	Programming  	  	 Properties  	  	 Methods  JavaScript	as	a	programming	language	has	strong	object-oriented	capabilities.	An	 Object-Oriented	 OOL 	language	enables	you	to	model	data	using	objects	consist- ing	of	properties	and	methods	that	operate	on	those	properties.  Object-Oriented programming  Creating	your	own	objects	is	explained	later	in	the	section	“Advanced	JavaScript.”	 We	start	by	looking	at	the	built-in	JavaScript	objects	and	how	they	are	used.	The	 next	pages	explain	each	built-in	JavaScript	object	in	detail.  Note	 that	 an	 object	 is	 just	 a	 special	 kind	 of	 data.	 An	 object	 has	 properties	 and	 methods.  properties  Properties	are	the	values	associated	with	an	object.  In	the	following	example,	we	use	the	length	property	of	the	String	object	to	return	 the	number	of	characters	in	a	string:     var txt="Hello World!";  document.write txt.length ;      continued   79                Learn JavaScript and Ajax with w3schools  The	output	of	the	previous	code	will	be   continued   12  Methods     var str="Hello world!";  document.write str.toUpperCase   ;     The	output	of	the	previous	code	will	be  HELLO WORLD!  Methods	are	the	actions	that	can	be	performed	on	objects.  In	the	following	example,	we	use	the	toUpperCase  	method	of	the	String	object	 to	display	a	text	in	uppercase	letters:  80                Chapter 15  JavaSCript String  ObJeCt  in this Chapter  	  	 String	Object  	  	 Examples  String Object  The	String	object	is	used	to	manipulate	a	stored	piece	of	text.  The	following	example	uses	the	length	property	of	the	String	object	to	find	the	 length	of	a	string:  var txt="Hello world!";  document.write txt.length ;  The	preceding	code	will	result	in	the	following	output:  12  The	following	example	uses	the	toUpperCase  	method	of	the	String	object	to	 convert	a	string	to	uppercase	letters:  var txt="Hello world!";  document.write txt.toUpperCase   ;  The	preceding	code	will	result	in	the	following	output:  HELLO WORLD!  81                Learn JavaScript and ajax with w3schools  examples  The	following	example	shows	how	to	return	the	length	of	a	string.	Your	results	are	 shown	in	Figure	15.1.  Try it yourself >>           var txt = "Hello World!";  document.write txt.length ;           Figure 15.1  Try it yourself >>           var txt = "Hello World!";  The	following	example	demonstrates	how	to	use	the	methods	of	the	String	object	 to	style	strings.	Your	results	are	shown	in	Figure	15.2.  82                Chapter 15: JavaScript String Object  document.write " Big: " + txt.big   + " " ;  document.write " Small: " + txt.small   + " " ;  document.write " Bold: " + txt.bold   + " " ;  document.write " Italic: " + txt.italics   + " " ;  document.write " Fixed: " + txt.fixed   + " " ;  document.write " Strike: " + txt.strike   + " " ;  document.write " Fontcolor: " + txt.fontcolor "green"  +   " " ;  document.write " Fontsize: " + txt.fontsize 6  + " " ;  document.write " Subscript: " + txt.sub   + " " ;  document.write " Superscript: " + txt.sup   + " " ;  document.write " Link: " + txt.link "http:  www.w3schools.  com"  + " " ;  document.write " Blink: " + txt.blink   + "  does not work   in IE, Chrome, or Safari  " ;                83           Learn JavaScript and ajax with w3schools  The	following	example	demonstrates	conversion	of	a	string	to	lowercase	or	upper- case.	Your	results	are	shown	in	Figure	15.3.  Figure 15.2  Try it yourself >>           var txt="Hello World!";  document.write txt.toLowerCase   + " " ;  document.write txt.toUpperCase   ;     84                Chapter 15: JavaScript String Object  Your	results	are	shown	in	Figure	15.3.        Figure 15.3  The	following	example	demonstrates	how	to	search	for	a	specified	value	within	a	 string.	Your	results	are	shown	in	Figure	15.4.  Try it yourself >>           var str="Hello world!";  document.write str.match "world"  + " " ;  document.write str.match "World"  + " " ;  document.write str.match "worlld"  + " " ;  document.write str.match "world!"  ;           Figure 15.4       The	following	example	shows	how	to	replace	a	specified	value	with	another	value	in	 a	string.	Your	results	are	shown	in	Figure	15.5.  85           Learn JavaScript and ajax with w3schools  Try it yourself >>           var str="Visit Microsoft!";  document.write str.replace "Microsoft","w3schools"  ;  The	following	example	demonstrates	how	to	find	the	position	of	the	first	occur- rence	of	a	specified	value	in	a	string.	Your	results	are	shown	in	Figure	15.6.     var str="Hello world!";  document.write str.indexOf "Hello"  + " " ;  document.write str.indexOf "WORLD"  + " " ;  document.write str.indexOf "world"  ;           Figure 15.5  Try it yourself >>                 86                Chapter 15: JavaScript String Object  Figure 15.6  	For	a	complete	reference	of	all	the	properties	and	methods	that	can	be	used	 with	the	String	object,	go	to	the	String	object	reference	in	Appendix	A.  The	reference	contains	a	brief	description	and	usage	examples	for	each	property	 and	method!       87           Chapter 16  JavaSCript Date  ObJeCt  in this Chapter 	  	 Create	a	Date	Object  	  	 Set	Dates  	  	 Compare	Two	Dates  	  	 Examples  The	Date	object	is	used	to	work	with	dates	and	times.  Create a Date Object  The	Date	object	is	used	to	work	with	dates	and	times.  Date	objects	are	created	with	the	Date   constructor.  There	are	four	ways	of	instantiating	a	date:  new Date      current date and time  new Date milliseconds    milliseconds since 1970 01 01  new Date dateString   seconds   new Date year, month, day, hours, minutes, seconds, milli-  Most	of	the	preceding	parameters	are	optional.	  When	a	parameter	is	not	specified,	0	is	passed	to	the	method	by	default.  After	a	Date	object	is	created,	a	number	of	methods	enable	you	to	operate	on	it.	 Most	methods	allow	you	to	get	and	set	the	year,	month,	day,	hour,	minute,	second,	 and	millisecond	of	the	object,	using	either	local	time	or	UTC	 universal,	or	GMT 	 time.  88                Chapter 16: JavaScript Date Object  All	dates	are	calculated	in	milliseconds	from	01	January,	1970	00:00:00	Universal	 Time	 UTC 	with	a	day	containing	86,400,000	milliseconds.  Some	examples	of	instantiating	a	date:  today = new Date    d1 = new Date “October 13, 1975 11:13:00”   d2 = new Date 79,5,24   d3 = new Date 79,5,24,11,33,0   For	a	complete	reference	of	all	the	properties	and	methods	that	can	be	used	  with	the	Date	object,	go	to	the	complete	Date	object	reference	in	Appendix	A.  The	reference	contains	a	brief	description	and	examples	of	use	for	each	property	 and	method!  Set Dates  We	 can	 easily	 manipulate	 the	 date	 by	 using	 the	 methods	 available	 for	 the	 Date	 object.  In	 the	 following	 example,	 we	 set	 a	 Date	 object	 to	 a	 specific	 date	  14th	 January	 2010 :  var myDate=new Date  ;  myDate.setFullYear 2010,0,14 ;  And	in	the	following	example,	we	set	a	Date	object	to	be	five	days	into	the	future:  var myDate=new Date  ;  myDate.setDate myDate.getDate  +5 ;  N O t e dled automatically by the Date object itself!  If adding five days to a date shifts the month or year, the changes are han-  Compare two Dates  The	Date	object	is	also	used	to	compare	two	dates.  The	following	example	compares	today’s	date	with	the	14th	January	2010:  var myDate=new Date  ;  myDate.setFullYear 2010,0,14 ;  var today = new Date  ;  if  myDate>today     {   continued  89                Learn JavaScript and ajax with w3schools    alert “Today is before 14th January 2010” ;    alert “Today is after 14th January 2010” ;   continued     }  else    {    }  examples  The	following	example	demonstrates	how	to	use	the	Date   method	to	get	today’s	 date.	Your	results	are	shown	in	Figure	16.1.  Try it yourself >>           var d=new Date  ;  document.write d ;           Figure 16.1  Your	results	are	shown	in	Figure	16.2.  Try it yourself >>        90  The	following	example	demonstrates	how	to	use	getTime  	to	calculate	the	mil- liseconds	since	1970.                Chapter 16: JavaScript Date Object     var d=new Date  ;  document.write d.getTime   + “ milliseconds since   1970 01 01” ;     The	following	example	shows	how	to	use	setFullYear   to	set	a	specific	date.  Your	results	are	shown	in	Figure	16.3.  Try it yourself >>           var d = new Date  ;  d.setFullYear 1992,11,3 ;  document.write d ;  The	 following	 example	 demonstrates	 how	 to	 use	 toUTCString  	 to	 convert	 today’s	date	 according	to	UTC 	to	a	string.  Your	results	are	shown	in	Figure	16.4.  91                Figure 16.2           Figure 16.3        Learn JavaScript and ajax with w3schools  Try it yourself >>           var d=new Date  ;  document.write “Original form: “ ;  document.write d + “ ” ;  document.write “To string  universal time : “ ;  document.write d.toUTCString   ;           Figure 16.4  The	getDay  	method	returns	the	day	of	the	week	as	a	number,	with	Sunday =  0.	The	following	example	demonstrates	how	to	use	 getDay    and	an	array	to	 display	the	day	of	the	week	as	a	text	string	rather	than	a	number	as	shown	in	Figure	 16.5.  Try it yourself >>           var d=new Date  ;  var weekday=new Array 7 ;  weekday[0]=”Sunday”;  weekday[1]=”Monday”;  weekday[2]=”Tuesday”;  92                Chapter 16: JavaScript Date Object  weekday[3]=”Wednesday”;  weekday[4]=”Thursday”;  weekday[5]=”Friday”;  weekday[6]=”Saturday”;  document.write “Today is “ + weekday[d.getDay  ] ;           Figure 16.5  The	following	example	demonstrates	how	to	display	a	clock	on	your	Web	page.  Your	results	are	shown	in	Figure	16.6.  Try it yourself >>           function startTime    var today=new Date  ;  var h=today.getHours  ;  var m=today.getMinutes  ;  var s=today.getSeconds  ;     add a zero in front of numbers<10  m=checkTime m ;  s=checkTime s ;  function checkTime i   if  i<10   {  }  {  document.getElementById ‘txt’ .innerHTML=h+”:”+m+”:”+s;  t=setTimeout ‘startTime  ’,500 ;   continued  93                Learn JavaScript and ajax with w3schools   continued    {    i=”0” + i;    }  }  return i;                     Figure 16.6  94                Chapter 17  JavaSCript array  ObJeCt  in this Chapter  	  	 What	Is	an	Array?  	  	 Create	an	Array  	  	 Access	an	Array  	  	 Modify	Values	in	an	Array  	  	 Examples  The	Array	object	is	used	to	store	multiple	values	in	a	single	variable.  What is an array?  An	array	is	a	special	variable	that	can	hold	more	than	one	value	at	a	time.  If	you	have	a	list	of	items	 a	list	of	car	names,	for	example ,	storing	the	cars	in	single	 variables	could	look	like	this:  cars1="Saab";  cars2="Volvo";  cars3="BMW";  However,	what	if	you	want	to	loop	through	the	cars	and	find	a	specific	one?	And	 what	if	you	had	not	three	cars,	but	300?  The	best	solution	here	is	to	use	an	array.	An	array	can	hold	all	your	variable	values	 under	a	single	name.	And	you	can	access	the	values	by	referring	to	the	array	name.  Each	element	in	the	array	has	its	own	ID	so	that	it	can	be	easily	accessed.  95                Learn JavaScript and ajax with w3schools  Create an array  An	array	can	be	defined	in	three	ways.	  The	following	code	creates	an	Array	object	called	myCars:  var myCars=new Array  ;          create a new array with no elements         new Array n ; will create a new array of length n  myCars[0]="Saab";   myCars[1]="Volvo";  myCars[2]="BMW";  var myCars=new Array "Saab","Volvo","BMW" ;      create a new array with the specified elements  	  1.	  	  	  2.	  3.	  var myCars=["Saab","Volvo","BMW"];    examples 2 & 3 are functionally equivalent  N O t e able type will be Number or Boolean, instead of String.  If you specify numbers or true false values inside the array then the vari-  access an array  You	can	refer	to	a	particular	element	in	an	array	by	referring	to	the	name	of	the	array	 and	the	index	number.	The	index	number	starts	at	0.  The	following	code	line  document.write myCars[0] ;  results	in	the	following	output:  Saab  Modify values in an array  To	modify	a	value	in	an	existing	array,	just	specify	a	new	value	for	the	element	at	 the	given	index.  myCars[0]="Opel";     overwrite the current value of    myCars[0]  96                Chapter 17: JavaScript array Object  Now,	the	following	code	line:  document.write myCars[0] ;  results	in	the	following	output:  Opel  examples  The	following	example	demonstrates	how	to	create	an	array,	assign	values	to	it,	and	 write	the	values	to	the	output.  Your	results	are	shown	in	Figure	17.1.  Try it yourself >>           var mycars = new Array  ;  mycars[0] = "Saab";  mycars[1] = "Volvo";  mycars[2] = "BMW";  for  i=0;i<mycars.length;i++   document.write mycars[i] + " " ;  {  }           Figure 17.1       97           Learn JavaScript and ajax with w3schools  The	following	example	demonstrates	how	to	use	a	 for...in	statement	to	loop	 through	the	elements	of	an	array.  Your	results	are	shown	in	Figure	17.2.  Try it yourself >>        var x;     var mycars = new Array  ;  mycars[0] = "Saab";  mycars[1] = "Volvo";  mycars[2] = "BMW";  for  x in mycars   document.write mycars[x] + " " ;  {  }           Figure 17.2        98       The	following	example	demonstrates	how	to	join	two	arrays.	Your	results	are	shown	 in	Figure	17.3     var parents = ["Jani", "Tove"];  var children = ["Cecilie", "Lone"];  var family = parents.concat children ;  document.write family ;           Chapter 17: JavaScript array Object  The	 following	 example	 demonstrates	 how	 to	 join	 three	 arrays.	 Your	 results	 are	 shown	in	Figure	17.4     var parents = ["Jani", "Tove"];  var brothers = ["Stale", "Kai Jim", "Borge"];  var children = ["Cecilie", "Lone"];  var family = parents.concat brothers, children ;  document.write family ;           Figure 17.3                 Figure 17.4        The	following	example	shows	you	how	to	join	all	elements	of	an	array	into	a	string.	 Your	results	are	shown	in	Figure	17.5.     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.join   + " " ;  document.write fruits.join "+"  + " " ;   continued  99                Learn JavaScript and ajax with w3schools   continued   document.write fruits.join " and "  ;  The	following	example	demonstrates	how	to	remove	the	last	element	of	an	array,	 and	Figure	17.6	shows	your	results.     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.pop   + " " ;  document.write fruits + " " ;  document.write fruits.pop   + " " ;  document.write fruits ;           Figure 17.5                 Figure 17.6        100       The	following	example	demonstrates	how	to	add	new	elements	to	the	end	of	an	 array.	Your	results	are	shown	in	Figure	17.7.           Chapter 17: JavaScript array Object     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.push "Kiwi"  + " " ;  document.write fruits.push "Lemon","Pineapple"  + " " ;  document.write fruits ;           Figure 17.7                 Figure 17.8        In	the	following	example,	you	see	how	to	reverse	the	order	of	the	elements	in	an	 array.	Your	results	are	shown	in	Figure	17.8.     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.reverse   ;  The	following	example	demonstrates	how	to	remove	the	first	element	of	an	array.	 Your	results	are	shown	in	Figure	17.9.      continued  101                Learn JavaScript and ajax with w3schools   continued   var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.shift   + " " ;  document.write fruits + " " ;  document.write fruits.shift   + " " ;  document.write fruits ;  The	following	example	demonstrates	how	to	use	slice  	to	select	elements	from	 an	array.	Your	results	are	shown	in	Figure	17.10.     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.slice 0,1  + " " ;  document.write fruits.slice 1  + " " ;  document.write fruits.slice -2  + " " ;  document.write fruits ;           Figure 17.9                 Figure 17.10  102                Chapter 17: JavaScript array Object  The	following	three	examples	demonstrate	how	to	use	sort  .	The	first	sort  	 example	shows	how	to	sort	alphabetically	and	ascending.	Your	results	are	shown	in	 Figure	17.11.     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.sort   ;  The	next	sort  	example	demonstrates	how	to	sort	numerically	and	ascending.	 Your	results	are	shown	in	Figure	17.12.     function sortNumber a, b   {  }  return a - b;  var n = ["10", "5", "40", "25", "100", "1"];  document.write n.sort sortNumber  ;                 Figure 17.11                 Figure 17.12       103           Learn JavaScript and ajax with w3schools  The	third	sort  	example	demonstrates	how	to	sort	numerically	and	descending.	 Your	results	are	shown	in	Figure	17.13.           function sortNumber a, b   {  }  return b - a;  var n = ["10", "5", "40", "25", "100", "1"];  document.write n.sort sortNumber  ;  The	following	example	demonstrates	how	to	use	splice  	to	add	an	element	to	 the	second	position	in	an	array.	Your	results	are	shown	in	Figure	17.14.     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write "Removed: " + fruits.splice 2,0,"Lemon"  +   " " ;  document.write fruits ;           Figure 17.13                 104                Chapter 17: JavaScript array Object  The	following	example	shows	you	how	to	convert	an	array	to	a	string.	Your	results	 are	shown	in	Figure	17.15.     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.toString   ;  Figure 17.14                 Figure 17.15        The	following	example	shows	you	how	to	add	new	elements	to	the	beginning	of	an	 array.	Figure	17.16	shows	your	results.     var fruits = ["Banana", "Orange", "Apple", "Mango"];  document.write fruits.unshift "Kiwi"  + " " ;  document.write fruits.unshift "Lemon","Pineapple"  + "<br    >" ;  document.write fruits ;       Note:  The unshift   method does not work properly   in Internet Explorer, it only returns undefined!    continued   105                Learn JavaScript and ajax with w3schools   continued         Figure 17.16  Figure 17.17  N O t e only returns undefined, as shown in Figure 17.17.  The  unshift    method  does  not  work  properly  in  Internet  Explorer,  it   	You	can	follow	these	examples	on	the	w3Schools	Web	site.  	For	a	complete	reference	of	all	the	properties	and	methods	that	can	be	used	  with	the	Array	object,	go	to	the	complete	Array	object	reference	in	Appendix	A.  106                Chapter 18  JavaSCript   Boolean oBJeCt  in this Chapter 	  	 Create	a	Boolean	Object  	  	 Examples  The	 Boolean	 object	 is	 used	 to	 convert	 a	 non-Boolean	 value	 to	 a	 Boolean	 value	  either	true	or	false .  Create a Boolean object  The	Boolean	object	represents	two	values:	true	or	false.  The	following	code	creates	a	Boolean	object	called	myBoolean:  var myBoolean=new Boolean  ;  n o t e If the Boolean object has no initial value or if it is 0, -0, null, “”, false, unde- fined, or NaN, the object is set to false. Otherwise, it is true  even with the string “false” !  All	the	following	lines	of	code	create	Boolean	objects	with	an	initial	value	of	false:  var myBoolean=new Boolean  ;  var myBoolean=new Boolean 0 ;  var myBoolean=new Boolean null ;  var myBoolean=new Boolean "" ;  var myBoolean=new Boolean false ;  var myBoolean=new Boolean NaN ;  107                learn JavaScript and ajax with w3schools  And	all	the	following	lines	of	code	create	Boolean	objects	with	an	initial	value	of	 true:  var myBoolean=new Boolean true ;  var myBoolean=new Boolean "true" ;  var myBoolean=new Boolean "false" ;  var myBoolean=new Boolean "Richard" ;  	 For	 a	 complete	 reference	 of	 all	 the	 properties	 and	 methods	 that	 can	 be	 used	 with	 the	 Boolean	 object,	 go	 to	 the	 complete	 Boolean	 object	 reference	 in	 Appendix	A.  examples  The	following	example	demonstrates	how	to	check	whether	a	Boolean	object	is	true	 or	false.	Your	result	is	shown	in	Figure	18.1.  Try it yourself >>           var b1=new Boolean 0 ;  var b2=new Boolean 1 ;  var b3=new Boolean “” ;  var b4=new Boolean null ;  var b5=new Boolean NaN ;  var b6=new Boolean “false” ;  document.write “0 is boolean “+ b1 +” ” ;  document.write “1 is boolean “+ b2 +” ” ;  document.write “An empty string is boolean “+ b3 + “<br   document.write “null is boolean “+ b4+ “ ” ;  document.write “NaN is boolean “+ b5 +” ” ;  document.write “The string ‘false’ is boolean “+ b6 +”<br    >” ;   >” ;           108                Chapter 18: JavaScript Boolean object  Figure 18.1       109           Chapter 19  JavaSCript Math  ObJeCt  in this Chapter  	  	 Math	Object  	  	 Mathematical	Constants  	  	 Mathematical	Methods  	  	 Examples  Math Object  The	Math	object	allows	you	to	perform	mathematical	tasks.  The	Math	object	allows	you	to	perform	mathematical	tasks.  The	Math	object	includes	several	mathematical	constants	and	methods.  The	syntax	for	using	properties methods	of	Math	is	as	follows:  var pi_value=Math.PI;  var sqrt_value=Math.sqrt 16 ;  N O t e The Math object is provided by JavaScript and does not need to be created  by the programmer. In fact, trying to create a Math object using new   will result in a  JavaScript error.  Mathematical Constants  JavaScript	 provides	 eight	 mathematical	 constants	 that	 can	 be	 accessed	 from	 the	 Math	object.	These	are	E,	PI,	square	root	of	2,	square	root	of	1 2,	natural	log	of	2,	 natural	log	of	10,	base-2	log	of	E,	and	base-10	log	of	E.  You	may	reference	these	constants	from	your	JavaScript	like	this:  110                Chapter 19: JavaScript Math Object  Math.E  Math.PI  Math.SQRT2  Math.SQRT1_2  Math.LN2  Math.LN10  Math.LOG2E  Math.LOG10E  Mathematical Methods  In	 addition	 to	 the	 mathematical	 constants	 that	 can	 be	 accessed	 from	 the	 Math	 object,	several	methods	also	are	available.  The	following	example	uses	the	round  	method	of	the	Math	object	to	round	a	 number	to	the	nearest	integer:  document.write Math.round 4.7  ;  The	preceding	code	results	in	the	following	output:  The	following	example	uses	the	random  	method	of	the	Math	object	to	return	a	 random	number	between	0	and	1:  document.write Math.random   ;  The	preceding	code	can	result	in	the	following	output:  0.07730209357983464  The	 following	 example	 uses	 the	 floor  	 and	 random  	 methods	 of	 the	 Math	 object	to	return	a	random	number	between	0	and	10:  document.write Math.floor Math.random  *11  ;  The	preceding	code	can	result	in	the	following	output:  	For	a	complete	reference	of	all	the	properties	and	methods	that	can	be	used	  with	the	Math	object,	go	to	the	complete	Math	object	reference	in	Appendix	A.  5  1       111           Learn JavaScript and ajax with w3schools  examples  The	following	example	demonstrates	how	to	use	round  .	Your	results	are	shown	 in	Figure	19.1.  Try it yourself >>           document.write Math.round 0.60  + “ ” ;  document.write Math.round 0.50  + “ ” ;  document.write Math.round 0.49  + “ ” ;  document.write Math.round -4.40  + “ ” ;  document.write Math.round -4.60  ;           Figure 19.1  112       The	following	example	demonstrates	how	to	use	random    to	return	a	random	 number	between	0	and	1	as	shown	in	Figure	19.2.  Try it yourself >>             return a random number between 0 and 1           Chapter 19: JavaScript Math Object  document.write Math.random   + “ ” ;    return a random integer between 0 and 10  document.write Math.floor Math.random  *11  ;  The	following	example	demonstrates	how	to	use	max  	to	return	the	largest	of	the	 specified	values.	Your	results	are	shown	in	Figure	19.3.     document.write Math.max 5,10  + “ ” ;  document.write Math.max 0,150,30,20,38  + “ ” ;  document.write Math.max -5,10  + “ ” ;  document.write Math.max -5,-10  + “ ” ;  document.write Math.max 1.5,2.5  ;           Figure 19.2  Try it yourself >>                 Figure 19.3       113           Learn JavaScript and ajax with w3schools  The	following	example	shows	how	to	use	min  	to	return	the	smallest	of	the	speci- fied	values.	Your	results	are	shown	in	Figure	19.4.  Try it yourself >>           document.write Math.min 5,10  + “ ” ;  document.write Math.min 0,150,30,20,38  + “ ” ;  document.write Math.min -5,10  + “ ” ;  document.write Math.min -5,-10  + “ ” ;  document.write Math.min 1.5,2.5  ;           Figure 19.4  114                Chapter 20  JavaSCript regexp  ObJeCt  in this Chapter  	  	 What	Is	RegExp?  	  	 RegExp	Modifiers  	  	 test    	  	 exec    RegExp	is	short	for	regular	expression.  What is regexp?  A	regular	expression	is	an	object	that	describes	a	pattern	of	characters.	When	you	 search	in	a	text,	you	can	use	a	pattern	to	describe	what	you	are	searching	for.  A	simple	pattern	can	be	a	single	character.	A	more	complicated	pattern	can	consist	 of	more	characters	and	can	be	used	for	parsing,	format	checking,	substitution,	and	 more.  Regular	 expressions	 are	 used	 to	 perform	 powerful	 pattern-matching	 and	 search- and-replace	functions	on	text.  The	syntax	is	as	follows:	  var txt=new RegExp pattern,modifiers ;  or	more	simply:  var txt= pattern modifiers;  115                Learn JavaScript and ajax with w3schools  The	syntax	follows	a	couple	of	general	guidelines:  	8	 The	pattern	specifies	the	pattern	of	an	expression.  	8	 The	modifiers	specify	whether	a	search	should	be	global,	case-sensitive,	and	so	  on.  regexp Modifiers  Modifiers	are	used	to	perform	case-insensitive	and	global	searches.  The	i	modifier	is	used	to	perform	case-insensitive	matching.  The	g	modifier	is	used	to	perform	a	global	match	 find	all	matches	rather	than	stop- ping	after	the	first	match .  The	 following	 example	 demonstrates	 how	 to	 do	 a	 case-insensitive	 search	 for	 “w3schools”	in	a	string:  var str="Visit W3Schools";  var patt1= w3schools i;  Your	results	are	shown	in	Figure	20.1.  Try it yourself >>           var str = "Visit W3Schools";  var patt1 =  w3schools i;  document.write str.match patt1  ;           Figure 20.1  116                Chapter 20: JavaScript regexp Object  The	following	example	demonstrates	how	to	do	a	global	search	for	“is”:  var str="Is this all there is?";  var patt1= is g;  Your	results	are	shown	in	Figure	20.2.  Try it yourself >>           var str="Is this all there is?";  var patt1= is g;  document.write str.match patt1  ;           Figure 20.2  var str="Is this all there is?";  var patt1= is gi;  Your	results	are	shown	in	Figure	20.3.  Try it yourself >>        The	following	example	demonstrates	how	to	do	a	global,	case-insensitive	search	for	 “is”:   continued   117                Learn JavaScript and ajax with w3schools   continued      var str="Is this all there is?";  var patt1= is gi;  document.write str.match patt1  ;           Figure 20.3  test    free"  ;  true  118       The	test  	method	searches	a	string	for	a	specified	value	and	returns	true	or	false,	 depending	on	the	result.  The	following	example	searches	a	string	for	the	character	“e”:  var patt1=new RegExp "e" ;  document.write patt1.test "The best things in life are   Because	there	is	an	“e”	in	the	string,	the	output	of	the	preceding	code	is	as	follows:  Your	results	are	shown	in	Figure	20.4.  Try it yourself >>           var patt1=new RegExp "e" ;           Chapter 20: JavaScript regexp Object  document.write patt1.test "The best things in life are   free"  ;           Figure 20.4  exec    free"  ;  e  free"  ;                The	exec  	method	searches	a	string	for	a	specified	value	and	returns	the	text	of	 the	found	value.	If	no	match	is	found,	it	returns	null.  The	following	example	searches	a	string	for	the	character	“e”:  var patt1=new RegExp "e" ;  document.write patt1.exec "The best things in life are   Because	there	is	an	“e”	in	the	string,	the	output	of	the	preceding	code	is:  Your	results	are	shown	in	Figure	20.5.  Try it yourself >>           var patt1=new RegExp "e" ;  document.write patt1.exec "The best things in life are   119           Learn JavaScript and ajax with w3schools  Figure 20.5  	For	a	complete	reference	of	all	the	properties	and	methods	that	can	be	used	 with	the	RegExp	object,	go	to	the	complete	RegExp	object	reference	in	Appendix	A.  120                Section III JavaScript  Advanced       Chapter 21: JavaScript Browser  Detection     Chapter 22: JavaScript Cookies       Chapter 23: JavaScript Form  Validation     Chapter 24: JavaScript Animation     Chapter 25: JavaScript Image Maps   Chapter 26: JavaScript Timing  Events   Chapter 27: Create Your Own  Objects with JavaScript               121                         ChApTEr 21  JAVASCrIpT  BrOwSEr   DETECTIOn  In This Chapter  	  	 Browser	Detection  	  	 The	Navigator	Object  The	Navigator	object	contains	information	about	the	visitor’s	browser.  Browser Detection  Almost	everything	in	this	tutorial	works	on	all	JavaScript-enabled	browsers.	How- ever,	some	things	just	don’t	work	on	certain	browsers—especially	on	older	browsers.  So,	sometimes	it	can	be	very	useful	to	detect	the	visitor’s	browser	and	then	serve	up	 the	appropriate	information.  The	best	way	to	do	this	is	to	make	your	Web	pages	smart	enough	to	look	one	way	 to	some	browsers	and	another	way	to	other	browsers.	The	Navigator	object	can	be	 used	for	this	purpose.  The	 Navigator	 object	 contains	 information	 about	 the	 visitor’s	 browser	 name,		 version,	and	more.  n O T E support it.  No public standard applies to the Navigator object, but all major browsers   123                Learn JavaScript and Ajax with w3schools  The navigator Object  The	Navigator	object	contains	all	information	about	the	visitor’s	browser.	We	are	 going	to	look	at	two	properties	of	the	Navigator	object:  	8	 appName—holds	the	name	of	the	browser  	8	 appVersion—holds,	among	other	things,	the	version	of	the	browser  Your	results	are	shown	in	Figure	21.1.  Try it yourself >>           var browser=navigator.appName;  var b_version=navigator.appVersion;  var version=parseFloat b_version ;  document.write "Browser name: "+ browser ;  document.write " " ;  document.write "Browser version: "+ version ;           Figure 21.1  The	variable	“browser”	in	the	preceding	example	holds	the	name	of	the	browser,	 that	is,	“Netscape”	or	“Microsoft	Internet	Explorer.”  The	appVersion	property	in	the	preceding	example	returns	a	string	that	contains	 much	more	information	than	just	the	version	number,	but	for	now	we	are	only	 interested	in	the	version	number.	To	pull	the	version	number	out	of	the	string,	we	 are	using	a	function	called	parseFloat  ,	which	pulls	the	first	thing	that	looks	 like	a	decimal	number	out	of	a	string	and	returns	it.  T I p To find the version number in IE 5.0 and later, you will have to dig a little deeper  into either the appVersion or userAgent property. The IE version will be in the form  “MSIE x.x” so use a regular expression such as  MSIE \d\.\d; .exec navigator. userAgent to return a string containing the specific IE version.  124                Chapter 21: JavaScript Browser Detection  The	following	example	displays	a	different	alert,	depending	on	the	visitor’s	browser.  The	alert	box	is	shown	in	Figure	21.2.  Try it yourself >>        {     function detectBrowser    var browser=navigator.appName;  var b_version=navigator.appVersion;  var version=parseFloat b_version ;  if   browser=="Netscape"browser=="Microsoft Internet Ex-  plorer"  &&  version>=4      alert "Your browser is good enough!" ;    alert "It's time to upgrade your browser!" ;       {    }  else    {    }  }              Figure 21.2       125           Learn JavaScript and Ajax with w3schools  The	following	example	provides	more	rules	about	the	visitor’s	browser.  Your	results	are	shown	in	Figure	21.3.  Try it yourself >>           document.write " Browser: " ;  document.write navigator.appName + " " ;  document.write " Browserversion: " ;  document.write navigator.appVersion + " " ;  document.write " Code: " ;  document.write navigator.appCodeName + " " ;  document.write " Platform: " ;  document.write navigator.platform + " " ;  document.write " Cookies enabled: " ;  document.write navigator.cookieEnabled + " " ;  document.write " Browser's user agent header: " ;  document.write navigator.userAgent + " " ;           Figure 21.3  126                Chapter 21: JavaScript Browser Detection  The	following	example	provides	ALL	the	details	about	the	visitor’s	browser.	Your	 results	are	shown	in	Figure	21.4.  Try it yourself >>           var x = navigator;  document.write "CodeName=" + x.appCodeName ;  document.write " " ;  document.write "MinorVersion=" + x.appMinorVersion ;  document.write " " ;  document.write "Name=" + x.appName ;  document.write " " ;  document.write "Version=" + x.appVersion ;  document.write " " ;  document.write "CookieEnabled=" + x.cookieEnabled ;  document.write " " ;  document.write "CPUClass=" + x.cpuClass ;  document.write " " ;  document.write "OnLine=" + x.onLine ;  document.write " " ;  document.write "Platform=" + x.platform ;  document.write " " ;  document.write "UA=" + x.userAgent ;  document.write " " ;  document.write "BrowserLanguage=" + x.browserLanguage ;  document.write " " ;  document.write "SystemLanguage=" + x.systemLanguage ;  document.write " " ;  document.write "UserLanguage=" + x.userLanguage ;                127           Learn JavaScript and Ajax with w3schools  Figure 21.4  128                Chapter 22  JavaSCript   CookieS  in this Chapter  	  	 What	Is	a	Cookie?  	  	 Create	and	Store	a	Cookie  A	cookie	is	often	used	to	identify	a	user.  What is a Cookie?  A	cookie	is	a	variable	that	is	stored	on	the	visitor’s	computer.	Each	time	the	same	 computer	requests	a	page	with	a	browser,	it	sends	the	cookie,	too.	With	JavaScript,	 you	can	both	create	and	retrieve	cookie	values.  Examples	of	cookies:  	8	 Name cookie.	The	first	time	a	visitor	arrives	on	your	Web	page,	she	must	fill	 in	her	name.	The	name	then	is	stored	in	a	cookie.	Next	time	the	visitor	arrives	 at	your	page,	she	could	get	a	welcome	message	like	“Welcome	Jane	Doe!”	The	 name	is	retrieved	from	the	stored	cookie.  	8	 Password cookie. The	first	time	a	visitor	arrives	on	your	Web	page,	she	must	 fill	in	a	password.	The	password	then	is	stored	in	a	cookie.	Next	time	the	visitor	 arrives	at	your	page,	the	password	is	retrieved	from	the	cookie.  	8	 Date cookie. The	first	time	a	visitor	arrives	to	your	Web	page,	the	current	date	 is	stored	in	a	cookie.	Next	time	the	visitor	arrives	at	your	page,	she	could	get	 a	message	like	“Your	last	visit	was	on	Tuesday,	August	11,	2005!”	The	date	is	 retrieved	from	the	stored	cookie.  129                Learn JavaScript and ajax with w3schools  Create and Store a Cookie  {  }  {    {  In	this	example	we	create	a	cookie	that	stores	the	name	of	a	visitor.	The	first	time	 a	visitor	arrives	at	the	Web	page,	she	is	asked	to	fill	in	her	name.	The	name	then	 is	stored	in	a	cookie.	The	next	time	the	visitor	arrives	at	the	same	page,	she	sees	a	 welcome	message.  First,	we	create	a	function	that	stores	the	name	of	the	visitor	in	a	cookie	variable:  function setCookie c_name,value,expiredays   var exdate=new Date  ;  exdate.setDate exdate.getDate  +expiredays ;  document.cookie=c_name+ "=" +escape value +    expiredays==null  ? "" : ";expires="+exdate.toGMTString   ;  The	parameters	of	the	preceding	function	hold	the	name	of	the	cookie,	the	value	of	 the	cookie,	and	the	number	of	days	until	the	cookie	expires.  In	the	preceding	function,	we	first	convert	the	number	of	days	to	a	valid	date	and	 then	we	add	the	number	of	days	until	the	cookie	should	expire.	After	that,	we	store	 the	cookie	name,	cookie	value,	and	the	expiration	date	in	the	document.cookie	 object.  Then	we	create	another	function	that	checks	whether	the	cookie	has	been	set:  function getCookie c_name   if  document.cookie.length>0     c_start=document.cookie.indexOf c_name + "=" ;    if  c_start!=-1       {      c_start=c_start + c_name.length+1;      c_end=document.cookie.indexOf ";",c_start ;      if  c_end==-1  c_end=document.cookie.length;      return unescape document.cookie.substring c_start,c_  end  ;      }    }  }  return "";  130                Chapter 22: JavaScript Cookies  The	 preceding	 function	 first	 checks	 whether	 a	 cookie	 is	 stored	 at	 all	 in	 the		 document.cookie	object.	If	the	document.cookie	object	holds	some	cookies,	 then	check	to	see	whether	our	specific	cookie	is	stored.	If	our	cookie	is	found,	then	 return	the	value;	if	not,	return	an	empty	string.  Last,	we	create	the	function	that	displays	a	welcome	message	if	the	cookie	is	set,	and	 if	the	cookie	is	not	set,	it	displays	a	prompt	box	asking	for	the	name	of	the	user:  function checkCookie    username=getCookie 'username' ;  if  username!=null && username!=""     alert 'Welcome again '+username+'!' ;    username=prompt 'Please enter your name:',"" ;    if  username!=null && username!=""       setCookie 'username',username,365 ;  The	following	example	runs	the	checkCookie  	function	when	the	page	loads.  The	resulting	dialog	box	is	shown	in	Figure	22.1.  Try it yourself >>     function getCookie c_name   if  document.cookie.length>0     c_start=document.cookie.indexOf c_name + "=" ;    if  c_start!=-1       {       c_start=c_start + c_name.length+1 ;      c_end=document.cookie.indexOf ";",c_start ;      if  c_end==-1  c_end=document.cookie.length   continued  131  {    {    }  else    {      {      }    }  }        {    {                Learn JavaScript and ajax with w3schools   continued   end  ;      }     }  return ""      return unescape document.cookie.substring c_start,c_  function setCookie c_name,value,expiredays   var exdate=new Date  ;  exdate.setDate exdate.getDate  +expiredays ;  document.cookie=c_name+ "=" +escape value +  expiredays=   =null  ? "" : "; expires="+exdate.toGMTString   ;  }  {  }  {    {    }  else     {      {      }    }  }              function checkCookie    username=getCookie 'username' ;  if  username!=null && username!=""     alert 'Welcome again '+username+'!' ;    username=prompt 'Please enter your name:',"" ;    if  username!=null && username!=""       setCookie 'username',username,365 ;     132                Chapter 22: JavaScript Cookies  Figure 22.1       133           Chapter 23  JavaSCript Form  validation  in this Chapter  	  	 Required	Fields  	  	 E-mail	Validation  JavaScript	 can	 be	 used	 to	 validate	 data	 in	 HTML	 forms	 before	 sending	 off	 the	 content	to	a	server.  Form	data	that	typically	are	checked	by	a	JavaScript	could	be:  	8	 Has	the	user	left	required	fields	empty?  	8	 Has	the	user	entered	a	valid	e-mail	address?  	8	 Has	the	user	entered	a	valid	date?  	8	 Has	the	user	entered	text	in	a	numeric	field?  required Fields  The	following	function	checks	whether	a	required	field	has	been	left	empty.	If	the	 required	field	is	blank,	an	alert	is	displayed,	and	the	function	returns	false.	If	a	value	 is	entered,	the	function	returns	true	 means	that	data	is	OK :  function validate_required field,alerttxt   {    {  with  field       {      }    else    if  value==nullvalue==””       alert alerttxt ;return false;  134                Chapter 23: JavaScript Form validation      return true;  The	entire	script	with	the	HTML	form	could	look	something	like	this:     function validate_required field,alerttxt   {    {  with  field     if  value==nullvalue==””       alert alerttxt ;return false;      return true;  function validate_form thisform   with  thisform     if  validate_required email,”Email must be filled   out!” ==false     {email.focus  ;return false;}      {      }    }  }            {      }    else      {      }    }  }  {    {    }  }            continued   135                learn JavaScript and ajax with w3schools   continued   <form action=”submit.htm” onsubmit=”return validate_  form this ” method=”post”>  Email:                e-mail validation  The	following	function	checks	whether	the	content	follows	the	general	syntax	of	 an	e-mail	address.  n o t e proper format. It does not verify that the e-mail address actually exists.  This function only checks that the content appears to be an e-mail with the   This	means	that	the	input	data	must	contain	at	least	an	@	sign	and	a	dot	 . .	Also,	 the	@	must	not	be	the	first	character	of	the	e-mail	address,	and	the	last	dot	must	at	 least	be	one	character	after	the	@	sign:  function validate_email field,alerttxt   {    {  with  field     apos=value.indexOf “@” ;    dotpos=value.lastIndexOf “.” ;    if  apos<1dotpos-apos<2       {alert alerttxt ;return false;}    else {return true;}  The	entire	script	with	the	HTML	form	could	look	something	like	this:     function validate_email field,alerttxt     }  }        136  {                Chapter 23: JavaScript Form validation  with  field     {    apos=value.indexOf “@” ;    dotpos=value.lastIndexOf “.” ;    if  apos<1dotpos-apos<2       {alert alerttxt ;return false;}    else {return true;}  function validate_form thisform   with  thisform     if  validate_email email,”Not a valid e-mail   address!” ==false       {email.focus  ;return false;}  <form action=”submit.htm” onsubmit=”return validate_  form this ;” method=get”>  Email:         }  }  {    {    }  }                         137           Chapter 24  JavaSCript   animation  in this Chapter  	  	 The	HTML	Code  	  	 The	JavaScript	Code  	  	 The	Entire	Code  With	JavaScript,	we	can	create	animated	images.  The	trick	is	to	let	a	JavaScript	change	between	different	images	on	different	events.  In	the	following	example,	we	add	an	image	that	should	act	as	a	link	button	on	a	 Web	page.	We	then	add	an	onMouseOver	event	and	an	onMouseOut	event	that	 will	run	two	JavaScript	functions	that	change	between	the	images.  the htmL Code  The	HTML	code	looks	like	this:     <img border="0" alt="Visit w3schools!" src="b_pink.gif"   id="b1"  onmouseOver="mouseOver  " onmouseOut="mouseOut  "  >   Note	 that	 we	 have	 given	 the	 image	 an	 id,	 to	 make	 it	 possible	 for	 JavaScript	 to	 address	it	later.  The	 onMouseOver	 event	 tells	 the	 browser	 that	 once	 a	 mouse	 is	 rolled	 over	 the	 image,	the	browser	should	execute	a	function	that	replaces	the	image	with	another	 image.  The	onMouseOut	event	tells	the	browser	that	once	a	mouse	is	rolled	away	from	the	 image,	another	JavaScript	function	should	be	executed.	This	function	inserts	the	 original	image	again.  138                Chapter24: JavaScript animation  the JavaScript Code  The	changing	between	the	images	is	done	with	the	following	JavaScript:     function mouseOver    document.getElementById "b1" .src ="b_blue.gif";  function mouseOut       document.getElementById "b1" .src ="b_pink.gif";  The	function	mouseOver  	causes	the	image	to	shift	to	“b_blue.gif.”  The	function	mouseOut  	causes	the	image	to	shift	to	“b_pink.gif.”  the entire Code  In	the	following	example,	we	combine	the	HTML	and	JavaScript	code	to	produce	 animation.  The	resulting	animation	is	shown	in	Figure	24.1.  		You	can	try	this	example	on	the	www.w3schools.com	Web	site	or	include	 you	own	graphic	files	in	the	directory	with	your	html	source,	substituting	 for	b_blue	and	b_pink	in	the	html	source	code.  Try it yourself >>           function mouseOver    document.getElementById "b1" .src ="b_blue.gif";  function mouseOut    document.getElementById "b1" .src ="b_pink.gif";  {  }  {  }  {  }  {  }   continued   139                Learn JavaScript and ajax with w3schools   continued            id="b1"         Figure 24.1     <img border="0" alt="Visit w3schools!" src="b_pink.gif"   width="26" height="26" onmouseover="mouseOver  "   onmouseout="mouseOut  "  >   140                Chapter 25  JavaSCript image  mapS  in this Chapter  	  	 HTML	Image	Maps  	  	 Adding	Some	JavaScript  An	image	map	is	an	image	with	clickable	regions.  htmL image maps  		If	 you’ve	 read	 Learn  HTML  and  CSS  with  w3schools	 or	 completed	 the	 HTML	tutorial	on	the	w3schools	Web	site,	you	know	that	an	image	map	 is	an	image	with	clickable	regions.	Normally,	each	region	has	an	associated	 hyperlink.	Clicking	on	one	of	the	regions	takes	you	to	the	associated	link.	 Look	at	the	simple	HTML	image	map.  The	result	of	an	image	map	is	shown	in	Figure	25.1.  Try it yourself >>        <img src ="planets.gif" width ="145" height ="126"   alt="Planets" usemap="planetmap"  >     <area shape ="rect" coords ="0,0,82,126"  href ="sun.htm" target ="_blank" alt="Sun"  >  <area shape ="circle" coords ="90,58,3"   continued   141                Learn JavaScript and ajax with w3schools   continued   href ="mercur.htm" target ="_blank" alt="Mercury"  >  <area shape ="circle" coords ="124,58,8"  href ="venus.htm" target ="_blank" alt="Venus"  >            Figure 25.1           142  {  }       adding Some JavaScript  We	can	add	events	 that	can	call	a	JavaScript 	to	the	 	tags	inside	the	image	 map.	 The	  	 tag	 supports	 the	 onClick,	 onDblClick,	 onMouseDown,	 onMouseUp,	onMouseOver,	onMouseMove,	onMouseOut,	onKeyPress,	onKey- Down,	onKeyUp,	onFocus,	and	onBlur	events.  Here’s	the	HTML	image-map	example,	with	some	JavaScript	added.	Your	results	 are	shown	in	Figure	25.2.  Try it yourself >>           function writeText txt   document.getElementById "desc" .innerHTML=txt;           Chapter 25: JavaScript image maps  <img src ="planets.gif" width ="145" height ="126"   alt="Planets"   usemap="planetmap"  >     <area shape ="rect" coords ="0,0,82,126"  onMouseOver="writeText 'The Sun and the gas giant planets   like Jupiter are by far the largest objects in our Solar  System.' "  href ="sun.htm" target ="_blank" alt="Sun"  >  <area shape ="circle" coords ="90,58,3"  onMouseOver="writeText 'The planet Mercury is very difficult  to study from the Earth because it is always so close to  the Sun.' "  href ="mercur.htm" target ="_blank" alt="Mercury"  >  <area shape ="circle" coords ="124,58,8"  onMouseOver="writeText 'Until the 1960s, Venus was often   considered a  twin sister to the Earth because Venus is  the nearest planet to us, and because the two planets seem  to share many characteristics.' "  href ="venus.htm" target ="_blank" alt="Venus"  >                Figure 25.2       143           Chapter 26  JavaSCript timing  eventS  in this Chapter  	  	 The	setTimeout  	Method  	  	 The	clearTimeout  	Method  With	JavaScript,	it	is	possible	to	execute	some	code	after	a	specified	time	interval.	 This	is	called	timing	events.  It’s	very	easy	to	time	events	in	JavaScript.	The	two	key	methods	that	are	used	are	 as	follows:  	8	 setTimeout  —Executes	a	code	some	time	in	the	future  	8	 clearTimeout  —Cancels	the	setTimeout    n O t e HTML DOM Window object.  The  setTimeout    and  clearTimeout    are  both  methods  of  the   the settimeout   method  The	syntax	is	as	follows:  var t=setTimeout "javascript statement",milliseconds ;  The	setTimeout  	method	returns	a	value.	In	the	preceding	statement,	the	value	 is	stored	in	a	variable	called	t.	If	you	want	to	cancel	this	setTimeout  ,	you	can	 refer	to	it	using	the	variable	name.  The	first	parameter	of	setTimeout  	is	a	string	that	contains	a	JavaScript	state- ment.	This	statement	could	be	a	statement	like	"alert '5 seconds!' "	or	a	call	 to	a	function,	like	"alertMsg  ".  The	 second	 parameter	 indicates	 how	 many	 milliseconds	 from	 now	 you	 want	 to	 execute	the	first	parameter.	  144                Chapter 26: JavaScript timing events  n O t e  There are 1000 milliseconds in 1 second.  When	the	button	is	clicked	in	the	following	example,	an	alert	box	is	displayed	after	 3	seconds.  Your	results	are	shown	in	Figure	26.1.  Try it yourself >>           function timedMsg    var t=setTimeout "alert 'I am displayed after 3    seconds!' ",3000 ;  <input type="button" value="Display alert box!"   onClick="timedMsg  "  >  To	get	a	timer	to	work	in	an	infinite	loop,	you	must	write	a	function	that	calls	itself.  In	the	following	example,	when	a	button	is	clicked,	the	input	field	starts	to	count	  forever 	starting	at	0.  Notice	that	you	also	have	a	function	that	checks	whether	the	timer	is	already	run- ning,	to	avoid	creating	additional	timers	if	the	button	is	clicked	more	than	once.  Your	results	are	shown	in	Figure	26.2.  145          {  }                       Figure 26.1        Learn JavaScript and ajax with w3schools     Try it yourself >>        var c=0;  var t;  var timer_is_on=0;  function timedCount    document.getElementById 'txt' .value=c;  c=c+1;  t=setTimeout "timedCount  ",1000 ;  function doTimer    if  !timer_is_on     timer_is_on=1;    timedCount  ;  {  }  {    {    }  }                        146       <input type="button" value="Start count!"   onClick="doTimer  ">      Click on the button above. The input field will count for-  ever, starting at 0.            Chapter 26: JavaScript timing events  Figure 26.2  The	following	example	is	another	simple	timing	using	the	setTimeout  	method.  Your	results	are	shown	in	Figure	26.3.     function timedText    Try it yourself >>        {  }  seconds!'",2000 ;  seconds!'",4000 ;  seconds!'",6000 ;  var t1=setTimeout "document.getElementById 'txt' .value='2   var t2=setTimeout "document.getElementById 'txt' .value='4   var t3=setTimeout "document.getElementById 'txt' .value='6   <input type="button" value="Display timed text!"   onclick="timedText  "  >      Click on the button above. The input field will tell you   when two, four, and six seconds have passed.                             147           Learn JavaScript and ajax with w3schools  Figure 26.3  The	following	example	shows	a	clock	created	with	a	timing	event.  Your	results	are	shown	in	Figure	26.4.  Try it yourself >>           function startTime    var today=new Date  ;  var h=today.getHours  ;  var m=today.getMinutes  ;  var s=today.getSeconds  ;     add a zero in front of numbers<10  m=checkTime m ;  s=checkTime s ;  document.getElementById 'txt' .innerHTML=h+":"+m+":"+s;  t=setTimeout 'startTime  ',500 ;  {  }  {  }       148  function checkTime i   if  i<10     {    }    i="0" + i;  return i;                 Chapter 26: JavaScript timing events               Figure 26.4  the cleartimeout   method  The	syntax	is	as	follows:  clearTimeout setTimeout_variable   The	following	example	is	the	same	as	the	previous	infinite	loop	example.	The	only	 difference	 is	 that	 we	 have	 now	 added	 a	 "Stop  Count!"	 button	 that	 stops	 the	 timer.	Your	results	are	shown	in	Figure	26.5.     Try it yourself >>        var c=0;  var t;  var timer_is_on=0;  function timedCount    document.getElementById 'txt' .value=c;  c=c+1;  t=setTimeout "timedCount  ",1000 ;  function doTimer    {  }  {   continued   149                Learn JavaScript and ajax with w3schools   continued   if  !timer_is_on     timer_is_on=1;    timedCount  ;  function stopCount    clearTimeout t ;  timer_is_on=0;    {    }  }  {  }               >                 Figure 26.5  150       <input type="button" value="Start count!" onclick="doTimer  "      <input type="button" value="Stop count!"   onclick="stopCount  "  >  Click on the "Start count!" button above to start the timer.  The input field will count forever, starting at 0. Click on  the "Stop count!" button to stop the counting. Click on  the "Start count!" button to start the timer again.           Chapter 27  Create your own  objeCts with  javasCript  in this Chapter  	  	 JavaScript	Objects  	  	 Creating	Your	Own	Objects  Objects	are	useful	to	organize	information.  javascript objects  Earlier	in	this	book,	you	learned	that	JavaScript	has	several	built-in	objects,	like	 String,	Date,	Array,	and	more.	In	addition	to	these	built-in	objects,	you	also	can	 create	your	own.  An	object	is	just	a	special	kind	of	data,	a	collection	of	properties	and	methods.  Let’s	illustrate	with	an	example	and	create	an	object	that	models	a	person.	Proper- ties	are	the	values	associated	with	the	object.	The	person’s	properties	include	name,	 height,	weight,	age,	skin	tone,	eye	color,	and	so	on.	All	persons	have	these	proper- ties,	but	the	values	of	those	properties	differ	from	person	to	person.	Objects	also	 have	 methods.	 Methods	 are	 the	 actions	 that	 can	 be	 performed	 on	 objects.	The	 person’s	methods	could	be	eat  ,	sleep  ,	work  ,	play  ,	and	so	on.  properties The	syntax	for	accessing	a	property	of	an	object	is	as	follows:  objName.propName  151                Learn javascript and ajax with w3schools  You	can	add	a	property	to	an	object	by	simply	giving	it	a	value.	Assume	that	the	 personObj	already	exists;	you	can	give	it	properties	named	firstname,	lastname,	 age,	and	eyecolor	as	follows:  personObj.firstname="John";  personObj.lastname="Doe";  personObj.age=30;  personObj.eyecolor="blue";  document.write personObj.firstname ;  The	preceding	code	generates	the	following	output:  John  Methods An	object	also	can	contain	methods.  You	can	call	a	method	with	the	following	syntax:  objName.methodName    n o t e parentheses.  Parameters  required  for  the  method  can  be  passed  between  the    To	call	a	method	called	sleep  	for	the	personObj:  personObj.sleep  ;  If	the	sleep  	method	accepts	a	parameter	for	the	number	of	hours,	it	could	be	 called	like	this:  personObj.sleep 8   Creating your own objects  There	are	two	ways	to	create	a	new	object:	You	can	create	a	direct	instance	of	an	 object,	or	you	can	create	a	template	of	an	object.  Create a Direct instance of an object The	following	code	creates	an	instance	of	an	object	and	adds	four	properties	to	it:  personObj=new Object  ;  personObj.firstname="John";  152                Chapter 27: Create your own objects with javascript  personObj.lastname="Doe";  personObj.age=50;  personObj.eyecolor="blue";  Adding	 a	 method	 to	 the	 personObj	 is	 also	 simple.	The	 following	 code	 adds	 a	 method	called	eat  	to	the	personObj:  personObj.eat=eat;  In	the	following	example,	you	create	a	direct	instance	of	an	object.  Your	results	are	shown	in	Figure	27.1.  Try it yourself >>           personObj=new Object  ;  personObj.firstname="John";  personObj.lastname="Doe";  personObj.age=50;  personObj.eyecolor="blue";  document.write personObj.firstname + " is " + personObj.age +   " years old." ;           Figure 27.1       153           Learn javascript and ajax with w3schools  Create a template of an object The	template	defines	the	structure	of	an	object	so	that	you	can	more	easily	create	 multiple	instances	of	that	object:  function person firstname,lastname,age,eyecolor   this.firstname=firstname;  this.lastname=lastname;  this.age=age;  this.eyecolor=eyecolor;  Notice	that	the	template	is	just	a	function.	  It	is	also	called	a	constructor.	Inside	the	constructor,	you	add	the	properties	and	 methods	 that	 will	 belong	 to	 each	 subsequent	 instance	 of	 the	 object.	 When	 you	 use	person	as	a	constructor	for	more	than	one	object,	you	must	include	the	“this”	 keyword.	JavaScript	uses	“this”	to	assign	the	properties	to	the	specific	object	created	 with	the	“new”	keyword.  In	the	following	example,	you	create	a	template	for	an	object.  Your	results	are	shown	in	Figure	27.2.     function person firstname,lastname,age,eyecolor   Try it yourself >>        this.firstname=firstname;  this.lastname=lastname;  this.age=age;  this.eyecolor=eyecolor;  myFather=new person "John","Doe",50,"blue" ;  document.write myFather.firstname + " is " + myFather.age + "   years old." ;     154  {  }  {  }                Chapter 27: Create your own objects with javascript  After	you	have	the	template,	you	can	create	new	instances	of	the	object,	like	this:  myFather=new person "John","Doe",50,"blue" ; myMother=new    person "Sally","Rally",48,"green" ;  You	can	also	add	some	methods	to	the	person	object.	This	is	also	done	inside	the	 template:  function person firstname,lastname,age,eyecolor   this.firstname=firstname;  this.lastname=lastname;  this.age=age;  this.eyecolor=eyecolor;  this.newlastname=newlastname;  Note	that	methods	are	just	functions	attached	to	objects.	Then	you	will	have	to	 write	the	newlastname  	function:  function newlastname new_lastname   this.lastname=new_lastname;  The	newlastname   function	defines	the	person’s	new	last	name	and	assigns	that	 to	the	person.	JavaScript	knows	which	person	you’re	talking	about	by	using	“this.”	 So,	now	you	can	write:	myMother.newlastname "Doe" .        Figure 27.2  {  }  {  }       155                         Section IV AJAX Basic     Chapter 28: AJAX XMLHttpRequest     Chapter 29: AJAX Browser Support       Chapter 30: AJAX—The  XMLHttpRequest Object’s Methods  and Properties     Chapter 31: AJAX Server  157                              CHAPTeR 28  AJAX   XMLHTTPRequeST  In This Chapter  	  	 AJAX	Uses	the	XMLHttpRequest	Object  	  	 The	XMLHttpRequest	Object  	  	 AJAX	Example  	  	 Your	First	AJAX	Application  AJAX uses the XMLHttpRequest  Object  To	get	or	send	information	from to	a	database	or	a	file	on	the	server	with	tradi- tional	JavaScript,	you	will	have	to	make	an	HTML	form.	A	user	will	have	to	click	 the	Submit	button	to	send get	the	information	and	wait	for	the	server	to	respond.	 Then	a	new	page	will	load	with	the	results.	Because	the	server	returns	a	new	page	 each	time	the	user	submits	input,	traditional	Web	applications	can	run	slowly	and	 tend	to	be	less	user	friendly.  With	 AJAX,	 your	 JavaScript	 communicates	 directly	 with	 the	 server	 through	 the	 JavaScript	XMLHttpRequest	object.  With	the	XMLHttpRequest	object,	a	Web	page	can	make	a	request	to,	and	get	a	 response	from	a	Web	server—without	reloading	the	page.	The	user	will	stay	on	the	 same	page,	and	he	will	not	notice	that	scripts	request	pages	or	send	data	to	a	server	 in	the	background.  The XMLHttpRequest Object  By	using	the	XMLHttpRequest	object,	a	Web	developer	can	update	a	page	with	 data	from	the	server	after	the	page	has	loaded!  159                Learn JavaScript and Ajax with w3schools  AJAX	was	made	popular	in	2005	by	Google	 with	Google	Suggest .  Google	Suggest	is	using	the	XMLHttpRequest	object	to	create	a	very	dynamic	Web	 interface:	When	you	start	typing	in	Google’s	search	box,	a	JavaScript	sends	the	let- ters	off	to	a	server,	and	the	server	returns	a	list	of	suggestions.  The	XMLHttpRequest	object	is	supported	in	all	major	browsers	 Internet	Explorer,	 Firefox,	Chrome,	Opera,	and	Safari .  Your First AJAX Application  To	understand	how	AJAX	works,	we	will	create	a	small	AJAX	application.  We	 will	 create	 an	 AJAX	 application	 from	 scratch.	The	 application	 will	 use	 two	 click	buttons	to	fetch	data	from	a	server	and	display	the	information	in	a	Web	page	 without	reloading	the	page	itself.  First,	create	a	small	HTML	page	with	a	short   section.	The	 	section	 will	be	used	to	display	alternative	information	requested	from	a	server.	  To	identify	the	 	section,	we	use	an	id=”test”	attribute:      Clickto let AJAX change this text                  Then	we	add	two	simple	 .	When	they	are	clicked	the	buttons	will	call	 a	function	loadXMLDoc  :   Click    Click   Me   Me   Finally,	we	add	a	 	to	the	page’s	 	section	to	contain	the	loadXML Doc  	function:        function loadXMLDoc url   160  {                Chapter 28: AJAX XMLHttpRequest  .... Your AJAX script goes here ...  }        	The	next	chapters	explain	the	script	 using	AJAX 	and	how	to	make	the	  application	work.  		The	 various	 supporting	 files	 and	 images,	 including	 the	 test1.txt	 and	 test2.txt	files,	are	accessed	when	completing	this	tutorial	online	at	www. w3schools.com.  Your	results	are	shown	in	Figure	28.1.  Try it yourself >>           function loadXMLDoc url   if  window.XMLHttpRequest     {   code for IE7+, Firefox, Chrome, Opera, Safari    xmlhttp=new XMLHttpRequest  ;    {   code for IE6, IE5    xmlhttp=new ActiveXObject "Microsoft.XMLHTTP" ;  xmlhttp.open "GET",url,false ;  xmlhttp.send null ;  document.getElementById ‘test’ .innerHTML=xmlhttp.response-  {    }  else    }  Text;  }               Clickto let AJAX change this text    continued   161                Learn JavaScript and Ajax with w3schools   Click    Click    continued      Me      Me         Figure 28.1  162                Chapter 29  aJaX Browser   support  In this Chapter 	  	 The	XMLHttpRequest  	  	 All	Together	Now  The	keystone	of	AJAX	is	the	XMLHttpRequest	object.  the XMLhttprequest  All	new	browsers	support	a	new	built-in	JavaScript	XMLHttpRequest object	 IE5	 and	IE6	use	an	ActiveXObject .  The	 XMLHttpRequest	 object	 can	 be	 used	 to	 request	 information	  data 	 from	 a	 server.  Let’s	update	our	HTML	file	with	a	JavaScript	in	the	 	section:  function loadXMLDoc url   {  }  }  }  if  window.XMLHttpRequest   {   code for IE7+, Firefox, Chrome, Opera, Safari  xmlhttp=new XMLHttpRequest  ;  else  {   code for IE6, IE5  xmlhttp=new ActiveXObject "Microsoft.XMLHTTP" ;  xmlhttp.open "GET",url,false ;  xmlhttp.send null ;  document.getElementById ‘test’ .innerHTML=xmlhttp.response-  Text;  163                Learn Javascript and ajax with w3schools  Try	to	create	an	XMLHttpRequest	object:  xmlhttp=new XMLHttpRequest     If	not	 if	IE5	or	IE6 ,	create	an	ActiveXObject:  xmlhttp=new ActiveXObject "Microsoft.XMLHTTP"   Open	the	request	object:  xmlhttp.open "GET",url,false   Send	your	request	to	your	server:  xmlhttp.send null   Update	your	page	with	the	response	from	the	server:  document.getElementById ‘test’ .innerHTML=xmlhttp.response-  Text  N o t e HttpRequest object, so just copy and paste it whenever you need it.  The preceding code can be used every time you need to create an  XML  	 In	 Chapter	 30,	 “AJAX—the	 XMLHttpRequest	 Object”,	 you	 learn	 more	  about	the	XMLHttpRequest.  all together Now  The	following	example	puts	what	you’ve	learned	all	together.  Your	results	are	shown	in	Figure	29.1.  Try it yourself >>           function loadXMLDoc url   if  window.XMLHttpRequest     {   code for IE7+, Firefox, Chrome, Opera, Safari    xmlhttp=new XMLHttpRequest  ;  164  {                Chapter 29: aJaX Browser support    {   code for IE6, IE5    xmlhttp=new ActiveXObject "Microsoft.XMLHTTP" ;  xmlhttp.open "GET",url,false ;  xmlhttp.send null ;  document.getElementById ‘test’ .innerHTML=xmlhttp.response-      Click to let AJAX change this text    Click    Click     }  else    }  Text;  }              Me      Me         Figure 29.1       165           Chapter 30  aJaX—the   XMLhttprequest  ObJeCt’s MethOds  and prOperties  in this Chapter  	  	 Important	Methods  	  	 Sending	an	AJAX	Request	to	a	Server  	  	 Important	Properties  	  	 The	responseText	Property  	  	 XMLHttpRequest	Open—Using	False  	  	 XMLHttpRequest	Open—Using	True  	  	 The	readyState	Property  	  	 The	onreadystatechange	Property  In	 this	 chapter,	 you	 learn	 about	 important	 methods	 and	 properties	 of	 the	 XML HttpRequest	object.  important Methods  The	XMLHttpRequest	object	has	two	important	methods:  	8	 The	open  	method  	8	 The	send  	method  166                Chapter 30: aJaX—the XMLhttprequest Object’s Methods and Objects  sending an aJaX request to a server  To	send	a	request	to	a	Web	server,	use	the	open  	and	send  	methods.  The	 open  	 method	 takes	 three	 arguments.	 The	 first	 argument	 defines	 which	 method	 to	 use	  GET	 or	 POST .	 The	 second	 argument	 specifies	 the	 name	 of	 the	server	resource	 URL .	The	third	argument	specifies	if	the	request	should	be		 handled	asynchronously.  The	 send  	 method	 sends	 the	 request	 off	 to	 the	 server.	 If	 we	 assume	 the	 file	 requested	is	called	time.asp,	the	code	would	be:	  url="time.asp"  xmlhttp.open "GET",url,true ;  xmlhttp.send null ;  In	the	example,	we	assume	that	the	current	Web	page	and	the	requested	resource	are	 both	in	the	same	file	directory.  important properties  The	XMLHttpRequest	object	has	three	important	properties:  	8	 The	responseText	property  	8	 The	readyState	property  	8	 The	onreadystatechange	property  the responsetext property  The	XMLHttpRequest	object	stores	any	data	retrieved	from	a	server	as	a	result	of	a	 server	request	in	its	responseText property.  In	the	previous	chapter,	you	copied	the	content	of	the	 responseText	property	 into	your	HTML	with	the	following	statement:  document.getElementById 'test' .innerHTML=xmlhttp.response-  Text  XMLhttprequest Open—using False  In	the	previous	examples,	we	used	this	simplified	syntax:  xmlhttp.open "GET",url,false ;  xmlhttp.send null ;  document.getElementById 'test' .innerHTML=xmlhttp.   responseText;       167           Learn Javascript and ajax with w3schools  The	 third	 parameter	 in	 the	 open	 call	 is	 “false”.	This	 tells	 the	 XMLHttpRequest	 object	to	wait	until	the	server	request	is	completed	before	next	statement	is	executed.  For	 small	 applications	 and	 simple	 server	 requests,	 this	 might	 be	 OK.	 But	 if	 the	 request	takes	a	long	time	or	cannot	be	served,	this	might	cause	your	Web	applica- tion	to	hang	or	stop.  XMLhttprequest Open—using true  By	changing	the	third	parameter	in	the	open	call	to	“true”,	you	tell	the	XMLHttpRe- quest	object	to	continue	the	execution	after	the	request	to	the	server	has	been	sent.  Because	you	cannot	simply	start	using	the	response	from	the	server	request	before	 you	are	sure	the	request	has	been	completed,	you	need	to	set	the	onreadystate- change property	of	the	XMLHttpRequest,	to	a	function	 or	name	of	a	function 	 to	be	executed	after	completion.  In	this	onreadystatechange	function,	you	must	test	the	readyState property	 before	you	can	use	the	result	of	the	server	call.  Simply	change	the	code	to  xmlhttp.onreadystatechange=function    if xmlhttp.readyState==4   HB:    request is complete    {document.getElementById 'test' .innerHTML=xmlhttp.   responseText}  xmlhttp.open "GET",url,true ;  xmlhttp.send null ;  the readystate property  The	readyState	property	holds	the	status	of	the	server’s	response.  Possible	values	for	the	readyState	property	are	shown	in	the	following	table.  state 0 1 2 3 4  description The request is not initialized The request has been set up The request has been sent The request is in process The request is complete  168  {  }                Chapter 30: aJaX—the XMLhttprequest Object’s Methods and Objects  the onreadystatechange property  The	onreadystatechange	property	stores	a	function	 or	the	name	of	a	function 	 to	be	called	automatically	each	time	the	readyState	property	changes.  You	can	define	the	entire	function	in	the	property	like	this:	  xmlhttp.onreadystatechange=function    if xmlhttp.readyState==4     {document.getElementById 'test' .innerHTML=xmlhttp.   responseText}  xmlhttp.open "GET",url,true ;  xmlhttp.send null ;  Or	you	can	simply	store	the	name	of	a	function	that	is	defined	elsewhere,	like	this:  xmlhttp.onreadystatechange=state_Change   xmlhttp.open "GET",url,true ;  xmlhttp.send null ;  function state_Change    if xmlhttp.readyState==4     {document.getElementById 'test' .innerHTML=xmlhttp.   responseText}  {  }  {  }  ...  ...  ...       169           Chapter 31  aJaX Server  In this Chapter  	  	 XMLHttpRequest	Object	Can	Request	Any	Data  	  	 Requesting	Files  	  	 Submitting	Forms  There	is	no	such	thing	as	an	AJAX	server.  XMLhttprequest Object Can request  any Data  With	the	XMLHttpRequest	object,	you	can	request	any	Web	resource	from	a	server.  You	can	request	TXT	files,	HTML	files,	XML	files,	pictures,	or	any	data	that	is	 accessible	from	the	Internet.  N O t e  AJAX is about creating clever applications that can use the data.  requesting Files  Many	AJAX	applications	request	pure	text	files	to	retrieve	data	for	the	application.	  A	very	common	AJAX	method	is	to	request	XML	files	to	retrieve	application	data.	  Requesting	an	ASP	or	PHP	file	is	the	most	common	way	to	access	database	infor- mation.	  Requesting	HTML	files	is	a	common	method	for	filling	out	different	information	 on	a	Web	page.  170                Chapter 31: aJaX Server  Submitting Forms  With	AJAX,	you	can	easily	submit	form	data	without	having	to	reload	the	page.  	In	the	following	chapters,	we	request	data	and	files	and	learn	how	to	submit	  forms.       171                         Section V AJAX Advanced     Chapter 32: AJAX Suggest       Chapter 33: AJAX Database  Example     Chapter 34: AJAX XML Example       Chapter 35: AJAX ResponseXML  Example  173                              ChAptER 32  AJAX SuggESt  In this Chapter  	  	 The	HTML	Form  	  	 The	showHint  	Function  	  	 The	GetXmlHttpObject  	Function  	  	 The	stateChanged  	Function  	  	 AJAX	Suggest	Source	Code  AJAX	can	be	used	to	create	more	interactive	applications.  The	 following	 AJAX	 example	 demonstrates	 how	 a	 Web	 page	 can	 communicate	 with	a	Web	server	while	a	user	enters	data	into	an	HTML	form.	  For	this	example,	use	the	name	“Kelly.”	Note	what	happens	as	you	type	a	name	in	 the	input	field,	as	shown	in	Figure	32.1.  Figure 32.1  the htML Form  The	preceding	form	has	the	following	HTML	code:        First Name: <input type="text" id="txt1"   onkeyup="showHint this.value "  >   Suggestions:      It	is	just	a	simple	HTML	form	with	an	input	field	called	"txt1".  175                Learn JavaScript and Ajax with w3schools  An	 event	 attribute	 for	 the	 input	 field	 defines	 a	 function	 to	 be	 triggered	 by	 the	 onkeyup	event.	  The	paragraph	below	the	form	contains	a	span	called	"txtHint".	The	span	is	used	 as	a	placeholder	for	data	retrieved	from	the	Web	server.  When	 a	 user	 inputs	 data,	 the	 function	 called	 "showHint  "	 is	 executed.	 The	 execution	of	the	function	is	triggered	by	the	 "onkeyup"	event.	In	other	words,	 each	time	a	user	presses	and	then	releases	a	key	inside	the	input	field,	the	function	 showHint	is	called.  the showhint   Function  The	 showHint  	 function	 is	 a	 very	 simple	 JavaScript	 function	 placed	 in	 the	  	section	of	the	HTML	page:    document.getElementById "txtHint" .innerHTML="";  var xmlhttp;  function showHint str   {    {  if  str.length==0   xmlhttp=GetXmlHttpObject  ;  if  xmlhttp==null     return;    }    {    return;    }     alert  "Your browser does not support XMLHTTP!" ;  var url = "gethint.asp";  url = url + "?q =" +str;  url = url + "&sid=" +Math.random  ;  xmlhttp.onreadystatechange=stateChanged;  xmlhttp.open "GET",url,true ;  xmlhttp.send null ;  The	preceding	function	executes	every	time	a	character	is	entered	in	the	input	field.  }       176           Chapter 32: AJAX Suggest  If	there	is	input	in	the	input	field	 str.length >	0 ,	the	showHint  	function	 executes	the	following:  	8	 Defines	the	URL	 filename 	to	send	to	the	server  	8	 Adds	a	parameter	 q 	to	the	URL	with	the	content	of	the	input	field	  	8	 Adds	a	random	number	to	prevent	the	server	from	using	a	cached	file  	8	 Creates	an	XMLHttp	object	and	tells	the	object	to	execute	a	function	called	  stateChanged	when	a	change	is	triggered  	8	 Opens	the	XMLHttp	object	with	the	given	URL  	8	 Sends	an	HTTP	request	to	the	server  If	the	input	field	is	empty,	the	function	simply	clears	the	content	of	the	txtHint	 placeholder.  the getXmlhttpObject   Function  The	showHint  	function	calls	a	function	named	GetXmlHttpObject  .  The	 purpose	 of	 the	 GetXmlHttpObject  	 function	 is	 to	 solve	 the	 problem	 of	 creating	different	XMLHttp	objects	for	different	browsers:  function GetXmlHttpObject    if  window.XMLHttpRequest        code for IE7+, Firefox, Chrome, Opera, Safari    return new XMLHttpRequest  ;  if  window.ActiveXObject        code for IE6, IE5    return new ActiveXObject "Microsoft.XMLHTTP" ;  return null;  the stateChanged   Function The	stateChanged  	function	contains	the	following	code:  function stateChanged    if  xmlhttp.readyState==4    continued  177  {    {    }    {    }  }  {                Learn JavaScript and Ajax with w3schools   continued    {  sponseText;    }  }    document.getElementById "txtHint" .innerHTML=xmlhttp.re-  The	 stateChanged  	 function	 executes	 every	 time	 the	 state	 of	 the	 XMLHttp	 object	changes.  When	the	state	changes	to	4	 “complete” ,	the	content	of	the	txtHint	placeholder	 is	filled	with	the	response	text.  AJAX Suggest Source Code  The	following	source	code	belongs	to	the	previous	AJAX	example.  You	can	copy	and	paste	it,	and	try	it	yourself.  N O t E  Be sure to try it on a server with ASP or PHP enabled.  the AJAX htML page This	 is	 the	 HTML	 page.	 It	 contains	 a	 simple	 HTML	 form	 and	 a	 link	 to	 a		 JavaScript.      First Name: <input type="text" id="txt1"   onkeyup="showHint this.value "  >   Suggestions:                              178                Chapter 32: AJAX Suggest  the AJAX JavaScript This	is	the	JavaScript	code,	stored	in	the	file	clienthint.js:  var xmlhttp  function showHint str   if  str.length==0     document.getElementById "txtHint" .innerHTML="";    return;  xmlhttp=GetXmlHttpObject  ;  if  xmlhttp==null     alert  "Your browser does not support XMLHTTP!" ;    return;  var url="gethint.asp";  url=url+"?q="+str;  url=url+"&sid="+Math.random  ;  xmlhttp.onreadystatechange=stateChanged;  xmlhttp.open "GET",url,true ;  xmlhttp.send null ;  function stateChanged    if  xmlhttp.readyState==4     document.getElementById "txtHint" .innerHTML=xmlhttp.re-  sponseText;  function GetXmlHttpObject    if  window.XMLHttpRequest        code for IE7+, Firefox, Chrome, Opera, Safari   continued  179  {    {    }    {    }  }  {  }  {    {    }    {                Learn JavaScript and Ajax with w3schools   continued     return new XMLHttpRequest  ;  if  window.ActiveXObject     }    {    }  }  return null;       code for IE6, IE5    return new ActiveXObject "Microsoft.XMLHTTP" ;  the AJAX Server page—ASp and php There	is	no	such	thing	as	an	AJAX	server.	AJAX	pages	can	be	served	by	any	Internet	 server.  The	server	page	called	by	the	JavaScript	in	the	previous	example	is	a	simple	ASP	file	 called	gethint.asp.  Following	are	two	examples	of	the	server	page	code,	one	written	in	ASP	and	one	 in	PHP.	  AJAX ASp Example The	code	in	the	gethint.asp	page	is	written	in	VBScript	for	an	Internet	Information	 Server	 IIS .	It	checks	an	array	of	names	and	returns	the	corresponding	names	to	 the	client:  <%  response.expires=-1  dim a 30   'Fill up array with names  a 1 ="Anna"  a 2 ="Brittany"  a 3 ="Cinderella"  a 4 ="Diana"  a 5 ="Eva"  a 6 ="Fiona"  a 7 ="Gunda"  a 8 ="Hege"  a 9 ="Inga"  a 10 ="Johanna"  a 11 ="Kitty"  a 12 ="Linda"  180                Chapter 32: AJAX Suggest  a 13 ="Nina"  a 14 ="Ophelia"  a 15 ="Petunia"  a 16 ="Amanda"  a 17 ="Raquel"  a 18 ="Cindy"  a 19 ="Doris"  a 20 ="Eve"  a 21 ="Evita"  a 22 ="Sunniva"  a 23 ="Tove"  a 24 ="Unni"  a 25 ="Violet"  a 26 ="Liza"  a 27 ="Elizabeth"  a 28 ="Ellen"  a 29 ="Wenche"  a 30 ="Vicky"  'get the q parameter from URL  q=ucase request.querystring "q"    'lookup all hints from array if length of q>0  if len q >0 then    hint=""    for i=1 to 30      if q=ucase mid a i ,1,len q    then        if hint="" then          hint=a i         else          hint=hint & " , " & a i         end if      end if    next  end if  'Output "no suggestion" if no hint were found  'or output the correct values  if hint="" then    response.write "no suggestion"   else   continued  181                Learn JavaScript and Ajax with w3schools   continued     response.write hint   end if  %>  AJAX php Example The	preceding	code	can	be	rewritten	in	PHP.  <?php     Fill up array with names  $a[]="Anna";  $a[]="Brittany";  $a[]="Cinderella";  N O t E variable in "clienthint.js" from "gethint.asp" to "gethint.php".  To run the entire example in PHP, remember to change the value of the url   $a[]="Diana";  $a[]="Eva";  $a[]="Fiona";  $a[]="Gunda";  $a[]="Hege";  $a[]="Inga";  $a[]="Johanna";  $a[]="Kitty";  $a[]="Linda";  $a[]="Nina";  $a[]="Ophelia";  $a[]="Petunia";  $a[]="Amanda";  $a[]="Raquel";  $a[]="Cindy";  $a[]="Doris";  $a[]="Eve";  $a[]="Evita";  $a[]="Sunniva";  $a[]="Tove";  $a[]="Unni";  $a[]="Violet";  $a[]="Liza";  $a[]="Elizabeth";  $a[]="Ellen";  182                Chapter 32: AJAX Suggest  $a[]="Wenche";  $a[]="Vicky";    get the q parameter from URL  $q=$_GET["q"];    lookup all hints from array if length of q>0  if  strlen $q  > 0     {    $hint="";    for $i=0; $i<count $a ; $i++       if  strtolower $q ==strtolower substr $a[$i],0,strlen         if  $hint==""           $hint=$a[$i];      {  $q            {          {          }        else          {          }        }      }    }          $hint=$hint." , ".$a[$i];     or to the correct values  if  $hint == ""     $response="no suggestion";    {    }  else    {    }  ?>    $response=$hint;    output the response  echo $response;     Set output to "no suggestion" if no hint were found       183           Chapter 33  aJaX Database  eXample  In this Chapter 	  	 The	AJAX	JavaScript  	  	 The	AJAX	Server	Page  AJAX	can	be	used	for	interactive	communication	with	a	database.  The	example	shown	in	Figure	33.1	demonstrates	how	a	Web	page	can	fetch	infor- mation	from	a	database	with	AJAX	technology.  The	preceding	example	contains	a	simple	HTML	form	and	a	link	to	a	JavaScript:   <   Figure 33.1        script>           Select a Customer:  value ">  <select name="customers" onchange="showCustomer this.   184                Chapter 33: aJaX Database example   Alfreds Futterkiste    North South    Wolski Zajazd     Customer info will be listed here.<         b>         As	 you	 can	 see,	 it	 is	 just	 a	 simple	 HTML	 form	 with	 a	 drop-down	 box	 called		 customers.  The	 	below	the	form	will	be	used	as	a	placeholder	for	info	retrieved	from	the	 Web	server.  When	the	user	selects	data,	a	function	called	showCustomer  	is	executed.	The	 execution	of	the	function	is	triggered	by	the	“onchange”	event.	In	other	words,	 each	time	the	user	changes	the	value	in	the	drop-down	box,	the	function	show- Customer  	is	called.  the aJaX Javascript  This	is	the	JavaScript	code	stored	in	the	file	selectcustomer.js:    alert  "Your browser does not support AJAX!" ;  function showCustomer str   xmlhttp=GetXmlHttpObject  ;  if  xmlhttp==null   var xmlhttp  {    {    }    return;  var url="getcustomer.asp";  url=url+"?q="+str;  url=url+"&sid="+Math.random  ;  xmlhttp.onreadystatechange=stateChanged;  xmlhttp.open "GET",url,true ;  xmlhttp.send null ;   continued   185                learn Javascript and ajax with w3schools   continued   function stateChanged    if  xmlhttp.readyState==4     document.getElementById "txtHint" .innerHTML=xmlhttp.   responseText;  function GetXmlHttpObject    if  window.XMLHttpRequest        code for IE7+, Firefox, Chrome, Opera, Safari    return new XMLHttpRequest  ;  if  window.ActiveXObject        code for IE6, IE5    return new ActiveXObject "Microsoft.XMLHTTP" ;  return null;  the aJaX server page  The	server	page	called	by	the	previous	JavaScript	script	is	an	ASP	file	called	getcus- tomer.asp.  The	ASP	page	is	written	in	VBScript	for	an	Internet	Information	Server	 IIS .	It	 could	easily	be	rewritten	in	PHP	or	some	other	server	language.  The	code	runs	a	query	against	a	database	and	returns	the	result	in	an	HTML	table:  <%  response.expires=-1  sql="SELECT * FROM CUSTOMERS WHERE CUSTOMERID="  sql=sql & "'" & request.querystring "q"  & "'"  }  {  }  {    {    }    {    }    {    }  }  186                Chapter 33: aJaX Database example  set conn=Server.CreateObject "ADODB.Connection"   conn.Provider="Microsoft.Jet.OLEDB.4.0"  conn.Open Server.Mappath " db northwind.mdb"    set rs=Server.CreateObject "ADODB.recordset"   rs.Open sql,conn      response.write "   " & x.name & "  "       response.write " " & x.value & "  "   response.write " "   do until rs.EOF    for each x in rs.Fields    next    rs.MoveNext  loop  response.write " "   %>       187           aJaX XML eXaMpLe  Chapter 34  In this Chapter 	  	 The	AJAX	JavaScript  	  	 The	AJAX	Server	Page  	  	 The	XML	File  AJAX	can	be	used	for	interactive	communication	with	an	XML	file.  The	example	in	Figure	34.1	demonstrates	how	a	Web	page	can	fetch	information	 from	an	XML	file	with	AJAX	technology.  The	preceding	example	contains	a	simple	HTML	form	and	a	link	to	a	JavaScript:      Figure 34.1                 Select a CD:      Bob Dylan    Bonnie Tyler    Dolly Parton   188                Chapter 34: aJaX XML example                CD info will be listed here.    As	you	can	see,	it	is	just	a	simple	HTML	form	with	a	simple	drop-down	box	called	 cds.  The	 	below	the	form	will	be	used	as	a	placeholder	for	info	retrieved	from	the	 Web	server.  When	the	user	selects	data,	a	function	called	showCD	is	executed.	The	execution	of	 the	function	is	triggered	by	the	onchange	event.	In	other	words	each	time	the	user	 changes	the	value	in	the	drop-down	box,	the	function	showCD	is	called.  the aJaX JavaScript  This	is	the	JavaScript	code	stored	in	the	file	selectcd.js:  var xmlhttp  function showCD str   xmlhttp=GetXmlHttpObject  ;  if  xmlhttp==null   {    {    }  }  {    alert  "Your browser does not support AJAX!" ;    return;  var url="getcd.asp";  url=url+"?q="+str;  url=url+"&sid="+Math.random  ;  xmlhttp.onreadystatechange=stateChanged;  xmlhttp.open "GET",url,true ;  xmlhttp.send null ;  function stateChanged     continued   189                Learn JavaScript and ajax with w3schools   continued   if  xmlhttp.readyState==4   document.getElementById "txtHint" .innerHTML=xmlhttp.   responseText;  {  }  }  {    {    }    {    }  }  function GetXmlHttpObject    if  window.XMLHttpRequest        code for IE7+, Firefox, Chrome, Opera, Safari    return new XMLHttpRequest  ;  if  window.ActiveXObject        code for IE6, IE5    return new ActiveXObject "Microsoft.XMLHTTP" ;  return null;  the aJaX Server page  The	server	page	called	by	the	preceding	JavaScript	is	an	ASP	file	called	getcd.asp.  The	page	is	written	in	VBScript	for	an	Internet	Information	Server	 IIS .	It	could	 easily	be	rewritten	in	PHP	or	some	other	server	language.  The	code	runs	a	query	against	an	XML	file	and	returns	the	result	as	HTML:  <%  response.expires=-1  q=request.querystring "q"   set xmlDoc=Server.CreateObject "Microsoft.XMLDOM"   xmlDoc.async="false"  xmlDoc.load Server.MapPath "cd_catalog.xml"    set nodes=xmlDoc.selectNodes "CATALOG CD[ARTIST='" & q &   "']"   190                Chapter 34: aJaX XML example  for each x in nodes    for each y in x.childnodes      response.write y.text       response.write " "       response.write " " & y.nodename & ":  "   the XML File  The	XML	file	used	in	the	example	is	cd_catalog.xml.	This	document	contains	a	CD	 collection	and	appears	as	follows:       next  next  %>     −  −      Empire Burlesque    Bob Dylan    USA    Columbia    10.90    1985      −        −      Hide your heart    Bonnie Tyler    UK    CBS Records    9.90    1988    Greatest Hits    Dolly Parton    USA    continued   191                Learn JavaScript and ajax with w3schools   continued    RCA    9.90    1982      −        −        −        −      Still got the blues    Gary Moore    UK    Virgin records    10.20    1990    Eros    Eros Ramazzotti    EU    BMG    9.90    1997    One night only    Bee Gees    UK    Polydor    10.90    1998    Sylvias Mother    Dr.Hook    UK    CBS    8.10    1973      192                Chapter 34: aJaX XML example  −        −        −        −        −      Maggie May    Rod Stewart    UK    Pickwick    8.50    1990    Romanza    Andrea Bocelli    EU    Polydor    10.80    1996    When a man loves a woman    Percy Sledge    USA    Atlantic    8.70    1987    Black angel    Savage Rose    EU    Mega    10.90    1995    1999 Grammy Nominees    Many    continued   193                Learn JavaScript and ajax with w3schools   continued    USA    Grammy    10.20    1999      −        −        −        −      For the good times    Kenny Rogers    UK    Mucik Master    8.70    1995    Big Willie style    Will Smith    USA    Columbia    9.90    1997    Tupelo Honey    Van Morrison    UK    Polydor    8.20    1971    Soulsville    Jorn Hoel    Norway    WEA    7.90    1996   194                Chapter 34: aJaX XML example     −        −        −        −        −      The very best of    Cat Stevens    UK    Island    8.90    1990    Stop    Sam Brown    UK    A and M    8.90    1988    Bridge of Spies    T'Pau    UK    Siren    7.90    1987    Private Dancer    Tina Turner    UK    Capitol    8.90    1983    Midt om natten    continued   195                Learn JavaScript and ajax with w3schools   continued    Kim Larsen    EU    Medley    7.80    1983      −        −        −        −      Pavarotti Gala Concert    Luciano Pavarotti    UK    DECCA    9.90    1991    The dock of the bay    Otis Redding    USA    Atlantic    7.90    1987    Picture book    Simply Red    EU    Elektra    7.20    1985    Red    The Communards    UK    London    7.80   196                Chapter 34: aJaX XML example   1987      −      Unchain my heart    Joe Cocker    USA    EMI    8.20    1987              197           Chapter 35  aJaX responseXML  eXaMpLe  In this Chapter 	  	 The	AJAX	JavaScript  	  	 The	AJAX	Server	Page  responseText	returns	the	HTTP	response	as	a	string.  responseXML	returns	the	response	as	XML.  The	 responseXML	 property	 returns	 an	 XML	 document	 object,	 which	 can	 be		 examined	and	parsed	using	the	DOM	 Document	Object	Model .  	See	Appendix	B	for	a	complete	listing	of	the	HTML	DOM	Objects.  The	example	in	Figure	35.1	demonstrates	how	a	Web	page	can	fetch	information	 from	a	database	with	AJAX	technology.	The	selected	data	from	the	database	will	 this	time	be	converted	to	an	XML	document,	and	then	we	will	use	the	DOM	to	 extract	the	values	to	be	displayed.  The	preceding	example	contains	an	HTML	form,	several	 	elements	to	hold	 the	returned	data,	and	a	link	to	a	JavaScript:      Figure 35.1                 Select a Customer:  198                Chapter 35: aJaX responseXML example  <select name="customers" onchange="showCustomer this.   value ">   Alfreds Futterkiste    North South    Wolski Zajazd                                        The	 preceding	 example	 contains	 an	 HTML	 form	 with	 a	 drop-down	 box	 called	 customers.  When	 the	 user	 selects	 a	 customer	 in	 the	 drop-down	 box,	 a	 function	 called		 showCustomer  	is	executed.	The	execution	of	the	function	is	triggered	by	the	 onchange	event.	In	other	words.	each	time	the	user	changes	the	value	in	the	drop- down	box,	the	function	showCustomer  	is	called.  the aJaX Javascript  This	is	the	JavaScript	code	stored	in	the	file	selectcustomer_xml.js:  function showCustomer str   xmlhttp=GetXmlHttpObject  ;  if  xmlhttp==null   var xmlhttp  {    {    }    return;  var url="getcustomer_xml.asp";  url=url+"?q="+str;  url=url+"&sid="+Math.random  ;    alert  "Your browser does not support AJAX!" ;   continued  199                Learn Javascript and ajax with w3schools   continued   xmlhttp.onreadystatechange=stateChanged;  xmlhttp.open "GET",url,true ;  xmlhttp.send null ;  function stateChanged    if  xmlhttp.readyState==4     var xmlDoc=xmlhttp.responseXML.documentElement;    document.getElementById "companyname" .innerHTML=    xmlDoc.getElementsByTagName "compname" [0].childNodes[0].    document.getElementById "contactname" .innerHTML=    xmlDoc.getElementsByTagName "contname" [0].childNodes[0].    document.getElementById "address" .innerHTML=    xmlDoc.getElementsByTagName "address" [0].childNodes[0].    document.getElementById "city" .innerHTML=    xmlDoc.getElementsByTagName "city" [0].childNodes[0].node-    document.getElementById "country" .innerHTML=    xmlDoc.getElementsByTagName "country" [0].childNodes[0].  nodeValue;  nodeValue;  nodeValue;  Value;  nodeValue;  function GetXmlHttpObject    if  window.XMLHttpRequest        code for IE7+, Firefox, Chrome, Opera, Safari    return new XMLHttpRequest  ;  if  window.ActiveXObject        code for IE6, IE5    return new ActiveXObject "Microsoft.XMLHTTP" ;  return null;  200  }  {    {    }  }  {    {    }    {    }  }                Chapter 35: aJaX responseXML example  The	 showCustomer  	and	 GetXmlHttpObject  	functions	are	the	same	as	in	 previous	chapters.	The	stateChanged  	function	also	is	used	earlier	in	this	tuto- rial;	however,	this	time	we	return	the	result	as	an	XML	document	 with	response XML 	and	use	the	DOM	to	extract	the	values	we	want	to	be	displayed.  the aJaX server page  The	server	page	called	by	the	JavaScript	is	an	ASP	file	called	getcustomer_xml.asp.  The	page	is	written	in	VBScript	for	an	Internet	Information	Server	 IIS .	It	could	 easily	be	rewritten	in	PHP	or	some	other	server	language.  The	code	runs	a	query	against	a	database	and	returns	the	result	as	an	XML	docu- ment:  <%  response.expires=-1  response.contenttype="text xml"  sql="SELECT * FROM CUSTOMERS "  sql=sql & " WHERE CUSTOMERID='" & request.querystring "q"  &   "'"  on error resume next  set conn=Server.CreateObject "ADODB.Connection"   conn.Provider="Microsoft.Jet.OLEDB.4.0"  conn.Open Server.Mappath " db northwind.mdb"    set rs=Server.CreateObject "ADODB.recordset"   rs.Open sql, conn  if err   0 then    response.write err.description     set rs=nothing    set conn=nothing  else    response.write "<?xml version='1.0'   encoding='ISO-8859-1'?>"     response.write " "     response.write " " &rs.fields "companyname" & "<     response.write " " &rs.fields "contactname" & "<     response.write " " &rs.fields "address" & "   compname>"   contname>"    "    continued  201                Learn Javascript and ajax with w3schools   continued     response.write " " &rs.fields "city" & " "     response.write " " &rs.fields "country" & "    "     response.write " "   end if  %>  on error goto 0  Notice	the	second	line	in	the	ASP	code:	response.contenttype="text xml".	 The	ContentType	property	sets	the	HTTP	content	type	for	the	response	object.	 The	default	value	for	this	property	is	“text html”.	This	time	we	want	the	content	 type	to	be	XML.  Then	we	select	data	from	the	database	and	build	an	XML	document	with	the	data.  202                Appendix A  JAvAScript  ObJectS  in this Appendix  	  	 Array	Object  	  	 Boolean	Object  	  	 Date	Object  	  	 Math	Object  	  	 Number	Object  	  	 String	Object  	  	 RegExp	Object  	  	 Global	Properties	and	Functions  Array Object  The	Array	object	is	used	to	store	multiple	values	in	a	single	variable.  	For	a	tutorial	about	arrays,	see	Chapter	17,	“JavaScript	Array	Object.”  Array Object properties  property constructor length prototype  description Returns the function that created the Array object’s prototype Sets or returns the number of elements in an array Allows you to add properties and methods to an object  203                Learn JavaScript and Ajax with w3schools  Array Object Methods  Method concat   join   pop   push   reverse   shift   slice   sort   splice   toString   unshift    valueOf    description Joins two or more arrays, and returns a copy of the joined arrays Joins all elements of an array into a string Removes the last element of an array, and returns that element Adds new elements to the end of an array, and returns the new length Reverses the order of the elements in an array Removes the first element of an array, and returns that element Selects a part of an array, and returns the new array Sorts the elements of an array Adds Removes elements from an array Converts an array to a string, and returns the result Adds new elements to the beginning of an array, and returns the new  length Returns the primitive value of an array as values separated by commas  boolean Object  The	Boolean	object	is	used	to	convert	a	non-Boolean	value	to	a	Boolean	value	 true	 or	false .  	For	a	tutorial	about	the	Boolean	object,	see	Chapter	18,	“JavaScript	Bool-  ean	Object.”  boolean Object properties  property constructor prototype  description Returns the function that created the Boolean object’s prototype Allows you to add properties and methods to an object  boolean Object Methods  Method toString   valueOf    description Converts a Boolean value to a string, and returns the result Returns the primitive value of a Boolean object  date Object  The	Date	object	is	used	to	work	with	dates	and	times.  Date	objects	are	created	with	new	Date  .  There	are	four	ways	of	instantiating	a	date:  var d = new Date  ;  204                Appendix A: JavaScript Objects  var d = new Date milliseconds ;  var d = new Date dateString ;  var d = new Date year, month, day, hours, minutes, seconds,   milliseconds ;  	 For	 a	 tutorial	 about	 date	 and	 times,	 see	 Chapter	 16,	 “JavaScript	 Date	  Object.”  date Object properties  property constructor prototype  description Returns the function that created the Date object’s prototype Allows you to add properties and methods to an object  date Object Methods  Method getDate   getDay   getFullYear   getHours   getMilliseconds   getMinutes   getMonth   getSeconds   getTime    getTimezoneOffset    getUTCDate    getUTCDay    getUTCFullYear   getUTCHours   getUTCMilliseconds   getUTCMinutes   getUTCMonth   getUTCSeconds   getYear   parse    setDate    description Returns the day of the month  from 1–31  Returns the day of the week  from 0–6  Returns the year  four digits  Returns the hour  from 0–23  Returns the milliseconds  from 0–999  Returns the minutes  from 0–59  Returns the month  from 0–11  Returns the seconds  from 0–59  Returns the number of milliseconds since midnight January 1,  1970 Returns the time difference between GMT and local time in  minutes Returns the day of the month, according to universal time  from  1–31  Returns the day of the week, according to universal time  from  0–6  Returns the year, according to universal time  four digits  Returns the hour, according to universal time  from 0–23  Returns the milliseconds, according to universal time  from 0–999  Returns the minutes, according to universal time  from 0–59  Returns the month, according to universal time  from 0–11  Returns the seconds, according to universal time  from 0–59  Deprecated. Use the getFullYear   method instead Parses a date string and returns the number of milliseconds since  midnight of January 1, 1970 Sets the day of the month  from 1–31    continued   205                Learn JavaScript and Ajax with w3schools   continued  Method setFullYear   setHours   setMilliseconds   setMinutes   setMonth   setSeconds   setTime    setUTCDate   setUTCFullYear   setUTCHours   setUTCMilliseconds   setUTCMinutes   setUTCMonth   setUTCSeconds   setYear   toDateString   toGMTString   toLocaleDateString    toLocaleTimeString    toLocaleString   toString   toTimeString   toUTCString   UTC    valueOf    description Sets the year  four digits  Sets the hour  from 0–23  Sets the milliseconds  from 0–999  Set the minutes  from 0–59  Sets the month  from 0–11  Sets the seconds  from 0–59  Sets a date and time by adding or subtracting a specified number  of milliseconds to from midnight January 1, 1970 Sets the day of the month, according to universal time  from 1–31  Sets the year, according to universal time  four digits  Sets the hour, according to universal time  from 0–23  Sets the milliseconds, according to universal time  from 0–999  Set the minutes, according to universal time  from 0–59  Sets the month, according to universal time  from 0–11  Set the seconds, according to universal time  from 0–59  Deprecated. Use the setFullYear   method instead Converts the date portion of a Date object into a readable string Deprecated. Use the toUTCString   method instead Returns the date portion of a Date object as a string, using locale  conventions Returns the time portion of a Date object as a string, using locale  conventions Converts a Date object to a string, using locale conventions Converts a Date object to a string Converts the time portion of a Date object to a string Converts a Date object to a string, according to universal time Returns the number of milliseconds in a date string since mid- night of January 1, 1970, according to universal time Converts a Date to milliseconds. Same as getTime  .  Math Object  The	Math	object	allows	you	to	perform	mathematical	tasks.  Math	is	not	a	constructor.	All	properties methods	of	Math	can	be	called	by	using	 Math	as	an	object,	without	creating	it.  The	syntax	is	as	follows:  var x = Math.PI;    Returns PI  var y = Math.sqrt 16 ;    Returns the square root of 16  	 For	 a	 tutorial	 about	 the	 Math	 object,	 see	 Chapter	 19,	 “JavaScript	 Math	  Object.”  206                Math Object properties  Appendix A: JavaScript Objects  Math Object Methods  description Returns Euler’s number, the base of the natural logarithm  approx.  2.718  Returns the natural logarithm of 2  approx. 0.693  Returns the natural logarithm of 10  approx. 2.302  Returns the base-2 logarithm of E  approx. 1.442  Returns the base-10 logarithm of E  approx. 0.434  Returns PI  approx. 3.14159  Returns the square root of 1 2  approx. 0.707  Returns the square root of 2  approx. 1.414   description Returns the absolute value of x Returns the arccosine of x, in radians Returns the arcsine of x, in radians Returns the arctangent of x as a numeric value between –PI 2 and PI 2  radians Returns the arctangent of the quotient of its arguments Returns x, rounded upward to the nearest integer Returns the cosine of x  x is in radians  Returns the value of E to the power of x Returns x, rounded downward to the nearest integer Returns the natural logarithm  base E  of x Returns the number with the highest value Returns the number with the lowest value Returns the value of x to the power of y Returns a random number between 0 and 1 Rounds x to the nearest integer Returns the sine of x  x is in radians  Returns the square root of x Returns the tangent of x  x is in radians   number Object  The	Number	object	is	an	object	wrapper	for	primitive	numeric	values.  Number	objects	are	created	with	new	Number  .  The	syntax	is	as	follows:  var num = new Number value ;  property E  LN2 LN10 LOG2E LOG10E PI SQRT1_2 SQRT2  Method abs x  acos x  asin x   atan x   atan2 y,x  ceil x  cos x  exp x  floor x  log x  max x,y,z,...,n  min x,y,z,...,n  pow x,y  random   round x  sin x  sqrt x  tan x        207           Learn JavaScript and Ajax with w3schools  n O t e  Not-a-Number .  If the value parameter cannot be converted into a number, it returns NaN   number Object properties  property constructor MAX_VALUE MIN_VALUE NEGATIVE _INFINITY POSITIVE_INFINITY prototype  description Returns the function that created the Number object’s prototype Returns the largest number possible in JavaScript Returns the smallest number possible in JavaScript Represents negative infinity  returned on overflow  Represents infinity  returned on overflow  Allows you to add properties and methods to an object  number Object Methods  Method toExponential x  toFixed x  toPrecision x  toString   valueOf    description Converts a number to exponential notation Formats a number with x number of digits after the decimal point Formats a number to x significant digits Converts a Number object to a string Returns the primitive value of a Number object  String Object  The	String	object	is	used	to	manipulate	a	stored	piece	of	text.  String	objects	are	created	with	new	String  .  The	syntax	is	as	follows:  var txt = new String string ;  or	more	simply:  var txt = string;  	For	a	tutorial	about	the	String	object,	see	Chapter	15,	“JavaScript	String	  Object.”  String Object properties property constructor length prototype  description Returns the function that created the String object’s prototype Returns the length of a string Allows you to add properties and methods to an object  208                Appendix A: JavaScript Objects  String Object Methods  Method charAt   charCodeAt   concat   fromCharCode   indexOf    lastIndexOf    match    replace    search    slice   split   substr    substring   toLowerCase   toUpperCase   valueOf    description Returns the character at the specified index Returns the Unicode of the character at the specified index Joins two or more strings, and returns a copy of the joined strings Converts Unicode values to characters Returns the position of the first found occurrence of a specified value  in a string Returns the position of the last found occurrence of a specified value  in a string Searches for a match within the string using a regular expression.  Returns an array or null if no matches found. Searches for a match between a substring  or regular expression  and a  string, and replaces the matched substring with a new substring Searches for a match between a regular expression and a string, and  returns the position of the match or –1 if not found Extracts a part of a string and returns a new string Splits a string into an array of substrings Extracts the characters from a string, beginning at a specified start  position through the specified number of characters Extracts the characters from a string, between two specified indices Converts a string to lowercase letters Converts a string to uppercase letters Returns the primitive value of a String object  String HtML Wrapper Methods  The	 HTML	 wrapper	 methods	 return	 the	 string	 wrapped	 inside	 the	 appropriate	 HTML	tag.  description Creates an anchor Displays a string using a big font Displays a blinking string Displays a string in bold Displays a string using a fixed-pitch font Displays a string using a specified color Displays a string using a specified size Displays a string in italic Displays a string as a hyperlink Displays a string using a small font Displays a string with a strikethrough Displays a string as subscript text Displays a string as superscript text  Method anchor   big   blink   bold   fixed   fontcolor   fontsize   italics   link   small   strike   sub   sup         209           Learn JavaScript and Ajax with w3schools  regexp Object  A	regular	expression	is	an	object	that	describes	a	pattern	of	characters.  Regular	expressions	are	used	to	perform	pattern-matching	and	search-and-replace	 functions	on	text.  The	syntax	is	as	follows:  var txt=new RegExp pattern,modifiers ;  or	more	simply:  var txt= pattern modifiers;  	8	 Pattern	specifies	the	pattern	of	an	expression.  	8	 Modifiers	specify	whether	a	search	should	be	global,	case-sensitive,	and	so	on.  	For	a	tutorial	about	the	RegExp	object,	see	Chapter	20,	“JavaScript	RegExp	  Modifiers	are	used	to	perform	case-insensitive	and	global	searches:  description Perform case-insensitive matching Perform a global match  find all matches rather than stopping after  the first match  Perform multiline matching  Brackets	are	used	to	find	a	range	of	characters:  description Match any character between the brackets Match any character not between the brackets Match any digit from 0 to 9 Match any character from lowercase a to lowercase z Match any character from uppercase A to uppercase Z Match any character from lowercase a to uppercase Z Match any character in the given set Match any character outside the given set Match any of the alternatives specified  Object.”  Modifiers  Modifier i  g  m  brackets  expression [abc] [^abc] [0-9] [a-z] [A-Z] [a-Z] [adgk] [^adgk] [redbluegreen]  210                Appendix A: JavaScript Objects  Metacharacters  Metacharacters	are	characters	with	a	special	meaning:  description Find a single character, except newline or line terminator Match any alphanumeric character, including the underscore Match any nonalphanumeric character Find a digit Find a nondigit character Find a single whitespace character Find a single nonwhitespace character Match at the beginning end of a word Match not at the beginning end of a word Find a NUL character Find a new line  Find a form feed  Find a carriage return  Find a tab  Find a vertical tab  Find the character specified by an octal number xxx Find the character specified by a hexadecimal number dd Find the Unicode character specified by a hexadecimal number  xxxx  description Match the preceding character 1 or more times Match the preceding character 0 or more times Match the preceding character 0 or 1 time Where x is a positive integer, matches exactly n occurrences of the  preceding character Where x and y are positive integers, matches at least x and no more  than y occurrences of the preceding character Where x is a positive integer, matches at least n occurrences of the  preceding character Matches any string with n at the end of it Matches any string with n at the beginning of it Matches n only if followed by m Matches n only if not followed by m  Metacharacter . \w \W \d \D \s \S \b \B \0 \n \f \r \t \v \xxx \xdd \uxxxx  Quantifiers  Quantifier + * ? {x}  {x,y}  {x,}  n$ ^n n ?=m  n ?m        211           Learn JavaScript and Ajax with w3schools  regexp Object properties  description Specifies if the “g” modifier is set Specifies if the “i” modifier is set The index at which to start the next match Specifies if the “m” modifier is set The text of the RegExp pattern  regexp Object Methods  description Compiles a regular expression Tests for a match in a string. Returns a result array Tests for a match in a string. Returns true or false  property global ignoreCase lastIndex multiline source  Method compile   exec   test    JavaScript Global properties and  Functions  The	 JavaScript	 global	 properties	 and	 functions	 can	 be	 used	 with	 all	 the	 built-in	 JavaScript	objects.  JavaScript Global properties  property Infinity NaN undefined  description A numeric value that represents positive negative infinity “Not-a-Number” value Indicates that a variable has not been assigned a value  JavaScript Global Functions  Function decodeURI   decodeURIComponent   encodeURI   encodeURIComponent   escape    description Decodes a URI Decodes a URI component Encodes a URI Encodes a URI component Encodes a string Evaluates a string and executes it as if it were a JavaScript  expression  Determines whether a value is a finite number Determines whether a value is an illegal number Converts an object’s value to a number  eval    isFinite   isNaN   Number    212                Appendix A: JavaScript Objects  Function parseFloat   parseInt   String   unescape    description Parses a string and returns a floating point number Parses a string and returns an integer Converts an object’s value to a string Decodes an encoded string       213           HTML dOM OBjecTs  Appendix B  in This Appendix  	  	 Button	Object	 Push	Button   	  	 Form	Object  	  	 Frame IFrame	Object  	  	 Document	Object  	  	 Event	Object  	  	 Element	Object  	  	 Anchor	Object  	  	 Area	Object  	  	 Base	Object  	  	 Body	Object  	  	 Frameset	Object  	  	 Image	Object  	  	 Button	Object  	  	 Checkbox	Object  	  	 FileUpload	Object  	  	 Hidden	Object  	  	 Password	Object  	  	 Radio	Object  	  	 Reset	Object  	  	 Submit	Object  	  	 Text	Object  214                Appendix B: HTML dOM Objects  	  	 Link	Object  	  	 Meta	Object  	  	 Object	Object  	  	 Option	Object  	  	 Select	Object  	  	 Style	Object  	  	 Table	Object  	  	 TableCell	Object  	  	 TableRow	Object  	  	 Textarea	Object  The	 World	 Wide	 Web	 Consortium	  W3C 	 is	 an	 international	 community	 that	 develops	standards	to	ensure	the	long-term	growth	of	the	Web.	The	W3C	DOM	 page	is	located	at	http:  www.w3.org DOM .  document Object  Each	 HTML	 document	 loaded	 into	 a	 browser	 window	 becomes	 a	 Document	 object.  The	Document	object	provides	access	to	all	HTML	elements	in	a	page,	from	within	 a	script.  T i p through the window.document property.  The Document object is also part of the Window object and can be accessed   document Object collections  W3C:	W3C	Standard  collection anchors[] forms[] images[] links[]  description Returns an array of all the anchors in the document Returns an array of all the forms in the document Returns an array of all the images in the document Returns an array of all the links in the document  W3c Yes Yes Yes Yes       215           Learn javascript and Ajax with w3schools  document Object properties  property cookie  documentMode  domain  lastModified readyState  referrer  title URL  description Returns all name value pairs of cookies in the document Returns the mode used by the browser to render the docu- ment Returns the domain name of the server that loaded the docu- ment Returns the date and time the document was last modified Returns the  loading  status of the document Returns the URL of the document that loaded the current  document Sets or returns the title of the document Returns the full URL of the document  document Object Methods  getElementById   getElementsByName   getElementsByTagName    Method  close    open    write    writeln    description Closes the output stream previously opened with  document.open   Accesses the first element with the specified id Accesses all elements with a specified name Accesses all elements with a specified tagname Opens an output stream to collect the output from  document.write   or document.writeln   Writes HTML expressions or JavaScript code to a  document Same as write  , but adds a newline character after  each statement  W3c Yes  No  Yes  No No  Yes  Yes Yes  Yes  Yes Yes Yes  Yes  Yes  Yes  W3c  event Object  The	Event	object	gives	you	information	about	an	event	that	has	occurred.  The	Event	object	represents	the	state	of	an	event,	such	as	the	element	in	which	the	 event	occurred,	the	state	of	the	keyboard	keys,	the	location	of	the	mouse,	and	the	 state	of	the	mouse	buttons.  Events	are	normally	used	in	combination	with	functions,	and	the	function	will	not	 be	executed	before	the	event	occurs!  event Handlers  New	 to	 HTML	 4.0	 was	 the	 ability	 to	 let	 HTML	 events	 trigger	 actions	 in	 the	 browser,	like	starting	a	JavaScript	when	a	user	clicks	on	an	HTML	element.	Follow- ing	is	a	list	of	the	attributes	that	can	be	inserted	into	HTML	tags	to	define	event	 actions.  216                Appendix B: HTML dOM Objects  IE:	Internet	Explorer;	F:	Firefox;	O:	Opera;	W3C:	W3C	Standard.  Attribute onblur onchange onclick ondblclick  onerror  onfocus onkeydown onkeypress onkeyup onload onmousedown onmousemove onmouseout onmouseover onmouseup onresize onselect onunload  The event occurs when... An element loses focus The content of a field changes Mouse clicks an object Mouse double-clicks an object An error occurs when loading a document or an  image An element gets focus A keyboard key is pressed A keyboard key is pressed or held down A keyboard key is released A page or an image is finished loading A mouse button is pressed The mouse is moved The mouse is moved off an element The mouse is moved over an element A mouse button is released A window or frame is resized Text is selected The user exits the page  Mouse   Keyboard Attributes  F O W3c 1 1 1 1  Yes Yes Yes Yes  9 9 9 9  1  9  Yes  9  1 Yes 1 No Yes Yes 1 Yes 1 Yes 1 1 Yes Yes 1 Yes 1 Yes 1 Yes 1 1 Yes Yes 1 1 Yes  9 9 9 9 9 9 9 9 9 9 9  property  altKey  button  clientX  clientY  ctrlKey  metaKey  relatedTarget  screenX  screenY  shiftKey  description Returns whether the Alt key was pressed when an  event was triggered Returns which mouse button was clicked when an  event was triggered Returns the horizontal coordinate of the mouse  pointer when an event was triggered Returns the vertical coordinate of the mouse  pointer when an event was triggered Returns whether the Ctrl key was pressed when an  event was triggered Returns whether the meta key was pressed when  an event was triggered Returns the element related to the element that  triggered the event Returns the horizontal coordinate of the mouse  pointer when an event was triggered Returns the vertical coordinate of the mouse  pointer when an event was triggered Returns whether the Shift key was pressed when an  event was triggered  ie  F O W3c  1  1  1  1  1  1  1  1  1  9  9  9  9  9  9  9  9  9  9  Yes  Yes  Yes  Yes  Yes  Yes  Yes  Yes  Yes  Yes  No 1  ie 3 3 3 4  4  3 3 3 3 3 4 3 4 3 4 4 3 3  6  6  6  6  6  6  6  6  6       217           Learn javascript and Ajax with w3schools  Other event Attributes  property  bubbles  cancelable  currentTarget  eventPhase  target  timeStamp  type  description Returns a Boolean value that indicates whether an  event is a bubbling event Returns a Boolean value that indicates whether an  event can have its default action prevented Returns the element whose event listeners trig- gered the event Returns which phase of the event flow is currently  being evaluated Returns the element that triggered the event Returns the time stamp, in milliseconds, from the  epoch  system start or event trigger  Returns the name of the event  ie  F O W3c  No 1  No 1  No 1        No 1  No 1  6  1  9  9  9     9  9  9  Yes  Yes  Yes  Yes  Yes  Yes  Yes  element Object  The	collections,	properties,	methods,	and	events	in	the	following	tables	can	be	used	 on	all	HTML	elements.  element Object collections  W3C:	W3C	Standard.  collection attributes[] childNodes[]  description Returns an array of the attributes of an element Returns an array of child nodes for an element  element Object properties  description Sets or returns an accesskey for an element Sets or returns the class attribute of an element Returns the viewable height of the content on a page  not  including borders, margins, or scrollbars  Returns the viewable width of the content on a page  not  including borders, margins, or scrollbars  Sets or returns the text direction of an element Sets or returns the disabled attribute of an element Returns the first child of an element Sets or returns the height attribute of an element Sets or returns the id of an element Sets or returns the HTML contents  +text  of an element Sets or returns the language code for an element  property accessKey className  clientHeight  clientWidth  dir disabled firstChild height id innerHTML lang  218       W3c Yes Yes  W3c Yes Yes  Yes  Yes  Yes Yes Yes Yes Yes Yes Yes           Appendix B: HTML dOM Objects  property lastChild length nextSibling nodeName nodeType nodeValue  offsetHeight  offsetLeft  offsetParent  offsetTop  offsetWidth  ownerDocument parentNode previousSibling  scrollHeight  scrollLeft  scrollTop  scrollWidth  style tabIndex tagName title width  W3c Yes Yes Yes Yes Yes Yes  No  Yes  Yes  description Returns the last child of an element Does not apply to all objects. See specific object type. Returns the element immediately following an element Returns the tagname of an element  in uppercase  Returns the type of the element Returns the value of the element Returns the height of an element, including borders and pad- ding if any, but not margins Returns the horizontal offset position of the current element  relative to its offset container Returns the offset container of an element Returns the vertical offset position of the current element  relative to its offset container Returns the width of an element, including borders and pad- ding if any, but not margins Returns the root element  document object  for an element Returns the parent node of an element Returns the element immediately before an element Returns the entire height of an element  including areas hid- den with scrollbars  Returns the distance between the actual left edge of an ele- ment and its left edge currently in view Returns the distance between the actual top edge of an ele- ment and its top edge currently in view Returns the entire width of an element  including areas hid- den with scrollbars  Yes Sets or returns the style attribute of an element Sets or returns the tab order of an element Yes Returns the tagname of an element as a string  in uppercase  Yes Yes Sets or returns the title attribute of an element Sets or returns the width attribute of an element Yes  Yes Yes Yes  Yes  Yes  Yes  Yes  Yes  No  element Object Methods  Method appendChild    description Adds a new child element to the end of the list of  children of the element Removes focus from an element Executes a click on an element Clones an element Gives focus to an element Returns the value of an attribute  blur   click   cloneNode   focus   getAttribute   getElementsByTagName   Accesses all elements with a specified tagname  W3c  Yes  Yes Yes Yes Yes Yes Yes  219   continued                 Learn javascript and Ajax with w3schools  element Object events  description Returns whether an element has any child elements Inserts a new child element before an existing child  element Returns an element based on its index within the  document tree Puts all text nodes underneath this element  including  attributes  into a “normal” form where only structure   for example, elements, comments, processing instruc- tions, CDATA sections, and entity references  separates  Text nodes, that is, there are neither adjacent Text  nodes nor empty Text nodes Removes a specified attribute from an element Removes a child element Replaces a child element Adds a new attribute to an element Converts an element to a string  W3c Yes  Yes  Yes  Yes  Yes Yes Yes Yes Yes  description When an element loses focus When a mouse clicks on an element When a mouse double-clicks on an element When an element gets focus When a keyboard key is pressed When a keyboard key is pressed or held down When a keyboard key is released When a mouse button is pressed When the mouse is moved When the mouse cursor leaves an element When the mouse cursor enters an element When a mouse button is released When an element is resized  W3c Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes  Anchor Object  The	Anchor	object	represents	an	HTML	hyperlink.  For	each	 	tag	in	an	HTML	document,	an	Anchor	object	is	created.  An	anchor	allows	you	to	create	a	link	to	another	document	 with	the	href	attri- bute 	or	to	a	different	point	in	the	same	document	 with	the	name	attribute .  You	can	access	an	anchor	by	using	getElementById  	or	by	searching	through	 the	anchors[]	array	of	the	Document	object.   continued  Method hasChildNodes   insertBefore    item    normalize    removeAttribute   removeChild   replaceChild   setAttribute   toString    event onblur onclick ondblclick onfocus onkeydown onkeypress onkeyup onmousedown onmousemove onmouseout onmouseover onmouseup onresize  220                Appendix B: HTML dOM Objects  Anchor Object properties  W3C:	W3C	Standard.  property charset href hreflang name rel rev target type  description Sets or returns the value of the charset attribute of a link Sets or returns the value of the href attribute of a link Sets or returns the value of the hreflang attribute of a link Sets or returns the value of the name attribute of a link Sets or returns the value of the rel attribute of a link Sets or returns the value of the rev attribute of a link Sets or returns the value of the target attribute of a link Sets or returns the value of the type attribute of a link  W3c Yes Yes Yes Yes Yes Yes Yes Yes  standard properties, Methods, and events  The	Anchor	object	also	supports	the	standard	properties,	methods,	and	events.  Area Object  The	Area	object	represents	an	area	inside	an	HTML	image	map	 an	image	map	is	 an	image	with	clickable	areas .  For	each	 	tag	in	an	HTML	document,	an	Area	object	is	created.  Area Object properties  W3C:	W3C	Standard.  property alt coords hash host hostname href noHref pathname port protocol search shape target  description Sets or returns the value of the alt attribute of an area Sets or returns the value of the coords attribute of an area Sets or returns the anchor part of the href attribute value Sets or returns the hostname:port part of the href attribute value Sets or returns the hostname part of the href attribute value Sets or returns the value of the href attribute of an area Sets or returns the value of the nohref attribute of an area Sets or returns the pathname part of the href attribute value Sets or returns the port part of the href attribute value Sets or returns the protocol part of the href attribute value Sets or returns the querystring part of the href attribute value Sets or returns the value of the shape attribute of an area Sets or returns the value of the target attribute of an area  W3c Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes  221                Learn javascript and Ajax with w3schools  standard properties, Methods, and events  The	Area	object	also	supports	the	standard	properties,	methods,	and	events.  Base Object  The	Base	object	represents	an	HTML	base	element.  The	base	element	is	used	to	specify	a	default	address	or	a	default	target	for	all	links	 on	a	page.  For	each	 	tag	in	an	HTML	document,	a	Base	object	is	created.  Base Object properties  W3C:	W3C	Standard.  property href target  description Sets or returns the value of the href attribute in a base element  Sets or returns the value of the target attribute in a base element  W3c Yes Yes  standard properties, Methods, and events  The	Base	object	also	supports	the	standard	properties,	methods,	and	events.  Body Object  The	Body	object	represents	the	HTML	body	element.  The	Body	element	defines	a	document’s	body.  The	Body	element	contains	all	the	contents	of	an	HTML	document,	such	as	text,	 hyperlinks,	images,	tables,	lists,	and	so	on.  Body Object properties  W3C:	W3C	Standard.  property aLink  background  bgColor link text vLink  description Sets or returns the value of the alink attribute of the body element Sets or returns the value of the background attribute of the body  element Sets or returns the value of the bgcolor attribute of the body element Yes Yes Sets or returns the value of the link attribute of the body element Sets or returns the value of the text attribute of the body element Yes Yes Sets or returns the value of the vlink attribute of the body element  Yes  W3c Yes  222                Appendix B: HTML dOM Objects  standard properties, Methods, and events  The	Body	object	also	supports	the	standard	properties,	methods,	and	events.  Button Object  push Button  The	Button	object	represents	a	Button	Object	 Push	Button .  For	each	 	tag	in	an	HTML	document,	a	Button	object	is	created.  Inside	an	HTML	Button	element	you	can	put	content	like	text	or	images.	This	is	 the	difference	between	this	element	and	buttons	created	with	the	input	element.  Button Object properties  W3C:	W3C	Standard.  property form name type value  description Returns a reference to the form that contains a button Sets or returns the value of the name attribute of a button Sets or returns the type of a button Sets or returns the value of the value attribute of a button  W3c Yes Yes Yes Yes  standard properties, Methods, and events  The	Button	object	also	supports	the	standard	properties,	methods,	and	events.  Form Object  The	Form	object	represents	an	HTML	form.  For	each	 	tag	in	an	HTML	document,	a	Form	object	is	created.  Forms	are	used	to	collect	user	input	and	contain	input	elements	like	text	fields,	 check	boxes,	radio	buttons,	Submit	buttons,	and	more.	A	form	also	can	contain	 select	menus	and	textarea,	fieldset,	legend,	and	label	elements.  Forms	are	used	to	pass	data	to	a	server.  Form Object collections  W3C:	W3C	Standard.  collection elements[]  description Returns an array of all elements in a form  W3c Yes  223                Learn javascript and Ajax with w3schools  Form Object properties  property acceptCharset action enctype length method name target  W3c  description Sets or returns the value of the accept-charset attribute in a form Yes Yes Sets or returns the value of the action attribute in a form Yes Sets or returns the value of the enctype attribute in a form Returns the number of elements in a form Yes Yes Sets or returns the value of the method attribute in a form Yes Sets or returns the value of the name attribute in a form Sets or returns the value of the target attribute in a form Yes  Form Object Methods  Method reset   submit    description Resets a form Submits a form  Form Object events  event onreset onsubmit  The event occurs when... The Reset button is clicked The Submit button is clicked  W3c Yes Yes  W3c Yes Yes  standard properties, Methods, and events  The	Form	object	also	supports	the	standard	properties,	methods,	and	events.  Frame iFrame Object  The	Frame	object	represents	an	HTML	frame.  The	 	tag	defines	one	particular	window	 frame 	within	a	frameset.  For	each	 	tag	in	an	HTML	document,	a	Frame	object	is	created.  The	IFrame	object	represents	an	HTML	inline	frame.  The	 	tag	defines	an	inline	frame	that	contains	another	document.  For	each	 	tag	in	an	HTML	document,	an	IFrame	object	is	created.  224                Appendix B: HTML dOM Objects  Frame iFrame Object properties  W3C:	W3C	Standard.  property align contentDocument contentWindow  frameBorder  height  longDesc  marginHeight  marginWidth  name  noResize  scrolling  src width  description Sets or returns the value of the align attribute in an iframe Returns the document object generated by a frame iframe Returns the window object generated by a frame iframe Sets or returns the value of the frameborder attribute in a  frame iframe Sets or returns the value of the height attribute in an iframe Sets or returns the value of the longdesc attribute in a frame  iframe Sets or returns the value of the marginheight attribute in a  frame iframe Sets or returns the value of the marginwidth attribute in a  frame iframe Sets or returns the value of the name attribute in a frame  iframe Sets or returns the value of the noresize attribute in a frame Sets or returns the value of the scrolling attribute in a frame  iframe Sets or returns the value of the src attribute in a frame iframe Sets or returns the value of the width attribute in an iframe  W3c Yes Yes No  Yes  Yes  Yes  Yes  Yes  Yes  Yes  Yes  Yes Yes  standard properties, Methods, and events  The	Frame	and	IFrame	objects	also	support	the	standard	properties,	methods,	and	 events.  Frameset Object  The	Frameset	object	represents	an	HTML	frameset.  The	HTML	frameset	element	holds	two	or	more	frame	elements.	Each	frame	ele- ment	holds	a	separate	document.  The	HTML	frameset	element	states	only	how	many	columns	or	rows	there	will	be	 in	the	frameset.  Frameset Object properties  W3C:	W3C	Standard.  property border cols rows  description Sets or returns the width of the border between frames Sets or returns the value of the cols attribute in a frameset Sets or returns the value of the rows attribute in a frameset  W3c Yes Yes Yes  225                Learn javascript and Ajax with w3schools  Frameset Object events  event onload  description Script to be run when a document loads  W3c Yes  standard properties, Methods, and events  The	Frameset	object	also	supports	the	standard	properties,	methods,	and	events.  image Object  The	Image	object	represents	an	embedded	image.  For	each	 	tag	in	an	HTML	document,	an	Image	object	is	created.  image Object properties  W3C:	W3C	Standard.  property align  alt  border complete height href hspace isMap longDesc  lowsrc name src useMap  vspace width  description Sets or returns how to align an image according to the surrounding  text Sets or returns an alternate text to be displayed if a browser cannot  show an image Sets or returns the border around an image Returns whether the browser has finished loading the image Sets or returns the height of an image     W3c  Yes  Yes  Yes No Yes    Sets or returns the white space on the left and right side of the image Yes Returns whether an image is a server-side image map Yes Sets or returns a URL to a document containing a description of the  image Sets or returns a URL to a low-resolution version of an image Sets or returns the name of an image Sets or returns the URL of an image Sets or returns the value of the usemap attribute of a client-side im- age map Sets or returns the white space on the top and bottom of the image Sets or returns the width of an image  No Yes Yes  Yes Yes  Yes  Yes  226                Appendix B: HTML dOM Objects  image Object events  event onabort onerror onload  The event occurs when... Loading of an image is interrupted An error occurs when loading an image An image is finished loading  W3c Yes Yes Yes  standard properties, Methods, and events  The	Image	object	also	supports	the	standard	properties,	methods,	and	events.  Button Object  The	Button	object	represents	a	button	in	an	HTML	form.  For	 each	 instance	 of	 an	  	 tag	 in	 an	 HTML	 form,	 a	 Button	object	is	created.  You	can	access	a	button	by	searching	through	the	elements[]	array	of	the	form	or	 by	using	document.getElementById  .  Button Object properties  W3C:	W3C	Standard.  property alt  disabled form name type value  description Sets or returns an alternate text to display if a browser does not sup- port buttons Sets or returns whether a button should be disabled Returns a reference to the form that contains the button Sets or returns the name of a button Returns the type of form element a button is Sets or returns the text that is displayed on the button  W3c  Yes  Yes Yes Yes Yes Yes  standard properties, Methods, and events  The	Button	object	also	supports	the	standard	properties,	methods,	and	events.  checkbox Object  The	Checkbox	object	represents	a	check	box	in	an	HTML	form.  For	each	 	tag	in	an	HTML	form,	a	Checkbox	object	 is	created.  You	 can	 access	 a	 check	 box	 by	 searching	 through	 the	 elements[]	 array	 of	 the	 form,	or	by	using	document.getElementById  .       227           Learn javascript and Ajax with w3schools  checkbox Object properties  W3C:	W3C	Standard.  property alt  checked defaultChecked disabled form name type value  description Sets or returns an alternate text to display if a browser does not  support check boxes Sets or returns whether a check box should be checked Returns the default value of the checked attribute Sets or returns whether a check box should be disabled Returns a reference to the form that contains the check box Sets or returns the name of a check box Returns the type of form element a check box is Sets or returns the value of the value attribute of a check box  W3c  Yes  Yes Yes Yes Yes Yes Yes Yes  standard properties, Methods, and events  The	Checkbox	object	also	supports	the	standard	properties,	methods,	and	events.  FileUpload Object  For	each	  	tag	in	an	HTML	form,	a	FileUpload	object	is	 created.  You	can	access	a	FileUpload	object	by	searching	through	the	elements[]	array	of	 the	form	or	by	using	document.getElementById  .  FileUpload Object properties  W3C:	W3C	Standard.  Property accept  alt  Description Sets or returns a comma-separated list of MIME types that indicates  the MIME type of the file transfer Sets or returns an alternate text to display if the browser does not  support    defaultValue Sets or returns the initial value of the FileUpload object disabled form name type  Sets or returns whether the FileUpload object should be disabled Returns a reference to the form that contains the FileUpload object Sets or returns the name of the FileUpload object Returns the type of the form element. For a FileUpload object it will  be “file” Returns the filename of the FileUpload object after the text is set by  user input  value  W3C  Yes  Yes  Yes Yes Yes Yes  Yes  Yes  228                Appendix B: HTML dOM Objects  FileUpload Object Methods  Method select    description Selects the FileUpload object  W3c Yes  standard properties, Methods, and events  The	FileUpload	object	also	supports	the	standard	properties,	methods,	and	events.  Hidden Object  The	Hidden	object	represents	a	hidden	input	field	in	an	HTML	form.  For	each	 	tag	in	an	HTML	form,	a	Hidden	object	is	 created.  You	can	access	a	hidden	input	field	by	searching	through	the	elements[]	array	of	 the	form,	or	by	using	document.getElementById  .  Hidden Object properties  W3C:	W3C	Standard.  property alt  form name type value  description Sets or returns an alternate text to display if a browser does not sup- port hidden fields Returns a reference to the form that contains the hidden field Sets or returns the name of a hidden field Returns the type of form element a hidden input field is Sets or returns the value of the value attribute of the hidden field  W3c  Yes  Yes Yes Yes Yes  standard properties, Methods, and events  The	Hidden	object	also	supports	the	standard	properties,	methods,	and	events.  password Object  The	Password	object	represents	a	password	field	in	an	HTML	form.  For	each	 	tag	in	an	HTML	form,	a	Password	object	 is	created.  You	can	access	a	password	field	by	searching	through	the	elements[]	array	of	the	 form	or	by	using	document.getElementById  .       229           Learn javascript and Ajax with w3schools  password Object properties  W3C:	W3C	Standard.  property alt  description Sets or returns an alternate text to display if a browser does not sup- port password fields  W3c  Yes  defaultValue Sets or returns the default value of a password field disabled form maxLength  Sets or returns whether a password field should be disabled Returns a reference to the form that contains the password field Sets or returns the maximum number of characters in a password  field Yes Sets or returns the name of a password field Yes Sets or returns whether a password field should be read-only Yes Sets or returns the size of a password field Yes Returns the type of form element a password field is Sets or returns the value of the value attribute of the password field Yes  name readOnly size type value  Yes Yes Yes  Yes  password Object Methods  Method select    description Selects the text in a password field  W3c Yes  standard properties, Methods, and events  The	Password	object	also	supports	the	standard	properties,	methods,	and	events.  Radio Object  The	Radio	object	represents	a	radio	button	in	an	HTML	form.  For	 each	  	 tag	 in	 an	 HTML	 form,	 a	 Radio	 object	 is	 created.  You	can	access	a	Radio	object	by	searching	through	the	elements[]	array	of	the	 form	or	by	using	document.getElementById  .  Radio Object properties  W3C:	W3C	Standard.  property alt  description Sets or returns an alternate text to display if a browser does not  support radio buttons checked Sets or returns the state of a radio button defaultChecked Returns the default state of a radio button  W3c  Yes  Yes Yes  230                Appendix B: HTML dOM Objects  property disabled form name type value  W3c description Yes Sets or returns whether a radio button should be disabled Yes Returns a reference to the form that contains the radio button Yes Sets or returns the name of a radio button Returns the type of form element a radio button is Yes Sets or returns the value of the value attribute of the radio button Yes  standard properties, Methods, and events  The	Radio	object	also	supports	the	standard	properties,	methods,	and	events.  Reset Object  The	Reset	object	represents	a	reset	button	in	an	HTML	form.  For	 each	  	 tag	 in	 an	 HTML	 form,	 a	 Reset	 object	 is	 created.  You	can	access	a	reset	button	by	searching	through	the	elements[]	array	of	the	 form	or	by	using	document.getElementById  .  Reset Object properties  W3C:	W3C	Standard.  property alt  disabled form name type value  description Sets or returns an alternate text to display if a browser does not sup- port reset buttons Sets or returns whether a reset button should be disabled Returns a reference to the form that contains the reset button Sets or returns the name of a reset button Returns the type of form element a reset button is Sets or returns the text that is displayed on a reset button  W3c  Yes  Yes Yes Yes Yes Yes  standard properties, Methods, and events  The	Reset	object	also	supports	the	standard	properties,	methods,	and	events.  submit Object  The	Submit	object	represents	a	submit	button	in	an	HTML	form.  For	each	  	tag	in	an	HTML	form,	a	Submit	object	is	 created.  Example:	Form	validation       231           Learn javascript and Ajax with w3schools  You	can	access	a	submit	button	by	searching	through	the	elements[]	array	of	the	 form	or	by	using	document.getElementById  .  submit Object properties  W3C:	W3C	Standard.  property alt  disabled form name type value  description Sets or returns an alternate text to display if a browser does not sup- port submit buttons Sets or returns whether a submit button should be disabled Returns a reference to the form that contains the submit button Sets or returns the name of a submit button Returns the type of form element a submit button is Sets or returns the text that is displayed on a submit button  W3c  Yes  Yes Yes Yes Yes Yes  standard properties, Methods, and events  The	Submit	object	also	supports	the	standard	properties,	methods,	and	events.  Text Object  The	Text	object	represents	a	text-input	field	in	an	HTML	form.  For	each	 	tag	in	an	HTML	form,	a	Text	object	is	created.  You	can	access	a	text-input	field	by	searching	through	the	elements[]	array	of	the	 form,	or	by	using	document.getElementById  .  Text Object properties  W3C:	W3C	Standard.  property alt  defaultValue disabled form maxLength name readOnly size type value  W3c  description Sets or returns an alternate text to display if a browser does not sup- port text fields Sets or returns the default value of a text field Sets or returns whether a text field should be disabled Returns a reference to the form that contains the text field Sets or returns the maximum number of characters in a text field Sets or returns the name of a text field Sets or returns whether a text field should be read-only Sets or returns the size of a text field Returns the type of form element a text field is Sets or returns the value of the value attribute of a text field  Yes  Yes Yes Yes Yes Yes Yes Yes Yes Yes  232                Appendix B: HTML dOM Objects  Text Object Methods  Method select    description Selects the content of a text field  W3c Yes  standard properties, Methods, and events  The	Text	object	also	supports	the	standard	properties,	methods,	and	events.  Link Object  The	Link	object	represents	an	HTML	link	element.  A	link	element	defines	the	relationship	between	two	linked	documents.  The	link	element	is	defined	in	the	head	section	of	an	HTML	document.  Link Object properties  W3C:	W3C	Standard.  property charset disabled href hreflang media name rel  rev  type  description Sets or returns the character encoding of the target URL Sets or returns whether the target URL should be disabled Sets or returns the URL of a linked resource Sets or returns the base language of the target URL Sets or returns on what device the document will be displayed Sets or returns the name of a   element Sets or returns the relationship between the current document and  the target URL Sets or returns the relationship between the target URL and the cur- rent document Sets or returns the MIME type of the target URL  W3c Yes Yes Yes Yes Yes Yes  Yes  Yes  Yes  standard properties, Methods, and events  The	Link	object	also	supports	the	standard	properties,	methods,	and	events.  Meta Object  The	Meta	object	represents	an	HTML	meta	element.  Metadata	is	information	about	data.  The	 	tag	provides	metadata	about	the	HTML	document.	Metadata	will	not	 be	displayed	on	the	page,	but	will	be	machine	parsable.       233           Learn javascript and Ajax with w3schools  Meta	elements	are	typically	used	to	specify	page	description,	keywords,	author	of	 the	document,	last	modified,	and	other	metadata.  The	 	tag	always	goes	inside	the	head	element.  Meta Object properties  W3C:	W3C	Standard.  property content  httpEquiv name scheme  description Sets or returns the value of the content attribute of a     element Connects the content attribute to an HTTP header Connects the content attribute to a name Sets or returns the format to be used to interpret the value of the  content attribute  W3c  Yes  Yes Yes  Yes  standard properties, Methods, and events  The	Meta	object	also	supports	the	standard	properties,	methods,	and	events.  Object Object  The	Object	object	represents	an	HTML	object	element.  The	  	tag	is	used	to	include	objects	such	as	images,	audio,	videos,	Java	 applets,	ActiveX,	PDF,	and	Flash	into	a	Web	page.  Object Object properties  W3C:	W3C	Standard.  description Sets or returns the alignment of the object according to the sur- rounding text Sets or returns a string that can be used to implement your own  archive functionality for the object Sets or returns the border around the object Sets or returns the URL of the file that contains the compiled Java  class Sets or returns the URL of the component Sets or retrieves the Internet media type for the code associated with  the object. Read only. A URL specifying the location of the object’s data Declare  for future reference , but do not instantiate, this object Returns a reference to the object’s parent form  W3c  Yes  Yes  Yes  Yes  Yes  Yes  Yes Yes Yes  property align  archive  border code  codeBase codeType  data declare form  234                Appendix B: HTML dOM Objects  property height hspace name standby type  useMap vspace width  description Sets or returns the height of the object Sets or returns the horizontal margin of the object Sets or returns the name of the object Sets or returns a message when loading the object Sets or returns the content type for data downloaded via the data  attribute Use client-side image map Sets or returns the vertical margin of the object Sets or returns the width of the object  W3c Yes Yes Yes Yes  Yes  Yes Yes Yes  standard properties, Methods, and events  The	Object	object	also	supports	the	standard	properties,	methods,	and	events.  Option Object  The	Option	object	represents	an	option	in	a	drop-down	list	in	an	HTML	form.  For	each	 	tag	in	an	HTML	form,	an	Option	object	is	created.  You	can	access	an	Option	object	by	searching	through	the	elements[]	array	of	the	 form,	or	by	using	document.getElementById  .  Option Object properties  W3C:	W3C	Standard.  property defaultSelected disabled form index label selected text value  description Returns the default value of the selected attribute Sets or returns whether an option should be disabled Returns a reference to the form that contains an option Returns the index position of an option in a drop-down list Sets or returns a label for an option  only for option-groups  Sets or returns the value of the selected attribute Sets or returns the text value of an option Sets or returns the value to be sent to the server  W3c Yes Yes Yes Yes Yes Yes Yes Yes  standard properties, Methods, and events  The	Option	object	also	supports	the	standard	properties,	methods,	and	events.       235           Learn javascript and Ajax with w3schools  select Object  The	Select	object	represents	a	drop-down	list	in	an	HTML	form.  For	each	 	tag	in	an	HTML	form,	a	Select	object	is	created.  You	can	access	a	Select	object	by	searching	through	the	elements[] array	of	the	 form	or	by	using	document.getElementById  .  select Object collections  W3C:	W3C	Standard.  collection options[]  description Returns an array of all the options in a drop-down list  W3c Yes  select Object properties  property disabled form length multiple name selectedIndex  size type  W3c description Yes Sets or returns whether a drop-down list should be disabled Returns a reference to the form that contains the drop-down list Yes Yes Returns the number of options in a drop-down list Yes Sets or returns whether multiple items can be selected Sets or returns the name of a drop-down list Yes Sets or returns the index of the selected option in a drop-down  list Sets or returns the number of visible rows in a drop-down list Returns the type of form element a drop-down list is  Yes Yes  Yes  select Object Methods  Method add   remove    description Adds an option to a drop-down list Removes an option from a drop-down list  W3c Yes Yes  standard properties, Methods, and events  The	Select	object	also	supports	the	standard	properties,	methods,	and	events.  style Object  The	Style	object	represents	an	individual	style	statement.  The	Style	object	can	be	accessed	from	the	document	or	from	the	elements	to	which	 that	style	is	applied.  236                Appendix B: HTML dOM Objects  Syntax	for	using	the	Style	object	properties:  document.getElementById "id" .style.property="value"  The	Style	object	property	categories	are	as	follows:  	8	 Background  	8	 Border	and	Margin  	8	 Layout  	8	 List  	8	 Misc  	8	 Positioning  	8	 Printing  	8	 Table  	8	 Text  Background properties  W3C:	W3C	Standard.  property background backgroundAttachment  backgroundColor backgroundImage backgroundPosition backgroundPositionX  backgroundPositionY  backgroundRepeat  description Sets all background properties Sets whether a background-image is fixed or scrolls  with the page Sets the background-color of an element Sets the background-image of an element Sets the starting position of a background-image Sets the x-coordinates of the backgroundPosition  property Sets the y-coordinates of the backgroundPosition  property Sets if how a background-image will be repeated  Border and Margin properties  property border borderBottom borderBottomColor borderBottomStyle borderBottomWidth  description Sets all properties for the four borders Sets all properties for the bottom border Sets the color of the bottom border Sets the style of the bottom border Sets the width of the bottom border  W3c Yes  Yes  Yes Yes Yes  No  No  Yes  W3c Yes Yes Yes Yes Yes   continued   237                Learn javascript and Ajax with w3schools  W3c  description Sets the color of all four borders  can have up to four colors  Yes Yes Sets all properties for the left border Yes Sets the color of the left border Sets the style of the left border Yes Yes Sets the width of the left border Yes Sets all properties for the right border Yes Sets the color of the right border Sets the style of the right border Yes Sets the width of the right border Yes Sets the style of all four borders  can have up to four styles  Yes Yes Sets all properties for the top border Yes Sets the color of the top border Sets the style of the top border Yes Sets the width of the top border Yes Sets the width of all four borders  can have up to four  widths  Sets the margins of an element  can have up to four values  Yes Yes Sets the bottom margin of an element Yes Sets the left margin of an element Yes Sets the right margin of an element Sets the top margin of an element Yes Yes Sets all outline properties Yes Sets the color of the outline around a element Yes Sets the style of the outline around an element Sets the width of the outline around an element Yes Sets the padding of an element  can have up to four values  Yes Yes Sets the bottom padding of an element Yes Sets the left padding of an element Yes Sets the right padding of an element Sets the top padding of an element Yes  Yes  description Sets on which sides of an element other floating elements  are not allowed Sets the shape of an element Sets meta-information Sets a list of counter names, followed by an integer. The  integer indicates by how much the counter is incremented  for every occurrence of the element. The default is 1 Sets a list of counter names, followed by an integer. The  integer gives the value that the counter is set to on each  occurrence of the element. The default is 0   W3c  Yes  Yes Yes  Yes  Yes   continued  property borderColor borderLeft borderLeftColor borderLeftStyle borderLeftWidth borderRight borderRightColor borderRightStyle borderRightWidth borderStyle borderTop borderTopColor borderTopStyle borderTopWidth borderWidth  margin marginBottom marginLeft marginRight marginTop outline outlineColor outlineStyle outlineWidth padding paddingBottom paddingLeft paddingRight paddingTop  property clear  clip content counterIncrement  counterReset  238       Layout properties           property cssFloat  cursor direction display height markerOffset  marks  maxHeight maxWidth minHeight minWidth overflow  verticalAlign visibility width  property cssText  property bottom  left  position  Appendix B: HTML dOM Objects  W3c  description Sets where an image or a text will appear  float  in another  element Sets the type of cursor to be displayed Sets the text direction of an element Sets how an element will be displayed Sets the height of an element Sets the distance between the nearest border edges of a  marker box and its principal box Sets whether cross marks or crop marks should be rendered  just outside the page box edge  Sets the maximum height of an element Sets the maximum width of an element Sets the minimum height of an element Sets the minimum width of an element Specifies what to do with content that does not fit in an  element box Sets the vertical alignment of content in an element Sets whether an element should be visible Sets the width of an element  Yes  Yes Yes Yes Yes  Yes  Yes  Yes Yes Yes Yes  Yes  Yes Yes Yes  List properties  property listStyle listStyleImage listStylePosition listStyleType  description Sets all the properties for a list Sets an image as the list-item marker Positions the list-item marker Sets the list-item marker type  Misc properties  description Contains the entire contents of the stylesheet. ie only  property  positioning properties  description Sets how far the bottom edge of an element is above be- low the bottom edge of the parent element Sets how far the left edge of an element is to the right left  of the left edge of the parent element Places an element in a static, relative, absolute, or fixed posi- tion    W3c  Yes  Yes  Yes  W3c Yes Yes Yes Yes  W3c      continued   239                Learn javascript and Ajax with w3schools   continued  property right  top  zIndex  description Sets how far the right edge of an element is to the left right  of the right edge of the parent element Sets how far the top edge of an element is above below the  top edge of the parent element Sets the stack order of an element  Yes  Yes  Yes  W3c  printing properties  property orphans  page pageBreakAfter pageBreakBefore pageBreakInside size widows  description Sets the minimum number of lines for a paragraph that  must be left at the bottom of a page Sets a page type to use when displaying an element Sets the page-breaking behavior after an element Sets the page-breaking behavior before an element Sets the page-breaking behavior inside an element Sets the orientation and size of a page Sets the minimum number of lines for a paragraph that  must be left at the top of a page  W3c  Yes  Yes Yes Yes Yes Yes  Yes  Table properties  description Sets whether the table borders are collapsed into a single  border or detached as in standard HTML Sets the distance that separates cell borders Sets the position of the table caption Sets whether to show empty cells in a table Sets the algorithm used to display the table cells, rows, and  columns  W3c  Yes  Yes Yes Yes  Yes  Text properties  description Sets the color of the text Sets all font properties Sets the font of an element Sets the font-size of an element Sets adjusts the size of text Sets how to condense or stretch a font Sets the font-style of an element Displays text in a small-caps font Sets the boldness of the font Sets the space between characters Sets the distance between lines  W3c Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes  property borderCollapse  borderSpacing captionSide emptyCells tableLayout  property color font fontFamily fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontWeight letterSpacing lineHeight  240                Appendix B: HTML dOM Objects  property quotes textAlign textDecoration textIndent textShadow textTransform unicodeBidi whiteSpace wordSpacing  description Sets which quotation marks to use in text Aligns the text Sets the decoration of text Indents the first line of text Sets the shadow effect of text Sets capitalization effect on text Sets the Unicode bidirectional property Sets how to handle line breaks and white space in text Sets the space between words in a text  Table Object  The	Table	object	represents	an	HTML	table.  For	each	 	tag	in	an	HTML	document,	a	Table	object	is	created.  Table Object collections  W3C:	W3C	Standard.  collection description cells[] rows[] tBodies[]  Returns an array containing each cell in a table Returns an array containing each row in a table Returns an array containing each tbody in a table  Table Object properties  property border caption cellPadding Sets or returns the amount of space between the cell border and cell   description Sets or returns the width of the table border Sets or returns the caption of a table  W3c Yes Yes  content  cellSpacing Sets or returns the amount of space between the cells in a table frame rules summary tFoot tHead width  Sets or returns the outer borders of a table Sets or returns the inner borders of a table Sets or returns a description of a table Returns the tFoot object of a table Returns the tHead object of a table Sets or returns the width of a table  W3c Yes Yes Yes Yes Yes Yes Yes Yes Yes  W3c No Yes Yes  Yes  Yes Yes Yes Yes Yes Yes Yes       241           Learn javascript and Ajax with w3schools  Table Object Methods  Method createCaption   createTFoot   createTHead   deleteCaption   deleteRow   deleteTFoot   deleteTHead   insertRow    description Creates a caption element for a table Creates an empty tFoot element in a table Creates an empty tHead element in a table Deletes the caption element and its content from a table Deletes a row from a table Deletes the tFoot element and its content from a table Deletes the tHead element and its content from a table Inserts a new row in a table  W3c Yes Yes Yes Yes Yes Yes Yes Yes  standard properties, Methods, and events  The	Table	object	also	supports	the	standard	properties,	methods,	and	events.  Tablecell Object  The	TableCell	object	represents	an	HTML	table	cell.  For	each	 	tag	in	an	HTML	document,	a	TableCell	object	is	created.  Tablecell Object properties  W3C:	W3C	Standard.  property abbr align axis cellIndex ch chOff colSpan headers rowSpan scope vAlign width  description Sets or returns an abbreviated version of the content in a table cell Sets or returns the horizontal alignment of data within a table cell Sets or returns a comma-delimited list of related table cells Returns the position of a cell in the cells collection of a row Sets or returns the alignment character for a table cell Sets or returns the offset of alignment character for a table cell Sets or returns the number of columns a table cell should span Sets or returns a list of space-separated header-cell ids Sets or returns the number of rows a table cell should span Sets or returns if this cell provides header information Sets or returns the vertical alignment of data within a table cell Sets or returns the width of a table cell  W3c Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes Yes  standard properties, Methods, and events  The	TableCell	object	also	supports	the	standard	properties,	methods,	and	events.  242                Appendix B: HTML dOM Objects  TableRow Object  The	TableRow	object	represents	an	HTML	table	row.  For	each	 	tag	in	an	HTML	document,	a	TableRow	object	is	created.  TableRow Object collections  W3C:	W3C	Standard.  collection description cells[]  Returns an array containing each cell in the table row  TableRow Object properties  property align  ch chOff  description Sets or returns the horizontal alignment of data within a table  row Sets or returns the alignment character for cells in a table row Sets or returns the offset of alignment character for the cells in  a table row Returns the position of a row in the table’s rows collection  rowIndex sectionRowIndex Returns the position of a row in the tBody, tHead, or tFoot rows   vAlign  collection Sets or returns the vertical alignment of data within a table row Yes  TableRow Object Methods  Method deleteCell   insertCell    description Deletes a cell in a table row Inserts a cell in a table row  W3c Yes  W3c  Yes  Yes  Yes  Yes  Yes  W3c Yes Yes  standard properties, Methods, and events  The	TableRow	object	also	supports	the	standard	properties,	methods,	and	events.  Textarea Object  The	Textarea	object	represents	a	text-area	in	an	HTML	form.  For	each	 	tag	in	an	HTML	form,	a	Textarea	object	is	created.  You	 can	 access	 a	Textarea	 object	 by	 indexing	 the	 elements	 array	  by	 number	 or	 name 	of	the	form	or	by	using	getElementById  .       243           Learn javascript and Ajax with w3schools  Textarea Object properties  W3C:	W3C	Standard.  property cols defaultValue disabled form name readOnly rows property type value  description Sets or returns the width of a textarea Sets or returns the default text in a textarea Sets or returns whether a textarea should be disabled Returns a reference to the form that contains the textarea Sets or returns the name of a textarea Sets or returns whether a textarea should be read-only Sets or returns the height of a textarea description Returns the type of the form element Sets or returns the text in a textarea  Textarea Object Methods  Method select    description Selects the text in a textarea  W3c Yes Yes Yes Yes Yes Yes Yes W3c Yes Yes  W3c Yes  standard properties, Methods, and events  The	Textarea	object	also	supports	the	standard	properties,	methods,	and	events.  244                Symbols  \t, 74 ;, 17 * , 19  *, 19 \&, 74 \\, 74 \', 74 \", 74 \b, 74 \f, 74 \n, 74 \r, 74 }, 17, 59 {, 17, 59 \ character, 73–75   , functions, 59 - operator, 27 -- operator, 27 ! operator, 31 != operator, 30 % operator, 27 %= operator, 28 && operator, 31 * operator, 27 *= operator, 28   operator, 27  = operator, 28  operator, 31 + operator, 27–28, 75 ++ operator, 27 += operator, 28 < operator, 30 <= operator, 30, 39, 42 = operator, 27–28 -= operator, 28 == operator, 30 === operator, 30 > operator, 30 >= operator, 30    symbol, 12, 18 <!-- tag, 12  A ActiveXObject, 163–164 adding array elements, 100–101, 105–106 adding tags, 10–11 AJAX, 3–4  applications, creation, 160–162 applications, interactive, 175  245  Index  browser support, 163–165 database example, 184–187 information requests, 163–164 requests, 167 responseXML example, 198–202 servers, 170 Suggest source code, 175–183 ASP server page, 180–182 HTML page, 178–179 PHP server page, 182–183  XML example, 188–197 XMLHttpRequest object, 3, 159–164  alert boxes, 53–55, 67–69, 125 algebraic variables, 23 ampersand character, 74 animation, 138–140  code example, 139 id, images, 138 image, changing, 139 mouseOut   function, 139 mouseOver   function, 139 onMouseOut event, 138 onMouseOver event, 138 applications, AJAX, 160–162 applications, interactive, 175 appName property, 124 appVersion property, 124   tags, 142 arithmetic operations, 26–27 arrays, 49 array elements, 49 Array object, 95–106, 151, 203–204  accessing, 96 creation, 96–97 defined, 95 elements, adding, 100–101, 105–106 elements, joining, 99–100 elements, removing, 100–102 elements, reversing order, 101 for...in statement, 98 joining, 98–99 slice   method, 102 sort   method, 103–104 splice   method, 104–105 string, converting, 105 unshift   method, 106 values, assigning, 97 values, modifying, 96–97 values, writing, 97 variables, 95 variable types, 96                Index  ASP server page, AJAX, 180–182 assignment operators, 27–28 attributes, src, 15  B  backslash  \ , 73–74 backspace character, 74–75 base-2 log of E constant, 110–111 base-10 log of E constant, 110–111 blocks, statements, 17–18, 21   section  Boolean object, 107–109, 204  functions, 58 scripts, 13–14  creation, 107–108 false values, 107 no values, 107 null, 107 true values, 108  brackets, 210 break statements, 46–47, 50 breaks, code line, 74–75 browsers  detection, 2, 123–128 Navigator object, 123–128 appName property, 124 appVersion property, 124 parseFloat   function, 124 properties, 124 userAganet property, 124  support, 12, 163–165 built-in objects, 151–152 buttons, Rollover, 66  C  C, 2 C++, 2 capitalization, 74 carriage return character, 74 case-sensitive searches, 116–118 case sensitivity, 74 catch arguments, 71 catch blocks, 68 checkCookie   function, 131–133 checkEmail   function, 65 checkForm   function, 65 Chrome, 1, 160 clearTimeout   method, 144, 149–150 clocks, displaying, 93–94 code, statements, 17 code line breaks, 74–75 commands, see statements comments, 18–22 end of lines, 22 execution, preventing, 20–21 multiline, 19–20  246  placement, 22 single-line, 18–20 comment symbol, 12 comment tags, 12 comparison, dates, 89–90 comparison operators, 30–31 concatenate operator, 75 conditional operators, 31 conditional statements, 31–38, 49  curly braces, 33 if statements, 32–34 if...else statements, 32, 34–36 if...else if...else statements, 32, 36–38 links, random, 36 random links, 36 switch statements, 32, 38  confirm boxes, 53, 55–56, 69–70 constants, Math object, 110–111 constructors, 154–155 continue statements, 46–48 cookies, 2, 65, 129–133  checkCookie   function, 131–133 creation, 130–133 date, 129 defined, 129 document.cookie object, 130–131 name, 129–130 password, 129 storage, 130–133  creation errors, Math object, 110 curly braces, 17, 33, 59  D  database example, AJAX, 184–187 data validation, 2, 134–137  e-mail validation, 136–137 required fields, 134–136  Date   constructor, 88 date cookie, 129 Date   method, 90 Date object, 88–94, 151, 204–206  clocks, displaying, 93–94 comparison, dates, 89–90 creation, 88–89 Date   constructor, 88 Date   method, 90 getDay   method, 92–93 getTime   method, 90–91 methods, 89 parameters, 88 setFullYear   method, 91 setting date, 89 time, 88 toUTCString   method, 91–92  dates, see Date object declaring variables, 25                direct instance, objects, 152–153 displaymessage   function, 59–60 document.cookie object, 130–131 document.write command, 2, 11–12 do...while loops, 43–45 dynamic text, 2  E  E constant, 110–111 ECMA International, 2–3 ECMAScript, 2–3 Eich, Brendan, 2 elements, arrays, 99–102, 105–106  adding, 100–101, 105–106 joining, 99–100 removing, 100–102 reversing order, 101  e-mail validation, 136–137 error conditions, functions, 62 errors, 67–72 events, 60, 64–66  adding, 142–143 form fields validation, 65 functions, 60, 64 onBlur, 65, 142 onChange, 65 onClick, 64, 66, 142 onDblClick, 142 onFocus, 65, 142 onKeyDown, 142 onKeyPress, 142 onKeyUp, 142 onLoad, 64–65 onMouseDown, 142 onMouseMove, 142 onMouseOut, 66, 138, 142 onMouseOver, 66, 138, 142 onSubmit, 65 onUnload, 64–65 timing, 144–150  clearTimeout   method, 144, 149–150 setTimeout   method, 144–149  validation, form fields, 65  exceptions, throw statements, 71 exec   method, 119–120 execution, preventing, 20–21 external scripts, 15  F  false parameter, XMLHttpRequest, 167–168 fields, required, 134–136 files, requesting, 170 Firefox, 1, 160 floor   method, 111       Index  flow control statements, 46–52  break, 46–47, 50 conditional, 49 continue, 46–48 for...in, 48–49 switch, 50–52  for...in statements, 48–49, 98 for loops, 39–42 form feed character, 74 form fields validation, 65 form validation, 134–137  e-mail validation, 136–137 required fields, 134–136  forms, submitting, 171 functions, 58–63, 212–213    section, 58 capitalization, 59 checkCookie  , 131–133 checkEmail  , 65 checkForm  , 65 curly braces, 59 defining, 58–59 displaymessage  , 59–60 error conditions, 62 events, 60, 64 examples, 59–62 GetXmlHttpObject  , 177, 201 global variables, 63   section, 58 local variables, 63 message  , 68 mouseOut  , 139 mouseOver  , 139 parameters, 59–60 parentheses, 59 parseFloat  , 124 pattern-matching, 115–116 return statement, 62–63 search-and-replace, 115–116 showCD, 189 showCustomer  , 185, 199, 201 showHint  , 176–177 stateChanged  , 177–178 values, returning, 61–63 variables, 59–60, 63  G  g modifier, 116–117 getDay   method, 92–93 getTime   method, 90–91 GetXmlHttpObject   function, 177, 201 global functions, 212–213 global properties, 212 global searches, 117–118 global variables, 63 Google Suggest, 160  247           Index  H    section, 13–14  functions, 58  HTML, 1, 3 HTML DOM objects, 214–244  Anchor object, 220–221 Area object, 221–222 Base object, 222 Body object, 222–223 Button object  push button , 223 Button object, 227 Checkbox object, 227–228 Document object, 215–216 Element object, 218–220 Event object, 216–218 FileUpload object, 228–229 Form object, 223–224 Frame IFrame object, 224–225 Frameset object, 225–226 Hidden object, 229 Image object, 226–227 Link object, 233 Meta object, 233–234 Object object, 234–235 Option object, 235 Password object, 229–230 Radio object, 230–231 Reset object, 231 Select object, 236 Style object, 236–240 Submit object, 231–232 Table object, 241–242 TableCell object, 242 TableRow object, 242–243 Text object, 232–233 Textarea object, 243–244  HTML elements, 2 HTML forms, 175–176 HTML page, AJAX, 178–179  I  i modifier, 116 id, images, 138 if statements, 32–34 if...else statements, 32, 34–36 if...else if...else statements, 32, 36–38 images, changing, 139 image maps, 141–143    tags, 142 defined, 141 events, adding, 142–143  increment parameters, 39 information requests, AJAX, 163–164 interactivity, 1 Internet Explorer, 1, 106, 124, 160 Internet Information Server  IIS , 186, 190, 201 248  J–K  L  Java, 2 joining arrays, 98–100 js file extension, 15  length property, 79–80 String object, 81–82  lines, comments, 22 links, random, 36 local variables, 63 logical operators, 31 logical statements, 30 loops, 39–45  do...while, 43–45 for, 39–42 increment parameters, 39 while, 39, 41–43  M  Math object, 110–114, 206–207  constants, 110–111 creation errors, 110 floor   method, 111 max   method, 113 methods, 111 min   method, 114 random   method, 111–113 round   method, 111–112  max   method, 113 message   function, 68 metacharacters, 211 methods, 79–80, 151–152, 155  clearTimeout  , 144, 149–150 Date object, 89 Date  , 90 exec  , 119–120 floor  , 111 getDay  , 92–93 getTime  , 90–91 Math object, 111 max  , 113 min  , 114 open  , 166–167 parameters, 152 random  , 111–113 round  , 111–112 send  , 166–167 setFullYear  , 91 setTimeout  , 144–149 slice  , 102 sort  , 103–104 splice  , 104–105 String object, 82–84 test  , 118–119 toLowerCase  , 84–85                toUpperCase  , 80–81, 84–85 toUTCString  , 91–92 unshift  , 106 XMLHttpRequest, 166–167  Microsoft browsers, 2 min   method, 114 modifiers, RegExp object, 116–118, 210 mouseOut   function, 139 mouseOver   function, 139 multiline comments, 19–20 N  name cookie, 129–130 names, variables, 23–24 natural log of 2 constant, 110–111 natural log of 10 constant, 110–111 Navigator 2.0, 2 Navigator object, 123–128 appName property, 124 appVersion property, 124 parseFloat   function, 124 properties, 124 userAganet property, 124  Netscape, 2 new line character, 74 numbers, adding, 28–29 Number object, 207–208 O  objects, 79, 203–213  ActiveXObject, 163 Array object, 95–106, 151, 203–204  accessing, 96 creation, 96–97 defined, 95 elements, adding, 100–101, 105–106 elements, joining, 99–100 elements, removing, 100–102 elements, reversing order, 101 for...in statement, 98 joining, 98–99 slice   method, 102 sort   method, 103–104 splice   method, 104–105 string, converting, 105 unshift   method, 106 values, assigning, 97 values, modifying, 96–97 values, writing, 97 variables, 95 variable types, 96  Boolean object, 107–109, 204  creation, 107–108 false values, 107 no values, 107       Index  null, 107 true values, 108  built-in, 151–152 creation, 152–155  constructors, 154–155 direct instance, 152–153 templates, 154–155  Date object, 88–94, 151, 204–206  clocks, displaying, 93–94 comparison, dates, 89–90 creation, 88–89 Date   constructor, 88 Date   method, 90 getDay   method, 92–93 getTime   method, 90–91 methods, 89 parameters, 88 setFullYear   method, 91 setting date, 89 time, 88 toUTCString   method, 91–92  document.cookie, 130–131 HTML DOM, 214–244  Anchor object, 220–221 Area object, 221–222 Base object, 222 Body object, 222–223 Button object  push button , 223 Button object, 227 Checkbox object, 227–228 Document object, 215–216 Element object, 218–220 Event object, 216–218 FileUpload object, 228–229 Form object, 223–224 Frame IFrame object, 224–225 Frameset object, 225–226 Hidden object, 229 Image object, 226–227 Link object, 233 Meta object, 233–234 Object object, 234–235 Option object, 235 Password object, 229–230 Radio object, 230–231 Reset object, 231 Select object, 236 Style object, 236–240 Submit object, 231–232 Table object, 241–242 TableCell object, 242 TableRow object, 242–243 Text object, 232–233 Textarea object, 243–244  249           Index  Math object, 110–114, 206–207  constants, 110–111 creation errors, 110 floor   method, 111 max   method, 113 methods, 111 min   method, 114 random   method, 111–113 round   method, 111–112  methods, 151 Navigator object, 123–128 appName property, 124 appVersion property, 124 parseFloat   function, 124 properties, 124 userAganet property, 124  Number object, 207–208 properties, 151 RegExp object, 115–120, 210  case-sensitive searches, 116–118 defined, 115–116 exec   method, 119–120 g modifier, 116–117 i modifier, 116 global searches, 117–118 modifiers, 116–118 pattern-matching functions, 115–116 patterns, 115–116 search-and-replace functions, 115–116 test   method, 118–119  String object, 81–87, 151, 208–209  length property, 81–82 methods, 82–84 toLowerCase   method, 84–85 toUpperCase   method, 81, 84–85 values, first occurrence, 86–87 values, replacing, 85–86 values, searching, 85  String HTML wrapper methods, 209 XMLHttpRequest object, 3, 159–164  AJAX requests, 167 false parameter, 167–168 methods, 166–167 properties, 167–169 true parameter, 168  object-oriented language, 79 object-oriented programming, 79 onBlur event, 65, 142 onChange event, 65 onClick event, 64, 66, 142 onDblClick event, 142 onFocus event, 65, 142 onKeyDown event, 142 onKeyPress event, 142 onKeyUp event, 142 onLoad event, 64–65 250  onMouseDown event, 142 onMouseMove event, 142 onMouseOut event, 66, 138, 142 onMouseOver event, 66, 138, 142 onMouseUp event, 142 onSubmit event, 65 onUnload event, 64–65 OOL, see object-oriented language Opera, 1, 160 operators, 27–29 +, 27–28, 75 arithmetic, 27 assignment, 27–28 comparison, 30–31 concatenate operator, 75 conditional, 31–38 logical, 31 numbers, adding, 28–29 space, adding, 28 strings, adding, 28–29 text values, concatenating, 28 variables, concatenating, 28  P  parameters  Date object, 88 functions, 59–60  parentheses, functions, 59 parseFloat   function, 124 password cookie, 129 pattern-matching functions, 115–116 patterns, 115–116 PHP server page, AJAX, 182–183 PI constant, 110–111 placement, scripts, 12–14 popup boxes, 53–57, 65  alert boxes, 53–55 confirm boxes, 53, 55–56 prompt boxes, 53, 56–57  programming tool, 2 prompt boxes, 53, 56–57 properties, 79–80, 151–152, 212  appName, 124 appVersion, 124 length, 79 Navigator object, 124 onreadystatechange, 169 readyState, 168–169 responseText, 167 responseXML, 198–202 userAganet, 124 XMLHttpRequest, 167–169  Q  quantifiers, 211 quote marks, 25, 73–74                R  random links, 36 random   method, 111–113 redeclaring variables, 26 RegExp object, 115–120, 210–212 case-sensitive searches, 116–118 defined, 115–116 exec   method, 119–120 g modifier, 116–117 i modifier, 116 global searches, 117–118 modifiers, 116–118 pattern-matching functions, 115–116 patterns, 115–116 search-and-replace functions, 115–116 test   method, 118–119  regular expressions, see RegExp object removing array elements, 100–102 requesting files, 170 required fields, 134–136 responseXML example, AJAX, 198–202 return statement, 62–63 reversing order, array elements, 101 rollover buttons, 66 round   method, 111–112 S  Safari, 1, 160   tag, 11–13, 15   tag, 11–12 scripting languages, 1 scripts, see also text, 12–15   section, 13–14 external, 15   section, 13–14 js file extension, 15 placement, 12–14 src attribute, 15  search-and-replace functions, 115–116 semicolons, 16–17 setFullYear   method, 91 setTimeout   method, 144–149 setting date, 89 showCD function, 189 showCustomer   function, 185, 199, 201 showHint   function, 176–177 single-line comments, 18–20 slice   method, 102 sort   method, 103–104 space, adding, 28   elements, 198 special characters, 73–74 splice   method, 104–105 square root of 1 2 constant, 110–111       Index  square root of 2 constant, 110–111 src attribute, 15 stateChanged   function, 177–178 statements, 16–18 blocks, 17–18 break, 46–47, 50 code, 17 conditional, 31, 49 continue, 46–48 curly brackets, 17 flow control statements, 46–52 for...in, 48–49, 98 if, 32–34 if...else, 32, 34–36 if...else if...else, 32, 36–38 logical, 30 return, 62–63 semicolons, 16–17 switch, 32, 38, 50–52 throw, 70–72 try...catch, 67–70  storage, cookies, 130–133 string, converting, 105 string literals, 74–75 String object, 81–87, 151, 208–209  length property, 81–82 methods, 82–84 toLowerCase   method, 84–85 toUpperCase   method, 81, 84–85 values, first occurrence, 86–87 values, replacing, 85–86 values, searching, 85  String HTML wrapper methods, 209 strings, adding, 28–29 submitting forms, 171 Suggest source code, AJAX, 175–183  ASP server page, 180–182 HTML page, 178–179 PHP server page, 182–183  Sun Microsystems, 2 switch statements, 32, 38, 50–52  T  tab character, 74 tags,  <!--, 12 adding, 10–11  , 142 comment, 12  , 11–13, 15  , 11–12 text, 10–11  templates, objects, 154–155 test   method, 118–119 text values, concatenating, 28  251           Index  text, writing to Web pages, see also scripts, 9–12  browsers, 12 comment symbol, 12 comment tag, 12 document.write command, 11–12   tag, 11–13, 15   tag, 11–12 tags, 10–11  throw statement, 70–72 catch argument, 71 exceptions, 71 try...catch combination, 70  time, 88 timing events, 144–150  clearTimeout   method, 144, 149–150 setTimeout   method, 144–149  toLowerCase   method, 84–85 toUpperCase   method, 80–81, 84–85 toUTCString   method, 91–92 true parameter, XMLHttpRequest, 168 try...catch statement, 67–70  capitalization, 68 catch blocks, 68 message   function, 68 U undeclared variables, 25–26 unshift   method, 106 userAganet property, 124 universal time, 88-89, 91-92 UTC  universal  time, 88–89, 91–92  V validation, form fields, 65 values  arrays, 96–97 first occurrence, 86–87 replacing, 85–86 returning, 61–63 searching, 85 String object, 85–87 variables, 24–25  var statement, 25  variables, 23–26 algebraic, 23 arguments, 49 arithmetic operations, 26 arrays, 95 concatenating, 28 declaring, 25 functions, 59–60, 63 global, 63 lifetime, 63 local, 63 names, 23–24, 49 quotes, 25 redeclaring, 26 types, 96 undeclared, 25–26 values, 24–25 var statement, 25  VBScript, 186, 190, 201 W  w3schools.com, 1 while loops, 39, 41–43 white space, 74  X–Z  XML example, AJAX, 188–197 XMLHttpRequest object, 3, 159–164  AJAX requests, 167 false parameter, 167–168 methods, 166–167  open  , 166–167 send  , 166–167 properties, 167–169  onreadystatechange, 169 readyState, 168–169 responseText, 167  requesting files, 170 submitting forms, 171 true parameter, 168  252

@highlight

Fast, focused instruction for beginning Web developersW3Schools.com is the number one online education source for beginning Web developers. This attractive two-color book contains concise, highly focused tutorials in the proven W3Schools instructional format, with an easy-to-use reference of JavaScript Objects and the HTML DOM included. Novice developers will quickly learn to create interactive Web pages using the most popular Web scripting language.W3Schools is the top Google search result for instruction on JavaScript, HTML, CSS, and other key Web technologies; this book presents W3Schools tutorials in an easy-to-follow format for quick learningFeatures clear examples, simple explanations, and a thorough reference section covering JavaScript Objects and the HTML DOMCovers statements and comments; variables, operators, and comparisons; if…then statements; pop-up boxes; events and try…catch; objects, strings, arrays, and Booleans; cookies, validation, and timing; Ajax requests and XMLHTTP requests; Ajax suggest, and moreDesigned to get beginning Web developers up and running as quickly as possible, Learn JavaScript and Ajax with W3Schools presents a proven, highly focused course of instruction in an easy-to-use format.