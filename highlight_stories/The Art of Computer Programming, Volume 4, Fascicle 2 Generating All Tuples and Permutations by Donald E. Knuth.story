COMPUTER PROGRAMMING  THE ART OF  PRE-FASCICLE 2B  A DRAFT OF SECTION 7.2.1.2:  GENERATING ALL PERMUTATIONS  DONALD E. KNUTH Stanford University  ADDISON{WESLEY  77  6  -1   Internet page http:  www-s-faulty.stanford.edu ~knuth taop.html ontains  urrent information about this book and related books.  See also http:  www-s-faulty.stanford.edu ~knuth sgb.html for information  about The Stanford GraphBase, inluding downloadable software for dealing with the  graphs used in many of the examples in Chapter 7.  See also http:  www-s-faulty.stanford.edu ~knuth mmixware.html for down-  loadable software to simulate the MMIX omputer.  Copyright   cid:13  2002 by Addison {Wesley    All rights reserved. No part of this publiation may be reprodued, stored in a retrieval  system, or transmitted, in any form, or by any means, eletroni, mehanial, photo-  opying, reording, or otherwise, without the prior onsent of the publisher, exept  that the oÆial eletroni  cid:12 le may be used to print single opies for personal  not  ommerial  use.  Zeroth printing  revision 12 , 10 Deember 2004  -2   PREFACE  I thought it worth a Dayes labour,  to write something on this Art or Siene,  that the Rules thereof might not be lost and obsured.   RICHARD DUCKWORTH, Tintinnalogia  1668   This booklet ontains draft material that I'm irulating to experts in the   cid:12 eld, in hopes that they an help remove its most egregious errors before too  many other people see it.  I am also, however, posting it on the Internet for  ourageous and or random readers who don't mind the risk of reading a few  pages that have not yet reahed a very mature state. Beware: This material has  not yet been proofread as thoroughly as the manusripts of Volumes 1, 2, and 3  were at the time of their  cid:12 rst printings. And those arefully-heked volumes,  alas, were subsequently found to ontain thousands of mistakes.  Given this aveat, I hope that my errors this time will not be so numerous  and or obtrusive that you will be disouraged from reading the material arefully.  I did try to make it both interesting and authoritative, as far as it goes. But the   cid:12 eld is so vast, I annot hope to have surrounded it enough to orral it ompletely.  Therefore I beg you to let me know about any de cid:12 ienies you disover.  To put the material in ontext, this is Setion 7.2.1.2 of a long, long hapter  on ombinatorial algorithms. Chapter 7 will eventually  cid:12 ll three volumes  namely  Volumes 4A, 4B, and 4C , assuming that I'm able to remain healthy.  It will  begin with a short review of graph theory, with emphasis on some highlights  of signi cid:12 ant graphs in The Stanford GraphBase  from whih I will be drawing  many examples . Then omes Setion 7.1, whih deals with the topi of bitwise  manipulations.  I drafted about 60 pages about that sub jet in 1977, but those  pages need extensive revision; meanwhile I've deided to work for awhile on  the material that follows it, so that I an get a better feel for how muh to  ut.  Setion 7.2 is about generating all possibilities, and it begins with Setion  7.2.1: Generating Basi Combinatorial Patterns  whih, in turn, begins with  Setion 7.2.1.1, \Generating all n-tuples."  Readers of the present booklet should  have already looked at Setion 7.2.1.1, a draft of whih is available as Pre-  Fasile 2A.  That sets the stage for the main ontents of this booklet, Setion  7.2.1.2: \Generating all permutations." Then will ome Setion 7.2.1.3  about  ombinations , et. Setion 7.2.2 will deal with baktraking in general. And  so it will go on, if all goes well; an outline of the entire Chapter 7 as urrently  envisaged appears on the taop webpage that is ited on page ii.  iii  -3   iv  PREFACE  Even the apparently lowly topi of permutation generation turns out to be  surprisingly rih, with ties to Setions 1.2.9, 1.3.3, 2.2.3, 2.3.4.2, 3.4.2, 4.1, 5.1.1,  5.1.2, 5.1.4, 5.2.1, 5.2.2, 5.3.1, and 6.1 of the  cid:12 rst three volumes. There also is  material related to the MMIX omputer, de cid:12 ned in Setion 1.3.1  of Fasile 1.  0  I strongly believe in building up a  cid:12 rm foundation, so I have disussed this topi  muh more thoroughly than I will be able to do with material that is newer or  less basi. To my surprise, I ame up with 112 exerises, even though  believe  it or not  I had to eliminate quite a bit of the interesting material that appears  in my  cid:12 les.  Some of the things presented are new, to the best of my knowledge, although  I will not be at all surprised to learn that my own little \disoveries" have been  disovered before. Please look, for example, at the exerises that I've lassed as  researh problems  rated with diÆulty level 46 or higher , namely exerises 71  and 109; I've also impliitly posed additional unsolved questions in the answers  to exerises 28, 58, 63, 67, 100, 106, and 112. Are those problems still open?  Please let me know if you know of a solution to any of these intriguing questions.  And of ourse if no solution is known today but you do make progress on any of  them in the future, I hope you'll let me know.  I urgently need your help also with respet to some exerises that I made  up as I was preparing this material. I ertainly don't like to get redit for things  that have already been published by others, and most of these results are quite  natural \fruits" that were just waiting to be \pluked." Therefore please tell  me if you know who I should have redited, with respet to the ideas found in  exerises 6, 7, 20, 25, 41, 55, 60, 65, 66, 67, 69, 70, 76, 89, 99, 104, and or 106.  I shall happily pay a  cid:12 nder's fee of $2.56 for eah error in this draft when it is   cid:12 rst reported to me, whether that error be typographial, tehnial, or historial.  The same reward holds for items that I forgot to put in the index. And valuable  suggestions for improvements to the text are worth 32  eah.  Furthermore, if  you  cid:12 nd a better solution to an exerise, I'll atually reward you with immortal  glory instead of mere money, by publishing your name in the eventual book: cid:0    Cross referenes to yet-unwritten material sometimes appear as `00'; this  impossible value is a plaeholder for the atual numbers to be supplied later.  Happy reading!  31 Deember 2001  Stanford, California  D. E. K.  -4   7.2.1.2  GENERATING ALL PERMUTATIONS  1  Tin tan din dan bim bam bom bo   tan tin din dan bam bim bo bom   tin tan dan din bim bam bom bo   tan tin dan din bam bim bo bom   tan dan tin bam din bo bim bom   : : : . Tin tan din dan bim bam bom bo.   DOROTHY L. SAYERS, The Nine Tailors  1934   A permutation on the ten deimal digits is simply a 10 digit deimal number  in whih all digits are distint. Hene all we need to do is to produe  all 10 digit numbers and selet only those whose digits are distint.  Isn't it wonderful how high speed omputing saves us from  the drudgery of thinking! We simply program k + 1 ! k  and examine the digits of k for undesirable equalities.  This gives us the permutations in ditionary order too!  On seond sober thought : : : we do need to think of something else.   D. H. LEHMER  1957   7.2.1.2. Generating all permutations. After n-tuples, the next most im-  portant item on nearly everybody's wish list for ombinatorial generation is the  task of visiting all permutations of some given set or multiset. Many di cid:11 erent  ways have been devised to solve this problem. In fat, almost as many di cid:11 erent  algorithms have been published for unsorting as for sorting! We will study the  most important permutation generators in this setion, beginning with a lassial  method that is both simple and  cid:13 exible:  Algorithm L  Lexiographi permutation generation  . Given a sequene of n  elements a  a  : : : a  , initially sorted so that  1  2  n  a   cid:20  a   cid:20   cid:1   cid:1   cid:1   cid:20  a  ;   1   1  2  n  this algorithm generates all permutations of fa  ; a  ; : : : ; a  g, visiting them in  1  2  n  lexiographi order.  For example, the permutations of f1; 2; 2; 3g are  1223; 1232; 1322; 2123; 2132; 2213; 2231; 2312; 2321; 3122; 3212; 3221;  ordered lexiographially.  An auxiliary element a  is assumed to be present for  0  onveniene; a  must be stritly less than the largest element a  .  0  n  L1. [Visit.℄ Visit the permutation a  a  : : : a  .  1  2  n  1   2  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  L2. [Find j .℄ Set j   n  cid:0  1.  If a   cid:21  a  , derease j by 1 repeatedly until  j  j+1  a  < a  . Terminate the algorithm if j = 0.  At this point j is the smallest  j  j+1  subsript suh that we have already visited all permutations beginning with  a  : : : a  . Therefore the lexiographially next permutation will inrease the  1  j  value of a  .   j  L3. [Inrease a  .℄ Set l   n. If a   cid:21  a  , derease l by 1 repeatedly until a  < a  .  j  j  l  j  l  Then interhange a  $ a  .   Sine a   cid:21   cid:1   cid:1   cid:1   cid:21  a  , element a  is the  j  l  j+1  n  l  smallest element greater than a  that an legitimately follow a  : : : a  in a  j  1  j cid:0 1  permutation. Before the interhange we had a   cid:21   cid:1   cid:1   cid:1   cid:21  a   cid:21  a  > a   cid:21   j+1  l cid:0 1  l  j  a   cid:21   cid:1   cid:1   cid:1   cid:21  a  ; after the interhange, we have a   cid:21   cid:1   cid:1   cid:1   cid:21  a   cid:21  a  >  l+1  n  j+1  l cid:0 1  j  a   cid:21  a   cid:21   cid:1   cid:1   cid:1   cid:21  a  .   l  l+1  n  L4. [Reverse a  : : : a  .℄ Set k   j + 1 and l   n. Then, if k < l, interhange  j+1  n  a  $ a  , set k   k + 1, l   l  cid:0  1, and repeat until k  cid:21  l. Return to L1.  k  l  This algorithm goes bak to N cid:22 ar cid:22 ayan  a Pan  d  ita in 14th-entury India  see Setion  .  .  .  7.2.1.7 ; it also appeared in C. F. Hindenburg's prefae to Speimen Analytium  de Lineis Curvis Seundi Ordinis by C. F. R cid:127 udiger  Leipzig: 1784 , xlvi{xlvii,  and it has been frequently redisovered ever sine. The parenthetial remarks in  steps L2 and L3 explain why it works.  In general, the lexiographi suessor of any ombinatorial pattern a  : : : a  1  n  is obtainable by a three-step proedure:  1  Find the largest j suh that a  an be inreased.  j  2  Inrease a  by the smallest feasible amount.  j  3  Find the lexiographially least way to extend the new a  : : : a  to a omplete  1  j  pattern.  Algorithm L follows this general proedure in the ase of permutation generation,  just as Algorithm 7.2.1.1M followed it in the ase of n-tuple generation; we will  see numerous further instanes later, as we onsider other kinds of ombinatorial  patterns. Notie that we have a   cid:21   cid:1   cid:1   cid:1   cid:21  a  at the beginning of step L4.  j+1  n  Therefore the  cid:12 rst permutation beginning with the urrent pre cid:12 x a  : : : a  is  1  j  a  : : : a  a  : : : a  , and step L4 produes it by doing b n  cid:0  j  =2 interhanges.  1  j  n  j+1  In pratie, step L2  cid:12 nds j = n  cid:0  1 half of the time when the elements are  distint, beause exatly n!=2 of the n! permutations have a  < a  . Therefore  n cid:0 1  n  Algorithm L an be speeded up by reognizing this speial ase, without making  it signi cid:12 antly more ompliated.  See exerise 1.  Similarly, the probability  that j  cid:20  n  cid:0  t is only 1=t! when the a's are distint; hene the loops in steps L2{  L4 usually go very fast. Exerise 6 analyzes the running time in general, showing  that Algorithm L is reasonably eÆient even when equal elements are present,  unless some values appear muh more often than others do in the multiset  fa  ; a  ; : : : ; a  g.  1  2  n  Adjaent interhanges. We saw in Setion 7.2.1.1 that Gray odes are ad-  vantageous for generating n-tuples, and similar onsiderations apply when we  want to generate permutations. The simplest possible hange to a permutation  is to interhange adjaent elements, and we know from Chapter 5 that any  2   7.2.1.2  GENERATING ALL PERMUTATIONS  3  permutation an be sorted into order if we make a suitable sequene of suh  interhanges.  For example, Algorithm 5.2.2B works in this way.  Hene we an  go bakward and obtain any desired permutation, by starting with all elements  in order and then exhanging appropriate pairs of adjaent elements.  A natural question now arises: Is it possible to run through al l permutations  of a given multiset in suh a way that only two adjaent elements hange plaes  at every step? If so, the overall program that is examining all permutations will  often be simpler and faster, beause it will only need to alulate the e cid:11 et of  an exhange instead of to reproess an entirely new array a  : : : a  eah time.  1  n  Alas, when the multiset has repeated elements, we an't always  cid:12 nd suh  a Gray-like sequene. For example, the six permutations of f1; 1; 2; 2g are on-  neted to eah other in the following way by adjaent interhanges:  1122  1212  2121  2211  ;   2   2112  1221  this graph has no Hamiltonian path.  But most appliations deal with permutations of distint elements, and for  this ase there is good news: A simple algorithm makes it possible to generate  all n! permutations by making just n!  cid:0  1 adjaent interhanges. Furthermore,  another suh interhange returns to the starting point, so we have a Hamiltonian  yle analogous to Gray binary ode.  The idea is to take suh a sequene for f1; : : : ; n  cid:0  1g and to insert the  number n into eah permutation in all ways. For example, if n = 4 the sequene   123; 132; 312; 321; 231; 213  leads to the olumns of the array  1234  1324  3124  3214  2314  2134  1243  1342  3142  3241  2341  2143   3   1423  1432  3412  3421  2431  2413  4123  4132  4312  4321  4231  4213  when 4 is inserted in all four possible positions. Now we obtain the desired  sequene by reading downwards in the  cid:12 rst olumn, upwards in the seond, down-  wards in the third, : : : , upwards in the last:  1234; 1243; 1423; 4123; 4132; 1432;  1342; 1324; 3124; 3142; : : : ; 2143; 2134 .  In Setion 5.1.1 we studied the inversions of a permutation, namely the pairs  of elements  not neessarily adjaent  that are out of order. Every interhange  of adjaent elements hanges the total number of inversions by  cid:6 1. In fat, when  we onsider the so-alled inversion table   : : :   of exerise 5.1.1{7, where   is  1  n  j  the number of elements lying to the right of j that are less than j , we  cid:12 nd that  the permutations in  3  have the following inversion tables:  0000  0010  0020  0120  0110  0100  0001  0011  0021  0121  0111  0101   4   0002  0012  0022  0122  0112  0102  0003  0013  0023  0123  0113  0103  And if we read these olumns alternately down and up as before, we obtain  preisely the re cid:13 eted Gray ode for mixed radies  1; 2; 3; 4 , as in Eqs.  46 { 51   3   4  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  of Setion 7.2.1.1. The same property holds for all n, as notied by E. W. Dijkstra  [Ata Informatia 6  1976 , 357{359℄, and it leads us to the following formulation:  Algorithm P  Plain hanges  . Given a sequene a  a  : : : a  of n distint  1  2  n  elements, this algorithm generates all of their permutations by repeatedly inter-  hanging adjaent pairs. It uses an auxiliary array     : : :   , whih represents  1  2  n  inversions as desribed above, running through all sequenes of integers suh that  0  cid:20    < j  for 1  cid:20  j  cid:20  n.   5   j  Another array o  o  : : : o  governs the diretions by whih the entries   hange.  1  2  n  j  P1. [Initialize.℄ Set     0 and o    1 for 1  cid:20  j  cid:20  n.  j  j  P2. [Visit.℄ Visit the permutation a  a  : : : a  .  1  2  n  P3. [Prepare for hange.℄ Set j   n and s   0.  The following steps determine  the oordinate j for whih   is about to hange, preserving  5 ; variable s  j  is the number of indies k > j suh that   = k  cid:0  1.   k  P4. [Ready to hange?℄ Set q     + o  . If q < 0, go to P7; if q = j , go to P6.  j  j  P5. [Change.℄ Interhange a  $ a  . Then set     q and return to P2.  j cid:0   +s  j cid:0 q+s  j  j  P6. [Inrease s.℄ Terminate if j = 1; otherwise set s   s + 1.  P7. [Swith diretion.℄ Set o     cid:0 o  , j   j  cid:0  1, and go bak to P4.  j  j  This proedure, whih learly works for all n  cid:21  1, originated in 17th-entury  England, when bell ringers began the delightful ustom of ringing a set of bells  in all possible permutations. They alled Algorithm P the method of plain  hanges. Figure 18 a  illustrates the \Cambridge Forty-Eight," an irregular  and ad ho sequene of 48 permutations on 5 bells that had been used in  the early 1600s, before the plain-hange priniple revealed how to ahieve all  5! = 120 possibilities. The venerable history of Algorithm P has been traed to  a manusript by Peter Mundy now in the Bodleian Library, written about 1653  and transribed by Ernest Morris in The History and Art of Change Ringing   1931 , 29{30. Shortly afterwards, a famous book alled Tintinnalogia, published  anonymously in 1668 but now known to have been written by Rihard Dukworth  and Fabian Stedman, devoted its  cid:12 rst 60 pages to a detailed desription of plain  hanges, working up from n = 3 to the ase of arbitrarily large n.  was the greatest Peal that was Rang or invented; but now,  Cambridge Forty-eight, for many years,  neither Forty-eight, nor a Hundred, nor Seven-hundred and twenty,  nor any Number an on cid:12 ne us; for we an Ring Changes, Ad in cid:12 nitum.  : : : On four Bells, there are Twenty four several Changes,  in Ringing of whih, there is one Bell alled the Hunt,  and the other three are Extream Bells;  the Hunt moves, and hunts up and down ontinually : : : ;  two of the Extream Bells makes a Change  every time the Hunt omes before or behind them.   DUCKWORTH and STEDMAN, Tintinnalogia  1668   4   7.2.1.2  GENERATING ALL PERMUTATIONS  5   a  The Cambridge Forty-Eight.   inomplete    b  Plain Changes.     Grandsire Doubles.   d  Stedman Doubles.  Fig. 18. Four patterns used to ring  cid:12 ve hurh-bells  in 17th-entury England. Pattern  b  orresponds to  Algorithm P.  British bellringing enthusiasts soon went on to develop more ompliated  shemes in whih two or more pairs of bells hange plaes simultaneously. For  example, they devised the pattern in Fig. 18   known as Grandsire Doubles,  \the best and most ingenious Peal that ever was omposed, to be rang on  cid:12 ve  bells" [Tintinnalogia, page 95℄. Suh fanier methods are more interesting than  Algorithm P from a musial or mathematial standpoint, but they are less useful  in omputer appliations, so we shall not dwell on them here. Interested readers  an learn more by reading W. G. Wilson's book, Change Ringing  1965 ; see  also A. T. White, AMM 103  1996 , 771{778.  H. F. Trotter published the  cid:12 rst omputer implementation of plain hanges  in CACM 5  1962 , 434{435. The algorithm is quite eÆient, espeially when it  is streamlined as in exerise 16, beause n  cid:0  1 out of every n permutations are  generated without using steps P6 and P7. By ontrast, Algorithm L enjoys its  best ase only about half of the time.  The fat that Algorithm P does exatly one interhange per visit means that  the permutations it generates are alternately even and odd  see exerise 5.1.1{  13 . Therefore we an generate all the even permutations by simply bypassing  the odd ones. In fat, the  and o tables make it easy to keep trak of the urrent  total number of inversions,   +  cid:1   cid:1   cid:1  +   , as we go.  1  n  Many programs need to generate the same permutations repeatedly, and in  suh ases we needn't run through the steps of Algorithm P eah time. We an  simply prepare a list of suitable transitions, using the following method:  Algorithm T  Plain hange transitions  . This algorithm omputes a table t[1℄,  t[2℄, : : : , t[n!  cid:0  1℄ suh that the ations of Algorithm P are equivalent to the  suessive interhanges a  $ a  for 1  cid:20  k < n!. We assume that n  cid:21  2.  t[k℄  t[k℄+1  T1. [Initialize.℄ Set N   n!, d   N=2, t[d ℄   1, and m   2.  5   6  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  T2. [Loop on m.℄ Terminate if m = n. Otherwise set m   m + 1, d   d=m,  and k   0.  We maintain the ondition d = n!=m!.   T3. [Hunt down.℄ Set k   k + d and j   m  cid:0  1. Then while j > 0, set t[k ℄   j ,  j   j  cid:0  1, and k   k + d, until j = 0.  T4. [O cid:11 set.℄ Set t[k ℄   t[k ℄ + 1 and k   k + d.  T5. [Hunt up.℄ While j < m  cid:0  1, set j   j + 1, t[k ℄   j , and k   k + d. Return  to T3 if k < N , otherwise return to T2.  For example, if n = 4 we get the table  t[1℄; t[2℄; : : : ; t[23℄  =  3; 2; 1; 3; 1; 2; 3; 1;  3; 2; 1; 3; 1; 2; 3; 1; 3; 2; 1; 3; 1; 2; 3 .  Alphametis. Now let's onsider a simple kind of puzzle in whih permutations  are useful: How an the pattern  + MORE   6   SEND  MONEY  represent a orret sum, if every letter stands for a di cid:11 erent deimal digit?  [H. E. Dudeney, Strand 68  1924 , 97, 214.℄ Suh puzzles are often alled  \alphametis," a word oined by J. A. H. Hunter [Globe and Mail  Toronto:  27 Otober 1955 , 27℄; another term, \ryptarithm," has also been suggested by  S. Vatriquant [Sphinx 1  May 1931 , 50℄.  The lassi alphameti  6  an easily be solved by hand  see exerise 21 . But  let's suppose we want to deal with a large set of ompliated alphametis, some  of whih may be unsolvable while others may have dozens of solutions. Then we  an save time by programming a omputer to try out all permutations of digits  that math a given pattern, seeing whih permutations yield a orret sum.  [A omputer program for solving alphametis was published by John Beidler in  Creative Computing 4, 6  November{Deember 1978 , 110{113.℄  We might as well raise our sights slightly and onsider additive alphametis  in general, dealing not only with simple sums like  6  but also with examples like  VIOLIN + VIOLIN + VIOLA = TRIO + SONATA:  Equivalently, we want to solve puzzles suh as  2 VIOLIN  + VIOLA  cid:0  TRIO  cid:0  SONATA = 0 ;   7   where a sum of terms with integer oeÆients is given and the goal is to obtain  zero by substituting distint deimal digits for the di cid:11 erent letters. Eah letter  in suh a problem has a \signature" obtained by substituting 1 for that letter  and 0 for the others; for example, the signature for I in  7  is  2 010010  + 01000  cid:0  0010  cid:0  000000;  namely 21010.  If we arbitrarily assign the odes  1; 2; : : : ; 10  to the letters   V; I; O; L; N; A; T; R; S; X , the respetive signatures orresponding to  7  are  s  = 210000;  s  = 21010;  s  =  cid:0 7901;  s  = 210;  s  =  cid:0 998;  1  2  3  4  5   8   s  =  cid:0 100;  s  =  cid:0 1010;  s  =  cid:0 100;  s  =  cid:0 100000;  s  = 0:  6  7  8  9  10  6   7.2.1.2  GENERATING ALL PERMUTATIONS  7   An additional letter, X, has been added beause we need ten of them.  The  problem now is to  cid:12 nd all permutations a  : : : a  of f0; 1; : : : ; 9g suh that  1  10  a  cid:1  s =  a  s  = 0:   9   j  j  10  X  j=1  There also is a side ondition, beause the numbers in alphametis should not  have zero as a leading digit. For example, the sums  7316  5731  6524  2817  + 0823  + 0647  + 0735  + 0368  and  and  and  08139  06378  07259  03185  and numerous others are not onsidered to be valid solutions of  6 . In general  there is a set F of  cid:12 rst letters suh that we must have  a  6= 0  for all j 2 F ;   10   j  the set F orresponding to  7  and  8  is f1; 7; 9g.  One way to takle a family of additive alphametis is to start by using  Algorithm T to prepare a table of 10!  cid:0  1 transitions t[k ℄. Then, for eah problem  de cid:12 ned by a signature sequene  s  ; : : : ; s    and a  cid:12 rst-letter set F , we an  1  10  exhaustively look for solutions as follows:  A1. [Initialize.℄ Set a  a  : : : a    01 : : : 9, v     j  cid:0  1 s  , k   1, and  1  2  10  j  P  10  j=1  Æ    s   cid:0  s  for 1  cid:20  j < 10.  j  j+1  j  A2. [Test.℄ If v = 0 and if  10  holds, output the solution a  : : : a  .  1  10  A3. [Swap.℄ Stop if k = 10!. Otherwise set j   t[k ℄, v   v  cid:0   a   cid:0  a    Æ  ,  j+1  j  j  a  $ a  , k   k + 1, and return to A2.  j+1  j  Step A3 is justi cid:12 ed by the fat that swapping a  with a  simply dereases a  cid:1  s  j  j+1  by  a   cid:0  a    s   cid:0  s   . Even though 10! is 3,628,800, a fairly large number,  j+1  j  j+1  j  the operations in step A3 are so simple that the whole job takes only a fration  of a seond on a modern omputer.  An alphameti is said to be pure if it has a unique solution. Unfortunately   7  is not pure; the permutations 1764802539 and 3546281970 both solve  9  and   10 , hene we have both  176478 + 176478 + 17640 = 2576 + 368020  and  354652 + 354652 + 35468 = 1954 + 742818:  Furthermore s  = s  in  8 , so we an obtain two more solutions by interhanging  6  8  the digits assigned to A and R.  On the other hand  6  is pure, yet the method we have desribed will  cid:12 nd  two di cid:11 erent permutations that solve it. The reason is that  6  involves only  eight distint letters, hene we will set it up for solution by using two dummy  signatures s  = s  = 0. In general, an alphameti with m distint letters will  9  10  have 10  cid:0  m dummy signatures s  =  cid:1   cid:1   cid:1  = s  = 0, and eah of its solutions  m+1  10  will be found  10  cid:0  m ! times unless we insist that, say, a  <  cid:1   cid:1   cid:1  < a  .  m+1  10  7   8  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  A general framework. A great many algorithms have been proposed for  generating permutations of distint ob jets, and the best way to understand  them is to apply the multipliative properties of permutations that we studied  in Setion 1.3.3. For this purpose we will hange our notation slightly, by using  0-origin indexing and writing a  a  : : : a  for permutations of f0; 1; : : : ; n  cid:0  1g  0  1  n cid:0 1  instead of writing a  a  : : : a  for permutations of f1; 2; : : : ; ng. More importantly,  1  2  n  we will onsider shemes for generating permutations in whih most of the ation  takes plae at the left, so that all permutations of f0; 1; : : : ; k  cid:0  1g will be  generated during the  cid:12 rst k ! steps, for 1  cid:20  k  cid:20  n. For example, one suh  sheme for n = 4 is  0123; 1023; 0213; 2013; 1203; 2103; 0132; 1032; 0312; 3012; 1302; 3102;  0231; 2031; 0321; 3021; 2301; 3201; 1230; 2130; 1320; 3120; 2310; 3210 ;   11   this is alled \reverse olex order," beause if we re cid:13 et the strings from right  to left we get 3210, 3201, 3120, : : : , 0123, the reverse of lexiographi order.  Another way to think of  11  is to view the entries as  n cid:0 a    : : :  n cid:0 a    n cid:0 a   ,  n  2  1  where a  a  : : : a  runs lexiographially through the permutations of f1; 2; : : : ; ng.  1  2  n  Let's reall from Setion 1.3.3 that a permutation like  cid:11  = 250143 an be  written either in the two-line form  or in the more ompat yle form   cid:16    cid:17   0 1 2 3 4 5   cid:11  =  2 5 0 1 4 3   cid:11  =  0 2   1 5 3 ;  with the meaning that  cid:11  takes 0 7! 2, 1 7! 5, 2 7! 0, 3 7! 1, 4 7! 4, and  5 7! 3; a 1-yle like ` 4 ' need not be indiated. Sine 4 is a  cid:12 xed point of this  permutation we say that \ cid:11   cid:12 xes 4." We also write 0 cid:11  = 2, 1 cid:11  = 5, and so on,  saying that j  cid:11  is \the image of j under  cid:11 ." Multipliation of permutations, like   cid:11  times  cid:12  where  cid:12  = 543210, is readily arried out either in the two-line form   cid:16    cid:17  cid:16    cid:17    cid:16    cid:17  cid:16    cid:17    cid:16    cid:17   0 1 2 3 4 5  0 1 2 3 4 5  0 1 2 3 4 5  2 5 0 1 4 3  0 1 2 3 4 5   cid:11  cid:12  =  =  =  2 5 0 1 4 3  5 4 3 2 1 0  2 5 0 1 4 3  3 0 5 4 1 2  3 0 5 4 1 2  or in the yle form   cid:11  cid:12  =  0 2   1 5 3   cid:1   0 5   1 4  2 3  =  0 3 4 1   2 5 :  Notie that the image of 1 under  cid:11  cid:12  is 1  cid:11  cid:12    =  1 cid:11   cid:12  = 5 cid:12  = 0, et. Warning:  About half of all books that deal with permutations multiply them the other way   from right to left , imagining that  cid:11  cid:12  means that  cid:12  should be applied before  cid:11 .  The reason is that traditional funtional notation, in whih one writes  cid:11  1  = 5,  makes it natural to think that  cid:11  cid:12   1  should mean  cid:11   cid:12   1   =  cid:11  4  = 4. However,  the present book subsribes to the other philosophy, and we shall always multiply  permutations from left to right.  The order of multipliation needs to be understood arefully when permu-  tations are represented by arrays of numbers. For example, if we \apply" the  re cid:13 etion  cid:12  = 543210 to the permutation  cid:11  = 250143, the result 341052 is not  cid:11  cid:12   8   7.2.1.2  GENERATING ALL PERMUTATIONS  9  but  cid:12  cid:11 . In general, the operation of replaing a permutation  cid:11  = a  a  : : : a  0  1  n cid:0 1  by some rearrangement a  a  : : : a  takes k 7! a  = k cid:12  cid:11 . Permuting  0 cid:12   1 cid:12   k cid:12    n cid:0 1  cid:12   the positions by  cid:12  orresponds to premultipliation by  cid:12  , hanging  cid:11  to  cid:12  cid:11 ;  permuting the values by  cid:12  orresponds to postmultipliation by  cid:12  , hanging  cid:11   to  cid:11  cid:12  . Thus, for example, a permutation generator that interhanges a  $ a  is  premultiplying the urrent permutation by  1 2 , postmultiplying it by  a  a   .  Following a proposal made by  Evariste Galois in 1830, a nonempty set G   cid:19   1  2  1  2  of permutations is said to form a group if it is losed under multipliation, that  is, if the produt  cid:11  cid:12  is in G whenever  cid:11  and  cid:12  are elements of G [see  Erits   cid:19   et M cid:19 emoires Math cid:19 ematiques d'  Evariste Galois  Paris: 1962 , 47℄. Consider, for   cid:19   example, the 4-ube represented as a 4  cid:2  4 torus  0 1 3 2  4 5 7 6   d f e  8 9 b a   12   as in exerise 7.2.1.1{17, and let G be the set of all permutations of the verties  f0; 1; : : : ; fg that preserve adjaeny: A permutation  cid:11  is in G if and only if  u  cid:0  cid:0  cid:0  v implies u cid:11   cid:0  cid:0  cid:0  v cid:11  in the 4-ube.   Here we are using hexadeimal  digits  0; 1; : : : ; f  to stand for the integers  0; 1; : : : ; 15 . The labels in  12   are hosen so that u  cid:0  cid:0  cid:0  v if and only if u and v di cid:11 er in only one bit position.   This set G is obviously a group, and its elements are alled the symmetries or  \automorphisms" of the 4-ube.  Groups of permutations G are onveniently represented inside a omputer by  means of a Sims table, introdued by Charles C. Sims [Computational Methods  in Abstrat Algebra  Oxford: Pergamon, 1970 , 169{183℄, whih is a family of  subsets S  , S  , : : : of G having the following property: S  ontains exatly one  1  2  k  permutation  cid:27   that takes k 7! j and  cid:12 xes the values of all elements greater  kj  than k , whenever G ontains suh a permutation. We let  cid:27   be the identity  kk  permutation, whih is always present in G; but when 0  cid:20  j < k , any suitable  permutation an be seleted to play the role of  cid:27   . The main advantage of a  kj  Sims table is that it provides a onvenient representation of the entire group:  Lemma S. Let S  , S  , : : : , S  be a Sims table for a group G of permutations  1  2  n cid:0 1  on f0; 1; : : : ; n  cid:0  1g. Then every element  cid:11  of G has a unique representation   cid:11  =  cid:27    cid:27   : : :  cid:27   ;  where  cid:27   2 S  for 1  cid:20  k < n.   13   1  2  n cid:0 1  k  k  Proof. If  cid:11  has suh a representation and if  cid:27   is the permutation  cid:27   2  n cid:0 1   n cid:0 1 j  S  , then  cid:11  takes n  cid:0  1 7! j , beause all elements of S  [  cid:1   cid:1   cid:1  [ S   cid:12 x the  n cid:0 1  1  n cid:0 2  value of n  cid:0  1. Conversely, if  cid:11  takes n  cid:0  1 7! j we have  cid:11  =  cid:11    cid:27   , where  0   cid:0    cid:11   =  cid:11   cid:27    n cid:0 1 j  0   n cid:0 1 j   cid:0   is a permutation of G that  cid:12 xes n  cid:0  1.  As in Setion 1.3.3,  cid:27   denotes the  inverse of  cid:27  .  The set G  of all suh permutations is a group, and S  , : : : , S  1  n cid:0 2  0  0  is a Sims table for G  ; therefore the result follows by indution on n.  9   10  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  For example, a bit of alulation shows that one possible Sims table for the  automorphism group of the 4-ube is  S  = f  ;  01  23  45  67  89  ab  d  ef ; : : : ;  S  = f  ;  12  56  9a  de ;  14  36  9  be ;  18  3a  5  7e g;   0f  1e  2d  3  4b  5a  69  78 g;  S  = f  ;  24  35  a  bd ;  28  39  6  7d g;   14   f  e  d    b  S  = f  g;  S  = f  ;  48  59  6a  7b g;  S  = S  =  cid:1   cid:1   cid:1  = S  = f  g;  a  9  1  here S  ontains 16 permutations  cid:27   for 0  cid:20  j  cid:20  15, whih respetively take  f  fj  i 7! i  cid:8   15  cid:0  j   for 0  cid:20  i  cid:20  15. The set S  ontains only four permutations,  e  beause an automorphism that  cid:12 xes f must take e into a neighbor of f; thus the  image of e must be either e or d or b or 7. The set S  ontains only the identity    permutation, beause an automorphism that  cid:12 xes f, e, and d must also  cid:12 x .  Most groups have S  = f  g for all small values of k , as in this example; hene a  k  Sims table usually needs to ontain only a fairly small number of permutations  although the group itself might be quite large.  The Sims representation  13  makes it easy to test if a given permutation  cid:11   lies in G: First we determine  cid:27   =  cid:27   , where  cid:11  takes n  cid:0  1 7! j , and we  n cid:0 1   n cid:0 1 j  0  0  0  let  cid:11   =  cid:11   cid:27   ; then we determine  cid:27   =  cid:27   , where  cid:11   takes n  cid:0  2 7! j  ,  0  n cid:0 2   n cid:0 2 j   cid:0   n cid:0 1  00  0   cid:0   and we let  cid:11   =  cid:11    cid:27   ; and so on. If at any stage the required  cid:27   does not  n cid:0 2  kj  exist in S  , the original permutation  cid:11  does not belong to G. In the ase of  14 ,  k  this proess must redue  cid:11  to the identity after  cid:12 nding  cid:27   ,  cid:27   ,  cid:27   ,  cid:27   , and  cid:27   .  f  e  d    b  For example, let  cid:11  be the permutation  14  28  3  69  7d  be , whih or-  responds to transposing  12  about its main diagonal f0; 5; f; ag. Sine  cid:11   cid:12 xes f,   cid:27   will be the identity permutation   , and  cid:11   =  cid:11 . Then  cid:27   is the member of S  f  e  e  0  00  that takes e 7! b, namely  14  36  9  be , and we  cid:12 nd  cid:11   =  28  39  6  7d .  This permutation belongs to S  , so  cid:11  is indeed an automorphism of the 4-ube.  d  Conversely,  13  also makes it easy to generate all elements of the orre-  sponding group. We simply run through all permutations of the form   cid:27  1;     cid:27  2;     : : :  cid:27  n  cid:0  1;    ;  1  2  n cid:0 1  where  cid:27  k ;     is the    + 1 st element of S  for 0  cid:20    < s  = jS  j and  k  k  k  k  k  k  1  cid:20  k < n, using any algorithm of Setion 7.2.1.1 that runs through all  n  cid:0  1 -  tuples    ; : : : ;     for the respetive radies  s  ; : : : ; s   .  1  n cid:0 1  1  n cid:0 1  Using the general framework. Our hief onern is the group of al l permuta-  tions on f0; 1; : : : ; n cid:0  1g, and in this ase every set S  of a Sims table will ontain  k  k + 1 elements f cid:27  k ; 0 ;  cid:27  k ; 1 ; : : : ;  cid:27  k ; k g, where  cid:27  k ; 0  is the identity and the  others take k to the values f0; : : : ; k  cid:0  1g in some order.  The permutation  cid:27  k ; j    need not be the same as  cid:27   , and it usually is di cid:11 erent.  Every suh Sims table  kj  leads to a permutation generator, aording to the following outline:  10   7.2.1.2  GENERATING ALL PERMUTATIONS  11  Algorithm G  General permutation generator  . Given a Sims table  S  ; S  ;  1  2  : : : ; S    where eah S  has k + 1 elements  cid:27  k ; j   as just desribed, this  n cid:0 1  k  algorithm generates all permutations a  a  : : : a  of f0; 1; : : : ; n  cid:0  1g, using  0  1  n cid:0 1  an auxiliary ontrol table   : : :     .  n  2  1  G1. [Initialize.℄ Set a    j and     0 for 0  cid:20  j < n.  j  j+1  G2. [Visit.℄  At this point the mixed-radix number  is the number   cid:2    cid:3     ;  :::;    ;    n cid:0 1  2  1  n;  :::;  3;  2  of permutations visited so far.  Visit the permutation a  a  : : : a  .  0  1  n cid:0 1  G3. [Add 1 to   : : :     .℄ Set k   1.  If   = k , set     0, k   k + 1,  n  2  1  k  k  and repeat until   < k . Terminate the algorithm if k = n; otherwise set  k        + 1.  k  k  G4. [Permute.℄ Apply the permutation  cid:28   k ;     ! k  cid:0  1   to a  a  : : : a  , as  k  0  1  n cid:0 1   cid:0   explained below, and return to G2.  Applying a permutation  cid:25  to a  a  : : : a  means replaing a  by a  for  0  1  n cid:0 1  j  j cid:25   0  cid:20  j < n; this orresponds to premultipliation by  cid:25  as explained earlier. Let  us de cid:12 ne   cid:28   k ; j   =  cid:27  k ; j   cid:27  k ; j  cid:0  1   for 1  cid:20  j  cid:20  k ;   15    cid:0   ! k  =  cid:27  1; 1  : : :  cid:27  k ; k :   16   Then steps G3 and G4 maintain the property that  a  a  : : : a  is the permutation  cid:27  1;      cid:27  2;     : : :  cid:27  n  cid:0  1;    ,   17   0  1  n cid:0 1  1  2  n cid:0 1  and Lemma S proves that every permutation is visited exatly one.  0  1  2  3  00  01  02  10  11  12  20  21  22  30  31  32  000 001  010 011  020 021  100 101  110 111  120 121  200 201  210 211  220 221  300 301  310 311  320 321  Fig. 19. Algorithm G impliitly traverses this tree when n = 4.  The tree in Fig. 19 illustrates Algorithm G in the ase n = 4. Aording  to  17 , every permutation a  a  a  a  of f0; 1; 2; 3g orresponds to a three-digit  0  1  2  3  ontrol string       , with 0  cid:20     cid:20  3, 0  cid:20     cid:20  2, and 0  cid:20     cid:20  1. Some nodes  3  2  1  3  2  1  of the tree are labeled by a single digit   ; these orrespond to the permutations  3   cid:27  3;     of the Sims table being used. Other nodes, labeled with two digits     ,  3  3  2  orrespond to the permutations  cid:27  2;     cid:27  3;    . A heavy line onnets node   2  3  3  to node   0 and node     to node     0, beause  cid:27  2; 0  and  cid:27  1; 0  are the  3  3  2  3  2  identity permutation and these nodes are essentially equivalent. Adding 1 to the  mixed-radix number       in step G3 orresponds to moving from one node of  3  2  1  Fig. 19 to its suessor in preorder, and the transformation in step G4 hanges  the permutations aordingly. For example, when       hanges from 121 to  3  2  1  200, step G4 premultiplies the urrent permutation by   cid:28   3; 2  ! 2   =  cid:28   3; 2   cid:27  2; 2    cid:27  1; 1   ;   cid:0    cid:0    cid:0   11   12  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  premultiplying by  cid:27  1; 1   takes us from node 121 to node 12, premultiplying   cid:0   by  cid:27  2; 2   takes us from node 12 to node 1, and premultiplying by  cid:28   3; 2  =   cid:27  3; 2  cid:27  3; 1   takes us from node 1 to node 2  cid:17  200, whih is the preorder su-  essor of node 121. Stating this another way, premultipliation by  cid:28   3; 2 ! 2    cid:0   is exatly what is needed to hange  cid:27  1; 1  cid:27  2; 2  cid:27  3; 1  to  cid:27  1; 0  cid:27  2; 0  cid:27  3; 2 ,   cid:0    cid:0   preserving  17 .  Algorithm G de cid:12 nes a huge number of permutation generators  see exer-  ise 37 , so it is no wonder that many of its speial ases have appeared in the  literature. Of ourse some of its variants are muh more eÆient than others,  and we want to  cid:12 nd examples where the operations are partiularly well suited  to the omputer we are using.  We an, for instane, obtain permutations in reverse olex order as a speial  ase of Algorithm G  see  11  , by letting  cid:27  k ; j   be the  j + 1 -yle   cid:27  k ; j   =  k cid:0 j k cid:0 j+1 : : : k  :   18   The reason is that  cid:27  k ; j   should be the permutation that orresponds to   : : :   n  1  in reverse olex order when   = j and   = 0 for i 6= k , and this permutation  k  i  a  a  : : : a  is 0 1 : : :  k cid:0 j cid:0 1   k cid:0 j+1  : : :  k   k cid:0 j    k+1  : : :  n cid:0 1 . For exam-  0  1  n cid:0 1  ple, when n = 8 and   : : :   = 0 0 0 3 0 0 0 0 the orresponding reverse olex  n  1  permutation is 01345267, whih is  2 3 4 5  in yle form. When  cid:27  k ; j   is given  by  18 , Eqs.  15  and  16  lead to the formulas   cid:28   k ; j   =  k cid:0 j k  ;   19   ! k  =  0 1   0 1 2  : : :  0 1 : : : k  =  0 k   1 k cid:0 1   2 k cid:0 2  : : : =  cid:30  k ;   20   here  cid:30  k  is the \ k + 1 - cid:13 ip" that hanges a  : : : a  to a  : : : a  . In this ase ! k   0  k  k  0  turns out to be the same as ! k   , beause  cid:30  k   =   .   cid:0   2  Equations  19  and  20  are impliitly present behind the senes in Algo-  rithm L and in its reverse olex equivalent  exerise 2 , where step L3 essentially  applies a transposition and step L4 does a  cid:13 ip. Step G4 atually does the  cid:13 ip   cid:12 rst; but the identity   k cid:0 j k  cid:30  k  cid:0  1  =  cid:30  k  cid:0  1   j cid:0 1 k    21   shows that a  cid:13 ip followed by a transposition is the same as a  di cid:11 erent  trans-  position followed by the  cid:13 ip.  In fat, equation  21  is a speial ase of the important identity   cid:0    cid:0    cid:25    j  j  : : : j     cid:25  =  j   cid:25  j   cid:25  : : : j   cid:25  ;   22   1  2  t  1  2  t  whih is valid for any permutation  cid:25  and any t-yle  j  j  : : : j   . On the  1  2  t  left of  22  we have, for example, j   cid:25  7! j  7! j  7! j   cid:25  , in agreement with  1  1  2  2  the yle on the right. Therefore if  cid:11  and  cid:25  are any permutations whatsoever,  the permutation  cid:25    cid:11   cid:25   alled the onjugate of  cid:11  by  cid:25   has exatly the same  yle struture as  cid:11 ; we simply replae eah element j in eah yle by j  cid:25  .  Another signi cid:12 ant speial ase of Algorithm G was introdued by R. J.  Ord-Smith [CACM 10  1967 , 452; 12  1969 , 638; see also Comp. J. 14  1971 ,  12   7.2.1.2  GENERATING ALL PERMUTATIONS  13  136{139℄, whose algorithm is obtained by setting   cid:27  k ; j   =  k : : : 1 0   :   23   j  Now it is lear from  15  that  and one again we have   cid:28   k ; j   =  k : : : 1 0 ;   24   ! k  =  0 k   1 k cid:0 1   2 k cid:0 2  : : : =  cid:30  k ;   25   beause  cid:27  k ; k  =  0 1 : : : k  is the same as before. The nie thing about this  method is that the permutation needed in step G4, namely  cid:28   k ;     ! k  cid:0  1   ,  k   cid:0   does not depend on   :  k   cid:28   k ; j   ! k  cid:0  1   =  k : : : 1 0  cid:30  k  cid:0  1   =  cid:30  k :   26    cid:0    cid:0   Thus, Ord-Smith's algorithm is the speial ase of Algorithm G in whih step G4  simply interhanges a  $ a  , a  $ a  , : : : ; this operation is usually quik,  0  k  1  k cid:0 1  beause k is small, and it saves some of the work of Algorithm L.  See exerise 38  and the referene to G. S. Kl cid:127 ugel in Setion 7.2.1.7.   We an do even better by rigging things so that step G4 needs to do only a  single transposition eah time, somewhat as in Algorithm P but not neessarily  on adjaent elements. Many suh shemes are possible. The best is probably  to let   cid:28   k ; j   ! k  cid:0  1   =   27    cid:26    cid:0    k 0 ;  if k is even,   k j cid:0 1 ;  if k is odd,  as suggested by B. R. Heap [Comp. J. 6  1963 , 293{294℄. Notie that Heap's  method always transposes a  $ a  exept when k = 3, 5, : : : ; and the value of k ,  k  0  in 5 of every 6 steps, is either 1 or 2. Exerise 40 proves that Heap's method  does indeed generate all permutations.  Bypassing unwanted bloks. One noteworthy advantage of Algorithm G is  that it runs through all permutations of a  : : : a  before touhing a  ; then it  0  k cid:0 1  k  performs another k ! yles before hanging a  again, and so on. Therefore if at  k  any time we reah a setting of the  cid:12 nal elements a  : : : a  that is unimportant  k  n cid:0 1  to the problem we're working on, we an skip quikly over all permutations that  end with the undesirable suÆx. More preisely, we ould replae step G2 by the  following substeps:  step G2.2.  G2.0. [Aeptable?℄ If a  : : : a  is not an aeptable suÆx, go to G2.1. Oth-  k  n cid:0 1  erwise set k   k  cid:0  1. Then if k > 0, repeat this step; if k = 0, proeed to  G2.1. [Skip this suÆx.℄ If   = k , apply  cid:27  k ; k   to a  : : : a  , set     0,  k  0  n cid:0 1  k   cid:0   k   k + 1, and repeat until   < k . Terminate if k = n; otherwise set  k        + 1, apply  cid:28   k ;     to a  : : : a  , and return to G2.0.  k  k  k  0  n cid:0 1  G2.2. [Visit.℄ Visit the permutation a  : : : a  .  0  n cid:0 1  Step G1 should also set k   n  cid:0  1. Notie that the new steps are areful to  preserve ondition  17 . The algorithm has beome more ompliated, beause  13   14  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  we need to know the permutations  cid:28   k ; j   and  cid:27  k ; k  in addition to the permu-  tations  cid:28   k ; j   ! k  cid:0  1   that appear in G4. But the additional ompliations   cid:0   are often worth the e cid:11 ort, beause the resulting program might run signi cid:12 antly  faster.  0  1  2  3  00  01  02  10  11  12  30  31  32  010 011  020 021  100 101  120 121  300 301  310 311  320 321  Fig. 20. Unwanted branhes an be pruned from the  tree of Fig. 19, if Algorithm G is suitably extended.  For example, Fig. 20 shows what happens to the tree of Fig. 19 when  the suÆxes of a  a  a  a  that orrespond to nodes 00, 11, 121, and 2 are not  0  1  2  3  aeptable.  Eah suÆx a  : : : a  of the permutation a  : : : a  orresponds  k  n cid:0 1  0  n cid:0 1  to a pre cid:12 x   : : :   of the ontrol string   : : :   , beause the permutations  n  k  n  1   cid:27  1;     : : :  cid:27  k  cid:0  1;     do not a cid:11 et a  : : : a  .  Step G2.1 premultiplies by  1  k cid:0 1  k  n cid:0 1   cid:28   k ; j   to move from node   : : :   j to its right sibling   : : :    j+1 ,  n cid:0 1  k+1  n cid:0 1  k+1  and it premultiplies by  cid:27  k ; k   to move up from node   : : :   k to its  n cid:0 1  k+1   cid:0   parent   : : :   . Thus, to get from the rejeted pre cid:12 x 121 to its preorder  n cid:0 1  k+1  suessor, the algorithm premultiplies by  cid:27  1; 1   ,  cid:27  2; 2   , and  cid:28   3; 2 , thereby   cid:0    cid:0   moving from node 121 to 12 to 1 to 2.  This is a somewhat exeptional ase,  beause a pre cid:12 x with k = 1 is rejeted only if we don't want to visit the unique  permutation a  a  : : : a  that has suÆx a  : : : a  .  After node 2 is rejeted,  0  1  n cid:0 1  1  n cid:0 1   cid:28   3; 3  takes us to node 3, et.  Notie, inidentally, that bypassing a suÆx a  : : : a  in this extension  k  n cid:0 1  of Algorithm G is essentially the same as bypassing a pre cid:12 x a  : : : a  in our  1  j  original notation, if we go bak to the idea of generating permutations a  : : : a  1  n  of f1; : : : ; ng and doing most of the work at the right-hand end. Our original  notation orresponds to hoosing a   cid:12 rst, then a  , : : : , then a  ; the notation  1  2  n  in Algorithm G essentially hooses a   cid:12 rst, then a  , : : : , then a  . Algo-  n cid:0 1  n cid:0 2  0  rithm G's onventions may seem bakward, but they make the formulas for Sims  table manipulation a lot simpler. A good programmer soon learns to swith  without diÆulty from one viewpoint to another.  We an apply these ideas to alphametis, beause it is lear for example that  most hoies of the values for the letters D, E, and Y will make it impossible for  SEND plus MORE to equal MONEY: We need to have  D + E  cid:0  Y  mod 10 = 0 in that  problem. Therefore many permutations an be eliminated from onsideration.  In general, if r  is the maximum power of 10 that divides the signature  k  value s  , we an sort the letters and assign odes f0; 1; : : : ; 9g so that r   cid:21   k  0  r   cid:21   cid:1   cid:1   cid:1   cid:21  r  . For example, to solve the trio sonata problem  7 , we ould use  1  9   0; 1; : : : ; 9  respetively for  X; S; V; A; R; I; L; T; O; N , obtaining the signatures  s  = 0;  s  =  cid:0 100000;  s  = 210000;  s  =  cid:0 100;  s  =  cid:0 100;  0  1  2  3  4  s  = 21010;  s  = 210;  s  =  cid:0 1010;  s  =  cid:0 7901;  s  =  cid:0 998;  5  6  7  8  9  14   7.2.1.2  GENERATING ALL PERMUTATIONS  15  hene  r  ; : : : ; r    =  1; 5; 4; 2; 2; 1; 1; 1; 0; 0 . Now if we get to step G2.0 for a  0  9  value of k with r  6= r  , we an say that the suÆx a  : : : a  is unaeptable  k cid:0 1  k  k  9  unless a  s  +  cid:1   cid:1   cid:1  + a  s  is a multiple of 10  . Also,  10  tells us that a  : : : a  k  k  9  9  k  9  r  k cid:0 1  is unaeptable if a  = 0 and k 2 F ; the  cid:12 rst-letter set F is now f1; 2; 7g.  k  Our previous approah to alphametis with steps A1{A3 above used brute  fore to run through 10! possibilities. It operated rather fast under the irum-  stanes, sine the adjaent-transposition method allowed it to get by with only  6 memory referenes per permutation; but still, 10! is 3,628,800, so the entire  proess ost almost 22 megamems, regardless of the alphameti being solved.  By ontrast, the extended Algorithm G with Heap's method and the uto cid:11 s just  desribed will  cid:12 nd all four solutions to  7  with fewer than 128 kilomems! Thus  the suÆx-skipping tehnique runs more than 170 times faster than the previous  method, whih simply blasted away blindly.  Most of the 128 kilomems in the new approah are spent applying  cid:28   k ;      k  in step G2.1. The other memory referenes ome primarily from appliations of   cid:27  k ; k   in that step, but  cid:28  is needed 7812 times while  cid:27   is needed only 2162   cid:0    cid:0   times. The reason is easy to understand from Fig. 20, beause the \shortut  move"  cid:28   k ;     ! k  cid:0  1   in step G4 hardly ever applies; in this ase it is used  k   cid:0   only four times, one for eah solution. Thus, preorder traversal of the tree is  aomplished almost entirely by  cid:28  steps that move to the right and  cid:27   steps  that move upward. The  cid:28  steps dominate in a problem like this, where very   cid:0    cid:0   few omplete permutations are atually visited, beause eah step  cid:27  k ; k   is  preeded by k steps  cid:28   k ; 1 ,  cid:28   k ; 2 , : : : ,  cid:28   k ; k .  This analysis reveals that Heap's method  whih goes to great lengths to  optimize the permutations  cid:28   k ; j   ! k  cid:0  1   so that eah transition in step G4   cid:0   is a simple transposition  is not espeially good for the extended Algorithm G  unless omparatively few suÆxes are rejeted in step G2.0. The simpler reverse  olex order, for whih  cid:28   k ; j   itself is always a simple transposition, is now muh  more attrative  see  19  . Indeed, Algorithm G with reverse olex order solves  the alphameti  7  with only 97 kilomems.  Similar results our with respet to other alphameti problems. For ex-  ample, if we apply the extended Algorithm G to the alphametis in exerise 24,  parts  a  through  h , the omputations involve respetively   551, 110, 14, 8, 350, 84, 153, 1598  kilomems with Heap's method;   28    429, 84, 10, 5, 256, 63, 117, 1189  kilomems with reverse olex.  The speedup fator for reverse olex in these examples, ompared to brute fore  with Algorithm T, ranges from 18 in ase  h  to 4200 in ase  d , and it is about  80 on the average; Heap's method gives an average speedup of about 60.  We know from Algorithm L, however, that lexiographi order is easily han-  dled without the ompliation of the ontrol table   : : :   used by Algorithm G.  n  1  And a loser look at Algorithm L shows that we an improve its behavior when  permutations are frequently being skipped, by using a linked list instead of a  sequential array. The improved algorithm is well-suited to a wide variety of  algorithms that wish to generate restrited lasses of permutations:  15   16  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  Algorithm X  Lexiographi permutations with restrited pre cid:12 xes  . This al-  gorithm generates all permutations a  a  : : : a  of f1; 2; : : : ; ng that pass a given  1  2  n  sequene of tests  t   a   ;  t   a  ; a   ;  : : : ;  t   a  ; a  ; : : : ; a   ;  1  1  2  1  2  n  1  2  n  visiting them in lexiographi order. It uses an auxiliary table of links l  , l  ,  0  1  : : : , l  to maintain a yli list of unused elements, so that if the urrently  n  available elements are  f1; : : : ; ng n fa  ; : : : ; a  g = fb  ; : : : ; b  g;  where b  <  cid:1   cid:1   cid:1  < b  ,   29   1  k  1  n cid:0 k  1  n cid:0 k  then we have  l  = b  ;  l  = b  for 1  cid:20  j < n  cid:0  k ;  and l  = 0:   30   0  1  b  j+1  b  j  n cid:0 k  It also uses an auxiliary table u  : : : u  to undo operations that have been  1  n  performed on the l array.  X1. [Initialize.℄ Set l    k + 1 for 0  cid:20  k < n, and l    0. Then set k   1.  k  n  X2. [Enter level k .℄ Set p   0, q   l  .  0  X3. [Test a  : : : a  .℄ Set a    q . If t   a  ; : : : ; a    is false, go to X5. Otherwise,  1  k  k  k  1  k  if k = n, visit a  : : : a  and go to X6.  1  n  X4. [Inrease k .℄ Set u    p, l    l  , k   k + 1, and return to X2.  k  p  q  X5. [Inrease a  .℄ Set p   q , q   l  . If q 6= 0 return to X3.  k  p  X6. [Derease k .℄ Set k   k  cid:0  1, and terminate if k = 0. Otherwise set p   u  ,  k  q   a  , l    q , and go to X5.  k  p  The basi idea of this elegant algorithm is due to M. C. Er [Comp. J. 30  1987 ,  282℄. We an apply it to alphametis by hanging notation slightly, obtaining  permutations a  : : : a  of f0; : : : ; 9g and letting l  play the former role of l  . The  0  9  10  0  resulting algorithm needs only 49 kilomems to solve the trio-sonata problem  7 ,  and it solves the alphametis of exerise 24 a { h  in   248, 38, 4, 3, 122, 30, 55, 553  kilomems;   31   respetively. Thus it runs about 165 times faster than the brute-fore approah.  Another way to apply Algorithm X to alphametis is often faster yet  see  exerise 49 .  1  2  3  4  2  3  4  1  2  4  1  2  3  3  4  2  4  2  4  1  4  1  2  2  3  1  3  1  2  4  3  2  4  4  1  2  1  3  2  3  1  2  1  Fig. 21. The tree impliitly traversed by Algorithm X when n = 4, if all permu-  tations are visited exept those beginning with 132, 14, 2, 314, or 4312.  16   7.2.1.2  GENERATING ALL PERMUTATIONS  17  *Dual methods.  If S  , : : : , S  is a Sims table for a permutation group G,  1  n cid:0 1  we learned in Lemma S that every element of G an be expressed uniquely as  a produt  cid:27   : : :  cid:27   , where  cid:27   2 S  ; see  13 . Exerise 50 shows that every  1  n cid:0 1  k  k  element  cid:11  an also be expressed uniquely in the dual form   cid:0    cid:0    cid:0    cid:11  =  cid:27   : : :  cid:27    cid:27   ;  where  cid:27   2 S  for 1  cid:20  k < n;   32   n cid:0 1  2  1  k  k  and this fat leads to another large family of permutation generators. In par-  tiular, when G is the group of all n! permutations, every permutation an be  written   cid:27  n  cid:0  1;      : : :  cid:27  2;       cid:27  1;      ;   33   n cid:0 1  2  1   cid:0    cid:0    cid:0   where 0  cid:20     cid:20  k for 1  cid:20  k < n and the permutations  cid:27  k ; j   are the same as  k  in Algorithm G. Now, however, we want to vary   most rapidly and   least  n cid:0 1  1  rapidly, so we arrive at an algorithm of a di cid:11 erent kind:  Algorithm H  Dual permutation generator  . Given a Sims table as in Algo-  rithm G, this algorithm generates all permutations a  : : : a  of f0; : : : ; n  cid:0  1g,  0  n cid:0 1  using an auxiliary table   : : :   .  0  n cid:0 1  H1. [Initialize.℄ Set a    j and     0 for 0  cid:20  j < n.  j  j  H2. [Visit.℄  At this point the mixed-radix number  is the number   cid:2    cid:3     ;    ;  :::;    1  2  n cid:0 1  2;  3;  :::;  n  of permutations visited so far.  Visit the permutation a  a  : : : a  .  0  1  n cid:0 1  H3. [Add 1 to     : : :   .℄ Set k   n  cid:0  1. If   = k , set     0, k   k  cid:0  1, and  0  1  n cid:0 1  k  k  repeat until k = 0 or   < k . Terminate the algorithm if k = 0 ; otherwise  k  set       + 1.  k  k  H4. [Permute.℄ Apply the permutation  cid:28   k ;     ! k + 1   to a  a  : : : a  , as  k  0  1  n cid:0 1   cid:0   explained below, and return to H2.  Although this algorithm looks almost idential to Algorithm G, the permutations   cid:28  and ! that it needs in step H4 are quite di cid:11 erent from those needed in step G4.  The new rules, whih replae  15  and  16 , are   cid:28   k ; j   =  cid:27  k ; j     cid:27  k ; j  cid:0  1 ;  for 1  cid:20  j  cid:20  k ;   34    cid:0   ! k  =  cid:27  n  cid:0  1; n  cid:0  1    cid:27  n  cid:0  2; n  cid:0  2   : : :  cid:27  k ; k   :   35    cid:0    cid:0    cid:0   The number of possibilities is just as vast as it was for Algorithm G, so we  will on cid:12 ne our attention to a few ases that have speial merit. One natural  ase to try is, of ourse, the Sims table that makes Algorithm G produe reverse  olex order, namely   cid:27  k ; j   =  k cid:0 j k cid:0 j+1 : : : k    36   as in  18 . The resulting permutation generator turns out to be very nearly the  same as the method of plain hanges; so we an say that Algorithms L and P  are essentially dual to eah other.  See exerise 52.   Another natural idea is to onstrut a Sims table for whih step H4 always  makes a single transposition of two elements, by analogy with the onstrution  of  27  that ahieves maximum eÆieny in step G4. But suh a mission now  turns out to be impossible: We annot ahieve it even when n = 4. For if  17   18  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  we start with the identity permutation a  a  a  a  = 0123, the transitions that  0  1  2  3  take us from ontrol table         = 0000 to 0001 to 0002 to 0003 must move  0  1  2  3  the 3; so, if they are transpositions, they must be  3 a ,  a b , and  b   for some  permutation ab of f0; 1; 2g. The permutation orresponding to         = 0003  0  1  2  3  is now  cid:27  3; 3   =  b    a b   3 a  =  3 a b  ; and the next permutation, whih   cid:0   orresponds to         = 0010, will be  cid:27  2; 1   , whih must  cid:12 x the element 3.  0  1  2  3   cid:0    cid:0   The only suitable transposition is  3  , hene  cid:27  2; 1   must be  3    3 a b   =   a b  . Similarly we  cid:12 nd that  cid:27  2; 2   must be  a  b , and the permutation   cid:0   orresponding to         = 0023 will be  3 a b    a  b  =  3  . Step H4 is now  0  1  2  3  supposed to onvert this to the permutation  cid:27  1; 1   , whih orresponds to the   cid:0   ontrol table 0100 that follows 0023. But the only transposition that will onvert   3   into a permutation that  cid:12 xes 2 and 3 is  3  ; and the resulting permutation  also  cid:12 xes 1, so it annot be  cid:27  1; 1   .   cid:0   The proof in the preeding paragraph shows that we annot use Algorithm H  to generate all permutations with the minimum number of transpositions. But it  also suggests a simple generation sheme that omes very lose to the minimum,  and the resulting algorithm is quite attrative beause it needs to do extra work  only one per n  n  cid:0  1  steps.  See exerise 53.   Finally, let's onsider the dual of Ord-Smith's method, when   cid:27  k ; j   =  k : : : 1 0    37   j  as in  23 . One again the value of  cid:28   k ; j   is independent of j ,   cid:28   k ; j   =  0 1 : : : k ;   38   and this fat is partiularly advantageous in Algorithm H beause it allows us  to dispense with the ontrol table     : : :   . The reason is that   = 0 in  0  1  n cid:0 1  n cid:0 1  step H3 if and only if a  = n  cid:0  1, beause of  32 ; and indeed, when   = 0  n cid:0 1  j  for k < j < n in step H3 we have   = 0 if and only if a  = k . Therefore we an  k  k  reformulate this variant of Algorithm H as follows.  Algorithm C  Permutation generation by yli shifts  . This algorithm visits  all permutations a  : : : a  of the distint elements fx  ; : : : ; x  g.  1  n  1  n  C1. [Initialize.℄ Set a    x  for 1  cid:20  j  cid:20  n.  j  j  C2. [Visit.℄ Visit the permutation a  : : : a  , and set k   n.  1  n  C3. [Shift.℄ Replae a  a  : : : a  by the yli shift a  : : : a  a  , and return to C2  1  2  k  2  k  1  if a  6= x  .  k  k  C4. [Derease k .℄ Set k   k  cid:0  1, and go bak to C3 if k > 1.  For example, the suessive permutations of f1; 2; 3; 4g generated when n = 4 are  1234, 2341, 3412, 4123,  1234 ,  2314, 3142, 1423, 4231,  2314 ,  3124, 1243, 2431, 4312,  3124 ,  1234 ,  2134, 1342, 3421, 4213,  2134 ,  1324, 3241, 2413, 4132,  1324 ,  3214, 2143, 1432, 4321,  3214 ,  2134 ,  1234 ,  18   7.2.1.2  GENERATING ALL PERMUTATIONS  19  with unvisited intermediate permutations shown in parentheses. This algorithm  may well be the simplest permutation generator of all, in terms of minimum  program length. It is due to G. G. Langdon, Jr. [CACM 10  1967 , 298{299;  11  1968 , 392℄; similar methods had been published previously by C. Tompkins  [Pro. Symp. Applied Math. 6  1956 , 202{205℄ and, more expliitly, by R. Seitz  [Unternehmensforshung 6  1962 , 2{15℄. The proedure is partiularly well  suited to appliations in whih yli shifting is eÆient, for example when su-  essive permutations are being kept in a mahine register instead of in an array.  The main disadvantage of dual methods is that they usually do not adapt  well to situations where large bloks of permutations need to be skipped, be-  ause the set of all permutations with a given value of the  cid:12 rst ontrol entries      : : :   is usually not of importane. The speial ase  36  is, however,  0  1  k cid:0 1  sometimes an exeption, beause the n!=k ! permutations with     : : :   =  0  1  k cid:0 1  00 : : : 0 in that ase are preisely those a  a  : : : a  in whih 0 preedes 1,  0  1  n cid:0 1  1 preedes 2, : : : , and k  cid:0  2 preedes k  cid:0  1.  *Ehrlih's swap method. Gideon Ehrlih has disovered a ompletely di cid:11 erent  approah to permutation generation, based on yet another way to use a ontrol  table   : : :   . His method obtains eah permutation from its predeessor by  1  n cid:0 1  interhanging the leftmost element with another:  Algorithm E  Ehrlih swaps  . This algorithm generates all permutations of the  distint elements a  : : : a  by using auxiliary tables b  : : : b  and   : : :   .  0  n cid:0 1  0  n cid:0 1  1  n  E1. [Initialize.℄ Set b    j and     0 for 0  cid:20  j < n.  j  j+1  E2. [Visit.℄ Visit the permutation a  : : : a  .  0  n cid:0 1  E3. [Find k .℄ Set k   1. Then if   = k , set     0, k   k + 1, and repeat until  k  k    < k . Terminate if k = n, otherwise set       + 1.  k  k  k  E4. [Swap.℄ Interhange a  $ a  .  0  b  k  E5. [Flip.℄ Set j   1, k   k  cid:0  1. If j < k , interhange b  $ b  , set j   j + 1,  j  k  k   k  cid:0  1, and repeat until j  cid:21  k . Return to E2.  Notie that steps E2 and E3 are idential to steps G2 and G3 of Algorithm G.  The most amazing thing about this algorithm, whih Ehrlih ommuniated to  Martin Gardner in 1987, is that it works; exerise 55 ontains a proof. A similar  method, whih simpli cid:12 es the operations of step E5, an be validated in the same  way  see exerise 56 . The average number of interhanges performed in step E5  is less than 0.18  see exerise 57 .  As it stands, Algorithm E isn't faster than other methods we have seen. But  it has the nie property that it hanges eah permutation in a minimal way, using  only n  cid:0  1 di cid:11 erent kinds of transpositions. Whereas Algorithm P used adjaent  interhanges, a  $ a  , Algorithm E uses  cid:12 rst-element swaps, a  $ a  , also  t cid:0 1  t  0  t  alled star transpositions, for some well-hosen sequene of indies t[1℄, t[2℄, : : : ,  t[n!  cid:0  1℄. And if we are generating permutations repeatedly for the same fairly  small value of n, we an preompute this sequene, as we did in Algorithm T  19   20  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  for the index sequene of Algorithm P. Notie that star transpositions have an  advantage over adjaent interhanges, beause we always know the value of a  0  from the previous swap; we need not read it from memory.  Let E  be the sequene of n!  cid:0  1 indies t suh that Algorithm E swaps a  n  0  with a  in step E4. Sine E  begins with E  , we an regard E  as the  cid:12 rst  t  n+1  n  n  n!  cid:0  1 elements of an in cid:12 nite sequene  E  = 1 2 1 2 1 3 2 1 2 1 2 3 1 2 1 2 1 3 2 1 2 1 2 4 3 1 3 1 3 2 1 3 1 3 1 2 : : : :   39   1  For example, if n = 4 and a  a  a  a  = 1234, the permutations visited by  0  1  2  3  Algorithm E are  1234; 2134; 3124; 1324; 2314; 3214;  4213; 1243; 2143; 4123; 1423; 2413;  3412; 4312; 1342; 3142; 4132; 1432;   40   2431; 3421; 4321; 2341; 3241; 4231:  *Using fewer generators. After seeing Algorithms P and E, we might naturally  ask whether all permutations an be obtained by using just two basi operations,  instead of n  cid:0  1. For example, Nijenhuis and Wilf [Combinatorial Algorithms   1975 , Exerise 6℄ notied that all permutations an be generated for n = 4  if we replae a  a  a  : : : a  at eah step by either a  a  : : : a  a  or a  a  a  : : : a  ,  1  2  3  n  2  3  n  1  2  1  3  n  and they wondered whether suh a method exists for all n.  In general, if G is any group of permutations and if  cid:11   , : : : ,  cid:11   are ele-  1  k  ments of G, the Cayley graph for G with generators   cid:11   ; : : : ;  cid:11     is the direted  1  k  graph whose verties are the permutations  cid:25  of G and whose ars go from  cid:25   to  cid:11    cid:25  , : : : ,  cid:11    cid:25  .  [Arthur Cayley, Amerian J. Math. 1  1878 , 174{176.℄ The  1  k  question of Nijenhuis and Wilf is equivalent to asking whether the Cayley graph  for all permutations of f1; 2; : : : ; ng, with generators  cid:27  and  cid:28  where  cid:27  is the yli  permutation  1 2 : : : n  and  cid:28  is the transposition  1 2 , has a Hamiltonian path.  A basi theorem due to R. A. Rankin [Pro. Cambridge Philos. So. 44   1948 , 17{25℄ allows us to onlude in many ases that Cayley graphs with two  generators do not have a Hamiltonian yle:  Theorem R. Let G be a group onsisting of g permutations. If the Cayley graph  for G with generators   cid:11 ;  cid:12    has a Hamiltonian yle, and if the permutations    cid:11 ;  cid:12  ;  cid:11   cid:12     are respetively of order  a; b;  , then either  is even or g=a and g=b   The order of a permutation  cid:11  is the least positive integer a suh that  cid:11   is the  a   cid:0   are odd.  identity.   Proof. See exerise 73.  In partiular, when  cid:11  =  cid:27  and  cid:12  =  cid:28  as above, we have g = n!, a = n, b = 2, and   = n  cid:0  1, beause  cid:27   cid:28   =  2 : : : n . Therefore we onlude that no Hamiltonian   cid:0   yle is possible when n  cid:21  4 is even. However, a Hamiltonian path is easy to  20   7.2.1.2  GENERATING ALL PERMUTATIONS  21  onstrut when n = 4, beause we an join up the 12-yles  1234 ! 2341 ! 3412 ! 4312 ! 3124 ! 1243 ! 2431  ! 4231 ! 2314 ! 3142 ! 1423 ! 4123 ! 1234;   41   2134 ! 1342 ! 3421 ! 4321 ! 3214 ! 2143 ! 1432  ! 4132 ! 1324 ! 3241 ! 2413 ! 4213 ! 2134;  by starting at 2341 and jumping from 1234 to 2134, ending at 4213.  Ruskey, Jiang, and Weston [Disrete Applied Math. 57  1995 , 75{83℄ un-  dertook an exhaustive searh in the  cid:27 { cid:28  graph for n = 5 and disovered that  it has  cid:12 ve essentially distint Hamiltonian yles, one of whih  the \most  beautiful"  is illustrated in Fig. 22 a . They also found a Hamiltonian path  for n = 6; this was a diÆult feat, beause it is the outome of a 720-stage  binary deision tree. Unfortunately the solution they disovered has no apparent  logial struture. A somewhat less omplex path is desribed in exerise 70, but  even that path annot be alled simple. Therefore a  cid:27 { cid:28  approah will probably  not be of pratial interest for larger values of n unless a new onstrution  is disovered. R. C. Compton and S. G. Williamson [Linear and Multilinear  Algebra 35  1993 , 237{293℄ have proved that Hamiltonian yles exist for all n  if the three generators  cid:27  ,  cid:27   , and  cid:28  are allowed instead of just  cid:27  and  cid:28  ; their   cid:0   yles have the interesting property that every nth transformation is  cid:28  , and the  intervening n  cid:0  1 transformations are either all  cid:27  or all  cid:27   . But their method is   cid:0   too ompliated to explain in a short spae.  Exerise 69 desribes a general permutation algorithm that is reasonably  simple and needs only three generators, eah of order 2. Figure 22 b  illustrates  the ase n = 5 of this method, whih was motivated by examples of bell-ringing.   a  Using only transitions  1 2 3 4 5  and  1 2 .   b  Using only transitions  1 2   3 4 ,  2 3   4 5 , and  3 4 .  Fig. 22. Hamiltonian yles for 5! permutations.  Faster, faster. What is the fastest way to generate permutations? This question  has often been raised in omputer publiations, beause people who examine n!  possibilities want to keep the running time as small as possible. But the answers  have generally been ontraditory, beause there are many di cid:11 erent ways to  formulate the question. Let's try to understand the related issues by studying  how permutations might be generated most rapidly on the MMIX omputer.  Suppose  cid:12 rst that our goal is to produe permutations in an array of n  onseutive memory words  otabytes . The fastest way to do this, of all those  we've seen in this setion, is to streamline Heap's method  27 , as suggested by  R. Sedgewik [Computing Surveys 9  1977 , 157{160℄.  21   22  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  The key idea is to optimize the ode for the most ommon ases of steps G2  and G3, namely the ases in whih all ativity ours at the beginning of the  array. If registers u, v , and w ontain the ontents of the  cid:12 rst three words, and  if the next six permutations to be generated involve permuting those words in  all six possible ways, we an learly do the job as follows:  PUSHJ 0,Visit  STO v,A0;  STO u,A1;  PUSHJ 0,Visit  STO w,A0;  STO v,A2;  PUSHJ 0,Visit  STO u,A0;  STO w,A1;  PUSHJ 0,Visit   42   STO v,A0;  STO u,A2;  PUSHJ 0,Visit  STO w,A0;  STO v,A1;  PUSHJ 0,Visit   Here A0 is the address of otabyte a  , et.  A omplete permutation program,  0  whih takes are of getting the right things into u, v , and w, appears in exer-  ise 77, but the other instrutions are less important beause they need to be  performed only  of the time. The total ost per permutation, not ounting the  1  6  4 cid:29  needed for PUSHJ and POP on eah all to Visit, omes to approximately  2:77 cid:22  + 5:69 cid:29  with this approah.  If we use four registers u, v , w, x, and if  we expand  42  to 24 alls on Visit, the running time per permutation drops  to about 2:19 cid:22  + 3:07 cid:29  . And with r registers and r ! Visits, exerise 78 shows  that the ost is  2 + O 1=r !    cid:22  +  cid:29  , whih is very nearly the ost of two STO  instrutions.  The latter is, of ourse, the minimum possible time for any method that  generates all permutations in a sequential array. : : : Or is it? We have assumed  that the visiting routine wants to see permutations in onseutive loations, but  perhaps that routine is able to read the permutations from di cid:11 erent starting  points. Then we an arrange to keep a   cid:12 xed and to keep two opies of the  n cid:0 1  other elements in its viinity:  a  a  : : : a  a  a  a  : : : a  :   43   0  1  n cid:0 2  n cid:0 1  0  1  n cid:0 2  If we now let a  a  : : : a  run through  n  cid:0  1 ! permutations, always hanging  0  1  n cid:0 2  both opies simultaneously by doing two STO ommands instead of one, we an  let every all to Visit look at the n permutations  a  a  : : : a  ;  a  : : : a  a  ;  : : : ;  a  a  : : : a  ;   44   0  1  n cid:0 1  1  n cid:0 1  0  n cid:0 1  0  n cid:0 2  whih all appear onseutively. The ost per permutation is now redued to the  ost of three simple instrutions like ADD, CMP, PBNZ, plus O 1=n .  [See Varol  and Rotem, Comp. J. 24  1981 , 173{176.℄  Furthermore, we might not want to waste time storing permutations into  memory at all. Suppose, for example, that our goal is to generate all permuta-  tions of f0; 1; : : : ; n  cid:0  1g. The value of n will probably be at most 16, beause  16! = 20;922;789;888;000 and 17! = 355;687;428;096;000. Therefore an entire  permutation will  cid:12 t in the 16 nybbles of an otabyte, and we an keep it in a  single register. This will be advantageous only if the visiting routine doesn't  need to unpak the individual nybbles; but let's suppose that it doesn't. How  fast an we generate permutations in the nybbles of a 64-bit register?  22   7.2.1.2  GENERATING ALL PERMUTATIONS  23  One idea, suggested by a tehnique due to A. J. Goldstein [U. S. Patent  3383661  14 May 1968 ℄, is to preompute the table  t[1℄; : : : ; t[5039℄  of plain-  hange transitions for seven elements, using Algorithm T. These numbers t[k ℄ lie  between 1 and 6, so we an pak 20 of them into a 64-bit word. It is onvenient  to put the number  2  t[20j + k ℄ into word j of an auxiliary table, for  P  20  3k cid:0 1  k=1  0  cid:20  j < 252, with t[5040℄ = 1; for example, the table begins with the odeword  00j001j010j011j100j101j110j100j110j101j100j011j010j001j110j001j010j011j100j101j110j00:  The following program reads suh odes eÆiently:  Perm  h Set register a to the  cid:12 rst permutation i  0H  LDA  p,T  p   address of  cid:12 rst odeword.  JMP  3F  1H  h Visit the permutation in register a i  h Swap the nybbles of a that lie t bits from the right i  SRU  ,,3       cid:29  3.   45   2H  AND  t,,1  t    ^  11100   .  2  PBNZ t,1B  Branh if t 6= 0.  ADD  p,p,8  3H  LDO  ,p,0     next odeword.  PBNZ ,2B   The  cid:12 nal odeword is followed by 0.   h If not done, advane the leading n  cid:0  7 nybbles and return to 0B i  Exerise 79 shows how to h Swap the nybbles : : : i with seven instrutions, using  bit manipulation operations that are found on most omputers. Therefore the  ost per permutation is just a bit more than 10 cid:29  .  The instrutions that feth  new odewords ost only   cid:22  + 5 cid:29  =20 ; and the instrutions that advane the  leading n cid:0  7 nybbles are even more negligible sine their ost is divided by 5040.   Notie that there is now no need for PUSHJ and POP as there was with  42 ; we  ignored those instrutions before, but they did ost 4 cid:29  .  We an, however, do even better by adapting Langdon's yli-shift method,  Algorithm C. Suppose we start with the lexiographially largest permutation  and operate as follows:  GREG   JMP  2F  0H  OCTA fedba9876543210& 1<< 4*N -1   Perm  LDOU a,0B  Set a    : : : 3210 .    16 cid:0 n  1H  SRU  a,a,4* 16-N   a   ba=16  .  OR  a,a,t  a   a _ t.   46   2H  h Visit the permutation in register a i  SRU  t,a,4* N-1   t   ba=16  .  n cid:0 1  17 cid:0 n  16  SLU  a,a,4* 17-N   a   16  a mod 16  .  PBNZ t,1B  To 1B if t 6= 0.  h Continue with Langdon's method i  The running time per permutation is now only 5 cid:29  + O 1=n , again without the  need for PUSHJ and POP. See exerise 81 for an interesting way to extend  46  to  a omplete program, obtaining a remarkably short and fast routine.  23   24  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  Fast permutation generators are amusing, but in pratie we an usually  save more time by streamlining the visiting routine than by speeding up the  generator.  namely  Topologial sorting. Instead of working with all n! permutations of f1; : : : ; ng,  we often want to look only at permutations that obey ertain restritions. For  example, we might be interested only in permutations for whih 1 preedes 3,  2 preedes 3, and 2 preedes 4; there are  cid:12 ve suh permutations of f1; 2; 3; 4g,  1234; 1243; 2134; 2143; 2413:   47   The problem of topologial sorting, whih we studied in Setion 2.2.3 as a  cid:12 rst  example of nontrivial data strutures, is the general problem of  cid:12 nding a permu-  tation that satis cid:12 es m suh onditions x   cid:30  y  , : : : , x   cid:30  y  , where x  cid:30  y means  1  1  m  m  that x should preede y in the permutation. This problem arises frequently in  pratie, so it has several di cid:11 erent names; for example, it is often alled the linear  embedding problem, beause we want to arrange ob jets in a line while preserving  ertain order relationships. It is also the problem of extending a partial ordering  to a total ordering  see exerise 2.2.3{14 .  Our goal in Setion 2.2.3 was to  cid:12 nd a single permutation that satis cid:12 es  all the relations. But now we want rather to  cid:12 nd al l suh permutations, all  topologial sorts. Indeed, we will assume in the present setion that the elements  x and y on whih the relations are de cid:12 ned are integers between 1 and n, and  that we have x < y whenever x  cid:30  y . Consequently the permutation 12 : : : n  will always be topologially orret.  If this simplifying assumption is not met,  we an preproess the data by using Algorithm 2.2.3T to rename the ob jets  appropriately.   Many important lasses of permutations are speial ases of this topologial  ordering problem. For example, the permutations of f1; : : : ; 8g suh that  1  cid:30  2;  2  cid:30  3;  3  cid:30  4;  6  cid:30  7;  7  cid:30  8  are equivalent to permutations of the multiset f1; 1; 1; 1; 2; 3; 3; 3g, beause we  an map f1; 2; 3; 4g 7! 1, 5 7! 2, and f6; 7; 8g 7! 3. We know how to generate  permutations of a multiset using Algorithm L, but now we will learn another way.  Notie that x preedes y in a permutation a  : : : a  if and only if a  < a  in  1  n  x  y  0  0  the inverse permutation a  : : : a  . Therefore the algorithm we are about to study  0  0  1  n  will also  cid:12 nd all permutations a  : : : a  suh that a  < a  whenever j  cid:30  k . For  0  0  0  0  1  n  j  k  example, we learned in Setion 5.1.4 that a Young tableau is an arrangement of  f1; : : : ; ng in rows and olumns so that eah row is inreasing from left to right  and eah olumn is inreasing from top to bottom. The problem of generating all  3  cid:2  3 Young tableaux is therefore equivalent to generating all a  : : : a  suh that  0  0  1  9  0  0  0  0  0  0  0  0  0  a  < a  < a  ;  a  < a  < a  ;  a  < a  < a  ;  1  2  3  4  5  6  7  8  9  0  0  0  0  0  0  0  0  0  a  < a  < a  ;  a  < a  < a  ;  a  < a  < a  ;  1  4  7  2  5  8  3  6  9   48   and this is a speial kind of topologial sorting.  24   7.2.1.2  GENERATING ALL PERMUTATIONS  25  We might also want to  cid:12 nd all mathings of 2n elements, namely all ways to  partition f1; : : : ; 2ng into n pairs. There are  2n cid:0 1  2n cid:0 3  : : :  1  =  2n != 2  n!   n  ways to do this, and they orrespond to permutations that satisfy  0  0  0  0  0  0  0  0  0  a  < a  ;  a  < a  ;  : : : ;  a  < a  ;  a  < a  <  cid:1   cid:1   cid:1  < a  :   49   1  2  3  4  2n cid:0 1  2n  1  3  2n cid:0 1  An elegant algorithm for exhaustive topologial sorting was disovered by  Y. L. Varol and D. Rotem [Comp. J. 24  1981 , 83{84℄, who realized that a  method analogous to plain hanges  Algorithm P  an be used. Suppose we  have found a way to arrange f1; : : : ; n  cid:0  1g topologially, so that a  : : : a  1  n cid:0 1  satis cid:12 es all the onditions that do not involve n. Then we an easily write down  all the allowable ways to insert the  cid:12 nal element n without hanging the relative  order of a  : : : a  : We simply start with a  : : : a  n, then shift n left one step  1  n cid:0 1  1  n cid:0 1  at a time, until it annot move further. Applying this idea reursively yields the  following straightforward proedure.  Algorithm V  Al l topologial sorts  . Given a relation  cid:30  on f1; : : : ; ng with the  property that x  cid:30  y implies x < y , this algorithm generates all permutations  a  : : : a  and their inverses a  : : : a  with the property that a  < a  whenever  1  n  1  n  j  k  0  0  0  0  j  cid:30  k . We assume for onveniene that a  = 0 and that 0  cid:30  k for 1  cid:20  k  cid:20  n.  0  V1. [Initialize.℄ Set a    j and a    j for 0  cid:20  j  cid:20  n.  j  j  V2. [Visit.℄ Visit the permutation a  : : : a  and its inverse a  : : : a  . Then set  1  n  1  n  0  0  k   n.  0  0  V3. [Can k move left?℄ Set j   a  and l   a  . If l  cid:30  k , go to V5.  k  j cid:0 1  V4. [Yes, move it.℄ Set a    k , a    l, a    j  cid:0  1, and a    j . Go to V2.  j cid:0 1  j  k  l  0  0  j+1  j  l  0  V5. [No, put k bak.℄ While j < k , set l   a  , a    l, a    j , and j   j + 1.  Then set a    a    k . Derease k by 1 and return to V3 if k > 0.  0  k  k  For example, Theorem 5.1.4H tells us that there are exatly 42 Young tableaux  of size 3  cid:2  3. If we apply Algorithm V to the relations  48  and write the inverse  permutation in array form  0  0  0  a  a  a  1  2  3  0  0  0  4  5  6  0  0  0  a  a  a  7  8  9  a  a  a  ;   50   we get the following 42 results:  1 2 3  1 2 3  1 2 3  1 2 3  1 2 3  1 2 4  1 2 4  1 2 4  1 2 4  1 2 4  1 2 5  1 2 5  1 2 5  1 2 5  4 5 6  4 5 7  4 5 8  4 6 7  4 6 8  3 5 6  3 5 7  3 5 8  3 6 7  3 6 8  3 6 7  3 6 8  3 4 6  3 4 7  7 8 9  6 8 9  6 7 9  5 8 9  5 7 9  7 8 9  6 8 9  6 7 9  5 8 9  5 7 9  4 8 9  4 7 9  7 8 9  6 8 9  1 2 5  1 2 6  1 2 6  1 2 7  1 2 6  1 2 6  1 2 7  1 3 4  1 3 4  1 3 4  1 3 4  1 3 4  1 3 5  1 3 5  3 4 8  3 4 7  3 4 8  3 4 8  3 5 7  3 5 8  3 5 8  2 5 6  2 5 7  2 5 8  2 6 7  2 6 8  2 6 7  2 6 8  6 7 9  5 8 9  5 7 9  5 6 9  4 8 9  4 7 9  4 6 9  7 8 9  6 8 9  6 7 9  5 8 9  5 7 9  4 8 9  4 7 9  1 4 5  1 4 5  1 3 5  1 3 5  1 3 5  1 3 6  1 3 6  1 3 7  1 3 6  1 3 6  1 3 7  1 4 6  1 4 6  1 4 7  2 6 7  2 6 8  2 4 6  2 4 7  2 4 8  2 4 7  2 4 8  2 4 8  2 5 7  2 5 8  2 5 8  2 5 7  2 5 8  2 5 8  3 8 9  3 7 9  7 8 9  6 8 9  6 7 9  5 8 9  5 7 9  5 6 9  4 8 9  4 7 9  4 6 9  3 8 9  3 7 9  3 6 9  25   26  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  Let t  be the number of topologial sorts for whih the  cid:12 nal n  cid:0  r elements  r  are in their initial position a  = j for r < j  cid:20  n. Equivalently, t  is the number  j  r  of topologial sorts a  : : : a  of f1; : : : ; rg, when we ignore the relations involving  1  r  elements greater than r . Then the reursive mehanism underlying Algorithm V  shows that step V2 is performed N times and step V3 is performed M times,  where  M = t  +  cid:1   cid:1   cid:1  + t  and  N = t  :   51   n  1  n  Also, step V4 and the loop operations of V5 are performed N  cid:0  1 times; the rest  of step V5 is done M  cid:0  N + 1 times. Therefore the total running time of the  algorithm is a linear ombination of M , N , and n.  If the element labels are hosen poorly, M might be muh larger than N .  For example, if the onstraints input to Algorithm V are  2  cid:30  3;  3  cid:30  4;  : : : ; n  cid:0  1  cid:30  n;   52   then t  = j for 1  cid:20  j  cid:20  n and we have M =   n  + n , N = n. But those  j  1  2  2  onstraints are also equivalent to  1  cid:30  2;  2  cid:30  3;  : : : ; n  cid:0  2  cid:30  n  cid:0  1;   53   under renaming of the elements; then M is redued to 2n  cid:0  1 = 2N  cid:0  1.  Exerise 89 shows that a simple preproessing step will  cid:12 nd element labels  so that a slight modi cid:12 ation of Algorithm V is able to generate all topologial  sorts in O N + n  steps. Thus topologial sorting an always be done eÆiently.  Think twie before you permute. We have seen several attrative algorithms  for permutation generation in this setion, but many algorithms are known by  whih permutations that are optimum for partiular purposes an be found  without running through all possibilities. For example, Theorem 6.1S showed  that we an  cid:12 nd the best way to arrange reords on a sequential storage simply  by sorting them with respet to a ertain ost riterion, and this proess takes  only O n log n  steps. In Setion 7.5.2 we will study the assignment problem,  whih asks how to permute the olumns of a square matrix so that the sum of  the diagonal elements is maximized. That problem an be solved in at most  3  O n    operations, so it would be foolish to use a method of order n! unless n  is extremely small. Even in ases like the traveling salesrep problem, when no  eÆient algorithm is known, we an usually  cid:12 nd a muh better approah than  to examine every possible solution. Permutation generation is best used when  there is good reason to look at eah permutation individually.  EXERCISES  when the value of j is near n.  x 1. [20 ℄ Explain how to make Algorithm L run faster, by streamlining its operations  2. [20 ℄ Rewrite Algorithm L so that it produes all permutations of a  : : : a  in  1  n  reverse olex order.  In other words, the values of the re cid:13 etions a  : : : a  should be  n  1  lexiographially dereasing, as in  11 . This form of the algorithm is often simpler  and faster than the original, beause fewer alulations depend on the value of n.   26   7.2.1.2  GENERATING ALL PERMUTATIONS  27  x 3. [M21 ℄ The rank of a ombinatorial arrangement X with respet to a generation  algorithm is the number of other arrangements that the algorithm visits prior to X .  Explain how to ompute the rank of a given permutation a  : : : a  with respet to  1  n  Algorithm L, if fa  ; : : : ; a  g = f1; : : : ; ng. What is the rank of 314592687?  1  n  4. [M23 ℄ Generalizing exerise 3, explain how to ompute the rank of a  : : : a  with  1  n  respet to Algorithm L when fa  ; : : : ; a  g is the multiset fn   cid:1  x  ; : : : ; n   cid:1  x  g; here  1  n  1  1  t  t  n  +  cid:1   cid:1   cid:1  + n  = n and x  <  cid:1   cid:1   cid:1  < x  .  The total number of permutations is, of ourse,  1  t  1  t  the multinomial oeÆient   cid:16    cid:17   n  n!  n  ; : : : ; n  n  ! : : : n  !  1  t  1  t  =  ;  see Eq. 5.1.2{ 3 .  What is the rank of 314159265?  5. [HM25 ℄ Compute the mean and variane of the number of omparisons made by  Algorithm L in  a  step L2,  b  step L3, when the elements fa  ; : : : ; a  g are distint.  1  n  6. [HM34 ℄ Derive generating funtions for the mean number of omparisons made  by Algorithm L in  a  step L2,  b  step L3, when fa  ; : : : ; a  g is a general multiset  1  n  as in exerise 4. Also give the results in losed form when fa  ; : : : ; a  g is the binary  1  n  multiset fs  cid:1  0;  n  cid:0  s   cid:1  1g.  7. [HM35 ℄ What is the limit as t ! 1 of the average number of omparisons  made per permutation in step L2 when Algorithm L is being applied to the multiset   a  f2  cid:1  1; 2  cid:1  2; : : : ; 2  cid:1  tg?  b  f1  cid:1  1; 2  cid:1  2; : : : ; t  cid:1  tg?    f2  cid:1  1; 4  cid:1  2; : : : ; 2   cid:1  tg?  t  x 8. [21 ℄ The variations of a multiset are the permutations of all its submultisets. For  example, the variations of f1; 2; 2; 3g are   cid:15 ; 1; 12; 122; 1223; 123; 1232; 13; 132; 1322;  2; 21; 212; 2123; 213; 2132; 22; 221; 2213; 223; 2231; 23; 231; 2312; 232; 2321;  3; 31; 312; 3122; 32; 321; 3212; 322; 3221:  Show that simple hanges to Algorithm L will generate all variations of a given multiset  fa  ; a  ; : : : ; a  g.  1  2  n  9. [22 ℄ Continuing the previous exerise, design an algorithm to generate all r-  variations of a given multiset fa  ; a  ; : : : ; a  g, also alled its r-permutations, namely all  1  2  n  permutations of its r-element submultisets.  For example, the solution to an alphameti  with r distint letters is an r-variation of f0; 1; : : : ; 9g.   10. [20 ℄ What are the values of a  a  : : : a  ,     : : :   , and o  o  : : : o  at the end of  1  2  n  1  2  n  1  2  n  Algorithm P, if a  a  : : : a  = 1 2 : : : n at the beginning?  1  2  n  11. [M22 ℄ How many times is eah step of Algorithm P performed?  Assume that  n  cid:21  2.   x 12. [M23 ℄ What is the 1000000th permutation visited by  a  Algorithm L,  b  Algo-  rithm P,    Algorithm C, if fa  ; : : : ; a  g = f0; : : : ; 9g? Hint: In mixed-radix notation  1  n  we have 1000000 = [  ℄ = [  ℄ .  10;  9;  8;  7;  6;  5;  4;  3;  2;  1  1;  2;  3;  4;  5;  6;  7;  8;  9;  10  2;  6;  6;  2;  5;  1;  2;  2;  0;  0  0;  0;  1;  2;  3;  0;  2;  7;  1;  0  13. [M21 ℄  Martin Gardner, 1974.  True or false: If a  a  : : : a  is initially 12 : : : n,  1  2  n  Algorithm P begins by visiting all n!=2 permutations in whih 1 preedes 2; then the  next permutation is n : : : 21.  14. [M22 ℄ True or false: If a  a  : : : a  is initially x  x  : : : x  in Algorithm P, we always  1  2  n  1  2  n  have a  = x  at the beginning of step P5.  j cid:0   +s  j  j  27   28  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  15. [M23 ℄  Selmer Johnson, 1963.  Show that the o cid:11 set variable s never exeeds 2 in  Algorithm P.  if a  = k.   j  16. [21 ℄ Explain how to make Algorithm P run faster, by streamlining its operations  when the value of j is near n.  This problem is analogous to exerise 1.   x 17. [20 ℄ Extend Algorithm P so that the inverse permutation a  : : : a  is available for  proessing when a  : : : a  is visited in step P2.  The inverse satis cid:12 es a  = j if and only  1  n  0  0  1  n  0  k  18. [21 ℄  Rosary permutations.  Devise an eÆient way to generate  n  cid:0  1 !=2 permu-  tations that represent all possible undireted yles on the verties f1; : : : ; ng; that is,  no yli shift of a  : : : a  or a  : : : a  will be generated if a  : : : a  is generated. The  1  n  n  1  1  n  permutations  1234; 1324; 3124  ould, for example, be used when n = 4.  19. [25 ℄ Construt an algorithm that generates all permutations of n distint elements  looplessly in the spirit of Algorithm 7.2.1.1L.  x 20. [20 ℄ The n-ube has 2  n! symmetries, one for eah way to permute and or om-  n  plement the oordinates. Suh a symmetry is onveniently represented as a signed  permutation, namely a permutation with optional signs attahed to the elements. For  example, 2 3 1 is a signed permutation that transforms the verties of the 3-ube by  hanging x  x  x  to x  x  x  , so that 000 7! 001, 001 7! 011, : : : , 111 7! 110. Design  1  2  3  2  3  1  a simple algorithm that generates all signed permutations of f1; 2; : : : ; ng, where eah  step either interhanges two adjaent elements or negates the  cid:12 rst element.  21. [M21 ℄  E. P. MCravy, 1971.  How many solutions does the alphameti  6  have  in radix b?  in radix b + 1.  s  = s  6= 0 when j 6= k.  j  k  22. [M15 ℄ True or false: If an alphameti has a solution in radix b, it has a solution  23. [M20 ℄ True or false: A pure alphameti annot have two idential signatures  24. [25 ℄ Solve the following alphametis by hand or by omputer:  a  SEND + A + TAD + MORE = MONEY.  b  ZEROES + ONES = BINARY.   Peter MaDonald, 1977     DCLIX + DLXVI = MCCXXV.   Willy Enggren, 1972   d  COUPLE + COUPLE = QUARTET.   Mihael R. W. Bukley, 1977   e  FISH + N + CHIPS = SUPPER.   Bob Vinniombe, 1978   f   SATURN + URANUS + NEPTUNE + PLUTO = PLANETS.   Willy Enggren, 1968   g  EARTH + AIR + FIRE + WATER = NATURE.   Herman Nijon, 1977   h  AN + ACCELERATING + INFERENTIAL + ENGINEERING + TALE + ELITE + GRANT + FEE +  ET + CETERA = ARTIFICIAL + INTELLIGENCE .  i  HARDY + NESTS = NASTY + HERDS.  x 25. [M21 ℄ Devise a fast way to ompute min a  cid:1  s  and max a  cid:1  s  over all valid  permutations a  : : : a  of f0; : : : ; 9g, given the signature vetor s =  s  ; : : : ; s    and  1  10  1  10  the  cid:12 rst-letter set F of an alphameti problem.  Suh a proedure makes it possible  to rule out many ases quikly when a large family of alphametis is being onsidered,  as in several of the exerises that follow, beause a solution an exist only when  min a  cid:1  s   cid:20  0  cid:20  max a  cid:1  s .   26. [25 ℄ What is the unique alphameti solution to  NIIHAU  cid:6  KAUAI  cid:6  OAHU  cid:6  MOLOKAI  cid:6  LANAI  cid:6  MAUI  cid:6  HAWAII = 0?  27. [30 ℄ Construt pure additive alphametis in whih all words have  cid:12 ve letters.  28   7.2.1.2  GENERATING ALL PERMUTATIONS  29  28. [M25 ℄ A partition of the integer n is an expression of the form n = n  + cid:1   cid:1   cid:1 +n  with  1  t  n   cid:21   cid:1   cid:1   cid:1   cid:21  n  > 0. Suh a partition is alled doubly true if  cid:11  n  =  cid:11  n    +  cid:1   cid:1   cid:1  +  cid:11  n    is  1  t  1  t  also a pure alphameti, where  cid:11  n  is the \name" of n in some language. Doubly true  partitions were introdued by Alan Wayne in AMM 54  1947 , 38, 412{414, where he  suggested solving TWENTY = SEVEN + SEVEN + SIX and a few others.  a  Find all partitions that are doubly true in English when 1  cid:20  n  cid:20  20.  b  Wayne also gave the example EIGHTY = FIFTY + TWENTY + NINE + ONE. Find all  doubly true partitions for 1  cid:20  n  cid:20  100 in whih the parts are distint, using the  names ONE, TWO, : : : , NINETYNINE , ONEHUNDRED.  x 29. [M25 ℄ Continuing the previous exerise,  cid:12 nd all equations of the form n  +  cid:1   cid:1   cid:1  +  1  n  = n  +  cid:1   cid:1   cid:1  + n  that are both mathematially and alphametially true in English,  0  0  t  1  0  t  1  t  1  0  t  0  0  when fn  ; : : : ; n  ; n  ; : : : ; n  g are distint positive integers less than 20. For example,  TWELVE + NINE + TWO = ELEVEN + SEVEN + FIVE ;  the alphametis should all be pure.  30. [25 ℄ Solve these multipliative alphametis by hand or by omputer:  a  TWO  cid:2  TWO = SQUARE.   H. E. Dudeney, 1929   b  HIP  cid:2  HIP = HURRAY.   Willy Enggren, 1970     PI  cid:2  R  cid:2  R = AREA.   Brian Barwell, 1981   d  NORTH=SOUTH = EAST=WEST.   Nob Yoshigahara, 1995   e  NAUGHT  cid:2  NAUGHT = ZERO  cid:2  ZERO  cid:2  ZERO.   Alan Wayne, 2003   31. [M22 ℄  Nob Yoshigahara.  What is the unique solution to A=BC + D=EF + G=HI = 1,  when fA; : : : ; Ig = f1; : : : ; 9g?  32. [M25 ℄  H. E. Dudeney, 1901.  Find all ways to represent 100 by inserting a  plus sign and a slash into a permutation of the digits f1; : : : ; 9g. For example, 100 =  91 + 5742=638. The plus sign should preede the slash.  33. [25 ℄ Continuing the previous exerise,  cid:12 nd all positive integers less than 150 that   a  annot be represented in suh a fashion;  b  have a unique representation.  34. [M26 ℄ Make the equation EVEN + ODD + PRIME = x doubly true when  a  x is a  perfet 5th power;  b  x is a perfet 7th power.  x 35. [M20 ℄ The automorphisms of a 4-ube have many di cid:11 erent Sims tables, only one  of whih is shown in  14 . How many di cid:11 erent Sims tables are possible for that group,  when the verties are numbered as in  12 ?  36. [M23 ℄ Find a Sims table for the group of all automorphisms of the 4 cid:2  4 ti-ta-toe  board  0 1 2 3  4 5 6 7  ;  8 9 a b   d e f  namely the permutations that take lines into lines, where a \line" is a set of four  elements that belong to a row, olumn, or diagonal.  x 37. [HM22 ℄ How many Sims tables an be used with Algorithms G or H? Estimate  the logarithm of this number as n ! 1.  38. [HM21 ℄ Prove that the average number of transpositions per permutation when  using Ord-Smith's algorithm  26  is approximately sinh 1  cid:25  1:175:  29   30  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  39. [16 ℄ Write down the 24 permutations generated for n = 4 by  a  Ord-Smith's  method  26 ;  b  Heap's method  27 .  40. [M23 ℄ Show that Heap's method  27  orresponds to a valid Sims table.  x 41. [M33 ℄ Design an algorithm that generates all r-variations of f0; 1; : : : ; n  cid:0  1g by  interhanging just two elements when going from one variation to the next.   See  exerise 9.  Hint: Generalize Heap's method  27 , obtaining the results in positions  a  : : : a  of an array a  : : : a  . For example, one solution when n = 5 and r = 2  n cid:0 r  n cid:0 1  0  n cid:0 1  uses the  cid:12 nal two elements of the respetive permutations 01234, 31204, 30214, 30124,  40123, 20143, 24103, 24013, 34012, 14032, 13042, 13402, 23401, 03421, 02431, 02341,  12340, 42310, 41320, 41230.  42. [M20 ℄ Construt a Sims table for all permutations in whih every  cid:27  k; j   and  every  cid:28   k; j   for 1  cid:20  j  cid:20  k is a yle of length  cid:20  3.  43. [M24 ℄ Construt a Sims table for all permutations in whih every  cid:27  k; k , ! k ,  and  cid:28   k; j   ! k  cid:0  1   for 1  cid:20  j  cid:20  k is a yle of length  cid:20  3.   cid:0   44. [20 ℄ When bloks of unwanted permutations are being skipped by the extended  Algorithm G, is the Sims table of Ord-Smith's method  23  superior to the Sims table  of the reverse olex method  18 ?  45. [20 ℄  a  What are the indies u  : : : u  when Algorithm X visits the permutation  1  9  314592687?  b  What permutation is visited when u  : : : u  = 314157700?  1  9  46. [20 ℄ True or false: When Algorithm X visits a  : : : a  , we have u  > u  if and  1  n  k  k+1  only if a  > a  , for 1  cid:20  k < n.  k  k+1  x 47. [M21 ℄ Express the number of times that eah step of Algorithm X is performed  in terms of the numbers N  , N  , : : : , N  , where N  is the number of pre cid:12 xes a  : : : a  0  1  n  k  1  k  that satisfy t   a  ; : : : ; a    for 1  cid:20  j  cid:20  k.  j  1  j  x 48. [M25 ℄ Compare the running times of Algorithm X and Algorithm L, in the ase  when the tests t   a   , t   a  ; a   , : : : , t   a  ; a  ; : : : ; a    always are true.  1  1  2  1  2  n  1  2  n  x 49. [28 ℄ The text's suggested method for solving additive alphametis with Algo-  rithm X essentially hooses digits from right to left; in other words, it assigns tentative  values to the least signi cid:12 ant digits before onsidering digits that orrespond to higher  powers of 10.  See exerise 25.  Explore an alternative approah that hooses digits from left to right. For example,  suh a method will dedue immediately that M = 1 when SEND + MORE = MONEY. Hint:  50. [M15 ℄ Explain why the dual formula  32  follows from  13 .  51. [M16 ℄ True or false: If the sets S  = f cid:27  k; 0 ; : : : ;  cid:27  k; k g form a Sims table for  k  the group of all permutations, so also do the sets S  = f cid:27  k; 0   ; : : : ;  cid:27  k; k   g.   cid:0    cid:0    cid:0   k  x 52. [M22 ℄ What permutations  cid:28   k; j   and ! k  arise when Algorithm H is used with  the Sims table  36 ? Compare the resulting generator with Algorithm P.  x 53. [M26 ℄  F. M. Ives.  Construt a Sims table for whih Algorithm H will generate  all permutations by making only n! + O  n  cid:0  2 !  transpositions.  54. [20 ℄ Would Algorithm C work properly if step C3 did a right-yli shift, setting  a  : : : a  a    a  a  : : : a  , instead of a left-yli shift?  1  k cid:0 1  k  k  1  k cid:0 1  55. [M27 ℄ Consider the fatorial ruler funtion   cid:26    m  = maxfk j m mod k! = 0g:  !  30   7.2.1.2  GENERATING ALL PERMUTATIONS  31  Let  cid:27   and  cid:28   be permutations of the nonnegative integers suh that  cid:27    cid:28   =  cid:28    cid:27   k  k  j  k  k  j  whenever j  cid:20  k. Let  cid:11   and  cid:12   be the identity permutation, and for m > 0 de cid:12 ne  0  0   cid:0    cid:11   =  cid:12    cid:28    cid:12    cid:11   ;   cid:12   =  cid:27    cid:12   :  m  m cid:0 1   cid:26    m    cid:26    m   m cid:0 1  m cid:0 1  m  m cid:0 1  !  !  For example, if  cid:27   is the  cid:13 ip operation  1 k cid:0 1   2 k cid:0 2  : : : =  0 k  cid:30  k  and if  cid:28   =  0 k ,  k  k  and if Algorithm E is started with a  = j for 0  cid:20  j < n, then  cid:11   and  cid:12   are the  j  m  m  ontents of a  : : : a  and b  : : : b  after step E5 has been performed m times.  0  n cid:0 1  0  n cid:0 1  a  Prove that  cid:12    cid:11   =  cid:27    cid:27    cid:28    cid:28     cid:12    cid:11      .   n+1 !   n+1 !  n+1  n  n+1  n  n!  n!   cid:0    cid:0   n+1  b  Use the result of  a  to establish the validity of Algorithm E.  56. [M22 ℄ Prove that Algorithm E remains valid if step E5 is replaed by  0  E5  . [Transpose pairs.℄ If k > 2, interhange b  $ b  for j = k  cid:0  2, k  cid:0  4, : : : ,  j+1  j   2 or 1 . Return to E2.  57. [HM22 ℄ What is the average number of interhanges made in step E5?  58. [M21 ℄ True or false: If Algorithm E begins with a  : : : a  = x  : : : x  then the  0  n cid:0 1  1  n   cid:12 nal permutation visited begins with a  = x  .  0  n  59. [M20 ℄ Some authors de cid:12 ne the ars of a Cayley graph as running from  cid:25  to  cid:25  cid:11   j  instead of from  cid:25  to  cid:11    cid:25  . Are the two de cid:12 nitions essentially di cid:11 erent?  j  x 60. [21 ℄ A Gray yle for permutations is a yle   cid:25   ;  cid:25   ; : : : ;  cid:25     that inludes  0  1  n! cid:0 1  every permutation of f1; 2; : : : ; ng and has the property that  cid:25   di cid:11 ers from  cid:25   k   k+1  mod n!  by an adjaent transposition. It an also be desribed as a Hamiltonian yle on the  Cayley graph for the group of all permutations on f1; 2; : : : ; ng, with the n cid:0 1 generators    1 2 ;  2 3 ; : : : ;  n cid:0 1 n  . The delta sequene of suh a Gray yle is the sequene of  integers Æ  Æ  : : : Æ  suh that  0  1  n! cid:0 1   cid:25   =  Æ  Æ  +1   cid:25   :   k+1  mod n!  k  k  k   See 7.2.1.1{ 24 , whih desribes the analogous situation for binary n-tuples.  For  example, Fig. 23 illustrates the Gray yle de cid:12 ned by plain hanges when n = 4; its  delta sequene is  32131231   .  3  a  Find all Gray yles for permutations of f1; 2; 3; 4g.  b  Two Gray yles are onsidered to be equivalent if their delta sequenes an be  obtained from eah other by yli shifting  Æ  : : : Æ  Æ  : : : Æ    and or reversal  k  n! cid:0 1  k cid:0 1  0   Æ  : : : Æ  Æ    and or omplementation   n cid:0 Æ     n cid:0 Æ    : : :  n cid:0 Æ    . Whih of  n! cid:0 1  1  0  0  1  n! cid:0 1  the Gray yles in  a  are equivalent?  1234  2134  1243  2143  2314  1324  2413  3124  1342  1423  3214  2341  2431  4123  1432  3241  3142  4213  this Hamiltonian yle on the  4132  Fig. 23. Algorithm P traes out  trunated otahedron of Fig. 5{  1.  3421  4312  3412  4231  4321  31   32  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  61. [21 ℄ Continuing the previous exerise, a Gray ode for permutations is like a Gray  yle exept that the  cid:12 nal permutation  cid:25   is not required to be adjaent to the initial  n! cid:0 1  permutation  cid:25   . Study the set of all Gray odes for n = 4 that start with 1234.  0  x 62. [M23 ℄ What permutations an be reahed as the  cid:12 nal element of a Gray ode  that starts at 12 : : : n?  63. [M25 ℄ Estimate the total number of Gray yles for permutations of f1; 2; 3; 4; 5g.  64. [23 ℄ A \doubly Gray" ode for permutations is a Gray yle with the additional  property that Æ  = Æ   cid:6  1 for all k. Compton and Williamson have proved that suh  k+1  k  odes exist for all n  cid:21  3. How many doubly Gray odes exist for n = 5?  65. [M25 ℄ For whih integers N is there a Gray path through the N lexiographially  smallest permutations of f1; : : : ; ng?  Exerise 7.2.1.1{26 solves the analogous problem  for binary n-tuples.   66. [22 ℄ Ehrlih's swap method suggests another type of Gray yle for permutations,  in whih the n  cid:0  1 generators are the star transpositions  1 2 ,  1 3 , : : : ,  1 n . For  example, Fig. 24 shows the relevant graph when n = 4. Analyze the Hamiltonian yles  of this graph.  1342  2314  1234  2431  1423  2143  3142  4312  3214  4231  3421  4123  3142  4132  3412  4213  3241  4321  3124  4132  2134  1432  2413  1243  2341  1324  2134  1234  2431  1423  2143  1342  2314  1234  4231  3421  4123  3142  4312  3214  Fig. 24. The Cayley graph for permutations of f1; 2; 3; 4g, generated by the  star transpositions  1 2 ,  1 3 , and  1 4 , drawn as a twisted torus.  67. [26 ℄ Continuing the previous exerise,  cid:12 nd a  cid:12 rst-element-swap Gray yle for  n = 5 in whih eah star transposition  1 j   ours 30 times, for 2  cid:20  j  cid:20  5.  68. [M30 ℄  Kompel'makher and Liskovets, 1975.  Let G be the Cayley graph for all  permutations of f1; : : : ; ng, with generators   cid:11   ; : : : ;  cid:11     where eah  cid:11   is a transpo-  1  k  j  sition  u  v   ; also let A be the graph with verties f1; : : : ; ng and edges u   cid:0  cid:0  cid:0  v  j  j  j  j  for 1  cid:20  j  cid:20  k. Prove that G has a Hamiltonian yle if and only if A is onneted.   Figure 23 is the speial ase when A is a path; Figure 24 is the speial ase when A  is a \star."   x 69. [28 ℄ If n  cid:21  4, the following algorithm generates all permutations A  A  A  : : : A  1  2  3  n  of f1; 2; 3; : : : ; ng using only three transformations,   cid:26  =  1 2   3 4   5 6  : : : ;   cid:27  =  2 3   4 5   6 7  : : : ;   cid:28  =  3 4   5 6   7 8  : : : ;  never applying  cid:26  and  cid:28  next to eah other. Explain why it works.  Z1. [Initialize.℄ Set A    j for 1  cid:20  j  cid:20  n. Also set a    2j for j  cid:20  n=2 and  j  j  a    2j + 1 for j < n=2. Then invoke Algorithm P, but with parameter  n cid:0 j  n  cid:0  1 instead of n. We will treat that algorithm as a oroutine, whih should  32   7.2.1.2  GENERATING ALL PERMUTATIONS  33  return ontrol to us whenever it \visits" a  : : : a  in step P2. We will also  1  n cid:0 1  share its variables  exept n .  Z2. [Set x and y .℄  Invoke Algorithm P again, obtaining a new permutation  a  : : : a  and a new value of j . If j = 2, interhange a  $ a   thereby  1  n cid:0 1  1+s  2+s  undoing the e cid:11 et of step P5  and repeat this step; in suh a ase we are at the  halfway point of Algorithm P. If j = 1  so that Algorithm P has terminated ,  set x   y   0 and go to Z3. Otherwise set  x   a  ;  y   a  ;  j cid:0   +s+[o  = cid:0 1℄  j cid:0   +s cid:0 [o  =+1℄  j  j  j  j  these are the two elements most reently interhanged in step P5.  Z3. [Visit.℄ Visit the permutation A  : : : A  . Then go to Z5 if A  = x and A  = y .  1  n  1  2  Z4. [Apply  cid:26 , then  cid:27  .℄ Interhange A  $ A  , A  $ A  , A  $ A  , : : : . Visit  1  2  3  4  5  6  A  : : : A  . Then interhange A  $ A  , A  $ A  , A  $ A  , : : : . Terminate  1  n  2  3  4  5  6  7  if A  : : : A  = 1 : : : n, otherwise return to Z3.  1  n  Z5. [Apply  cid:28  , then  cid:27  .℄ Interhange A  $ A  , A  $ A  , A  $ A  , : : : . Visit  3  4  5  6  7  8  A  : : : A  . Then interhange A  $ A  , A  $ A  , A  $ A  , : : : , and return  1  n  2  3  4  5  6  7  to Z2.  Hint: Show  cid:12 rst that the algorithm works if modi cid:12 ed so that A    n + 1  cid:0  j and  j  a    j in step Z1, and if the \ cid:13 ip" permutations  j  0  0  0   cid:26   =  1 n   2 n cid:0 1  : : : ;   cid:27   =  2 n   3 n cid:0 1  : : : ;   cid:28   =  2 n cid:0 1   3 n cid:0 2  : : :  are used instead of  cid:26 ,  cid:27  ,  cid:28  in steps Z4 and Z5. In this modi cid:12 ation, step Z3 should go  to Z5 if A  = x and A  = y .  1  n  mutations of f1; 1; 3; 4g:  x 70. [M33 ℄ The two 12-yles  41  an be regarded as  cid:27 { cid:28  yles for the twelve per-  1134 ! 1341 ! 3411 ! 4311 ! 3114 ! 1143 ! 1431  ! 4131 ! 1314 ! 3141 ! 1413 ! 4113 ! 1134:  Replaing f1; 1g by f1; 2g yields disjoint yles, and we obtained a Hamiltonian path by  jumping from one to the other. Can a  cid:27 { cid:28  path for all permutations of 6 elements be  formed in a similar way, based on a 360-yle for the permutations of f1; 1; 3; 4; 5; 6g?  71. [48 ℄ Does the Cayley graph with generators  cid:27  =  1 2 : : : n  and  cid:28  =  1 2  have a  Hamiltonian yle whenever n  cid:21  3 is odd?  72. [M21 ℄ Given a Cayley graph with generators   cid:11   ; : : : ;  cid:11    , assume that eah  cid:11   1  k  j  takes x 7! y .  For example, both  cid:27  and  cid:28  in exerise 71 take 1 7! 2.  Prove that any  Hamiltonian path starting at 12 : : : n in G must end at a permutation that takes y 7! x.  x 73. [M30 ℄ Let  cid:11 ,  cid:12  , and  cid:27  be permutations of a set X , where X = A [ B . Assume  that x cid:27  = x cid:11  when x 2 A and x cid:27  = x cid:12  when x 2 B , and that the order of  cid:11  cid:12   is odd.   cid:0   a  Prove that all three permutations  cid:11 ,  cid:12  ,  cid:27  have the same sign; that is, they are all  even or all odd. Hint: A permutation has odd order if and only if its yles all  have odd length.  b  Derive Theorem R from part  a .  74. [M30 ℄  R. A. Rankin.  Assuming that  cid:11  cid:12  =  cid:12  cid:11  in Theorem R, prove that a  Hamiltonian yle exists if and only if there is a number k suh that 0  cid:20  k  cid:20  g= and  t + k ? , where  cid:12   =  cid:13   ,  cid:13  =  cid:11   cid:12   . Hint: Represent elements of the group in the  g=  t   cid:0   form  cid:12    cid:13   .  j  k  33   34  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  75. [M25 ℄ The direted torus C   cid:2  C  has mn verties  x; y  for 0  cid:20  x < m, 0  cid:20  y <  m  n  n, and ars  x; y  !  x; y  cid:11  =   x + 1  mod m; y ,  x; y  !  x; y  cid:12  =  x;  y + 1  mod n .  Prove that, if m > 1 and n > 1, the number of Hamiltonian yles of this digraph is  d cid:0 1   cid:16    cid:17   X  d  k  k=1  [ gd  d  cid:0  k m; kn  = d ℄;  d = gd m; n :  76. [M31 ℄ The ells numbered 0, 1, : : : , 63  29 24 19 14 49 44 39 34  in Fig. 25 illustrate a northeasterly knight's  tour on an 8  cid:2  8 torus: If k appears in ell  58 53 48 43 38  9  4  63   x  ; y   , then  x  ; y    =  x  + 2; y  + 1   k  k  k+1  k+1  k  k  23 18 13  8  3  62 33 28  or  x  + 1; y  + 2 , modulo 8, and  x  ; y    =  k  k  64  64  52 47 42 37 32 27 22 57   x  ; y   . How many suh tours are possible  0  0  on an m  cid:2  n torus, when m; n  cid:21  3?  17 12  7  2  61 56 51 46  Fig. 25. A northeasterly knight's tour.  0  59 54 25 20 15 10  5  6  41 36 31 26 21 16 11  35 30  1  60 55 50 45 40  x 77. [22 ℄ Complete the MMIX program whose inner loop appears in  42 , using Heap's  method  27 .  78. [M23 ℄ Analyze the running time of the program in exerise 77, generalizing it so  that the inner loop does r! visits  with a  : : : a  in global registers .  0  r cid:0 1  79. [20 ℄ What seven MMIX instrutions will h Swap the nybbles : : : i as  45  requires?  For example, if register t ontains the value 4 and register a ontains the nybbles      12345678 , register a should hange to  12345687 .  80. [21 ℄ Solve the previous exerise with only  cid:12 ve MMIX instrutions. Hint: Use MXOR.  x 81. [22 ℄ Complete the MMIX program  46  by speifying how to h Continue with Lang-  don's method i.  82. [M21 ℄ Analyze the running time of the program in exerise 81.  83. [22 ℄ Use the  cid:27 { cid:28  path of exerise 70 to design an MMIX routine analogous to  42   that generates all permutations of  123456 in register a.    84. [20 ℄ Suggest a good way to generate all n! permutations of f1; : : : ; ng on p pro-  essors that are running in parallel.  x 85. [25 ℄ Assume that n is small enough that n!  cid:12 ts in a omputer word. What's a  good way to onvert a given permutation  cid:11  = a  : : : a  of f1; : : : ; ng into an integer  1  n  k = r  cid:11   in the range 0  cid:20  k < n!? Both funtions k = r  cid:11   and  cid:11  = r   k  should  [ cid:0 1℄  be omputable in only O n  steps.  86. [20 ℄ A partial order relation is supposed to be transitive; that is, x  cid:30  y and y  cid:30  z  should imply x  cid:30  z . But Algorithm V does not require its input relation to satisfy this  ondition.  or not x  cid:30  z .  Show that if x  cid:30  y and y  cid:30  z , Algorithm V will produe idential results whether  87. [20 ℄  F. Ruskey.  Consider the inversion tables   : : :   of the permutations  1  n  visited by Algorithm V. What noteworthy property do they have?  Compare with  the inversion tables  4  in Algorithm P.   34   7.2.1.2  GENERATING ALL PERMUTATIONS  35  88. [21 ℄ Show that Algorithm V an be used to generate all ways to partition the  digits f0; 1; : : : ; 9g into two 3-element sets and two 2-element sets.  x 89. [M30 ℄ Consider the numbers t  , t  , : : : , t  in  51 . Clearly t  = t  = 1.  0  1  n  0  1  a  Say that index j is \trivial" if t  = t  . For example, 9 is trivial with respet to  j  j cid:0 1  the Young tableau relations  48 . Explain how to modify Algorithm V so that the  variable k takes on only nontrivial values.  b  Analyze the running time of the modi cid:12 ed algorithm. What formulas replae  51 ?    Say that the interval [j : : k℄ is not a hain if we do not have l  cid:30  l + 1 for j  cid:20  l < k.  d  Every inverse topologial sort a  : : : a  de cid:12 nes a labeling that orresponds to  Prove that in suh a ase t   cid:21  2t  .  k  j cid:0 1  0  0  0  0  j  j  k  k  1  1  m  m  0  0  1  n  relations a   cid:30  a  , : : : , a   cid:30  a  , whih are equivalent to the original relations  j   cid:30  k  , : : : , j   cid:30  k  . Explain how to  cid:12 nd a labeling suh that [j : : k℄ is not a  1  1  m  m  hain when j and k are onseutive nontrivial indies.  e  Prove that with suh a labeling, M < 4N in the formulas of part  b .  90. [M21 ℄ Algorithm V an be used to produe all permutations that are h-ordered  for all h in a given set, namely all a  : : : a  suh that a  < a  for 1  cid:20  j  cid:20  n  cid:0  h  1  n  j  j+h  0  0  0  0   see Setion 5.2.1 . Analyze the running time of Algorithm V when it generates all  permutations that are both 2-ordered and 3-ordered.  91. [HM21 ℄ Analyze the running time of Algorithm V when it is used with the  relations  49  to  cid:12 nd mathings.  92. [M18 ℄ How many permutations is Algorithm V likely to visit, in a \random"  ase? Let P  be the number of partial orderings on f1; : : : ; ng, namely the number  n  of relations that are re cid:13 exive, antisymmetri, and transitive. Let Q  be the number  n  of suh relations with the additional property that j < k whenever j  cid:30  k. Express  the expeted number of ways to sort n elements topologially, averaged over all partial  orderings, in terms of P  and Q  .  n  n  93. [35 ℄ Prove that all topologial sorts an be generated in suh a way that only  one or two adjaent transpositions are made at eah step.  The example 1  cid:30  2, 3  cid:30  4  shows that a single transposition per step annot always be ahieved, even if we allow  nonadjaent swaps, beause only two of the six relevant permutations are odd.   x 94. [25 ℄ Show that in the ase of mathings, using the relations in  49 , all topologial  sorts an be generated with just one transposition per step.  95. [21 ℄ Disuss how to generate all up-down permutations of f1; : : : ; ng, namely those  a  : : : a  suh that a  < a  > a  < a  >  cid:1   cid:1   cid:1 .  1  n  1  2  3  4  96. [21 ℄ Disuss how to generate all yli permutations of f1; : : : ; ng, namely those  a  : : : a  whose yle representation onsists of a single n-yle.  1  n  97. [21 ℄ Disuss how to generate all derangements of f1; : : : ; ng, namely those a  : : : a  1  n  suh that a  6= 1, a  6= 2, a  6= 3, : : : .  1  2  3  exerise.  98. [HM23 ℄ Analyze the asymptoti running time of the method in the previous  99. [M30 ℄ Given n  cid:21  3, show that all derangements of f1; : : : ; ng an be generated  by making at most two transpositions between visits.  100. [21 ℄ Disuss how to generate all indeomposable permutations of f1; : : : ; ng,  namely those a  : : : a  suh that fa  ; : : : ; a  g 6= f1; : : : ; j g for 1  cid:20  j < n.  1  n  1  j  101. [21 ℄ Disuss how to generate all involutions of f1; : : : ; ng, namely those permu-  tations a  : : : a  with a  : : : a  = 1 : : : n.  1  n  a  a  1  n  35   36  COMBINATORIAL ALGORITHMS  F2B   7.2.1.2  102. [M30 ℄ Show that all involutions of f1; : : : ; ng an be generated by making at  most two transpositions between visits.  103. [M32 ℄ Show that all even permutations of f1; : : : ; ng an be generated by su-  essive rotations of three onseutive elements.  x 104. [M22 ℄ A permutation a  : : : a  of f1; : : : ; ng is wel l-balaned if  1  n  n  n  X  X  k=1  k=1  k a  =   n + 1  cid:0  k  a  :  k  k  For example, 3142 is well-balaned when n = 4.  a  Prove that no permutation is well-balaned when n mod 4 = 2.  b  Prove that if a  : : : a  is well-balaned, so are its reversal a  : : : a  , its omplement  1  n  n  1   n+1 cid:0 a    : : :  n+1 cid:0 a   , and its inverse a  : : : a  .  1  n  1  n  0  0    Determine the number of well-balaned permutations for small values of n.  x 105. [26 ℄ A weak order is a relation  cid:22  that is transitive  x  cid:22  y and y  cid:22  z implies  x  cid:22  z  and omplete  x  cid:22  y or y  cid:22  x always holds . We an write x  cid:17  y if x  cid:22  y and  y  cid:22  x; x  cid:30  y if x  cid:22  y and y 6 cid:22  x. There are thirteen weak orders on three elements  f1; 2; 3g, namely  1  cid:17  2  cid:17  3; 1  cid:17  2  cid:30  3; 1  cid:30  2  cid:17  3; 1  cid:30  2  cid:30  3; 1  cid:17  3  cid:30  2; 1  cid:30  3  cid:30  2;  2  cid:30  1  cid:17  3; 2  cid:30  1  cid:30  3; 2  cid:17  3  cid:30  1; 2  cid:30  3  cid:30  1; 3  cid:30  1  cid:17  2; 3  cid:30  1  cid:30  2; 3  cid:30  2  cid:30  1:  a  Explain how to generate all weak orders of f1; : : : ; ng systematially, as sequenes  of digits separated by the symbols  cid:17  or  cid:30 .  b  A weak order an also be represented as a sequene a  : : : a  where a  = k if j  1  n  j  is preeded by k  cid:30  signs. For example, the thirteen weak orders on f1; 2; 3g are  respetively 000, 001, 011, 012, 010, 021, 101, 102, 100, 201, 110, 120, 210 in this  form. Find a simple way to generate all suh sequenes of length n.  106. [M40 ℄ Can exerise 105 b  be solved with a Gray-like ode?  x 107. [30 ℄  John H. Conway, 1973.  To play the solitaire game of \topswops," start  by shu cid:15 ing a pak of n ards labeled f1; : : : ; ng and plae them fae up in a pile. Then  if the top ard is k > 1, deal out the top k ards and put them bak on top of the pile,  thereby hanging the permutation from a  : : : a  to a  : : : a  a  : : : a  . Continue until  1  n  k  1  k+1  n  the top ard is 1. For example, the 7-step sequene  31452 ! 41352 ! 53142 ! 24135 ! 42135 ! 31245 ! 21345 ! 12345  might our when n = 5. What is the longest sequene possible when n = 13?  108. [M27 ℄ If the longest n-ard game of topswops has length f  n , prove that f  n   cid:20   F   cid:0  1.  n+1  109. [M47 ℄ Find good upper and lower bounds on the topswops funtion f  n .  x 110. [25 ℄ Find all permutations a  : : : a  of f0; : : : ; 9g suh that  0  9  fa  ; a  ; a  ; a  g = f2; 5; 7; 8g;  0  2  3  7  fa  ; a  ; a  g = f0; 3; 6g;  1  4  5  fa  ; a  ; a  ; a  g = f3; 4; 5; 7g;  1  3  7  8  fa  ; a  ; a  g = f0; 7; 8g:  0  3  4  Also suggest an algorithm for solving large problems of this type.  36   7.2.1.2  GENERATING ALL PERMUTATIONS  37  x 111. [M25 ℄ Several permutation-oriented analogs of de Bruijn yles have been pro-  posed. The simplest and niest of these is the notion of a universal yle of permu-  tations, introdued by B. W. Jakson in Disrete Math. 117  1993 , 141{150, namely  a yle of n! digits suh that eah permutation of f1; : : : ; ng ours exatly one as a  blok of n  cid:0  1 onseutive digits  with its redundant  cid:12 nal element suppressed . For  example,  121323  is a universal yle of permutations for n = 3, and it is essentially  the only suh yle.  for all n  cid:21  2.  Find a universal yle of permutations for n = 4, and prove that suh yles exist  x 112. [HM43 ℄ Exatly how many universal yles exist, for permutations of  cid:20  9 ob jets?  37   38  ANSWERS TO EXERCISES  7.2.1.2  SECTION 7.2.1.2  steps L2{L4 by:  1. [J. P. N. Phillips, Comp. J. 10  1967 , 311.℄ Assuming that n  cid:21  3, we an replae  L2  . [Easiest ase?℄ Set y   a  and z   a  . If y < z , set a    z , a    y ,  n cid:0 1  n  n cid:0 1  n  and return to L1.  0  0  L2.1  . [Next easiest ase?℄ Set x   a  . If x  cid:21  y , go on to step L2.2  . Otherwise  n cid:0 2  set  a  ; a  ; a       z ; x; y  if x < z ,  y ; z ; x  if x  cid:21  z . Return to L1.  n cid:0 2  n cid:0 1  n  L2.2  . [Find j .℄ Set j   n  cid:0  3 and y   a  . If y  cid:21  x, set j   j  cid:0  1, x   y , y   a  ,  j  j  and repeat until y < x. Terminate if j = 0.  0  0  L3  . [Easy inrease?℄ If y < z , set a    z , a    y , a    x, and go to L4.1  .  j  j+1  n  L3.1  . [Inrease a  .℄ Set l   n  cid:0  1; if y  cid:21  a  , repeatedly derease l by 1 until y < a  .  j  l  l  Then set a    a  and a    y .  j  l  l  L4  . [Begin to reverse.℄ Set a    a  and a    z .  n  j+1  j+1  0  0  0  0  0  L4.1  . [Reverse a  : : : a  .℄ Set k   j + 2, l   n  cid:0  1. Then, if k < l, interhange  j+1  n cid:0 1  a  $ a  , set k   k + 1, l   l  cid:0  1, and repeat until k  cid:21  l. Return to L1.  k  l  The program might run still faster if a  is stored in memory loation A[n  cid:0  t℄ for  t  0  cid:20  t  cid:20  n, or if reverse olex order is used as in the following exerise.  2. Again we assume that a   cid:20  a   cid:20   cid:1   cid:1   cid:1   cid:20  a  initially; the permutations generated  1  2  n  from f1; 2; 2; 3g will, however, be 1223, 2123, 2213, : : : , 2321, 3221. Let a  be an  n+1  auxiliary element, larger than a  .  n  L1. [Visit.℄ Visit the permutation a  a  : : : a  .  1  2  n  L2. [Find j .℄ Set j   2. If a   cid:21  a  , inrease j by 1 until a  < a  . Terminate  j cid:0 1  j  j cid:0 1  j  L3. [Derease a  .℄ Set l   1. If a   cid:21  a  , inrease l until a  < a  . Then swap  j  l  j  l  j  if j > n.  a  $ a  .  l  j  L4. [Reverse a  : : : a  .℄ Set k   1 and l   j  cid:0  1. Then, if k < l, swap a  $ a  ,  1  j cid:0 1  k  l  set k   k + 1, l   l  cid:0  1, and repeat until k  cid:21  l. Return to L1.  3. Let C  : : : C  =   : : :   be the inversion table, as in exerise 5.1.1{7. Then  1  n  a  a  1  n  rank a  : : : a    is the mixed-radix number [  ℄. [See H. A. Rothe, Samm-  1  n  C  ;  :::;  C  ;  C  1  n cid:0 1  n  n;  :::;  2;  1  lung ombinatorish-analytisher Abhandlungen 2  1800 , 263{264; and see also the  pioneering work of N cid:22 ar cid:22 ayan  a ited in Setion 7.2.1.7.℄ For example, 314592687 has  rank [  ℄ = 2  cid:1  8! + 6! + 5! + 4  cid:1  4! + 1! = 81577; this is the fatorial  2;  0;  1;  1;  4;  0;  0;  1;  0  9;  8;  7;  6;  5;  4;  3;  2;  1  .  number system featured in Eq. 4.1{ 10 .  4. Use the reurrene rank a  : : : a    =  n  [ x  < a  ℄  +rank a  : : : a   .  1  n  j  j  1  2  n  P  1  t   cid:0    cid:1   n  n  n  ;:::;n  j=1  1  t  For example, rank 314159265  is   cid:0    cid:1    cid:0    cid:1    cid:0    cid:1    cid:0    cid:1    cid:0    cid:1   3  2  1  3  1  9  7  5  4  2  9  2;1;1;1;2;1;1  7  1;1;1;2;1;1  5  1;2;1;1  4  1;1;1;1  2  1;1  + 0 +  + 0 +  +  + 0 +  = 30991:  5.  a  Step L2 is performed n! times. The probability that exatly k omparisons are  made is q   cid:0  q  , where q  is the probability that a  >  cid:1   cid:1   cid:1  > a  , namely [ t  cid:20  n ℄=t!.  k  k+1  t  n cid:0 t+1  n  P  Therefore the mean is  k q   cid:0  q    = q  +  cid:1   cid:1   cid:1  + q  = bn! e=n!  cid:0  1  cid:25  e  cid:0  1  cid:25  1:718,  k  k+1  1  n  and the variane is  X  2  2  2  k   q   cid:0 q    cid:0 mean  = q  +3q  +  cid:1   cid:1   cid:1 +  2n cid:0 1 q   cid:0  q  +  cid:1   cid:1   cid:1 +q      cid:25  e  3 cid:0 e   cid:25  0:766:  k  k+1  1  2  n  1  n  [For higher moments, see R. Kemp, Ata Informatia 35  1998 , 17{89, Theorem 4.℄  38   7.2.1.2  ANSWERS TO EXERCISES  39  Inidentally, the average number of interhange operations in step L4 is therefore  P   cid:0 1  bk=2 q   cid:0  q    = q  + q  +  cid:1   cid:1   cid:1   cid:25  osh 1  cid:0  1 =  e + e   cid:0  2 =2  cid:25  0:543, a result due  k  k+1  2  4  to R. J. Ord-Smith [Comp. J. 13  1970 , 152{155℄.   b  Step L3 is performed only n!  cid:0  1 times, but we will assume for onveniene  that it ours one more  with 0 omparisons . Then the probability that exatly k  omparisons are made is  1=j ! for 1  cid:20  k < n and 1=n! for k = 0. Hene the  P  n cid:0 2  1  2  mean is  1=j !  cid:25  e=2  cid:25  1:359; exerise 1 redues this number by  . The variane  2  j=0  3  P  P  1  1  2  2  5  1  n cid:0 3  n cid:0 2  is  1=j ! +  1=j !  cid:0  mean   cid:25   e  cid:0   e   cid:25  0:418.  3  2  6  4  j=0  j=0  P  n  j=k+1  P  n  k  6.  a  Let e   z  =  z  =k!; then the number of di cid:11 erent pre cid:12 xes a  : : : a  is  n  1  j  j  n  k=0   cid:0    cid:1   j ! [z  ℄ e   z  : : : e   z . This is N =  times the probability q  that at least  n  n  n cid:0 j  1  t  n  ;:::;n  1  t  n cid:0  j omparisons are made in step L2. Therefore the mean is  w e   z  : : : e   z   cid:0  1,  P  P  k  where w   x  z  =k!  =  x  . In the binary ase the mean is M =   cid:0  1, where M =  k  k  P  P  P   cid:0    cid:1    cid:0    cid:1    cid:0    cid:1    cid:0    cid:1   s  n cid:0 s+l  s  k  n cid:0 s+l+1  n+2  n  s  n cid:0 s  l=0  k=l  l=0  l  l+1  s+1  s  n cid:0 s+1  s+1  =  =   cid:0  1 =   2 +  +     cid:0  1.  1  N  n  n  1  t   cid:0    cid:1   n  s   b  If fa  ; : : : ; a  g = fn   cid:1  x  ; : : : ; n   cid:1  x  g, the pre cid:12 x a  : : : a  ontributes altogether  1  j  1  t  1  j  1  t  0  0   n   cid:0  n   [n  < n  ℄ to the total number of omparisons made in step L3. Thus  P  0  0  1 cid:20 k<l cid:20 t  k  k  l  l  P  1  the mean is  w f   z  , where  N  1 cid:20 k<l cid:20 t  kl   cid:18    cid:19  cid:18    cid:19   Y  X  n  k  f   z  =  e   z    n   cid:0  r   e   z   kl  n  n   cid:0 1  k  m  l  1 cid:20 m cid:20 t  r=0  m6=k; m6=l  = e   z  : : : e   z   n   cid:0  z r   z   r   z ;  where r   z  =  :  n  n  k  k  l  k  1  t  e   z   n   cid:0 1  k  e   z   n  k  In the two-valued ase this formula redues to  w  s e   z   cid:0  z e   z   e   z   =  s  s cid:0 1  n cid:0 s cid:0 1   cid:0    cid:1    cid:0    cid:1    cid:0    cid:1   s  1  s+1  1  n+1  s+1  n+1  n+1  n+1      cid:0  1   cid:0       s  cid:0     + 1  =    cid:0 s  cid:0  1 +    =   cid:0   .  N  s+1  N  s+1  n cid:0 s+1  N  s  n cid:0 s+1  N  7. In the notation of the previous answer, the quantity  w e   z  : : : e   z    cid:0  1 is  1  N  n  n  1  t  n  +  cid:1   cid:1   cid:1  + n   n  n  + n  n  +  cid:1   cid:1   cid:1  + n  n    + n   n   cid:0 1  +  cid:1   cid:1   cid:1  + n   n   cid:0 1   1  t  1  2  1  3  t cid:0 1  t  1  1  t  t  +  +  cid:1   cid:1   cid:1   cid:0  1:  n  n n  cid:0  1   One an show using Eq. 1.2.9{ 38  that the limit is  cid:0 1 + exp  r  =k, where r  =  P  k cid:21 1  k  k  lim   n  +  cid:1   cid:1   cid:1  + n   = n  +  cid:1   cid:1   cid:1  + n     . In ases  a  and  b  we have r  = [ k = 1 ℄,  t!1  1  t  k  1  t  k  k  k  so the limit is e  cid:0  1  cid:25  1:71828. In ase    we have r  = 1= 2   cid:0  1 , so the limit is  k  k   cid:0 1 + exp  1= k 2   cid:0  1    cid:25  2:46275.  P  k  k cid:21 1  8. Assume that j is initially zero, and hange step L1 to  L1  . [Visit.℄ Visit the variation a  : : : a  . If j < n, set j   j + 1 and repeat this  1  j  0  step.  This algorithm is due to L. J. Fisher and K. C. Krause, Lehrbuh der Combinations-  lehre und der Arithmetik  Dresden: 1812 , 55{57.  Inidentally, the total number of variations is w e   z  : : : e   z   in the notation  n  n  1  t  of answer 6. This ounting problem was  cid:12 rst treated by James Bernoulli in Ars  Conjetandi  1713 , Part 2, Chapter 9.  9. R1. [Visit.℄ Visit the variation a  : : : a  .  At this point a   cid:20   cid:1   cid:1   cid:1   cid:20  a  .   1  r  r+1  n  R2. [Easy ase?℄ If a  < a  , interhange a  $ a  where j is the smallest subsript  r  n  r  j  suh that j > r and a  > a  , and return to R1.  j  r  R3. [Reverse.℄ Set  a  ; : : : ; a       a  ; : : : ; a    as in step L4.  r+1  n  n  r+1  r  z  r!  1  N  39   40  ANSWERS TO EXERCISES  7.2.1.2  R4. [Find j .℄ Set j   r  cid:0  1.  If a   cid:21  a  , derease j by 1 repeatedly until  j  j+1  R5. [Inrease a  .℄ Set l   n. If a   cid:21  a  , derease l by 1 repeatedly until a  < a  .  j  j  l  j  l  a  < a  . Terminate if j = 0.  j  j+1  Then interhange a  $ a  .  j  l  R6. [Reverse again.℄ Set  a  ; : : : ; a       a  ; : : : ; a    as in step L4, and return  j+1  n  n  j+1  to R1.  are distint.  P  n cid:0 1  n  k=1  The number of outputs is r! [z  ℄ e   z  : : : e   z ; this is, of ourse, n  when the elements  n  n  1  t  r  r  10. a  a  : : : a  = 213 : : : n,     : : :   = 010 : : : 0, o  o  : : : o  = 1  cid:0 1 1 : : : 1, if n  cid:21  2.  1  2  n  1  2  n  1  2  n  11. Step  P1, : : : , P7  is performed  1; n!; n!; n! + x  ; n!;  x  + 3 =2; x    times, where  n  n  n  x  =  k!, beause P7 is performed  j  cid:0  1 ! times when 2  cid:20  j  cid:20  n.  12. We want the permutation of rank 999999. The answers are  a  2783915460, by  exerise 3;  b  8750426319, beause the re cid:13 eted mixed-radix number orresponding  0;  0;  1;  2;  3;  0;  2;  7;  0;  9  0;  0;  1;  3 cid:0 2;  3;  5 cid:0 0;  2;  7;  8 cid:0 0;  9 cid:0 9  to [  ℄ is [  ℄ by 7.2.1.1{ 50 ;    the  1;  2;  3;  4;  5;  6;  7;  8;  9;  10  1;  2;  3;  4;  5;  6;  7;  8;  9;  10  produt  0 1 : : : 9    0 1 : : : 8    0 1 : : : 7    0 1 : : : 6   : : :  0 1 2   , namely 9703156248.  9  0  7  2  1  13. The  cid:12 rst statement is true for all n  cid:21  2. But when 2 rosses 1, namely when    hanges from 0 to 1, we have   = 2,   = 3,   =  cid:1   cid:1   cid:1  =   = 0, and the next  2  3  4  5  n  permutation when n  cid:21  5 is 432156 : : : n. [See Time Travel  1988 , page 74.℄  14. True at the beginning of steps P4, P5, and P6, beause exatly j cid:0 1 cid:0   +s elements  j  lie to the left of x  , namely j  cid:0  1  cid:0    from fx  ; : : : ; x  g and s from fx  ; : : : ; x  g.  j  j  1  j cid:0 1  j+1  n   In a sense, this formula is the main point of Algorithm P.   15. If [  ℄ orresponds to the re cid:13 eted Gray ode [  ℄, we get to step P6  1;  :::;  n  1;  :::;  n  b  ;  :::;  b    ;  :::;    n cid:0 1  0  1  n  if and only if b  = k  cid:0  1 for j  cid:20  k  cid:20  n and B  is even, by 7.2.1.1{ 50 . But  k  n cid:0 j+1  b  = k  cid:0  1 for j  cid:20  k  cid:20  n implies that B  is odd for j < k  cid:20  m. Therefore  n cid:0 k  n cid:0 k  s = [   = j ℄ + [   = j + 1 ℄ = [ o  < 0 ℄ + [ o  < 0 ℄ in step P5. [See Math. Comp.  j+1  j+2  j+1  j+2  17  1963 , 282{285.℄  0  0  0  0  16. P1  . [Initialize.℄ Set     j and o     cid:0 1 for 1  cid:20  j < n; also set z   a  .  j  j  n  0  0  P2  . [Visit.℄ Visit a  : : : a  . Then go to P3.5  if a  = z .  1  n  1  P3  . [Hunt down.℄ For j   n  cid:0  1, n  cid:0  2, : : : , 1  in this order , set a    a  ,  j+1  j  0  a    z , and visit a  : : : a  . Then set j   n  cid:0  1, s   1, and go to P4  .  j  1  n  P3.5  . [Hunt up.℄ For j   1, 2, : : : , n  cid:0  1  in this order , set a    a  , a    z ,  j  j+1  j+1  and visit a  : : : a  . Then set j   n  cid:0  1, s   0.  1  n  0  0  0  P4  . [Ready to hange?℄ Set q     + o  . If q = 0, go to P6  ; if q > j , go to P7  .  j  j  0  0  P5  . [Change.℄ Interhange a  $ a  . Then set     q and return to P2  .    +s  q+s  j  j  P6  . [Inrease s.℄ Terminate if j = 1; otherwise set s   s + 1.  0  0  P7  . [Swith diretion.℄ Set o     cid:0 o  , j   j  cid:0  1, and go bak to P4  .  j  j  17. Initially a    a    j for 1  cid:20  j  cid:20  n. Step P5 should now set t   j  cid:0    + s,  j  j  0  j  0  0  u   j  cid:0  q + s, v   a  , a    v , a    t, a    j , a    u,     q .  See exerise 14.   u  t  v  u  j  j  But with the inverse required and available we an atually simplify the algorithm  signi cid:12 antly, avoiding the o cid:11 set variable s and letting the ontrol table   : : :   ount  1  n  only downwards, as noted by G. Ehrlih [JACM 20  1973 , 505{506℄:  Q1. [Initialize.℄ Set a    a    j ,     j  cid:0  1, and d     cid:0 1 for 1  cid:20  j  cid:20  n. Also  j  j  j  j  0  set   =  cid:0 1.  0  40   7.2.1.2  ANSWERS TO EXERCISES  41  Q2. [Visit.℄ Visit the permutation a  : : : a  and its inverse a  : : : a  .  1  n  1  n  0  0  Q3. [Find k.℄ Set k   n. Then if   = 0, set     k  cid:0  1, o     cid:0 o  , k   k  cid:0  1,  k  k  k  k  and repeat until   6= 0. Terminate if k = 0.  k  Q4. [Change.℄ Set        cid:0  1, j   a  , and i = j + o  . Then set t   a  , a    k,  k  k  k  i  i  0  k  a    t, a    j , a    i, and return to Q2.  j  t  k  0  0  18. Set a    n, and use  n  cid:0  1 !=2 iterations of Algorithm P to generate all permuta-  n  tions of f1; : : : ; n  cid:0  1g suh that 1 preedes 2. [M. K. Roy, CACM 16  1973 , 312{313;  see also exerise 13.℄  19. For example, we an use the idea of Algorithm P, with the n-tuples   : : :   1  n  hanging as in Algorithm 7.2.1.1H with respet to the radies  1; 2; : : : ; n . That  algorithm maintains the diretions orretly, although it numbers subsripts di cid:11 erently.  The o cid:11 set s needed by Algorithm P an be omputed as in the answer to exerise 15, or  the inverse permutation an be maintained as in exerise 17. [See G. Ehrlih, CACM  16  1973 , 690{691.℄ Other algorithms, like that of Heap, an also be implemented  looplessly.   Note: In most appliations of permutation generation we are interested in mini-  mizing the total running time, not the maximum time between suessive visits; from  this standpoint looplessness is usually undesirable, exept on a parallel omputer. Yet  there's something intelletually satisfying about the fat that a loopless algorithm  exists, whether pratial or not.   20. For example, when n = 3 we an begin 1 2 3, 1 3 2, 3 1 2, 3 1 2, 1 32, 1 2 3, 2 1 3, : : : ,  2 1 3, 2 1 3, : : : . If the delta sequene for n is  Æ  Æ  : : : Æ   , the orresponding sequene  1  2  2  n!  n  for n + 1 is   cid:1   Æ   cid:1   Æ  : : :  cid:1   Æ   , where  cid:1   is the sequene of 2n  cid:0  1 operations  n  1  n  2  n  n  2  n!  n  n n cid:0 1 : : : 1  cid:0  1 : : : n cid:0 1 n; here Æ  = j means a  $ a  and Æ  =  cid:0  means  k  j  j+1  k  a     cid:0 a  .  1  1   Signed permutations appear in another guise in exerises 5.1.4{43 and 44. The  set of all signed permutations is alled the otahedral group.   21. Clearly M = 1, hene O must be 0 and S must be b  cid:0  1. Then N = E + 1, R = b  cid:0  2,  and D + E = b + Y. This leaves exatly max 0; b  cid:0  7  cid:0  k  hoies for E when Y = k  cid:21  2,  hene a total of   b  cid:0  7  cid:0  k  =  solutions when b  cid:21  8. [Math. Mag. 45  1972 ,  P   cid:0    cid:1   b cid:0 7  b cid:0 8  k=2  2  48{49. Inidentally, D. Eppstein has proved that the task of solving alphametis with  a given radix is NP-omplete; see SIGACT News 18, 3  1987 , 38{40.℄  22.  XY   +  XX   =  XYX   is solvable only when b = 2.  b  b  b  23. Almost true, beause the number of solutions will be even, unless [ j 2 F ℄ 6= [ k 2 F ℄.   Consider the ternary alphameti X +  XX   +  YY   +  XZ   =  XYX   .   3  3  3  3  24.  a  9283 + 7 + 473 + 1062 = 10825.  b  698392 + 3192 = 701584.    63952 +  69275 = 133227.  d  653924 + 653924 = 1307848.  e  5718 + 3 + 98741 = 104462.  f    127503+ 502351+ 3947539+ 46578 = 4623971.  g  67432+ 704+ 8046+ 97364 = 173546.   h  59 + 577404251698 + 69342491650 + 49869442698 + 1504 + 40614 + 82591 + 344 +  41 + 741425 = 5216367650 + 691400684974. [All solutions are unique. Referenes for   b { g : J. Rereational Math. 10  1977 , 115; 5  1972 , 296; 10  1977 , 41; 10  1978 ,  274; 12  1979 , 133{134; 9  1977 , 207.℄   i  In this ase there are  10! = 2903040 solutions, beause every permutation of  8  10  f0; 1; : : : ; 9g works exept those that assign H or N to 0.  A well-written general additive  alphameti solver will be areful to redue the amount of output in suh ases.   25. We may assume that s   cid:20   cid:1   cid:1   cid:1   cid:20  s  . Let i be the least index =2 F , and set  1  10  a    0 ; then set the remaining elements a  in order of inreasing j . A proof like that  i  j  41   42  ANSWERS TO EXERCISES  7.2.1.2  of Theorem 6.1S shows that this proedure maximizes a  cid:1  s. A similar proedure yields  the minimum, beause min a  cid:1  s  =  cid:0  max a  cid:1    cid:0 s  .  26. 400739 + 63930  cid:0  2379  cid:0  1252630 + 53430  cid:0  1390 + 738300.  27. Readers an probably improve upon the following examples: BLOOD + SWEAT +  TEARS = LATER; EARTH + WATER + WRATH = HELLO + WORLD; AWAIT + ROBOT + ERROR =  SOBER + WORDS; CHILD + THEME + PEACE + ETHIC = IDEAL + ALPHA + METIC.  This exerise  was inspired by WHERE + SEDGE + GRASS + GROWS = MARSH [A. W. Johnson, Jr., J. Rer.  Math. 15  1982 , 51℄, whih would be marvelously pure exept that D and O have the  same signature.   28.  a  11 = 3 + 3 + 2 + 2 + 1, 20 = 11 + 3 + 3 + 3, 20 = 11 + 3 + 3 + 2 + 1,  20 = 11 + 3 + 3 + 1 + 1 + 1, 20 = 8 + 8 + 2 + 1 + 1, 20 = 7 + 7 + 6, 20 = 7 + 7 + 2 + 2 + 2,  20 = 7 + 7 + 2 + 1 + 1 + 1 + 1, 20 = 7 + 5 + 5 + 2 + 1, 20 = 7 + 5 + 2 + 2 + 2 + 1 + 1, 20 =  7+5+2+2+1+1+1+1, 20 = 7+3+3+2+2+1+1+1, 20 = 7+3+3+1+1+1+1+1+1+1,  20 = 5 + 3 + 3 + 3 + 3 + 3. [These fourteen solutions were  cid:12 rst omputed by Roy Childs  in 1999. The next doubly partitionable values of n are 30  in 20 ways , then 40  in 94  ways , 41  in 67 , 42  in 57 , 50  in 190 ways, inluding 50 = 2 + 2 +  cid:1   cid:1   cid:1  + 2 , et.℄   b  51 = 20 + 15 + 14 + 2, 51 = 15 + 14 + 10 + 9 + 3, 61 = 19 + 16 + 11 + 9 + 6,  65 = 17 + 16 + 15 + 9 + 7 + 1, 66 = 20 + 19 + 16 + 6 + 5, 69 = 18 + 17 + 16 + 10 + 8,  70 = 30 + 20 + 10 + 7 + 3, 70 = 20 + 16 + 12 + 9 + 7 + 6, 70 = 20 + 15 + 12 + 11 + 7 + 5,  80 = 50 + 20 + 9 + 1, 90 = 50 + 12 + 11 + 9 + 5 + 2 + 1, 91 = 45 + 19 + 11 + 10 + 5 + 1. [The  two 51s are due to Steven Kahan; see his book Have Some Sums To Solve  Farmingdale,  New York: Baywood, 1978 , 36{37, 84, 112. Amazing examples with seventeen distint  terms in Italian and  cid:12 fty-eight distint terms in Roman numerals have been found by  Giulio Cesare, J. Rer. Math. 30  1999 , 63.℄  Notes: The beautiful example THREE = TWO+ONE+ZERO [Rihard L. Breish, Rere-  ational Math. Magazine 12  Deember 1962 , 24℄ is unfortunately ruled out by our on-  ventions. The total number of doubly true partitions into distint parts is probably  cid:12 -  nite, in English, although nomenlature for arbitrarily large integers is not standard. Is  there an example bigger than NINETYNINENONILLIONNINETYNINESEXTILLIONSIXTYONE =  NINETYNINENONILLIONNINETYNINESEXTILLIONNINETEEN +SIXTEEN+ELEVEN+NINE+SIX   suggested by G. Gonz cid:19 alez-Morris ?  29. 10 + 7 + 1 = 9 + 6 + 3, 11 + 10 = 8 + 7 + 6, 12 + 7 + 6 + 5 = 11 + 10 + 9, : : : ,  19 + 10 + 3 = 14 + 13 + 4 + 1  31 examples in all .  30.  a  567  = 321489, 807  = 651249, or 854  = 729316.   b  958  = 917764.  2  2  2  2     96  cid:2  7  = 4704.  d  51304=61904 = 7260=8760.  e  328509  = 4761  . [Strand 78  2  2  3   1929 , 91, 208; J. Rer. Math 3  1970 , 43; 13  1981 , 212; 27  1995 , 137; 31  2003 ,  133. The solutions to  b ,   ,  d , and  e  are unique. With a right-to-left approah  based on Algorithm X, the answers are found in  14, 13, 11, 3423, 42  kilomems,  respetively. Nob also notied that NORTH=SOUTH = WEST=EAST has the unique solution  67104=27504 = 9320=3820.℄  31. 5=34 + 7=68 + 9=12 ! . One an verify uniqueness with Algorithm X using the  side ondition A < D < G, in about 265 K cid:22 . [Quark Visual Siene Magazine, No. 136   Tokyo: Kodansha, Otober 1993 .℄ Curiously, a very similar puzzle also has a unique  solution: 1= 3  cid:2  6  + 5= 8  cid:2  9  + 7= 2  cid:2  4  = 1; see Sot Morris, Omni 17, 4  January  1995 , 97.  32. There are eleven ways, of whih the most surprising is 3 + 69258=714.  [See The  Weekly Dispath  9 and 23 June 1901 ; Amusements in Mathematis  1917 , 158{159.℄  42   7.2.1.2  ANSWERS TO EXERCISES  43  33.  a  1, 2, 3, 4, 15, 18, 118, 146.  b  6, 9, 16, 20, 27, 126, 127, 129, 136, 145. [The  Weekly Dispath  11 and 30 November, 1902 ; Amusements in Math.  1917 , 159.℄  In this ase one suitable strategy is to  cid:12 nd all variations where a  : : : a  =a  : : : a  k  l cid:0 1  l  9  is an integer, then to reord solutions for all permutations of a  : : : a  . There are  1  k cid:0 1  exatly 164959 integers with a unique solution, the largest being 9876533. There are  solutions for all years in the 21st entury exept 2091. The most solutions  125  our  when n = 6443; the longest streth of representable n's is 5109 < n < 7060. Dudeney  was able to get the orret answers by hand for small n by \asting out nines."  34.  a  x = 10  , 7378+155+92467 = 7178+355+92467 = 1016+733+98251 = 100000.  5  7   b  x = 4  , 3036 + 455 + 12893 = 16384 is unique. The fastest way to resolve this  problem is probably to start with a list of the 2529 primes that onsist of  cid:12 ve distint  digits  namely 10243, 10247, : : : , 98731  and to permute the  cid:12 ve remaining digits.  Inidentally, the unrestrited alphameti EVEN + ODD = PRIME has ten solutions;  both ODD and PRIME are prime in just one of them. [See M. Arisawa, J. Rer. Math. 8   1975 , 153.℄  35. In general, if s  = jS  j for 1  cid:20  k < n, there are s  : : : s  ways to hoose eah of  k  k  1  k cid:0 1  the nonidentity elements of S  . Hene the answer is     s   , whih in this  k  k=1  j=1  j  Q  Q  n cid:0 1  k cid:0 1  s   cid:0 1  k  ase is 2   cid:1  6   cid:1  24  = 436196692474023836123136.  2  3  15   But if the verties are renumbered, the s  values may hange. For example,  k  if verties  0; 3; 5  of  12  are interhanged with  e; d;  , we have s  = 1, s  = 6,  14  13  s  = 4, s  = 1, and 4   cid:1  24  Sims tables.   12  11  5  15  36. Sine eah of f0; 3; 5; 6; 9; a; ; fg lies on three lines, but every other element lies  on only two, it is lear that we may let S  = f  ;  cid:27 ;  cid:27   ;  cid:27   ;  cid:11 ;  cid:11  cid:27 ;  cid:11  cid:27   ;  cid:11  cid:27   g, where  cid:27  =  2  3  2  3  f  Æ   03f  17e4  2bd4  56a9  is a 90  rotation and  cid:11  =  05  14  27  36  8d  9  af  be   is an inside-out twist. Also S  = f  ;  cid:12  ;  cid:13  ;  cid:12   cid:13  g, where  cid:12  =  14  28  3  69  be  is a  e  transposition and  cid:13  =  12  48  5a  69  7b  de  is another twist; S  =  cid:1   cid:1   cid:1  = S  = f  g.  d  1   There are 4   cid:0  1 alternative answers.   7  k  37. The set S  an be hosen in k!  ways  see exerise 35 , and its nonidentity  k cid:0 1  elements an be assigned to  cid:27  k; 1 , : : : ,  cid:27  k; k  in k! further ways. So the answer is  Q  Q  n  k  A  =  k!  = n!  =  k  . For example, A   cid:25  6:256  cid:2  10  . We have  n  10  k=1  k=1  n cid:0 1  n  k  148              2  2  n cid:0 1   cid:16    cid:17   X  Z  n  k  1  1  2  3  3  ln k =  x x  cid:0  1  ln x dx + O n  log n  =  n  ln n + O n     k=1  1  2  2  6  by Euler's summation formula; thus ln A  =  n  ln n + O n   .  1  3  3  n  3  38. The probability that  cid:30  k  is needed in step G4 is 1=k!  cid:0  1= k + 1 !, for 1  cid:20   k < n; the probability is 1=n! that we don't get to step G4 at all. Sine  cid:30  k  does  dk=2e transpositions, the average is   1=k!  cid:0  1= k + 1 ! dk=2e =   dk=2e  cid:0   P  P  n cid:0 1  n cid:0 1  P  k=1  k=1  d k  cid:0  1 =2e =k!  cid:0  d n  cid:0  1 =2e=n! =  1=k! + O 1= n  cid:0  1 ! .  k odd  39.  a  0123, 1023, 2013, 0213, 1203, 2103, 3012, 0312, 1302, 3102, 0132, 1032, 2301,  3201, 0231, 2031, 3021, 0321, 1230, 2130, 3120, 1320, 2310, 3210;  b  0123, 1023, 2013,  0213, 1203, 2103, 3102, 1302, 0312, 3012, 1032, 0132, 0231, 2031, 3021, 0321, 2301,  3201, 3210, 2310, 1320, 3120, 2130, 1230.  40. By indution we  cid:12 nd  cid:27  1; 1  =  0 1 ,  cid:27  2; 2  =  0 1 2 ,   cid:26    cid:27  k; k  =   0 k   k cid:0 1 k cid:0 2 : : : 1 ;  if k  cid:21  3 is odd,   0 k cid:0 1 k cid:0 2 1 : : : k cid:0 3 k ;  if k  cid:21  4 is even;  43   44  ANSWERS TO EXERCISES  7.2.1.2  also ! k  =  0 k  when k is even, ! k  =  0 k cid:0 2 : : : 1 k cid:0 1 k  when k  cid:21  3 is odd.  Thus when k  cid:21  3 is odd,  cid:27  k; 1  =  k k cid:0 1 0  and  cid:27  k; j   takes k 7! j  cid:0  1 for 1 < j < k;  when k  cid:21  4 is even,  cid:27  k; j   =  0 k k cid:0 3 : : : 1 k cid:0 2 k cid:0 1   for 1  cid:20  j  cid:20  k.  j  Notes: The  cid:12 rst sheme that auses Algorithm G to generate all permutations by  single transpositions was devised by Mark Wells [Math. Comp. 15  1961 , 192{195℄,  but it was onsiderably more ompliated. W. Lipski, Jr., studied suh shemes in  general and found a variety of additional methods [Computing 23  1979 , 357{365℄.  41. We may assume that r < n. Algorithm G will generate r-variations for any Sims  table if we simply hange `k   1' to `k   n  cid:0  r' in step G3, provided that we rede cid:12 ne  ! k  to be  cid:27  n  cid:0  r; n  cid:0  r  : : :  cid:27  k; k  instead of using  16 .  If n  cid:0  r is odd, the method of  27  is still valid, although the formulas in answer 40  need to be revised when k < n  cid:0  r + 2. The new formulas are  cid:27  k; j   =  k j cid:0 1 : : : 1 0   and ! k  =  k : : : 1 0  when k = n  cid:0  r;  cid:27  k; j   =  k : : : 1 0   when k = n  cid:0  r + 1.  If n  cid:0  r is even, we an use  27  with even and odd reversed, if r  cid:20  3. But when  r  cid:21  4 a more omplex sheme is needed, beause a  cid:12 xed transposition like  k 0  an  be used for odd k only if ! k  cid:0  1  is a k-yle, whih means that ! k  cid:0  1  must be an  even permutation; but ! k  is odd for k  cid:21  n  cid:0  r + 2.  The following sheme works when n  cid:0  r is even: Let  cid:28   k; j   ! k  cid:0  1   =  k k cid:0 j     cid:0   for 1  cid:20  j  cid:20  k = n  cid:0  r, and use  27  when k > n  cid:0  r. Then, when k = n  cid:0  r + 1, we have  ! k  cid:0  1  =  0 1 : : : k cid:0 1 , hene  cid:27  k; j   takes k 7!  2j  cid:0  1  mod k for 1  cid:20  j  cid:20  k, and   cid:27  k; k  =  k k cid:0 1 k cid:0 3 : : : 0 k cid:0 2 : : : 1 , ! k  =  k : : : 1 0 ,  cid:27  k + 1; j   =  k+1 : : : 0   .  j  42. If  cid:27  k; j   =  k j cid:0 1  we have  cid:28   k; 1  =  k 0  and  cid:28   k; j   =  k j cid:0 1   k j cid:0 2  =   k j cid:0 1 j cid:0 2  for 2  cid:20  j  cid:20  k.  43. Of ourse ! 1  =  cid:27  1; 1  =  cid:28   1; 1  =  0 1 . The following onstrution makes  ! k  =  k cid:0 2 k cid:0 1 k  for all k  cid:21  2: Let  cid:11  k; j   =  cid:28   k; j   ! k  cid:0  1   , where  cid:11  2; 1  =  2 0 ,   cid:11  2; 2  =  2 0 1 ,  cid:11  3; 1  =  cid:11  3; 3  =  3 1 ,  cid:11  3; 2  =  3 1 0 ; this makes  cid:27  2; 2  =  0 2 ,   cid:27  3; 3  =  0 3 1 . Then for k  cid:21  4, let  j   cid:0   k mod 3 = 0  k mod 3 = 1  k mod 3 = 2   cid:11  k; k cid:0 2  =  k k cid:0 2 0   or   k k cid:0 3 0   or   k k cid:0 1 0 ;   cid:11  k; k cid:0 1  =  k k cid:0 2 k cid:0 3  or   k k cid:0 3   or   k k cid:0 1 k cid:0 3 ;   cid:11  k; k  =   k k cid:0 2   or   k k cid:0 3 k cid:0 2  or   k k cid:0 2 ;  this makes  cid:27  k; k  =  k cid:0 3 k k cid:0 2  as required.  44. No, beause  cid:28   k; j   is a  k + 1 -yle, not a transposition.  See  19  and  24 .   45.  a  202280070, sine u  = max  f0; 1; : : : ; a   cid:0  1g n fa  ; : : : ; a  g .  Atually u  is  k  k  k cid:0 1  1  n  never set by the algorithm, but we an assume that it is zero.   b  425368917.  46. True  assuming that u  = 0 . If either u  > u  or a  > a  we must have  n  k  k+1  k  k+1  a  > u   cid:21  a  > u  .  k  k  k+1  k+1  47. Steps  X1; X2; : : : ; X6  are performed respetively  1; A; B ; A cid:0  1; B  cid:0 N  ; A  times,  n  where A = N  +  cid:1   cid:1   cid:1  + N  and B = nN  +  n  cid:0  1 N  +  cid:1   cid:1   cid:1  + 1N  .  0  n cid:0 1  0  1  n cid:0 1  48. Steps  X2; X3; X4; X5; X6  are performed respetively A  +  1; n!; 0; 0; 1  times,  n  where A  =  n  = n!  1=k!  cid:25  n!  e  cid:0  1 . Assuming that they ost respe-  P  P  n cid:0 1  n cid:0 1  k  n  k=1  k=1  tively  1; 1; 3; 1; 3  mems, for operations involving a  , l  , or u  , the total ost is about  j  j  j  9e  cid:0  8  cid:25  16:46 mems per permutation.  Algorithm L uses approximately  e; 2 + e=2; 2e + 2e   cid:0  4  mems per permutation   cid:0 1   cid:0 1  in steps  L2; L3; L4 , for a total of 3:5e + 2e   cid:0  2  cid:25  8:25  see exerise 5 .  44   7.2.1.2  ANSWERS TO EXERCISES  45  Algorithm X ould be tuned up for this ase by streamlining the ode when k is  near n. But so an Algorithm L, as shown in exerise 1.  49. Order the signatures so that js  j  cid:21   cid:1   cid:1   cid:1   cid:21  js  j; also prepare tables w  : : : w  ,  0  9  0  9  x  : : : x  , y  : : : y  , so that the signatures fs  ; : : : ; s  g are w   cid:20   cid:1   cid:1   cid:1   cid:20  w  . For  0  9  0  9  9  x  y  k  k  k  example, when SEND + MORE = MONEY we have  s  ; : : : ; s    =   cid:0 9000; 1000;  cid:0 900; 91;  0  9   cid:0 90; 10; 1;  cid:0 1; 0; 0  for the respetive letters  M; S; O; E; N; R; D; Y; A; B ; also  w  ; : : : ; w    =  0  9    cid:0 9000;  cid:0 900;  cid:0 90;  cid:0 1; 0; 0; 1; 10; 91; 1000 , and x  : : : x  = 0112233344, y  : : : y  =  0  9  0  9  9988776554. Yet another table f  : : : f  has f  = 1 if the digit orresponding to w  0  9  j  j  annot be zero; in this ase f  : : : f  = 1000000001. These tables make it easy to  0  9  ompute the largest and smallest values of  s  a  +  cid:1   cid:1   cid:1  + s  a  k  k  9  9  over all hoies a  : : : a  of the remaining digits, using the method of exerise 25, sine  k  9  the links l  tell us those digits in inreasing order.  j  This method requires a rather expensive omputation at eah node of the searh  tree, but it often sueeds in keeping that tree small. For example, it solves the  cid:12 rst  eight alphametis of exerise 24 with osts of only 7, 13, 7, 9, 5, 343, 44, and 89  kilomems; this is a substantial improvement in ases  a ,  b ,  e , and  h , although  ase  f   omes out signi cid:12 antly worse. Another bad ase is the `CHILD' example of  answer 27, where left-to-right needs 2947 kilomems ompared to 588 for the right-to-  left approah. Left-to-right does, however, fare better on BLOOD + SWEAT + TEARS  73  versus 360  and HELLO + WORLD  340 versus 410 .  50. If  cid:11  is in a permutation group, so are all its powers  cid:11   ,  cid:11   , : : : , inluding  cid:11   =  2  3  m cid:0 1   cid:0    cid:11   , where m is the order of  cid:11   the least ommon multiple of its yle lengths . And   32  is equivalent to  cid:11   =  cid:27    cid:27   : : :  cid:27   .  1  2  n cid:0 1   cid:0   51. False. For example,  cid:27  k; i   and  cid:27  k; j    might both take k 7! 0.   cid:0    cid:0   52.  cid:28   k; j   =  k cid:0 j k cid:0 j+1  is an adjaent interhange, and  ! k  =  n cid:0 1 : : : 0   n cid:0 2 : : : 0  : : :  k : : : 0  =  cid:30  n  cid:0  1  cid:30  k  cid:0  1   is a k- cid:13 ip followed by an n- cid:13 ip. The permutation orresponding to ontrol table    : : :   in Algorithm H has   elements to the right of j that are less than j ,  0  n cid:0 1  j  for 0  cid:20  j < n; so it is the same as the permutation orresponding to   : : :   in  1  n  Algorithm P, exept that subsripts are shifted by 1.  The only essential di cid:11 erene between Algorithm P and this version of Algorithm H  is that Algorithm P uses a re cid:13 eted Gray ode to run through all possibilities of its  ontrol table, while Algorithm H runs through those mixed-radix numbers in asending   lexiographi  order.  Indeed, Gray ode an be used with any Sims table, by modifying either Algo-  rithm G or Algorithm H. Then all transitions are by  cid:28   k; j   or by  cid:28   k; j    , and the   cid:0   permutations ! k  are irrelevant.  53. The text's proof that n!  cid:0  1 transpositions annot be ahieved for n = 4 also shows  that we an redue the problem from n to n  cid:0  2 at the ost of a single transposition   n cid:0 1 n cid:0 2 , whih was alled ` 3  ' in the notation of that proof.  Thus we an generate all permutations by making the following transformation  in step H4:  If k = n  cid:0  1 or k = n  cid:0  2, transpose a  $ a  , where  j mod n   j cid:0 1  mod n  j =    cid:0  1. If k = n  cid:0  3 or k = n  cid:0  4, transpose a  $ a  and also a  $  n cid:0 1  n cid:0 1  n cid:0 2  j mod  n cid:0 2   a  , where j =    cid:0  1. And in general if k = n  cid:0  2t  cid:0  1 or k = n  cid:0  2t  cid:0  2,   j cid:0 1  mod  n cid:0 2   n cid:0 3  45   46  ANSWERS TO EXERCISES  7.2.1.2  transpose a  $ a  for 1  cid:20  i  cid:20  t and also a  $ a  ,  n cid:0 2i+1  n cid:0 2i  j mod  n cid:0 2t    j cid:0 1  mod  n cid:0 2t   where j =    cid:0  1. [See CACM 19  1976 , 68{72.℄  n cid:0 2t cid:0 1  The orresponding Sims table permutations an be written down as follows, al-  though they don't appear expliitly in the algorithm itself:   cid:26    cid:27  k; j    =   cid:0    0 1 : : : j cid:0 1 k ;  if n  cid:0  k is odd;   0 1 : : : k   ;  if n  cid:0  k is even.  j  The value of a  will be n  cid:0  2t  cid:0  1 after the interhange. For eÆieny we  j mod  n cid:0 2t   an also use the fat that k usually equals n  cid:0  1. The total number of transpositions  P  bn=2  t=0  is   n  cid:0  2t !  cid:0  bn=2  cid:0  1.  54. Yes; the transformation an be any k-yle on positions f1; : : : ; kg.  55.  a  Sine  cid:26    m  =  cid:26    m mod n!  when n >  cid:26    m , we have  cid:26    n! + m  =  cid:26    m   !  !  !  !  !  for 0 < m < n  cid:1  n! =  n + 1 !  cid:0  n!. Therefore  cid:12   =  cid:27   : : :  cid:27    cid:12   =  n!+m  n!   cid:26    n!+m    cid:26    n!+1   !  !   cid:27   : : :  cid:27    cid:12   =  cid:12    cid:12   for 0  cid:20  m < n  cid:1  n!, and we have in partiular   cid:26    m    cid:26    1   n!  m  n!  !  !   cid:12   =  cid:27    cid:12   =  cid:27    cid:12    cid:12   =  cid:27    cid:27    cid:12   :   n+1 !   n+1 ! cid:0 1  n+1  n+1  n! cid:0 1  n!  n+1  n  n!  n   cid:0   n+1  Similarly  cid:11   =  cid:12    cid:11    cid:12    cid:11   for 0  cid:20  m < n  cid:1  n!.  n!+m  n!  n!  m   cid:0   n!  Sine  cid:12   ommutes with  cid:28   and  cid:28   we  cid:12 nd  cid:11   =  cid:28    cid:11   , and  n!  n  n+1  n!  n! cid:0 1  n   cid:11   =  cid:28    cid:11   =  cid:28    cid:12    cid:11    cid:12    cid:11   =  cid:1   cid:1   cid:1    n+1 !   n+1 ! cid:0 1   n+1 ! cid:0 1 cid:0 n  n+1  n+1  n!  n!   cid:0   n!  =  cid:28    cid:12    cid:11     cid:12    cid:11      n+1  n! cid:0 1  n!  n!  n!   cid:0 n  n   cid:0 n cid:0 1   cid:0   n+1  =  cid:12    cid:28    cid:28     cid:12    cid:11      n!  n+1  n!  n!  n   cid:0    cid:0    cid:0   n+1  =  cid:12    cid:27    cid:27    cid:28    cid:28     cid:12    cid:11      :   n+1 !  n+1  n  n  n+1  n!  n!   b  In this ase  cid:27    cid:27   =  n n cid:0 1 : : : 1  and  cid:28    cid:28   =  n+1 n 0 , and we have  n+1  n  n+1  n   cid:0    cid:0    cid:12    cid:11   =  n+1 n : : : 0  by indution. Therefore  cid:11   =  cid:12    cid:11    n : : : 0    n+1 !   n+1 !  jn!+m  n!  m   cid:0 j  j  for 0  cid:20  j  cid:20  n and 0  cid:20  m < n!. All permutations of f0; : : : ; ng are ahieved beause   cid:0 j  j   cid:12    cid:11    cid:12 xes n and  n : : : 0   takes n 7! n  cid:0  j .  n!  m  56. If we set  cid:27   =  k cid:0 1 k cid:0 2   k cid:0 3 k cid:0 4  : : : in the previous exerise, we  cid:12 nd by indu-  tion that  cid:12    cid:11   is the  n + 1 -yle  0 n n cid:0 1 n cid:0 3 : : :  2 or 1   1 or 2  : : : n cid:0 4 n cid:0 2 .  57. Arguing as in answer 5, we obtain  [ k odd ℄=k!  cid:0   bn=2  cid:0  1 =n! = sinh 1  cid:0  1  cid:0   P  n cid:0 1  k=2  k  n!  n!  O 1= n  cid:0  1 ! .  58. True. By the formulas of exerise 55 we have  cid:11   =  0 n   cid:12    n : : : 0 , and  n! cid:0 1   cid:0   n!  this takes 0 7! n  cid:0  1 beause  cid:12    cid:12 xes n.  Consequently Algorithm E will de cid:12 ne a  n!  Hamiltonian yle on the graph of exerise 66 if and only if  cid:12   =  n cid:0 1 : : : 2 1 , and  n!  this holds if and only if the length of every yle of  cid:12   is a divisor of n. The latter   n cid:0 1 !  is true for n = 2, 3, 4, 6, 12, 20, and 40, but for no other n  cid:20  250;000.   59. The Cayley graph with generators   cid:11   ; : : : ;  cid:11     in the text's de cid:12 nition is isomorphi  to the Cayley graph with generators   cid:11   ; : : : ;  cid:11     in the alternative de cid:12 nition, sine  1  k   cid:0    cid:0   1  k   cid:0    cid:0    cid:0    cid:25  !  cid:11    cid:25  in the former if and only if  cid:25   !  cid:25    cid:11   in the latter.  j  j  60. There are 88 delta sequenes, whih redue to four lasses: P =  32131231    plain  hanges, represented by 8 di cid:11 erent delta sequenes ; Q =  32121232    a doubly Gray  3  3  2  variant of plain hanges, with 8 representatives ; R =  121232321232    a doubly Gray  ode with 24 representatives ; S = 2 cid:11 3 cid:11   ,  cid:11  = 12321312121  48 representatives .  R  Classes P and Q are yli shifts of their omplements; lasses P , Q, and S are shifts  of their reversals; lass R is a shifted reversal of its omplement. [See A. L. Leigh Silver,  Math. Gazette 48  1964 , 1{16.℄  46   7.2.1.2  ANSWERS TO EXERCISES  47  61. There are respetively  26; 36; 20; 26; 28; 40; 40; 20; 26; 28; 28; 26  suh paths ending  at  1243; 1324; 1432; 2134; 2341; 2413; 3142; 3214; 3421; 4123; 4231; 4312 .  62. There are only two paths when n = 3, ending respetively at 132 and 213.  But when n  cid:21  4 there are Gray odes leading from 12 : : : n to any odd permuta-  tion a  a  : : : a  . Exerise 61 establishes this when n = 4, and we an prove it by  1  2  n  indution for n > 4 as follows.  Let A j   be the set of all permutations that begin with j , and let A j; k  be  those that begin with j k.  If   cid:11   ;  cid:11   ; : : : ;  cid:11     are any odd permutations suh that  0  1  n   cid:11   2 A x  ; x   , then  1 2  cid:11   is an even permutation in A x  ; x   . Consequently, if  j  j  j+1  j  j+1  j  x  x  : : : x  is a permutation of f1; 2; : : : ; ng, there is at least one Hamiltonian path of  1  2  n  the form   1 2  cid:11    cid:0  cid:0  cid:0   cid:1   cid:1   cid:1   cid:0  cid:0  cid:0   cid:11    cid:0  cid:0  cid:0   1 2  cid:11    cid:0  cid:0  cid:0   cid:1   cid:1   cid:1   cid:0  cid:0  cid:0   cid:11    cid:0  cid:0  cid:0   cid:1   cid:1   cid:1   cid:0  cid:0  cid:0   1 2  cid:11    cid:0  cid:0  cid:0   cid:1   cid:1   cid:1   cid:0  cid:0  cid:0   cid:11   ;  0  1  1  2  n cid:0 1  n  the subpath from  1 2  cid:11   to  cid:11   inludes all elements of A x   .  j cid:0 1  j  j  This onstrution solves the problem in at least  n  cid:0  2 !  =2  distint ways when  n  n cid:0 1  a  6= 1, beause we an take  cid:11   = 2 1 : : : n and  cid:11   = a  a  : : : a  ; there are  n  cid:0  2 ! ways  1  0  n  1  2  n  to hoose x  : : : x  , and  n  cid:0  2 !=2 ways to hoose eah of  cid:11   , : : : ,  cid:11   .  2  n cid:0 1  1  n cid:0 1  Finally, if a  = 1, take any path 1 2 : : : n  cid:0  cid:0  cid:0   cid:1   cid:1   cid:1   cid:0  cid:0  cid:0  a  a  : : : a  that runs through  1  1  2  n  all of A 1 , and hoose any step  cid:11   cid:0  cid:0  cid:0   cid:11   with  cid:11  2 A 1; j   and  cid:11   2 A 1; j    for some  0  0  0  0  j 6= j  . Replae that step by   cid:11   cid:0  cid:0  cid:0   1 2  cid:11    cid:0  cid:0  cid:0   cid:1   cid:1   cid:1   cid:0  cid:0  cid:0   cid:11    cid:0  cid:0  cid:0   cid:1   cid:1   cid:1   cid:0  cid:0  cid:0   1 2  cid:11    cid:0  cid:0  cid:0   cid:1   cid:1   cid:1   cid:0  cid:0  cid:0   cid:11    cid:0  cid:0  cid:0   cid:11   ;  1  2  n cid:0 1  n  0  using a onstrution like the Hamiltonian path above but now with  cid:11   =  cid:11 ,  cid:11   =  1  n  0  0   1 2  cid:11   , x  = 1, x  = j , x  = j  , and x  = 1.  In this ase the permutations  cid:11   ,  1  2  n  n+1  1  : : : ,  cid:11   might all be even.   n  63. Monte Carlo estimates using the tehniques of Setion 7.2.3 suggest that the total  number of equivalene lasses will be roughly 1:2  cid:2  10  ; most of those lasses will  21  ontain 480 Gray yles.  64. Exatly 2,005,200 delta sequenes have the doubly Gray property; they belong to  4206 equivalene lasses under yli shift, reversal, and or omplementation. Nine  lasses, suh as the ode 2 cid:11 2 cid:11   where  R   cid:11  = 12343234321232121232321232121234343212123432123432121232321;  are shifts of their reversal; 48 lasses are omposed of repeated 60-yles. One of the  most interesting of the latter type is  cid:11  cid:11  where   cid:11  =  cid:12  2 cid:12  4 cid:12  4 cid:12  4 cid:12  4;   cid:12  = 32121232123:  65. Suh a path exists for any given N  cid:20  n!: Let the N th permutation be  cid:11  = a  : : : a  ,  1  n  and let j = a  . Also let  cid:5   be the set of all permutations  cid:12  = b  : : : b  for whih b  = k  1  k  1  n  1  and  cid:12   cid:20   cid:11 . By indution on N there is a Gray path P  for  cid:5   . We an then onstrut  1  j  Gray paths P  for  cid:5   [  cid:5   [  cid:1   cid:1   cid:1  [  cid:5   for 2  cid:20  k  cid:20  j , suessively ombining P  k  j  1  k cid:0 1  k cid:0 1  with a Gray yle for  cid:5   .  See the \absorption" onstrution of answer 62. In fat,  k cid:0 1  P  will be a Gray yle when N is a multiple of 6.   j  66. De cid:12 ning the delta sequene by the rule  cid:25   =  1 Æ     cid:25   , we  cid:12 nd exatly 36   k+1  mod n!  k  k  suh sequenes, all of whih are yli shifts of a pattern like  xyzyzyxzyzyz   .  The  next ase, n = 5, probably has about 10  solutions that are inequivalent with respet  18  2  21  to yli shifting, reversal, and permutation of oordinates, thus about 6 cid:2  10  di cid:11 erent  47   48  ANSWERS TO EXERCISES  7.2.1.2  delta sequenes.  Inidentally, Igor Pak has shown that the Cayley graph generated by  star transpositions is an  n  cid:0  2 -dimensional torus in general.  67. If we let  cid:25  be equivalent to  cid:25  12345 , we get a redued graph on 24 verties that has  40768 Hamiltonian yles, 240 of whih lead to delta sequenes of the form  cid:11   in whih  5   cid:11  uses eah transposition 6 times  for example,  cid:11  = 354232534234532454352452 . The  total number of solutions to this problem is probably about 10  .  16  68. If A isn't onneted, neither is G. If A is onneted, we an assume that it is a free  tree. Moreover, in this ase we an prove a generalization of the result in exerise 62:  For n  cid:21  4 there is a Hamiltonian path in G from the identity permutation to any odd  permutation. For we an assume without loss of generality that A ontains the edge  1  cid:0  cid:0  cid:0  2 where 1 is a leaf of the tree, and a proof like that of exerise 62 applies.  [This elegant onstrution is due to M. Thuente, Ars Combinatoria 14  1982 ,  115{122. Extensive generalizations have been disussed by Ruskey and Savage in SIAM  J. Disrete Math. 6  1993 , 152{166. See also the original Russian publiation in  Kibernetika 11, 3  1975 , 17{25; English translation, Cybernetis 11  1975 , 362{366.℄  69. Following the hint, the modi cid:12 ed algorithm behaves like this when n = 5:  12  34  1  243  1423  41  23  4132  1  432  13  42  1324  31  24  3  142  3412  4312  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^  ^    "    "    "    "    "    "  54321  24351  24153  54123  14523  14325  24315  24513  54213  14253  14352  54312  12345  15342  35142  32145  32541  52341  51342  31542  31245  35241  25341  21345  15342  12435  32415  35412  31452  51432  52431  32451  35421  31425  21435  25431  23451  53421  51423  21453! 25413  23415  13425  15423! 12453  52413  53412  13452  21543  51243  53241  23541  23145  25143  15243  13245  13542  53142  52143  12543  34512  34215  14235  14532  54132  34152  34251  54231  24531  24135  34125  34521  32154! 35124  15324! 12354  52314  32514  31524  51324  21354! 25314  35214! 31254  45123  42153  42351  45321  41325  41523! 42513  42315  45312  41352  41253  45213  43215  43512  41532  41235  45231! 43251  43152! 45132  42135  42531  43521  43125  51234  21534! 23514  53214  13254  15234  25134  23154  53124  13524! 12534  52134    "    "    "    "    "    "  Here the olumns represent sets of permutations that are ylially rotated and or  re cid:13 eted in all 2n ways; therefore eah olumn ontains exatly one \rosary permuta-  tion"  exerise 18 . We an use Algorithm P to run through the rosary permutations  systematially, knowing that the pair xy will our before yx in its olumn, at whih  time  cid:28   instead of  cid:26   will move us to the right or to the left. Step Z2 omits the  0  0  interhange a  $ a  , thereby ausing the permutations a  : : : a  to repeat themselves  1  2  1  n cid:0 1  going bakwards.  We impliitly use the fat that t[k℄ = t[n!  cid:0  k℄ in the output of  Algorithm T.   Now if we replae 1 : : : n by 24 : : : 31 and hange A  : : : A  to A  A  A  A  : : : ,  1  n  1  n  2  n cid:0 1  we get the unmodi cid:12 ed algorithm whose results are shown in Fig. 22 b .  This method was inspired by a  nononstrutive  theorem of E. S. Rapoport,  Sripta Math. 24  1959 , 51{58. It illustrates a more general fat observed by Carla  Savage in 1989, namely that the Cayley graph for any group generated by three  involutions  cid:26 ,  cid:27  ,  cid:28  has a Hamiltonian yle when  cid:26   cid:28  =  cid:28   cid:26  [see I. Pak and R. Radoi cid:20 i cid:19 ,  \Hamiltonian paths in Cayley graphs," to appear℄.  70. No; the longest yle in that digraph has length 358. But there do exist pairs of  disjoint 180-yles from whih a Hamiltonian path of length 720 an be derived. For  48   7.2.1.2  ANSWERS TO EXERCISES  49  example, onsider the yles  cid:11  cid:27  cid:12  cid:27  and  cid:13   cid:27  cid:27  where   cid:11  =  cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27   ;  5  5  3  2  5  3  2  5  5  2  3  1  5  5  5  3  1  1  3  2  1  1  3  5  2  2  5  2  3  1  1  5  1  3  5  5  3  2  1  2  3  1  1  3  2  4   cid:12  =  cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27   ;   cid:13  =  cid:27  cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27   5  5  3  1  1  3  2  5  2  3  5  1  5  3  2  1  2  3  1  1  3  2  5  5  5  3  5  2  5  2  3  1  1  5  1  3  3  5  5  1  5  2  3  1  2   cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27    cid:28   cid:27   :  If we start with 134526 and follow  cid:11  cid:27  cid:12   cid:28  we reah 163452; then follow  cid:13   cid:27  cid:28  and reah  126345; then follow  cid:27  cid:13   cid:28  and reah 152634; then follow  cid:12  cid:27  cid:11 , ending at 415263.  71. Brendan MKay and Frank Ruskey have found suh yles by omputer when  n = 7, 9, and 11, but no nie struture was apparent.  72. Any Hamiltonian path inludes  n  cid:0  1 ! verties that take y 7! x, eah of whih  if  not the last  is followed by a vertex that takes x 7! x. So one must be last; otherwise   n  cid:0  1 ! + 1 verties would take x 7! x.  73.  a  Assume  cid:12 rst that  cid:12  is the identity permutation   . Then every yle of  cid:11  that  ontains an element of A lies entirely within A. Hene the yles of  cid:27  are obtained by  omitting all yles of  cid:11  that ontain no element of A. All remaining yles have odd  length, so  cid:27  is an even permutation.  If  cid:12  is not the identity, we apply this argument to  cid:11   =  cid:11  cid:12   ,  cid:12   =   , and  cid:27   =  cid:27  cid:12   ,  0   cid:0   0  0   cid:0   onluding that  cid:27   is an even permutation; thus  cid:27  and  cid:12  have the same sign.  0  Similarly,  cid:27  and  cid:11  have the same sign, beause  cid:12  cid:11   =   cid:11  cid:12      has the same order   cid:0    cid:0    cid:0   as  cid:11  cid:12   .   cid:0    b  Let X be the verties of the Cayley graph in Theorem R, and let  cid:11  be the  permutation of X that takes a vertex  cid:25  into  cid:11  cid:25  ; this permutation has g=a yles of  length a. De cid:12 ne the permutation  cid:12  similarly. Then  cid:11  cid:12   has g= yles of length .   cid:0   If  is odd, any Hamiltonian yle in the graph de cid:12 nes a yle  cid:27  that ontains all the  verties and satis cid:12 es the hypotheses of  a . Therefore  cid:11  and  cid:12  have an odd number of  yles, beause the sign of a permutation on n elements with r yles is   cid:0 1    see  n cid:0 r  exerise 5.2.2{2 .  [This proof, whih shows that X annot be the union of any odd number of yles,  was presented by Rankin in Pro. Cambridge Phil. So. 62  1966 , 15{16.℄  74. The representation  cid:12    cid:13   is unique if we require 0  cid:20  j < g= and 0  cid:20  k < . For  j  k  j  k  if we had  cid:12   =  cid:13   for some j with 0 < j < g=, the group would have at most j   elements. It follows that  cid:12   =  cid:13   for some t.  g=  t  Let  cid:27  be a Hamiltonian yle, as in the previous answer. If x cid:27  = x cid:11  then x cid:13   cid:27   must be x cid:13  cid:11 , beause x cid:13   cid:12  =  cid:11 . And if x cid:27  = x cid:12  then x cid:13   cid:27  annot be x cid:13  cid:11 , beause  that would imply x cid:13    cid:27  = x cid:13    cid:11 . Thus the elements x cid:13   all have equivalent behavior      k  with respet to their suessors in  cid:27  .  Notie that if j  cid:21  0 there is a k  cid:20  j suh that x cid:27   = x cid:11    cid:12   = x cid:12    cid:13   . Therefore  j  k  j cid:0 k  j  k  g=  t+k  x cid:27   = x cid:13   is equivalent to x, and the same behavior will repeat. We return to x  for the  cid:12 rst time in g steps if and only if t + k is relatively prime to .  75. Apply the previous exerise with g = mn, a = m, b = n,  = mn=d. The number t  satis cid:12 es t  cid:17  0  modulo m , t + d  cid:17  0  modulo n ; and it follows that k + t ?  if and  only if  d  cid:0  k m=d ? kn=d.  Notes: The modular Gray ode of exerise 7.2.1.1{78 is a Hamiltonian path from   0; 0  to  m  cid:0  1;   cid:0 m  mod n , so it is a Hamiltonian yle if and only if m is a multiple  of n.  It is natural to onjeture  falsely  that at least one Hamiltonian yle exists  whenever d > 1. But P. Erd}os and W. T. Trotter have observed [J. Graph Theory 2  49   50  ANSWERS TO EXERCISES  7.2.1.2   1978 , 137{142℄ that if p and 2p + 1 are odd prime numbers, no suitable k exists when  m = p  2p + 1   3p + 1  and n =  3p + 1   q  .  Q  3p  q=1  [q is prime℄[q 6=p℄[q 6=2p+1℄  See J. A. Gallian, Mathematial Intelligener 13, 3  Summer 1991 , 40{43, for  interesting fats about other kinds of yles in C   cid:2  C  .  m  n  76. We may assume that the tour begins in the lower left orner. There are no solutions  when m and n are both divisible by 3, beause 2 3 of the ells are unreahable in that  ase. Otherwise, letting d = gd m; n  and arguing as in the previous exerise but with   x; y  cid:11  =   x + 2  mod m;  y + 1  mod n  and  x; y  cid:12  =   x + 1  mod m;  y + 2  mod n ,  we  cid:12 nd the answer  d cid:0 1   cid:16    cid:17   X  d  k  k=1  [ gd  2d cid:0 k m;  k+d n  = d or  mn ? 3 and gd  2d cid:0 k m;  k+d n  = 3d  ℄:  77. 01  * Permutation generator \`a la Heap  02  N  IS  10  The value of n  3 or more, not large   03  t  IS  $255  04  j  IS  $0  8j  05  k  IS  $1  8k  06  ak  IS  $2  07  aj  IS  $3  08  LOC  Data_Segment  10  A0  IS    11  A1  IS  +8  12  A2  IS  +16  09  a  GREG    Base address for a  : : : a  0  n cid:0 1  13  LOC  +8*N  Spae for a  : : : a  0  n cid:0 1  14    GREG  -8*3  Loation of 8  0  15  LOC  -8*3+8*N  8  : : : 8  , initially zero  3  n cid:0 1  16  OCTA  -1  8  =  cid:0 1, a onvenient sentinel  n  17  u  GREG  0  Contents of a  , exept in inner loop  18  v  GREG  0  Contents of a  , exept in inner loop  19  w  GREG  0  Contents of a  , exept in inner loop  20  LOC  100  21  1H  STCO  0,,k  B  cid:0  A     0.  k  22  INCL  k,8  B  cid:0  A k   k + 1.  23  0H  LDO  j,,k  B  j     .  k  24  CMP  t,j,k  B  25  BZ  t,1B  B  Loop if   = k.  26  BN  j,Done  A  Terminate if   < 0  k = n .  k  27  LDO  ak,a,k  A  cid:0  1 Feth a  .  28  ADD  t,j,8  A  cid:0  1  29  STO  t,,k  A  cid:0  1      j + 1.  k  30  AND  t,k,8  A  cid:0  1  31  CSZ  j,t,0  A  cid:0  1  Set j   0 if k is even.  32  LDO  aj,a,j  A  cid:0  1 Feth a  .  j  33  STO  ak,a,j  A  cid:0  1 Replae it by a  .  k  34  CSZ  u,j,ak  A  cid:0  1  Set u   a  if j = 0.  35  SUB  j,j,8  A  cid:0  1  j   j  cid:0  1.  36  CSZ  v,j,ak  A  cid:0  1  Set v   a  if j = 0.  0  1  2  k  k  k  k  50   7.2.1.2  ANSWERS TO EXERCISES  51  37  SUB  j,j,8  A  cid:0  1  j   j  cid:0  1.  38  CSZ  w,j,ak  A  cid:0  1  Set w   a  if j = 0.  k  39  STO  aj,a,k  A  cid:0  1 Replae a  by what was a  .  k  j  40  Inner PUSHJ  0,Visit  A  ...   See  42    55  PUSHJ  0,Visit  A  56  SET  t,u  A  Swap u $ w.  57  SET  u,w  A  58  SET  w,t  A  59  SET  k,8*3  A  k   3.  60  JMP  0B  A  61  Main  LDO  u,A0  1  62  LDO  v,A1  1  63  LDO  w,A2  1  64  JMP  Inner  1  78. Lines 31{38 beome 2r  cid:0  1 instrutions, lines 61{63 beome r, and lines 56{58  beome 3 +  r  cid:0  2 [ r even ℄ instrutions  see ! r  cid:0  1  in answer 40 . The total running  time is therefore   2r!+2 A+2B +r cid:0 5  cid:22 +  2r!+2r+7+ r cid:0 2 [ r even ℄ A+7B  cid:0 r cid:0 4  cid:29  ,  where A = n!=r! and B = n!  1=r! +  cid:1   cid:1   cid:1  + 1=n! .  79. SLU u,[f℄,t; SLU t,a,4; XOR t,t,a; AND t,t,u; SRU u,t,4; OR t,t,u;  XOR a,a,t; here, as in the answer to exerise 1.3.1  {34, the notation `[f℄' denotes a  register that ontains the onstant value  f .  0    80. SLU u,a,t; MXOR u,[8844221188442211℄,u; AND u,u,[ff000000℄; SRU u,u,t;  XOR a,a,u . This heats, sine it transforms  12345678 to  13245678 when t = 4, but       45  still works.  Even faster and trikier would be a routine analogous to  42 : Consider  PUSHJ 0,Visit; MXOR a,a,1; PUSHJ 0,Visit; : : : MXOR a,a,5; PUSHJ 0,Visit  where 1, : : : , 5 are onstants that would ause  12345678 to beome suessively              12783456 ,  12567834 ,  12563478 ,  12785634 ,  12347856 . Other instrutions, exe-  uted only 1 6 or 1 24 as often, an take are of shu cid:15 ing nybbles within and between  bytes. Very lever, but it doesn't beat  46  in view of the PUSHJ POP overhead.  81. t  IS  $255 ;k IS $0 ;kk IS $1 ; IS $2 ;d IS $3  SET  k,1  k   1.  3H SRU  d,a,60  d   leftmost nybble.  SLU  a,a,4  a   16a mod 16  .  16  CMP  ,d,k  SLU  kk,k,2  SLU  d,d,kk  OR  t,t,d  t   t + 16  d.  k  PBNZ ,1B  Return to main loop if d 6= k.  INCL k,1  k   k + 1.  PBNZ a,3B  Return to seond loop if k < n.  82.  cid:22  +  5n! + 11A  cid:0   n  cid:0  1 ! + 6  cid:29  =   5 + 10=n  cid:29  + O n    n!, plus the visiting time,   cid:0 2  where A =  k! is the number of times the loop at 3H is used.  P  n cid:0 1  k=1  83. With suitable initialization and a 13-otabyte table, only about a dozen MMIX  instrutions are needed:  51   52  ANSWERS TO EXERCISES  7.2.1.2  magi  GREG 8844221188442211  0H  h Visit register a i  PBN  ,Sigma  Tau  MXOR t,magi,a; ANDNL t,ffff; JMP 1F  Sigma  SRU  t,a,20; SLU a,a,4; ANDNML a,f00  1H  XOR  a,a,t; SLU ,,1  2H  PBNZ ,0B; INCL p,8  3H  LDOU ,p,0; PBNZ ,0B  84. Assuming that the proessors all have essentially the same speed, we an let the  kth proessor generate all permutations of rank r for  k  cid:0  1 n!=p  cid:20  r < k n!=p, using  any method based on ontrol tables   : : :   . The starting and ending ontrol tables  1  n  are easily omputed by onverting their ranks to mixed-radix notation  exerise 12 .  85. We an use a tehnique like that of Algorithm 3.4.2P: To ompute k = r  cid:11  ,  cid:12 rst  set a    j for 1  cid:20  j  cid:20  n  the inverse permutation . Then set k   0, and for j = n,  n  cid:0  1, : : : , 2  in this order  set t   a  , k   kj + t  cid:0  1, a    a  , a    t. To  0  0  j  t  a  j  j  0  a  j  [ cid:0 1℄  ompute r   k , start with a    1. Then for j = 2, : : : , n  cid:0  1, n  in this order  set  1  t    k mod j   + 1, a    a  , a    j , k   bk=j . [See S. Pleszzy cid:19 nski, Inf. Pro. Letters  j  t  t  3  1975 , 180{183; W. Myrvold and F. Ruskey, Inf. Pro. Letters 79  2001 , 281{284.℄  Another method is preferable if we want to rank and unrank only the n  variations  a  : : : a  of f1; : : : ; ng: To ompute k = r a  : : : a   , start with b  : : : b    b  : : : b     1  m  1  m  1  n  1  n  1 : : : n; then for j = 1, : : : , m  in this order  set t   b  , b    b  , and b    t;  0  0  a  j  t  n+1 cid:0 j   cid:12 nally set k   0 and for j = m, : : : , 1  in this order  set k   k  cid:2   n + 1  cid:0  j   + b   cid:0  1.  To ompute r   k , start with b  : : : b    1 : : : n; then for j = 1, : : : , m  in this order   1  n  [ cid:0 1℄  set t    k mod  n + 1  cid:0  j    + 1, a    b  , b    b  , k   bk= n + 1  cid:0  j  .  See  j  t  t  n+1 cid:0 j  exerise 3.4.2{15 for ases with large n and small m.   m  0  0  b  t  0  a  j  86. If x  cid:30  y and y  cid:30  z , the algorithm will never move y to the left of x, nor z to the  left of y , so it will never test x versus z .  87. They appear in lexiographi order; Algorithm P used a re cid:13 eted Gray order.  88. Generate inverse permutations with a  < a  < a  , a  < a  < a  , a  < a  , a  < a  ,  0  1  2  3  4  5  6  7  8  9  0  0  0  0  0  0  0  0  0  0  0  0  0  0  a  < a  , a  < a  .  0  3  6  8  89.  a  Let d  = maxfj j 0  cid:20  j  cid:20  k and j is nontrivialg, where 0 is onsidered  k  nontrivial. This table is easily preomputed, beause j is trivial if and only if it must  follow f1; : : : ; j  cid:0  1g. Set k   d  in step V2 and k   d  in step V5.  Assume d  > 0.   n  k cid:0 1  n   b  Now M =  t  [j is nontrivial℄.  P  n  j=1  j     There are at least two topologial sorts a  : : : a  of the set fj; : : : ; kg, and either  j  k  of them an be plaed after any topologial sort a  : : : a  of f1; : : : ; j  cid:0  1g.  1  j cid:0 1   d  Algorithm 2.2.3T repeatedly outputs minimal elements  elements with no  predeessors , removing them from the relation graph. We use it in reverse, repeatedly  removing and giving the highest labels to maximal elements  elements with no sues-  sors . If only one maximal element exists, it is trivial. If k and l are both maximal,  they both are output before any element x with x  cid:30  k or x  cid:30  l, beause steps T5  and T7 keep maximal elements in a queue  not a stak . Thus if k is nontrivial and  output  cid:12 rst, element l might beome trivial, but the next nontrivial element j will not  be output before l; and k is unrelated to l.   e  Let the nontrivial t's be s  < s  <  cid:1   cid:1   cid:1  < s  = N . Then we have s   cid:21  2s  ,  1  2  r  j  j cid:0 2  by   . Consequently M = s  +  cid:1   cid:1   cid:1 +s   cid:20  s   1+  +  +  cid:1   cid:1   cid:1   +s   1+  +  +  cid:1   cid:1   cid:1    < 4s  .  2  r  r  r cid:0 1  r  1  1  1  1  2  4  2  4  52   r cid:0 1  X  j+1  j  2  7.2.1.2  ANSWERS TO EXERCISES  53   A sharper estimate is in fat true, as observed by M. Pezarski: Let s  = 1, let  0  the nontrivial indies be 0 = k  < k  <  cid:1   cid:1   cid:1  < k  , and let k  = maxf k j 1  cid:20  k < k  ,  1  2  r  j  k 6 cid:30  k  g for j  cid:21  1. Then k   cid:21  k  . There are s  topologial sorts of f1; : : : ; k  g that  j  j  j+1  0  j  j cid:0 1  end with k  ; and there are at least s  that end with k  , sine eah of the s  j+1  j cid:0 1  j cid:0 1  0  j  0  j+1  topologial sorts of f1; : : : ; k   cid:0  1g an be extended. Hene  j  Now let y  = 0, y  = F  +  cid:1   cid:1   cid:1  + F  , and y  = y  + y   cid:0  F  for 1 < j < r. Then  0  1  2  r  j  j cid:0 2  j cid:0 1  r+1  s   cid:21  s  + s  for 1  cid:20  j < r.  j+1  j  j cid:0 1  F   s  +  cid:1   cid:1   cid:1  + s    +  y   s   cid:0  s   cid:0  s    =  F  +  cid:1   cid:1   cid:1  + F    s  ;  r+1  1  r  j  r+1 cid:0 j  r cid:0 j  r cid:0 1 cid:0 j  2  r+1  r  and eah y  = F   cid:0  2F  +   cid:0 1   F  is nonnegative. Hene s  +  cid:1   cid:1   cid:1  + s   cid:20   j  r+1  j  r+1 cid:0 j  1  r    F  +  cid:1   cid:1   cid:1  + F   =F    s   cid:25  2:6s  . The following exerise shows that this bound is  2  r+1  r+1  r  r  best possible.   90. The number N of suh permutations is F  by exerise 5.2.1{25. Therefore  n+1  M = F  +  cid:1   cid:1   cid:1  + F  = F   cid:0  2  cid:25   cid:30   N . Notie inidentally that all suh permutations  n+1  2  n+3  satisfy a  : : : a  = a  : : : a  . They an be arranged in a Gray path  exerise 7.2.1.1{89 .  1  n  1  n  0  0  p  91. Sine t  =  j  cid:0  1  j  cid:0  3  : : :  2 or 1 , we  cid:12 nd M =  1 + 2=   cid:25 n + O 1=n  N .  j  Note: The inversion tables   : : :   for permutations satisfying  49  are hara-  1  2n  terized by the onditions   = 0, 0  cid:20     cid:20    , 0  cid:20     cid:20    + 1.  1  2k  2k cid:0 1  2k+1  2k cid:0 1  92. The total number of pairs  R; S  , where R is a partial ordering and S is a linear  ordering that inludes R, is equal to P  times the expeted number of topologial sorts;  n  it is also Q  times n!. So the answer is n! Q  =P  .  n  n  n  We will disuss the omputation of P  and Q  in Setion 7.2.3. For 1  cid:20  n  cid:20  12  n  n  the expetation turns out to be approximately   1; 1:33; 2:21; 4:38; 10:1; 26:7; 79:3; 262; 950; 3760; 16200; 74800 :  Asymptoti values as n ! 1 have been dedued by Brightwell, Pr cid:127 omel, and Steger  [J. Combinatorial Theory A73  1996 , 193{206℄, but the limiting behavior is quite  di cid:11 erent from what happens when n is in a pratial range. The values of Q  were  cid:12 rst  n  determined for n  cid:20  5 by S. P. Avann [ cid:29 quationes Math. 8  1972 , 95{102℄.  93. The basi idea is to introdue dummy elements n + 1 and n + 2 with j  cid:30  n + 1  and j  cid:30  n + 2 for 1  cid:20  j  cid:20  n, and to  cid:12 nd all topologial sorts of suh an extended  relation via adjaent interhanges; then take every seond permutation, suppressing  the dummy elements. An algorithm similar to Algorithm V an be used, but with a  reursion that redues n to n  cid:0  2 by inserting n  cid:0  1 and n among a  : : : a  in all  1  n cid:0 2  possible ways, assuming that n  cid:0  1 6 cid:30  n, oasionally swapping n + 1 with n + 2. [See  G. Pruesse and F. Ruskey, SICOMP 23  1994 , 373{386. A loopless implementation  has been desribed by Can cid:12 eld and Williamson, Order 12  1995 , 57{75.℄  94. The ase n = 3 illustrates the general idea of a pattern that begins with 1 : : :  2n   and ends with 1  2n  2  2n cid:0 1  : : : n  n+1 : 123456, 123546, 123645, 132645, 132546,  132456, 142356, 142536, 142635, 152634, 152436, 152346, 162345, 162435, 162534.  Mathings an also be regarded as involutions of f1; : : : ; 2ng that have n yles.  With that representation this pattern involves two transpositions per step.  Notie that the C inversion tables of the permutations just listed are respetively  000000, 000100, 000200, 010200, 010100, 010000, 020000, 020100, 020200, 030200,  030100, 030000, 040000, 040100, 040200.  In general, C  = C  =  cid:1   cid:1   cid:1  = C  = 0  1  3  2n cid:0 1  53   54  ANSWERS TO EXERCISES  7.2.1.2  and the n-tuples  C  ; C  ; : : : ; C    run through a re cid:13 eted Gray ode on the radies  2  4  2n   2n  cid:0  1; 2n  cid:0  3; : : : ; 1 . Thus the generation proess an easily be made loopless if  desired. [See Timothy Walsh, J. Combinatorial Math. and Combinatorial Computing  36  2001 , 95{118, Setion 1.℄  Note: Algorithms to generate all mathings go bak to J. F. Pfa cid:11  [Abhandlungen  Akad. Wissenshaften  Berlin: 1814{1815 , 124{125℄, who desribed two suh proe-  dures: His  cid:12 rst method was lexiographi, whih also orresponds to lexiographi  order of the C inversion tables; his seond method orresponds to olex order of those  tables. Even and odd permutations alternate in both ases.  95. Generate inverse permutations with a  < a  > a  < a  >  cid:1   cid:1   cid:1  , using Algo-  0  0  0  0  1  n  2  n cid:0 1  rithm V.  See exerise 5.1.4{23 for the number of solutions.   96. For example, we an start with a  : : : a  a  = 2 : : : n 1 and b  b  : : : b  b  =  1  n cid:0 1  n  1  2  n  n+1  12 : : : n 1, and use Algorithm P to generate the  n  cid:0  1 ! permutations b  : : : b  of  2  n  f2; : : : ; ng. Just after that algorithm swaps b  $ b  , we set a    b  , a    b  ,  i  i+1  b  i  b  i+1  i cid:0 1  i  a    b  , and visit a  : : : a  .  b  i+2  1  n  i+1  97. Use Algorithm X, with t   a  ; : : : ; a    = `a  6= k'.  k  1  k  k  98. Using the notation of exerise 47, we have N  =    cid:0 1    n  cid:0  j    by the  P   cid:0    cid:1   k  j  k cid:0 j  k  j  method of inlusion and exlusion  exerise 1.3.3{26 . If k = O log n  then N  =  n cid:0 k   cid:0 1  2   n! e  =k!   1 + O log n   =n ; hene A=n!  cid:25   e  cid:0  1 =e and B=n!  cid:25  1. The number of  memory referenes, under the assumptions of answer 48, is therefore  cid:25  A + B + 3A +  B  cid:0  N  + 3A  cid:25  n!  9  cid:0      cid:25  6:06n!, about 16.5 per derangement. [See S. G. Akl, BIT  n  8  e  20  1980 , 2{7, for a similar method.℄  99. Suppose L  generates D  [D  , beginning with  1 2 : : : n , then  2 1 : : : n , and  n  n  n cid:0 1  ending with  1 : : : n cid:0 1 ; for example, L  =  1 2 3 ,  2 1 3 ,  1 2 . Then we an generate  3  D  as K  , : : : , K  , K  , where K  =  1 2 : : : n    n n+1 L   1 2 : : : n   ; for  n+1  nn  n2  n1  n  nk   cid:0 k  k  example, D  is  4   1 2 3 4 ;  2 1 3 4 ;  1 2  3 4 ;  3 1 2 4 ;  1 3 2 4 ;  3 1  2 4 ;  2 3 1 4 ;  3 2 1 4 ;  2 3  1 4 :  Notie that K  begins with the yle  k+1 : : : n 1 : : : k n+1  and ends with  nk   k+1 : : : n 1 : : : k cid:0 1   k n+1 ; so premultipliation by  k cid:0 1 k  takes us from K  nk  to K  . Also, premultipliation by  1 n  will return from the last element of D  n k cid:0 1   n+1  to the  cid:12 rst. Premultipliation by  1 2 n+1  takes us from the last element of D  to   2 1 3 : : : n , from whih we an return to  1 2 : : : n  by following the yle for D  n+1  n  bakwards, thereby ompleting the list L  as desired.  n+1  100. Use Algorithm X, with t   a  ; : : : ; a    = `p > 0 or l[q ℄ 6= k + 1'.  k  1  k  Notes: The number of indeomposable permutations is [z  ℄  1  cid:0  1=  k! z   ;  n  k  1  P  k=0  see L. Comtet, Comptes Rendus Aad. Si. A275  Paris, 1972 , 569{572. It appears  likely that the indeomposable permutations an be generated by adjaent transposi-  tions; for example, when n = 4 they are 3142, 3412, 3421, 3241, 2341, 2431, 4231, 4321,  4312, 4132, 4123, 4213, 2413.  101. Here is a lexiographi involution generator analogous to Algorithm X.  Y1. [Initialize.℄ Set a    k and l    k for 1  cid:20  k  cid:20  n. Then set l    0, k   1.  k  k cid:0 1  n  Y2. [Enter level k.℄ If k > n, visit a  : : : a  and go to Y3. Otherwise set p   l  ,  1  n  0  u    p, l    l  , k   k + 1, and repeat this step.  We have deided to let  k  0  p  a  = p.   p  54   7.2.1.2  ANSWERS TO EXERCISES  55  Y3. [Derease k.℄ Set k   k  cid:0  1, and terminate if k = 0. Otherwise set q   u  and  k  p   a  . If p = q , set l    q , q   0, r   l  , and k   k + 1  preparing to make  q  0  p  a  > p . Otherwise set l    q , r   l   preparing to make a  > q .  p  u  q  p  k cid:0 1  Y4. [Inrease a  .℄ If r = 0 go to Y5. Otherwise set l    l  , u    q , u    r,  p  q  r  k cid:0 1  k  a    r, a    q , a    p, k   k + 1, and go to Y2.  p  q  r  Y5. [Restore a  .℄ Set l    p, a    p, a    q , k   k  cid:0  1, and return to Y3.  p  0  p  q  Let t  = t  + nt  , a  = 1 + a  + na  , t  = t  = 1, a  = 0, a  = 1.  See  n+1  n  n cid:0 1  n+1  n  n cid:0 1  0  1  0  1  Eq. 5.1.4{ 40 .  Step Y2 is performed t  times with k > n and a  times with k  cid:20  n.  n  n  Step Y3 is performed a  times with p = q and a  + t  times altogether. Step Y4 is  n  n  n  performed t   cid:0  1 times; step Y5, a  times. The total number of mems for all t  outputs  n  n  n  is therefore approximately 11a  + 12t  , where a  < 1:25331414 t  .  Optimizations are  n  n  n  n  learly possible if speed is essential.   102. We onstrut a list L  that begins with    and ends with  n cid:0 1 n , starting with  n  L  =   ,  1 2 ,  1 3 ,  2 3 .  If n is odd, L  is L  , K  , K  , : : : , K  , where  3  n+1  n  n1  n2  nn  R  R  K  =  k : : : n   L   k : : : n   k n+1 . For example,  nk  n cid:0 1   cid:0   L  =   ;  1 2 ;  1 3 ;  2 3 ;  2 3  1 4 ;  1 4 ;  2 4 ;  1 3  2 4 ;  1 2  3 4 ;  3 4 :  4  If n is even, L  is L  , K  , K  , : : : , K  ,  1 n cid:0 2 L   1 n cid:0 2   n n+1 .  n+1  n  n n cid:0 1   n n cid:0 2   n1  n cid:0 1  R  R  For further developments, see the artile by Walsh ited in answer 94.  103. The following elegant solution by Carla Savage needs only n  cid:0  2 di cid:11 erent op-  erations  cid:26   , for 1 < j < n, where  cid:26   replaes a  a  a  by a  a  a  when j is  j  j  j cid:0 1  j  j+1  j+1  j cid:0 1  j  even, a  a  a  when j is odd. We may assume that n  cid:21  4; let A  =   cid:26    cid:26    cid:26    cid:26      .  j  j+1  j cid:0 1  4  3  2  2  3  3  In general A  will begin and end with  cid:26   , and it will ontain 2n  cid:0  2 ourrenes  n  n cid:0 1  of  cid:26   altogether. To get A  , replae the kth  cid:26   of A  by  cid:26   A   cid:26   , where  n cid:0 1  n+1  n cid:0 1  n  0  n  n  n  k = 1, 2, 4, : : : , 2n  cid:0  2 if n is even and k = 1, 3, : : : , 2n  cid:0  3, 2n  cid:0  2 if n is  odd, and where A  is A  with its  cid:12 rst or last element deleted. Then, if we begin  0  n  n  with a  : : : a  = 1 : : : n, the operations  cid:26   of A  will ause position a  to run  1  n  n cid:0 1  n  n  through the suessive values n ! p  ! n ! p  !  cid:1   cid:1   cid:1  ! p  ! n, where  1  2  n cid:0 1  p  : : : p  =  n cid:0 1  cid:0  [n even ℄  : : : 4 2 1 3 : : :  n cid:0 1  cid:0  [n odd ℄ ; the  cid:12 nal permutation will  1  n cid:0 1  again be 1 : : : n.  104.  a  A well-balaned permutation has  k a  = n n + 1   =4, an integer.  P  n  2  k=1  k   b  Replae k by a  when summing over k.  k     A fairly fast way to ount, when n is not too large, an be based on the  streamlined plain-hange algorithm of exerise 16, beause the quantity  k a  hanges  P  k  in a simple way with eah adjaent interhange, and beause n  cid:0  1 of every n steps  are \hunts" that an be done rapidly. We an save half the work by onsidering only  permutations in whih 1 preedes 2. The values for 1  cid:20  n  cid:20  15 are 0, 0, 0, 2, 6, 0, 184,  936, 6688, 0, 420480, 4298664, 44405142, 0, 6732621476.  105.  a  For eah permutation a  : : : a  , insert  cid:30  between a  and a  if a  > a  ;  1  n  j  j+1  j  j+1  insert either  cid:17  or  cid:30  between them if a  < a  .  A permutation with k \asents"  j  j+1  therefore yields 2  weak orders. Weak orders are sometimes alled \preferential arrange-  k  ments; exerise 5.3.1{4 shows that there are approximately n!= 2 ln 2     of them. A  n+1  Gray ode for weak orders, in whih eah step hanges  cid:30  $  cid:17  and or a  $ a  , an  j  j+1  be obtained by ombining Algorithm P with Gray binary ode at the asents.   b  Start with a  : : : a  a  = 0 : : : 00 and a  =  cid:0 1. Perform Algorithm L  1  n  n+1  0  until it stops with j = 0. Find k suh that a  >  cid:1   cid:1   cid:1  > a  = a  , and terminate if  1  k  k+1  k = n. Otherwise set a    a  + 1 for 1  cid:20  l  cid:20  k and go to step L4.  [See M. Mor  l  k+1  55   56  ANSWERS TO EXERCISES  7.2.1.2  and A. S. Fraenkel, Disrete Math. 48  1984 , 101{112. Weak ordering sequenes are  haraterized by the property that, if k appears and k > 0, then k  cid:0  1 also appears.℄  106. All weak ordering sequenes an be obtained by a sequene of elementary oper-  ations a  $ a  or a    a  .  Perhaps one ould atually restrit the transformations  i  j  i  j  further, allowing only a  $ a  or a    a  for 1  cid:20  j < n.   j  j+1  j  j+1  107. Every step inreases the quantity  2  [ a  = k ℄, as noted by H. S. Wilf, so  P  n  k  k=1  k  the game must terminate. At least three approahes to the solution are plausible: one  bad, one good, and one better.  The bad one is to play the game on all 13! shu cid:15 es and to reord the longest.  This method does produe the orret answer; but 13! is 6,227,020,800, and the average  game lasts  cid:25  8:728 steps.  The good one [A. Pepperdine, Math. Gazette 73  1989 , 131{133℄ is to play  bakwards, starting with the  cid:12 nal position 1 cid:3  : : :  cid:3  where  cid:3  denotes a ard that is fae  down; we will turn a ard up only when its value beomes relevant. To move bakward  from a given position a  : : : a  , onsider all k > 1 suh that either a  = k or a  =  cid:3  and  1  n  k  k  k has not yet turned up. Thus the next-to-last positions are 21 cid:3  : : :  cid:3 , 3 cid:3 1 cid:3  : : :  cid:3 , : : : ,  n cid:3  : : :  cid:3 1. Some positions  like 6 cid:3  cid:3 213 for n = 6  have no predeessors, even though we  haven't turned all the ards up. It is easy to explore the tree of potential bakwards  games systematially, and one an in fat show that the number of nodes with t  cid:3 's is  exatly  n  cid:0  1 !=t!. Hene the total number of nodes onsidered is exatly b n  cid:0  1 ! e.  When n = 13 this is 1,302,061,345.  The better one is to play forwards, starting with initial position  cid:3  : : :  cid:3  and turning  over the top ard when it is fae down, running through all  n  cid:0  1 ! permutations of  f2; : : : ; ng as ards are turned.  If the bottom n  cid:0  m ards are known to be equal  to  m+1  m+2  : : : n, in that order, at most f  m  further moves are possible; thus we  need not pursue a line of play any further if it annot last long enough to be interesting.  A permutation generator like Algorithm X allows us to share the omputation for all  permutations with the same pre cid:12 x and to rejet unimportant pre cid:12 xes. The ard in posi-  tion j need not take the value j when it is turned. When n = 13 this method needs to  onsider only respetively  1; 11; 940; 6960; 44745; 245083; 1118216; 4112676; 11798207;  26541611; 44380227; 37417359  branhes at levels  1; 2; : : : ; 12  and to make a total of  only 482,663,902 forward moves. Although it repeats some lines of play, the early uto cid:11 s  of unpro cid:12 table branhes make it run more than 11 times faster than the bakward  method when n = 13.  The unique way to attain length 80 is to start with 2 9 4 5 11 12 10 1 8 13 3 6 7.  108. This result holds for any game in whih  a  : : : a  ! a  a  : : : a  a  a  : : : a  1  n  k  1  k+1  n  p k;2   p k;k cid:0 1   when a  = k, where p k; 2  : : : p k; k  cid:0  1  is an arbitrary permutation of f2; : : : ; k  cid:0  1g.  Suppose a  takes on exatly m distint values d 1  <  cid:1   cid:1   cid:1  < d m  during a play of  1  1  the game; we will prove that at most F  permutations our, inluding the initial  m+1  shu cid:15 e. This assertion is obvious when m = 1.  Let d j   be the initial value of a  , where j < m, and suppose a  hanges on  d m   d m   step r. If d j   = 1, the number of permutations is r + 1  cid:20  F  + 1  cid:20  F  . Otherwise  m  m+1  r  cid:20  F  , and at most F  further permutations follow step r.  [SIAM Review 19  m cid:0 1  m   1977 , 239{241.℄  The values of f  n  for 1  cid:20  n  cid:20  16 are  0, 1, 2, 4, 7, 10, 16, 22, 30, 38, 51, 65, 80,  101, 113, 139 , and they are attainable in respetively  1, 1, 2, 2, 1, 5, 2, 1, 1, 1, 1, 1,  56   7.2.1.2  ANSWERS TO EXERCISES  57  1, 4, 6, 1  ways. The unique longest-winded permutation for n = 16 is  9 12 6 7 2 14 8 1 11 13 5 4 15 16 10 3:  109. The forward method of answer 107 suggests that f  n  probably grows at least  as fast as n log n  by omparison with oupon olleting .  110. For 0  cid:20  j  cid:20  9 onstrut the bit vetors A  = [ a  2 S  ℄ : : : [ a  2 S  ℄ and B  =  j  j  1  j  m  j  [ j 2 S  ℄ : : : [ j 2 S  ℄. Then the number of j suh that A  = v must equal the number  1  m  j  of k suh that B  = v , for all bit vetors v . And if so, the values fa  j A  = vg should  k  j  j  be assigned to permutations of fk j B  = vg in all possible ways.  k  For example, the bit vetors in the given problem are   A  ; : : : ; A    =  9; 6; 8; b; 5; 4; 0; a; 2; 0 ;   B  ; : : : ; B    =  5; 0; 8; 6; 2; a; 4; b; 9; 0 ;  0  9  0  9  in hexadeimal notation; hene a  : : : a  = 8327061549 or 8327069541.  0  9  In a larger problem we would keep the bit vetors in a hash table. It would be  better to give the answer in terms of equivalene lasses, not permutations; indeed, this  problem has omparatively little to do with permutations.  111. In the direted graph with n!=2 verties a  : : : a  and n! ars a  : : : a  !  1  n cid:0 2  1  n cid:0 2  a  : : : a   one for eah permutation a  : : : a   , eah vertex has in-degree 2 and out-  2  n cid:0 1  1  n  degree 2. Furthermore, from paths like a  : : : a  ! a  : : : a  ! a  : : : a  !  1  n cid:0 2  2  n cid:0 1  3  n  a  : : : a  a  ! a  : : : a  a  a  !  cid:1   cid:1   cid:1  ! a  a  a  : : : a  , we an see that any vertex is  4  n  2  5  n  2  1  2  1  3  n cid:0 2  reahable from any other. Therefore an Eulerian trail exists by Theorem 2.3.4.2D, and  suh a trail learly is equivalent to a universal yle of permutations. The lexiograph-  ially smallest example when n = 4 is  123124132134214324314234 .  112. By exerise 2.3.4.2{22 it suÆes to ount the oriented trees rooted at 1 2 : : :  n cid:0 2 ,  in the digraph of the preeding answer; and those trees an be ounted by exerise  2.3.4.2{19. For n  cid:20  6 the numbers U  turn out to be tantalizingly simple: U  = 1,  n  2  U  = 3, U  = 2   cid:1  3, U  = 2   cid:1  3   cid:1  5  , U  = 2   cid:1  3   cid:1  5  .  Here we onsider  121323   3  4  5  6  7  33  8  3  190  49  33  to be the same yle as  213231 , but di cid:11 erent from  131232 .   Mark Cooke has disovered the following instrutive way to ompute these values  eÆiently: Notie  cid:12 rst that a universal yle of permutations is also equivalent to a  Hamiltonian yle on the Cayley graph with generators  cid:27  =  1 2 : : : n  and  cid:26  =   1 2 : : : n cid:0 1 . For example, the yle in the previous answer for n = 4 orresponds to  the yle  cid:27    cid:26    cid:27  cid:26   cid:27    cid:26    cid:27    cid:26   cid:27    cid:26    cid:27  cid:26   cid:27    cid:26 .  3  2  2  2  3  2  2  2  Now onsider the n!  cid:2  n! matrix M = 2I  cid:0  R  cid:0  S , where R  = [  cid:25   =  cid:25  cid:26  ℄ and  0   cid:25  cid:25   0  S  = [  cid:25   =  cid:25  cid:27  ℄. There is a matrix H suh that H  RH and H  SH eah have blok  0   cid:25  cid:25   0   cid:0    cid:0   diagonal form onsisting of k  opies of k   cid:2  k  matries R  and S  , for eah partition  cid:21    cid:21    cid:21    cid:21    cid:21    cid:21   of n, where k  is n! divided by the produt of the hook lengths of shape  cid:21   Theorem   cid:21   5.1.4H , and where R  and S  are matrix representations of  cid:26  and  cid:27  based on Young   cid:21    cid:21   tableaux. [A proof an be found in Brue Sagan, The Symmetri Group  Pai cid:12  Grove,  Calif.: Wadsworth & Brooks Cole, 1991 .℄ For example, when n = 3 we have  0  1  0  1  0  1  0 0 0 1 0 0  0 1 0 0 0 0  1 1  1  cid:0 1 1  0  B  C  B  C  B  C  0 0 0 0 0 1  0 0 1 0 0 0  1 1  cid:0 1 0  0  cid:0 1  B  C  B  C  B  C  B  C  B  C  B  C  0 0 0 0 1 0  1 0 0 0 0 0  1 1  0  1  cid:0 1 1  R =  ; S =  ; H =  ;  B  C  B  C  B  C  B  C  B  C  B  C  1 0 0 0 0 0  0 0 0 0 1 0  1  cid:0 1  cid:0 1 1  0  1    A    A    A  0 0 1 0 0 0  0 0 0 0 0 1  1  cid:0 1 1  0  1  cid:0 1  0 1 0 0 0 0  0 0 0 1 0 0  1  cid:0 1 0  cid:0 1  cid:0 1 0  57   58  ANSWERS TO EXERCISES  7.2.1.2  0  1  0  1  1 0 0 0 0 0  1 0 0 0 0 0  B  C  B  C  0  cid:0 1 0 0 0 0  0 1 0 0 0 0  B  C  B  C   cid:0    cid:0   B  C  B  C  0 0 0 1 0 0  0 0 0  cid:0 1 0 0  H  RH =  ;  H  SH =  B  C  B  C  B  C  B  C  0 0 1 0 0 0  0 0 1  cid:0 1 0 0    A    A  0 0 0 0 0 1  0 0 0 0 0  cid:0 1  0 0 0 0 1 0  0 0 0 0 1  cid:0 1  when rows and olumns are indexed by the respetive permutations 1,  cid:27  ,  cid:27   ,  cid:26 ,  cid:26  cid:27  ,  2  2   cid:26  cid:27   ; here k  = k  = 1 and k  = 2. Therefore the eigenvalues of M are the union,  3  111  21  over  cid:21 , of k  -fold repeated eigenvalues of the k   cid:2  k  matries 2I  cid:0  R   cid:0  S  . In the   cid:21    cid:21    cid:21    cid:21    cid:21   example, the eigenvalues of  0 ,  2 , and      twie are f0g, f2g, and f2; 3g twie.  2  0   cid:0 2  3  The eigenvalues of M are diretly related to those of the matrix A in exerise  2.3.4.2{19. Indeed, eah eigenvetor of A yields an eigenvetor of M , if we equate the  omponents for permutations  cid:25  and  cid:25  cid:26  cid:27   , beause rows  cid:25  and  cid:25  cid:26  cid:27   of R + S are   cid:0    cid:0   equal. For example,  0  1  0  1  0  1  0  1  2  cid:0 1  cid:0 1  1  1  1  A =   cid:0 1 2  cid:0 1  has eigenvetors  1  ;   cid:0 1  ;  0  for eigenvalues 0, 3, 3,    A    A    A    A   cid:0 1  cid:0 1 2  1  0   cid:0 1  yielding the eigenvetors  1; 1; 1; 1; 1; 1   ,  1;  cid:0 1; 0; 0;  cid:0 1; 1   ,  1; 0;  cid:0 1;  cid:0 1; 0; 1   of M  T  T  T  for the same eigenvalues. And M has n!=2 additional eigenvetors, with all omponents  zero exept those indexed by  cid:25  and  cid:25  cid:27    cid:26  for some  cid:25  , beause only rows  cid:25  cid:26   and  cid:25  cid:27    cid:0    cid:0    cid:0   of R + S have nonzero entries in olumns  cid:25  and  cid:25  cid:27    cid:26  ; suh vetors yield n!=2 additional   cid:0   eigenvalues, all equal to 2.  Therefore U  , whih is 2=n! times the produt of the nonzero eigenvalues of A,  n  1 cid:0 n!=2  is 2  =n! times the produt of the nonzero eigenvalues of M .  Unfortunately the small-prime-fator phenomenon does not ontinue; U  equals  7  1217  123  119  5  28  35  20  21  35  168  2  3  5  7  11  43  73  79  109  , and U  is divisible by 59229013196333  .  9  At least one of these yles must almost surely be easy to desribe and to  ompute, as we did for de Bruijn yles in Setion 7.2.1.1. But no simple onstrution  has yet been found.  58   INDEX AND GLOSSARY  When an index entry refers to a page ontaining a relevant exerise, see also the answer to  that exerise for further information. An answer page is not indexed here unless it refers to a  topi not inluded in the statement of the exerise.  0-origin indexing, 8.  Compton, Robert Christopher, 21, 32.  4-ube, 9{10.  Comtet, Louis, 54.  K cid:22 : see Kilomems.  Conjugate permutation, 12.  M cid:22 : see Megamems.  Conway, John Horton, 36.   cid:25   irle ratio , 27, 30, 36.  Cooke, Raymond Mark, 57.   cid:27 { cid:28  path, 20{21, 33.  Coroutine, 33.   cid:30  k  permutation, 12{13, 31.  Coupon olleting, 57.  Cryptarithms, 6.  Additive alphametis, 6{7, 14{15, 30.  Adjaent interhanges, 2{7, 31, 35, 54, 55.  Cyle struture of a permutation, 8, 12.  Akl, Selim George  Á¸« }ŽØ~ ÍÛÀ“ , 54.  Cyle, undireted, 28.  Alphametis, 6.  Cyli permutation, 35.  additive, 6{7, 14{15, 30.  Cyli shift, 18, 20, 23, 30.  doubly true, 29.  multipliative, 29.  de Bruijn, Niolaas Govert, yle, 37, 58.  pure, 7, 28{29.  Delta sequene, 31.  Alternating group, 5, 36.  Derangements, 35.  Analysis of algorithms, 26{31, 34{35.  Dijkstra, Edsger Wijbe, 4.  Applying a permutation, 8{10.  Direted torus, 34.  Arisawa, Makoto     , 43.  Doubly Gray ode, 32.  Arti cid:12 ial intelligene, 28.  Doubly true alphameti, 29.  Asents, 55.  Dual permutation generation, 17{19, 30.  Assignment problem, 26.  Dukworth, Rihard, iii, 4.  Automorphisms, 9{10, 28, 29.  Avann, Sherwin Parker, 53.  Dudeney, Henry Ernest, 6, 29, 43.  Balaned permutation, 36.  Barwell, Brian Robert, 29.  Beidler, John Anthony, 6.  Ehrlih, Gideon  JILX OERCB , 19, 32, 40, 41.  swap method, 19{20, 31{32.  Eigenvalues and eigenvetors, 58.  Bell ringing, 1, 4{5, 21.  Enggren, Willy, 28, 29.  Bernoulli, Jaques  = Jakob = James , 39.  Eppstein, David Arthur, 41.  Breish, Rihard Lewis, 42.  Er, Meng Chiau     , 16.  Brightwell, Graham Rihard, 53.  Erd}os, P cid:19 al  = Paul , 49.  Bruijn, Niolaas Govert de, yle, 37, 58.  Euler, Leonhard  E cid:26 ler cid:127 , Leonard cid:127   Bubble sort, 3.  =  cid:3  cid:26 ler, Leonard , summation  Bukley, Mihael R. W., 28.  formula, 43.  Bypassing bloks of permutations,  Eulerian trails in a direted graph, 57.  13{16, 30, 54.  Even permutation, 5, 36.  Cambridge Forty-Eight, 4, 5.  Exponential series, partial sums of, 39.  Can cid:12 eld, Earl Rodney, 53.  Extending a partial order, 24.  Exlusive or, 51.  Casting out nines, 43.  Cayley, Arthur, 20.  graphs, 20, 31{34, 48, 57.  Cesare, Giulio  pen name of Dani Ferrari,  Luigi Rafaiani, Luigi Morelli, and  Dario Uri , 42.  Chain, 35.  Fatorial number system, 38.  Fatorial ruler funtion, 30.  Ferrari, Dani, 59.  Fibonai, Leonardo, of Pisa, numbers,  36, 53.  Change ringing, 1, 4{5, 21.  First-element swaps, 19{20, 32.  Childs, Roy Sydney, 42.  Fisher, Ludwig Joseph, 39.  Colex order, 54; see also Reverse  Five-letter words, 28.  olex order.  Flip operation, 12{13, 31, 33, 36, 45.  Complete relation, 36.  Fraenkel, Aviezri S  LWPXT IXFRIA , 56.  59  59   60  INDEX AND GLOSSARY  Gallian, Joseph Anthony, 50.  Lexiographi permutation generation,  Galois,  Evariste, 9.  12, 15, 26{27.   cid:19   Gardner, Martin, 19, 27.  for involutions, 54.  General permutation generator, 10{13,  Lexiographi suessor, 2.  22{23, 29{30.  Linear embedding, 24.  Generating funtions, tehniques for  Linked lists, 15{16, 54.  using, 27, 39{40, 54.  Lipski, Witold, Jr., 44.  Goldstein, Alan Jay, 23.  Liskovets, Valery Anisimovih  Liskove,  Gonz cid:19 alez-Morris, Germ cid:19 an Antonio, 42.  Valeri cid:26  Anisimoviq , 32.  Grandsire Doubles, 5.  Loopless generation, 28, 41, 54.  Gray, Frank, binary ode, 3.  Gray ode for mathings, 53{54.  MaDonald, Peter S., 28.  Gray ode for mixed radies, 3, 40,  Mathings, 25, 35.  45, 49, 54.  Matrix tree theorem, 57.  Gray ode for permutations, 31{32, 53{55.  Maximal element, 52.  Gray ode for weak orders, 55{56.  MCravy, Edwin Parker, Jr., 28.  Group of permutations, 9{10, 20, 45.  MKay, Brendan Damien, 49.  h-ordered permutation, 35.  Hamilton, William Rowan, yle, 3,  20{21, 31{34, 48, 57.  path, 3, 20{21, 32{33, 47{48.  Megamem: One million memory aesses.  Minimal element, 52.  Mixed-radix number, 17, 27, 38.  MMIX omputer , ii, iv, 21{23, 34.  Hawaii, 28.  Modular Gray ode for mixed radies, 49.  Heap, Brian Rihard, 13, 15, 21, 30, 34, 41.  Monte Carlo estimates, 47.  Hexadeimal digits, 9, 57.  Mor, Moshe  XEN DYN , 55.  Hindenburg, Carl Friedrih, 2.  Morelli, Luigi, 59.  Hook lengths, 57.  Morris, Ernest, 4.  Hunter, James Alston Hope, 6.  Morris, Sot Anderson, 42.  Multinomial oeÆient, 27.  Identity permutation, 9.  Multipliation of permutations, 8.  Image of an element, 8.  Multipliative alphametis, 29.  Inlusion and exlusion, 54.  Multisets, 1, 3, 24, 27, 33.  Indeomposable permutation, 35.  Mundy, Peter, 4.  Internet, ii, iii.  MXOR  multiple exlusive-or , 34.  Inverse permutation, 24{25, 28, 52.  Myrvold, Wendy Joanne, 52.  Inversion tables, 3, 38, 53.  Inversions of a permutation, 3, 5.  n-ube, 9{10, 28.  Involutions, 35{36, 48, 53.  N cid:22 ar cid:22 ayan  a Pan  d  ita  nArAyZ pE cid:23 Xt , 2, 38.  .  .  .  Ives, Frederik Malolm, 30.  Nijenhuis, Albert, 20.  Jakson, Bradley Warren, 37.  Jiang, Ming     , 21.  Johnson, Allan William, Jr., 42.  Johnson, Selmer Martin, 28.  Nijon, Herman, 28.  Northeasterly knight's tour, 34.  NP-omplete problem, 41.  Nybble: A 4-bit quantity, 22{23.  Kahan, Steven Jay, 42.  Kemp, Rainer, 38.  Otahedral group, 41.  Odd permutation, 5, 47{48.  Kent Treble Bob Ma jor, 1.  Ord-Smith, Rihard Albert James  Kilomem: One thousand memory aesses.   = Jimmy , 12, 13, 18, 29, 30, 39.  Kl cid:127 ugel, Georg Simon, 13.  Order of a group element, 20, 45.  Knight's tour, northeasterly, 34.  Organ pipe order, 48, 55.  Knuth, Donald Ervin     , i, iv.  Kompel'makher, Vladimir Leont'evih  Pak, Igor Markovih  Pak, Igor~   Kompel~maher, Vladimir  Markoviq , 48.  Leont~eviq , 32.  Pan-digital puzzles, 29.  Krause, Karl Christian Friedrih, 39.  Parallel omputation, 34, 41.  Partial ordering, 24, 34, 35.  Langdon, Glen George, Jr., 19, 23, 34.  Partitions of a number, 29, 57.  Lehmer, Derrik Henry, 1.  Pezarski, Marin Piotr, 53.  Lexiographi order, 1, 8.  Pepperdine, Andrew Howard, 56.  60   INDEX AND GLOSSARY  61  Permutation generation, 1{37.  Reverse olex order, 8, 12, 15, 17, 26, 38.  yli shift method, 18, 20, 23, 30.  Reversing, 2, 38, 40, see also Flip operation.  dual, 17{19, 30.  Roman numerals, 42.  Ehrlih swap method, 19{20, 31{32.  Rosary permutations, 28, 48.  fastest, 21{24.  Rotem, Doron  MZEX OEXEC , 22, 25.  general, 10{13, 22{23, 29{30.  Rothe, Heinrih August, 38.  lexiographi, 12, 15, 26{27.  Roy, Mohit Kumar  Ûm;iht k m;r r;Y , 41.  lexiographi with restrited pre cid:12 xes,  R cid:127 udiger, Christian Friedrih, 2.  16, 30, 53.  Ruskey, Frank, 21, 34, 48, 49, 52, 53.  plain hanges, 4{7, 17, 23, 25,  27{28, 33, 55.  when to use, 26.  Permutations, 1{37.  applying, 8{10.  onjugate, 12.  yles of, 8, 12.  yli, 35.  derangements, 35.  even, 5, 36.  groups of, 9{10, 20, 45.  Gray odes for, 31{32, 53{55.  h-ordered, 35.  indeomposable, 35.  inverse, 24{25, 28, 52.  inversions of, 3, 5.  involutions, 35{36, 53.  multipliation of, 8.  notations for, 8.  odd, 5, 47{48.  of a multiset, 1{2, 24.  r-element, 27, 30.  Sagan, Brue Eli, 57.  Savage, Carla Diane, 48, 55.  Sayers, Dorothy Leigh, 1.  Sedgewik, Robert, 21.  Seitz, Rihard, 19.  Sign of a permutation, 5, 33.  Signature of an alphameti, 6.  Signed permutation, 28.  Silver, Alfred Lindsey Leigh, 46.  Sims, Charles CoÆn, 9.  tables, 9{15, 17{18, 29{30.  Skipping bloks of permutations,  13{16, 30, 54.  Stanford GraphBase, ii, iii.  Star graph, 32.  Star transpositions, 19{20, 32.  Stedman, Fabian, 4.  Doubles, 5.  Steger, Angelika, 53.  Swapping with the  cid:12 rst element, 19{20, 32.  Symmetries, 9{10, 28, 29.  rank of, 27, 34, 52.  Tableaux, 24{25, 57.  sign of, 5, 33.  Thuente, Maurie, 47.  signed, 28.  Ti-ta-toe board, 29.  universal yle of, 37.  Tompkins, Charles Brown, 19.  up-down, 35.  Topologial sorting, 24{26, 34{35.  well-balaned, 36.  Topswops, 36.  Pfa cid:11 , Johann Friedrih, 54.  Torus, 9.  Phillips, John Patrik Norman, 38.  direted, 34.  Pi   cid:25  , 27, 30, 36.  twisted, 32.  Plain hanges, 4{7, 17, 23, 25, 27{28, 33, 55.  Total ordering, 24.  Pleszzy cid:19 nski, Stefan, 52.  Transitive relation, 34, 36.  Postmultipliation, 9.  Transposing adjaent elements, 2{7,  Preferential arrangements, 55.  31, 35, 54, 55.  Premultipliation, 9, 11{12, 14, 54.  Traveling salesrep problem, 26.  Preorder in a tree, 11, 14.  Trotter, Hale Freeman, 5.  Pr cid:127 omel, Hans J cid:127 urgen, 53.  Trotter, William Thomas, 49.  Pruesse, Gara, 53.  Twisted torus, 32.  Pure alphametis, 7, 28{29.  Two-line form of permutation, 8.  Queue, 52.  Undoing, 16, 54.  Undireted yle, 28.  Radoi cid:20 i cid:19 , Rado cid:20 s, 48.  Rafaiani, Luigi, 59.  Ranking a permutation, 27, 34, 52.  Rankin, Robert Alexander, 20, 33, 49.  Universal yle of permutations, 37.  Unranking a permutation, 27, 34, 52.  Up-down permutation, 35.  Uri, Dario, 59.  Rapoport, Elvira Strasser, 48.  Variations, 27, 30, 43, 52.  Re cid:13 eted Gray ode for mixed radies,  Varol, Yaakov Leon  LEXE OEL AWRI , 22, 25.  3, 40, 45, 54.  Vatriquant, Simon, 6.  Reversal of a string, 31, 36.  Vinniombe, Robert Ian James, 28.  61   62  INDEX AND GLOSSARY  Walsh, Timothy Robert Stephen, 54, 55.  Williamson, Stanley Gill, 21, 32, 53.  Wayne, Alan, 29.  Wilson, Wilfrid George, 5.  Weak orders, 36.  Wells, Mark Brimhall, 44.  Well-balaned permutation, 36.  XOR  bitwise exlusive-or , 51.  Weston, Andrew, 21.  Yoshigahara, Nobuyuki  = Nob   White, Arthur Thomas, II, 5.      , 29, 42.  Wilf, Herbert Saul, 20, 56.  Young, Alfred, tableaux, 24{25, 57.  62
@highlightArt of Computer Programming, Volume 4, Fascicle 2, The: Generating All Tuples and Permutations: Generating All Tuples and Permutations. This multivolume work on the analysis of algorithms has long been recognized as the definitive description of classical computer science. The three complete volumes published to date already comprise a unique and invaluable resource in programming theory and practice. Countless readers have spoken about the profound personal influence of Knuth's writings. Scientists have marveled at the beauty and elegance of his analysis, while practicing programmers have successfully applied his "cookbook" solutions to their day-to-day problems. All have admired Knuth for the breadth, clarity, accuracy, and good humor found in his books. To begin the fourth and later volumes of the set, and to update parts of the existing three, Knuth has created a series of small books called fascicles, which will be published t regular intervals. Each fascicle will encompass a section or more of wholly new or evised material. Ultimately, the content of these fascicles will be rolled up into the comprehensive, final versions of each volume, and the enormous undertaking that began in 1962 will be complete.