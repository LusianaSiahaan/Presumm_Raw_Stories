JavaScript by Example   Second Edition    JavaScript by Example   Second Edition   Ellie Quigley   P R E N T I CE   H A LL   Upper Saddle River,  NJ   Boston   Indianapolis   San Francisco   New York   Toronto  Montreal   London  Munich   Paris  Madrid   Capetown   Sydney   Tokyo   Singapore  Mexico  City    Editor-in-Chief  Mark  L.  Taub   Managing  Editor  John  Fuller   Full-Service  Production  Manager  Julie B.  Nahll   Production  Editor  Dmitri  Korzh  Techne  Group   C o py   Editor  Teresa  Horton   Indexer  Potomac  Indexing,  LLC   Proofreader  Beth  Roberts   Editorial  Assistant  Kim  Boedlghelmer   Cover  Designer  Anne  Jones   Composition  Techne  Group   Many of the  designations  used  by  manufacturers  and  sellers  to  distinguish  their  products  are  claimed  as  trademarks.  Where  those  designations  appear  in  this  book,  and  the  publisher was  aware  of a  trademark  claim,  the  designations  have  been printed  with  initial  capital  letters  or  in  all  capitals.   The  author and  publisher  have  taken  care  in  the  preparation  of this  book,  but make  no  expressed  or  implied  warranty  of any  kind  and  assume  no  responsibility for  errors  or  omissions.  No  liability is  assumed  for  incidental  or  consequential  damages  in  connection  with  or  arising  out  of the  use  of the  information  or  programs  contained  herein.   The  publisher  offers  excellent discounts  on  this  book  when  ordered  in  quantity  for  bulk  purchases  or  special  sales,  which  may  include  electronic  versions  and or  custom  covers  and  content particular  to  your  business,  training goals,  marketing  focus,  and  branding  interests.  For  more  information,  please  contact:   U.S.  Corporate  and  Government  Sales   800   382-3419   corpsales@pearsontechgroup.com   For  sales  outside  the United  States,  please  contact:   International  Sales  international@pearson.com   Visit  us  on  the  Web:  informit.com ph   Library   of  Congress  Cataloging-in-Publication  Data   Quigley,  Ellie.  JavaScript by  example   Ellie  Quigley.—2nd  ed.   p.  cm.   Includes  index.  ISBN  978-0-13-705489-3   pbk.  :  alk.  paper   1.  JavaScript   Computer  program  language   I.  Title.  QA76.73.J39Q54  2010  005.133—dc22   2010020402   Copyright     2011  Pearson  Education,  Inc.  All  rights  reserved.  Printed  in  the  United  States  of America.  This  publication  is  protected  by copyright,  and  permission  must be  obtained  from  the  publisher  prior  to  any prohibited reproduction, storage in a  retrieval  system,  or transmission in any form  or  by any means,  electronic,  mechanical,  photocopying,  recording,  or  likewise.  For  information  regarding  permissions,  write  to:   Pearson  Education,  Inc.  Rights  and  Contracts  Department  501  Boylston  Street,  Suite  900  Boston,  MA  02116  Fax:   617   671-3447   ISBN-13:  978-0-13-705489-3  ISBN-10:  0-13-705489-0  Text printed in the United States on recycled paper at Edwards Brothers in Ann Arbor,  Michigan.  First  printing,  October  2010    Contents   Preface   xv   1   1   Introduction to JavaScript  1.1  What JavaScript  Is  1  1.2  What JavaScript  Is  Not  1.3  What JavaScript  Is  Used  For  1.4   2   3   JavaScript and  Its  Place  in  a Web  Page  1.4.1   Analysis  of the  Diagram   4   4   1.5  What  Is  Ajax?  1.6  What JavaScript  Looks  Like  1.7   5   JavaScript and  Its  Role  in  Web  Development  1.7.1  JavaScript and  Events   The  Three  Layers  10   1.8  1.9  Standardizing JavaScript  and  the  W3C   12   8   7   8   1.9.1  1.9.2   JavaScript  Objects  The  Document  Object Model   13   13   1.10  What  Browser?   15   1.10.1  Versions  of JavaScript  1.10.2  Does  Your  Browser  Follow  the  Standard?  1.10.3   Is JavaScript  Enabled  on  Your  Browser?   16   1.11  Where  to  Put JavaScript   20   1.11.1   JavaScript  from  External  Files   22   1.12  Validating Your  Markup   24   1.12.1  The  W3C  Validation  Tool  24  1.12.2  The  Validome  Validation  Tool   25   1.13  What You  Should  Know   26    2  Script Setup   29   2.1  The  HTML  Document  and JavaScript   29   2.1.1   Script Execution   30   2.2  Syntactical  Details   33   33  Case  Sensitivity  Free  Form  and  Reserved  Words  Statements  and  Semicolons  34  Comments  35  The     Tag   35   33   2.3  Generating  HTML  and  Printing  Output   37   Strings  and  String  Concatenation  The  write0  and  writelnQ  Methods   37  38   2.2.1  2.2.2  2.2.3  2.2.4  2.2.5   2.3.1  2.3.2   2.4.1   2.4  About  Debugging   40  Types  of Errors   40   2.5  Debugging  Tools   41   41   Firefox  2.5.1  Debugging  in  Internet  Explorer  8  2.5.2  The JavaScript:  URL  Protocol  2.5.3  46  JavaScript and  Old  or  Disabled  Browsers  2.6.1   47  Hiding JavaScript  from  Old Browsers   44   47   2.6   2.7  What You  Should  Know   50   3.1  Data  Types   53   3.1.1  3.1.2   Primitive  Data Types  Composite  Data  Types   53   59   3.2  Variables   59   3.2.1  3.2.2  3.2.3  3.2.4  3.2.5   60   Valid  Names  Declaring  and  Initializing Variables  60  Dynamically  or  Loosely Typed  Language  Scope  of Variables  Concatenation  and  Variables   66   66   62   67   3.3  Constants  3.4  Bugs  to  Watch  For  69  3.5  What You  Should  Know   70   4  Dialog Boxes   73   4.1   A   73   Interacting with  the  User  4.1.1  4.1.2  4.1.3  n rl   The  alertO  Method  The  prompt     Method  The  confirm    Method  OA   1 J   r 1   7   73   76  78   3  The Building Blocks: Data Types, Literals, and Variables   53    Operators  5.1  About JavaScript  Operators  and  Expressions   83   83   5.1.1  5.1.2   Assignment  Precedence  and  Associativity   84   84   5.2  Types  of Operators   88   5.2.1  5.2.2  5.2.3  5.2.4  5.2.5  5.2.6  5.2.7  5.2.8   5.3.1  5.3.2  5.3.3   88   90   Arithmetic  Operators  Shortcut Assignment  Operators  Autoincrement  and  Autodecrement  Operators  Concatenation  Operator  Comparison  Operators  Logical  Operators  101  The  Conditional  Operator  Bitwise  Operators   108   109   94   95   91   5.3  Number,  String,  or  Boolean?  Data Type  Conversion   112   The  parselntO  Function  The  parseFloat    Function  The  evalO  Function  118   114   116   5.4  Special  Operators  119  5.5  What You  Should  Know   120   123   123   123  124   Under Certain Conditions  6.1  Control  Structures,  Blocks,  and  Compound  Statements  6.2  Conditionals  if else  if else  if  switch  131  The  while  Loop  The  do while  Loop  The for  Loop  The for in  Loop  Loop  Control  with  break  and  continue  Nested  Loops  and  Labels   6.2.1  6.2.2  6.2.3  6.3  Loops  6.3.1  6.3.2  6.3.3  6.3.4  6.3.5  6.3.6   127  128   134   136   135   137   131   133   6.4  What You  Should  Know   140   143  Functions  7.1  What  Is  a  Function?   143   7.1.1  7.1.2  7.1.3  7.1.4  7.1.5  7.1.6   153   Function  Declaration  and  Invocation  Return  Values  Anonymous  Functions  as  Variables  Closures  Recursion  Functions Are  Objects   158  161   166   144   156    7.2  Debugging  Techniques   166   7.2.1  7.2.2   Function  Syntax  Exception  Handling  with  try catch  and  throw   166   168   7.3  What You  Should  Know   172   8  Objects   175   8.1  What Are  Objects?   175   8.1.1  8.1.2  8.1.3  8.1.4  Methods  of the  Object   Objects  and  the  Dot  Syntax  Creating  an  Object with  a  Constructor  Properties  of the  Object   180  8.2  Classes  and  User-Defined  Functions   182   178   176   177   8.2.1  What Is  a  Class?  8.2.2  What  Is  thisl  8.2.3   182   182   Inline  Functions  as  Methods   185   187  8.3  Object  Literals  8.4  Manipulating  Objects   191   The  with  Keyword  The for in  Loop   194   191   8.5  Extending  Objects  with  Prototypes   196   Adding Properties with  the  Prototype  Property  The  Prototype  Lookup  Chain  Adding Methods  with  Prototype  202  Properties  and  Methods  of All  Objects  Creating  Subclasses  and  Inheritance   204   207   199   198   8.4.1  8.4.2   8.5.1  8.5.2  8.5.3  8.5.4  8.5.5   8.6  What You  Should  Know   210   9   JavaScript Core Objects  9.1  What Are  Core  Objects?  9.2  Array  Objects   213   213   213   9.2.1  9.2.2  9.2.3  9.2.4   Declaring  and  Populating Arrays  Array  Object  Properties  Associative  Arrays  221  Nested Arrays  227   219   223   9.3  Array  Methods  9.4  The  Date  Object   234   214   Using  the  Date  Object  Methods   9.4.1  9.4.2  Manipulating  the  Date  and  Time  9.4.3   235  238   Customizing  the  Date  Object  with  the  prototype  Property   240   9.5  The  Math  Object   241   9.5.1  9.5.2   Rounding Up  and  Rounding  Down  Generating  Random  Numbers  245   244    9.5.3  Wrapper  Objects   String,  Number,  Function,  Boolean   9.5.4  9.5.5  9.5.6  9.5.7  9.5.8   The  String  Object  The  Number  Object  The  Boolean  Object  The  Function  Object  The  with  Keyword  Revisited   259  263  264   266   247   246   9.6  What You  Should  Know   267   10  It's the BOM! Browser Objects   271   10.1  JavaScript  and  the  Browser  Object  Model  10.1.1  Working  with  the  navigator  Object  10.1.2  Working  with  the  window  Object  10.1.3  Creating  Timed  Events  10.1.4  Working with  Frames  10.1.5  The  location  Object  10.1.6  The  history  Object  10.1.7  The  screen  Object  10.2  What You  Should  Know   315  319  322   292  303   325   271  273   285   11  Working with Forms and Input Devices   11.1  The  Document  Object Model  and  the  Legacy  DOM  0  11.2  The JavaScript  Hierarchy   328   327  327   11.2.1   The  Document Itself   329   11.3  About  HTML  Forms   334   11.3.1  Attributes  of the     Tag  341   11.4  JavaScript  and  the form  Object   334   11.4.1  Naming Forms  and  Input Types   Controls   for  Forms  11.4.2  The  Legacy DOM  with  Forms  11.4.3  Naming Forms  and Buttons  11.4.4  11.4.5  The  this  Keyword  11.4.6  The  submit    and  reset    Methods  11.5  Programming  Input  Devices   Controls    Submitting  Fillout Forms   372   356   365   368   350   345   342   11.5.1   Simple  Form  Validation   401   11.6  What You  Should  Know   409   12  Working with Images  and Links    413   12.1  Introduction  to  Images   413   12.1.1  HTML  Review  of Images  12.1.2  The JavaScript  image  Object   414   416   12.2  Reviewing  Links   417   12.2.1   The JavaScript  links  Object   418    12.3  Working with  Imagemaps   422   12.3.1  Replacing  Images  Dynamically with  the  src  Property  12.3.2  Preloading  Images  and  the  Image    Constructor  12.3.3  Randomly  Displaying  Images  and  the  onClick  Event  12.3.4  Links with  an  Image  Map  and JavaScript   436   432   428   434   12.4  Resizing  an  Image  to  Fit  the Window  12.5  Introduction  to  Slideshows   441   438   12.5.1  A  Simple  Slideshow with  Controls  12.5.2  A  Clickable  Image  Slideshow  445   442   12.6  Animation  and  Timers   449   12.6.1  Changing  Image  Position  12.6.2  Changing  Image  Height  and  Width  Properties   450   451   12.7  What You  Should  Know   452   455   Handling Events  455  13.1  Introduction  to  Event  Handlers  13.2  The  Inline  Model  for  Handling  Events  13.2.1  HTML  and  the  Event Handler  13.2.2  Setting Up  an  Event Handler  13.2.3  Return  Values  13.2.4   461   455  456  459   13.3  Handling  a Window  or  Frame  Event   465   JavaScript  Object Methods  and  Events   462   13.3.1  The  onLoad  and  onUnLoad  Events  465  13.3.2  The  onFocus  and  onBlur  Event  Handlers  13.3.3  The  onResize  Event  Handler   472   468   13.4  Handling  Mouse  Events   474   13.4.1  How  to  Use  Mouse  Events  13.4.2  Mouse  Events  and  Images—Rollovers  13.4.3  Creating  a  Slideshow with  Mouse  Events   475   477   478   13.5  Handling  Link  Events   481   13.5.1   JavaScript URLs  13.6  Handling  a  Form  Event   481  482   483   this  for  Forms  and  this  for Buttons   13.6.1  Buttons  13.6.2  13.6.3  Forms  and  the  onClick  Event  Handler  13.6.4  Forms  and  the  onFocus  and  onBlur  Event  Handlers  13.6.5  Forms  and  the  onChange  Event  Handler  13.6.6  Forms  and  the  onSuhmit  Event  Handler  13.6.7  HTML  Event  Handlers  and JavaScript Event  Methods  13.6.8  The  onError  Event   489  491   484   498   486   487   496   13.7  The  event  Object   499   13.7.1  Capturing  and  Bubbling   Trickle  Down  and Bubble  Up   13.7.2  Event  Object  Properties   501   500    13.7.3  Using  Event  Object Properties  13.7.4  Passing Events  to  a JavaScript Function  13.7.5  Mouse  Positions  13.7.6  Key Events  513   508   503   505   13.8  The  Scripting Model  for  Handling  Events  13.8.1  Getting a  Reference  to  the  Object   517  517   13.9  What You  Should  Know   523   Introduction to CSS  Cascading Style Sheets  with  JavaScript  14.1  What  Is  CSS?  14.2  What  Is  a  Style  Sheet?   527  527   527   14.2.1  What Is  a  CSS-Enhanced Browser?  14.2.2  How Does  a  Style  Sheet Work?   529   528   14.3  CSS  Program  Structure   530   14.3.1  Comments  14.3.2  Grouping   530  531   14.4  Common  Style  Sheet  Properties   532   14.4.1  Units  of Measurement  14.4.2  Working with  Colors  14.4.3  Working with  Fonts  14.4.4  Working with  Text  14.4.5  Working with  Backgrounds  and  Images  14.4.6  Working with  Margins  and Borders   535  536  539  542   547   544   14.5  Types  of Style  Sheets   550   14.5.1  The  Embedded  Style  Sheet  and  the     Tag  14.5.2  The  Inline  Style  and  the     Attribute  553   550   14.6  The  External  Type with  a  Link   555   14.6.1  The     Tag  14.6.2   Importing with  @import   555   557   14.7  Creating a  Style  Class   558   Styling  a  Simple  Table  with  Class   14.7.1  14.7.2  Using  a  Specific  Class  Selector  14.8  The  ID  Selector and  the  ID  Attribute  14.9  Overriding  or  Adding  a  Style  with  the     Tag   562  564   560   566   14.9.1  The     Tag  and  the  style Attribute  14.9.2  The     Tag  and  the  class  Attribute  14.9.3  Inheritance  and  Contextual  Selectors   567  568   569   14.10  Positioning  Elements  and  Layers  573  579  580   14.10.1  Absolute  Positioning  14.10.2  The     Container  14.10.3  Absolute  Positioning   572    14.10.4  Relative  Positioning  14.10.5  The  z-index  and  Three  Dimensions   581   583   585   14.11  Where  Does JavaScript  Fit  In?  585   14.11.1  What Is  DHTML?  14.11.2  How JavaScript Views  Style  Sheets  14.11.3  The  style  Object  589  14.11.4  The  className  Property  14.11.5  Drop-Down  Menus  and  Tooltips   598   14.12  What You  Should  Know   609   585   601   15  The W3C DOM and JavaScript   611   15.1  The  W3C  DOM  15.2  How  the  DOM  Works  with  Nodes  15.3  Nodes   613   611   612   615   Siblings   15.3.1  Parents  and  Children  15.3.2  15.3.3  The  nodeName  and  nodeType  Properties  15.3.4  The  Whitespace  Bug  618   616   617   15.4  Walking with  the  DOM  15.5  DOM  Inspectors  621  15.6  Methods  to  Shorten  the  DOM  Walk   622   616   15.6.1  The  document.getElementByldO  Method  622  15.6.2  The  document.getElementsByTagName    Method  15.6.3   JavaScript  Properties  to  Represent  HTML Attributes   627  15.7  Modifying  the  DOM   Appending,  Copying,  and  Removing Nodes   630   625   629   Inserting Before  a  Node   15.7.1  The  innerHTML  Property  and  the  Element's  Content  15.7.2  Modifying  the  Content  of an  Element  15.7.3  Creating  New Elements with  the  DOM  15.7.4  636  15.7.5  Creating Attributes  for  Nodes  15.7.6  DOM  Review:  Creating  a Blog  15.7.7  Creating  a Table with  the  DOM  15.7.8  Cloning  Nodes  15.7.9  Removing  a  Node  653  15.7.10  Scrolling with  the  Nodes   632  634   637  639   644   658   648   15.8  Event  Handling and  the  DOM  15.8.1  The  HTML  Inline  Way  15.8.2  The  Scripting Way  15.8.3  The  DOM  Way  15.8.4  Bubbling  and  Capturing   662  15.9  Event  Listeners  with  the  W3C  Model   661  661   662   661   668   15.9.1  Adding an  Event  15.9.2  Registering More  Than  One  Event   668   670    15.9.3  Removing  an  EventListener  15.9.4  Event  Listeners  with  Microsoft Internet  Explorer  15.9.5  Event  Properties  Revisited   678   673   676   15.10  Unobtrusive JavaScript   682   15.10.1  JavaScript Libraries   689   15.11  What You  Should  Know   690   16  Cookies   695   16.1  What Are  Cookies?   695   16.1.1  Cookie  Ingredients  698  16.1.2  The Attributes  of a  Cookie  16.2  Creating  a  Cookie  with JavaScript  701   699  701   16.2.1  The  Cookie  Object  16.2.2  Assigning  Cookie  Attributes  16.2.3  Let's  Make  Cookies!  16.2.4  Retrieving  Cookies  from  a  Server  16.2.5  Deleting  a  Cookie  16.2.6  Using  the  Browser  to  Remove  Cookies   704   702   710   708   16.3  What You  Should  Know   714   713   17  Regular Expressions and Pattern Matching   717   17.1  What  Is  a  Regular  Expression?  17.2  Creating  a  Regular  Expression  719   17.2.1  The  Literal  Way  17.2.2  The  Constructor  Method  17.2.3  Testing  the  Expression  17.2.4  Properties  of the  RegExp  Object   720   721   717  719   724   17.3  String  Methods  Using  Regular  Expressions   727   17.3.1  The  match    Method  17.3.2  The  searchQ  Method  17.3.3  The  replaced  Method  17.3.4  The  split    Method   727  729  730   731   733   17.4  Getting  Control—The  Metacharacters  736   17.4.1  The  Dot  Metacharacter  17.4.2  The  Character  Class  17.4.3  Metasymbols  741  17.4.4  Metacharacters  to  Repeat Pattern  Matches  17.4.5  Anchoring Metacharacters  17.4.6  Alternation   754   738   759   17.5  Form  Validation  with  Regular  Expressions   765   17.5.1  Checking  for  Empty Fields  765  17.5.2  Checking  for  Numeric  Zip  Codes  17.5.3  Checking  for Alphabetic  Data   769   767   745    771   17.5.4  Removing  Extraneous  Characters  17.5.5  Checking  for  Valid  Social  Security  Numbers  17.5.6  Checking  for  Valid  Phone  Numbers  17.5.7  Checking  for  Valid  E-Mail Addresses  17.5.8  Credit  Card  Validation  17.5.9  Putting It All  Together  795   777  781   783  791   17.6  What You  Should  Know   775   18  An Introduction to Ajax  with JSON    797   797   18.1  Why  Ajax?  18.2  Why  Is  Ajax  Covered  Last?  18.3  The  Steps  for  Creating Ajax  Communication   798   799   Step  1:  Create  the  XMLHttpRequest  Object  Step  2:  Initializing  the  Object  Sending  the  Request  to  the  Server  Step  3:  Monitoring  the  State  of the  Server  Response   18.3.1  18.3.2  18.3.3  18.3.4  18.3.5  Handling  the  Response  with  a  Callback Function  18.3.6  The Browser  Cache  Issue   810   803   800   805   806   808   18.4  Putting  It  All  Together   812   18.4.1  Using Ajax  to  Retrieve  Text  from  a File  18.4.2  Using Ajax  to  Retrieve  XML  from  a File  18.4.3  Ajax  and  Forms   826   819  822   18.5  Ajax  and JSON   834   JSON  Data  Structures  Steps  to  Use JSON   18.5.1  18.5.2  18.5.3  Putting  It All  Together  with JSON  Solving  the  eval    Security  Problem  18.5.4   836   835   839  843   18.6  Debugging  Ajax  with  Firebug   848   18.6.1  Basic Instructions  for  Using Firefox  18.6.2  What You  Should  Know   852   851   Index  855    Preface   This  second  edition  of JavaScript by  Example is really more  than  a new  edition;  it is  a new  book!  So  much has  changed since  the  first edition in  2002,  and now with the newfound  popularity  of Ajax,  JavaScript  is  on  a  roll!  Almost  every  personal  computer  has Java- Script installed  and  running and  it is  the  most popular Web  scripting language  around,  although  it  comes  under  different  aliases,  including  Mocha,  LiveScript,  JScript,  and  ECMAScript.  There  are  a  lot  of books  out  there  dedicated  to  some  aspect  of  the Java- Script language  and  if you  are  new to JavaScript,  it would  be  difficult  to  know where  to  start.  This book is a  "one size fits  all"  edition,  dedicated to  those  of you who need a bal- ance  between  the  technical  side  of  the  language  and  the  fun  elements,  a  book  that  addresses  cross-platform  issues,  and  a  book  that  doesn't  expect  that  you  are  already  a  guru before you start.  This edition  explains how the language works from  the most basic  examples to  the more complex, in  a progression that seemlessly leads you from  example  to  example  until  you  have  mastered  the  basics  all  the  way  to  the  more  advanced  topics  such  as  CSS,  the  DOM,  and Ajax.   Because  I  am  a  teacher  first,  I  found  that  using  my  first  edition  worked  well  in  the  classroom,  but  I  needed  more  and  better  examples  to  get  the  results  I  was  looking  for.  Many  of my  students  have  been  designers  but  not  programmers,  or  programmers  who  don't understand  design.  I  needed  a text that would  accommodate both without leaving  either group bored or overwhelmed.  This huge effort to modernize the first edition went  way beyond where  I  had  expected  or  imagined.  I  have  learned much  and  hope  that you  will  enjoy sharing my  efforts  to  make  this  a  fun  and  thorough  coverage  of a universally  popular  and  important Web  programming  language.    Acknowledgments   Many thanks go to the folks at Prentice Hall:  Mark L.  Taub, editor-in-chief, and the most  supportive  person  I  know;  Julie  Nahil,  Full-Service  Production  Manager;  John  Fuller,  Managing Editor;  and Ann Jones,  Cover Designer.  Thanks also to Dmitri Korzh, Produc- tion  Editor  at Techne  Group.  Finally,  a special  thank you  to  Thomas Bishop who  spent  hours  reviewing  and  sending  constructive  criticism  that greatly improved  the  quality  of  the  book;  to Brendon  Crawford  for  reviewing  the  manuscript;  and  to  Elizabeth  Triplett  for  her  artwork to  give  the  chapters  a  cheerful  beginning.   Ellie  Quigley  2010   September,    Introduction to  JavaScript   1.1  What JavaScript Is   JavaScript is a popular general-purpose scripting language used to put energy and pizzaz  into  otherwise  dead Web pages by allowing a page  to interact with users and respond  to  events  that occur  on  the page. JavaScript has  been  described  as  the  glue  that holds Web  pages  together.1  It would  be  a  hard  task  to  find  a  commercial  Web  page,  or  almost  any  Web  page,  that  does  not  contain  some JavaScript  code   see  Figure  1.1 .   JavaScript,  originally  called  LiveScript,  was  developed  by  Brendan  Eich  at  Netscape  in  1995  and  was  shipped  with  Netscape  Navigator  2.0  beta  releases.  JavaScript  is  a  scripting  language  that  gives  life,  hence  LiveScript,  to  otherwise  static  HTML  pages.  It  runs on most platforms and is hardware independent. JavaScript is a client-side language  designed to work in the browser on your computer, not the server.  It is built directly into  the  browser   although  not  restricted  to  browsers ,  Microsoft  Internet  Explorer  and  Mozilla  Firefox being  the  most  common  browsers.  In  syntax, JavaScript is  similar  to  C,  Perl,  and Java;  for  example,  ¡ statements  and  while  and for  loops  are  almost  identical.  Like  Perl,  it is  an  interpreted  language,  not  a  compiled  language.   Because JavaScript  is  associated  with  a  browser,  it  is  tightly  integrated  with  HTML.  Whereas  HTML  is  handled  in  the  browser  by  its  own  networking  library  and  graphics  renderer,  JavaScript  programs  are  executed  by  a  JavaScript  interpreter  built  into  the  browser. When the browser requests such a page, the server sends the full content of the  document,  including  HTML  and JavaScript  statements,  over  the  network  to  the  client.  When  the  page loads,  HTML  content is read  and rendered line  by line until  a JavaScript  opening tag is read, at which time the JavaScript interpreter takes over. When the closing  JavaScript  tag  is  reached,  the  HTML  processing  continues.   1.  But  the  creator  of JavaScript,  Brendan  Eich,  says  it's  even  more!  fn  his  article,  "Innovators  of the  Net:   Brendan  Eich  and JavaScript,"  he  says,  "CallingJavaScript 'the  glue  that holds  web  pages  together  is  short  and  easy  to  use,  but doesn't do justice  to  what's  going on.  Glue  sets  and  hardens,  but JavaScript is  more  dynamic  than  glue.  It can  create  a  reaction  and  make  things  keep  going,  like  a  catalyst."    JavaScript handled  by  a  browser  is  called  client-side JavaScript.  Although JavaScript  is  used  mainly  as  a  client-side  scripting language,  it  can  also  be  used  in  contexts  other  than a Web browser.  Netscape created server-side JavaScript to be programmed as a CGI  language, such as Python or Perl, but this book will address JavaScript as it is most com- monly used—running  on  the  client side, your  browser.   and  learn.   P E A R S ON   Isl   1  About  U*   I  Community   P r ws    Shop   What's New  What's New   1 We help educotort urWtrifar-d the funding opportunifie  lliafart  {Woilablsl   ARRA7 A  for  ARRA7 A *  Pearson  rlafcis  Sehoefc Tap into   StiitvjLs "urdfi at  wviw tuiidip gforschoob.com   $  finding.   IT,-   ,        D   Pearson Responds to Secretary of Educalbn's Cat for tJontcufcy of  l.enrrrq' ri iveri  H1N1  Outbreak  AigoOraPrcp App Now Avaiaban or App Swre  Pearson  introduces Updalod Verslor of Award-Vrtnr<g NovaNET  Onhm System Version 1T 0 Includes Now U B. H»tory Course  Aj cO to Stale Standards  Pearson's Now, Innovative K-12 Watn Frograms tor FtorBa Pbco  fools tor foacflPjj 'Hex: Gerara:on Sunshine Stale Standards' m  Educators' Fhgcrips   Independent Scwnifc Research Studios  Johnson Schoo  a: Oerrel i urbwaty to Recogntzo Pearson's Now  Stale-ot-1ho-Art Measure of Ergtah Language Ablty  Pearson Acquires  irtaNoro.  Ire.. Expanding c-apabMles tor  Development of Persorateod Learning Software  Pearson's  rntormT Dodu:s  Two  New VWoo  Podcaa"  Channels:  OnHomeardCHltee ard Quo en Demand   Solutions  That Work   Pnrsonaineü Learrrg: The Neaus of ¡MstCeniury  Learrrg and  Educatbral Techrobges  PDF I   '     Shoring  msght op How Assessment Moves Sludent Progress  IPDF1  Pearson's Cologe Readr-ess Issue Paper Ou:lnes Chalbege, Points  ''  to Research-Based Solutions IPDFI   *  Pearson's Learning Teams Shows Teatnors tne Patu to Improved   Student Achievement  Research Study  Finds   *  Department of Educators wna: Works Ctearlnghouae Gbos  Top   Grades iO Pearson's SoccassMaker Enterprise   Pearson  Foundation   *  Pearson Foundatior Donates S^  Milon *or Teacher Trarrg al  Mann! Aeacemy Foundatior s  Pubic High Schoo  Aeadnrnns  Pearson Fotjndaüor Underwrites Natonai Tour ot Rare Copy of  I :   ,- -lt:.-.r  :- - lr   - f - If^ - -  Figure  1.1  A dynamic Web page using JavaScript to give it life.  For example, if the  user rolls the  mouse over any of the  text after the  arrows,  the  text will  become  underscored  links for  navigation.   What JavaScript  Is  Not  JavaScript  is  not Java.  "Java  is  to JavaScript  what  Car  is  to  Carpet"2  Well,  that  quote  might be  a little  extreme, but suggests  that these  are  two very different languages.  Java  was  developed  at  Sun  Microsystems.  JavaScript  was  developed  at  Netscape.  Java  applications can be independent of a Web page, whereas JavaScript programs are embed- ded in a Web  page  and must be run in a browser window.3 Java is  a strongly typed lan- guage  with  strict  guidelines,  whereas JavaScript  is  loosely  typed  and  flexible.  Java  data   2.   From  a  discussion  group  on  Usenet,  also  p.  4  Beginning JavaScript  with  DOM  Scripting  and  Ajax  by  Christian  Heilmann,  APRESS,  2006.    types  must  be  declared.  JavaScript  types  such  as  variables,  parameters,  and  function  return  types  do  not  have  to  be  declared.  Java  programs  are  compiled.  JavaScript  pro- grams  are  interpreted  by a JavaScript  engine  that lives  in  the  browser.   JavaScript  is  not  HTML,  but JavaScript  code  can  be  embedded  in  an  HTML  docu- ment  and  is  contained  within  HTML  tags.  JavaScript  has  its  own  syntax  rules  and  expects  statements  to  be  written  in  a  certain  way.  JavaScript  doesn't  understand  HTML,  but it  can  contain  HTML  content within  its  statements.  All  of this will  become  clear  as  we  proceed.   JavaScript is not used  to read  or write  the  files  on  client machines with  the  exception  of writing  to  cookies   see  Chapter  16,  "Cookies" .  It  does  not  let you  write  to  or  store  files  on  the  server.  It  does  not  open  or  close windows  already  opened  by  other  applica- tions  and  it  cannot read  from  an  opened Web  page  that  came  from  another  server.   JavaScript is  object based  but  not strictly  object  oriented  because  it  does  not  support  the  traditional mechanism  for inheritance  and classes found in  object-oriented program- ming languages,  such  as Java  and  C++.  The  terms  private,  protected,  and  public  do  not  apply  to JavaScript methods  as with Java  and  C++.   JavaScript is not the  only language  that can be embedded in  an  application.  VBScript,  for  example,  developed by Microsoft, is similar to JavaScript, but is  embedded in Micro- soft's  Internet  Explorer.   What JavaScript Is Used  For   JavaScript  programs  are  used  to  detect  and  react  to  user-initiated  events,  such  as  a  mouse  going  over  a  link  or  graphic.  They  can  improve  a  Web  site  with  navigational  aids,  scrolling  messages  and  rollovers,  dialog  boxes,  dynamic  images,  and  so  forth.  JavaScript lets you  control  the  appearance  of the page  as  the  document is being parsed.  Without  any network  transmission,  it  lets  you  validate  what  the  user  has  entered  into  a  form  before  submitting  the  form  to  the  server.  It  can  test  to  see  if the  user  has  plug- ins  and  send  the  user  to  another  site  to  get  the  plug-ins  if needed.  It  has  string  func- tions  and  supports  regular  expressions  to  check  for  valid  e-mail  addresses,  Social  Security  numbers,  credit  card  data,  and  the  like.  JavaScript  serves  as  a  programming  language.  Its core language  describes such basic constructs as variables  and  data types,  control  loops,  ij else  statements,  switch  statements,  functions,  and  objects.4  It  is  used  for  arithmetic  calculations,  manipulates  the  date  and  time,  and  works  with  arrays,  strings,  and  objects.  It handles  user-initiated  events,  sets  timers,  and  changes  content  and  style  on  the  fly.  JavaScript  also  reads  and  writes  cookie  values,  and  dynamically  creates  HTML  based  on  the  cookie  value.   3.  The JavaScript  interpreter  is  normally  embedded  in  a  Web  browser,  but  is  not  restricted  to  the  browser.   Servers  and  other  applications  can  also  use  the JavaScript  interpreter.   4.  The  latest version  of the  core JavaScript  language  is JavaScript  1.8.1,  supported  by  Mozilla  and  Microsoft   Internet  Explorer.    1.4  JavaScript and  Its Place in a Web  Page   Figure  1.2  The life cycle of a  typical  Web page.   1.4.1  Analysis of the Diagram  The Players.  The  players  in Figure  1.2  are  the  applications involved in  the  life  cycle  of a Web  page:   1.  A  browser   Firefox,  Internet Explorer,  Safari,  Opera .  This  is where JavaScript   lives!   2.  A  network   HTTP .  3.  A server   Apache, Windows IIS,  Zeus .  4.  A  server  module   PHP,  ASP.NET,  ColdFusion, Java servlet .  5.  External  files  and or  a database   MySQL,  Oracle,  Sybase .   The Steps.  Figure  1.2  illustrates  the  life  cycle  of  a  Web  page  from  when  the  client  makes  a request until it gets  a response.   1.  On  the left hand side  of the  diagram, we see  the  client,  or browser where  the   request is made.  The  user makes  a request for  a Web site  by typing the  address    of the Web  site in  the  browser's URL location box.  The  "request"  is  transmitted  to  the  server  via Hypertext Transfer  Protocol   HTTP .  The Web  server  on  the  other  side  accepts  that request.  If the  request is  for  an  HTML  file,  the  Web  server responds by simply returning the  file  to the  client's browser.  The browser  will  then  render  the  HTML  tags,  format  the  page  for  display,  and wait for  another  request.  If the  page  contains JavaScript  tags,  the JavaScript  interpreter  will  handle  that code  based  on  a user-initiated  event such  as  clicking  a button,  rolling  a mouse  over  a link or  image,  or  submitting  a  form.  It is with JavaScript  that  the  page  becomes  interactive. JavaScript detects whatever  is  happening  on  the  page  and  responds.  It handles  fillout  forms,  feedback,  animation,  slide- shows,  and  multimedia.  It responds  to  a key press,  a mouse  moving  over  an  image,  or  a user  submitting  a  form.  It  can read  cookies  and  validate  data.  It  can  dynamically change  a cell  in  an HTML  table,  change  the  text in  a paragraph,  or  add  a new bullet item  to  a list.  But it  doesn't  do  everything.  It  cannot  close  a  window it didn't open,  query a  database,  update  the  value  in  a  file  upload  field,  or write  to  files  on  a  server.  After  the JavaScript interpreter  has  completed  its  tasks,  and  the  page has been  fully rendered,  another request can be  made  to  the  server.  Going back and  forth  between  the  browser  and  the  server  is  known  as  the  Request Response  loop,  the  basis  of how  the Web works.   2.  The  cloud  between  the  client side  and  the  server  side  represents  the  network.   This  can  be  a very large  network such  as  the  Internet  consisting  of millions  upon  millions  of computers,  an  intranet within  an  organization,  or  a wireless  network on  a personal  desktop  computer  or  handheld  device.  The  user  doesn't  care  how big or  small  the  network is—it is  totally transparent.  The  protocol  used  to  transfer  documents  to  and  from  the  server  is  called  HTTP.   3.  The  server  side  includes  an  HTTP  Web  server  such  as Apache,  Microsoft's  IIS,  or  lighttpd.  Web  servers  are  generic  programs  capable  of accepting Web-based  requests  and  providing the  response  to  them.  In most  cases,  this  response  is  simply retrieving  the  file  from  server's  local  file  system.  With  dynamic Web  sites,  which  require  processing  beyond  the  capabilities  of JavaScript,  such  as  processing  form  information,  sending  e-mail,  starting  a  session,  or  connecting  to  a  database,  Web  servers  turn  over  the  request  for  a specific  file  to  an  appro- priate  helper  application.  Web  servers,  such  as Apache  and  Internet Informa- tion  Service   IIS   have  a  list  of helper  applications  that process  any specific  language.  The  helper  application  could  be  an  external  program,  such  as  a  CGI Perl script, or one built right into the server, such as ColdFusion, ASP.NET,  or  a PHP  script.  For  example,  if the Web  server  sees  a request  for  a PHP  file,  it  looks  up  what helper  application  is  assigned  to  process  PHP  requests,  turns  over  the  request  to  the  PHP  module,  and waits  until  it gets  the  result back.   What Is Ajax?   Ajax  stands  for  Asnychronous  JavasScript  and  XML,  a  term  that  was  coined  by Jesse  James  Garrett in  2005.  Ajax  is  not new.  It's  been  around  since  1996,  and  is  a  technique    used to create fast interactivity without having to wait for a response from the server. As  shown in our Web cycle example in Figure  1.2, the browser sends a request to the server  and  waits  for  a  response,  often  with  a  little  wheel-shaped  icon  circling  around  in  the  location bar  reminding you  that the page  is loading.  As you wait,  the  browser sits with  you  and waits,  and  after  each  subsequent request, you  must wait  for  the  entire  page  to  reload  to  get  the  contents  of  the  new  page.  Ajax  lets  you  send  data  back  and  forth  between the browser and server without waiting for the whole page to reload.  Only parts  of the page that change are replaced.  Several requests can go out while you are scrolling,  zooming in and  out,  filling out a form,  and so  on,  as  those  other parts are loaded in the  background.  Because  this interactivity is  asnychronous,  feedback is immediate with no  long waiting times between requests.  Some examples of Ajax applications are Ajax Stock  Qutos Ticker   SentoSoft LTD , Flickr for photo storage and display,  Gmail,  Google Sug- gest,  and  perhaps  the  best  example,  Google  Maps  at  maps.google.com   see  Figure  1.3 .   14   +  !   http:  maps.google.com    *   googlemaps.com   Home  Web   Index  Contents  Search  Glossary  Help  First  Previous  Next  Last  Up  Copyright  Author  Images  Videos  Maps  News  Shopping  Gmail  more      Find businesses, addresses and places of interest. Learn more.   ]   Search  Maps     Show search optior   Google  maps   Get Directions  My  Maps   {$   San Francisco, CA  ®  Missoula,  MT   Add Destination - Show options  By  car       Get  Directions   Driving  directions to  Missoula,  MT   H  Suggested  routes  1-80  E  1,143  mi  1-15 N  1,512 mi   1G hours 48 mins   21  hours  52  mins   ^  San  Francisco,  OA    D   1.  Head southwest on Market St toward S  @   49  ft   Van  Ness Ave   2.  Take the 1 st left onto S Van Ness Ave  3.  Merge onto US-101  S via the ramp to San   0.4  0.6  mi   Jose Oakland I-80   4.  Take the exit onto I-80 E toward Oakland   t l   31.4  mi   5.  Take the exit onto 1-80 E toward Reno   ® 474  mi   Partial toll road   Entering Nevada   British   Columbia   Traffic   Edmonton   Calgary   Washington   Portland   Oregon   W y o m i ng   Denver o  Colorado   ^ S t o c k t on  California   Bakersf ie!d   O Las Vegas   Angeles®  ®   Tirana C   Ensenada'    izona  Arizona   Phoenrx  Mexico   N ew   o   "Tucson   Juárez   Ö,   Ch ihuaíiua^é'  ..  >   Q   Ciudad  Obregón   C u l ¡ a c an   Rosales   Nuevo  Laredo   Monterrey   O®   México   Aguascal lentes    - ?  0   i q s    I  mKKKtftKKtt^   I  2009 Google - Map data  2009 LeadDog Consulting, ^ m ^ f j v l E G i ^ ur   Figure  1.3  Google uses Ajax for interactivity.   2010 Google.    When you use  this Web page, you  have  complete  and  fast interactivity.  You  can zoom  in,  zoom  out, move around the map, get directions from one point to  another, view the loca- tion's terrain, see  traffic, view a satellite picture,  and so on.  In  Chapter  18 we discuss how  this  technique  works,  but  for  now  think  of it  as JavaScript  on  steroids.   1.6  What JavaScript Looks  Like   Example  1.1  demonstrates  a small JavaScript program.  The Web  page  contains  a simple  HTML  table  cell  with  a scrolling  message   see  Figure  1.4 .  Without JavaScript  the  mes- sage  would  be  static,  but with JavaScript,  the  message  will  continue  to  scroll  across  the  screen,  giving  life  to  an  otherwise  dead  page.  This  example  will  be  explained  in  detail  later,  but  for  now  it  is  here  to  show  you  what  a JavaScript  program  looks  like.  Notice  that  the     tags  have  been  highlighted.  Between  those  tags  you  will  see  JavaScript  code  that  produces  the  scrolling  effect  in  the  table  cell.  Within  a  short  time,  you  will  be  able  to  read  and  write  this  type  of script.   EXAMPLE      l.l     Dynamic  Page           This is JavaScript.  Be patient.  You will be writing     better programs  than  this in no  time.  var me s sage ="Learning JavaScript will give your Web  message += " Are you ready to learn? ";  var  space="...";  var position=0;  function  scroller  {   page life !";   var newtext  = message.substring position,message.length +  space + message.substring 0,position ;  var  td  =  document.getElementById "tabledata" ;  td.firstChild.nodeValue = newtext;  position++;  if   position > message.length {position=0;}  window.setTimeout scroller,200 ;              i d = " t a b l e d a t a"   bgcolor="white">message  goes  here    }           <td                  Dynamic  Page  - Mozilla  Firefox  File  Edit  View  History  Bookmarks   Tools  Help   C   t f li    Ù   file:   C: Documents and Settings Owner My Documents scroller.ht   I  '"]  You're BeautifulFree Midi Download   ,  ]  file:   C: Document...amplemusicmid.html   Q]  Dy   Figure  1.4  Scrolling text with JavaScript  output of Example  1.1 .   1.7  JavaScript and  Its Role in Web   Development   When  you  start  learning JavaScript,  JavaScript  code  will  be  embedded  directly  in  the  content of an HTML page.  Once we have covered the  core programming constructs, you  will see how a document is structured by using the  document object model   DOM ,  and  how JavaScript  can  get  access  to  every  element  of your  page.  Finally you will  be  intro- duced to cascading style sheets   CSS ,  a technology that allows you to  design your page  with  a stylized  presentation.  The  combination  of HTML,  CSS,  and JavaScript will  allow  you  to produce  a structured,  stylized, interactive Web  page.  As your knowledge grows,  so  will  your Web  page,  until  it becomes  necessary  to  create  more  pages  and  link them  together.  And  then you  still  have  to  be  sure your  visitors  are  having  a pleasant  experi- ence, no matter what browser they are using,  at the same time  trying to manage  the site  behind the scenes.  To keep all of this in perspective, Web designers have determined that  there are really three fundamental parts to a Web page:  the content, the way the content  is  presented,  and  the  behavior  of that content.   1.7.1  The Three Layers  When  a Web page is  designed  on  the  client   browser   side, it might start out as a sim- ple  HTML  static  page.  Later  the  designer  might  want  to  add  style  to  the  content  to  give  the  viewer  a  more  visually  attractive  layout.  Last,  to  liven  things  up, JavaScript  code  is  added  to  give  the  viewer  the  ability  to  interact with  the  page,  make  the  page  do something. A complete Web page, then,  can be visualized as three separate layers:  the  content or  structural  layer,  the  style  or  presentation layer,  and  the  behavior  layer   see  Figure  1.5 .  Each  of  these  layers  requires  careful  planning  and  skill.  Designers  are  not  necessarily  programmers  and  vice  versa.  Separating  the  layers  allows  the  designer  to  concentrate  on  the  part  he  or  she  is  good  at,  while  the  programmer  can  tweak  the  code  in  the  JavaScript  application  without  messing  up  the  design.  Of  course,  there  is  often  a  blurred  line  between  these  layers  but  the  idea  of  separating  content  structure  and  style  from  behavior  lends  to  easier  maintenance,  less  repeti- tion,  and  hopefully  less  debugging.    Figure  1.5  Three  layers that make  up a  Web  page.   Content or Structure.  In  Web  development,  HTML XML  markup  makes  up  the  content  layer,  and  it  also  structures  the  Web  document.  The  content  layer  is  what  a  viewer  sees  when  he  or  she  comes  to  your  Web  page.  Content  can  consist  of  text  or  images  and  include  the  links  and  anchors  a  viewer  uses  to  navigate  around  your  Web  site.  Because  HTML XML  elements  are  used  to  create  the  structural  content  of  your  page,  misusing those  elements might not seem  relevant for  a  quick visual  fix,  but might  be very relevant when  applying  CSS  and JavaScript.  For  example,  using headings  out of  order  to  force  a  change  in  font  size,  such  HI,  H3,  and  then  H2  tags,  in  that  order  is  invalid  HTML.  These  tags  are  intended  to  define  the  structure  of the  document  on  the  display.  The browser  views  the Web page  as  a tree-like structure,  a model  consisting of  objects, where  each HTML  element   e.g.,  HEAD, BODY,  HI   is  an  object in  the model.  This  document  tree,  the  DOM,  defines  the  hierarchical  logic  of your  document,  which  becomes  an  important  tool  for  creating  dynamic  content.  Because  the  structure  is  so  important, valid markup should be a priority before going to the next layer:  the CSS pre- sentation  layer.  See  Section  1.12  for  markup  validation  tools.   Style  Or Presentation.  The  style  or  presentation  layer  is  how  the  document  will  appear and on what media types.  This layer is defined by CSS.  Prior to  CSS, nearly all of  the  presentation  was  contained  within  the  HTML  markup;  all  font  colors,  background  styles,  element positions  and  alignments, borders,  and so  on,  had  to be  explicitly,  often  repeatedly, included in the HTML markup for the page. If, for example, you decided you  wanted  your  page  to  have  a  blue  font  for  all  headings,  then you would  have  to  change  each  heading  in  the  document.  CSS  changed  all  that.  It  gave  designers  the  ability  to  move  the  presentational  content  into  separate  style  sheets,  resulting  in  much  simpler  HTML  markup.  Now you  could  change  the  font  color  in  one  place  to  affect  all  of  the  pages  in  your  site.  Although  styles  can  be  embedded  within  a  document  and  give  you    control  over  selected  elements,  it  is  more  likely  they will  be  found  in  separate  .ess  files  to  let  you  produce  sweeping  changes  over  an  entire  document.  With  one  CSS  file  you  can control the style of one or thousands of documents.  External style sheets are cached,  reduce  the  amount  of  code,  and  let  you  modify  an  entire  site  without  mangling  the  HTML content pages.  And  CSS works with JavaScript and  the DOM  to  create  a dynamic  presentation,  often  known  as  DHTML.   Behavior.  The behavior layer is  the  layer  of a Web  page  that makes  the page perform  some  action.  For  most  Web  pages,  the  first  level  of  behavior  is  JavaScript.  JavaScript  allows you  to  dynamically  control  the  elements  of the Web  page  based  on  user  interac- tion  such  as  an  individual  keystroke,  moving  a  mouse,  submitting  form  input,  and  so  on. JavaScript also makes it easy to perform style changes on the fly.  Although tradition- ally  CSS  and JavaScript  are  separate  layers,  now  with  the  DOM,  they  work  so  closely  together  that  the  lines  are  somewhat  blurred.  JavaScript  programs  are  often  stored  in  external  files, which  are  then put in libraries where  other  programmers  can share  them.  See   http:  JavaScriptlibraries.com .   Unobtrusive JavaScript.  When you hear  this phrase,  "Make sure you  use  unobtru- sive JavaScript,"  and  you  will  hear  or  read  about  it  once  you  have  started  really  using  JavaScript,  it refers  to  the  three  layers we just  discussed.  It is  a  technique  to  completely  separate JavaScript  from  the  other  two  layers  of Web  development by putting JavaScript  code  in  its  own  file  and  leaving  the  HTML XHTML XML  and  CSS  in  their  own  respec- tive  files.  In  the  following chapters we have included most of the JavaScript examples in  the same  the HTML document because  the  files are small  and serve  to  teach  a particular  aspect  of the  language.  So  for  the  time  being,  we will  be  obtrusive.   Once you have learned  the JavaScript basics  and start working on larger  applications,  you  might want  to  understand  this  more  fully.  For  the  seven  rules  of unobtrusive Java- Script,   http:  icant.co.uk articles seven-rules-of-unobtrusive-JavaScript .   go   to   JavaScript  and  Events   HTML is static.  It structures  and  defines how the  elements  of a Web  page will  appear  in  the  browser;  for  example,  it  is  used  to  create  buttons,  tables,  text  boxes,  and  fillout  forms, but it cannot by itself react to  user input. JavaScript is not static;  it is  dynamic.  It  reacts  asynchronously  to  events  triggered  by  a  user.  For  example,  when  a  user  fills  out  a form; presses a button, link, or image; or moves his or her mouse over a link, JavaScript  can respond  to  the  event and  interact dynamically with  the user. JavaScript can  examine  user input and validate it before sending it off to a server, or cause a new image to appear  if a mouse moves over a link or the user presses  a button, reposition objects on the page,  even add,  delete, or modify the HTML elements on the fly.  Events are discussed in detail  in  Chapter  13,  "Handling  Events,"  but you  should  be  made  aware  of them  right  at  the  beginning  because  they  are  inherently  part  of what JavaScript  does,  and  there  will  be  many  examples  throughout  this  text  that  make  use  of them.    The  events,  in  their  simplest  form,  are  tied  to  HTML.  In  the  following  example,  an  HTML  form  is  created  with  the     tag  and  its  attributes.  Along  with  the  type  and  value  attributes,  the  JavaScript  onClick  event  handler  is  just  another  attribute  of  the  HTML     tag.  The  type  of input  device  is  called  a  button  and  the  value  assigned  to  the  button is  "Pinch  me".  When  the  user  clicks  the  button  in  the  browser window,  ajava- Script  event,  called  click,  will  be  triggered.  The  onClick  event  handler  is  assigned  a  value  that  is  the  command  that  will  be  executed  after  the  button  has  been  clicked.  In  our  example,  it  will  result  in  an  alert  box  popping  up  in  its  own  little  window,  displaying  "OUCH!!".  See  the  output  of Example  1.2  in  Figures  1.6  and  1.7.   EXAMPLE   1.2         Event           <input  type ="button"   value =  "Pinch me"  onClick="alert "OUCH!! 1 "  >   1  2  3  4  5               Event  -  Mozilla  Firefox   File  Edit  View  History  Bookmarks   Tools  Help   O   v   i li       Q   Pile: fffC:  wamp www example 1.1. html   I [P'rccft'mej ]   Event  -  Mozilla  Firefox   File  Edit  View  History  Bookmarks   Tools  Help   O   .   i i ii       I ~*1  I f'le :    C:  wamp www example 1.1. html   ù   Finch  me   [.¡^vaScript  A p p l i c a t i o n]   !   0 U C H !!   !  *   1   Figure  1.6  User  initiates a  click event w h en   he  or she  clicks the  mouse  on  the  button.   Figure  1.7  The  onClick event handler  is triggered  w h en   the  button  labeled  "Pinch  me"  is    Some  of the  events  that JavaScript  can  handle  are  listed  in  Table  1.1.   Table  1.1   JavaScript Event Handlers   Event Handler   What Caused It   onAbort   onBlur   onChange   onClick   onError   onFocus   onLoad   onMouseOut   onMouseOver   onSubmit   onUnLoad   Image loading was interrupted.   The user moved away from a form element.   The user changed a value in a form element.   The user clicked a button-like form element.   The program had an error when loading an image.   The user activated a form element.   The document finished loading.   The mouse moved away from an object.   The mouse moved over an object.   The user submitted a form.   The user left the window or frame.   Standardizing  JavaScript  and  the  W3C   ECMAScript,  which  is  more  commonly  known  by  the  name JavaScript™,  is  an  essen- tial  component  of every  Web  browser  and  the  ECMAScript  standard  is  one  of  the  core  standards  that  enable  the  existence  of  interoperable  Web  applications  on  the  World  Wide  Web.   —Ema  International   During the  1990s Microsoft Internet Explorer  and  Netscape were  competing  for  indus- try dominance  in  the  browser  market.  They rapidly  added  new  enhancements  and  pro- prietary  features  to  their  browsers,  creating  incompatibilities  that  made  it  difficult  to  view  a Web  site  the  same  way  in  the  two  browsers.  These  times were  popularly  called  the Browser Wars,  ending with Microsoft's Internet Explorer browser winning.  For now  there  seems  to  be  peace  among modern  browsers,  due  to  the  fact  that  the World Wide  Web  Consortium   W3C   set  some  standards.  To  be  a  respectable  browser,  compliance  with  the  standards  is  expected.   To guarantee  that there is one standard version  of JavaScript available to companies  producing  Web  pages,  European  Computer  Manufacturers  Association   ECMA   worked with  Netscape  to  provide  an international standardization  of JavaScript  called  ECMAScript.  ECMAScript is based  on  core  lavaScript and  behaves  the same way in  all    applications  that  support  the  standard.  The  first  version  of the  ECMA  standard  is  doc- umented  in  the  ECMA-262  specification.  Both  JavaScript   Mozilla   and  JScript   Microsoft  IE   are  really  just  a  superset  of  ECMAScript  and  strive  to  be  compatible  with  ECMAScript  even  though  they  have  some  of  their  own  additions.5  After  ECMA- Script  was  released,  W 3C   began  work  on  a  standardized  DOM,  known  as  DOM  Level  1,  and  recommended  in  late  1998.  DOM  Level  2  was  published  in  late  2000.  The  cur- rent release  of the  DOM  specification was  published  in April  2004.  By 2005,  large  parts  of  W 3C   DOM  were  well  supported  by  common  ECMAScript-enabled  browsers,  including  Microsoft  Internet  Explorer  version  6   2001 ,  Gecko-based  browsers   like  Mozilla Firefox,  and  Camino ,  Konqueror,  Opera,  and  Safari.  In  fact 95%  of all  modern  browsers  support  the  DOM  specifications.   For  the  latest  information  on  the  latest  ECMA-252  edition  5,  see  http:  www.ecma.s-  cript.org .   1.9.1  JavaScript  Objects  Everything  you  do  in JavaScript  involves  objects,  just  as  everything  you  do  in  real  life  involves  objects.  JavaScript  sees  a  Web  page  as  many  different  objects,  such  as  the  browser  object,  the  document  object,  and  each  element  of  the  document  as  an  object;  for  example,  forms,  images,  and  links  are  also  objects.  In  fact  every  HTML  element  in  the  page  can  be  viewed  as  an  object.  HTML  HI,  P,  TD,  FORM,  and  HREF  elements  are  all  examples  of  objects.  JavaScript  has  a  set  of  its  own  core  objects  that  allow  you  to  manipulate  strings,  numbers,  functions,  dates,  and  so  on,  and JavaScript  allows  you  to  create  your  own  objects.  When  you  see  a  line  such  as:   document.write "Hello,  world" ;   the  current  page  is  the  document  object.  After  the  object,  there  is  a  dot  that  separates  the  object  from  the  write  method.  A  method  is  a  function  that  lets  the  object  do  some- thing.  The  method  is  always  followed  by  a  set  of  parentheses  that  might  or  might  not  contain  data.  In  this  example  the  parentheses  contain  the  string  "Hello,  world"  telling  JavaScript  to  write  this  string  in  the  document  window,  your  browser.  In  Chapter  8,  "Objects,"  we  discuss  objects  in  detail.  Because  everything  in JavaScript is  viewed  as  an  object,  it  is  important  to  understand  the  concept  from  the  start.   1.9.2  The Document Object Model  What  is  the  DOM?  A  basic  Web  document  consists  of  HTML XML  markup.  The  browser's  job  is  to  turn  that  markup  into  a  Web  page  so  that  you  can  see  text,  input  devices,  pictures,  tables,  and  so  on  in  your  browser  window.  It  is  also  the  browser's job  to  store  its  interpretation  of  the  HTML  page  as  a  model,  called  the  Document  Object  Model.  The  model  is  similar  to  the  structure  of a  family  tree,  consisting  of parents,  chil- dren,  siblings,  and  so  on.  Each  element  of  the  tree  is  related  to  another  element  in  the   5.  ECMAScript  5th  edition  adds  some  new  features  and  is  now  available  for  review  and  testing   2009 .    tree. These elements are referred to as nodes, with the root parent node of the tree at the  top.  With  this  upside  down  tree  model  every  element  of  the  document  becomes  an  object  accessible  by JavaScript   and  other  applications ,  thus  giving  the JavaScript  pro- grammer  control  over  an  entire  Web  page;  that  is,  the  ability  to  navigate,  create,  add,  modify,  or  delete  the  elements  and  their  content dynamically.   As  mentioned  earlier,  the  DOM,  Level  l6   see  http:  www.w3.org DOM ,  a  standard  application  programming  interface   API   developed  by  the  W3C  is  implemented  by  all  modern browsers, including Microsoft Internet Explorer version 6   2001 ,  Gecko-based  browsers   like  Mozilla  Firefox  and  Camino ,  Konqueror,  Opera,  and  Safari.   After you learn the fundamentals of JavaScript, you will see how to create and manip- ulate  objects,  how  to  use  the  core  objects,  and  then  how  to  use JavaScript  to  control  every part of your Web page with the DOM.  With  CSS,  the DOM, and JavaScript you can  reposition elements on  a page  dynamically, create  animation,  create scrolling marquees,  and change the style of the page with fancy fonts and colors based on user input or user- initiated events, such as rolling the mouse over an image or link, clicking an icon, submit- ting a fillout form,  or just opening up  or  closing a new window.  Figure  1.8  demonstrates             Shady Grove-:  TD>   Aeolian          Over  the  River,  Charlie    Dorian             A  graphical  representation  of the  D OM   of the  example  table  is:   graphical representation of the DOM of the example table   Figure  1.8  http:  www.w3.org TR DOM-Level-2-Core introduction.html.   6.  DOM  Levels  2  and  3  have  also  been  developed  by  W 3 C,   but  DOM  Level  1  is  supported  by  most  browsers.    an  HTML  table  and  how  it  is  represented  as  a  tree  where  each  element  is  related  to  its  parent  and  siblings  as  described  by  the  W 3C   shown  at  http:  www.w3.org DOM.   1.10  What  Browser?   When  a  user  receives  a  page  that  includes JavaScript,  the  script  is  sent  to  the JavaScript  interpreter,  which  executes  the  script.  Because  each  browser  has  its  own  interpreter,  there  are  often  differences in how the  code will be  executed.  And  as  the  competing com- panies  improve  and  modify  their  browsers,  new  inconsistencies  may  occur.  There  are  not only different types  of browsers  to  cause  the  incompatibilities  but  also  different ver- sions  of  the  same  browser.  Because  modern  browsers  conform  to  the  W 3C   standards,  these  inconsistencies  tend  to  be  less  of a  distraction  than  they were  in  the  past.  Popular  browsers  today  are  shown  in  Table  1.2.   Table  1.2  Modern  Browsers   Browser   Web Site   Internet  Explorer   microsoft.com windows ie   Firefox   Safari   Opera   Google  Chrome   Konqueror   mozilla. o rg p roducts firefox   apple.com safari   opera.com   google.com chrome   konqueror.org    The  little  script  in  Example  1.3  should  tell  you  what  browser  you  are  using.  Even  though  the  application  name  might  display  Netscape  for  Firefox  and  Microsoft  Internet  Explorer  for  Opera, if you examine  the user  agent, you will be  able  find Firefox or  Opera  as  part  of the  output  string   see  Figure  1.9 .  Programs  that  determine  the  browser  type  are  called  browser  sniffers.  We  have  a  complete  example  in  Chapter  10,  "It's  the  BOM!  Browser  Objects."   EXAMPLE  1.3       alert "User appName is  "+ navigator.appName +   "\nUser agent is  "+ navigator.userAgent ;            file:  localhost Users...  "   ^   41   4   ^   ¿ä   f   ^  file:  localhost Users ellie javascript navname.htmI   fiie:  localhost Users el lie javascript   u   JavaScript         f\   User appName  is  Opera   User agent  is  Opera 9.64   Macintosh;  Intel  Mac  OS  X;  U;  en   Presto 2.1.1      Stop  executing  scripts  on  this  page   OK   Firefox  View  History  Bookmarks   Tools  Help   O   X   f j fr       l~*1   I Pile :   C: wamp www browser_name. html   fy   -       T j Firefox app   AOL Search ...   AOL Se   [JavaSc ript A p p Meatio n]   Loading.    X    User appName is Netscape      i ll    Firef ox 3.0.13  .NET CLR 3.5.30729    ,  User agent is Mozilla 5.0  Windows; U; Windows NT 5.1; en-US; rv: 1.9.0.13  Gecko 2009073022   1  m   1   Figure  1.9  Output from  Example  1.3.   1.10.1  Versions of JavaScript  JavaScript has a history.  Invented by Netscape, the first version was JavaScript  1.0.  It was  new  and  buggy  and  has  long  since  been  replaced  by  much  cleaner  versions.  Microsoft  has a scripting language  comparable  to JavaScript called JScript.  Table  1.3  lists versions  of both JavaScript and JScript.  For  a  discussion  of JavaScript versions  and  development  see   http:  ejohn.org bIog versions-of-JavaScript .   Table  1.3  JavaScript Versions   JavaScript  or  JScript  Version   Browsers  Supported   JavaScript  1.0  1996   Netscape  Navigator  2.0,  Internet  Explorer  3.0   JavaScript  1.1  1996   Netscape  Navigator  3.0,  Internet  Explorer 4.0   JavaScript  1.2  1997   Netscape  Navigator  4.0-4.05,  Internet  Explorer  4.0    Table  1.3  JavaScript Versions  continued    JavaScript  or  JScript  Version   Browsers  Supported   JavaScript  1.3  1998   ECMA-232,  Netscape  Navigator  4.06-4.7x,  Internet  Explorer  5.0   JavaScript  1.5  2000   ECMA-232,  Netscape  Navigator  6.0+,  Mozilla  Firefox,  Internet  Explorer  5.5+, JScript  5.5,  5.6,  5.7,  6   JavaScript  1.6  2006   Mozilla  Firefox,  Safari   JavaScript  1.7  2006   Mozilla  Firefox,  Safari,  Google  Chrome   JavaScript  1.8  2008   Mozilla  Firefox   JavaScript  is  supported  by  Firefox,  Explorer,  Opera,  and  all  newer  versions  of these  browsers.  In  addition,  Hotjava  3  supports JavaScript,  as  do  iCab  for  the  Mac,  WebTV,  OmniWeb  for  OS  X,  QNX  Voyager  and  Konqueror  for  the  Linux  KDE  environment.  NetBox  for  TV,  AWeb  and  Voyager  3  for  Amiga,  and  SEGA  Dreamcast  and  ANT  Fresco  on  RISC  OS  also  support JavaScript.   f-  JavaScript  2 and the  Future  of the  Web  - Windows  Internet  Explorer   fciifeti  v    g]   https:  devel   mozilla.org   entations xtech20i  v   j~  g   *t  X   AOL  Search   E 0H    f p p]   File   Edit   View   Favorites   Tools  Help   Favorites   g JavaScript 2 and the Future of the Web   A  *   ~   *  Page  »  Safety'  Tools  -     -  Figure  1.10  JavaScript2 and  the Web,  an informative paper by Brendan  Eich.    So where is JavaScript now? As of December 2009, the ECMA-262  Standard is in its  5th  edition.  JavaScript  is  a  dialect  of  ECMAScript,  but  JavaScript  1.8  is  comparable  to  ECMAScript,  edition  3  and  is  currently  the  most widely used  version   JavaScript  1.9  is  available  for  download .  To understand some  of the proposals  for  a JavaScript2  version   ECMAScript Edition 4 , Brian Eich,  the  creator  of JavaScript, wrote  an interesting arti- cle a few years ago that he published on the Web.  If nothing else, it tells you some of the  pros  and  cons  of the  current state  of the JavaScript language  and  the  obstacles  faced in  trying to  change it.  See Figure  1.10.   1.10.2  Does Your Browser Follow the Standard?  Modern  browsers  are  using versions  of JavaScript  1.5  or  above,  which  generally  follow  the standards set by the W3C.  The snippet of code in Example  1.4 tests  to see if you are  using  a  modern  version  of JavaScript  that  follows  the  standard  DOM   see  Figure  1.11 .  Both  the  getElementByld  and  createTextNode  are  part  of  the  W3C  standard,  which  sup- ports  the  DOM.   Figure  1.11   Internet Explorer supports the standard.   Is JavaScript Enabled on Your Browser?   1.10.3  To  see  if JavaScript  is  enabled  on  your  browser,  you  can  check  the  options  menu  of  Firefox by going to  the  Tools  menu Options Content.  If using Apple's  Safari  browser,  go  to  Safari  menu Preferences Security  and  with  Internet  Explorer,  go  to  the  Tools  menu Internet Options Security Custom  Level  and  enable Active  scripting   see  Figure  1.12 .  If using  Opera  go  to  the  Opera  menu Preferences Advanced Content  and  click  Enable JavaScript.  An  easy way  to  test if your  browser  has JavaScript  enabled  is  to  go  to the Web site http:  www.mistered.us test alert.shtml  and follow directions   see Fig- ure  1.13 .    Internet  Options   I  Security Settings  -  Internet  Zone   General   Security  Privacy   Content  Connections  Programs  Advanced   Settings   m   jÜ  jÜ   il?  Scripting   --'  Active scripting   O  Disable     Enatfe  O  Prompt   O  Disable     Enatfe  O  Prompt   O  Disable  O  Enatfe     Prompt   0  Disable  O  Enatfe  ftlnM,  1   ^  Ailpw  Programmatic  clipboard  accesi   ^  Ailpw  status  bar updates  via script   r-,,-,™-,!-  K-v   ..r   -<J  *Takßs effect after you restart Internet Explprer   Reset custom settings  Reset custom settings  Reset   to:  Medium-high  default    a  a   >   Reset...      Select  a  zone  to  view  or  change  security  settings.   9  «   Internet   Local intranet  Trusted sites   ®   Restricted   sites   This zone is for Internet websites,  except those listed in trusted and  restricted zones.   Security level foe this zone   Allowed levels for this zone: Medium to l-Sqh   Medium-high   I   »   - Apprnfwiahfi fnr m ni  wehiiff«;  - Prompts before downloading potentially unsafe  content  - Unsigned ActiveX controls will not be downloaded   Reset  all  zones  to  default  level   Apply   Figure  1.12  Enabling JavaScript on  Microsoft Internet Explorer.    y      @  I http:  www.nwstered.us test alert.shtrrJ   ipt Tester  Ü   J*-  AOL.com - Welcome to AOL       -        ¿OL  ^   Ads by Google   T h is   Is   A  S i m p le   T e st   To   C h e ck   If   Y o ur   J a v a S c r i pt   Is   E n a b l ed   S i m p ly   Click  This  B u t t on       11  y o ur   J a v a S c r i pt   is  e n a b l ed   &  w o r k i n g,   y ou   «111  s ee   an  a l e rt   o p en   t h at   l o o ks   similar  to  one  of  the  i m a g es   below.   Windows  9x,  W 2 0 0 0,   XP  Classic   Windows  XP  Default  Blue   Windows  XP   Silver   1 Microsoft  Internet  Explorer   [  M i c r o s o ft   I n t e r n et   E x p l o r er    X    M i c r o s o ft    I n t e r n et   E x p l o r er   Y o ur   J a v a S c r i pt    Is   W o r k i ng   Vnur   .v.-   r if it  Ts w r I 'i   f\   Ynur   .u.rir  11  fc  Working   T h a nk   Y ou   Thank  You   Image   OK      image   Imaqe  [   OK   Image   Thank  You  \f—  ——  —N   OK   .  Imaqe   .  Image   If   y ou   do   n ot   s ee   the  a l e rt   as   d e s c r i b e d,   click  h e re   to   f i nd   ins m i c t i o ns   on  w h e re   a nd   h ow   to   e n a b le   y o ur   J a v a S c r i p t.    1.11  Where to  Put JavaScript   Before  learning  JavaScript,  you  should  be  familiar  with  HTML  and  how  to  create  an  HTML  document.  This  doesn't  mean  that  you  have  to  be  an  expert,  but  you  should  be  familiar  with  the  structure  of  HTML  documents  and  how  the  tags  are  used  to  display  various  kinds  of content on your  browser.  Once you have  a static HTML  document,  then  adding  basic JavaScript  statements  is  quite  easy.   Go  to  http:  www.w3schools.com  for  an  excellent  HTML  tutorial.   In  this  text  we  have  devoted  a  separate  chapter  to  CSS.  CSS  allows  you  to  control  the  style  and  layout  of your  Web  page  by  changing  fonts,  colors,  backgrounds,  margins,  and  so  on  in  a  single  file.  With  HTML,  CSS,  and JavaScript you  can  create  a  Web  site  with  structure,  style,  and  action.   Client-side  JavaScript  programs  are  embedded  in  an  HTML  document  between  HTML  head  tags     and     or  between  the  body  tags     and   .  Many  developers  prefer  to  put JavaScript  code  within  the     tags,  and  at  times,  as  you will see later, it is  the best place  to store  function  definitions and  objects.  If you want  text  displayed  at  a specific spot in  the  document, you  might want to  place  the JavaScript  code  within  the     tags   as  shown  in  Example  1.5 .  Or  you  might  have  multiple  scripts  within  a  page,  and  place  the JavaScript  code  within  both  the     and     tags.  In  either  case,  a  JavaScript  program  starts  with  a     tag,  and  ends  with  a     tag.  And  if  the  JavaScript  code  is  going  to  be  long  and  involved,  or  may  be  shared  by  multiple  pages,  it  should  be  placed  in  an  external  file   text  file  ending  in  js   and loaded  into  the  page.  In  fact,  once you start developing Web  pages with JavasScript,  it  is  customary  to  separate  the  HTML CSS  content  from  the  programming  logic   Java- Script   by  creating  separate  files  for  each  entity.   When  a  document is  sent  to  the  browser,  it reads  each  line  of HTML  code  from  top  to  bottom, and processes and displays it. As JavaScript code is encountered, it is read and exe- cuted  by  the JavaScript interpreter  until  it is  finished,  and  then  the  parsing  and  rendering  of the  HTML  continues  until  the  end  of the  document is  reached.   EXAMPLE   1.5   I  <!DOCTYPE HTML PUBLIC  "-  W3C  DTD HTML 4.01  EN"  "http:  www.w3.org TR html4 strict.dtd">  2     3  4  5    First  JavaScript  Sample              This  is just plain old HTML stuff.    document.write " " ;   6  7  8  9           E X P L A N A T I ON   1   2  3   4  5   The  doctype  declaration  tells  the  Web  browser  what  version  of the  markup  lan- guage  will  be  used  for  this  page  and  should  be  the  very  first  thing  in  an  HTML  document,  and  must  be  included  in  an  XHTML  document.The  doctype  declara- tion refers to a Document Type Definition   DTD .  The DTD specifies the rules for  the  markup  language,  so  that the browsers  can render  the  content correctly.  This  document  is  declared  to  be  HTML  4.01  Strict.  HTML  4.01  Strict  is  a  version  of  HTML  4.01  that  emphasizes  structure  over  presentation.  Deprecated  elements  and attributes,  frames,  and link targets are not allowed in HTML 4 Strict.  In most  of the  examples  in  this  book,  this  declaration  will  be  omitted just  to  save  space,  but when  you  create  your  own  documents,  you  should  include  the  doctype  dec- laration.  This is  the starting tag for  an HTML  document.  This is the HTML   tag.  The   tags contain all the elements that don't be- long in the body of the document, such as the   tags, as well as JavaScript tags.  The     tag  defines  the  background  color  and  text  color  for  the  document.  This     tag is  the starting HTML tag for  the JavaScript script, which consists  of a mix of textual  content and JavaScript instructions. JavaScript instructions are  placed between  this tag and  the  closing    tag. JavaScript understands Java- Script  instructions,  not  HTML.   The JavaScript  writeln  method  is  called  for  the  document.  The  string  enclosed  in parentheses  is  passed  to  the JavaScript interpreter.  If the JavaScript interpreter  encounters  HTML  content,  it sends  that  content  to  the  HTML  renderer  and  it is  printed  into  the  document  on  the  browser.  The  normal  HTML  parsing  and  ren- dering resumes  after  the  closing JavaScript  tag is  reached.  This  is  the  ending JavaScript  tag.  The  output is  shown  in  Figure  1.14.   6  7  HTML  tags  and  text  continue  in  the  body  of the  document.  8  9   The  body of the  document  ends  here.  This  is  the  ending  tag for  the  HTML  document.   G  First  J a v a S c r i pt   Sample  -  M o z i l la   F i r e f ox   File   Edit   View  History   Bookmarks   Tools  Help   C   Sj   .   I   file:   C: wamp www example 1.4.html   ¡3] Javascript Tu...   HTML doctyp...   HTML br tag   [J  External  .js F   Welcome  to  the  JavaScript World!   Tins is just plain old HTML stuff.   Figure  1.14  Example  1.5 output: JavaScript has been inserted  in a document.    1.11.1  JavaScript from External Files  When  scripts  are  long  or  need  to  be  shared  by  other  pages,  they  are  usually  placed  in  external  files,  separate  from  the  HTML  page.  Keeping  the JavaScript separate   unobtru- sive JavaScript   from  the  HTML  or  CSS  files  is  important  when  developing  a  Web  site.  It  enables  you  to  apply  one  set  of  functions  to  every  page  of  the  site,  so  that  when  you  need  to  make  a  change,  you  can  do  it  in  one  document  rather  than  going  through  each  individual  page  to  apply  the  change.  A JavaScript  external  file  contains just  plain Java- Script code  and is saved  as  a  .js  file.  The  .js  file  is linked  to  the Web page by including it  between  the     tags  of  the  HTML  document  and  within  its  own     tags.  The  external JavaScript  file  is  assigned  to  the  src  attribute  of  the     tag  in  the  HTML  file.  The  external  file  name  includes  the  full  URL if the  script is  on  another  server,  direc- tory path  or just the  script name if in  the  local  directory.  You  can include more  than  one  .js  script  in  a  file.   <script  type="text javascript"   src="http:  servername JavaScriptfile.js">       The  following  examples,  although very small,  give you  the  idea  of how  external  files  are  used.  The welcome.js script contains a JavaScript function   see  Chapter  7,  "Functions" .   EXAMPLE   1.6      The external file called "welcome.js"  function welcome  {   alert "Welcome to JavaScript!" ;   EXAMPLE   1.7   }   l  2   3   <¡DOCTYPE HTML PUBLIC  "-  W3C  DTD HTML 4.01  EN"      "http:  www.w3.org TR html4 strict.dtd">        External  .js File                 We are working with an external  file.                EXPLANATION   1   2  3   The JavaScript    tag's src attribute is assigned the name of a file   name must  end  in  js   that  contains JavaScript  code.  The  file's  name  is  welcome, js  and it con- tains  a JavaScript program  of its  own  containing a simple JavaScript function  that  will  be  called when  the  user  clicks  the  "Welcome Me!"  button.  See  Figure  1.15.  The JavaScript  program  ends  here.  This  is  an  HTML  button  input  device.  When  the  user  clicks  the  button,  a Java- Script  function  called  welcome    will  be  called.  It  is  defined  in  the  external  file,  welcome,  js.   G  External  .js  File  -  Mozilla  Firefox  File  Edit  View  History  Bookmarks  Tools  Help   C   M   J   file:   C: ™amp    ¡3] Javascript Tutor...  Q  file:   C...est.html   j  File:   <   We  are  working with  an  external  file.  I  iWelcome Meli     Figure  1.15  After clicking the  "Welcome  Me!"  button,  a function from the external  .js file is called.   As  you  can  see  in  Figure  1.16,  Pearson  Education  uses  many  external JavaScript  files   .js   files  to produce  their Web  site.   \   1  Source  of:  http:  www.pearsoned.com   - Mozilla  Firefox   File  Edit  View  Help    DO CTYPE h tml P JJELXC " ~  W3 C  D TD XHTML 1.0 Tr ans itional   EN " "http:   www. w3. or g  TR xh tml 1  D TD xh tial         Pearson  Education  -  Live  and  Learn   <meta name="description"  content="Educating  100 million people  worldwide,  Pearson Education  is  the  gli  <meta name="keywords"  content="pearson education,  publishing,  textbooks,  student management,  testing,              -ilink  reX="stylesheet"  href="ess ie.ess"  type="text ess" >               var  ¥RInitTime= new  Date   .getTime  ;        Figure  1.16  Viewing the source code for a Web site using external JavaScript files.    1.12  Validating  Your  Markup   Because your JavaScript code  does not stand alone but is integrated with HTML XHTML  and  CSS,  it  is  important  to  find  validation  tools  to  verify  that your  markup  is  correct,  especially when conforming to the DOM  and W3C standards.  There are a number of free  tools  on  the Web  to  help you make sure your markup  is valid.   1.12.1  The W3C Validation Tool  The  W3C  validation  tool  is  shown  in  Figure  1.17.  This  tool  allows  you  to  validate  by  URI,  file  upload,  or  by  direct  input.  This  validator  checks  the  markup  validity  of Web  documents in HTML, XHTML,  SMIL, MathML,  and so  on, but to  evaluate specific con- tent  such  as  RSS Atom  feeds  or  CSS  stylesheets,  MobileOK  content,  or  to  find  broken  links,  there  are  other validators  and  tools  available.   Figure  1.17   Ihe W3C  markup validation of an  H1ML page.    1.12.2  The Validóme Validation Tool  The  validator  at www.validome.org is  another  excellent tool  for  validating  an  online  page  or  an  XHTML  document.  Just  go  to  the  Validome  Web  page  and  select  the  URL  or  Upload option to get a file from your hard drive.  Once you have selected a file, just click  Validate   see  Figure  1.18 .   HTML     XHTML     XML  I  WML  Validator  -  Opera   Edit   View   Bookmarks  Widgets   Tools   Help   File  File   Ü3   u   B   @  Plugin Detection   X   Plugin Detection   ij^HTML XHTML XML W...    xl   I  14 j   ]        Q   i     i   ?   http:  www.valiJome.org    ;   yalii Jome, org   Home  InJex  Contents  Search  Glossary  Help  First  Previous  Next . Last  Up  Copyright  Author   HTML  I  X H T M L   W ML      X ML   V a l i d a t or   +  Y V aDQCiteCuL]    I  F o r um   I  R e s o u r c es   S i j c b ar     C o n t a ct   [ A b o ut    W e b l og      -fPoctype ë'r  fäuto  detect   - f c h a r s e ts   0}   ¡auto  detect   :   Source  « U RL   http:     C  Upload   O Help I  Ht  Extended settings   "ir^ioos.e..   J  Validate   Validation  Services  for  your  HTML     XHTML    WML   V a l i d o me   allows  W eb   Publishers  to  c h e ck   their  syntax  with  a  reliable,  h i g h - s p e ed   Validation  service,  in  a c c o r d a n ce   to  current  official  S t a n d a r d s.   Valid  code  is  v e ry   helpful,  in  order  to  avoid  problems  with  different  browsers  a nd   releases.  A  simple  visual  c h e ck   of  y o ur   site  does  not  conform  a ny   more  to  m o d e rn   w e b d e s i gn   a nd   generally  a c c e p t ed   technical  requirements.  Other  validators:  B e y o nd   HTML     X H T ML   a nd   W ML   validation,  Validome  offers-you  the  possibiliy  to  validate  other  documents.   Allows  validation  of  X ML   1.0  d o c u m e n ts   according  to  W 3C   specifications.  »  X ML   Validator  c   DTD-Schenia   S t a n d a l o ne   g r a m m ar   validator  for  XMt_  D T Ds   a nd   S c h e m a s.   »  D TD      S c h e m a - V a l i d a t or   «   RSS    Atom   A d v a n c ed   F e e d - V a l i d a t or   for  »  RSS  a nd   A t om   «   Goalie   Validates  y o ur   »  G o o o le   S i t e m a p f sl   «  on  X ML   conformity  a nd   specific  requirements   Validating  y o ur   site  code  means:      mostly  consistent  display  for  y o ur   sites  with  m a ny   browsers   which  display  the  one  andis.ame  -  unvalid  -  p a ge   v e ry   differently!  a nd   makirid  y o ur   site  more  readable  for  different,  user  agents      T  Figure  1.18   Ihe Validome validation tool.    1.13  What You Should  Know   This  first  chapter  introduces  you  to  the JavaScript  programming  language,  its  history,  why it is  important in Web  development,  and  how it  fits into  a Web  page.  Before  going  further,  you  should  know:   1.  The  difference  between  a  compiled  and  scripting language.  2.  Where JavaScript is  defined,  the  client  or  server?  3.  What JavaScript  is  used  for.  4.  How JavaScript  makes  a  page  interactive.  5.  Where JavaScript  programs  are  stored.  6.  What  a JavaScript  program  looks  like.  7.  What Ajax stands  for  and  an  example  of how it is  used.  8.  What  W3C  stands  for.  9.  Why  the  DOM  was  standardized.  10.  What  is  meant  by  unobtrusive JavaScript.  11.  Where  on  the  Web  to  find  a good  HTML  tutorial.    Exercises   1.  Describe  the  life  cycle  of a Web  page.   2.  What browser  are  you  using?  What version?  How  do  you  know?   3.  What is  an  example  of a JavaScript  event handler?  Copy Example  1.2  into your   editor  and  run  the  program  in your  browser.   4.  What  is  the  difference  between JavaScript  and JScript?   5.  Where  do JavaScript  tags  go  in  an  HTML  page?  Does JavaScript understand   HTML?   6.  What  is  the  DOM?   7.  Define  the  three  layers  of a Web  page.   8.  How  do you  set up JavaScript in  an  external  file?   9.  Write  a JavaScript program  that prints  a welcome  message  in  a large  blue  font.   Check to  see  if JavaScript is  enabled.  Use  comments  to  explain what you  are  doing.    chapter 2   Setup   2.1  The HTML Document and JavaScript   Unlike  Perl  and  Python  scripts, JavaScript  scripts  are  not  stand-alone  programs.  They  are  run  in  the  context  of an  HTML  document.  When  programming  on  the  client  side,  the  first  step  will  be  to  create  an  HTML  document  in  your  favorite  text  editor,  such  as  UNIX vi  or emacs,  or Windows  Notepad,1 WordPad,  or TextPad   see Figure  2.1 .  There  are  a number  of popular integrated  development environments   IDEs   such  as  NetBeans,  Komodo  Edit,  and Eclipse, with highlighting,  validation,  debugging features,  and so  on  you  might  prefer  to  use.  A  list  of  recommended  IDEs  can  be  found  at  http:  ]avaScript- ide.software.informer.com downloads .  Because  the  file  you  create  is  an  HTML  document,  its  name  must  include  either  an  .html  or  .htm  extension.  JavaScript  programs  can  be  embedded  within  the  HTML  document  between  the     and     tags.  Figures  2.1  and  2.2  show  an HTML  file  containing JavaScript  code.   IT  TextPad  -  [C:\wamp\www\example2.1  .html]    a m g, %   q ö q  sljl&B  x %   :q.  Hi  J   Search   -yieiv-  Tools  Macros  Configure  Window  Help   <  IDOCT.YFE  HTML  P U B I IC    " -     f f 3 C     B TD   HTM-I   I  0 1     E H"   t rj   o r g T Eh  t in 14   :S:t r i c t  dtd111:?;   1 h r  r  jM   i h t ml    l a n g = e n>      H e l l q p'   t i t l e >    <  b o d y  iha;-  ¿ S c r i pt    t y p e=   "  t e i - it   'i a v a s c r i p i t-   X      % ]—   H i de   s c r i pt    f r om   o ld   b r o w s e rs   d o c u m e nt   w ri   te     " H el  lu    E nd    t he   h i d i ng   h e re   w o r l d !'   i : - ' s ui  i pit  >    Sd    l o n g,   w o r ld    l   p i>   File  Edit  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15   !   b o dy  >   A   l it   ml    30   Chapter 2      Script Setup   E  J  PSPad  -  [C:\Program  Files\PSPad  editor\testPSPad.html*]   File  Projects  Edit  Search  View  Format  Tools  Scripts  HTML  Settings  Window  Help     1.. testP5Pad.html   fe  p ^ p w ci       -  &  -  u  -      re   i  i  I    t  m     x  p  H  IBI      ID  life!  I»  IB  I  st  a  t  *     %   ¡¿7  New project   1  Qj  Folder   10   20   so  <!DOCTYPE  HTML  PUBLIC  "-  W3C  DTD  HTML  4.01  EN"  "http:  www.w3.org TR htm!4 strict.dtd">      30   40   60   <meta name="generator"  content=  "HTML Tidy for Windows   vers 25 March 2009 ,  see www.w3.org">     Hello                        < !—   Hide  script  from old browsers.   document.wr ite "He1lo,  worId!" ;  if  End the  hiding here.  —>              So long,  world.          1  2  3  1  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23   Figure 2.2  JavaScript in PSPad  Editor, a popular free IDE with many features.   2.1.1  Script Execution  Because  a JavaScript program  is  embedded  in  an  HTML document, you will  execute  it  in your browser window.  If you  are using an IDE,  the browser is part of the integrated  environment,  but  either  way,  you  can  execute  a  JavaScript  program  directly  in  the  browser. If using Mozilla Firefox, Opera, or Internet Explorer, follow these instructions:    The  HTML Document and JavaScript   31   1.  Go  to  the  File  menu  and  open  the  HTML  file  by browsing  for  the  correct  one.   Open  File s    Look  in:  Q  v   M-. browser_name  l^lconnect  fr  domsupport   ex2.1js   My Recent  Documents   L23   Desktop e>   ¥  example 1  V.  example 1.1  0]  example 1.4  »  example 1.4  j^] example 1.4noscript  M]  example 1.7  W; example2.1  gj] example2.2pretag  *  example2.4  M', example3.5vars  example3.6vars   My Documents   My Computer   My Network   Files of type:   All Files  x.x    File name:   File format:   Encoding:   *  example4.1  U  examples. 1  M\ examples.2  examples.3  U  example?. 1  §  example?,  l.hrml  U  example?.3  U  example7.3new.html   example?.4  example?.5  M\ example?.6  ¡j  example?.7  examples.9   ¡Wj examples. 10  M:  examples. 11   O   it    m-  example 12. getelementt   J*;  example9.13  ¥  example9.13new  ^]example9.16  ^]example9.18  J*,  example9.18  U  example 12.5   *  exercise9.14  exercise9.22  exercise 11.2  Sj  exercise 11.3  ^  exercise 11.5  exercise 12.1   Wj externalfiletest  fl^ first   Open   Cancel   I   I Read-only   2.  All  files in  the www folder  are  displayed.   The  html  extension  on  the  files will   appear  in  the  browser's  URL.     48   Chapter 2      Script Setup   The  file  example  2.1.html  is  highlighted.   The  .html  extension  is  not  visible.    O  Hello  -  Mozilla  Firefox  File  Edit  View  History  Bookmarks   Tools  Help   T   C   t il    0   file:   C: wamp www example2.1.html   A   .js ...   External .js ...    [2]  First JavaSc...    E r r or  Downl...   Q  First JavaSc   Hello, world!   So long, world.    Syntactical  Details   33   4.  Or  you  can  type  the  URL   complete  address   in  the  navigation  bar  of your   browser  as  shown  here.   Note  the  .html  extension  appears  in  the  URL.    File   Edit   View  History   Bookmarks   Tools  Help   C   ÎÈ   lJ   file:   C: wamp www example2.1.html   aScr...   Has JavaScr...   Has JavaScr...   Has JavaScr...   HasJavaSi   2  Syntactical  Details   Rules,  rules,  rules.  Just  like  English,  French,  or  Chinese,  all  programming  languages  have  their  rules.  Many  of  the  rules  are  similar  and  many  have  individual  quirks,  but  to  do  anything  at  all,  you  have  to  obey  the  rules,  or  your  program  simply  won't  work.  If  you  have  experience  programming  in  other  languages,  you  will  find  the JavaScript  rules  and  syntax  quite  familiar.  When  you  write JavaScript  programs,  you  have  to  deal  with  HTML  rules   and  CSS  rules ,  as  well  as  JavaScript  rules,  because  JavaScript  does  not  stand  alone.   2.2.1  Case Sensitivity  The  HTML  tags  in  a  document  are  not  case  sensitive.  If you  type  the  title  tag  as   ,   ,   ,  or  any  combination  of  upper  or  lowercase  characters,  the  HTML  Ten- derer  will  not  care.  But  JavaScript  names,  such  as  variables,  keywords,  objects,  func- tions,  and  so  on,  are  case  sensitive.  If,  for  example, you spell  the Boolean  value  true with  any  uppercase  letters   e.g.,  TrUE , JavaScript  will  not  recognize  it  and  will  produce  an  error  or  simply ignore  the JavaScript  code.  Although  most names  favor  lowercase,  some  JavaScript  names  use  a  combination  of  upper  and  lowercase   e.g.,  onClick,  Math.floor,  Date.getFullYear .   2.2.2  Free Form and Reserved Words  JavaScript ignores whitespace   i.e.,  spaces,  tabs,  and  newlines   if the whitespace  appears  between  words.  For  example,  a  function  name,  such  as  onMouseOverQ,  toLowerCaseQ,  or  onClickO,  cannot  contain  whitespace  even  though  it  consists  of more  than  one  word.   1. var name="Tom";  2 . var   name  name  "Tom";   1  and 2  are  equivalent  statements    50 Chapter 2     Script Setup   Whitespace  is  preserved  when  it is  embedded within  a string  or  regular  expression.  For example, the whitespace in the string,  "Hello  there" will  be preserved  because  it is  enclosed within double  quotes.  Of course, you  can't break up  a word such as switch,  if,  else,  window,  document,  and  so  on,  because  it  would  no  longer  be  the  same  word.  Because  extra whitespace is ignored by the JavaScript interpreter, you are  free  to indent,  break lines,  and  organize your program  so  that it is  easier  to read  and  debug.   There  are  a  number  of  reserved  words   also  called  keywords   in  JavaScript.  Being  reserved means that keywords are special vocabulary for the JavaScript language and can- not be used by programmers as identifiers for variables, functions and labels, and the like.  Words  such  as  if,  for,  while,  return,  null,  and  typeof  are  examples  of  reserved  words.  Table 2.1  gives a list of reserved words.   Table 2.1  Reserved  Keywords   abstract   boolean   implements   import   char   do   finally   long   protected   switch   true   while   class   double   float   native   public   try   with   synchronized   this   break   const   else   for   in   new   return   typeof   byte   case   continue   default   extends   function   instanceof   false   goto   int   null   short   throw   var   static   throws   void   catch   delete   final   if   interface   super   transient   volatile   package   private   2.2.3  Statements and Semicolons  Just  like  sentences   which  represent  complete  thoughts   in  the  English  language, Java- Script  statements  are  made  up  of  expressions.  The  statements  are  executed  top  down,  one  statement at  a time.  If there  are  multiple  statements  on  a line,  the  statements must  be separated by semicolons. Although not a rule, it is good practice to terminate all state- ments with  a semicolon  to make it clear where  the statement ends.  Because JavaScript is  free  form,  as  long  as  statements  are  terminated with  a  semicolon,  the  lines  can  be  bro- ken,  contain whitespace,  and so on.  A statement results in some  action unless the state- m o nt   l'c  a  T-in11  c t - j t o n i p r it    it-i  ^srViii^Vi   t-i i^tViiT-1 rr   i ^ a co   it  A    Syntactical  Details   35   var name =  "Ellie"  document.write "Hi  "+name ;  <- wrong,  two statements   The  following  line  is  incorrect:   It  should  be:   var name = "Ellie";  document.write "Hi  "  + name ;  <- semicolon needed  to separate two  statements on the  same line   If the statements are grouped in a block of curly braces,  they act as a single statement.   if    x > y   { statement;  statement;  } <- Statements enclosed in curly   braces act as a single  statement   2.2.4  Comments   A  comment  is  text  that  describes  what  the  program  or  a  particular  part  of  the  program  is  trying  to  do  and  is  ignored  by  the JavaScript  interpreter.  Comments  are  used  to  help  you  and  other  programmers  understand,  maintain,  and  debug  scripts.  JavaScript  uses  two  types  of comments:  single-line  comments  and  block  comments.   Single-line  comments  start with  a  double  slash:      This is a comment   For  a block  of comments,  use  the  *  *   symbols:    *  This is a block of comments   that  continues for a number of lines   *    2.2.5  The   Tag  JavaScript  programs  must  start  and  end  with  the  HTML     and     tags,  respectively.  Everything  within  these  tags  is  considered  JavaScript  code,  nothing  else.  The  script  tag  can  be  placed  anywhere  within  an  HTML  document.  If you want  the Java- Script  code  to  be  executed  before  the  page  is  displayed,  it  is  placed  between  the     and     tags.  This,  for  example,  is  where  function  definitions  are  placed   see  Chap- ter  7,  "Functions" .  If the script performs some  action pertaining to  the body of the  doc- ument,  then  it  is  placed  within  the     and     tags.  A  document  can  have  multinle     tags,  each  enclosing  anv  number  of  lavaScrint  statements.    Chapter 2      Script Setup   36   FORMAT           JavaScript  statements...   EXAMPLE  2.1          Attributes.  attributes  are             language  type  src   document.write "Hello,  world! " ;   The     tag also  has  attributes  to  modify  the  behavior  of the  tag.  The   Any JavaScript-enabled  browser  can  identify  that  the  scripting language  is JavaScript,  if  the  language  attribute  is  set  to JavaScript2  rather  than,  for  example,  VBScript  or JScript.  You  normally  set  the  language  attribute  as  follows:       According  to  the  W 3C   recommendation,  the  value  assigned  to  this  attribute  is  an  identifier  for  the  scripting  language,  but  because  these  identifiers  are  not standard,  this  attribute  has  been  deprecated  in  favor  of  the  type  attribute.   The  language  attribute  can  be  assigned  a  version  number  to  specify  what  version  of  JavaScript  is  supported  to  view  the  page.  If  the  browser  doesn't  recognize  the  version,  the  script will  be  totally ignored.  You shouldn't have  to worry about this  if you  are  using  the  latest  version  of a  particular  browser,  but just  in  case,  here's  how you  specify  a  ver- sion  number.         The  type  attribute  is  used  to  specify both  the  scripting language  and  the  Internet  con- tent  type.  It is  used  mainly  to  validate JavaScript  as  part  of a well-formed  document  and  is  the  preferred  way  to  start JavaScript  in  all  modern  browsers.   <script  language="JavaScript"   type="text i avascript">    Generating  HTML and  Printing Output   37   The  src  attribute  is  used  when  the JavaScript  code  is  in  an  external  file,  the  file  name  ending with  a  js  extension.  The  src  attribute  is  assigned  the  name  of the  file,  which  can  be  prefixed  with  its  location   e.g.,  a  directory  tree  or  URL .   < s c r i pt  type="text javascript"   src="sample.j s">       < s c r i pt  type="text javascript"  src="directory sample.js">       < s c r i pt  type="text javascript"   src="http:  hostname sample.js">       3  Generating  HTML and  Printing  Output   When you  create  a program  in  any language,  the  first thing you want to see is  the  output  of the  program  displayed  on  a screen.  In  the  case  of JavaScript,  you'll  see your  output in  the  browser  window.  Of course,  browsers  use  HTML  to  format  output.  Although Java- Script  doesn't  understand  HTML  per  se,  it  can  generate  HTML  output  with  its  built-in  methods,  write    and  writeln  .   2.3.1  Strings and String Concatenation  A string is  a  character  or set of characters  enclosed in matching quotes.  Because  the  meth- ods  used  to  display text  take  strings  as  their  arguments,  this is  a good  time  to  talk a little  about  strings.  See  Chapter  9,  "JavaScript  Core  Objects,"  for  a  more  complete  discussion.  All strings must be placed within a matched set of either single or double quotes; for exam- ple:   " t h is    is  a  s t r i n g"    or   ' t h is    is  a  s t r i n g1   Double  quotes  can  hide  single  quotes;  for  example:   And  single  quotes  can  hide  double  quotes;  for  example:   "I  don  1t  c a r e"   'He  c r i e d,    "Ahoy!"'    38   Chapter 2      Script Setup   "hot"  +  "dog"  or  "San Francisco"  +  " "   For  more  information  on  strings,  see  Chapter  3,  "The  Building  Blocks:  Data  Types,   Literals,  and  Variables."   2.3.2  The  write   and  writeln   Methods   One  of  the  most  important  features  of  client-side  JavaScript  is  its  ability  to  generate  pages  dynamically.  Data,  text,  and  HTML  itself can  be  written  to  the  browser  on  the  fly.  The  writeQ  method  is  a  special  kind  of  built-in  JavaScript  function  used  to  output  HTML  to  the  document  as  it  is  being  parsed.  When  generating  output  with  writeQ  and  writelnO,  put  the  text  in  the  body  of  the  document   rather  than  in  the  header   at  the  place  where  you  want  the  text  to  appear  when  the  page  is  loaded.   Method  names  are  followed  by  a  set  of parentheses.  They  are  used  to  hold  the  argu- ments.  These  are  messages  that will  be  sent  to  the  methods,  such  as  a  string  of text,  the  output  of a  function,  or  the  results  of a  calculation.  Without  arguments,  the  writeQ  and  writelnO  methods  would  have  nothing  to  write.   JavaScript  defines  the  current  document   i.e.,  the  HTML  file  that  contains  the  script   as  a  document object.   You will  learn more  about objects  later.   For now, whenever you  refer  to  the  document  object,  the  object  name  is  appended  with  a  dot  and  the  name  of  the  method  that  will  manipulate  the  document  object.  In  the  following  example  the  write0  method  must  be  prepended  with  the  name  of  the  document  object  and  a  period.  The  browser  will  display  this  text  in  the  document's  window.  The  syntax  is   document.write "Hello  to you" ;   The  writelnO  method  is  essentially just  like  the  writeQ  method,  except  when  the  text  is  inserted  within  HTML     or     tags,  in  which  case  writelnO  will  insert  a  new- line  at  the  end  of  the  string.  The  HTML     tag  is  used  to  enclose  preformatted  text.  It  results  in  "what  you  see  is  what you  get."  All  spaces  and  line  breaks  are  rendered  lit- erally,  in  a  monopitch  typeface.  The     tag  is  an  obsolete  HTML  tag  that  functions  much  like  the     tag.   EXAMPLE  2.2        Printing  Output           Comparing the  document.write  and       document .writeln  methods     2.3  Generating  HTML and  Printing Output   39   E X A M P LE    3  4  5  6  7   8     C O N T I N U E D    2 .2   document.writeln "Three,  " ;  document.write "Blast off.... " ;     break tag    document.write "The browser you are using is  "  +      navigator.userAgent +  " " ;             *Lines are broken due to size of this page.  If you cut   and paste these programs into an editor,  make sure  strings  start and end with qutoes!!!*    document.writeln "With the  HTML &lt;pre&gt;  document.writeln "the  writeln  method produces a  document.writeln "Slam" ;  document.writeln "Bang" ;  document.writeln "Dunk!" ;     tags,  " ;  newline." ;   9  10                    E X P L A N A T I ON   1   2   The  document. writeQ  method  does  not  produce  a  newline  at  the  end  of  the  string  it  displays.  HTML  tags  are  sent  to  the  HTML  renderer  as  the  lines  are  parsed.  The  document.writelnO  method  doesn't  produce  a  newline  either,  unless  it  is  in  an  HTML     tag.   3  Again,  the  document.writeQ  method  does  not  produce  a  newline  at  the  end  of  the   4   5  6   string.  The     tag  is  added  to  produce  the  line  break.  The  document.writeQ  method  does  not  produce  a  newline.  The     tag  takes  care  of  that.  userAgent  is  a  special  navigator  property  that  tells  you  about  your  browser.  The  first JavaScript  program  ends  here.  The  HTML     tag  starts  a  block  of preformatted  text;  that  is,  text  that  ignores  formatting  instructions  and  fonts.  This  tag  starts  the JavaScript  code.   7  8  When  enclosed  in  a     tag,  the  writelnO  method  will  break  each  line  it  prints  with  a  newline;  otherwise,  it  behaves  like  the  writeQ  method   i.e.,  you  will  have  to  add  a     tag  to  get  a  newline .    40   Chapter 2      Script Setup     Printing Output  - Mozilla  Firefox  File   View  History   Bookmarks   Edit   Tools  Help   C   i f i1    j   file:   C: wamp www example2.2.html   Q  Printing  Output  Comparing the document write and document writeln methods  One,  Two,  Three,  Blast  off....  With  the  HTML     tags,  the  writeln  method  produces  a  newline.  Slam  Bang  Dunk!   Figure 2.3  The output from  Example 2.2 demonstrates the difference between the  document. wrifeO and  document.writeln    methods.   2.4  About  Debugging   Have you ever tried to draw a picture or do your resume for the first time without a mis- take either in the layout, order, type, style,  or whatever?  In any programming language,  it's  the  same  story,  and JavaScript is  no  exception.  It's  especially  tricky with JavaScript  because you have  to  consider  the HTML  as well  as  the JavaScript code when your  page  doesn't  turn  out right.  You  might get  errors  on  the  console  or  get  a  totally blank page.  Finding  errors  in  a  script  can  get  quite  frustrating  without  proper  debugging  tools.  Before we go any further, this is a good  time  to get acquainted with some  of the types of  errors  you  might  encounter.   2.4.1  Types of Errors  Load  Or Compile Time.  Load-time  errors  are  the  most  common  errors  and  are  caught  by JavaScript  as  the  script  is  being  loaded.  These  errors  will  prevent  the  script  from  running  at  all.  Load-time  errors  are  generally  caused  by mistakes  in  syntax,  such  as missing parentheses in  a function  or misspelling a keyword.  You might have  typed  a  string  of  text  and  forgotten  to  enclose  the  string  in  quotes,  or  you  might  have  mis- matched  the  quotes,  starting with  single  quotes  but  ending with  double  quotes.   Runtime.  Runtime  errors, as the name suggests,  are those errors that occur when the  JavaScript program  actually starts  running.  An  example  of a  runtime  error would  be  if  your  program  references  an  object  or  variable  that  doesn't  exist,  or you  put some  code  between  the  .1.  -  j...   it  should  have  been  placed  within   the      tags  and   .    i.   _ j...  ^   -.   ^   _  ^   r   .  .   .1   .1   _   .    2.5  Debugging Tools   41   For  example,  if you  are  checking to  see  if two  expressions  are  equal, you  should  use  the  ==  equality  operator,  not  the  =  assignment  operator.   2.5  Debugging Tools   To  see  your  where  errors  have  occurred  in  your JavaScript  programs,  modern  browsers  provide  an  error  console  window.   Table  2.2  Browser  Error  Console   Browser   How to Invoke Error Console   Internet  Explorer   Double-click  the little yellow triangle in the left corner   Firefox   Safari   Opera9   Tools Error  Console   Develop Show Error  Console   Tools Advanced Error  Console script Options    2.5.1  Firefox  Error Console.  You  can  bring  up  the  error  console  for  Firefox  by  going  to  "Tools Error  Console"  The  Console  displays  the  lines  containing  the  errors.  Leave  the  console  open  and  watch  your  errors  build  up.  There  is  a  "Clear"  option  to  refresh  the  error  console  window.  The  following JavaScript  program  contains  an  error  that  will  be  displayed  in  the  Error  Console  window  as  shown  in  Figure  2.4.   E X A M P LE    2.3           First  JavaScript  Sample              <script type =  "text javascript"»   1  2   document.writeln " Welcome to the JavaScript World!  ;      Bug in line2:  Missing double quote!!        42   Chapter 2      Script Setup   Figure 2.4  Firefox  Error Console   go to  Firefox Tools Error Console .    2.5  Debugging Tools   43   Firebug.  Firebug is a Firefox extension that has become very popular with Web devel- opers  for  editing,  debugging,  and  monitoring  CSS,  HTML,  and JavaScript  live  in  any  Web  page   see  Figures  2.5  and  2.6 .  It  is  easy  to  download  and  can  be  found  in  the  Firefox  Tools  menu.   http:  getfirebug.com    I   ft    nent  Evolved I    Ù    i'l- fireb   Firebug web  development  evolved   Inspect   hl.siteTitle   Console   HTML   CSS   :  div.contentinner  Script   DOM   :  div.contentinner3  Net   div.contentinner2   di  ^   Options  -  Style   Layout   DOM   y     Options  T   Œ      E       E       0  <div   c l a s 3 = " c o n t e n t I n n e r 3 ">  E   <div  c l a 3 3 = " c o n t e n t I n n er   El   E            Thought 3  on  s o f t w a re   and   l i f e .     E      E   <div  i d = " p o s t 0 0 0 1 7 0"   c l a s 3 = " b l o g P a s t1   m   "">   Inherited  from  body   s i t e T i t le    {   sheet.css   line  103    *   f o n t - s i z e:    l . S e m;   l  r   sheet.css   line  10    l e t t e r - s p a c i n g:    -lpx,"   Inherited  from  d i v  c o n t e nt   ^ c o n t e nt   {   sheet.css   line  122    t e x t - a l i g n:    l e f t ,"   m    dick the tabs above to see screenshots of each.    Firebug  integrates with  Firefox to  put  a  wealth  of web  development  tools  at  your  fingertips  while  you  browse.  You  can  edit,  debug,  and  monitor  CSS,  HTML,  and  JavaScript  live  in  any web  page.   Install  Firebug from  addons.mozilla.org   Firebug  Evolved:   Future  awl  Past  Releases  for  newer  ill'I  oliler  Firefox   Figure 2.5  The Firebug Web site.    44   1   You  can  also  use  a version  of Firebug in  Internet Explorer,  Opera,  and  Safari  called   Firebug  Lite.  See  http:  getfirebug.com lite.html.   Chapter 2      Script Setup   :t  First  JavaScript  Sample  -  Mozilla  Firefox  File  Edit  View  History  Bookmarks  Tools  Help   T   C   tili   l]   fi1e:   C: wamp www example2,4,htmJ   Q  First  JavaScript  Sample   This  is   insf  n l i t i ri   old  HTMT,  shitY   O  F i r e b ug   -  First  JavaScript  Sample  file  View   Help   dear   Profile    1   "Reload     unterrninated  string  literal   to   a c t i v a te   window  c o n s o l e"   Console     HTML   CSS   Script   DOM  Net   IP   d o c u m e n t . w r i t e I n {"   Welcome   to    t he   J a v a S c r i pt   W o r l d !     ; \n   example2.-i.htm]  {line  14    l   Run  Clear  Copy   Figure 2.6  The  Firebug  Debugging  window.   2.5.2  Debugging in Internet Explorer 8  When an error occurs in your JavaScript program, a little yellow triangle appears in the bot- tom left corner of the browser window. If you double-click the triangle, a debugging window  opens explaining the error and the line number where it occurred   see Figure 2.7 .   Internet Explorer Developer Tools.  Every installation  of Internet Explorer  8  comes  with the Developer Tools for debugging JavaScript  Microsoft JScript , HTML, and  CSS on  the fly. It comes with a plethora of features including the ability to control script execution,  set break points, inspect variables, profile performance, edit and prototype new designs, and  so  on.  See  http:  msdn.microsoft.com en-usAibrary dd565628CVS.85 .aspx.   To start debugging your JavaScript programs, open the Developer Tools and switch to   E BB   G  off   a  1    2.5  Debugging Tools   45   This is just plain old HTML  stuff.   Ü  Windows  Internet  Explorer   A   Errors  on  this  web page  might cause  it to  work  incorrectly   To see this message in the future, double-dick the warning icon on the status bar.   Un t e rm  in a ted  string constant  example!. 4. html  Code:0  URI: file :   C:  wamp www example2.4. html   Line: 9  Char:  66      Always  show  this  message  for  webpage  errors   t   Hide  details   Copy  error details   3lose   Figure 2.7   Internet Explorer 8 after clicking the little yellow triangle in the bottom left corner.   First JavaScript Sample  - Windows  Internet  Explorer      - <£  C:\wamp\wnv\exomple2.4. html   Fie  Edit  V few  Favorites   Tools   Help   Favorites   fè  Pint  JovaSuipL simile   J   T h is    is   j u st   p l a in   o ld   H T ML   s t u f f.   V*  ¿t  X  J   AOL Search   û  -  Ê3   3   ffèi  -  Page  -  Safety  -  T<   1   k  First JavaScript Sample  Developer Tools  Hie   find  Disable  View  Outline   HTML  CSS   [Script]  Proffer   Images  Cache  Tools  Validate  OrowserMode;  ICO  Document Mode;  ICO Standards   Search 5cnpt   ¡3<   JJ   I,   [  Stop Debugging  ]   cxamplc2.4.html   < ÎDOCTYPE  htsil  PUBLIC  "    B3C  DTD  XHTHL  1.0  S t E i e t     E N"    ' n t tp  :      w ¥.  w J. o r g TK xhtmi l   m i     x h t ml  l -s  tx 1 c t. dtcr1 >   Breakpoints   I  Console  LOG: createThemeSelectar: overrideThsme — null  Lot: MessageListview : display holder: Inbox   Locals  Watch   Cal Slack   <ht-J01  volns="hr.r.p :   HHH.wi. or j  l  qqq xhrji 1 "  1 Fing="enrr  vml : 1 fl LOG: Action: GetMessageList folder: Inbox           6;   7  8  9\     D  L    FiE3t  JavaScript  Sample                 LOG: debug: _selectPlugin AIM  IOG: rfchig:  wfertPfc igin AIM  LOG: ALUUII; GelMe»ayeLiit fulda : Iiliux  LOG: MessageListView: displayFolder: Spam  LOG: Action; GetMessageList folder; Spam  LOG: MessaqelistView : display Folder: Inbox  LOG: Action: GetMessageList folder: Inbox  LOG: getMessageList: new message tor inbox  LOG: ChectaJswMsssagesr stateTokan - lf  stateChange 1   rinruuenr..  i tH  r.el n  ,r TiTp 1 rnwp  tn  t he   .lavaïïrript.  S  LUfc: dojo.io.script error[ob]ect trror]       Dug  in  l i n e 2;   H i s s i ng   doub  LOG: PfcjginDefModel:loadData - error. Retrying 2 attempts left        T h is   is  j u st   p l a in   o ld   IITHL  s t u f f.    Unterminated string constant   LOG: crcotcThcmcSclcctor : ovcrridcTheme — null  LOfa: OiecNWewMessaaes: stateloken-l. statecharwe l    46   Chapter 2      Script Setup   2.5.3  The JavaScript: URL Protocol  For  simple  debugging  or  testing  code,  you  can  use  the  URL  pseudoprotocol, JavaScript:  followed by any valid JavaScript expression or expressions separated by semicolons.  The  result  of  the  expression  is  returned  as  a  string  to  your  browser  window,  as  shown  in  Example  2.4  and  Figures  2.9,  2.10,  and  2.11.   F O R M AT   JavaScript: expression   E X A M P LE    2.4   JavaScript : 5 + 4   0  A 0 L . c om   -  W e l c o me   to  AOL  -  W i n d o ws   I n t e r ne   File  Edit  View   Favorites   Tools  Help   ^ fr   ¿>  V   javascript:  5  +  4   fr*-   E Search the Web   Favorites   AOL.com - Welcome to AOL   Figure  2.9   Internet  Explorer and  the  JavaScript:  protocol.   F i r e f ox   File   Edit   Viav  History   Tools  Help   ^ ¿ß    -   C            javascript:  5  +  4   [J    javdstri it:04.2 15"'b2U+0'b20J   Figure 2.10  Mozilla  Firefox and  the  JavaScript: protocol.   W e l c o me   to  O p e ra   -  O p e ra   File   Edit   View   Bookmarks  Widgets   Tools   Help        m   IMl  Welcome  to  Opera    2.6  JavaScript and  Old  or Disabled  Browsers   47   2.6  JavaScript and  Old  or  Disabled  Browsers   2.6.1  Hiding JavaScript from Old Browsers  Is JavaScript Enabl@d?  The  answer  is  most  probably  "yes."  There  are  many  ver- sions  of browsers  available  to  the public and  the  vast majority of the  public uses Firefox,  Opera  or  Internet  Explorer.  So  why worry?  Well, just  because  a  browser  supports Java- Script  does  not  mean  that  everyone  has JavaScript  enabled.  There  are  also  some  older  text  browsers  that  don't  support JavaScript,  but  today it's  more  likely  that JavaScript has  been  disabled  for  security  reasons  or  to  avoid  cookies  than  because  the  browser  is  old.  Cell  phones,  Palm  handhelds,  and  speech  browsers  for  the  visibly  disabled  provide  browser  support,  but  do  not  necessarily  have JavaScript.  There  has  to  be  some  alterna- tive  way  to  address  those  Web  browsers   see  http:  www.internet.com .   Hiding JavaScript.  If you put a script in a Web page, and the browser is old and doesn't  know what a     tag is,  the JavaScript code will  be  treated  as regular  HTML.  But if you  enclose JavaScript  code  within  HTML  comment  tags,  it will  be  invisible  to  the  HTML  Ten- derer and, therefore, ignored by browsers not supporting JavaScript. If the browser has Java- Script  enabled,  then  any  HTML  tags   including  HTML  comments   inserted  between  the        tags will  be ignored.  Hiding JavaScript in comment tags is a  common prac- tice used in JavaScript programs.  It is introduced here so that when you notice these embed- ded  comments  in  other's programs,  you will  understand why.  See  Example  2.5.   E X A M P LE    2.5        01d Browser s           1  2  3  4  5       <!-- Hiding JavaScript from Older Browsers  document.write " Welcome  to Maine! " ;     Stop Hiding JavaScript from Older Browsers -->          Bailey's  Island               E X P L A N A T I ON   1   The  JavaScript  program  starts  here.  Browsers  that  don't  support  JavaScript  will  skin  over  tbis  onenina    tat?    48   Chapter 2      Script Setup   E X P L A N A T I ON     CONTINUED    3   4   The document.write method  displays  this line in the page.  Any HTML  tags inserted  in  the  quoted strings will  be handled  by the  HTML renderer. JavaScript does  not  know how to interpret HTML by itself.  If the browser supports JavaScript,  the line  Welcome  to  Maine!  will  appear just  above  the  image.  If the  browser  does  not sup- port JavaScript,  or has it disabled,  this section of code is ignored.  See  the  two  ex- amples  of output shown  in  Figures  2.12  and  2.13.  This  line  starts with  two  slashes,  the  start  of a JavaScript  comment.  This  is  done  so  that  if JavaScript  is  interpreting  this  section,  it  won't  see  the  HTML  closing  comment tag,  —>.  Why  don't we want JavaScript  to  see  the  closing tag if it  could  see  the  opening  tag?  Because JavaScript would  see  the  double  dash  as  one  of its  special  operators,  and produce  an error.  Netscape's  error:   Error:  missing ; before statement   tile:   7C:  sambar50 docs ch1  old2. html   O Source File:        S t op   H i d i ng   J a v a S c r i pt   f r om   O l d er   B r o w s e rs   ->   5   The JavaScript program  ends  here with  its  closing     tag.   Figure 2.12  Example 2.5 output in a JavaScript-disabled  browser.    2.6  JavaScript and  Old  or Disabled  Browsers   49   Welcome  to  Maine!   r   Bailey's  Island   Figure  2.13  Example  2.5 output in  a  JavaScript-enabled  browser.   The    Tag.  Modern  browsers  provide  a set  of tags  called      that enable you to provide  alternative information to browsers that are  either unable to read  JavaScript or have it turned off.  All JavaScript-enabled browsers recognize the   tag.  They will just  ignore  whatever  is  between     and .  Browsers  that  do  not  support JavaScript  do  not  recognize  the     tags.  They will  ignore  the  tags  but will  display whatever  is  in between  them.  See  Example  2.6.   E X A M P LE    2.6            Has JavaScript been turned off?                           document.write "Your browser  supports  JavaScript!" ;   Please turn JavaScript on if you want to see this page!       Firefox &gt; Tools &gt;  Options &gt; Content &gt;   Enable JavaScript    1  2  3   4    50   Chapter 2      Script Setup   E X A M P LE      C O N T I N U E D    2 .6                  E X P L A N A T I ON   1  2  3   4  5   The JavaScript  program  starts  here  with  the  opening     tag.  This  line  is  displayed  on  the  Web  page  only if JavaScript  is  enabled.  The     tag  is  read  by  browsers  that  support JavaScript.  They will  ignore  ev- erything  between  the     and     tags.  Disabled  browsers  will  not  recognize  the     tag  and  thus  ignore  them,  displaying  all  enclosed  text.  JavaScript-disabled  browsers  will  display  the  message  shown  in  Figure  2.14.  The     tag  ends  here.   Has JavaScript  been turned off?  - Mozilla  Firefox   I  File   Edit   View   History   Bookmarks   Tools   Help   C   ffl   j   tile :    C :  wamp www example 1.7. html    ù     1   html  code  ch...   ¡ ¿j   The  W3C  Ma...   J  Has  Java5cri...   J  Has  Java5cri...   [J  Has  Java5cri...   J  Has  Java5cri...   J  Has  Java5cri...   L]  Has  1   Please  turn JavaScript  on if you want to  see  this  page!  Firefox  >  Tools  >  Options  >  Content >  Enable  Javascript  IE  >  Tools > Internet Options > Security  >  Custom Level  >Secnrity Setting >  Scripting  >  Enable   Figure  2.14  Output from  Example  2.6.   2.7  What You Should  Know   This  chapter  introduced  you  the JavaScript,  the  language.  You  should  now  be  able  to  create  a simple  script  and  execute  it in  the  browser window.  Here  are  some  things you  should  know:   1.  How  HTML  and JavaScript  coexist.  2.  Understand  the  syntax,  or  how  to  write  correct JavaScript  statements.  3.  How  to  execute  a JavaScript  program.  4.  About  case  sensitivity,  special  words  called  reserved  words  or  keywords,  and   how JavaScript  handles  whitespace,  that it  is  free  form.  -T-l   1   1           C       _        What You Should  Know   7.  How  and why you would  create  a  .js  file.  8.  How  to  create  and  quote  a  string,  and  how  to  use  the  writeln    method.  9.  Identify  three  types  of errors  and  use your  browser's  debugging  tools.  10.  How  to  hide JavaScript  from  old  browsers.    68 Chapter 2     Script Setup   Exercises   1.   What  is  a  reserved  word?  Give  an  example.   2.   Is JavaScript  case  sensitive?   3.   What  is  the  purpose  of  enclosing  statements  within  curly  braces?   4.   What  is  the  latest  version  of JavaScript?  Where  can  you  find  this  information?   5.   What  is  the  difference  between  the JavaScript  src  and  type  attributes?   6.   How  would  you  concatenate  the  following  three  strings  with JavaScript?   "trans"   "por"   "tat ion"   7.   Write  a  script  that  demonstrates  how  concatenation  works.   8.   Create  a JavaScript program  that will  print  "Hello, world!  Isn't life  great?"  in  an  Arial  bold  font,  size  14,  and  make  the  background  color  of  the  screen  light  green.   9.   Add  two  strings  to  the  first JavaScript  program—your  first name  and  last  name—concatenated  and  printed  in  a  blue  sans  serif  font,  size  12.   10.   In  the  Location  field  of your  browser,  test  the  value  of  an  expression  using  the  JavaScript:   protocol.   11.  Find  the  errors  in  the  following script:           Finding  Errors           <script  type="text javascript"   document.writeln "Two,  "   document.writeln   "Three,  "   document.write 'Blast  off.... " ;    chapter 3   The Building Blocks:  Data Types, Literals,  and Variables   3.1  Data Types   A  program  can  do  many  things,  including  calculations,  sorting names,  preparing phone  lists,  displaying images, validating forms,  ad infinitum.  But to  do  anything,  the program  works with the data that is given to it.  Data types specify what kind of data, such as num- bers  and  characters,  can  be  stored  and  manipulated  within  a  program.  JavaScript  sup- ports  a  number  of  fundamental  data  types.  These  types  can  be  broken  down  into  two  categories,  primitive  data  types  and  composite  data  types.   3.1.1  Primitive Data Types  Primitive  data  types  are  the  simplest  building  blocks  of a  program.  They  are  types  that  can  be  assigned  a  single  literal  value  such  as  the  number  5.7,  or  a  string  of  characters  such  as  "hello".  JavaScript  supports  three  core  or  basic  data  types:   In  addition  to  the  three  core  data  types,  there  are  two  other  special  types  that consist      numeric     string     Boolean   of a single  value:      null     undefined   Numeric  Literals.  JavaScript supports both integers and floating-point numbers.  Inte- gers  are whole numbers  and  do not contain  a decimal point, such  as  123  and -6.  Integers  can  be exnressed  in  decimal  fbase  1 OV  octal  fbase 8V  and  hexadecimal  fbase  16V  and  are    54   Chapter 3      The  Building  Blocks:  Data Types,  Literals,  and Variables   Floating-point  numbers  are  fractional  numbers  such  as  123.56  or  -2.5.  They  must  contain a decimal point or  an  exponent specifier,  such  as  1.3e-2.  The letter  "e"  for  expo- nent  notation  can  be  either  uppercase  or  lowercase.   JavaScript  numbers  can  be  very  large   e.g.,  10308  or  10~308  .   3.1   E X A M P LE  12345  23 .45  . 234E-2  .234e+3  0x456fff  0x456FFF  0777   integer  float  scientific  notation  scientific  notation  hexadecimal  hexadecimal  octal   String  Literals and Quoting.  String literals  are rows  of characters enclosed in either  double  or  single  quotes.1  The  quotes  must  be  matched.  If the  string  starts  with  a  single  quote,  it  must  end  with  a  matching  single  quote,  and  likewise  if it  starts  with  a  double  quote,  it must  end  with  a  double  quote.  Single  quotes  can  hide  double  quotes,  and  dou- ble  quotes  can  hide  single  quotes:   "This is a string"  'This is another string1  "This is also  'a string1  "  'This is  "a string"'   An  empty  set  of quotes  is  called  the  null  string.  If a  number  is  enclosed  in  quotes,  it   is  considered  a string;  for  example,  "5"  is  a string,  whereas  5  is  a  number.   Strings  are  called  constants  or  literals.  The  string  value  "hello"  is  called  a  string  con-  stant  or  literal.  To  change  a  string  requires  replacing it with  another  string.   Strings  can  contain  escape  sequences   a  single  character  preceded  with  a  backslash ,  as shown in Table 3.1.  Escape sequences  are  a mechanism  for  quoting a single  character.   Table 3.1  Escape Sequences   Escape  Sequence   What  It  Represents   V   Single quotation mark   Double quotation mark    3.1  Data Types   55   Table  3.1  Escape  Sequences   continued    Escape  Sequence   What It Represents   Newline   Return   Form  feed   Backspace   Escape   Backslash   Special  Escape  Sequences   \n   \r   Y   \b   \e   \\   \XXX   \xXX   \uXXXX   The character with the Latin-1  encoding specified by up to  three  octal digits XXX between 0 and 377.  \251  is the octal sequence for the copyright symbol.   The character with the Latin-1  encoding specified by the  two hexadecimal digits XX between 00 and FF.  \xA9 is the hexadecimal sequence for the copyright symbol.   The Unicode character specified by the four hexadecimal  digits XXXX.  \u00A9  is the Unicode sequence  for the copyright symbol.   E X A M P LE    3.2        Escape  Sequences-; titlex head>                <!-- Hide script  from old browsers.  document.write "\t\tHello\nworld!\n" ;  document.writeln "\"Nice day,  Mate.\"\n" ;  document.writeln 1 Smiley face:  \u263a\n1 ;    End hiding here.  -->   1  2  3  4  5               56   Chapter 3      The  Building  Blocks:  Data Types,  Literals,  and Variables   E X P L A N A T I ON   1  2  3   4   5   The  escape  sequences  will  work  only  if in  a     tag  or  an  alert  dialog  box.  The JavaScript  program  starts  here.  The  write    method  sends  to  the  browser  a  string  containing  two  tabs   \t\t ,  Hello,  a  newline   \n ,  world!,  and  another  newline   \n .  The  writelnO  method  sends  to  the  browser  a string  containing a  double  quote   V ,  Nice  day,  Mate.,  another  double  quote   V ,  and  a  newline   \n .  Because  the  writelnO  method  automatically  creates  a  newline,  the  output  will  display  two  newlines:  the  default value  and  the \n  in  the  string.  This  string  contains  a  backslash  sequence  that  will  be  translated  into  Unicode.  The Unicode hexadecimal  character  263a is preceded  by a \u.  The  output is  a smi- ley  face.  See  Figure  3.1.   6   Mozilla  Firefox  File  Edit  View  History  Bookmarks  Tools  Help   *  C  C  ^  Q  file:    C:  wamp www exercise3.2. html   Tscr...  Has Java5cr...  Has JavaScr...   hiding javas...  ¡^Hiding Java...   H e l lo   w o r l d!   " N i ce   d a y,   M a t e ."   S m i l ey    f a c e:       Figure 3.1  Escape sequences.   Putting Strings Together.  The  process  of joining  strings  together  is  called  concate- nation.  The string concatenation operator is  a plus sign   + .  Its  operands  are  two  strings.  If one  string is  a number  and  the  other  is  a  string, JavaScript will  still  concatenate  them  as strings.  If both  operands  are numbers,  the  + will  be  the  addition  operator.  The  follow- ing  examples  output  "popcorn"  and  "Route  66",  respectively.   document.write "pop"  +  "corn" ;  document.write "Route " + 66 ;   The  expression  5+100  results  in  105,  whereas  "5"  +  100  results  in  "5100".   Boolean  Literals.  Boolean literals  are  logical values  that have  only one  of two values,    3.1  Data Types   answer1 = true;   57   if   answer2 == false   { do something;  }   The typeof Operator.  The  typeof operator  returns  a  string  to  identify  the  type  of  its  operand   i.e.,  a  variable,  string,  keyword,  or  object .  The  values  returned  can  be  "num- ber",  "string",  "boolean",  "object",  "null",  and  "undefined".  You  can  use  the  typeof oper- ator  to  check whether  a variable  has  been  defined  because  if there  is  no  value  associated  with  the  variable,  the  typeof operator  returns  undefined.   F O R M AT   typeof operand  typeof   operand    E X A M P LE   typeof 54.6   typeof "yes"    E X A M P LE       3.3    The  typeof  Operator              1  2  3         document.write typeof 55 ," " ;     Number  document.write typeof "hello there" ," " ;  document.write typeof true ," " ;     Boolean             String           E X P L A N A T I ON   1  2   The  integer,  55,  is  a  number  type.  The  text  "hello  there"  is  a  string  type.    58   Chapter 3      The  Building  Blocks:  Data Types,  Literals,  and Variables   The  typeof Operator  Mozilla  Firefox  Tools   Bookmarks   History   View   Edit   File   Help      C  X   f'nf   file:   C: wamp www example3.3.html   1  ^  The  typeof  Operator   J   The  t y p e of   O p e r a t or   number  string  boolean   Figure  3.2  Output from  Example  3.3.   Null a nd Undefined.  The  difference  between  null  and  undefined  is  a  little  subtle.  The  null  keyword  represents  "no  value,"  meaning  "nothing,"  not  even  an  empty  string  or  zero.  It is  a  type  of JavaScript object   see  Chapter  8,  "Objects" .  It  can be used  to  ini- tialize  a  variable  so  that  it  does  not  produce  errors  or  to  clear  the  value  of a  variable,  so  that  there  is  no  longer  any  data  associated  with  that  variable,  and  the  memory  used  by  it  is  freed.  When  a  variable  is  assigned  null,  it  does  not  contain  any valid  data  type.   A  variable  that  has  been  declared,  but  given  no  initial  value,  contains  the  value  unde- fined  and  will  produce  a  runtime  error  if you  try  to  use  it.   If  you  declare  the  variable  and  assign  null  to  it,  null  will  act  as  a  placeholder  and  you  will  not  get  an  error.   The  word  undefined  is  not  a  keyword  in JavaScript.  If  compared  with  the  ==  equality  opera- tors,  null  and  undefined  are  equal,  but  if  compared  with  the  identity  operator,  they  are  not  identical   see  Chapter  5,  "Operators" .    The  typeof Operator with Null and Undefined        document.write " null  is type " +  typeof null ," " ;  document.write " undefined  is type  "+  typeof undefined ," " ;   1  2   E X A M P LE       3.4                                IV   P  I  A  MA   T  I  H M    3.2 Variables   59   File   Edit   View   History   Bookmarks   lools   Help   tile:    C:  wamp www exercise3.4. html   The  typeot  Operator   The  typeot  Operator   mill is type object  undefined is  type  undefined   Figure  3.3  Output from  Example  3.4.   3.1.2  Composite Data Types   We  mentioned  that  there  are  two  types  of  data:  primitive  and  composite.  This  chapter  focuses  on  the  primitive  types:  numbers,  strings,  and  Booleans—each  storing  a  single  value.  Composite  data  types,  also  called  complex  types,  consist of more  than  one  compo- nent.  Objects,  arrays,  and  functions,  covered later  in  this book,  all  contain  a collection  of  components.  Objects  contain  properties  and  methods,  arrays  contain  a  sequential  list  of  elements,  and  functions  contain  a  collection  of statements.  The  composite  types  are  dis- cussed  in  later  chapters.   2  Variables   Variables  are  fundamental  to  all  programming  languages.  They  are  data  items  that  rep- resent  a  memory  storage  location  in  the  computer.  Variables  are  containers  that  hold  data such  as  numbers  and  strings.  Variables  have  a  name,  a  type,  and  a value.   num = 5;  friend =      name is  "num",  value is 5,  type is numeric   "Peter";     name is  "friend",  value is  "Peter",      type is string   The values  assigned  to  variables  can  change  throughout the  run  of a program  whereas  constants,  also  called  literals,  remain  fixed.  JavaScript  variables  can  be  assigned  three  types  of  data:      numeric     string     Boolean   Computer  programming  languages  like  C++  and  Java  require  that  you  specify  the    76 Chapter 3     The Building Blocks: Data Types, Literals, and Variables   And  if you  were  assigning  a  floating-point  number:  float x = 44.5;   Languages  that  require  that  you  specify  a  data  type  are  called  "strongly  typed"  lan- guages. JavaScript,  conversely,  is  a  dynamically or  loosely typed  language,  meaning that  you  do  not  have  to  specify  the  data  type  of a  variable.  In  fact,  doing  so  will  produce  an  error.  With JavaScript,  you  would  simply  say:   n = 5;  X  =  4 4. 5;   3.2.1  Valid Names   and JavaScript will  figure  out what  type  of data  is  being stored  in  n  and x.   Variable  names  consist  of  any  number  of letters   an  underscore  counts  as  a  letter   and  digits.  The first character must be  a letter or an underscore.  Because JavaScript keywords  do not contain underscores,  using an underscore  in  a variable  name  can  ensure  that you  are  not  inadvertently  using  a  reserved  keyword.  Variable  names  are  case  sensitive;  for  example,  Name,  name,  and  NAme  are  all  different  variable  names.  Refer  to  Table  3.2.   Table  3.2  Valid  a nd   Invalid  Variable  Names   Valid  Variable  Names   Invalid  Variable  Names   namel   pricejtag   _abc   Abc_22   A23   1 Onames   box.front   namelast   A-23   5   3.2.2  Declaring and  Initializing Variables   Variables  must  be  declared  before  they  can  be  used.  To  make  sure  that  variables  are  declared  first,  you  can  declare  them  in  the  head  of  the  HTML  document.  There  are  two  ways  to  declare  a  variable:  with  or  without  the  keyword var.  Although  laziness  might  get  the  best  of you,  it is  a better  practice  to  always  use  the  var keyword.    3.2  Variables   F O R M AT   var variable_name = value;  var variable_name;  variable_name;       initialized  II  uninitialized  11 wrong   To  declare  a  variable  called irstname,  you  could  say   61   var  first_name="Ellie"   first_name  ="Ellie";   var  first_name;   You  can  declare  multiple  variables  on  the  same  line  by  separating  each  declaration   with  a  comma.  For  example,  you  could  say  var first_name,  middle_name,  last_name;   E X A M P LE    3.5        Using the var Keyword        var language="English";  var name;  age;       Variable is initialized      OK,  undefined variable      Not  OK!  var keyword missing ERROR!                     document.write "Language is  " + language + " " ;  document.write "Name is  "+ name + " " ;  document.write "Age is  "+ age +  " " ;   1  2  3   4                   E T W U e i S K W T T S l Si    62   Chapter 3      The Building Blocks: Data Types,  Literals, and Variables   E X P L A N A T I ON    CONTINUED    3   4   The  variable  called  age  is  not  assigned  an  initial  value.  The  var  keyword  is  re- quired.  Without it,  the program produces  errors,  shown in  the  output for Firefox  and  Explorer,  in  Figure  3.4  and  Figure  3.5   on  page  63 ,  respectively.  This  line  will  not be  printed  until  the  variable  called  age  is  defined  properly. Just  use  the var keyword  as  good  practice,  even  if it isn't  always  required!   Figure 3.4  Firefox error  JavaScript Error Console .  The variable  age was  referenced twice on lines 6 and  16 in the actual  program  lines numbered 3 and 4  in  Example 3.5 .  Program was tested twice.   3.2.3  Dynamically or Loosely Typed  Language  Remember, strongly typed languages like  C++  and Java require  that you specify the  type  of data you  are  going to  store  in  a variable when you  declare it, but JavaScript is loosely  typed.  It  doesn't  expect  or  allow you  to  specify the  data  type when  declaring  a variable.  You  can  assign  a string to  a variable  and later  assign  a numeric value. JavaScript doesn't  care  and  at runtime,  the JavaScript interpreter will  convert  the  data  to  the  correct  type.    Variables   Using the  var  Keyword  -  Windows  Internet  Explorer   H.    X   IP   AOL  Search   S 0®   P  ,   File   Edit   View-   Favorites   Tools   Help   ^ o '-  Logitech   -   T f i^    "   X   X   Iweb  Search   P  -  Search the Web   L  SfAJiCH   A OL   {§    O  Sign  In   ^  Favorites     ^   g  Suggested  Sites   -   ®  W e tl   Slice  Gallery  V   Using  the  var  Keyword   Q      3      '   Page  -   Safety  -   Tools  -  Language is English  Name is undefined   Windows  Internet  Explorer   E r r o rs   on    t h is   w eb  p a ge   m i g ht   c a u se   it   to   w o rk   i n c o r r e c t ly   To  see  this  message  in  the  future,  double-dick the  warning  icon  on  the  status  bar.   'age'  is  u n d e f i n ed  examples.  5vars.html   ' a g e'   is  u n d e f i n ed  example3.5vars.html  Code:0  URI :  file :   C : wamp www example 3.5vars. html   Line:  6   Line:  16  Char:  11      Always  show  this  message  for  webpage  errors   i*  Hide  details   C o py   error  details   C l o se   Figure 3.5   Internet Explorer error  Example 3.5 .   Table 3.3  How JavaScript Converts  Data Types   Variable  Assignment  var item = 5.5;  item = 44;  item =  "Today was bummer";  item = true;   Conversion   Assigned a float   Converted to integer   Converted to string   Converted to Boolean    64   Chapter 3      The  Building  Blocks:  Data Types,  Literals,  and Variables   E X A M P LE       3.6   l  2  3  4  5  6  7  8  9  10   11  12  13  14  15    JavaScript  Variables-; title>       var first_name=,,Christian";      first_name is assigned a value  var last_nams=,,Dobbins" ;      last_name is assigned a value  var age =  8 ;  var ssn;  var  job_title=null;          Unassigned variable                  document.write " Name:  " + first_name + "  "   + last_name +  " " ;   document.write " Age:  "  + age + " " ;  document.write " SSN:   "  + ssn +  " " ;  document.write " Job Title:   "  + job_title+" " ;  ssn="xxx-xx-xxxx";  document.write " Now SSN is:  "  + ssn ,  " " ;                             Output :   10  Name:  Christian Dobbins  11  Age: 8  12  SSN:  undefined  13  Job Title:  null  15  Now Ssn  is:  xxx-xx-xxx   E X P L A N A T I ON   1  This JavaScript program  is placed within  the  document head.  Because  the  head  of  the  document is  processed  before  the  body,  this  assures you  that  the  variable  def- initions  will  be  defined  first.  The  string  "Christian"  is  assigned  to  the  variable  called first_name.  The  string  "Dobbins"  is  assigned  to  the  variable  called  last_name.   2  3    3.2  Variables   E X P L A N A T I ON   65   6   The  value  null  is  assigned  to  the  variable  called job_title.  Null  is  used  to  set  a vari- able to an initial value different from other valid types, but if used in an expression  the  value  of null  will  be  converted  to  the  appropriate  type.  The  document  head  ends  here.  The  body  of the  document  starts  here.   7  8  9  A new JavaScript program starts here.  All  the variables declared in the head  of the  document  are  available  here.  Variables  that  are  available  throughout  the  entire  document  are  called  global  variables.   10  The  document.write:    method  concatenates  the  values  of  the  strings  with  the  +   sign  and  sends  them  to  the  browser  to  display  on  the  screen.   11  The  value  of the  variable  called  age  is  displayed.  12  The  variable  called  ssn  was  declared,  but  not  initialized.  It  has  no  value,  which   JavaScript  calls  undefined.   13  The  variable job_title  was  assigned  null,  a  placeholder  value.  The  null  string  is  re-  14  The  variable  ssn  is  assigned  a  string  value.  It  is  no  longer  undefined.  Even  though  the  variable was  declared  in  the  head  of the  document,  as  long as it was  declared,  it  can be  assigned  a value  anywhere  else  in  the  document.   15  The value  of the variable ssn is  displayed.  Figure 3.6  shows  the  output in Internet   turned.   Explorer.   JavaScript  Variables  - Mozilla  Firefox  Tools   Bookmarks   History   View   Edit   File   Help   C   < 5*       D   file:   C: wamp   Name:  Christian Dobbins  Age:  8  SSN:  undefined  J ob   Title:  null  Now  S SN   is:  xxx-xx-xxxx    66   Chapter 3      The  Building  Blocks:  Data Types,  Literals,  and Variables   3.2.4  Scope of Variables  Scope  describes where  a variable  is  visible,  or  where  it can  be  used,  within  the  program.  JavaScript variables  are  either  of global  or  local  scope.  A  global  variable  can  be  accessed  from  any JavaScript  script  on  a  page,  as  shown  in  Example  3.6.  The  variables  we  have  created  so  far  are  global  in  scope.   It is  often  desirable  to  create  variables  that  are  private  to  a  certain  section  of the  pro- gram,  thus  avoiding  naming  conflicts  and  accidentally  changing  a  value  in  some  other  part  of the  program.  Private  variables  are  called  local  variables.  Local  variables  are  cre- ated when  a variable is  declared within a function.  Local  variables must be  declared with  the  keyword,  var.  They  are  accessible  only  from  within  the  function  from  the  time  of  declaration  to  the  end  of the  enclosing  block,  and  they  take  precedence  over  any  global  variable  with  the  same  name.   See  Chapter  7,  "Functions."    3.2.5  Concatenation  and  Variables  To  concatenate  variables  and  strings  together  on  the  same  line,  the  +  sign  is  used.  The  +  sign  is  an  operator  because  it  operates  on  the  expression  on  either  side  of it   each  called  an  operand .  Sometimes  the  +  sign  is  a  string  operator  and  sometimes  it  is  a  numeric  operator  when  used  for  addition.  Addition  is  performed  when  both  of  the  operands  are  numbers.  In  expressions  involving  numeric  and  string  values  with  the  +  operator, Java- Script  converts  numeric  values  to  strings.  For  example,  consider  these  statements:   var temp = "The temperature is  " + 87;     returns  "The temperature is 87"  var message = 25 + " days till Christmas";     returns  "25 days till Christmas"   But,  if both  operands  are  numbers,  then  addition  is  performed:   var sum = 1 0 + 5;       sum is 15   E X A M P LE    3.7         Concatenat ion           var x = 25;  var y = 5 +  "10 years";  document.write  x + " cats"  ,  " " ;  document.write  "almost " + 25 ,  " " ;  document.write  x + 4,  " " ;   1  2  3  4  5    3.3  Constants   67   E X A M P LE     C O N T I N U E D    3 .7           Output :  3  25 cats  4  almost 25  5  6  510 years  7  30 dogs  8  dogs255   E X P L A N A T I ON   L  Variable x is  assigned  a  number.  2  Variable}   is  assigned  the  string  510years.  If  the  +  operator  is  used,  it  could  mean  the  concatenation  of  two  strings  or  addition  of  two  numbers.  JavaScript  looks  at  both  of  the  operands.  If  one  is  a  string  and  one  is  a  number,  the  number  is  con- verted  to  a  string  and  the  two  strings  are joined  together  as  one  string,  so  in  this  example,  the  resulting  string  is  510years.  If  one  operand  were  5  and  the  other  10,  addition  would  be  performed,  resulting  in  15.   3  A  number  is  concatenated  with  a  string.  The  number  25  is  converted  to  a  string  and  concatenated  to  "  cats",  resulting  in  25  cats.   Note  that  the  writeQ  method  can  also  use  commas  to  separate  its  arguments.  In  these  examples  the     tag  is  not  concatenated  to  the  string.  It  is  sent  to  the  writeQ  method  and  appended.   This  time,  a  string is  concatenated  with  a  number,  resulting in  the  string  almost 25.  4  5  When  the  operands  on  either  side  of  the  +  sign  are  numbers,  addition  is  per-  formed.   6  The  value  of y,  a  string,  is  displayed.  7   8   The  +  operators works  from  left  to  right.  Because x and y  are  both  numbers,  addi- tion  is  performed,  25  +  5.  30  is  concatenated  with  the  string  "  dogs".  Because  the  +  works  from  left  to  right,  this  time  the  first  operand  is  a string being  concatenated  to  a  number,  the  number  is  converted  to  string  dogs25  and  concat- enated  with  string  5.   3.3  Constants   The weather  and moods  are  variable;  time is  constant,  and so  are  the  speed  of light, mid-   68   Chapter 3      The  Building  Blocks:  Data Types,  Literals,  and Variables   uppercase  letters,  by  convention  only.  Constants  are  assigned  values  at  the  time  of  the  declaration,  and  it is  impossible  to  modify  them  during  the  run  of the  program.  Caveat:  Firefox,  Opera,  Safari,  Netscape,  and  many  browsers  support  the  JavaScript  reserved  keyword  const  to  declare  constants   see  Figure  3.7 .  It is  important  to  note  that  Internet  Explorer  7  and  8  do  not  support  it,  as  shown  in  Figure  3.8.   E X A M P LE    3.8        Using the  const  Keyword           Can't change   const NOON = 12;  const FREEZING =32;                     document.write "Farenheit temp is " + FREEZING + ". " ;  FREEZING = 32 + 10;  NOON = NOON + " noon";  document.write "Make it warmer " + FREEZING +  ". " ;  document.write "See you at ", NOON,  ". " ;                   E X P L A N A T I ON   The  constant  NOON  is  assigned  12,  a  value  that  will  not  change  throughout  the  execution  of  this  program.  The  constant  FREEZING  is  assigned  32,  a  value  that will  not  change  throughout  the  execution  of  this  program.   3  Now if we  try  to  add  10  to  the  constant,  the  value  of the  constant  doesn't  change.   It's  still  32.  This  time,  we  try  to  concatenate  a  string  to  the  constant  NOON.  It  will  not  be  changed.  The  constants  FREEZING  and  NOON  are  displayed.  They were  not  changed.   1  2   3  4  5   1   2   4   5    Bugs to Watch For   69   !  Using the  const  Keyword  -  Mozilla  Firefox  File   Bookmarks   History   Tools   View   Edit   Help       C   &    Q    file:   C: wamp ^   AOL  Mail:  Simple,  Free,  Fun   Using   F a r e n l i e it   t e mp   is   32  M a ke   it  w a n n er   3 2  S ee   v on   at  12   Figure 3.7  Firefox 3.5.7  supports the  const keyword.   Using  the  const  Keyword  -  Windows  Internet  Explorer   g?J  C : \wamp\www\example3. Bconstants. html   File   Edit   View   Favorites   Tools   Help   fö  Favorites   Q  Using  the  const  Keyword   Webpage  Error   Do  you  want  to  debug  this  webpage?  This  webpage  contains  errors  that  might  prevent  it  from  displaying  or  working  correctly.  If  you  are  not  testing  this  webpage,  click No.   r  Do  not  show  this  message  again   Use  the  built-in  script  debugger  in  Internet  Explorer      Yes   ~    No   Line:  12  Error:  'FREEZING' is undefined   Figure  3.8   Internet Explorer 8 does not support the  const keyword.   4  Bugs to Watch  For   Try to declare all your variables at the beginning of the program, even if you don't have val- ues for them yet. This will help you find misspelled names faster. Watch that you use proper  variable names. Don't used reserved words and words that are too long to remember or type  easily.  Remember  that  variable  names  are  case  sensitive.  MyName  is  not  the  same  as  myName.  Avoid  giving  two  variables  similar names,  such  as MyName  and  myNames.  Avoid  rrl-i unn   V» rtc  M TiMrt^T  nnrl  ATSJIMVC I  "Pw^vn    86 Chapter 3     The Building Blocks: Data Types, Literals, and Variables   What You Should  Know   This  chapter  introduced  you  to  the  fundamental  building  blocks  of  the JavaScript  lan- guage;  that  is,  the  kinds  of data  that  can  be  stored  and  manipulated  within  a  program,  such  as  strings  and  numbers.  To  proceed  to  the  next  chapters,  you  should  know:   1.  What is  meant by primitive  data  types.  2.  What  numeric  literals  are.  3.  How  to  concatenate  strings.  4.  The  two  values  for  a Boolean.  5.  What  the  typeof operator  returns.  6.  What  is  meant  by  null,  undefined.  7.  The  difference  between  a  variable  and  a  constant.  8.  The  difference  between  loosely  typed  and  strongly  typed  languages.  9.  What  scope  is.  10.  What  types  can  be  assigned  to  a variable.  11.  How  to  name  a variable.  12.  When  var  is  used.    Exercises   71   Exercises   1.  Create  a  script  that  uses  the  three  primitive  data  types  and  prints  output  for   each  type.  In  the  same  script,  print  the  following:   She cried,  "Aren't you going to help me?"   2.  Go   to  http:  www.unicode.org charts PDF U2600.pdf  and   find  a  symbol.  Use  Java-  Script  to  display  one  of  the  symbols  in  a  larger  font   +5 .   3.  Write  a  script  that  displays  the  number  234  as  an  integer,  a  floating-point  num- ber,  an  octal  number,  a  hexadecimal  number,  and  the  number  in  scientific nota- tion.   4.  When  is  it  necessary  to  use  the  var  keyword?   5.  Write  a script  that  contains  four variables in  the  head  of the  document:  The  first   one  contains  your  name,  the  second  contains  the  value  0,  the  third  one  is  declared  but has  no  value,  and  the  last  contains  an  empty string.  In  the  body  of  the  document,  write  another  script  to  display  the  type  of  each   use  the  typeof  operator .    chapter 4   Dialog Boxes   4.1   Interacting with the User   Programs like  to  talk,  ask questions,  get answers,  and respond.  In  the  previous  chapter,  we  saw  how  the  writeQ  and  writelnQ  methods  are  used  to  send  the  document's  output  to  the browser.  The  document is  defined in an  object and  writeQ  and  writelnQ  are meth- ods  that  manipulate  the  document,  make  it  do  something.  The  document  object  is  defined  within  a window.  The window is  also  an  object  and  has  its  own  methods.   The window  object uses  dialog boxes  to  interact with  the  user.  The  dialog boxes  are   created  with  three  methods:      alertQ     promptQ     confirm  Q   4.1.1  The alert   Method   The window's  alertQ  method is used  to send  a warning to  the user  or  alert him  or her  to  do  something.  For  example,  you  might  let  the  user  know he  or  she  has  not  entered  his  or her e-mail address correctly when filling out a form, or that his or her browser doesn't  support a certain plug-in,  and so  on.  The  alert box is  also commonly used for  debugging  to  find  out the  results  of a  calculation,  if the  program  is  executing in  an  expected  order,  and  so  on.   The  alertQ  method  creates  a  little  independent  window—called  a  dialog  box—that  contains  a  a  user-customized  message  placed  after  a  small  triangle,  and  beneath  it,  an  OK button.  See  Figure  4.1.  When  the  dialog box pops up,  all  execution  is  stopped until  the  user  clicks  the  OK  button  in  the  pop-up  box.  The  exact  appearance  of  this  dialog  box  miaht  differ  slichtlv  on  different  browsers,  but  its  functionalitv is  the  same    74   Chapter 4      Dialog  Boxes   The  message  for  the  alert  dialog  box  is  any  valid  expression,  variable,  or  a  string  of  text  enclosed  in  matching  quotes,  and  sent  as  a  single  argument  to  the  alertQ  method.  HTML  tags  are  not  rendered  within  the  message  string  but  you  can  use  the  escape  sequences, \n  and \t.  A word  of caution:  Don't overuse  the  alert box  on your Web site.  It  can be seriously annoying for visitors.  Use  the  alert box  for its intended purpose:  to  alert  visitors  about input  or  processing  problems  and  briefly  explain  how  to  correct  them.   F O R M AT   E X A M P LE   alert "String of plain text" ;  alert expression ;   alert "Phone number is incorrect" ;  alert a + b ;   E X A M P LE    4.1        Dialog  Box        Testing the alert method           document.write "It1s a bird,  " ;  document.write "It1s a plane, " ;  alert "It1s  Superman!" ;   l  2   3                  E X P L A N A T I ON   l   The     tag  starts  the  JavaScript  program.  The  JavaScript  engine  starts  exe- cuting  code  from  here  until  the  closing     tag.  JavaScript  does  not  under- stand  HTML  tags  unless  they  are  embedded  in  a  string.  The  document.write    method  sends  its  output  to  the  browser.   2  3  The  alertO  method  will  produce  a  little  dialog  box,  independent  of  the  current  document,  and  all  processing will  be  stopped  until  the  user  clicks  the  OK button.  This  little  box  can  be  moved  around  the  screen  with  your  mouse.    4.1   Interacting with the User   75   Figure  4.1  Using  the  alerfQ  method  with  Firefox   left   a nd   Internet  Explorer   right .   E X A M P LE    4.2           < script           E X P L A N A T I ON   l  2   3  4   l  2  3   4    Using JavaScript  alert box      var messagel="Match your Quotes and  ";  var message2="Beware of Little Bugs  ";  alert "Welcome  to\nJavaScript  Programming!" ;  alert messagel + message2 ;   The JavaScript  program  starts  here  with  the     tag.  Two  variables,  messagel  and  message2  are  assigned  text  strings.  The  alert0  method  contains  a  string  of text.  Buried  in  the  string is  a  backslash  se- quence,  \n.  There  are  a  number  of  these  sequences  available  in  JavaScript   see  Table  3.1  on page  54 .  The \n causes a line break between the two strings.  The rea- son  for  using  the  \n  escape  sequence  is  because  HTML  tags  such  as     are  not  allowed  in  this  dialog  box.  After  the  alert  dialog  box  appears  on  the  screen,  the  program  will  stop  until  the  user  clicks  the  OK  button.  The  alert    method  not  only  accepts  literal  strings  of text,  but  also  variables  as  ar- guments.  The  +  sign  is  used  to  concatenate  the  values  of the  two  strings  together  and  create  one  string.  That  string will  appear  in  the  alert  dialog  box  as  shown  in  the  output  in  Figure  4.2.    76   Chapter 4      Dialog  Boxes   Figure  4.2  After the  first alert box appears a nd   the  user clicks  OK,  the  second  box appears.   4.1.2   The prompt    Method   A  prompt0  method  asks  the  user  for  some  small  amount  of information  such  as  a  pass- word,  completion  of  a  form  input,  or  personal  information,  such  as  nickname  or  title.  Because  JavaScript  does  not  provide  a  simple  method  for  accepting  user  input,  the  prompt  dialog  box  and  HTML  forms  are  used   forms  are  discussed  in  Chapter  11,  "Working with  Forms  and  Input  Devices" .  The  prompt  dialog  box  pops  up  with  a  sim- ple  textfield  box.  After  the  user  enters  text  into  the  prompt  dialog  box,  its  value  is  returned.  This  method  takes  two  arguments:  a  string  of  text  that  is  normally  displayed  as  a question  to  the  user,  prompting  the user  to  do something,  and  another string of text  that is  the  initial  default setting for  the  box.  If this  argument is  an  empty string,  nothing  is  displayed  in  the  box.  The  promptQ  method  always  returns  a  value.  If  the  user  clicks  the  OK  button,  all  the  text  in  the  box  is  returned;  otherwise  null  is  returned.   FORMAT   E X A M P LE   prompt message  ;  prompt message,  defaultText ;   prompt "What is your name?  ",  "  prompt "Where is your name?  " , name  ;   "       ;    77   4.1   Interacting with the User   E X A M P LE    4.3                              E X P L A N A T I ON   1  2  3   4  5   1   2   3   4  5    Using the JavaScript prompt box        var name=prompt "What is your name?",  "" ;  alert "Welcome to my world!  " + name ;  var age=prompt "Tell me your age.",  "Your age:  " ;  if    age == null {      If user clicks the Cancel button   alert "Not sharing your age with me" ;   }  else{   alert age + " is young" ;   }  alert prompt "Where do you live? ",  ""  ;   The  prompt    method  takes  two  arguments,  one  is  the  text  that  will  prompt  the  user  to  respond.  This  text  will  appear  above  the  prompt  dialog  box.  The  second  argument provides  default text that will  appear  at the  far left, inside  the box.  If the  second  argument is  an  empty string,  the prompt box will  be  empty.  After  the  user  types  his  or  her  response  in  the  prompt  textbox,  the  response  is  returned  and  as- signed  to  the  variable  name.  The  alert    method  displays  that  value  on  the  screen.  The  variable  called  age  will  be  assigned  whatever  the  user  types  into  the  prompt  box.  This  time  a  second  argument,  "Your  age:  ",  is  sent  to  the  promptQ  method.  When  the  prompt  box  appears  on  the  screen,  Your Age:  will  appear  inside  the  box  where  the  user  will  type  his  or  her  response.  If the  user  clicks  the  Cancel  button,  the  value  returned  by  the  promptQ  method  is  null.  This  ¡ statement  tests  to  see  if  the  value  of  age  is  null.  If the  return  value  was  null,  this  line  is  printed  in  the  alert  dialog box.  The  promptQ  method  is  sent  as  an  argument  to  the  alertQ  method.  After  the  user  has  clicked  OK  in  the  prompt  box,  the  return  value  is  sent  to  the  alertQ  method,  and  then  displayed  on  the  screen.  See  Figures  4.3  through  4.7.    78   Chapter 4      Dialog Boxes   S  Using the JavaScript  prompt  box  -  Mozilla  Firefox  1  File   Bookmarks   History   Tools   View   Help   Edit      C?   X   'tJBj:'   Ü   file:   C: wamp www exercj   1 ^  Using  the  JavaScript  prompt  box   -  U s i ng   t he   J aJ   [JavaSc ri pt A p p licatio n]    X    W h at   is  your  name?   1  Joe Shmoe   OK   1   [  Cancel      Figure  4.3  Prompt without a  second  default argument.   I^JJsing the  JavaScript  prompt  box  -  Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   X   f o r'    1^3   file:   C: wamp www exercise4.3.html   Using  the  JavaScript  prompt  box   *  U s i ng   t he   J a v a S c r i pt   pr   [ Ja vaSc ri pt A p p licatio n]    X    ^^    Tell  me   your  age.   OK   1   [  Cancel      Figure 4.4  Prompt with a  second  default argument.   4.1.3   The confirmQ  Method   The  confirm  dialog box is used  to  confirm  a user's  answer  to  a question.  The user must  agree  before  the  action is  completed.  You'll  often see  this when placing an  online  order  or  deleting  a  file where  a yes  or  no  confirmation  determines what will  happen  next.  A  question mark will appear in the box with an OK button and a Cancel button.  If the user  clicks  the  OK  button,  true  is  returned;  if  he  or  she  clicks  the  Cancel  button, false  is  returned.  This  method  takes  only  one  argument,  the  question you will  ask the  user.   E X A M P LE    4.4   ^   h t - T nl   ->    4.1   Interacting with the User   79   E X A M P LE    4.4   CONTINUED            alert "Then we can proceed!" ;   if confirm "Are you really OK?"   == true {  }  else{  }   alert "We'11 try when you feel better?  " ;               E X P L A N A T I ON   The  confirm  dialog  box  takes  only  one  argument,  the  question  that  you  want  to  ask  the  user.  It  returns  true  if  the  user  clicks  the  OK  button  and false  if  the  user  clicks  the  Cancel  button.  He  or  she  has  to  click  either  one  to  continue.  If  the  re- turn  value  is  equal  to  true,  then  the  alert    method  on  line  2  will  be  executed.  The  if else  constructs  are  not  discussed  until  Chapter  6,  "Under  Certain  Conditions,"  but  the  way  they  are  used  here  is  to  test  a  true  or  false  alternative  to  make  the  ex- ample  a  little  more  meaningful.  The  user  clicked  OK.  The  alert  dialog box will  display its  message   see  Figure  4.7 .  If  the  user  clicked  Cancel,  this  alert  dialog  box  will  display  its  message   see  Figure  4.7 .   1  2   3   1   2  3   R i s i ng  the  JavaScript  confirm  box  -  Mozilla  Firefox  File   Bookmarks   History   Tools   View   Help   Edit   C*    X   t iî    Ü   file:   C: wamp www example4.4.ht   tag      i  External.js  ...   J  First  JavaSc...   layers  of  a  ...   ^  The    80   Chapter 4      Dialog Boxes   Using the  JavaScript  confirm  box  -  Windows  Interne   ^^  ,. -   j  T   I jg1  C : \wamp\www\example4.4. html   View   Favorites   Tools   Help   File  Edit  x  [p**   i..?  Favorites   I Using  the  JavaScript  confirm  box   H l  f S f  f^   Are  you  really  OK?   Figure 4.6  The confirm dialog  box  Internet Explorer .   Figure 4.7  After the user clicks OK  left  or Cancel   right .   4.2  What You Should  Know   This  is  a short chapter,  but important  for interacting with  users.  You will  find yourself  using  the  alert0  method  more  than  the  prompt    and  confirmQ  methods  because  it  offers  a  quick way  to  help  debug your  programs,  such  as  finding  out what is  being  stored  in  variables,  what  is  returned  from  functions,  the  flow  of  execution,  and  so  on.  Before  going  on,  you  should  know:   1.  To  what  object  the  alert  ,  promptQ,  and  confirmQ  methods  belong.  2.  Why you  don't specify  the  name  of the  object with  these  methods.  3.  The  purpose  of the  alert  dialog box.  4.  How  the  prompt box works  and  how many  arguments  it  takes.  5.  When  you  would  use  the  confirmQ  dialog  box.    Exercises   81   Exercises   1.  What  is  wrong with  the  following  alert  box?   alert "Hello ",  "world! " ;   Create  a JavaScript  program  that  produces  the  previous  alert  box.  When  the  alert  dialog box  appears,  what  does  the  program  do?   2.  What  is  the  return  value  of the  prompt  method  if the  user  doesn't  enter  any-  thing?  Where  is  the  return  value  stored?   3.  Create  a JavaScript program  that prompts  the user  for  a phone  number  and  then   asks  the  user  for  confirmation.    chapter 5   Operators   5.1  About JavaScript Operators   and  Expressions   Data  objects  can  be  manipulated  in  a  number  of ways  by  the  large  number  of  operators  provided  by JavaScript.  Operators  are  symbols,  such  as  +,  -,  =,  >,  and  <,  that  produce  a  result  based  on  some  rules.  An  operator  manipulates  data  objects  called  operands;  for  example,  5  and  4  are  operands in  the  expression  5  +  4.  Operators  and  operands  are  found  in  expressions.  An  expression  combines  a group  of values  to make  a new value,  n  = 5 + 4.  And  when  you  terminate  an  expression  with  a  semicolon  or  a  newline,  you  have  a  com- plete statement   e.g.,  n  = 5 +  4; .   var  sum   t   t   =  5  t   +4   t   t   new variable   operator   operand   operator   operand   In the numeric expression, 5 + 4 — 2,  three numbers are  combined.  The  operators  are  the  +  and - signs.  The  operands  for  the  +  sign  are  5  and  4.  After  that  part  of the  expres- sion  is  evaluated  to  9,  the  expression  becomes  9 - 2.   After  evaluating  the  complete  expression,  the  result  is  7.  Because  the  plus  and  minus  operators  each  manipulate  two  operands,  they  are  called  binary  operators.  If  there  is  only  one  operand,  the  operator  is  called  a  unary  operator.  If there  are  three  operands,  it is  called  a  ternary  operator.  We'll  see  examples  of these  operators  later  in  the  chapter.   The  operands  can be  either strings,  numbers, Booleans,  or  a  combination  of these.  We  have  already  used  some  of the  operators:  the  concatenation  operator  to join  two  strings  together,  the  typeof operator  to  determine  what  data  type  is  being  used,  and  the  assign- ment  nnpr^tnr  liQ^rl  tn  cicci Tn  a  \raInp  tn  a  variciVili*  Nrtw let'«  Irtrtlr  dt  a  nlettinra  rtf Qrlrli-   100 Chapter 5   Operators   5.1.1  Assignment  An  assignment statement  evaluates  the  expression  on  the  right side  of the  equal  sign  and  assigns  the  result  to  the  variable  on  the  left  side  of  the  equal  sign.  The  equal  sign  is  the  assignment  operator.   var total = 5 + 4;  var friend =  "Tony";   total t iriat   variable   I   friend   t  i   assignment   5 + 4 t ress I   "Tony"   expression   5.1.2  Precedence and Associativity   When  an expression contains  a number  of operators  and  operands, such as 5  * 4 + 3   —2.2,  and  the  order  of  evaluation  is  ambiguous,  then JavaScript  must  determine  what  to  do.  This  is  where  the  precedence  and  associative  rules  come  in.  They  tell JavaScript how  to  evaluate  such  an  expression.  Precedence  refers  to  the  way  in  which  the  operator  binds  to  its  operand,  such  as,  should  addition  be  done  before  division  or  should  assignment  come  before  multiplication?  The  precedence  of  one  operator  over  another  determines  what operation is  done first.  As shown in Table  5.1, the operators are organized as a hier- archy,  the  operators  of  highest  precedence  at  the  top,  similar  to  a  social  system  where  those  with  the  most  power   or  money   are  at  the  top.  In  the  rules  of  precedence,  the  multiplication  operator  is  of higher  precedence  than  the  addition  operator,  technically  meaning  the  operator  of  higher  precedence  binds  more  tightly  to  its  operands.  The  assignment  operators  are  low  in  precedence  and  thus  bind  loosely  to  their  operand.  In  the  expression sum  = 5  +  4  the  equal  sign  is  of low precedence,  so  the  expression 5  +  4 is  evaluated  first  and  then  the  result is  assigned  to  sum.  Parentheses  are  of the  highest pre- cedence.  An  expression  placed within  parentheses is  evaluated  first;  thus,  in  the  expres- sion 2  *   10 — 4 ,  the  expression within  the  parentheses  is  evaluated  first  and  that result  is  multiplied  by  2.  When  parentheses  are  nested,  the  expression  contained  within  the  innermost  set  of parentheses  is  evaluated  first.   Associativity refers to  the order in which an operator evaluates its operands:  left to right  in no specified order, or right to left. When all of the operators in an expression are of equal  precedence,  normally  the  association  is left  to  right;  in  the  expression 5  +  4 +  3,  the  evalu- ation  is  from  left  to  right.  In  Example  5.1,  how  is  the  expression  evaluated?  Is  addition,  m n1 tir^li ra H   1111 n i   firct? Ar-irl it-i ^srtiat n.rAc*r  T-irrtit  1oft i^t- 1oft  T-irrtit?   i^t-    5.1  About JavaScript Operators and Expressions   85   In Table  5.1  the  operators  on  the same line  are  of equal  precedence.  The rows  are  in   order  of highest to  lowest precedence.   Table 5.1  Precedence and Associativity   Operator   ++  —   I  %   -   <  <=   >  >=    =   = = =   = =        *   +   +   &   I   A   «   »   »>   &&   II   ?:   Description   Parentheses   Auto increment, decrement   Logical NOT   Multiply, divide, modulus   Add, subtract   Concatenation   Less than, less than or equal to   Associativity   Left to righ   Right to lef   Right to lef   Left to righ   Left to righ   Left to righ   Left to righ   Greater than, greater than or equal to   Left to righ   Equal to, not equal to   Left to righ   Identical to  same type , not identical to   Left to righ   Left to righ   Bitwise AND   Bitwise OR   Bitwise XOR   Bitwise NOT   Bitwise left shift   Bitwise right shift   Bitwise zero-filled, right shift   Logical AND   Logical OR   Ternary,  conditional   Left to right   Left to right   Right to left   Right to left   =  +=  - =  *=   =  %= «=  »=  Assignment    'comma'     Chapter 5      Operators     F i r st    J a v a S c r i pt   Sample        var  result  = 5 + 4*   1 2   4;          <body  bgcolor="yellow"       t e x t = " b l u e ">   < s c r i pt    t y p e = " t e x t   j a v a s c r i p t ">   document.write "result = " + result," " ;   86  E X A M P LE  5.1       l   2   l                   E X P L A N A T I ON   The  order  of associativity is  from  left  to  right.  Multiplication  and  division  are  of a  higher  precedence  than  addition  and  subtraction,  and  addition  and  subtraction  are  of higher  precedence  than  assignment.  To  illustrate  this, we'll use parentheses  to  group  the  operands  as  they  are  grouped  by JavaScript.  In  fact,  if  you  want  to  force  precedence,  use  the  parentheses  around  the  expression  to  group  the  oper- ands  in  the  way you  want  them  evaluated.  The  following  two  examples  produce  the  same  result:   var  r e s u lt   =  5  +  4  *  12     4;   could  be  written   r e s u lt   =    5  +          4  *  12        4    ;   2   The  expression  is  evaluated  and  the  result is  assigned  to  variable,  result.  The  value  of  result  is  displayed  on  the  browser   see  Figure  5.1 .   ^ P r e c e d e n ce   Rules  -  Microsoft  I n t e r n et   Explorer   J  File   Edit   View   Favorites   Tools  Help   J   Back   '   -  0   tSÎ   I  ® Search   [ ^R   J Address   http :   localhost docs precedence. html   result = 17    87   5.1  About JavaScript Operators and  Expressions  E X A M P LE  5.2            Precedence  and Associativity                 l  2  3  4   var x = 5 + 4  * 12   4;  document.writeln   "The result is " + x + " " ;  var x =   5 + 4    *   12   4  ;  document.writeln "The result is " + x  ;                 E X P L A N A T I ON   l  The  variable,  called x,  is  assigned  the  result  of the  expression.   var  x = 5 + 4 * 1 2   4;  results  in  x = 5 + 48   4  results  in  x = 5 + 12  results  in  17  Because  multiplication  and  division  are  higher  on  the  precedence  table  than  addi- tion,  those  expressions  will  be  evaluated  first,  associating  from  left  to  right.  The  result  of the  previous  evaluation,  the  value  of x,  is  sent  to  the  browser.  The  expressions  enclosed  in  parentheses  are  evaluated  first  and  then  multiplied.  var x =   5 + 4    *    12   4  ;  results  in  x = 9 * 3  results  in  27  The  result  of  the  previous  evaluation,  the  value  of x,  is  sent  to  the  browser.  The   2  3   4    88   Chapter 5      Operators   Precedence  and Associate  Bool   History   View   Edit   File   -  C  X   6>   +   j  JavaScript  V..  Q  Dialog  B<   resultl  =  17  result2 = 27   Figure  5.2  Output from  Example  5.2:  Precedence a nd   associativity.   5.2  Types of Operators   5.2.1  Arithmetic Operators   Arithmetic  operators  take  numerical  values   either  literals  or  variables   as  their  oper- ands and return a single numerical value.  The standard  arithmetic operators are  addition   + ,  subtraction    -  ,   multiplication   * ,  and  division     .  See  Table  5.2.   Table  5.2  Arithmetic  Operators   Operator Operands   x + y   x-y   x  * y   x   y   x%y   Function   Addition   Subtraction   Multiplication   Division3   Modulus   a.  The   operator  returns  a  floating-point  division in JavaScript,  not a  truncated  division  as  it does  in  languages  such  as  C  or Java.  For  example,  1 2  returns  0.5  in JavaScript and  1 2  returns  0  in Java.   E X A M P LE    5.3        Arithmetic  Operators-; titlex head>       Arithmetic  operators        5.2  Types of Operators   89   E X A M P LE    5.3   CONTINUED       var numl = 5;  var num2 = 7;  var result = numl + num2;  document.write "numl + num2 = "+ result ;  result = result +   10   2 + 5 ;  document.write " 12 +  10   2 + 5   = " + result ;                  E X P L A N A T I ON   This  is  the  start  of a JavaScript  program.  Variables  numl  and  numl  are  declared  and  assigned  values  5  and  7,  respectively.  The  variable  result  is  assigned  the  sum  of  numl  and  numl.  The results  are  displayed  by  the  browser.  Note  that  the  +  sign in  this  expression is  used  to  concatenate  two  strings.  When  a string is  concatenated  to  a number, Java- Script  converts  the  number  to  a  string.  The  value  stored  in  the  variable  result  is  converted  to  a  string  and joined  to  the  string  on  the  left  side  of the  +  sign.  The  expression on the right side of the  = sign is  evaluated and  assigned  to  the vari- able,  result,  on  the  left  side  of  the  =  sign.   The  parentheses  are  not  needed,  but  used  for  clarity.   The  browser  output  is  shown  in  Figure  5.3.  The  variable  result  is  concatenated  to  a  string  and  displayed.  Script  ends  here.   1  2  3  4  5  6  7   1  2  3  4   5   6  7   !  Arithmetic  Operators  - Mozilla  Firefox  Tools  File   Bookmarks   History   View   Edit   Help       C   &         File:   C: wamp    '  a5c...   layers  of  a  ...   £  The  Three  L...   [J  First   Arithmetic  operators   muni + imuii2  =  12  12  +   10 2  +  5   = 22    90   Chapter 5      Operators   5.2.2  Shortcut Assignment Operators   The  shortcut  assignment  operators  allow you  to  perform  an  arithmetic  or  string  opera- tion  by  combining  an  assignment  operator  with  an  arithmetic  or  string  operator.  For  example,  x = x +  1  can  be  written x+=l.  See  Table  5.3.   Table  5.3  Assignment  Operators   Operator   Example   var x = 5;   x += 3;   x—= 2;   x  *= 4;   x  = 2;   x  **= 2;   x %= 2;   Meaning   Assign 5 to variable x.   Add 3 to x and assign result to x.   Subtract 2  from x and assign result to x.   Multiply x by 4 and assign result to x.   Divide x by 2  and assign result to x.   Square x and assign result to x.   Divide x by 2 and assign remainder to x.   =   +=   -=    =   %=   E X A M P LE       5.4        Assignment  and Shortcut  Operators                  var num=10;  document.write   num  +=2;  document.write   num -= 1;  document.write   num * = 3 ;  document.write   num %= 5 ;  document.write        num is assigned "  + 10 ;    num += 2; num is "  + num  ;  ' num -= 1; num is " + num ;    num *= 3; num is " + num ;   num %= 5; num is " + num ;    5.2  Types of Operators   I  E X P L A N A T I ON    JavaScript  program  starts  here.  The variable  num  is  assigned  10.   l  2  3  Output is sent to  the browser.  4   91   1   The shortcut assignment operator,  +=,  adds  2  to  the variable  num.  This is equiva- lent to  num = num +  1;.  The  shortcut assignment operator, -=,  subtracts  1  from  the  variable  num.  This  is  equivalent to  num = num -  1;.  The  shortcut  assignment  operator,  *,  multiplies  the  variable  num  by  3.  This  is  equivalent to  num  =  num  *  3;.  The shortcut assignment modulus  operator,  %, yields  the integer  amount that re- mains after the scalar  num is divided by 5.  The  operator is called  the modulus op- erator or remainder operator.  The expression var %= 5 is equivalent to  num =  num  % 5;.  JavaScript  ends  here.  The  output is  shown  in  Figure  5.4.   5   6   7   8   ^   Bookmarks       Location:   num  is  assigned  10  num  +=  2;  num  is  12  num  -=  1 ; num is 11  num  *=   3;  num  is  33  num %=   5 ; num is 3   Figure 5.4  Output from  Example 5.4:  Shortcut operators.   5.2.3  Autoincrement and Autodecrement Operators  To  make  programs  easier  to  read,  to  simplify  typing,  and,  at  the  machine  level,  to  produce  more  efficient  code,  the  autoincrement   ++   and  autodecrement    —    oper- ators  are  provided.   The autoincrement operator performs the simple task of incrementing the value of its  operand  by  1,  and  the  autodecrement  operator  decrements  the  value  of its  operand  by  1.  The  operator  has  two  forms:  the  first  form  prefixes  the  variable with  either  ++  or —   e.g.,  ++x  or  —x ;  the  second  form  postfixes   places  the  operator  after   the  variable  namp  w i Y 4 .i   or   ct  Y 4 - 4-  or  v  ^  For  ^ i m r i  lp   nripriitinri^  Qiirti   th   p i t hpr   4-4-  nr    e*    Now you have four ways to  add  1  to  the value  of a variable:   108 Chapter 5   Operators   and  four ways  to subtract  1  from  the value  of a variable:      x +=  1;     x  +=  ;     x++;     ++x;      x = x— 1;     x—= 1;        —x;   x—;   Refer to Table 5.4. In section "Loops" on page  131, you'll see these operators are com-  monly used  to  increment or  decrement loop  counters.   Table  5.4  Autoincrement and  Autodecrement Operators   Operator   Function   What  It  Does   Example   + +X   X ++   X   X   Pre-increment   Post-increment   Adds 1 to x   Adds 1 to x   x = 3; x++;   x is now 4   x = 3; ++x;  x is now 4   Pre-decrement   Subtracts 1 fromx   x = 3; x—;  x is now 2   Post-decrement   Subtracts 1 fromx   x = 3; —x;   x is now 2   Autoincrement and Autodecrement Operators and Assignment.  The place- ment  of  the  operators  does  make  a  difference  in  more  complex  expressions,  especially  when part of an assignment; for example, y = x++ is not the same as y = ++x.   Start with:  y  = 0 ; x = 5;   before   after   K      \   before   [\   5  \   Pre-increment    5.2  Types of Operators  E X A M P LE  5.5       93     A u t o - i n c r e m e nt   and  Auto-decrement              add one to x first;  then assign to y   < s c r i pt    t y p e = " t e x t   j a v a s c r i p t ">   var x=5;  var y=0;  y = ++x;  document  . w r i te    " Pre-increment : "  ,  document  . w r i t e   "y   is  "  +  y  +  " " ;  document  . w r i t e   "x   is  "  +  x  +  " " ;  document  . w r i te   "  var x=5;  var y=0;  y=x++;   document  . w r i t e   " P o s t - i n c r e m e n t :  " ;  document  . w r i t e   "y   is  "  + y  +  " " ;  document  . w r i t e   "x   is  "  + x  +  " " ;    " ;       assign value in x to y;  then add one to x                  E X P L A N A T I ON   The  variables, x  and y,  are  initialized  to  5  and  0,  respectively.  The pre-increment operator  is  applied  to x.  This means  that x will  be  incremented  before  the  assignment is  made.  The  value  of x was  5,  now it is  6.  The  variable y  is  assigned  6.  x is  6, y  is  6.  The  new values  o f y  and x  are  displayed  in  the  browser  window.  The  variables x  and y  are  assigned  values  of 5  and  0,  respectively.  This  time  the  post-increment  operator  is  applied  to  x.  This  means  that x  will  be  incremented  after  the  assignment  is  made.  The  number  5  is  assigned  to  the  vari- able y,  and  then x is  incremented  by  1.  So x is  5  and y  is  6.  The  new values  o f y  and x  are  displayed  in  the  browser  window.  See  Figure  5.5.   l   2   3   4   5   6   l  2   3  4  5   6    94   Chapter 5      Operators   6   Auto -increment  and  Auto-decrement  - Mozi  Help  File   Bookmarks   History   Tools   View   Edit       C   &         file:   C: waii   '  W...   Hello   j  Using  the  Ja...   J  Ari   Pre-iiicreinent:  y is 6  x is 6   Post-increment:  y is 5  x is 6   Figure 5.5  Output from Example 5.5. Auto-increment and auto-decrement operators.   5.2.4  Concatenation Operator  As shown in previous  examples,  the  +  sign is used  for  concatenation  and  addition.  The  concatenation operator, the + sign, is a string operator used to join together one or more  strings.  In  fact,  the  concatenation  operator  is  the  only  operator JavaScript  provides  to  manipulate  strings.   In  the  example,  "correct"  +  "tion"  +  "al"  ,  the  result is  "correctional".  If the  operands  are  a  mix  of strings  and  numbers, JavaScript will  convert  the  numbers  to  strings.  For  example,  "22" + 8 results in  "228", not 30.  If the  operands  are numbers,  then  the  +  sign  is the  addition operator  as in 5 + 4.  But suppose we say,  "22"  *  1  + 4.  In  this  case, Java- Script  sees  the  multiplication  operator   *   and  converts  the  string  "22"  to  a  number,  resulting in 22  + 4 or 26.  Firefox provides the JavaScript console for testing these  expres- sions or you can type JavaScript: in the URL,  followed by the expression you want to test,  as shown in Figures  5.6  and  5.7.   The  concatenation operator is summarized in Table  5.5.  To  explicitly convert strings  to  numbers,  JavaScript  provides  built-in  functions  called  parselntQ  and  parseFloatQ,  discussed  in  Sections  5.3.1  and  5.3.2,  respectively.   O  Mozilla  Firefox   File   Edit   View   @  "  c      W...   Hello   1  26   History   Bookmarks   Tools   Help   QJ] javascript:  "22"  *  1  +  4   i  '   Using the 3a...   Q  Arithmetic  0.. .   [3   A r i t h m e t ic    5.2 Types of Operators   95   6   Mozilla  Firefox  File   View   Edit   History   Bookmarks   Tools   Help   ^^   "   C   A   i  Q   javascript:  "22"  +  12   '  W...   Hello   j Using  the  Ja...   J  Arithmetic  0...   Q  Arit   2212   Figure 5.7  Concatenation of a  string and  a  number.   Table 5.5  The Concatenation  Operator   Operator   Example   Meaning   +   "hot" +  "dog"   Concatenates  joins  two strings; creates "hotdog".   "22" + 8   Converts number 8 to string "8", then concatenates  resulting in "228". In statements involving other  operators, JavaScript does not convert numeric  values to strings.   Concatenates two strings and assigns the result to x;  xbecomes "cowboy".   +=   x = "cow"; x += "hoy";   5.2.5  Comparison Operators  When  operands  are  compared,  relational  and  equality  operators  are  used.  The  operands  can  be  numbers  or  strings.  The  result  of the  comparison  is  either  true  or false—a Boolean  value.  Strings are compared letter by letter  lexographically  using Unicode1 values to rep- resent the numeric value  of each letter;  thus,  "A" is  less  than  "B",  and when  comparing  "Daniel" with  "Dan",  "Daniel" is  greater  than  "Dan".  When  comparing strings, JavaScript  pads  "Dan" with three spaces to make it the same length as  "Daniel".  Refer to Table  5.6.   Table 5.6  Comparison  Operators   Operator Operands   x ==y   x!=y   x>y   Function   x is equal to y   x is not equal to y   xis greater thany    112 Chapter 5   Operators   Table  5.6  Comparison  Operators   continued    Operator Operands   Function   x>=y   x<y   x<=y   x = = =y   x  != =y   x is greater than or equal to y   x is less  than y   x is less  than or equal to y   x is identical to y in value and type   x is not identical to y   What Is Equal?  In  an  ideal  world,  there  would  be  equality  between  the  sexes  and  among  the  races  and  religions,  but  in  the  real  world  equality  is  a  debatable  topic,  often  determined  by  governments.  In JavaScript,  operators  determine  the  equality  or  inequal- ity  of  their  operands,  based  on  more  specific  rules.  When  using  the  ==  or  !=  equality  operators,  the  operands  may  be  of  any  given  data  type—numbers,  strings,  Booleans,  objects,  arrays,  or  a  combination  of these—and  there  are  rules  that govern whether  they  are  equal.  For  example,  two  strings  are  equal when  they have  the same sequence  of char- acters,  same  length,  and  same  characters  in  corresponding  positions.  Two  numbers  are  equal  when  they  have  the  same  numeric  value.  If  a  string  is  compared  with  a  number,  they  are  equal  if the  number  has  the  same  characters  as  the  string;  for  example,  "500" is  equal  to  500.  NaN   Not  a  Number   is not  equal  to  anything,  including NaN.  Positive  and  negative zeros are  equal.  Two  objects are equal if they refer to  the same object.  Two Bool- ean  operands  are  equal  if  they  are  both  true  or  both false.  Null  and  undefined  types  are  equal.  To  test any of the  expressions shown  in Table  5.7,  use  the JavaScript  Console.  Fig- ure  5.8  shows  an  example  using  Firefox.   Table  5.7  Equality Test with  Strings a nd   Numbers   Test   Are  They Equal?   "William" ==  "William"   "William"  ==  "William"   5 == 5.0   "54"  ==54   "5.4" ==5.4   NaN == NaN   true   false   true   true   true   false    5.2 Types of Operators   97   Table 5.7  Equality Test with  Strings and  Numbers  continued    Are They Equal?   true   true   true   Test   false  ==false   true == 1   null == undefined   c   File   O   f a l se   ^ M o z i l la   F i r e f ox   Edit   Vi&Ai   History   Bookmarks   Tools   Help   Ô   or   javascript:  "william"  ==  "William"   fâ   -  t  V...   Q  JavaScript  V...   i_   Dialog  Box   L3   F i r st   JavaSc...   Precedence  ...   Q  Arithmetic  0...   Figure 5.8  Testing the equality of two strings.  Is  "William" equal to  "William'?  Nope.   What Is Identical?  Men  are  equal;  clones  are  identical.  The  ===  and  .'==  equality  operators test that its  operands are not only of the same value, but also  of the same  data  type.  String  "54" is equal to number 54, but not identical because one is a string and the  other  is  a number,  even  though  their  values  are  equal.  See Table  5.8.   Table 5.8   Identity Test with Strings and  Numbers   Test   Are They Identical?   "William" === "William"   "william" === "William"   5 ===5.0   "54" === 54   NaN === NaN   null === null   -0 === +0   false  ===false   true   false   true   false   false   true   true   true    98   Chapter 5      Operators   Comparing  Numbors.  When  the  comparison  operators  are  used  to  compare  num- bers,  numeric  values  are  compared;  as  in,  is  50  >  451  A  Boolean  value  of  either  true  or  false  is  returned.   Table  5.9  Comparison  Operators   Example   How  Operator  Compares  Numbers   x is greater than y   x is greater than or equal to y   x is less  than y   x is less  than or equal to y   E X A M P LE  5.6                     Comparing  Numbers        var x = 5;  var y = 4;  var result = x > y;  document.writeln "The result is  "+ result +  ". " ;  result = x < y;  document.writeln   "The result is  " + result + ". " ;                  E X P L A N A T I ON   l  2  3   4   The JavaScript  program  starts  here.  The  variables  x  and y  are  assigned  values  to  be  compared  later  in  the  program.  If the  value  of x is  greater  than  the  value  of y,  a  Boolean  value  of either  true  or false  is  returned  and  assigned  to  the  variable  result.  The  Boolean  result  of  the  comparison  is  displayed  by  the  browser.  It  is  true;  x  is   x > y   x>= y   x < y   x <= y   l  2  3  4  5  6  7    5.2  Types of Operators   99   E X P L A N A T I ON    CONTINUED    5  6   7   If x is less  than y,  true is  assigned  to  the variable,  result;  otherwise it is assigned alse.  The  Boolean  result  of  the  comparison  is  displayed  by  the  browser.  It  is false;  x  is  not  greater  than y.  This tag marks the  end of the JavaScript program.  The output is shown in Figure  5.9.   1 Comparing Numbers  - Mozilla Firefox  Tools  File   Bookmarks   History   View   Edit   Help   C  X   yVi'   ,  1   file:   C: wamp www   P  Using  the  ]a...j  Q  Arithmetic  O...   Q  Arithmetic   The  result is  tine.  The  result is  false.   Figure  5.9  Output from  Example  5.6:  Numeric  comparison.   Comparing Strings.  The  difference  between  comparing strings  and  numbers  is  that  numbers  are  compared  numerically  and  strings  are  compared  alphabetically,  based  on  the  ASCII  character  set.  The  strings  are  compared  letter  by letter,  from  left  to  right,  and  if  they  are  exactly  the  same  all  the  way  to  end,  they  are  equal   see  Table  5.10 .  Once  a  letter  in  one  string  differs  from  the  corresponding  letter  in  the  second  string,  the  com- parison  stops  and  each  of  the  differing  letters  is  evaluated.  For  example,  if  the  string  "Dan"  is  compared  with  "dan",  the  comparison  stops  at  the  first  letters  D  and  d.  "Dan"  is  smaller  than  "dan",  because  the  letter  D  has  a  lower  ASCII  value  than  the  letter  d.  D  has  an  ASCII  decimal  value  of 68,  and  d  has  an  ASCII  value  of  100.   To  avoid  the  case-sensitivity  issue  when  comparing  strings, JavaScript  provides  the  built-in  string  functions,  toUpperCase    and  toLowerCaseQ,  discussed  in  section  "Free  Form  and  Reserved  Words"  on  page  33  and  Table  9.10  on  page  253.   Table  5.10  Comparison  Operators   Example   How  Operator  Compares  Strings   "stringl" >  "string?"   "stringl"  is greater than  "string?"   "stringl" >=  "string?"   "stringl" is greater than or equal to  "string2"   "stringl" <  "string?"   "stringl"  is less  than  "string2"    100   Chapter 5      Operators   E X A M P LE    5.7                              E X P L A N A T I ON    Comparing  Strings        var fruitl =  "pear";  var fruit2 =  "peaR";  var result = fruitl > fruit2;  document.write   " The result is  "+ result +  ". " ;  result = fruitl < fruit2;  document.write   "The result is  " + result + ". " ;  result = fruitl === fruit2;     Are they identical;  i.e.,  value and type are the same?  document.write   "The result is  " + result + ". " ;   This  is  the  start  of the JavaScript  program.  The  variables, fruitl  and fruitl,  are  assigned  to  string  values,  differing  by  only  one  letter.  The  string  values  are  compared  and  a  Boolean  value  of  true  or false  will  be  re- turned  and  assigned  to  the  variable,  result,  "pear"  is  greater  than  "peaR"  because  the  r has  an  ASCII  value  of  114  and  the  R  has  an  ASCII  value  of 82.  The result of the  comparison  in  line  3  is  true  and  the  result is sent to  the  browser.  This  time  "pear"  is  compared  to  "peaR"  with  the  less  than  operator.  The  result  is  false.   The  result of the  comparison  in line  5  is false  and  the  result is  sent  to  the  browser.  The  identical  equality  operator  is  used.  Because  the  strings  are  not  identical,  the  result  The  result  of the  comparison  in  line  7  is false  and  the  result is  sent  to  the  browser.  The  output  of the  script  is  shown  in  Figure  5.10.   is  false.   1  2   3  4  5  6  7  8   1  2   3   4  5   6  7   8    5.2 Types of Operators   101   5.2.6  Logical Operators  The  logical  operators  allow  you  combine  the  relational  operators  into  more  powerful  expressions  for  testing  conditions  and  are  most  often  used  in  if statements.  They  evalu- ate  their  operands  from  left  to  right,  testing  the  Boolean  value  of  each  operand  in  turn:  Does  the  operand  evaluate  to  true  or  false?  In  the  expression  if   x  >  5  && x <  10  ,  the  &&  is  a  logical  operator.  The  expression  simplified  means,  "if x is  greater  than  5  and  x  is  also  less  than  10,  then  do  something";  in  the  case  of the  logical AND    & &  ,   if the  first  expression  returns  true  and  the  second  expression  also  returns  true,  then  the  whole  expression  is  true.  If instead  of  &&  we  used  ,  the  operator  means  OR  and  only  one  of  the  expressions  must  be  true.   Sometimes  the  result  of  a  test  is  not  Boolean.  When  logical  operators  have  numeric  operands,  such  as  5  &&  6,  the  result  of  the  entire  expression  is  evaluated  from  left  to  right,  and  the  value  returned  is  that  of the  last  expression.  A  numeric  operand  is  true  if  it evaluates to any number  that is not zero.  5, —2,  and  74 are  all true.  0 is false.  For  exam- ple,  when  using  the  &&   AND   operator,  both  operands  must  be  true  for  the  whole  expression  to  be  true.  The  value  returned  from  an  expression  such  as  5  &&  6  is  6,  the  last value  evaluated  by  the  operator.  5  is  not zero   true   and  6  is  not  zero   true ,  there- fore,  the  expression  is  true.  If  the  expression  contained  a  0  as  in  5  &&  0,  0  &&  0  and  0  &&  5  all  yield  0,  which  is  false.  Because  the  &&  operator  wants  all  of its  operands  to  be nonzero values,  as soon  as  the value  0 is  encountered in  the  expression,  0 is  the result  of the  whole  expression.  See  Table  5.11.   The  three  logical  operators  are  the  logical  AND,  logical  OR,  and  logical  NOT.  The   symbol  for AND  is  & &,   the  symbol  for  OR is  ,  and  the  symbol  for  NOT  is  .'.   Table  5.11   Logical  Operators a nd   Their  Functions   Operator Operands   numl  && num2   Function   True,  iinuml  and num2  are both true.  Returns numl  iinuml  is  false;  otherwise returns num2.  If operands are Boolean  values,  returns  true if both operands are true;  otherwise  returns  false.   numl  II num2      numl   True,  if numl  is true or if num2  is true.   Not numl;  true if numl  is  false;  false if numl  is  true.   The && Operator  Logical AND .  We  all  know  the  meaning  of the  English  state- ment,  "If you  have  the  money and  I  have  the  time...."  Whatever  is  supposed  to  happen  is based  on  two  conditions,  and both  conditions must be  met.  You  must have  the money  and  I  must  have  the  time.  lavaScriDt  uses  the  svmbol  &&  to  represent  the  word  AND.    102   Chapter 5      Operators   side  evaluates  to  true,  and  the  right  side  is  false,  the  expression  is  false.  If evaluated  as  Booleans,  the  same  rules  apply,  except  the  returned  value  will  be  either  Boolean  true  or  false.  See  Table  5.12.   Table  5.12   Logical  AND  Examples   What It Evaluates To   true  &&  "honest"   honest    empty string    Expression   true  && false   true  &&  true   "honest"  &&  true   true &&  ""   5  &&  0   5  &&  -6   5  && false   null  &&  0   null &&  ""   null  && false   "hello"  &&  true  && 50   "this" &&  "that"   E X A M P LE  5.8           false   true   true   0   -6   false   null   null   null   50   that    Logical AND Operator                 1  2   var answer = prompt "How old are you?  ",  "" ;  if   answer > 12 && answer <20   {   alert "Teenagers  rock!" ;   }        5.2  Types of Operators   E X P L A N A T I ON   103   1   2   The user is prompted for his  or her age.  The variable  called answer is  assigned  the  value  the user  enters.   See  Figure  5.11.   If the  value  of answer is  greater  than  12  and  also  less  than  20,  the  statement  en- closed  within  the  curly braces  is  executed:  an  alert  box  appears  displaying  Teen- agers  rock!   See  Figure  5.12.   If the  user  enters  any other value,  nothing happens.   [ J a v a S c r i pt   A p p l i c a t i o n]   How  old  are you?   M,   113     OK  I I Cancel "j   Figure 5.11  The user enters his or her age.   xj   M   r\    Teenagers  rock!   is  mJ   Figure 5.12  20,  this alert box appears.   If the user enters his or her age and  it is greater than  12 and  less than   The  11 Operator  Logical OR .  In the English statement "If you have some cash or I  have a credit card..."  the word or is used in the condition. With the or,  only one of the con- ditions must be met  hopefully that you have the cash! . JavaScript uses the  symbol to rep- resent the logical OR. If the expression on the left side of the  operator is evaluated as true   nonzero , the value of the expression is true, and no further checking is done.  If the value  on the left side of the  operator is false, the value of the expression on the right side of the  operator is  evaluated,  and if true,  the  expression is  true;  that is,  only one  expression must  be  true.  Once  an  expression  returns  true,  the  remaining  expressions  can  be  either  true  or  false.  It doesn't matter, as long as one expression is  true.  Refer to Table  5.13.   Table 5.13  Logical  OR Examples   Expression   What It Evaluates  To    104   Chapter 5      Operators   Table  5.13   Logical  OR  Examples   continued    What It Evaluates To   honest   true   true   5   5   5   0   false   hello   this    empty string    Expression   "honest" II tnie   true  ""   true II  "honest"   5 110   5  11-6   5  II false   null II 0   null II ""   null  II false   "hello" II true II 50   "this" II "that"   E X A M P LE    5.9           }                  E X P L A N A T I ON    Logical  OR Operator                 1  2   3   var answer = prompt "Where should we eat?  ",  "" ;  if    answer == "McDonald's"   answer == "Taco Bell"     answer ==  "Wendy 1s" {   alert "No fast food today,  thanks." ;    5.2  Types of Operators   105   E X P L A N A T I ON    CONTINUED    If the  value  of answer is  any  one  of McDonald's  or  Taco  Bell  or  Wendy's,  the  state- ment  enclosed  within  the  curly braces  is  executed:  An  alert box  appears  display- ing No fast food  today,  thanks.   See  Figure  5.14.   If the  user  enters  any  other  value,  nothing  happens.   [ J a v a S c r i pt   A p p l i c a t i o n]   Where  should  we  eat?   M   I Taco  Be[~   I   OK   I   I  Cancel  1   Figure 5.13  The user enters a value.   Figure 5.14   If the user enters any one of the values in  line 2,  this alert box appears.   The Operator  Logical NOT .  In  the  English  statement  "That's  not  true!"  the  word  not is used for negation:  Not true is false,  and not false is true. JavaScript provides  the  NOT   .'   operator  for negation.  The  .'  operator  is  called  a unary  operator  because  it  has only one operand; for example,.'  true or .' 5. It returns true if the expression evaluates  to  false  and  returns false if the  expression  evaluates  to  true.  See  Table  5.14.   Table 5.14  Logical  NOT  Examples   What It Evaluates  To   Expression   ! "this"   ! 0   ! 2   !  false   false   true   false   true    Chapter 5      Operators   106   E X A M P LE    5.10                         E X P L A N A T I ON    Logical NOT Operator                 l  2   var answer = true;  alert "Was true. Now it is " + ! answer ;   l  2   The  Boolean  value  true  is  assigned  to  the  variable  answer.  The  expression  sent  to  the  alert  dialog  box,  .'  answer,  negates  the  value  true   not  true ,  making  it false.   See  Figure  5.15.    [JavaScrig^ApplicatioQjH    X    1   Was  true.  Now it is False   OK   Figure  5.15  The  logical  "not"  operator changes true to  false or false  to true.  The     operator  caused  true  to  b e c o me   false.   In summary, Example  5.11  illustrates the logical operators and the values they return.   E X A M P LE       5.11        Logical   Boolean   Operators                 1   var numl=50;  var num2=100;    5.2  Types of Operators   107   E X A M P LE    5.11    CONTINUED    document.write "numl && num2 is  "+ numl && num2 +". " ;  document.write "numl  $num2 is "+ numl  num2 +". " ;  document.write "! numl is " +  !numl+". " ;  document.write "! numl && num2   is "+! numl && num2 +". " ;  document.write "! numl && num3   is "+! numl && num3 +". " ;                 E X P L A N A T I ON   Three  variables,  numl,  numl,  and  num3,  are  initialized.  The  &&  operator  expects both  of its  operands  to  be  true,  if the  expression  is  to be  true.  A  true  value  is  any  number  that  is  not  zero.  In  the  expression,  50  &&  100,  both  operands  are  true.  The  value  of  the  last  true  operand,  100,  is  returned.  The    operator expects only one of its operands to be true if the whole expression  is to be  true.  50    100 is  true because  the  first operand evaluates to  a nonzero val- ue.  Because  50  is  true  and  only  one  operand  must  be  true,  the  evaluation  stops  here  and  50  is  returned.  The  .'   NOT   operator  negates  its  operand.  .'  50  means  .'  true;  that  is, false.  Because  the  expression  numl  &&  numl  is  enclosed  in  parentheses,  it  is  evaluated  first,  resulting  in  50  &&  100,  true.  Then  the  .'   NOT   operator  evaluates  .'   true ,  resulting  in  Boolean false.  The  expression,  numl  &&  num3,  enclosed  in  parentheses,  is  evaluated  first.  Be- cause  num3  is  0,  the  expression  evaluates  to  false.  .'   false   is  true.  See Figure  5.16.   2  3  4  5  6   1  2   3   4  5   6   ' Logical  Boolean  Operators - Mozilla Firefox  Help  File   Bookmarks   History   Tools   View   Edit       C    Q    file:   C: wamp ww   [J   Using  the  JavaScrlp...   [J   javascrlp...0&&%20""   muni  &&  niun2  is  100.  niunl  $niun2 is 50.  ! niunl is false.  ! niunl  &&  niun2   is  false.  ! niunl  &&  iuun3   is  tine.    108   Chapter 5      Operators   5.2.7  The Conditional Operator   The  conditional  operator  is  called  a  ternary operator  because  it requires  three  operands.  It is  often  used  as  a shorthand  method  for  if else  conditional  statements.   See  Chapter  6,  "Under  Certain  Conditions."   Although  we  cover  if else  in  Chapter  6,  the  following  for- mat  shows  both  the  conditional  operator  and  how  it  translates  to  an  if else  statement.   F O R M AT   E X A M P LE   conditional expression ? expression :  expression   x ? y :  z   If x evaluates to true,  the value of the expression  becomes y,  else the value of the expression becomes z   big =  x > y   ? x : y   If x is greater than y,  x is assigned to  variable big,  else y is assigned to  variable  big   An  if else statement  instead of the conditional  statement:   if  x > y   {  big = x;   }  else{   big = y;   E X A M P LE    5.12            Conditional  Operator                 1  2  3   var age = prompt "How old are you?  ",  "" ;  var price =  age >55    ? 0 : 7.50;  alert "You pay $"  + price + 0 ;           5.2  Types of Operators   109   Figure 5.17  The user enters  72. This value is assigned  to the variable age in the  program.   [JavaScript Application]    X    1   You pay $7.50   OK   Figure 5.18  Because the age is not greater than  55,  the price is assigned  7.50.   5.2.8  Bitwise Operators  Most of us represent numbers in  decimal  base  10,  a number system  based  on  10  values  starting from  0  to  9;  such  as  $50.00  or  2011.  The HTML  color  codes  are  represented in  hexadecimal,  base  16,  which  uses  16  distinct  symbols:  0-9  and  A-F.  The  color  cyan  is  00FFFF  and  fuschia  is  FF00FF.  Computers  store  data  in  binary,  base  2,  two  values  either 0 or  1, called bits. A byte is made up of 8 bits, a word is two bytes, or  16 bits, and  two words  together  are  called  a  double word  or  dword, which is  a 32-bit value.  Today,  64-bit processors have become  the  standard  for most modern systems.  Because  the  pro- cessor  uses  binary  numbers,  when  performing low-level  programming,  such  as writing  device  drivers,  graphics,  and  data  compression,  bitwise  operations  are  necessary,  tasks  that are more suitable  to  languages like  C  or Java.   "Bitwise  operators  treat  their  operands  as  a  set  of 32  bits   zeros  and  ones ,  rather    Chapter 5      Operators   https:  developer.mozilla.org En Core_JavaScript_1.5_Reference Operators Bitwise_Operator   refer  to  Table  5.15 .   Table 5.15  Bitwise Operators   Operator   Function   Example   What  It  Does   126   &   I   x&y   x I y   x  Ay   Bitwise AND   Bitwise OR   Bitwise XOR   Bitwise NOT   Left shift   x«y   Right shift   x»y   Zero-fill right shift   x »> h   Returns a J in each bit position if both  corresponding bits are 1.   Returns a J  in each bit position if one  or both corresponding bits are 1.   Returns a J in each bit position if one,  but not both, of the corresponding bits  are 1.   Inverts the bits of its operands.  1 becomes 0; 0 becomes 1.   Shifts x in binary representation y bits  to left, shifting in zeros from the right.   Shifts x in binary representation y bits  to right, discarding bits shifted off.   Shifts x in binary representation y bits  to the right, discarding bits shifted off,  and shifting in zeros from the left.   When using the bitwise operations &,  , A, and   each bit in the first operand is paired  with the corresponding bit in the second  operand:  first bit to  first bit, second bit to sec- ond bit,  and so  on.  For  example,  the  binary representation  for 5  &>  4 is  101  &  100.   101  & 100  100   101  1 100  101   101  A  100  001   Bitwise Shift Operators.  The  bitwise  shift  operators  take  two  operands:  The  first is  a  quantity  to  be  shifted,  and  the  second  specifies  the  number  of bit positions by which  the first operand is to be shifted.  The direction of the shift operation is controlled by the  operator  used.  ruft   ^    5.2  Types of Operators   111      >>   sign-propagating  right  shift    This  operator  shifts  the  first  operand  the  specified  number  of bits  to  the  right.  Excess  bits  shifted  off to  the  right  are  discarded.  Copies  of the  leftmost  bit  are  shifted  in  from  the  left.      >»   zero-fill  right  shift    This  operator  shifts  the  first  operand  the  specified  number  of bits  to  the  right.  Excess bits shifted  off to  the right are  discarded.  Zero bits  are  shifted  in  from  the  left.  For  example,  19»>2  yields  4,  because  10011  shifted  two  bits  to  the  right  becomes  100,  which  is  4.  For  nonnegative  numbers,  zero-fill  right  shift  and  sign-propagating  right  shift  yield  the  same  result.   Shift  operators  convert  their  operands  to  32-bit  integers  and  return  a  result  of  the   same  type  as  the  left  operator.   E X A M P LE    5.13        Bitwise  Operators                   Testing Bitwise  Operators        l   2  3   4  5   6  7   var result = 15 & 9;  document .write "15 & 9 yields:  " + result   result = 15  9;  document .write "  15  9  yields:  " + result ;  result = 15  A 9;  document .write "  15 A 9  yields:  " +  result ;  result = 9  «  2;  document .write "  9 « 2 yields:  "  + result ;  result = 9  »  2;  document .write   "  9 » 2 yields:  "  + result ;  result = -9  »  2;  document .write   "  -9 » 2 yields:  " + result ;  result = 15  »>   2;  document .write    "  15 »> 2 yields:  "  + result ;                   E X P L A N A T I ON    126   Chapter 5      Operators   E X P L A N A T I ON    CONTINUED    2  When  the  bitwise     OR   operator  is  applied  to  1111    1001,  the  result  is  binary   1111  or  decimal  15.   3  When  the  bitwise  A   Exclusive  OR   is  applied  to  1111  A  1001,  the  result  is  binary   4   5   0110  or  decimal  6.  9«2  yields  36,  because  1001  shifted  two  bits  to  the  left  becomes  100100,  which  is  decimal  36.  9»2  yields  2,  because  1001  shifted  two  bits  to  the  right becomes  10,  which  is  dec- imal  2.   6  —9  »  2  yields —3,  because  the  sign  is  preserved.  7   15  »>  2  yields  3,  because  1111  shifted  two  bits  to  the  right  becomes  0011,  which  is  decimal  3.  For  nonnegative  numbers,  zero-fill  right  shift  and  sign-propagating  right  shift yield  the  same  result.   See  Figure  5.19.    Testing  Bitwise  Operators   15 & 9 yields: 9  15  9 yields: 15  15 A 9 yields: 6  9  «  2  yields:  36  9  »  2  yields:  2  -9  »  2  yields:  -3  15  »>  2 yields:  3   Figure  5.19  Output from  Example  5.13.   5.3  Number, String,  or Boolean?   Data  Type  Conversion   As defined earlier, JavaScript is a loosely typed language, which really means that you don't  have  to be concerned about what kind of data is stored in a variable.  You can assign a num- ber  to  x  on  one  line  and  on  the  next  line  assign  a  string  to  x,  you  can  compare  numbers  and  strings,  strings  and  Booleans,  and  so  on.  JavaScript  automatically  converts  values  when it assigns values to a variable or evaluates an expression.  If data types are mixed   i.e.,  a number is compared with a string,  a Boolean is compared with a number, a string is com- pared  with  a Boolean , JavaScript must  decide  how  to  handle  the  expression.  Most  of the  time,  letting JavaScript handle  the  data works  fine,  but  there  are  times  when  you  want  to  force  a conversion  of one  type  to  another.  For example, if you prompt a user  for input,  the    5.3  Number, String,  or Boolean? Data Type Conversion   113   JavaScript  provides  three  functions  to  convert  the  primitive  data  types.  They  are:   StringO         Number         Boolean       E X A M P LE    5.14                   E X P L A N A T I ON   1  2  3  4  5  6  1   1   2   3   4  5    The  Conversion  Functions          Data  Conversion       var numl = prompt "Enter a number:  ","" ;  var num2 = prompt "Enter another number:  ","" ;  var result = Number numl   + Number num2 ;      Convert strings  to numbers  alert "Result is  "+ result ;  var myStrlng=Strlng numl ;  result=myString + 200;  alert "Result is  "+ result ;  alert "Boolean result is "+ Boolean num2  ;      Prints  true       String + Number is String      Concatenates 200 to the      result;  displays 20200   The  user  is  prompted  to  enter  a  number   see  Figure  5.20 .  Even  though  the  user  typed  a  number,  JavaScript  treats  user  input  as  string  data  and  assigns  it  to  the  variable  numl  as  a  string.  On  the  next  line,  numl  is  assigned  another  string   see  Figure  5.21 .  The JavaScript NumberQ   function  converts  strings  to  numbers.  After  the  variables  numl  and  numl  have  been  converted  to  numbers,  the  +  sign will  be  used  as  an  ad- dition  operator   rather  than  a  concatenation  operator ,  resulting  in  the  sum  of  numl  and  numl.  Unless  converted  to  numbers,  the  string  values  "30"  +  "10"  would  be  concatenated,  resulting  in  3010.  The  alert  box  displays  the  sum  of  the  two  numbers  entered  by  the  user   see  Figure  5.22 .   The variable  numl  is converted to  a string; its value is  assigned  to  the variable,  result.  The  value  of  myString,  10,  is  concatenated  to  100  and  assigned  to  result.  The  result    126   localhost  -  [JavaScript  Application]   Chapter 5      Operators   xj   J   xj   J   ]   ]   Figure 5.20  The user is prompted  to enter a  number.   localhost  -  [JavaScript  Application]   Enter another number:   Figure 5.21  The user is prompted  to enter another number.   Figure 5.22  The result is displayed.   The parselntQ  Function   5.3.1  This  function  converts  a  string  to  a  number.  It  starts  parsing  at  the  beginning  of  the  string and returns  all integers until it reaches  a noninteger  and then stops parsing.  If the  string doesn't begin with an integer, NaN  not a number   is returned.  For  example, par- selnt "150cats"   becomes  150,  whereas  parselnt "cats"   becomes  NaN.  However,  if  the  string begins with  a leading  Ox  or  OX  or  a leading 0,  then JavaScript  assumes you want  the  Ox  to  represent  the  beginning of a hex value  and  a single  0  to  represent the  start of  an  octal  value.  You  can  also  use  octal  and  hexadecimal  numbers.  In  the  two-argument  format,  the  first  argument  to  parselntQ  is  a  string  containing  a  number  base   radix   ranging  from  2  to  36.  The  default  is  base  10.  In  the  statement,  parselnt "17",  8 ,  the  result is  15.  The first argument is the string to be parsed  and  the second  argument,  8, is  the number base of the number   here, octal  17 .  The value returned is decimal  15.  Refer  to  Tables  5.16  and  5.17.    5.3  Number, String,  or Boolean? Data Type Conversion   115   E X A M P LE   parselnt "111",  2 ;  parselnt "45days" ;   45   7    111   in  base  2  is  7    Table 5.16  parselnt String    Result   NaN   NaN   6   6   -6   6   10   9   String   "hello"   "Route 66"   "6 dogs"   "6"   "-6"   "6.56"   "OXa"   "Oil"   String   "111"   "12"   "b"   Table 5.17  parselnt String,  NumberBase    Result  Decimal    Base  2  binary   8  octal   16  hex    7   10   11   E X A M P LE       5.15    Using the parselnt    Function              1  2   var grade = prompt "What is your grade?  ",  "" ;  grade=parselnt grade ;      Grade entered as a string      Grade converted to an integer    Chapter 5      Operators   5   document.write   " After a 10 point bonus, your grade   + is grade + "! " ;   126   E X A M P LE    5.15                  E X P L A N A T I ON   1   2  3  4  5   The user is prompted  to  enter  a grade.  The  string value  entered  in  the prompt box  is  assigned  to  the  variable  grade   see  Figure  5.23 .  The  parselntO  function  will  convert  the  grade  to  an  integer  value.  The  typeo 0  operator  returns  the  data  type  of  the  variable  grade.  The  value  of grade  is  incremented  by  10.  The  new  value  of grade  is  sent  to  the  browser   see  Figure  5.24 .   I Explorer  User  Prompt   Script  Prompt:   What  is your  grade?   OK   Cancel      Figure  5.23  The  user enters a  grade.   Grade  type  is number  After a 10  point bonus, your grade  is  75!   Figure  5.24  The  new value  of grade  is  displayed  in  the  browser.   5.3.2   The parseFloatQ  Function   The  parseFloatO  function  is just  like  the  parselntO  function  except  that  it  returns  a  float- ing-point number.  A  floating-point2  number  is  a number  that  contains  a  fractional  part,  such  as  3.0,  -22.5,  or  .15.  The  decimal  point is  allowed  in  the  string being parsed.  If the  string  being  parsed  does  not  start with  a  number,  NaN   not  a  number   is  returned   see   „ £T 1 0\    5.3  Number, String,  or Boolean? Data Type Conversion   117   F O R M AT   E X A M P LE   parseFloat String  ;   parseFloat "45.3  degrees" ;   Table  5.18   parseFloat String    Result   NaN   NaN   6.5   6   6.56   String   "hello"   "Route  66.6"   "6.5  dogs"   "6"   "6.56"   E X A M P LE       5.16        Using the parseFloat    Function       var temp = prompt "What is your temperature?  ",  "" ;  temp=parseFloat temp ;  if  temp == 98.6 {  }  else{   alert "Your temp is normal" ;   alert "You are sick!" ;   1  2  3  4  5   }                   E X P L A N A T I ON   1   The user is prompted for input and the result is assigned  as a string to  the variable  temp   see  Figure  5.25 .    126   E X P L A N A T I ON   Chapter 5      Operators   3  Although we haven't formally covered  ¡ statements, we have used them in several  examples, and they should be easy to follow.   See Chapter  6, "Under Certain Con- ditions,"  for  a formal introduction .  If the value  of temp is  equal  to  98.6,  then  the  following block of statements will  be  executed.  If is  the  user  entered  98.6,  the  alert box sends  the  message  "Your  temp  is  normal"  to  the browser.  If line 3 is not true,  the block of statements following else is executed. An alert box  will  appear  in  the  browser window saying,  "You  are  sick!"   see  Figure  5.26 .   5   4   E x p l o r er   U s er   P r o m pt   Script  Prompt:   W h at   is  your  temperature?   J1     .   5   { M i c r o s o ft    I n t e r n et   E x p lo   Y ou   are  sick!   OK   F O R M AT   eval String  ;   E X A M P LE   Figure  5.25  User enters a  string.  The parseFloatO function  will  convert it to  a  floating-point  number.   Figure 5.26  Output from  Example 5.16.   5.3.3   The eval    Function   The  evalQ  function  evaluates  a string  as  a JavaScript  expression,  returning  the  result  of  the  execution.3  If there  is  no  result,  undefined  is  returned.    119   5.4  Special  Operators   E X A M P LE    5.17                          E X P L A N A T I ON    The eval    Function                 l  2  3  4   var str="5 + 4";  var numl = eval str ;     results in 9  var num2 = eval prompt "Give me a number ",  ""  ;  alert numl + num2 ;   The  string  "5  +  4"  is  assigned  to  the  variable  str.   l  2  The  eval    function  evaluates  the  string  expression  "5  +  4"  as  a JavaScript  instruc-  tion.  The  variable  numl  is  assigned  9,  the  sum  of 5  +  4.  The  eval     function  evaluates  the  string value  that is  entered  into  the  prompt  dia- log  box   see  Figure  5.27 .  The  prompt    method  always  returns  a  string  value.  If  the  value  in  the  string  is  a  number,  eval    will  convert  the  string  to  a  number,  re- turn  the  number,  and  assign  it  to  numl.  The  alertO  method  displays  the  sum  of  numl  and  numl  in  the  browser  window.   3   4   Figure  5.27  The evalO  function  converts  the  user  input,  a  string,  to  a  number   left   to  allow  calculation   right .   5.4  Special  Operators   In  this  chapter,  we  have  covered  the  most  commonly  used JavaScript  functions.  Table    126   Chapter 5      Operators   Table 5.19  Other  Useful JavaScript Operators   Operator   What  It  Does   ,   comma    Evaluates two expressions and returns the result of the second expression.   Deletes an object, an object's property, or an element at a specified index in  an array.   Defines an anonymous function.   Returns true if the property is a property of a specified object.   instanceof   Returns true if the object is of a given object type.   Creates an instance of a user-defined object type or of one of the built-in  object types.   Keyword that you can use to refer to the current object.   Specifies an expression to be evaluated without returning a value.   delete   function   in   new   this   void   5.5  What You Should  Know   An operator runs a forklift,  finds  a phone number,  or performs an appendectomy. Java- Script  operators  manipulate  operands,  any  combination  of numbers,  strings,  and Bool- eans.  This  chapter  covered  the  many  JavaScript  operators  and  the  rules  that  govern  them, called precedence and associativity.  Some of the important points you should have  derived  from  this  chapter  are:   1.  What  is  precedence?  2.  What is  associativity?  3.  How to evaluate the expression:  5  + 4 - 3  *   12 %  5    2  4.  The  difference  between  equal  and  identical.  5.  Another way to write x++  6.  The rules  for  the  "+"  operator.  7.  How  comparison  operators work with  numbers  and  strings.  8.  How to use the logical && and  in expressions such as: true && false, 5  0, and   so on.   9.  How  to  use  the  conditional  operator.  10.  What  the  parselntQ  and  parseFloatQ  functions  are  used  for.    Exercises   121   Exercises   1.  In  the  expression  6  +  4   2% 2  what  are  the  operands  and  in what  order  are  they   evaluated?  Show  operator  preference  by  using  parentheses.   2.  How  can JavaScript  tell  if the  +  is  used  for  concatenation  or  addition?  Write  a   short  program  to  demonstrate.   3.  a.  If x is  assigned  the  value  of 5,  what  is y  in  the  following  two  statements:   b.  Explain  the  output  of the  preceding  two  statements.   4.  a.  Are  the  following  true  or  false?   Y   Y   =   =   - - X;   X - -;   ==    " 2 2"   22   22  ===  "22"  "2"  >  "100"   b.  Write  a script to  prove your  answers  to  the preceding.  In  the  same  script,  use   the  following  two  statements:  document.write  "3"  +  "4" ;  document.write  3 + 4 ;   c.  Explain  the  output  of  the  two  preceding  statements.   5.  Example  5.8  prompts  the  user  for his  or  her  age.  The  user's response is  assigned  to  the  variable  answer  as  a  string  value.  Rewrite  the  program  to  assure  that  the  age  entered  is  a  number  before  testing  it.  How  do  you  do  this?   6.  Ask  the  user  for  a  Fahrenheit  temperature,  and  then  convert  it  to  Celsius.  Use  parseFloat  .  To  specify  the  precision  of  the  number,  see  "The  Number  Object"  on  page  259  in  Chapter  9.  Formula  for  conversion:  C  =  5 9 F  - 32 .   7.  The  user  is  visiting  Thailand.  He  or  she  has  65  U.S.  dollars.  Tell  the  user  how  many Thai  baht  that  amounts  to.  Display  an  image  of the  Thai  flag  on  the  same  page.    chapter   Under Certain   jjm» $   6.1  Control Structures,  Blocks,  and  Compound  Statements   If you were confronted with  the  above signpost, you'd have  to  decide which direction to  take.  People control their lives by making decisions, and so do programs.  In fact, accord- ing  to  computer  science  books,  a  good  language  allows  you  to  control  the  flow  of your  program  in  three ways.  It lets you      Execute  a  sequence  of statements.     Branch  to  an  alternative  sequence  of statements,  based  on  a  test.     Repeat  a  sequence  of statements  until  some  condition  is  met.   Well, then JavaScript must be a good language. We've  already used programs that exe-  cute  a sequence  of statements,  one  after  another.   Now  we  will  examine  the  branching  and  looping  control  structures  that  allow  the   flow of the  program's  control  to  change  depending  on  some  conditional  expression.   The  decision-making  constructs   if,  if else,  if else  if,  switch   contain  a  control  expres- sion  that  determines  whether  a  block  of statements will  be  executed.  The  looping  con- structs   while,  for   allow  the  program  to  execute  a  statement  block  repetitively  until  some  condition  is  satisfied.   A  compound  statement  or  block  consists  of  a  group  of  statements  surrounded  by  curly braces.  The  block is syntactically equivalent  to  a single  statement and  usually fol- lows  an  i f,   else,  while,  or for  construct.   6.2  Conditionals    124   Chapter 6      Under Certain  Conditions   expression  that  determines  whether  a  block of expressions  will  be  executed.  If the  con- dition  after  the  if is  met,  the  result is  true,  and  the  following  block  of statements  is  exe- cuted;  otherwise  the  result  is  false  and  the  block is  not  executed.   The  block  of statements   or  single  statement   is  enclosed  in  curly  braces.  Normally,  statements  are  executed  sequentially.  If there  is  only one  statement after  the  conditional  expression,  the  curly  braces  are  optional.   6.2.1  if else   "You  better  pay  attention  now,  or  else  . . ."   Ever  heard  that  kind  of statement  before?  JavaScript  statements  can  be  handled  the  same  way with  the  if else  branching  construct.  This  construct  allows  for  a  two-way  decision.  The  if evaluates  the  expression  in  paren- theses,  and  if  the  expression  evaluates  to  true,  the  block  after  the  opening  curly  braces  is  executed;  otherwise  the  block  after  the  else  is  executed.   F O R M AT   if   condition {  statements ;   E X A M P LE   if    age > 21  {   alert "Let 1 s Party!" ;   }   }   F O R M AT   if   condition {  statements!.;   }  else{   }   statements2;   E X A M P LE   if    x > Y  {   alert   "x is larger" ;   }  else{    125    Conditional  Flow Control        document.write "You pay the senior fare!  " ;   <!--  Hiding JavaScript  from old browsers  var age=prompt "How old are you?  ","" ;  if  age >= 55  {  }  else{  }   document.write "You pay the regular adult fare.  " ;   6.2  Conditionals   E X A M P LE    6.1                     1  2  3  4  5  6  7   8       - ->                  E X P L A N A T I ON   1  2   5   3 ,4    6,  7  8   JavaScript  program  starts  here.  The  prompt  dialog  box  will  display  the  message  "How   old  are you?".  Whatever  the  user  types  into  the  box  will  be  stored  in  the  variable  age   see  Figure  6.1 .  If the  value  of the variable  age is greater  than  or  equal  to  55,  line 4 is  executed   see  Figure  6.2 .  This  closing curly brace  closes  the block of statements  following the  ¡ expression.  When  there  is  only  one  statement in  the  block,  the  curly  braces  are  not required.  The  else  statement,  line  number  7,  is  executed  if the  expression  in  line  3  is  false.  This  tag  marks  the  end  of the JavaScript  program.   ¡Explorer  User  Prompt   Script Prompt:   How old are you?   GO   j    K   Cancel   Fiaure 6.1  The user is oromoted  for inout.    126   Chapter 6      Under Certain  Conditions   C o n d i t i o n al   F l ow   C o n t r ol   -  M i c r o s o ft    I n t e r n et   E x p l o r er   File   Edit   View   Favorites   Tools   Help   O  Back   .   Q   .   gj    gj    I  p  Search   Favorites   Address   C:\sambar50\docs\ch6\ifelse.html   You pay the senior fare!   Figure  6.2   If the  a ge  entered  was greater than  55,  this  message  is displayed.   The Conditional Operator.  The conditional operator, called a ternary operator, was  discussed  in  Chapter  5,  "Operators."  Because  it  is  often  used  as  a  shortcut  for  the  if else  conditional  statement,  it  is  reviewed  again  here.   F O R M AT   E X A M P LE   x ? y : z   conditional expression ? expression :  expression   If x evaluates to true,  the value of the expression  becomes y,  else the value of the expression becomes z   big =  x > y   ? x : y   If x is greater than y,  x is assigned to  variable big,  else y is assigned to  variable  big   An  if else  statement  instead  of  the  conditional  statement:  if  x > y   {  big = x;   } else{   big = y;   }   E X A M P LE    6.2            Conditional  Operator            6.2  Conditionals   127   E X A M P LE    3     C O N T I N U E D    6 .2   alert "You pay $"  + price + 0 ;                  E X P L A N A T I ON   1   2   3   The  user  is  prompted  for  input.  The  value  he  or  she  enters  in  the  prompt  box  is  assigned  to  the  variable  age.  If the  value  of age  is  greater  than  55,  the  value  to  the  right  of the  ?  is  assigned  to  the  variable  price;  if not,  the  value  after  the  :  is  assigned  to  the  variable  price.  The  alert  dialog  box  displays  the  value  of  the  variable  price.   6.2.2  if else if   "If you've  got  $1,  we  can  go  to  the  Dollar  Store;  else  if you've  got  $10,  we  could  get  a  couple  of movies;  else if you've got $20 we  could buy a  CD  .  .  .  else  forget it!" JavaScript  provides  yet  another  form  of branching,  the  if else  ¡ construct.  This  construct  provides  a  multiway  decision  structure.   F O R M AT   if  condition   {  statement s ;   }  else if   condition   {   statement s ;   }  else if   condition   {   statement s ;   }  else{   }   statement s ;   If  the  first  conditional  expression  following  the  ¡ keyword  is  true,  the  statement  or  block of statements  following the  expression  is  executed  and  control  starts  after  the  final  else  block.  Otherwise,  if  the  conditional  expression  following  the  if keyword  is  false,  control  branches  to  the  first  else  if and  the  expression  following  it  is  evaluated.  If  that    128   Chapter 6      Under Certain  Conditions   E X A M P LE    6.3                      Conditional  Flow Control        --  alert "You pay the child's fare.  " ;   <!   var age=eval  prompt "How old are you?  ",""  ;  if  age > 0 && age <=12   {  }  else if  age > 12 && age < 60  {  }  else {  }   alert "You pay the regular adult fare.  " ;   alert "You pay the senior fare!  " ;   1  2  3  4  5  6   7   8       - ->                  E X P L A N A T I ON   3 ,4    5,  6   1  2   7   8   JavaScript  program  starts  here.  The  prompt  dialog box will  display  the  message  "How   old  are you?  ".  Whatever  the  user  types  into  the  box  will  be  converted  to  a  number  by  the  evalQ  method  and  then  stored  in  the  variable  age.  If  the  value  of the  variable  age  is  greater  than  0  and  age  is  also  less  than  or  equal  to  12,  then  line  4  is  executed  and  the  program  continues  at  line  8.  If the  expression  on line 3  is  false,  the JavaScript interpreter will  test this line,  and if  the  age  is  greater  than  12  and  also  less  than  60,  the  block  of statements  that  follow  will  be  executed  and  control  goes  to  line  8.  You  can have  as many else ifs  as you like.  The  else  statement,  line  number  7,  is  executed  if  all  of  the  previous  expressions  test  false.  This  statement  is  called  the  default  and  is  not  required.  This  tag  marks  the  end  of the JavaScript  program.   6.2.3  switch    129   6.2  Conditionals   F O R M AT   switch   expression {  case label :   case label :   statement s ;  break;  statement s  ;  break;   default : statement;   E X A M P LE   switch   color {  case  "red":   alert "Hot! "   ;  break;   case  "blue":   alert "Cold." ;  break;  default:   alert "Not a good choice." ;  break;   The  value  of  the  switch  expression  is  matched  against  the  expressions,  called  labels,  following the  case  keyword.  The  case labels  are  constants,  either  string  or  numeric.  Each  label  is  terminated  with  a  colon.  The  default  label  is  optional,  but  its  action  is  taken  if  none  of  the  other  cases  match  the  switch  expression.  After  a  match  is  found,  the  state- ments  after  the  matched  label  are  executed  for  that  case.  If  none  of  the  cases  are  matched,  the  control  drops  to  the  default  case.  The  default  is  optional.  If  a  break  state- ment is  omitted,  all  statements  below  the  matched  label  are  executed  until  either  a break  is  reached  or  the  entire  switch  block  exits.   E X A M P LE    6.4                   The  Switch Statement     130   E X A M P LE    Chapter 6      Under Certain  Conditions       6.4   CONTINUED   <! -- var day_of_week=Math.floor  Math.random  *  7 +l ;   switch day_of_week {      Get a random number between 1 and 7     Monday is 1, Tuesday is 2,  etc.  case 1:  case 2:  case 3:  case 4:   9am to 10pm" ;   alert "Business hours Monday through Thursday are  from  break;  case 5:  alert "Business hours on Friday are from 9am to 6pm" ;  break;  case 6:  alert "Business hours on Saturday are from  break;  default:  alert "We are closed on Sundays and holidays" ;  break;   11am to 3pm" ;   }    -->               E X P L A N A T I ON   The random number  function generates  a random number between  1  and  7 inclu- sive when  the script is  executed.  The  random number is stored in  a variable  called  day_of_week.  The  day_of_week  value  of  the  switch  expression  is  matched  against  the  values  of  each  of  the  case  labels  below.  The  first  case  that  is  tested  is  1.  If the  random  number  is  1,  the  message  "Business  hours  Monday  through  Thursday  are from  9am  to  10pm"  will  be  displayed  in  the  alert  dialog box.  The  same  is  true  for  case  2 , 3,   and  4.  This  statement is  executed if case  1,  2,  3,  or 4  are  matched.  Note  there  are  no break  statements  associated  with  any  of  these  4  case  statements.  Program  control  just  drops  from  one  case  to  the  next,  and  if cases  1,  2,  3,  or  4  are  not  matched,  execu- tion  control  goes  to  the  next  case   case  5   for  testing.   1   2  3   4  5   6  7  8   1   2   3   4    6.3  Loops   131   E X P L A N A T I ON    CONTINUED    6  7   8   The  default statements  are  executed  if none  of the  cases  are  matched.  This  final break statement is not necessary,  but is good practice in case you should  decide  to  replace  the  default with  an  additional  case  label.  The  final  curly  brace  ends  the  switch  statement.  Figure  6.3  displays  examples  of  the  output.   The  S w i t ch   Statement  -  M o z i l la   F i r e f ox   S w i t ch   S t a t e m e nt   -  M o z i l la   F i r e f ox   File  Edit  View  History  Bookmarks   Tools  Help   File  Edit  View  History  Bookmarks   Tools  Help   O   X   t ii    1  Ü   file:   C: wamp www tp0a8c9f.html   -   C   X   É   Li]   file : HfC :  wamp www tp0aa25f,   012   Q  Comparing  ...      Conditional...   Conditional...   javascript   J  ig  ...   Q  Conditional...  j   Conditional...   javascript s...   [ J a v a S c r i pt   A p p l i c a t i o n]   [ J a v a S c r i pt   A p p l i c a t i o n]   Figure 6.3  A random number between  1  and  7 determines which  case is matched and  executed.   Loops  are  used  to  execute  a  segment  of  code  repeatedly  until  some  condition  is  met.  JavaScript's  basic  looping  constructs  are   6.3  Loops      while         for  do while   6.3.1   The while  Loop   The  while  statement  executes  its  statement  block  as  long  as  the  expression  after  the  while  evaluates  to  true;  that  is,  nonnull,  nonzero,  nonfalse.  If  the  condition  never  changes  and  is  true,  the  loop  will  iterate  forever   infinite  loop .  If  the  condition  is  r _i   -  -   . f . . ..    1--  1   . 1-  -   ^  -   J ..  .r   ^   1   -   -   -   -       132   F O R M AT   while   condition   {   statements ;  increment decrement  counter;   Chapter 6      Under Certain  Conditions   E X A M P LE    6.5                          E X P L A N A T I ON    Looping  Construets        Initialize loop counter    While Loop            Test   var i=0;  while    i < 10  {   document.writeln i ;  i++;             End  of  loop  block   }       Increment  the counter   The JavaScript  program  starts  here.  The  variable  i  is  initialized  to  0.  The  expression  after  the  while  is  tested.  If i  is  less  than  10,  the  block in  curly brac- es  is  entered  and  its  statements  are  executed.  If the  expression  evaluates  to  false,   i.e.,  i  is  not  less  than  10 ,  the  loop  block  exits  and  control  goes  to  line  6.  The  value  of  i  is  displayed  in  the  browser  window   see  Figure  6.4 .  The  value  of i  is  incremented  by  1.  If this  value  never  changes,  the loop will  never  end.  This  curly  brace  marks  the  end  of  the  while  loop's  block  of  statements.  The JavaScript  program  ends  here.   1  2  3  4  5  6  1   1  2  3   4  5   6  7    6.3  Loops   133   The  do while  statement  executes  a  block  of  statements  repeatedly  until  a  condition  becomes  false.  Owing  to  its  structure,  this  loop  necessarily  executes  the  statements  in  the  body of the loop  at least once before  testing its  expression, which is  found  at the bot- tom  of  the  block.  The  do while  loop  is  supported  in  Mozilla Firefox  and  Internet  Explorer  4.0, JavaScript  1.2,  and  ECMAScript  v3.   1  L o o p i ng   C o n s t r u c ts  M o z i l la   F i r e f ox  File  Edit  View  History  Bookmarks   Tools  Hej   —   -  C   ^   Û   file:   C: wc   Using the JavaScrip...  Q   javascrip...0&&7o20""   While Loop   0 12  3 4 5 6 7  8 9   Figure  6.4  Output from  Example  6.5.   6.3.2   The do while  Loop   F O R M AT   do   {  statements;}  while   condition ;   E X A M P LE    6.6                  Looping  Construets    1  2  3  4  5    Do While Loop          var i=0;  do{   document.writeln i ;  i++;         } while   i < 10      134   Chapter 6      Under Certain  Conditions   E X P L A N A T I ON   l  2   The  variable  i  is  initialized  to  0.  The  do block is  entered.  This  block of statements will  be  executed  before  the  while  expression  is  tested.  Even  if the  while  expression  proves  to  be  false,  this  block will  be  executed  the  first  time  around.  The  value  of  i  is  displayed  in  the  browser  window   see  Figure  6.5 .  The  value  of i  is  incremented  by  1.   3  4  5  Now,  the  while  expression  is  tested  to  see  if it  evaluates  to  true   i.e.,  is  i  less  than   101 .  If so,  control  goes  back  to  line  2  and  the  block is  re-entered.   3j  Looping  Constructs  -  Microsoft  Internet   ExplJ   File  Edit  View   Favorites   Tools  Help    ^Back       >   -   ffl   ^Search    J   Address   C:\sambar50\docs\dowhilejs.html   Do While Loop  0 1 2 3 4 5 6 7 89   Figure  6.5  Output  from  Example  6.6,  the do while  loop.   6.3.3  The for Loop  The for loop  consists  of the or keyword  followed by three  expressions separated by semico- lons  and  enclosed within parentheses.  Any or  all  of the  expressions  can be  omitted, but the  two  semicolons  cannot.  The  first  expression  is  used  to  set  the  initial  value  of variables  and  is  executed just  once,  the  second  expression  is  used  to  test  whether  the  loop  should  con- tinue  or  stop,  and  the  third  expression updates  the loop  variables;  that is,  it increments  or  decrements  a  counter, which will  usually determine  how many  times  the  loop  is repeated.   F O R M AT   f o r   E x p r e s s i o n l ; E x p r e s s i o n 2 ; E x p r e s s i o n 3    for   initialize;  test;  increment decrement    {statement s ;}   {statement s ;}    135   6.3  Loops   E X A M P LE    6.7                                 E X P L A N A T I ON    Looping  Construets     For Loop         for  var i = 0 ; i < 1 0;   i++   {  }   document.write i ;   1  2  3   1   2  3   The for  loop  is  entered.  The  expression  starts  with  step  1,  the  initialization  of  the  variable  i  to  0.  This is  the  only time  this step  is  executed.  The  second  expression,  step  2,  tests  to  see  if i  is  less  than  10,  and  if it is,  the  statements  after  the  opening  curly  brace  are  executed.  When  all  statements  in  the  block  have  been  executed  and  the  closing  curly  brace  is  reached,  control  goes  back  into  the for  expression  to  the last expression  of the  three,  i  is now incremented by one  and  the  expression  in  step  2  is  retested.  If true,  the  block  of statements  is  entered  and  executed.  The  value  of  i  is  displayed  in  the  browser  window   see  Figure  6.6 .  The  closing  curly  brace  marks  the  end  of  the for  loop.   '^j  Looping  Constructs  -  Microsoft  I n t e r n et   Explore   J  File  Edit  View   Favorites   Tools  Help    ^Back      J   i   ^   ^Search   _*JF,   Address   http :   localhost f orloopjs. html   For  Loop  0 1 2 3 4 5 6 7 89   Figure  6.6  Output from  Example  6.7.    136   Chapter 6      Under Certain  Conditions   6.3.5   Loop  Control  with break and continue   The  control  statements,  break  and  continue,  are  used  to  either  break  out  of  a  loop  early  or  return  to  the  testing  condition  early;  that  is,  before  reaching  the  closing  curly  brace  of  the  block  following  the  looping  construct.   Table 6.1  Control  Statements   Statement   What It Does   break   continue   Exits the loop  to  the next statement after the  closing curly brace of the  loop's statement block.   Sends loop control directly to the top of the loop and re-evaluates the loop  condition.  If the  condition is true,  enters  the loop block.   E X A M P LE    6.8                   Looping  Construets        while true  {   var grade=eval prompt "What was your grade?  ",""   ;  if  grade   100   {   alert "Illegal  choice!" ;  continue;     Go back to the top of the loop   }  if grade > 89 && grade < 101   else if   grade > 79 && grade < 90   else if   grade > 69 && grade < 80    {alert "Wow!  You got an A!" ;}  {alert "You got a B" ;}   {alert "You got a C" ;}  {alert "You got a D" ;}   else if   grade > 59 && grade < 70   else  {alert "Study harder.  You Failed." ;}  answer=prornpt "Do you want to enter another grade?","" ;  if answer  !=  "yes" {   break;      Break out of the loop to line 12   9  10  11   12   }   }    6.3  Loops   E X P L A N A T I ON   137   1  2   3   4  5   6   7  8   The JavaScript  program  starts  here.  The  while loop is  entered.  The loop  expression will  always  evaluate  to  true,  caus- ing the body of the loop  to  be  entered.  The  user  is  prompted  for  a  grade,  which  is  assigned  to  the  variable grade.   If the  variable grade is  less  than  0  or  more  than  100,  "Illegal  choice"  is  printed.  The  continue  statement  sends  control  back  to  line  2  and  the  loop  is  re-entered,  prompting the user  again  for  a grade.  If a valid grade was entered,  and it is greater  than 89  and less than  101,  the grade  "A"  is  displayed   see Figure  6.7 .  Each  else if branch  will  be  evaluated  until  one  of them  is  true.  If none  of the  expressions  are  true,  the  else  condition  is  reached  and  "You  Failed"  is  displayed.  The user is prompted  to  see  if he  or  she wants  to  enter  another  grade.  If the  answer is not yes,  the  break  statement  takes  the user  out of the  loop,  to  line  12.   9  10,  11   [JavaScript  Application]   What was your grade?   OK   ]   [  Cancel      [JavaScript  Application]   Figure 6.7  The user enters a  grade,  clicks  OK,  and  gets another alert box.   6.3.6  Nested Loops and Labels  Nested Loops.  A  loop  within  a  loop  is  a  nested  loop.  A  common  use  for  nested  loops is to display data in rows and columns.  One loop handles the rows and the other  handles  the  columns.  The  outside  loop  is  initialized  and  tested,  the  inside  loop  then  iterates  completely  through  all  of its  cycles,  and  the  outside  loop  starts  again where  it    138   Chapter 6      Under Certain  Conditions    Nested  loops        <!--  Hiding JavaScript  from old browsers  var str =  for   var row =0; row < 6; row++ {   for   var col=0; col < row; col++ {   document.write str  ;   }  document.write " " ;   E X A M P LE    6.9                  }    -->               E X P L A N A T I ON   1  2  3   4   1  2   3   The  variable  str  is  assigned  a  string  The  outer for  loop  is  entered.  The  variable  row  is  initialized  to  0.  If  the  value  of  row  is  less  than  6,  the  loop  block   in  curly  braces   is  entered   i.e.,  go  to  line  3 .  The  inner for loop  is  entered.  The  variable  col  is  initialized  to  0.  If  the  value  of col  is less  than  the  value  of  row,  the  loop block is  entered  and  an  @ is  displayed  in  the  browser.  Next,  the  value  of  col  will  be  incremented  by  1,  tested,  and  if  still  less  than  the  value  of  row,  the  loop  block  is  entered,  and  another  @  displayed.  When  this loop has  completed,  a row of @ symbols will  be  displayed,  and  the statements  in  the  outer  loop  will  start  up  again.   4  When  the  inner  loop  has  completed  looping,  this  line  is  executed,  producing  a   break in  the  rows   see  Figure  6.8 .   Figure  6.8  Nested  loops:  rows a nd   columns.  Output from  Example  6.9.    6.3  Loops   139   Labels.  Labels  allow  you  to  name  control  statements   while,  do while, for,for in,  and  switch   so  that  you  can  refer  to  them  by  that  name  elsewhere  in  your  program.  They  can  be  named  the  same  as  any  other  legal  identifier  that  is  not  a  reserved  word.  By  themselves,  labels  do  nothing.  Labels  are  optional,  but  are  often  used  to  control  the  flow  of  a  loop.  A  label  looks  like  this,  for  example:   topOfLoop:   Normally,  if you  use  loop-control  statements  such  as  break  and  continue,  the  control  is  directed  to  the  innermost  loop.  There  are  times when  it  might be  necessary  to  switch  control  to  some  outer  loop.  This  is where  labels  most  often  come  into  play.  By prefixing  a  loop  with  a  label,  you  can  control  the  flow  of  the  program  with  break  and  continue  statements  as  shown  in  Example  6.10.  Labeling  a  loop  is  like  giving  the  loop  its  own  name.   E X A M P LE    6.10       outerLoop: for   var row = 0; row < 10; row++ {   for   var col=0; col <= row; col++ {   document.write "row "+ row +"column "  + col,  " " ;  if  col==3 {   document.write "Breaking out of outer loop at column  break outerLoop;   " + col +" " ;   }   }  document.write "************ " ;   }      end outer loop block       E X P L A N A T I ON   The  label  outerLoop  labels  the or  loop  that  follows  it.  It's  like  giving  the  for  loop  its  own  name  so  that  it  can  be  referenced  by  that  name  later.  This  is  a  nested for  loop.  As  the  program  executes  the  row  and  column  numbers  are  displayed.  If  the  expression  is  true,  the  break  statement,  with  the  label,  causes  control  to  go  to  line  8;  it  breaks  out  of  the  outer:  loop.  A  break  statement without  a  label  would  cause  the  program  to  exit just  the  loop  to  which  it  belongs.  The  value  of  row  and  col  are  displayed  as  the  inner  loop  iterates.  The  break  statement  with  the  label  causes  control  to  go  to  line  8.  Each  time  the  inner  IOOD  exits,  this  row  of stars  will  be  printed   see  Fieure  6.9 .   1  2  3  4  5   6  7   1   2   3   4  5  6    140   Chapter 6      Under Certain Conditions   ^jmm   - Mozilla Firefox   1  File  Edit  View  History  Bookmarks  Tools  Help   1*    C   M       file:   C: ™arn   A   Conditional  .   J  Conditional  ..   [J  flle:  ...s.   r ow   0  cplurrm  D   r ow   lcolumn'Q  r ow   lcolumii  1   r ow   2column  0  row'2 column  1  r ow   2columii  2   r ow   3column  0  r ow   3  c olurrm  1  r ow   3column  2  r ow   3  c olurrm  3     Breaking  out  of both  loops  at  column  3      Figure 6.9  Using a  label with a  loop.   6.4  What You Should  Know   "Two  roads  diverged  in  a  wood,  and  I—"  wrote  Robert  Frost.  This  chapter  was  about  making  decisions  about  the  flow  of your  program,  what  road  to  take,  how  to  repeat  a  sequence of statements, and how to stop the repetition. At this point, you should under- stand:   1.  How  to  use  conditional  constructs  to  control  the  flow  of your  program;  if else,   switch,  and  so  on.   2.  What a block is  and when  to use  curly braces.  3.  How  and why you would  use  a  switch  statement.  4.  How  the  while  and  the  do while  loops  differ.  5.  How  to  use  a for loop.  6.  How  to  use  break  and  continue  with  loops.  7.  The  purpose  of nested  loops.  8.  How to make  an infinite  loop  and how to  get out of it.  9.  The  purpose  of labels  in loops.  10.  How  else ifs  work.    Exercises   141   Exercises   1.  Create  a  while  loop  that  displays  numbers  as:  10  9 8 7 6 5 4 32   1.  Put  the   numbers  in  HTML  table  cells.   2.  Ask  the  user  what  the  current  hour  is.  If the  hour  is  between  6  and  9  a.m.,  tell  the  user,  "Breakfast is  served."  If the  hour  is  between  11  a.m.  and  1  p.m.,  tell  the  user,  "Time  for  lunch."  If  the  hour  is  between  5  and  8  p.m.,  tell  the  user,  "It's  dinner  time."  For  any other  hours,  tell  the  user,  "Sorry, you'll  have  to wait,  or  go  get  a  snack."   3.  Create  a  conversion  table  using  the  following  formula:   C  =    F   -  3 2       1 . 8;   Start with  a  Fahrenheit  temperature  of 20  degrees  and  end  with  a  temperature  of  120  degrees;  use  an  increment  value  of  5.  The  table  will  have  two  columns,  one  for  Fahrenheit  temperature  values  and  one  for  those  same  temperatures  converted  to  Celsius.   4.  Ask  the  user  for  the  name  of the  company  that  developed  the JavaScript  lan- guage.  Alert  the  user  when  he  or  she  is  wrong,  and  then  keep  asking  the  user  until  he  or  she  gets  the  correct  answer.  When  the  user  gets  it  right,  confirm  it.   5.  Use  a switch  statement  to  rewrite  the  following JavaScript  code.  Prompt  the  user   for  the  number  of a  month  rather  than  setting it  to  8.       month = 8;   if   month ==1   {   alert "January" ;   }  else if   month ==2   {  alert "February" ;  }  else if   month ==3   {   alert "March" ;   }  else if   month ==4   {   alert "April" ;   }    142   Chapter 6      Under Certain  Conditions   else if   month == 6   {   alert "June" ;   }  else if   month ==7   {   alert "July" ;   }  else if   month == 8   {   alert "August" ;   }  else if   month ==9   {  alert "September" ;  }  else if   month == 10   {   alert "October" ;   }  else if   month == 11   {  alert "November" ;  }  else if   month ==12   {  alert "December" ;   }  else{   }       alert "Invalid month" ;   6.  Consider  the  following  example:   var start_time =   day == weekend   ? 12  :  9;   Rewrite  the  conditional  statement  using  an  if else  construct.    chapter 7   Functions   7.1  What Is a Function?   A pocket calculator performs  certain  functions.  You push  the  buttons,  send information  to  the  calculator,  it  performs  a  calculation,  and  sends  back  the  results.  You  don't  care  about what transpires inside  the  calculator, you just want the results.  That's what a func- tion  does.  Functions  are  self-contained  units  of  a  program  designed  to  accomplish  a  specified  task  such  as  calculating  mortgage  payments,  displaying  random  images,  or  checking  for  valid  input.  They  can  be  used  over  and  over  again  and  thus  save you  from  repetitious  programming.  They  are  also  used  to  break up  a  program  into  smaller  mod- ules  to  keep  it better  organized  and  easier  to  maintain. JavaScript has  a large  number  of  its  own  built-in  functions,  and  now you  can  create  your  own.   By  definition,  a  function  is  a  block  of statements  that  not  only  performs  some  task,  but also returns  a value.  A function is an independent part of your program  and not exe- cuted  until  called.  A  function  is  often  referred  to  as  a  "black  box."  It's  like  the  pocket  calculator:  Information  goes  into  the  black box   or  calculator   as  input  and  the  action  or value  returned  from  the box is its  output.  What goes  on inside  the box is  transparent  to  the  user.  The  programmer  who  writes  the  function  is  the  only  one  who  cares  about  those  details.  When  you  use  document.writeQ,  you  send  something  like  a  string  of  text  to  the  function,  and  it sends  some  text back to  the  browser.  You  don't  care  how it  does  its job,  you  just  expect  it  to  work.  If you  send  bad  input,  you  get  back  bad  output  or  maybe  nothing,  hence  the  expression  "Garbage  in,  garbage  out."   Functions  are  like  miniscripts.  They  contain JavaScript  statements  that  behave  as  a  single  command  and  can  be  called  repeatedly  throughout  a  program  without rewriting  the  code.   The  terms  "function"  and  "method"  are  often used  interchangeably.  A method refers  to  a  function  that  is  used  with JavaScript  objects   covered  in  Chapter  8,  "Objects" .  A    144   Chapter 7      Functions   7.1.1  Function Declaration and Invocation   Functions  must  be  declared  before  they  can  be  used.  Normally  functions  are  placed  in  the     tag  of  the  HTML  document  to  ensure  that  they  are  defined  before  used.  Within  the     tag  itself,  they  can  go  anywhere.  Function  definitions  are  often  stored  in  external  JavaScript  files  or  libraries   see  "JavaScript  from  External  Files"  on  page  22  of  Chapter  1 .   To  define  a  function,  the function  keyword  is  followed  by  the  name  of  the  function  and  a  set  of  parentheses.  The  parentheses  are  used  to  hold  parameters,  values  that  are  received  by  the  function.  The  function's  statements  are  enclosed  in  curly  braces.  function bye    { document.write   "Bye, adios, adieu, au revoir..." ;  }   Once  you  define  a  function,  you  can  use  it.  JavaScript  functions  are  invoked  by  call- ing  the  function;  for  example,  bye  .  A  function  can  be  called  directly  from  within  the     tag,  from  a  link,  or  when  an  event  is  triggered,  such  as when  the  user  presses  a  key.  When  called,  the  function's  name  is  followed  by  a  set  of parentheses  that may  con- tain  messages  that will  go  to  the  function.  These  messages  are  called  arguments.   To  check  whether  the  function  has  been  defined  or  if  it  is  truly  a  function,  use  the   typeof  operator;   for  example,   typeof function_name .   F O R M AT   Function  definition:   function  function_name  function  function_name       {statement; statement;}   parameter,  parameter {statement;  statement;}   a   J  J   i   Function  call:   function_name     ;  f  function_name argument1,  argument2,  ...    E X A M P LE    7.1        A  Simple  Function        function welcome  {      Function defined within    tags   var place="San Francisco";  alert "Welcome to  "+ place +  "!" ;   1  2  3  4   }        7.1  What Is a Function?   145   E X A M P LE    7.1    CONTINUED               welcome  ;          San Francisco   <img src="sf.jpg"  width="400"  height="300"   border="1">                  E X P L A N A T I ON   1   4  5   6   2,  3   Functions  must be  defined  before  they  can  be  used.  Therefore,  functions  are  nor- mally  placed  in  a JavaScript  program,  between  the  HTML      tags.  In  this  example,  the  function  is  defined,  but  it will  not  do  anything  until  it  is  called  from  somewhere  in  the  file.  The function  keyword  is  followed  by  the  user-defined  name  of  the  function  called  welcome  and  a  set  of  parentheses.  The  parentheses  are  used  to  hold  parameters,  information  being received  by  the  function.  What the  function  actually  does  is  de- fined  in  a set of statements  enclosed within  curly braces.  The  function  statements  are  enclosed  in  a  set  of curly  braces.  This  is  the  code  that  is  run  whenever  the  function  is  called.  It  is  called  the  func- tion  definition.  When  this  function  is  called,  the  string  San  Francisco  will  be  as- signed  to  the  variable  called  place  and  the  alert  dialog  box  will  display  "Welcome  to  San  Francisco!"  in  the  browser  window   see  Figure  7.1 .  This  is  the  final  closing  curly brace  that  ends  the  function  definition.  This  is  where  the  function  is  invoked  or  called.  When  the  function  welcomeQ  is  called,  the  statements  within  its  definition will  be  executed.  The  function  is  defined  in  the  head  of the  document  and  called  from  the  body  of  the  document before  the     tag is reached.  This image will not appear until  the  user  clicks  the  OK  button  in  the  alert  dialog  box   see  Figure  7.2 .   [JavaScript  Application]   !  Welcome to San Francisco!    146   Chapter 7      Functions   Figure  7.2  After the  user clicks the  OK  button  in  the alert box,  this  image  loads.   Passing Arguments.  If  a  user  wants  to  send  values  to  a  function,  the  values  are  enclosed in  the parentheses right after the function name  and sent as a comma-separated  list  of  arguments  when  the  function  is  called.  The  arguments  are  received  by  the  func- tion  in  a  list  of  corresponding  values  called  parameters   see  Figure  7.3 .  The  names  of  the  arguments  are  not  necessarily  the  same  names  in  the  parameter  list,  but  they  corre- spond  to  the  same  values.  These  values  can  be  assigned  to  local  variables  within  the  function.  Local  variables  disappear  when  the  function  exits.  JavaScript  doesn't  keep  track of the  number  of arguments  sent  to  the  function  to  make  sure  they match  up with  the  number  of  parameters  specified  in  the  function  definition  at  the  other  end.  If you  send  three  arguments,  and  there  are  only  two  parameters  defined  within  the  function,  the  third  argument  is  ignored.  If you  send  three  arguments,  and  there  are  four  parame- ters  waiting  within  the  function,  then  the  fourth  parameter  is  undefined.  It's  similar  to  sending  messages  to  an  answering  machine.  If  you  send  a  message  and  the  message  machine  is  full,  your  message  is  ignored,  and  if you  send  a message  and  there's  room  for  more messages,  the message you sent is stored,  and the unused space is still  there, but not  defined.   function_name argument1,  argument2,  ... ;       function call   caller    function_name parameter1,  parameter2... {   var result= parameterl + parameter2;       function definition   receiver    }       curly braces required    7.1  What Is a Function?   147   Arguments  are  passed  to  the  receiving  function.   Arguments  are  received  as  parameters  by  the  receiving  function  a nd  stored  in  local variables;  they  will  disappear  w h en   the  function  ends.   Calling Function   Receiving Function   Figure  7.3  In  the  analogy  of the  pocket calculator,  you  are  the  caller  w h en   you  press  the  buttons,  a nd   the  internal  functions  inside  the  calculator  are  the  receiver.   E X A M P LE   7.2       Passing  Arguments-; title>       1  2   function greetings pal {      "Birdman!" is stored in pal  alert  "Greetings to you,  "   ;       \          J            greetings  "Birdman! "  ;     Pa ising an argument   3  4          E X P L A N A T I ON   1   2   3   4   The  function, greetingsO,  has  one  parameter,  called pal.  This  parameter  holds  a  value  that is sent to  the  function when it was  called.  The parameter name is  any valid Java- Script variable  name.  At this  point,  the  function  has  been  defined  but not called.  The  alert  method  will  display  the  string,  "Greetings  to  you,  "  concatenated  to  the  value  stored  in  pal;  in  this  example  that  value  is  "Birdman!".  The JavaScript program  is in  the body of the  document.  It contains  a function  call  that will  invoke  a  function  defined  in  the  head  of the  document.  The  function  greetingsO  is  called  with  one  argument,  "Birdman!".  This  argument  will  be  sent  to  the  function,  and  assigned  to  the  parameter, pal.  If the  function  had    148   Chapter 7      Functions     ok   j   Figure  7.4  Output  from  the greetingsQ  function  in  Example  7.2.   Calling a Function from a  Link.  A  function  can  be  called  directly  from  a  link,  by  using  the  JavaScript  pseudoprotocol,  JavaScript:,  instead  of  a  normal  URL.  The  Java- Script:  protocol  and  the  function  call  are  placed  within  quotes  and  assigned  to  the  href  attribute  of  the     tag.  When  the  user  clicks  his  or  her  mouse  on  the  link,  instead  of  the  program  going  to  the  URL  of  another  page,  a JavaScript  function  will  be  called.   function greetings  {     Function defined within   tags   E X A M P LE    7.3        Functions        document.bgColor="lightblue";  alert "Greetings to you!" ;       }            1  2   3   4     Click here  for    7.1  What Is a Function?   E X P L A N A T I ON   149   l   2 ,3   The JavaScript  program  starts  here  in  the  head  of  the  document.  The  function  is  defined  within  the  head  of  the  document  to  guarantee  that  it  will  be  defined  be- fore  being  called.  The  function greetings     is  defined.  It is  very simple.  It  causes  the  background  col- or  of the  document  to  be  a  light blue  color  and  causes  an  alert box  to  appear with  a  greeting  message.  The  href attribute  of  the  link  tag  is  assigned  a  string  consisting  of  the JavaScript:  pseudoprotocol,  followed by the  name  of the  function  to be  called.  When  the user  clicks  this  link,  JavaScript  calls  the  function,  greetings  .   See  Figure  7.5.    Click  here  for  Salutations   Microsoft  I n t e r n et   Explorer   Greetings  to  you!   Figure  7.5  After clicking the link,  the function is called,  causing the alert dialog  box  to  appear.   Calling a Function from an Event.  An  event  is  triggered  when  a  user  performs  some  action,  like  clicking  a  button  or  moving  the  mouse  over  a  link.  The  function  assigned  to  the  event  is  called  an  event  handler.  When  the  event  is  triggered,  the  func- tion  is  called.  In  the  following  example,  when  the  user  clicks  the  Welcome  button,  the  function  is  called.   E X A M P LE    7.4        Functions  and Events        function greetings you {     Function definition   document.bgColor="lavender" ;  alert "Greetings and Salutations!  " + you ;    Chapter 7      Functions   150   E X A M P LE        7.4   CONTINUED          <input  type="button"   value="Welcome button"  onClick="greetings 1 Dan" ;"   3   4  5  6  7    >                 E X P L A N A T I ON   1   The JavaScript program  starts here.  The  function is  defined in the head  of the  doc- ument.  The  function  greetingsO  is  defined  here.  The  body  of the  page  starts  here.   2  3  4  An  HTML  form  starts  here.  It will  be  used  to  create  a  button  input  device.  The  type  of input  device  is  a  button.  5  The  value  that will  be  displayed  in  the  button  is  "Welcome  button"   see  Figure  7.6 .  6  7  When  the  user  presses  or  clicks  the  button,  the  onClick  event handler  will  be  trig- gered,  causing  the  greetingsO  function  to  be  called.  The  value  assigned  to  the  on- Click  event handler  is  a JavaScript  function  enclosed  in  quotation  marks   see  Fig- ure  7.7 .   a  Firefox  ;s  Tools  Help   ^   I  file:   C: wamp www example7.4.html   ins   I  I   Functions        Functions        Functions   [  W e l c o me   button"]   Figure  7.6  When the button is clicked,  the event is triggered.    7.1  What Is a Function?   151    ols  Help   s;   C: wamp www example7   4, html   jnctions   Functions   Functio   ^ W e l c o me   button   [JavaScript  Application]   H      Greetings and Salutations!  Dan   1 B  1   Figure 7.7  A function is called after the event is triggered. The function  "handles"  the  event.   Calling a Function from JavaScript.  In  the  first  examples  of  this  chapter,  func- tions were  defined  in  one JavaScript script and  called  from  another.  Although it is valid  to  define and call  the function from  the same JavaScript program, it is often desirable to  define  the  function in the head  of the  document,  to be sure it has been defined before it  is called. Then you can call the function from a link, an event, or another JavaScript pro- gram.  Because  the  document is  defined  within  the     tags,  the  body  is  often  the place from where you will call functions.  The general rule of thumb is:  If your script  is  designed  to  write  data  to  the  page,  put  the     tags  within  the     tags.  Example  7.2  called  a  function  from  one JavaScript  program  within  the  body,  but  defined  the  function  in  another  JavaScript  program  within  the  head.  Finally,  you  might  want  to  store  function  definitions  in  an  external  library   .js  file   where  they can be reused  and shared by other programs.   Scope  Of Variables in Functions.  The scope of a variable describes where the vari- able  is  visible  in  the  program;  that  is,  where  it  can  be  used  in  the  program.  Variables  declared  outside  of functions  are global  in  scope,  meaning  they  can be  used  or  changed  anywhere  in  the  program.  A  variable  is  also  global  if declared within  a  function  unless  it is  declared within  a  function with  the var keyword.  The  var keyword  makes  the  vari- able local in scope;  that is,  the variable  can be  used  only within  the  function where it is  defined  and is no  longer visible  once  the  function  ends.    Chapter 7      Functions   152   E X A M P LE    7.5        Function  Scope        var name="William";  var hometown="Chico";  function greetme  {      Global variable   var name="Daniel";     Local variable  var hometown="Husingen";  alert "In function the name is  " + name +  " and hometown is  "+ hometown ;      greetme  ;     Function call  alert "Out of function,  name is  "+ name +   " and hometown is " + hometown ;   }                          E X P L A N A T I ON   1   The  variables  called  name  and  hometown  are  global  in  scope.  They  are  visible  throughout  the JavaScript  program.  The  function  called  greetme    is  declared  and  defined.   2  3  Any  variables  declared  within  a  function  with  the  var  keyword  are  local  to  that  function.  In  fact,  you  must  use  the  var  keyword  when  declaring  local  variables;  otherwise,  the  variables  will  be  global.  The  variable  called  name has  been  declared  inside  the  function.  This  is  a  local  variable  and  has  nothing  to  do  with  the  global  variable  of  the  same  name  on  line  1.  The  function  variable  will  go  out  of  scope;  that  is,  it  will  no  longer  be  visible,  when  the  function  ends  on  line  6,  at  which  point  the  global  variable  will  come  back  in  scope.  If  the  variable,  name,  had  been  given  a  different  name,  within  the  function,  such  as  name2  or  my Name,  then  the  global  variable  would  have  remained  in  scope  within  the  function.  The  variable  called  name  and  hometown  were  defined  inside  this  function  and  are  local  in  scope.  They will  stick  around  until  the  function  exits.  The  closing  curly  brace  marks  the  end  of the  function  definition.  The  function  greetme    is  called  here.  The  global  variable  called  name  has  come  back  into  scope.   5  6  7   4    7.1  What Is a Function?   153   [JavaScript Application]    X    1   In function the na ime is Daniel c   and hometown is Husingen   OK   OK   [JavaScript Application]    X    1   Out of function,  i name is Willia   m and hometown is Chico   Figure  7.8  Output from  Example  7.5.   7.1.2  Return Values   F O R M AT   return;  return expression;   E X A M P LE   function sum  a, b   {  var result= a + b;  return result;   Functions  can  return  values with  a  return  statement.  The  return  keyword  is  optional  and  can  only  exist within  a  function.  When  the  return  keyword  is  reached  in  a  function,  no  further  processing  within  the  function  occurs.  A  return  can  be  used  to  send  back  the  result  of some  task,  such  as  a  calculation,  or  to  exit  a  function  early  if  some  condition  occurs.  If  a  function  doesn't  have  a  return  statement,  it  returns  the  undefined  value.   If  the  call  to  the  function  is  made  part  of  an  expression,  the  returned  value  can  be  assigned  to  a  variable.  In  Example  7.6  the  sum  function  is  called  with  two  arguments,  5  and  10.  The  sum  function's  return  value  will  be  assigned  to  the  variable  total.  var total=sum 5,  10 ;    Chapter 7      Functions       Return  the result of the division   154   E X A M P LE    7.6        Return  Value      function mileage miles,  gas {  }   return miles gas;   1  2                           drive? ",  ""  ;   var distance=eval prompt "How many miles did you  var amount=eval prompt "How much gas did you use?",  ""  ;  var rate = mileage distance,  amount ;  alert "Your mileage  "+ rate  +" miles per gallon.\n" ;       Return value assigned to rate                     E X P L A N A T I ON   1  A  function  called  mileage    is  defined  in  this JavaScript  program  located  between   the     tags  of  the  document.  The  return  statement  sends  back  to  the  caller  of  the  function  the  result  of  the  di- vision.  That  returned  value  will  be  assigned  to  the  variable,  rate,  on  line  4.  The  user  is  asked  for  input.  The  number  of  miles  driven  and  the  amount  of  gas  used  are  assigned  to  the  variables  called  distance  and  amount,  respectively   see  Figure  7.9 .  The  mileage    function  is  called,  passing  two  arguments.  Because  the  mileage    function  is  on  the  right  side  of  the  assignment  operator   the  =  sign ,  whatever  is  returned  from  the  function will  be  assigned  to  the  variable,  called  rate,  on  the  left  side  of the  =  sign.  The  alert dialog box  displays  the  value  returned  from  the  function:  the  number  of  miles  used  per  gallon   see  Figure  7.10 .   3   4  5   2   3   4   5    7.1  What Is a Function?   155   How many miles did you drive?   1325  1   1   1   OK   1  1  Cancel   ]   [JavaScript  Application]   ^ ^^    How  much  gas  did you  use?   [151   I   OK   I   I  Cancel      Figure 7.9  The user is asked for input.   Figure  7.10  The  number of  miles  per gallon  is  returned  by the mileageQ function.    156   Chapter 7      Functions   7.1.3  Anonymous Functions as Variables   A  function  definition  can be  assigned  directly to  a variable.  The variable is like  any other  variable  except  that  its  value  is  a  function  definition  and  this  variable  is  used  as  a  refer- ence  to  the  function.  The      is  a JavaScript  operator,  indicating  that  a  function  is  to  be  called.  Pay  close  attention  to  the  use  of  the      operator  in  the  next  example  and  how  it  affects  the  outcome  of  the  function  variable.  Later  we  will  use  these  anonymous  func- tions  with  event  methods  as  follows:   window.onload = function    {   alert "Welcome" ;   }   When  the  Web  page  has  finished  loading,  the  onload  event  is  triggered  and JavaScript  will  execute  the  anonymous  function  statements,  in  this  case  an  alert  box.   E X A M P LE    7.7         Anonymous  Function        var greetings= function  {     Anonymous function has no name   message="Greetings to you!  ";     Function definition  return message;   1  2  3   4   5   }                    text=greetings;     greetings is a variable;     its value is the function definition  document.write text  +" " ;  text=greetings  ;  document.write text  +" " ;      Call function                  E X P L A N A T I ON   1   A  function  without  a  name,  called  an  anonymous  function,  is  given  its  definition  1—  A t„ tU„ ,,U1„   ft U„   -ru„   tU„   —    7.1  What Is a Function?   E X P L A N A T I ON   157   2   In  the  function  a  variable  called  message  is  assigned  a  string.  Rather  than  using  an  alert  box  to  send  the  message,  it will  be  returned  to  the  caller.  The  return  statement  sends  the  message  back  to  the  caller  of  the  function.   3  4  Notice  that  in  this  line  we  are  displaying  the  value  of  the  variable  greetings.  The   5   definition  of  the  function  is  shown.  In  this  line  the  variable  name  is  appended  with  parentheses,  the      operator.  This  operator  causes JavaScript  to  call  greetings  as  a  function  and  return  the  result.  In  the previous line, without the      operator,  the value  of the variable,  a function  def- inition,  is  displayed   see  Figure  7.11 .   1  Anonymous  Function  - Mozilla Firefox  File  Edit  View  History  Bookmarks   Tools  Help       i  >   tali   Cl   file:   C: wamp www anonymousFunction7.7.html   lpleFu...      A Simple Fu...      Anonymous  ...  Q  Anonymous  ...  Q  Anonymous  ...   function      {  message  =  "Greetings  to  you!  Greetings  to  you!   return message;  }   Figure  7.11  A variable  with  an anonymous function as its value   E X A M P LE    7.8        Functions  as Variable        var greetings=function   visitor {       Function body is assigned to greetings  message="Greetings to you,  " + visitor + "!  ";  return message;   }                    var  salutation=greetings "Elfie" ;  document.write salutation +  " " ;  var hello = greetings;  var welcome = crreetinas;       Function variable assigned  to another variable   1   2   3  4  5    158   Chapter 7      Functions   E X A M P LE    7    CONTINUED    7.8  document.write welcome "your Majesty"   +   " May I take your coat?  " ;                  E X P L A N A T I ON   L  A  function  definition  is  assigned  to  the  variable  named  greetings.  This  time  the   function  will  take  an  argument  called  visitor.  The  return  statement  sends  back  to  the  caller  the  value  of  the  message  string  as- signed  on  the  previous  line  .  Because  the  value  of  the  variable  greetings  is  a  function  definition,  to  activate  the  function,  we  need  to  add  parentheses  to  the  variable  name.  Now  the  variable  acts  as  a  function  call.   4  We  can  assign  the  greetings  variable  to  another  variable.  Now  hello  contains  the   function  definition.  To  call  the  function  add  parentheses  to  hello  as  hello  .   5  Now  the  variable  welcome  is  assigned  the  name  of the  function  called  greetings.  To   call  the  function,  we  add  parentheses:  welcome  .  The  value  of  the  variable,  hello,  is  a  function  definition.  To  use  the  variable  as  a  function call, parentheses are  added  to its name,  and any arguments passed within  the  parentheses  just  as  with  any  ordinary  function  call,  e.g.  hello  "Stranger" .  The  value  of the  variable,  welcome,  is  a  function  definition.  The  function  is  called  by  adding  parentheses  to  the  variable  name,  welcome   see  Figure  7.12 .   2   3   6   7      Variables  as  Functions  -  Mozilla  Firefox  File   View  History   Bookmarks   Edit   Tools  Help   C   iß   l_l   file :   C: Documents  and  5ettings Owne   onchange Event   Loading...   Passing Arguments   Greetings  to  you,  Elfie!  Greetings  to  you.  Stranger!  Greetings  to  you,  your Majesty!  May I take  your  coat?   Figure  7.12  Variables used  as functions   7.1.4  Closures    7.1  What Is a Function?   159   A  common  use  for  a  closure  is  to  set  up  the  parameters  for  a  function  that  will  be  called  at some  time  in  the  future. JavaScript's  setTimeoutO  function  is  used  to  set  a  timer  in your  program.  The  first  argument may be  a  reference  to  a  function  that will  be  called  after  some  time  interval  has  passed.  You  will  see  in  future  chapters  that JavaScript  also  uses  closures  with  event  handling  and  information  hiding.   Douglas  Crawford  writes   http:  www.crockford.com JavaScript private.htmI ,   "The  pattern  of public,  private,  and  privileged  members  is  possible  because JavaScript has  clo- sures. What this means is  that an inner function always has access to  the vars and param- eters  of  its  outer  function,  even  after  the  outer  function  has  returned.  This  is  an  extremely  powerful  property  of  the  language.  There  is  no  book  currently  available  on  JavaScript  programming  that  shows  how  to  exploit  it.  Most  don't  even  mention  it."   On  the  other  hand,  accidentally  creating  closures  can  have  harmful  side  effects  such  as Internet Explorer memory leaks and reduced  efficiency of code.  A very detailed  article  on  both  the  pros  and  cons  of using  closures,  written  by Richard  Cornford,  can be  found  at   http:  www.jihhering.com faq faq_notes closures.html.   In  the  following  example  the  outer  function  is  called  paintQ  and  the  inner  function  is  anonymous.  The  paintQ  function  receives  two  parameters.  It  then  creates  a  local  string variable  called  str and  assigns  the  parameter  values  to  it.  When paintQ  exits,  those  variables  and  their values  continue  to  exist even  though  they seem  like  they should have  gone  out  of scope.  Why?  Because  the  anonymous  function  needs  access  to  the  variables  in  paintQ  until  it  has  been  called  and  exits.   E X A M P LE    7.9        Closures       function paint type, color   {   1  2  3   4   5   6   var str = "The " + type + " is " + color;    local variable  var tellme = function    {     Anonymous function   document .write  " " +str+" . "     }  return tellme;      return a reference  to the function   }               Testing a closure       var sayl = paint "rose","red" ;   * A reference  to  the   anonymous  is  function is returned *    var say2 = paint "sun",  "yellow" ;    160   E X P L A N A T I ON   Chapter 7      Functions   1  A  function  called paintQ  is  defined.  It  takes  two  parameters:  a  type  and  a  color.  2   The  local  variable  called  str is  assigned  a  string  containing  the  value  of  type  and  color.  The  variable  tellme  is  a  reference  to  an  anonymous  function.  Defining  a  function  within  another  function  is  called  a  closure.  This  function  will  print  the  value  of  str and  a newline when it is  called.  But it is  only defined here.  It will not be  called  until  after  the  paintQ  function  exits.  Even  though  this  function  has  no  local  vari- ables  of its  own,  it reuses  the  str variable  declared  in  the  outer  function.  The  paintQ  function  returns  the  variable  tellme  whose  value  happens  to  be  a  ref- erence  to  an  anonymous  function.  The  returned  value,  a  reference  to  the  anonymous  function  defined  within  the  paintQ  function,  is  assigned  to  sayl.  The  returned  value,  a  reference  to  the  anonymous  function  defined  within  the  paintQ  function,  is  assigned  to  say2.  Let's  look  at  the  value  of the  variable  sayl.  In  the  alert  box   Figure  7.13   you  can  see  that  the  value  of sayl  is  the  complete  definition  for  the  anonymous  function  declared  on  line  3.  By  adding  parentheses  to  the  reference  sayl,  so  that  now  it  is  sayl   ,  the  anony- mous function is called and the statement within it is displayed   see Figure  7.14 .  The  variable  say2  is  also  a  reference  to  an  anonymous  function;  say2Q  calls  that  anonymous  function.   3   4   5   6   7   8   9   1  Closures  -  M o z i l la   F i r e f ox   File  Edit  View  History  Bookmarks   Tools  Help   C?   X   i-MJ'   L3   file:   C: wamp www dosure.h   -1   ...O.html   J  file:  -C.html    Q  file:  ...9. html   Q  Closures   Testing a closure   [ J a v a S c r i pt   A p p l i c a t i o n]   I   function    {  >   document. write " "  +  str  + ".     "  j   . »a   "7   l  o   T k«    . ~   ,7   ,n   i.   —   -=:—.s- -: ——.    7.1  What Is a Function?   161   k  Closures  -  M o z i l la   F i r e f ox   File  Edit  View  History  Bookmarks   Tools  Help       C   &         file:   C: wam   '   ...O.html   J  flle:  ...c.html   file:  ...9.html   Testing n closure   The  rose  is  red  The  smi is  yellow   7.1.5  Recursion   Definition  of recursion:   recursion:  See  recursion.   Figure  7.14  The closure  remembers the values of local variables.   This  definition  says  it  all!  JavaScript  sup- ports  recursion.  So  what  is  it?  Have  you  ever  taken  apart  a  Russian  doll?  Open  up  the  outside  doll  and  there's  another  smaller  duplicate  doll  inside  it,  take  that  one  out,  and you  find  another,  and  so  on,  until you  get  down  to  a  tiny doll  at the  end.  Then when you put them  back, you start with the last doll you  opened  and keep return- ing  each  doll  until  you  get  back  to  the  first  one  you  opened.  A  recursive  function  is  a  function that calls itself.  It's a chain of function calls to the same function.  The first time  it calls itself is the first level of recursion, the second time is the second level, and so on.  When a function  calls itself,  execution starts at the beginning of the  function,  and when  the  function  ends,  the program backs up  to where it was when it called the function and  starts executing from that point.  Most important,  there must be a way to stop the recur- sion,  or it will be infinite,  and  probably cause  the program  to  crash.   An  example  often used  to  describe  recursion  can be  demonstrated with  a  function  to  produce  a Fibonacci sequence  of numbers:  0,  1,  1,  2,  3,  5,  8,  13,  21,  34,  55,  and  so  on.  Here is  a little bit of history about how this  formula was  derived.   In  the  beginning of the  13th  century,  an Italian mathematician,  Leonardo Fibonacci,  was  trying  to  solve  the  following  problem  presented  at  a  mathematical  competition  in  Pisa:  How many rabbits would be  produced  in  a year if,  beginning with  a single  pair  of    162   Chapter 7      Functions   with  a  formula,  named  after  himself,  to  answer  the  rabbit  question.  The  sequence  starts  with  0  and  1,  and  then  produces  the  next number  by  adding  the  two  previous  numbers  together; so  0  +  1  is  1,  1  +  1  is  2,  1  +  2  is 3,  2  +  3  is  5,  and so  on.   In  Example  7.10,  the  Fibonacci  sequence  recurses  20  times  and  as  you  can  see,  if  these  numbers  represent  rabbits,  we  have  over  4,000  rabbits  in  a  short  period  of time!   E X A M P LE    7.10               var count = 0;  function  fib num {   count++;  switch num {   case 0 :  return 0 ;  break;  case 1:  return 1 ;  break;  default:  return fib num - 1   + fib  num - 2   ;  break;   }   }                              for  n=0; n < 20; n++ {   value = fib n ;  document.write " "  + value +  " " ;   }  alert "Function called itself  "+ count +  "  times!!" ;   1  2  3   4   5   6   7  8   9                        7.1  What Is a Function?   E X P L A N A T I ON   163   1   2   3  4   5  6   7   8   9   The  variable,  count,  is  initialized  outside  the  function,  making  it  global.  It  will  keep  track  of  the  number  of  times  the fib     function  is  called.  T he f i b      function introduces  the  concept of recursion,  a function  that calls itself.  This  function  starts  the  initial  task  and  in  itself is  not  recursive.  When  the  same  task needs  to  be  repeated,  that  is  when fib    will  call  itself.  Each  time  the  function  is  called,  the  value  of count is  incremented  by  1.  The  first  two  Fibonacci  numbers  are  0  and  1,  and  each  remaining number  is  the  sum  of the  previous  two.  The  switch  statement  is  used  to  check  for  the  incoming  values  of  a  number,  num.  If  num  is  0,  the  value  returned  will  be  0;  if  it  is  1,  the  value  returned  is  0  +  1.  Because  these  cases  are so simple  there is no  need  for re- cursion.  If the  number  is  greater  than  1,  then  the  default  case  is  entered.  The  first values in  the sequence  are  0  and  1.  The value  1  is returned.  This  is  the heart of the recursive  program.  If the number is not 0  or  1,  the  default  case  is  entered,  and  the  remaining  number  is  the  sum  of  the  previous  two  num- bers.  The  function fib    is  used  within  its  own  definition.  The  result  of  the  first  call  to  the fib     function  is  added  to  the  result  of next  call  to fib 0  ,  returning  the  result  to  line  8.  The  loop  iterates  20  times.  For  each  iteration,  the  function fib    is  called,  which  calls  itself.  Each  time  through  the  for  loop,  the  function fib    is  called  passing  the  value  n  as  its  argument   see  line  6 .  The  value  of  the  count  variable  increases  by  one  every  time  the fib     function  is  called.  With  recursion,  the  function was  called  35,400  times   see  Figure  7.15 .   History  Bookmarks   Tools  Help   X   i ff    L3   file:   C: Documents and Settings Owner My Documents tp 105ef7.html   ^   T   ^  T  AC   its      Passing Arguments   ¡"^  file:   C: ...rsive.html   ]   file:   C: ...rsive.html   Loading...   [o  [T[T[2  [3  [5  1? [13  [ 2 T [ 34  [55  [89  1 44   2 33   3 77   6 10   9 87   1 5 97  2 5 84   4 1 81   [JavaScript  A p p l i c a t i o n]     X     y   Function called itself 35400 times!!    164   7.11   E X A M P LE           Chapter 7      Functions    Recursion        function upDown num {   document.write "  Level  "  if num < 4 {   + num +  " " ;   upDown num +1 ;  document.write " Level  "+ num +  " " ;       Function calls itself   }   }               Recurs ion       1  2   3  4  5   6   upDown 1 ;               E X P L A N A T I ON   The  first  time  this  function  is  called  it  is  passed  the  number  1.  The  function  prints  out  the  level  number,  Level  1.  If the  value  of  num  is  less  than  4,  the  function  calls  itself.   1  2  3  4  When  the  function  calls itself,  it  adds  1  to  the  value  of num  and  restarts  execution  at  the  top  of  the  function,  this  time  with  the  value  of  num  equal  to  2.  Each  time  the  function  calls  itself,  it  creates  a  new  copy  of num  for  that  recursion  level.  The  other  copy  is  on  hold  until  this  one  is  finished.  The  function  keeps  calling  itself  and  printing  level  numbers  in  bold  text  until  the  ¡ statement  fails;  that  is,  until  the  value  of  num  is  not  less  than  4.  This  line  won't  be  executed  until  the  recursion  stops—when  the  value  of  num  is  4.  When  that  happens,  the  current  version  of  upDownQ  is  finished,  and  we  back  off to  the  previous  called  function  and  start  execution  at line  5.  This  process  con- tinues  until  all  of the  functions  have  completed  execution.  This  is  the  first  call  to  the  upDownQ  function.  The  argument is  the  number  1.  The  output  is  shown  in  Figure  7.16.   6   5    7.1  What Is a Function?   165   [JavaScript Application]    X    1   Call level:  1   [JavaSc ri pt A p p licatio n]    X    1   Call level: 2   [JavaScript  Application]   j   Call level:  3   [JavaScript  Application]      Backing out:  3   [JavaScript Application]    X    j   Call level:  4   [JavaScript Application]    X    I   Backing out:  2   OK   ]   [JavaScript Application]    X    j   Backing out:  1   [JavaScript  Application]   f   All done!   OK   OK   OK   OK   OK   OK    166   Chapter 7      Functions   7.1.6  Functions Are Objects  For  a  discussion  on  how  functions  behave  as  objects.  See  "Classes  and  User-Defined  Functions"  on  page  182  in  Chapter  8,  "Objects."   7.2  Debugging Techniques   Now that we have  covered some  of the  fundamental JavaScript constructs,  this is  a good  time  to  introduce  some  debugging  techniques.  As  your  programs  grow,  so  do  your  chances  to  create  errors.  Getting to know how to  deal with these problems will save you  much  time  and  frustration.   7.2.1  Function Syntax  When working with  functions  there  are  some  simple  syntax  rules  to  watch  for:   1.  Did you  use  parentheses  after  the  function  name?  2.  Did you  use  opening  and  closing  curly braces  to  hold  the  function  definition?  3.  Did  you  define  the  function  before  you  called  it?  Try  using  the  typeof operator   to  see  if a  function  has  been  defined.   4.  Did you  give  the  function  a unique  name?  5.  When you  called  the  function  is your  argument list separated  by  commas?  If   you  don't have  an  argument list,  did you  forget  to  include  the  parentheses?   6.  Do  the  number  of arguments  equal  to  the  number  of parameters?  7.  Is  the  function supposed  to return  a value?  Did you remember  to provide  a vari-  able  or  a place  in  the  expression  to  hold  the  returned  value?   8.  Did you  define  and  call  the  function  from  within  a JavaScript program?   Figure  7.17  shows  function  errors  displayed  by  the  JavaScript  Error  Console  in  Firefox.  This is a very useful debugging tool  for immediate error  checking. Just click the  Tools  menu  and go  to  Error  Console.  These  error  messages make  troubleshooting your  scripts  much  easier.  Figures  7.18  through  7.20  show  errors  in  other  browsers.   j ^ f r r or   Console   AS   Q  Errors   *  Warnings   Messages   0   Clear   missing  }  a f t er   f u n c t i on   b o dy  f ile :    C :  wamp www example7.3. html   Code:   G   t   Evaluate   Line:  9    7.2  Debugging Techniques   167   3  Windows  Internet  Explorer   Errors  on  this  web page  might cause  it to work incorrectly   To see this message in the future,  double-dick the warning icon on the status bar.   Sylit.ix   e r r or  browser jnfo.hfrn  Code:0  URI:  file:   C:   wamp www browserjnfo. htnil   Line:  15  Char:  1      Always  show  this  message  for  webpage  errors   I*:  Hide details   Copy error details   3lose   Figure  7.18  Windows Internet Explorer—Look in the bottom left corner of the page.  Double-click the yellow icon.  A window will  appear with the  line and  character  where the  error was found.   I   ' lie  Find  Disable  View  Outline   Images  Cache  Tools  Validate   Browser Mode:  IE8  Document Mode:  Qtilrks   1   fe   Uli   ilfo 1  Ël   [  Stop Debugging  ]  example?.3.html   -   Breakpoints   Locals  Watch  Call Stack   [ Console    Expected'}'   ¿ ^ u n c t i o ns   - Developer Tools   HTML   C35   Script  Profiler   3     i  £  3  4  5  6  7  8  9  10  li  12  1:3  i4   1      Func ti ons   language=javascript>   <script   function  greetings  {      Function  defined  within  <!   document. bgColor=rrlightblue";  a l e rt   "Greetings  to  you!rr ;                   Click  here   S alutati ons     168   Error  Console   Expand All   J     Collapse All   Chapter 7      Functions   E 0H   J  U JavaScr ipt  -  file:  localhost C: wamp ww browser_info.html   Inline  script  compilation  Syntax  error  while  loading:  line  15  of  inline  script  at  file:  localhost C: w  Expected  statement  else  if    verOffset=nAgt.indexOf "Opera"  !=-l   {   T  Messages   Figure  7.20  Opera's  Error Console.   Clear   '   ]C   Close   7.2.2  Exception  Handling  with try catch and throw  An exception is a runtime  error that the program might encounter during its execution,  such as an undefined variable, an index value that is referenced but doesn't exist, a func- tion  that  receives  a  bad  parameter,  and  so  on.  Exception  handlers  make  it  possible  to  catch  errors  and  resolve  them  gracefully.  By  catching  the  exception  and  controlling the  error  message,  the  program  will  be  much  nicer  for  an  unwary user  who  is  not used  to  the  kinds  of error  messages you see  all  the  time.  As  of JavaScriptl.5 exception handling  is  now supported.   The try catch Statements.  You can enclose and test those parts of a program where  you  expect potential  problems in  a  try  statement.  If an  exception  occurs within  the  try  block,  control  will  shift  to  the  catch  block.  The  catch  block  will  contain  statements  to  clarify  what  went  wrong.  If  there  were  no  errors,  the  catch  block  will  be  ignored.  See  Examples  7.12  and  7.13.   When an exception is thrown in the  try block, the variable shown as e in catch  e  holds  the value  of the  type of exception   Table  7.1   that was thrown in  the  try block.  You can  use  this  variable  to  get information  about  the  exception  that was  thrown.   The  variable    7.2 Debugging Techniques 185   Table  7.1  Primary Error Types  JavaScript  1.5+    Error Name   EvalError   RangeError   ReferenceError   SyntaxError   TypeError   URIError   When It Is Raised   If the  eval    function is used in  an incorrect manner   If a numeric variable or  parameter exceeds its allowed  range   If an invalid reference is used;  e.g.,  the variable is undefined   If a syntax error occurs while  parsing  code  in  an  eval     If the type of a variable or  parameter is a valid type   Raised when eneodeURi     or  deeodeURi     are passed invalid  parameters    Try Catch        alert "Current balance is $:"  + get_balance   ;   alert "Something went wrong!  \n"+  err.name + ":  "+ err.message ;   E X A M P LE    7.12       try  {   }  catch err   {   1   2   3   }               E X P L A N A T I ON   1  2   The  try  block  contains  the JavaScript  that will  be  tested  for  errors.  If  an  error  occurred  in  the  try  block,  it  would  be  caught  in  the  catch  block.    170   Chapter 7      Functions   [JavaScript Application]    X       *   Something wen  ;  ReferenceErrot   it wrong!  ':  get_balano   e is not defined   OK   Figure  7.21  An  error was c a u g ht  a nd   its  n a me   a nd   the  reason  for it are  displayed.   The  throw S t a t e m e n t.   The  throw  statement  allows  you  to  create  your  own  condi- tions for exceptions.  Used within in  the  try block,  a specific error  condition  can be tested  and  thrown  to  the  catch  block.  In  the  catch  block you  can  create  customized  error  mes- sages  to  correspond  to  a  particular  error.  See  Example  7.13.   The finally Clause.  You  can use  the  finally  clause  to  execute statements  after  the  try  statement  finishes,  whether  or  not  an  exception  occurred.   You  can  use  the  finally  clause  to  make  your  script  fail  gracefully  when  an  exception  occurs;  for  example,  you  might  need  to  release  a  resource  that  your  script  has  tied  up.  The  following  example  opens  a  file  and  then  executes  statements  that  use  the  file   server-side JavaScript allows you  to  access  files .  If an exception is  thrown while  the  file  is  open,  the  finally  clause  closes  the  file  before  the  script  fails.   E X A M P LE    7.13        Catch me  if you Can!           var age=eval prompt "Enter your age:",""  ;  t r y{   if age>120   age < 0 {   1  2  3   4   5  6   t h r ow    " E r r o r l ";   }  else if age == " "  {   t h r ow    " E r r o r 2 ";   }  else  if isNaN age  {   t h r ow    " E r r o r 3 ";   }  c a t c h   e r r  {   }   }   i  f   e r r = = " E r r o r l    {   alert "Error!  The value is out of range" ;    7.2  Debugging Techniques   171   E X A M P LE    7.13    CONTINUED    if       e r r = = " E r r o r 2 "  {   a l e r t   " E r r o r!     Y ou    d i d n 't     e n t er    y o ur    a g e "  ;     e r r = = " E r r o r 3 "  {  a l e r t   " E r r o r!     T he    v a l ue    is    n ot    a   n u m b e r "  ;   }    if  }   }  if     }  e l se    }  e l se   }   7     a ge    <   1 3  {   a l e r t   " Y ou    p ay    c h i  l d 's    f a r e ! "  ;   i f   a ge    <   55     {   a l e r t   " Y ou    p ay    a d u lt    f a r e . "  ;   {   a l e r t   " Y ou    p ay    s e n i or    f a r e . "  ;               E X P L A N A T I ON   1   2   3   4   5   6   7   This  simple  example  is  here  to  show  you  how  the  try catch throw  statements  can  be used  for handling errors.  For something like this, you will probably find it eas- ier  to  test  the  program  in  the  if conditionals,  but we'll  use  it  to  demonstrate  how  to  throw  exceptions.  First,  the  user  is  prompted  for  his  or  her  age.  The  try  block  is  entered  to  test  for  the  possible  error  conditions  defined  by  the  programmer.  If an  invalid  age  is  entered   i.e.,  an  age  less  than  0  or  greater  than  120 .  An  error  string,  "Error 1"  is  thrown  and  picked  up  in  the  catch  block  to  be  tested.  If the  user  didn't  enter  anything,  the  string  "Error2"  is  thrown  and  picked  up  in  the  catch  block.  In  the  catch  block,  the  errors  will  be  handled  based  on  the  error  string  that  was  thrown  from  the  try  block.  The  err value  being passed  to  the  catch  block is  one  of the  values  that was  thrown  from  the  try  block;  for  example,  "Errorl",  "Error2",  "Error3".  Because  all  the  testing  and  error handling was handled in  the  try catch  blocks,  the  rest  of the  program  can  continue  with  no  further  testing  of the  age  variable   see  Figure  7.22 .    172   Chapter 7      Functions   [JavaScript  Application]   Enter your age:   [JavaScript  Application]   [JavaScript  Application]   Enter your age:   why do you want to know?   [JavaScript  Application]   Figure  7.22  Example of output for  Example 7.13.   7.3  What You Should  Know   Functions  are  fundamental  to  programming  in  any  programming  language.  There  are  JavaScript built-in  functions  such  as  evalQ,  parselnt  ,  and  Number 0,  among others,  and  there  are  user-defined  functions.  This  chapter  was  all  about  defining  and  calling  your  own functions.  We will be  creating functions  throughout the rest of this  text to  perform  tasks  based  on  user-initiated  events  such  as  clicking  a link,  clicking a  button,  rolling  a  mouse over an image,  or submitting a form.  Functions will be defined within JavaScript  code or from another file. They may be used to create objects, respond to HTTP requests,  validate  data,  perform  calculations,  customize  output,  and  so  on.  After  reading  this  chapter, you  should  know:   1.  How to  declare  and  define  functions.  2.  Where  to  put  functions  in  a JavaScript program.  3.  How to  call  a function with  arguments  and use parameters.  4.  What  can  be  returned  from  a  function.  5.  The  difference  between  global  and  local  variables.  6.  How to  trigger  a function  call.  7.  How to  assign  a function  to  a variable.  8.  What  closure  is.  9.  What  recursion  is.  10.  How  try  and  catch  work.  11.  How  to  debug programs with  browser  tools.    Exercises   173   Exercises   1.  Copy  the  following  file  and  execute  it  in  your  browser.  What's  wrong with  it   and  why?  Can  you  fix  it?        link        function addem  {   var n = 2;  var y = 3;  document.write  n + y ,  " " ;   }                       Click here    Hello    2.  Write  a  function  that will  calculate  and  return  the  amount  that should  be  paid   as  a  tip  for  a  restaurant  bill.  The  tip  will  be  20  percent  of  the  total  bill.   3.  Create  a  function  called  changeColorQ  that  will  be  called  when  the  user  presses  one  of  two  buttons.  The  first  button  will  contain  the  text  "Press   here for  a yellow  background".  The  second  button  will  contain  the  text  "Press   here for  a  light green  background".  The  function  will  take  one  parameter,  a  color.  Its  function  is  to  change  the  background  color  of the  current  document;  for  example,  bgColor="yellow".   4.  Write  a  function  called  isLeapYearQ  that  will  return  true  if  this  is  a  leap  year   and  false  if it  isn't.   5.  Write  an  anonymous  function  that will  calculate  and  return  the  distance  you   have  traveled  using  the  formula,  rate  *  time.  The  function  definition  will  be  assigned  to  a  variable.  The  function  will  be  called  using  the  variable.   6.  The  following  example  is  written  in  the  C  language.  It  is  a  very  common  recur-  sive  function  call factorial.  Can  you  explain  how  this  function  works  and  can  you  write  it  in JavaScript?    174   Chapter 7      Functions   return n * factorial n-1 ;   }   }   7.  Write  a  function  that  returns  the  total  cost  of any  number  of buckets  of paint.  Ask the  user  how many buckets  he  or  she  is going to  buy and  for  the  cost of one  bucket.  Ask  the  user  the  color  of the  paint.  Calculate  and  return what he  or  she  owes.  Change  the  color  of  the  font  to  the  color  of the  paint.  Use  the  catch try throw  statements  to  check  for  invalid  input  if  the  user  doesn't  give  you  a  valid  value  for  the  number  of buckets,  such  as  a  number  less  than  0,  or  gives  you  no  input,  or  types  in  a  string,  and  so  on,  check  that  the  user  doesn't  give  you  a  color  of paint  that is  the  same  color  as  the  background  of your  document  or  you will  not  be  able  to  see  the  color  of the  font.    chapter 8   Objects   8.1  What Are Objects?   JavaScript  is  all  about  objects.  Windows  and  buttons,  forms  and  images,  links  and  anchors  are  all  objects.  Programming  languages  like Java,  C++,  and  Python  that  focus  on objects  are  called  object-oriented programming  OOP   languages. JavaScript is called  an  object-based  language  because  it  doesn't  technically  meet  the  criteria  of  the  more  heavy-duty  languages,  but  it  certainly  behaves  as  an  object-oriented  language.  Some  people  are  apprehensive  at  the  thought  of tackling this  kind  of programming,  although  the  mystique  is  somewhat  diminished  from  what  it was  back  in  the  last  century when  the  top-down  procedural  approach  to  programming  was  more  in  vogue.  In  the  real  world,  you  may see  a  book  or  a  cup  or  a  hat  as  an  object. JavaScript  can  represent  data  such  as  a  string  or  a  number  as  an  object,  and  JavaScript  lets  you  create  your  own  objects.  When  talking  about JavaScript  data  types  in  Chapter  3,  "The  Building  Blocks:  Data  Types,  Literals,  and  Variables,"  we  discussed  two  types:  primitive  and  composite.  Objects  are  composite  types.  They provide  a way  to  organize  a  collection  of data  into  a  single unit.  Object-oriented languages, such as  C++  and Java, bundle up data and behav- ior  and  call  it  an  object.  So  does JavaScript.   When you learn  about objects,  they are usually compared  to  real-world  things, like  a  cat,  a  book,  or  a  triangle.  Using  the  English  language  to  describe  an  object,  the  object  itself would  be  like  a noun.   Nouns  are  described with  adjectives.  A  cat might be  described  as  fat,  furry,  smart,  or  lazy.  The book is  old, with 400  pages,  and  contains poems.  The  triangle has  three sides,  three  angles,  and  red  lines.  The  adjectives  that  collectively  describe  these  objects  are  called properties  or attributes.  The  object is made up  of a collection  of these properties  or  attributes.   In  English,  verbs  are  used  to  describe what  the  object  can  do  or what  can  be  done  to    176   Chapter 8      Objects   verbs  are  called  methods  in  object-oriented  languages.  JavaScript  sees  your  browser  window as an object,  a window that can be resized,  opened,  closed,  and so  on.  It sees all  the  frames,  documents,  images,  and  widgets  inside  the  window  as  objects.  And  these  objects  have  properties  and  methods.   JavaScript supports  several  types  of objects,  as  follows:   1.  User-defined  objects  defined  by  the  programmer.  2.  Core  or  built-in  objects,  such  as  Date,  String,  and  Number   see  Chapter  9,   "JavaScript  Core  Objects" .   3.  Browser  objects,  the BOM   see  Chapter  10,  "It's  the BOM!  Browser  Objects" .  4.  The  Document  objects,  the  DOM   see  Chapter  15,  "The  W3C  DOM  and Java-  Script" .   This  chapter  focuses  on  user-defined  objects,  objects  that you  will  create  and  manipu- late.  Once  you  understand  the  syntax  and  how  these  objects  work,  JavaScript's  core  objects will  be  much  easier  to  understand  and  use.   8.1.1  Objects and the Dot Syntax  An  object  model  is  a  hierarchical  tree-like  structure  used  to  describe  all  of  the  compo- nents  of  an  object   see  Figure  8.1 .  For  example,  in  Chapter  1,  "Introduction  to Java- Script,"  we  discussed  the  DOM   see  more  in  Chapter  15 ,  a  tree-like  structure  that  represents  an  HTML  document  and  all  of its  elements,  and  this  tree-like  model  is  also  used  to  represent  the  browser  and  its  components   BOM;  see  Chapter  10 .  JavaScript  objects  and  user-defined  objects  use  this  same  model.  When  accessing  an  object in  the  tree,  the  object  at  the  top  of  the  tree  is  the  root  or  parent  of  all  parents.  If  there  is  an  object below  the  parent it is  called  the  child,  and  if the  object  is  on  the  same  level,  it is  a sibling.  A  child  can  also  have  children.  A  dot   .   is  used  to  separate  the  objects when  descending  the  tree;  for  example,  a  parent is  separated  from  its  child  with  a  dot.  In  the  following  example,  the  Object  object  is  the  primitive  JavaScript  object  from  which  all  other  objects  are  derived  and  the  Object  object has  its  own properties  and  methods  that  all  objects will  have  access  to.   We  list  these  properties  and  methods  in  Tables  8.1  and  8.2.   The  cat object and  the  dog object are  derived  from  the  Object object.  To get the  cat's  name,  you  would  say  cat.name,  and  to  get  the  dog's  breed  you  would  say  dog.breed.  The  Object  object  is  not  named  when  going  down  in  the  hierarchy.   O b j e ct    8.1  What Are Objects?   177   8.1.2  Creating an Object with a Constructor  JavaScript  allows  you  to  create  an  object  in  a  number  of ways.  One  way  is  with  a  con- structor.  A  constructor  is  a  special  kind  of  function  that  creates  the  blueprint  for  an  object.  The  new keyword precedes  the name  of the  constructor  that will be used to create  the  object.  By  convention,  constructor  names  start  with  a  capital  letter  to  distinguish  them  from  ordinary  functions.  var myNewObject = new Object argument,  argument,  ...    To  create  the  cat  object,  for  example,  you  could  say:  var cat = new Object  ;   The  new Operator.  The  new  operator  is  used  to  create  an  instance  of  an  object.  To  create  an  object,  the  new  operator  is  followed  by  the  name  of a  function.  The  new  oper- ator  treats  the  function  as  a  constructor.  This  function  may  be  a JavaScript  constructor  or  one  that  is  user-defined. JavaScript  comes  with  several  built-in  constructors,  such  as  Object0,  Array0,  Date  ,  and  RegExpQ.  With  them  you  use  the  new  operator  followed  by  the  constructor  function  and  any  arguments  it  takes.  A  reference  to  the  object  is  returned  and  assigned  to  a  variable.  var car = new Object  ;  var friends = new Array "Tom",  "Dick",  "Harry" ;  var holiday = new Date "July 4,  2011" ;  var rexp = new RegExp "A[a-zA-Z]" ;   The Object   Constructor.  JavaScript  provides  a  special  predefined  constructor  function  called  ObjectQ,  used  with  the  new  keyword,  to  build  a  generic  object.  The  return  value  of  the  Object    constructor  is  assigned  to  a  variable.  The  variable  contains  a  reference  to  an  instance  of a  new  object.  See  Example  8.1.  Later  we  will  create  a  user- defined  function  that will  act  as  a  constructor.   F O R M AT   var myobj  = new Object  ;   E X A M P LE    8.1        The Object    Constructor        var cat = new ObjectO;   1    178   E X P L A N A T I ON   Chapter 8      Objects   1  2   The  Object    constructor  creates  and  returns  a  reference  to  a  cat  object.  The  returned  value  from  the  Object    constructor  is  a  reference  to  an  object,  as  shown  in  the  Figure  8.2.  [object  Object]  means  that  the  cat  is  a  descendant  of  the  Object  object  from  which  all  objects  are  derived.   Figure  8.2  cat is  an  object.   8.1.3  Properties of the Object  Properties  describe  the  object.  The  object name  is  followed by a  dot  and  a property.  The  properties  are  accessible  only via  their  object.  In  Figure  8.3,  the  top  object  is  the  Object  object.  If we  create  a new cat  and  a dog object,  as  shown  in  Example  8.2,  they are  descen- dants  of  the  Object  object.  Although  the  dog  and  the  cat  are  objects  in  their  own  right,  they  are  considered  properties  of  the  Object  object.  In  fact,  any  object  subordinate  to  another  object  is  also  a  property  of  that  object.  The  cat  and  the  dog  are  descendants  of  the  Object  object.  They  also  have  properties  that  describe  them,  such  as  name,  color,  size,  and  so  forth.  The  Object  object  is  not  listed  in  the  hierarchy  when  using  the  dot  syntax.   To  assign  properties  to  the  cat  object,  the  syntax  would  be  as  follows:   cat.name =  "Sneaky";  cat.color="yellow";   E X A M P LE    8.2       In  Example  8.2  a  new  object  is  created  with  the  new  keyword  and  the  Object    construc- tor.  Properties  are  assigned  to  the  object  and  their  values  retrieved.    User-defined  objects        var toy = new ObjectO;     Create an instance of the object  toy.name =  "Lego";     Assign properties  to  the object  toy.color =  "red";  toy.shape =  "rectangle";       1  2  3   4    8.1  What Are Objects?   179       document.write " The toy is  a "  + toy.name + "." ;  document.write " It is a " + toy.color + "  "   + toy.shape+ "  " ;   E X A M P LE    8 .2     CONTINUED    5  6  7   8               E X P L A N A T I ON   3   JavaScript  code  starts  here.   l  2  The  ObjectO  constructor  is  called  with  the  new  keyword  to  create  an  instance  of  an  object  called  toy.  A  reference  to  the  new  object  is  assigned  to  the  variable,  toy.   All  objects  are  descendants  of  the  Object  object.   The  toy  object's  name  property  is  assigned  "Lego".  The  properties  describe  the  characteristics  or  attributes  of the  object.  Properties  are  not  variables.  Do  not  use  the  var  keyword.  This  is  the  end  of the JavaScript  program.   4  5  A  new JavaScript  program  starts  here  in  the  body  of the  page.  6  The  global  object  called  toy  is  available  within  the  script.  The  value  of the  toy  ob-  ject's  name  property  is  displayed.  The  values  for  the  color  and  shape  properties  of  the  toy  object  are  displayed.  This  is  the  end  of the JavaScript  program.  The  output  is  shown  in  Figure  8.3.   7  8   The toy is a Lego.  It is  a red rectangle.   Figure  8.3  The  toy  object a nd   its  properties.   In JavaScript you  might  see  the  syntax:  window.document.bgColor =  "lightblue";   The  window  is  the  top  object  in  the  Browser  Object  Model.  It  is  the  parent  of  all  par- ents;  the  document  is  an  object  but,  because  it  is  subordinate  to  the  window,  it  is  also  a  property  of  the  window  object.  Although  the  background  color,  bgColor,  is  a  property  of  the  document  object,  by  itself  it  is  not  an  object.   It  is  like  an  adjective  because  it  describes  the  document.     180   Chapter 8      Objects   8.1.4  Methods of the Object  Methods  are  special  functions  that object-oriented languages use  to  describe  the  object's  behavior.  Methods  are  attached  to  the  object with  a  dot  and  are  only  accessible  via  that  object.  Methods, like verbs,  are  action words  that perform  some  operation on  the  object.  The  cat  purrs  and  the  dog  barks.  The  cat  object  may  have  a  method  called  sleepQ  or  play    and  the  dog  object  may  have  a  method  called  sit    or  stay  ,  and  both  of  them  could  have  a  method  called  eat  .   The  dot syntax is  used  to  call  the  methods just as it was used  to  separate  objects  from  their  properties.  When  invoked,  a  set  of  parentheses  are  postfixed  to  the  name  of  the  method.  Omitting  the  parentheses  when  using  a  method  results  in  an  error.  cat.play  ;   Methods, like  functions,  can  take  arguments,  messages  that will be sent to  the  object:   dog.fetch "ball" ;   A JavaScript  example:   window.close   ;  document.write "Hello\n" ;   Example  8.3  demonstrates how to  create  an  object and  assign properties.  But we need  to  complete  the  definition  of  an  object  by  assigning  methods  to  it.  Instead  of assigning  a  value  such  as  a string  or  number  to  the  property  of an  object,  you  assign  a  function  to  it.  Methods  let the  object  do  something or let something be  done  to  it.  There  is  little  dif- ference  between  a  function   see  Chapter  7,  "Functions"   and  a  method,  except  that  a  function  is  a  stand-alone  unit  of  statements  and  a  method  is  attached  to  an  object,  is  accessed  only via  the  object,  and  can  be  referenced  by  the  this  keyword.  Like  functions,  methods  also  take  arguments  and  can  return  a  value.   E X A M P LE    8.3        User-defined  objects           Create the object   var toy = new ObjectO;  toy.name =  "Lego";  toy.color =  "red";  toy.shape =  "rectangle";  toy.display=printObject;     Function name is assigned as a  function printObject  {      Assign properties to the object      property of  the object   1  2   3  4    8.1  What Are Objects?   181   E X A M P LE    8.3    CONTINUED    document.write "It is a " + toy.color + " " + toy.shape   + ". " ;       toy.display  ;    Object method is  called  toy.color="blue";  toy.display  ;   }                          E X P L A N A T I ON   5  6  7   1   2   The  Object    constructor  is  called  with  the  new  keyword  to  create  an  instance  of a  new object.  A  reference  to  the  new  object is  assigned  to  the  variable,  toy.  We  now  have  a  toy  object.  The  properties  describe  the  characteristics  or  attributes  of  the  object.  Properties  act  as  variables  for  the  object,  but  do  not  use  the  var  keyword.  The  toy  object's  name  property  is  assigned  "Lego",  its  color  property  is  assigned  "red",  and  its  shape  property  is  assigned  "rectangle".  The  display  property  is  assigned  the  name  of  a  function.   4   3  When  the  name  of a  function  is  assigned  to  a  property,  the  property will  serve  as  a  method  for  the  object.  The  name  of  a  function,  printObject,  is  assigned  to  the  display  property.  Lines  5  and  7  demonstrate  how  to  invoke  the  new  method  dis- play    .  printObjectO  function  is  defined.  It  will  be  used  as  a  method  for  the  toy  object,  allowing  the  toy  object  to  display  its  properties.  Instead  of  display,  we  could  use  the  same  name  for  this  property;  that  is,  toy.printObject  =  printObject.  By  giving  the  property  a  different name,  in  this  case,  display,  it is  clear  that  the  property is  being  assigned  a  function  name  and  that  the  object's  method  name  is  display,  not  print- Object.  The  object's  display     method  is  called.  Its  function  is  to  print  the  color  and  shape  properties  of  the  toy  object.  The  global  object  called  toy  is  available  within  the  script.  The  value  of the  toy  ob- ject's  color  property  is  changed.  The  object's  display     method  is  called  again  showing  that  the  value  of  the  color  property  has  been  changed  to  "blue".  The  result  is  shown  in  Figure  8.4.   6   5   7    182   Chapter 8      Objects   !  U s e r - d e f i n ed   o b j e c ts  Mozilla  Fir   1  File  Edit  View  History  Bookmarks   S'  c  X   as Q3j   1   User-defined objects   T he   t oy   is   a  L e g o.  It   is   a  r ed   r e c t a n g l e.  T he   t oy   is   a  L e g o.  It   is   a  b l ue   r e c t a n g l e.   Figure 8.4  An object and  its properties.   8.2  Classes and  User-Defined  Functions   8.2.1  What Is a Class?  JavaScript ain't got no  class!  If you  are  familiar with Java or  C++ you may be wondering  how  to  create  a  class  in JavaScript.  A  class  is  a  template  or  blueprint  that  describes  the  properties and behavior  of all objects that belong to  that specific class, so you may have  a  Car  class  or  a  House  class  or  a  Widget  class.  A  Car  class  would  be  defined  with  the  properties and methods for  a Car  and then you could create  as many  Car objects as you  want using the  class  as  a template.  But JavaScript doesn't have  classes in  the  traditional  sense.  It doesn't have  a class  keyword.  We must develop  the notion  of classes in  a differ- ent way. A new JavaScript class is defined by creating a simple function.  The name of the  function will serve as the class name for an object,  and the function will define its prop- erties and methods; it serves as a blueprint or prototype of the object. When the function  is  called with  the  new  keyword,  it  acts  as  a constructor;  that is,  it builds  the new object  and then returns a reference  to it.  We can say that if you call the Book    constructor func- tion,  it returns  a  reference  to  a new Book  object,  an  instance  of the Book  class.   8.2.2  What Is this?  Internally, JavaScript  creates  an  object,  and  then  calls  the  constructor  function.  Inside  the  constructor,  the variable  this  is initialized  to point to  this newly created  object.  The  this keyword is a sort of shorthand reference that keeps track of the current object. When  a function is used  as a constructor,  the  this keyword is used to set the properties  for the  object that was just created.  In this way you can create as many objects  as you need and  JavaScript this will refer to the current object. In Example 8.4, a function is used to create  a Book  class  with  two  properties,  a  title  and  an  author.  The  this  keyword  refers  to  the    8.2  Classes and  User-Defined  Functions   183   E X A M P LE    8.4       function Book  {      Create a Book class   this.title =  "The White Tiger";      Properties  this.author =  "Aravind Adiga";   }  var bookObj = new Book;      Create new Book object  alert bookObj.title + " by " + bookObj.author ;       E X P L A N A T I ON   1  2   3   1   2   The  Book    function  defines  a  class.  When  called  with  the  new  keyword,  the  func- tion  acts  as  a  constructor  function.  The properties  describe  the  characteristics  or  attributes  of the  object.  The  this  key- word  is  a  reference  to  the  current  object.  The  title  and  author  are  defined  for  this  book  object.   3  A  new Book  object  is  created  and  a  reference  to  it  assigned  to  the  variable  bookObj.  The  new  keyword,  used  with  the  Book    function,  causes  the  function  to  behave  as  a  constructor.  You  can  create  as  many book objects  as you want,  but in  this  exam- ple,  they would  all  have  the  same  title  and  author.  See  Figure  8.5  for  the  output.   [JavaScript Application]    X    1   The White Tige r  by  Aravind,   Adiga   OK   Figure  8.5  An  instance  of  the  Book  class.   E X A M P LE    8.5       1  2    User-defined  objects        function Book title,  author, publisher {      Properties   this.pagenumber=0;  this.title = title;  this.author = author;  this.publisher = publisher;      Receiving      parameters    184   E X A M P LE    Chapter 8      Objects       Functions  to be used as methods   8.5   CONTINUED   function pageForward  {   this .pagenumber++;  return  this.pagenumber;  } function pageBackward  {  this.pagenumber--;  return  this.pagenumber;   }                  var myBook = new Book "JavaScript by Example",  "Ellie Quigley",  "Prentice Hall"   ;  myBook.pagenumber=5;    Assign a page number  document.write   " "+ myBook.title +       Create new object   " "  + myBook.author +  " "  + myBook.publisher +  " Current page is " + myBook.pagenumber  ;   10  il   12   document.write " Page forward:  "   ;  for 1=0;i<3;i++ {   document.write " "  + myBook.uppage   ;     Move forward a page   }  document.write " Page backward:  for ;i>0; i-- {   1   ;   document.write " "  + myBook.backpage   ;      Move back a page   }               E X P L A N A T I ON   1   2   3   This  is  the  constructor  function  that  will  represent  a  class  called  "Book".  The  function  creates  the  object  and  assigns  it properties  and  methods.  The  parameter  list  contains  the  values  for  the  properties  title,  author,  and  publisher.  Each  time  this  function  is  called  a  new Book  class  is  instantiated.  The  this  keyword  refers  to  the  Book  object.  The  Book  object  is  given  a  pagenumber  property  initialized  to  0.  A  method  is  defined  by  assigning  the  function  to  a  property  of  the  Book  object.  this.uppage  is  assigned  the  name  of  the  function,  pageForward,  that  will  serve  as    8.2  Classes and User-Defined Functions   185   E X P L A N A T I ON      C O N T I N U E D    4   5   6   The  property  this.backpage  is  assigned  the  name  of  the  function,  pageBackward,  that will serve  as  the  object's method.  The  function pageForwardQ  is  defined.  Its  purpose  is  to  increase  the  page  number  of the  book by  one,  and  return  the  new page  number.  The  function  pageBackwardQ  is  defined.  Its  purpose  is  to  decrease  the  page  num- ber  by  one  and  return  the  new page  number.   7  A  new  object  called  myBook  is  created.  The  new  operator  invokes  the  Book    con- structor  function with  three  arguments:  the  title  of the  book,  the  author,  and  the  publisher.  The  pagenumber  property  is  set  to  5.  The  properties  of the  object  are  displayed  in  the  browser window.   8  9   10  The or loop is  entered.  It will loop  three  times.  11  The  uppageQ  method  is  called  for  the  myBook  object.  It  will  increase  the  page   number  by  1  and  display the new value,  each  time  through  the  for loop.   12  The  backpageO  method  is  called  for  the  myBook  object.  It will  decrease  the  page  number  by  1  and  display  the  new value  each  time  through  the  loop.  The  output  is  shown  in  Figure  8.6.   Ö User-defined  objects  -  Mozilla  Firel  Tc  File  Edit  View  History  Bookmarks   '  C   tiLf  ilZl  file     User-defined objects     User-defined o   JavaScript by Example  Ellie  Quigley  Prentice Hall  Current page is 5  Page forward:  6   8  Page backward:   6  5   Figure  8.6  An instance of the  Book class,  its properties,  and  methods.    186   Chapter 8      Objects   class  will  have  a  copy  of  the  function  code.   In  Example  8.6,  the  calculate  property  is  assigned  an inline  or  anonymous  function.  Because  it is  part  of the  definition  of the  Dis- tanceQ  constructor,  only  objects  of  the  Distance  class  will  have  access  to  the  method,  thereby  encapsulating  the  method.  In  previous  examples  the  functions  that  served  as  methods  were  defined  outside  of the  constructor,  making  available  to  any  class.    functions        function Distance r,  t {    Constructor function   this.rate = r;  this.time = t;  this.calculate=function    { return r * t; }    anonymous       var tripl = new Distance 50,  1.5 ;  var trip2 = new Distance 75,  3.2 ;  alert "trip 1 distance:  "+ tripl.calculate   ;  alert "trip 2 distance:  "+ trip2.calculate   ;   E X A M P LE    8.6       1  2  3   4  5  6   }                          E X P L A N A T I ON   1   2   This  is  the  constructor  function  for  the  Distance  class.  It  takes  two  parameters,  r  and  t,  and  returns  a  reference  to  an  object.  Properties are assigned to  the object.  The  this keyword is  a reference  to  the current  object.   3  When  a  function  is  assigned  to  a  property,  it is  called  a method.  This  is  an  inline  or  anonymous  function.  It has  no  name  but  has  been  defined  and  assigned  to  the  object  as  a  method.   4  A  new  object  called  tripl  is  created  with  the  new  constructor.  Two  arguments  are  passed,  the  rate   how fast   and  the  time   in hours .  This is  the  first instance  of the  Distance  class.   5  Another  object,  tripl,  is  created  and  sends  different  argument  values.  6   See  Figure  8.7.  The  method  called  calculateQ  is  invoked  for  each  object.  The  alert  box  displays  the  value  returned  from  the  calculateQ  method;  that  is,  the  distance    Object  Literals   187   [JavaScript Application]    X    !   trip  1  distance: 75   [JavaScript Application]    X    !   trip 2 distance: 240   OK   OK   3  Object  Literals   Figure  8.7  Two  objects  of  the  Distance  class  call  the calculateQ  method.   Object literals  enable  you  to  create  objects  that support many  features without  directly  invoking a  function.  When  a function  acts  as  constructor you have  to keep  track of the  order  of arguments  that will  be  passed,  and so  on.  Not so with  object literals.  They  are  similar  to hashes in other languages using key value pairs to represent fields.  The fields  can be nested.  The basic syntax for  an  object literal is:   1.  A  colon separates  the property name  from  its value.  2.  A  comma separates  each  set  of name value  pairs  from  the  next set.  3.  The  comma should  be  omitted  from  the  last name value  pair.1   Even with nested  key value  pairs,  the last key value pair  does not have  a  comma.   4.  The  entire  object is  enclosed  in  curly braces.   The value  assigned  to  a property can be  of any data type, including array literals and  object  literals   arrays  are  covered  in  Chapter  9 .  Using  the  new  operator  with  the  Object    constructor or  an  object literal is both simple  and logical,  but the biggest short- coming is that the code is not reusable; that is, you would have to retype the code to use  it again within  the  program,  whereas you  can  use  a  constructor  function  to  create  mul- tiple  instances  of  an  object.  In  Example  8.7,  one  soldier  object  is  created  as  an  object  literal,  but we  cannot create  two soldier  objects unless we redefine  another  entirely new  object.   See JSON in  Chapter  18,  'An Introduction to Ajax  with JSON ,"  for a good rea- son  to  use  object literals.     188   F O R M AT   E X A M P LE   var object = { propertyl: value, property2: value };   var area =  { length: 15, width: 5 };   Chapter 8      Objects   In  the  next  example,  two  methods  are  created  for  the  object  literal.  Once  an  object  literal  has  been  defined  you  can  later  add  more  properties  to  it  as  demonstrated  in  Example  8.7.   E X A M P LE    8.7        working with literal  objects        var soldier = {   1  2  3  4  5   6   7  8   9  10  11   alert "At attention,  arms at the side,  head and   alert "Drop out of formation,  step back,  about face!" ;   name: undefined,  rank:  "captain",  picture:  "keeweeboy.jpg",  fallln: function   {   eyes  forward." ;   },  fallOut: function   {   }       } ;               soldier.name="Tina Savage";     Assign value  to object     property  document.write "The soldier's name is  ",  soldier.name,". " ;  document.write soldier.name+"1s rank is  ",  soldier.rank+." " ;  document.write " "   soldier.fallln  ;    call object's methods  soldier.fallOut  ;        8.3  Object Literals   E X P L A N A T I ON   189   3  4  5   l  A  literal  object  called  soldier is  defined  with  properties  and  methods.  2   The property  name is  separated  from  its value with  a  colon.  The  value  is  undefined  at this  point.  The  property is  rank.  Its  value  is  a string,  "captain".  This  property  is  picture;  its  value  is  a JPEG  file.  The  property fallln is  assigned  an  anonymous  function  that will  serve  as  a method  for  this  object.  The propertyJallOut is assigned  an  anonymous function that will server as anoth- er  method  for  this  object.  The object's property name is assigned a value,  "Tina Savage".  It is initially assigned  "undefined".  In  this  and  the  next  line  the  value  of the  name  and  rank  properties  is  printed.   8  9  A  picture  of the  soldier  is  assigned  to  the  img  tag's  sre  property  and  displayed  in   7   6   the  document.   10  The  method  for  the  object, fallln  ,  is  called.  Note  that  by  appending  the      oper- ator  to  the fallln  property,  the  function  assigned  to  it  on  line  5  is  called  and  exe- cuted.   11  The method for the object,fallOut  ,  is called. By appending the      operator to the  fallOut  property,  the  function  assigned  to  it  on  line  6  is  called  and  executed.  The  output  is  shown  in  Figure  8.8.   L^lMforking with  literalbnobjects  -  Mozilla  Firefox  [jle   Euukrnatfe   History   Jools   '¿\e>r!   Help   Edit   '   C   X   3   file:   C: wamp www tplO£Sfd.i-itm!   ^  Aiit...   J  working  vi.iL.   [J  working  wit...   J  working  wit...   J  working  wit...   [J^  working   T he   Soldier's  n a me   is  Tuiii  Savage.   Tina  Savage's  rank  is  captain. M   r  {   i   [JavaScript  Application]   At attention,  arms at the side,  head and eyes forward.    190   E X A M P LE    8.8       Chapter 8      Objects    Object  Literals       var Car = {     Create a Car object   make:unde f ined,  year:2 006,  price:undefined,  owner:{   name:"Henry Lee",  cell_phone:  "222-222-2222",  address:{street:  "10 Main",   city: "SF",  state: "CA"   }   },  dealer:  "SF Honda",  display:  function    {details="Make:  "+Car.make+"\n";   details +=  "Year:  "+Car.year+"\n";  details +=  "Price:  $"+Car.price+"\n";  details += "Owner:  "+  alert details ;   Car.owner.name+"\n";   }       } ;                     E X P L A N A T I ON       Car.make="Honda Civic";     Assign value  Car.year=2009;     Update the year  Car.price=30000;  Car.display  ;   1  2   3   4   5   6  7  8  9   1  An  object  literal  Car  is  created  and  initialized.  2   The  properties  for  the  Car object  are  assigned.  Properties  are  separated  from  their  corresponding  values  with  a  colon  and  each  property value  pair  is  separated  by  a  comma,  except  the  last  one.  Watch  the  commas.  Internet  Explorer  is  very partic- ular  about  this  rule.   T1    . „ 1 .,    f   t L.    8.4  Manipulating Objects   191   E X P L A N A T I ON    CONTINUED    4  5   7  8  9   The  owner  has  an  address  field  that contains its set of property value  pairs.  This property will  act as  the  object's method.  It is assigned  an inline  function de- fined  to  display properties  of the  object.   6  With  object literals  there  is  no  constructor  function.  This  line  assigns  a value  to   an  undefined  Car  property  called  make.  This  Car's year  property is  assigned  a new value.  The  Car  object's price property,  originally undefined, is  assigned  a value.  The  Car  object's  method  called  detailsQ  is  called  to  display  the  properties  of the  object. Be sure to observe the syntax differences; that is, an equals sign rather than  colon between property and value,  and  an optional semicolon rather than comma  at the  end  of the  assignment.  The  output is shown in Figure  8.9.   M O b j e ct   Literals  -  W i n d o ws   Inte   ¿V    ,      C:\wamp\www\exam   File  E   p    h   Favorites   , object Literals   Tools j   u Is   ¡ 31   ¡\    Make:  Honda Civic  Year:  2009  Price:  $30000  Owner:  Henry Lee   1   OK   1  _   Figure 8.9  Nesting  property value pairs in an object literal.  Output of Example 8.8  literal  objects.   8.4  Manipulating  Objects   8.4.1  The with Keyword  The with keyword is used as a kind of shorthand for referencing an object's properties or  methods.  The object specified as an argument to with becomes the current object for the  duration  of the  block  that  follows.  The  properties  and  methods  for  the  object  can  be  used  without  naming  the  object  or  using  the  dot  syntax.  A  caveat:  This  shorthand    Chapter 8      Objects   192   F O R M AT   with   object {   E X A M P LE   E X A M P LE    8.9           with employee {   document.write name,  ssn, address ;    The with Keyword        function book title,  author, publisher {   this.title = title;  this.author = author;  this.publisher = publisher;  this.show = show;      Define a method       Properties   }  function show  {   with this {       The with keyword with this   var info = "The title is  " + title;  info += "\nThe author is  " +  author;  info += "\nThe publisher is  " + publisher;  alert info ;   }   }                  var childbook = new book "A Child's Garden of Verses",   "Robert Lewis Stevenson",  "Little Brown" ;  var adultbook = new book "War and Peace",  "Leo Tolstoy",  "Penguin Books" ;   childbook.show  ;      Call method for child's book  adultbook.show  ;      Call method for adult's book           }   }   1  2   3  4  5  6   7   8   9   10  11    8.4  Manipulating Objects   E X P L A N A T I ON   193   l  2  3   4  5   10  11   The  book  constructor  function  is  defined  with  its  properties.  The  book  object  is  described  with  three  properties:  title,  author,  and  publisher.  The  book  object's  property is  assigned  the  name  of a  function.  This  property will  serve  as  a method  for  the  object.  A  function  called  show  is  defined.  The  with  keyword will  allow you to reference  the properties of the  object without  using the name of the object and the dot or the  this keyword.   See  "The Math Ob- ject"  on page  241  in  Chapter  9.   A  variable  called  info  is  assigned  the  property  values  of  a  book  object.  The  with  keyword allows you to specify the property name without a reference to the object   and  dot   preceding it.  The  alert box  displays  the  properties  for  a  book object.  The  constructor  function  is  called  and  returns  an  instance  of a  new  book  object  called  The  constructor  function is  called  and returns  an instance  of another book object  called  adultbook.  The  showQ  method  is  called  for  the  childbook  object   see  Figure  8.10 .  The  show    method  is  called  for  the  adultbook  object   see  Figure  8.11 .   childbook.   Figure  8.10  The childbook object  and  its  properties.    194   Chapter 8      Objects   > The with Keyword  - Mozilla Firefox  File   Bookmarks   History   View   Edit   Tools   Help     ..",'   X   file:   C: wamp www exam[;   4-   J  Function  5c...   [J  Function  5c...   [J  D5CN0406....   QD   [JavaScript Application]    X        The title is War  : '  »  *'*i  The author is L<  The publisher is   and  Peace  30 Tolstoy  ; Penguin Boo   ks   OK   Figure  8.11   The adultbook object  a nd   its  properties.   8.4.2  The for in  Loop   JavaScript  provides  the for in  loop,  which  can  be  used  to  iterate  through  a  list  of  object  properties  or  array  elements.  The for in  loop  reads:  for  each  property in  an  object   or  for  each  element in  an  array   get the  name  of each  property   element ,  in  turn,  and  for  each  of the  properties   elements ,  execute  the  statements  in  the  block  that  follows.   The for in  loop  is  a  convenient  mechanism  for  looping  through  the  properties  of  an   object.   F O R M AT   for var property_name  in object {   statements ;   E X A M P LE    8.10        User-defined  objects        function book title, author, publisher {   this.title = title;  this.author = author;  this.publisher = publisher;  this.show=show;   1   1  2   3       Define a method for the object    8.4  Manipulating  Objects   E X A M P LE    195     C O N T I N U E D    8.10  function show obj,  name {      Function  to show the object's properties   var result =  "";  for   var prop in obj {   result += name + "." + prop + " = " +   obj[prop]  + " ";   }  return result;   }                  myBook = new book "JavaScript by Example",  "Ellie",  document.write "  "  + myBook.show myBook,  "myBook"  ;   "Prentice Hall" ;               E X P L A N A T I ON   The  function  called  book  will  define  the  properties  and  methods  for  a  book  object.  The  function  is  a  template  for  the  new  object.  An  instance  of  a  new  book  object  will  be  created  when  this  constructor  is  called.  This  is  the  first  property  defined  for  the  book  object.  The  this  keyword  refers  to  the  current  object.   3  A  show  property  of  the  object  is  assigned  a  function  name  also  called  show,  thus   creating  a  method  for  the  object.  The  function  called  show    is  defined,  tasked  to  display  all  the  properties  of  the  object.  The  special for in  loop  executes  a  set  of statements  for  each  property  of the  object.  The  name  and  value  of  each  property  is  concatenated  and  assigned  to  a  variable  called  result.  The  value  obj [prop]  is  used  to  key into  each  of the  property  values  of  the  book  object.  The  value  of  the  variable  result  is  sent  back  to  the  caller.  Each  time  through  the  loop,  another  property  and  value  are  displayed.   8  A  new  book  object  called  myBook  is  created   instantiated .  9   The  properties  for  the  book  object  are  shown  in  the  browser  window;  see  Figure  8.12.  Notice  how  the  method  and  its  definition  are  displayed.   4   5  6   7   8  9   1   2   4   5  6   7    196   Chapter 8      Objects      User-defined  objects  - Mozilla  Firefox  Tools  File   Bookmarks   History   View   Edit   Help   Y'nt   1^3   file:   C: wamp www example8.11.2.html   ù-UE   ter...   Q  Object  Liter...   Q  Object  Liter...   Q  Object  Liter...   Q  Object  Liter...   Q  Object  Liter...  Q  Object  Liter...   Q  Object  Liter...   J  User-def   mvBook.title = JavaScript by Example  myBook.author = Ellie  Quigley  myBook.publisher = Prentice  Hall  myBook.show = function show obj, name   { var result =  " ";   for  var prop in obj    ] result += name +  ";  }  return result;  }   + prop +  =  + ob;   Figure  8.12  The book object's  properties.   8.5  Extending  Objects with  Prototypes   In  object-oriented  languages,  like Java  and  C++,  the  object,  along  with  its  properties   state   and methods  behavior , is bundled up into a container called a class.  These pro- gramming  languages  all  allow  classes  to  reuse  and  extend  an  existing  class;  that  is,  inherit commonly used state and behaviors from other classes. A new class, called a sub- class, can be derived from an existing class.  For example, if you have a Pet class, let's say  all  pets have  an  owner,  a gender,  and  some  methods  for setting and getting the  proper- ties.  We could create subclasses of the Pet, such as a Dog and Cat, because both the Dog  and  Cat share  the same  properties  as  a Pet.  The  code  for  the Pet can be  extended  to  the  Dog and the  Cat by using inheritance.  Then each subclass can be refined further by add- ing its  own  specific  features.   Let's look at an example of how JavaScript might use inheritance. A constructor func- tion  called  divStyleO  has  been  defined.  It will  be  used  to  create  div  containers  to  style  a  Web page. The constructor defines the properties for a div, for example, the borders, pad- ding,  background  color,  and  so  on,  and has  a  div Get     method  to  display the  div in the  document.  Later we want to make divStyle objects but change or add properties; perhaps  change  the width of the border  or set a border color.  We can reuse or  extend the divStyle  code  by using inheritance.   Section  8.2  explained  that unlike Java and  C++, JavaScript doesn't have  a class mech- anism  per  se,  but inheritance  involves  reusing  or  extending  a  class.  With JavaScript we  can  simulate  a  class  with  a  constructor  function  and  the  new  keyword.  And  to  imple- ment inheritance JavaScript extends  a the  class with  a prototype.   For those of you who  are Java  or  C++  programmers, JavaScript  does  not  use  keywords  like  extended,  protected,  private,  public,  etc. .  How  does  prototype  inheritance  work?    8.5  Extending Objects with  Prototypes   197   Like  any other  object, you  can  assign properties  and methods to  the prototype  object.  You  do  this with  the  prototype  property.  When  values  are  assigned  to  an  object's  proto- type  property,  they  are  automatically  extended  to  all  instances  of  the  class.  After  an  object  has  been  created,  new  properties  and  methods  can  be  added  to  the  prototype  object,  and  any  objects  created  after  that  will  automatically  inherit  the  new  properties  and methods.  This is how JavaScript implements inheritance.  It allows you  to reuse  code  and  customize  an  object.   Let's  say we  define  a  constructor  function  called  Book    with  a  set  of properties  such  as  title  and  author.  The  Book    constructor  function  is JavaScript's  way  of creating  a  class.  The  constructor  function  is  called  with  the  new  keyword  and  creates  an  instance  of the  Book  class,  an  object  called  bookl,  and  then  the  constructor  function  is  called  again  and  creates  another  Book  object  called  bookl,  and  so  on.  Now,  after  creating  bookl,  we  add  another  property  such  as  bookl.publisher.  This  property  affects  bookl,  and  only  bookl.  The  publisher  property  is  not  extended  to  bookl.  The  property  would  have  to  be  added  separately  to  each  Book  object  that  needs  it  or  by  adding it  to  the  Book's  prototype.   Adding  a  new  property  without  using  the  prototype  property   E X A M P LE    8.11       1    Object  Properties-; title>      function Book title,  author {   this.title  =title;  this.author=author;   }                    2  3  4  5   var bookl  = new Book "Kidnapped","R.L.Stevenson" ;  var book2 = new Book "Tale of Two Cities",  "Charles Dickens"   bookl.publisher="Penguin  Books";  document.write bookl.title + "  is published by "+  bookl.publisher +  " " ;  document.write book2.title + "  is published by " +  book2.publisher ;    Doesn't have  this property                   198   Chapter 8      Objects   E X P L A N A T I ON      C O N T I N U E D    3  A  new  property,  called  publisher,  is  assigned  to  the  bookl  object.  It  is  available  for   4  5   this  instance  of the  object.  JavaScript  retrieves  and  displays  the  value  of  the  publisher  for  the  bookl  object.  The  second  book  object  does  not  have  access  to  the  publisher  property.  It  is  unde- fined   see  Figure  8.13 .   !  Object  Properties  - Mozilla  Firefox  File   View  History   Bookmarks   Edit   Tools  Help   '   C   &      D   file:   C: wamp www e>   Array concat   methods   Method  Inheritance   Kidnapped  is  published  Penguin  Books  Tale  of Two  Cities  is  published  undefined   Figure  8.13  Defining  a  new  property  for  an  object.   8.5.1  Adding Properties with the Prototype Property  What  if  in  the  previous  example  book2  we  want  to  add  a  publisher  property  so  that  it  is  extended  to  all  instances  of the Book class?  All  objects have  a prototype property.  We  can  use  the  Book's prototype  property  to  assign  new properties  to  the  Book  class  that will  now  be  available  to  the  Book  class  and  any  instances  of the  class;  that  is,  all  Book  objects  will  have  the  new properties.  In  Example  8.12, we  will  add  new properties  to  the  Book class.   E X A M P LE    8.12        Object  Properties-; title>      function Book title,  author {   1   this.title  =title;  thi s.author=author;   }                  8.5  Extending Objects with  Prototypes   199   E X A M P LE      C O N T I N U E D    8.12  document.write bookl.title + "  is published by "+   document.write book2.title + "  is published by " +   bookl.publisher +  " " ;  book2.publisher ;                  E X P L A N A T I ON   4   1   2  3   4   The  constructor  function  called  Book  will  define  the  properties  and  methods  for  a  Book  class.  The  function  takes  two  parameters.  Two  new  Book  objects  are  created,  bookl  and  book2.  The  Book  class  has  a  prototype  object.  It  is  assigned  a  property  called  publisher.  Now  the  publisher  property  and  its  value  are  available  to  all  Book  objects.  In  the  last  example  only  bookl  got  the  new  property.  Now  both  bookl  and  book2  have  inherited  the  publisher  property  found  in  the  Book's  prototype   see  Figure  8.14 .  If you  don't want  all  books  to  be  published  by  "Penguin  Books"  you  could  set  the  value  of  the  publisher  to  "Unknown"  as  a  default  and  change  it  later;  for  example,  book2.publisher="Viking  Press"  and  the  book2  object  would  get  the  value  "Viking  Press."   1  Object Properties  - Mozilla  Firefox  File   View  History   Bookmarks   Edit   Tools  Help   C   Sj   J   file:   C: wamp www example8.nop   Array concat   methods   Method Inheritance   Ob   Kidnapped  is  published  by  Penguin  Books  Tale  of Two  Cities  is  published  by  Penguin  Books   Figure  8.14  Using  the  prototype  for  inheritance.   8.5.2  The Prototype Lookup Chain  When the program  tries to retrieve  an object's property, JavaScript first looks to see if the  property  was  defined  directly  for  that  object;  for  example,  does  the  Book  object  have  a    200   Chapter 8      Objects   lookup  chain,  can  continue  until JavaScript  reaches  the  top  of  the  chain.  You  might  recall  that  the  top  object is  called  the  Object  object  and  it  too  has  a prototype.   Example  8.13  uses the prototype  for  the  Object object and  the prototype  for  the Book  object  to  create  new  properties.  To  retrieve  a  property  for  a  Book  object,  JavaScript  would  look up  the  property in  the  following  order:   1.  The  object  itself  2.  The  Book.prototype  3.  The  Object.prototype   First JavaScript  starts  with  a  Book  object.  If looking  for  the  Book's  title  and  author,  then  there  is no  need  to  look further;  if,  on  the  other  hand, we want  to  get  the publisher  or  category,  then JavaScript will  go  up  the  chain  and  look  at  the  Book's  prototype,  and  finally,  if not  there,  go  to  the  top  Object object  and look there   see  Figure  8.15 .  If the  Object  object  has  not  defined  the  property,  it  is  undefined.   Much  of the  information  in  this  paragraph  should  be  credited  to  a  paper  on  objects  written  by  Mike  Koss  at  http:  mckoss.com jscript object.htm.    Constructors   Prototype  Chain   T   b o o kl   .author  b o o kl  .title   book2.author  book2.title   Figure 8.15  JavaScript looks for the  property with  Example 8.13.    8.5  Extending Objects with  Prototypes   201   Using  The  Prototype  Property   E X A M P LE    8.13        Object  Properties-; title>      function Book title,  author {   1   this.title =title;  this.author=author;   }                    2  3  4  5   var bookl  = new Book "Kidnapped","R.L.Stevenson" ;  var book2 = new Book "Tale of Two Cities",  "Charles Dickens"   Object .prototype .category=,,Fiction" ;  Book.prototype.publisher =  "Penguin Books";  document.write bookl.title + " is published by " +   document.write book2.title + " is published by " +   bookl.publisher + " and is in the " + bookl.category +  "  category  " ;  book2.publisher + " and is in the " + bookl.category +  " category  " ;                    E X P L A N A T I ON   1   2  3   4   The  constructor  function  called  Book  will  define  the  properties  and  methods  for  a  Book  class.  The  function  takes  two  parameters.  Two  new  Book  objects  are  created,  bookl  and  book2.  By  assigning  a  property  to  the  Object  object's  prototype,  all  instances  of  the  Book  class   or  any  class   will  have  access  to  the  category  property.  Note  that  on  line  5,  the  book uses  the  category  property.   This is just an  example  to  show how the pro- totype  property  is  used,  not  meant  to  be  practical.   The  Book  class  has  a  prototype  object.  It  is  assigned  a  property.  Now  the  publisher  property  and  its  value  are  available  to  all  Book  objects.   5  When JavaScript  tries  to  retrieve  the  value  of  the  category  property,  the  property  was not  directly  assigned  in  the  constructor  function. JavaScript  checks  to  see  if a    202   Chapter 8      Objects   !  Object  Properties  - Mozilla  Firefox  File   View  History   Bookmarks   Edit   Tools  Help   Q1   bj         file:   C: wamp www example8.noprototype.html   Array concat   me...   Method Inheritance   Object object   Object  Properties   Kidnapped is  published by Penguin Books  and is  111 the  Fiction  category  Tale  of Two  Cities  is  published  by  Penguin  Books  and  is  in  the  Fiction  category   Figure  8.16  Going  up  the  prototype  chain.   8.5.3  Adding Methods with Prototype  JavaScript methods  are just properties  that have  been  assigned  functions  for  their values.  A  common use  for prototypes  is  to  extend  a class  by giving it new methods.  You  can use  a prototype  to  assign methods that are  common  to all objects in a given class.  The benefit  of  using  the  prototype  is  that  the  method  does  not  have  to  be  created  and  initialized  every  time  an  object is  created,  and  there  is  no  duplication  of function  code.  All  objects  in  the  class  share  the  same  prototype  method.   In  Example  8.14,  a new method  is  defined  for  the Book class  to  add  a  tax  to  the  price   of each  book.  All  Book  objects  will  have  access  to  this  method.   E X A M P LE    8.14        Method  Inheritance-; title>       function Book title, author, price {     The Book constructor       Book properties attributes   this.title = title;  this.author = author;  this.price=price;  this.show=showProps;   }  function  showProps  {   var result =  "";  for   var i in this {  result +=  i + " =   }  return result;       Book method   + this[i]  + " "   }               4   5   6  7   8   1   3   4   8.5  Extending Objects with  Prototypes   203   E X A M P LE    8.14  Book.prototype.addTax=function  addTax  {   this.price *= 1.18;  return this.price.toFixed 2  ;   }  var famousBook=new Book "War and Peace","Leo Tolstoy",  30.00 ;  var myBook=new Book "JavaScript by Example",  "Ellie  document.write "  "  +  famousBook.show  +" " ;  document.write "  "  + myBook.show  +" " ;  document.write "With tax \""+ famousBook.title +"\"  costs $"+  famousBook.addTax    +". " ;  document.write "With tax \""+ myBook.title +  myBook.addTax    +". " ;   Quigley", 25 ;   costs $" +               E X P L A N A T I ON   The  constructor  function  called  Book  defines  the  properties  and  methods  for  a  Book  class.   Book   is  a JavaScript  representation  of  a  class.   The  constructor  func- tion  has  a  prototype  object  containing  those  properties  that  are  inherited  by  all  Book  objects.   2  A  function  called  showProps  is  defined  on  line  3.  Its  name  is  assigned  to  the  prop-  erty  called  show,  making  it  a  method  for  the  Book  class.  The  function  showProps  uses  the  special for loop  to  iterate  through  all  the  proper- ties  of an  object.  The  Book's  prototype  property  is  used  to  add  a  function  called  addTaxQ   It  calcu- lates  and  returns  the  price  of  the  book  with  an  18  percent  sales  tax  added.  This  function  will  be  added  as  a  method  to  the  Book  class  and  available  to  all  objects  in  that  class. JavaScript  creates  only one  copy of the  function  and  all  book objects  will  point  to  that  copy.   6   5  A  new  Book  object,  called  myBook,  is  created.  It  has  inherited  all  of  the  original  properties  of  the  Book  class,  including  the  new  method  defined  by  the  prototype  property,  called  addTax.  The  show    method  is  called  for  the  object, famousBook.  The  entire  object,  prop- erties  and  methods  are  displayed.  You  can  see  that  addTax  has  been  included.  The  new  method,  addTaxQ  is  called  for  the  object famousBook.   7  8  Again,  addTaxQ  is  called  for  the  object  myBook.  The  result  is  shown  in  Figure   8.17.    204   Chapter 8      Objects   1  Method  Inheritance  - Mozilla  Firefox  Tools  File   Bookmarks   History   View   Edit   Help   'w   C   tMi'   1  Ù   file:   C: wamp www example8prototypemethod.html   Q  file:   C:...class, html   Q  file:   C:...class.html   [3  file:   C:...class, html   Q  Try Catch   Method  Inheritance   Q  Method   for  var i in this  { result += i + " =  "  + dus[i] + "   title = War and Peace  author = Leo Tolstoy  price = 30  show = fmiction showProps{  { var result =   } return result;  }   addTax = fmiction addTaxQ {this .price  *= 1.18; return this.price.toFixed 2 ; }   title = JavaScript by Example  author = Ellie Quiglev  price = 25  show = fmiction showProps   { var result =  addTax = fmiction addTaxQ  {tliis.price  *=  1.18;  return this.price.toFixed 2 ;  }   With tax "War and Peace"  costs $35.40.  With tax "JavaScript by Example"  costs $29.50.   Figure 8.17  Adding  a  new method  with a  prototype.   for  var i in this  { result += i + "false" + tliis[i] + "tine"; } return result;  }   8.5.4  Properties and Methods of All Objects  As  we  have  seen,  all  user-defined  objects  and  built-in  objects  are  descendants  of  the  object  called  Object.  The  Object  object  has  its  own  properties  and  methods  that  can  be  accessed by any objects  derived  from  it.   All  objects have  the  properties  and methods shown in Tables  8.1  and  8.2.   Table 8.1  Object Properties   Property   constructor   prototype   What  It  Provides   A  reference  to  the  function  that  created  the  object.   A  reference  to  the  object  prototype  for  the  object.  This  allows  the  object  to  share  properties  and  methods.   Table 8.2  Some  Object Methods   Method   What  It  Does    8.5  Extending Objects with Prototypes   205   Table  8.2  Some  Object  Methods   continued    Method   What It Does   hasOwnProperty   property    Returns true if the specified property belongs to this object, not  inherited from its prototype object chain.   isPrototypeOf object    Returns true if this object is one of the parent prototype objects  of the specified child object.   You  can  also  use  the  instanceof operator  to  test  if  the  specified  object  is  of  the  specified  object  type.  If it  is,  true  is  returned.   F O R M AT   E X A M P LE   var islnstance = objectName  instanceof objectType;   var strl = new String "good morning" ;   Create a new string object  var result = srl instanceof String;  if  result == true  {  }   E X A M P LE    8.15        Object  object      function Book title,  author {   1   this.title =title;  this.author=author;   }                    2  3  4  5   6   Book.prototype.publisher="Oxford  Press";  Object.prototype.category="Fiction";  var tale  = new Book "Kidnapped","R.L.Stevenson" ;  document.write "The value of Object's category property is " +  if tale.constructor == Book {   Object.prototype.category  +" " ;   document.write "tale is a Book object " ;    206   Chapter 8      Objects   E X A M P LE     CONTINUED    8.15  if tale.hasOwnProperty "author"  {   8   9   10   11   document.write "The object has an author property. " ;   }  i f Book.prototype.isPrototypeOf tale  {   document.write "Book is a prototype of object tale. " ;   }  if tale  instanceof Book {   }  if tale  instanceof Object {   document.write "tale is an instance of Book. " ;   document.write "tale is an instance of Object. " ;   }                  E X P L A N A T I ON   1   2   3   4  5  6   7   8   The  constructor  function  called  Book  defines  the  properties  and  methods  for  a  Book  class.  The Book class starts with an  empty prototype  object.  Now we  assign it a property.  The  publisher  property  and  its  value  are  available  to  all  Book  objects.  By  assigning  a  property  to  the  Object  object's  prototype,  all  instances  of  the  Book  class   or  any  class   will  have  access  to  the  category  property.  A  new  instance  of the  Book  class  is  created,  a  reference  to  an  object  called  tale.  The  value  of  the  Object  object's  prototype  property,  category,  is  displayed.  The  constructor  property  is  inherited  from  the  Object  object  and  can  be  used  with  any  of  its  descendants.  This  line  tests  if  this  object  has  a  constructor.  It  does,  so  the  block  is  entered.  The  value  assigned  to  the  constructor property  is  the  constructor  function  and  the  names  of all  of its  arguments  and  properties.  The  hasOwnProperty     method  returns  true  if  the  property   its  argument   belongs  to  the  object being tested;  in  this case  the  object is  tale  and  the method is  checking  to  see  if  the  author  property  belongs  to  it  and  is  not  inherited  from  the  prototype  chain.   9  Next we  test  to  see  if the  tale  object is  inheriting  from  the Book class;  that is,  Book   is  a  prototype  for  the  tale  class.   10  The  instanceof operator  returns  true  if  the  specified  object,  tale,  is  of  the  specified   object  type;  that  is,  tale  is  a Book  type.    8.5  Extending Objects with Prototypes   207   Object  object  -  Mozilla  Firefox  Bookmarks   View  History   Edit   File   Tools  Help   C   SJ   file :   C: wamp www example80bjectProps. html   '  I   _]  Method Inh...   Q  Method Inh...   Method Inh...   _J  Object object  Q  Object object  Q  Object object   Object object      Objs   The  v alue  of Object's  category property is  Fiction  tale  is  a  Book  object  The  Book's  constructor is  defined  as  fiuictiou  Book title,  author   {  tliis  title  =  title,  tliis  author =  author  The  object  has  an  author  property  Book  is  a  prototype  of object  tale  tale  is  an  instance  of Book.  tale  is  an  instance  of Object.   i    .1   Figure 8.18  Testing objects.   8.5.5  Creating Subclasses and Inheritance  In the previous examples, we used  the prototype object to extend properties and methods  for  a given  class.  In  the  next  chapter you will  see  how  to  use  prototyping  to  customize  JavaScript's  built-in  objects  such  as  Date  and  String.   Now,  to  demonstrate  how  inheritance  works,  we  will  define  a  base  class  called  Pet,  which will have its own properties and methods and  can  create instances via the  "new"  operator.  Then we will use  this base  class  to  create  two  additional subclasses  called  Cat  and  Dog.  Each  of these  subclasses   derived  classes   will  use  the  prototype  property  to  inherit  the  properties  and  methods  of the  Pet class   see  Figure  8.19 .  Both  the  Cat  and  the  Dog  class  will  be  customized  to  have  their  own  speak     method.  Even  though  the  name  of the  method  is  the  same  for  both  the  Cat and  Dog class, JavaScript will  call  the  speak    method  for  the  object  to  which  it  belongs;  that  is,  when  the  speakQ  method  is  called  for  a  Cat  object,  it will  return  "Meow",  and when  called  for  a Dog  object,  it will  say  "Woof".  See  Example  8.15  for  the  program  code.   O b j e ct   Pet   C at   Dog   Fiqure 8.19  A hierarchical  tree-like structure  used  to describe  base class and    208   E X A M P LE    8.16       Chapter 8      Objects   1  2  3  4   5  6  7  8   9  10   11  12   13  14    Creating  a  subclass        Base Class   function Pet  {      var owner = "Mrs. Jones";  var gender = undefined;  this.setOwner = function who   { owner=who;};  this.getOwner = function  { return owner;  >  this.setGender = function sex   { gender=sex; >  this.getGender = function  { return gender;  >   }  function Cat  {}    subclass  constructor  Cat.prototype = new Pet  ;  Cat.prototype.constructor=Cat;  Cat.prototype.speak=function  speak  {   return "Meow" ;   };  function D o g O O;     subclass  constructor  Dog.prototypes new Pet  ;  Dog.prototype.constructor=Dog;  Dog.prototype.speak = function speak  {   return "Woof" ;   };                var cat = new Cat;  var dog = new Dog;  cat.setOwner "John Doe" ;  cat.setGender "Female" ;  dog.setGender "Male" ;  document.write "The cat is a "+ cat.getGender  + " owned by "  document.write " The dog is a "+ dog.getGender   + "  " +   + cat.getOwner    +" and it says " + cat.speak   ;  " owned by " + dog.getOwner   + " and it says "  + dog.speak   ;                  E X P L A N A T I ON   f,   1   T Ua   P   i i n ll    r ] i > f i T i i>   tl-i t>  TM"r\r»z>'rtii>c  T n rl   Tvii>t"Kr>rlc   f ~w  o    8.5  Extending Objects with Prototypes   209   E X P L A N A T I ON    CONTINUED    3   The  setOwner  and  getOwner  methods  are  defined  for  the  Pet.  All  Pet  objects  will  have  access  to  these  methods.  The  setGender  and  getGender  methods  are  defined  for  the  Pet.   4  5  An  empty  function  called  Cat is  declared.  It will  be  used  as  the  constructor  func-  6   7   tion  for  a  Cat  class.  By  creating  a  new  Pet  object  and  assigning  it  to  the  Cat's  prototype,  all  properties  and  methods  of  the  Pet  will  now  be  available  to  the  Cat.  This  is  how JavaScript  implements  inheritance.  The  constructor property returns  a reference  to  the  function  that initialized  the  ob- ject; in  this  case,  the Pet.   The value  of this property is  a reference  to  the  function  itself,  not  a  string  containing  the  function's  name .  By  updating  the  constructor  property, it will contain a reference to the new Cat class constructor, not its parent,  the  Pet.  Now  the  Cat  constructor  is  the  constructor  for  all  Cat  objects.   8  We  are  creating a new method  for  the  Cat,  called speak.  It will  be  a property of the  Cat's  prototype.  All  cat  objects  will  have  access  to  this  method  and  all  cats  will  speak  "Meow".   9  An  empty  function,  called  Dog,  is  created.  10  By  creating  a  new  Pet  object  and  assigning it  to  the  Dog's  prototype,  all  properties  and  methods  of  the  Pet  will  now  be  available  to  the  Dog.  The  Dog  inherits  from  the  Pet.  The  constructor  property  is  also  updated  so  that  it will  reference  the  Dog  class.  The  Dog will  also  have  a speak     method.  How  does JavaScript know which  speak    method  to  call?  The  object  that  calls  this  speak  method  has  its  own  copy  of it.   11  A new object called  cat is instantiated.  And in  the next line,  a dog object is instan-  tiated.  They  both  inherit  from  the  Pet  class.   12  The  cat  object  calls  the  setOwner    method  with  a  new  value.  It  inherited  this   method  from  the  Pet.   13  The  dog  calls  the  setGenderQ  method,  inherited  from  the  Pet.  14  Using  the  getOwner    and  getGender    and  speak    methods,  we  display  the  prop-  erties  of the  cat  object  and  the  dog  object.  The  output  is  shown  in  Figure  8.20.   '  C r e a t i ng   a  subclass  -  M o z i l la   F i r e f ox   File  Edit  View  History  Bookmarks   Tools  Help   "r   C   OLi   L^   file:   C: wamp www subdass.html   a s...  Q  Creating a s...  Qj  Creating a s...  j  Q  Creating a s...  Q  Creating a s...    210   Chapter 8      Objects   8.6  What You Should  Know   Because JavaScript  is  based  on  all  kinds  of  objects  such  as  windows,  documents,  input  devices, buttons, and so on, in this chapter we talked about what objects are and how they  are  used.  The purpose  of creating your  own  objects before  talking about JavaScript's  core  objects  and  DOM  objects  is  to  give  you  an  understanding  of the  terminology  and  syntax  and how objects relate  to  each  other in  an  object model.  Now you should  understand:   1.  Why  an  object is  a  composite  type.  2.  Several ways  to  create  an  object.  3.  How  to  use  an  object  constructor.  4.  The  difference  between  properties  and  methods.  5.  The  difference  between  a  method  and  a  function.  6.  How  a  function  can  act  as  a  constructor.  7.  What  the  this  keyword  is  used  for.  8.  How  to  create  an  object literal.  9.  How  to  use  the  with  keyword.  10.  How  to  extend  an  object with  its  prototype.    Exercises   211   Exercises   1.  Create  a  circle  object with  the  ObjectQ  constructor  and  a  method  that  will  cal-  culate  its  circumference.   2.  Write  a  function  that  will  create  a  clock  object.   a.  It  will  have  three  properties:  seconds,  minutes,  and  hours.  b.  Write  two  methods:  setTimeQ  to  set  the  current  time  and  displayTimeQ  to   display  the  time.   c.  The  user  will  be  prompted  to  select  either  a.m. p.m.,  or  military  time.  The  value  he  or  she  chooses  will  be  passed  as  an  argument  to  the  displayTimeQ  method.   3.  The  output  will  be  either   14:10:26 or 2:10:26 pm   depending  on  what  argument  was  passed  to  the  display     method.   4.  The  following  function  acts  as  a  constructor  to  create  an  Employee  object.   Use  this  function  to  create  three  new  employees.  Set  the  properties  and  print  the  employees'  names.  Add  a  phone  property  to  this  function.       function Employee  {   var = name;  this.getName = function  {   return this.name;   }  this.setName =  function name {   this.name = name;   } ;   }   5.  Create  an  object  literal  called  Customer.  The  Customer  will  have   properties:  a  name,  gender,  photo,  and  occupation.  There  will  be  one  method  called  showCustomerQ   The  user  will  be  prompted  for  each  of  the  property  val- ues.  Use  the  showCustomerQ  method  to  display  the  data  in  an  HTML  table.   6.  Using JavaScript  prototyping,  extend  the  Employee   Exercise  4 .  Create  two   new  subclasses  from  the  Employee:  a  Salesman  and  a  Manager  class.  Use  a  pro- totype  to  create  a  salary  property  for  the  new  employees   setSalary,   getSalary ,  an A  O  QptJl niQpf}  m   o r l rl   1  ^  n o r r p nt   t ri   f ho   c a l o r tr   rh on\r  t r^   ci>i>  if    r\A   c\t  r ^f    chapter 9   JavaScript  Core Objects   9.1  What Are  Core  Objects?   Like  an  apple, JavaScript  has  a  core,  and  at  its  core  are  objects.  Everything you  do  in  JavaScript  will  be  based  on  objects;  you  may  create  your  own  as  we  did  in  Chapter  8,  "Objects,"  or use JavaScript's core objects.  Core  objects are built right into  the language.  JavaScript provides  built-in  objects  that  deal with  the  date  and  time,  math,  strings,  reg- ular  expressions,  numbers,  and  other  useful  entities.  The  good  news  is  that  the  core  objects  are  consistent  across  different  implementations  and  platforms  and  were  stan- dardized  by  the  ECMAScript  1.0  specification,  allowing  programs  to  be  portable.  Although each object has a set of properties and methods that further define it, this book  does not  detail  every  one,  but highlights  those  that will  be  used  most  often.  For  a  com- plete  list  of  properties  and  objects,  go  to  http:  www.echoecho.com jsquickref.htm.   9.2  Array  Objects   An  array  is  a  collection  of like  values—called  elements—such   as  an  array  of colors,  an  array  of strings,  or  an  array  of images.  Each  element  of  the  array  is  accessed  with  an  index value  enclosed  in  square  brackets   see  Figure  9.1 .  An  index  is  also  called  a sub- script.  There  are  two  types  of index  values:  a  nonnegative  integer  and  a  string.  Arrays  indexed  by numbers  are  called  numeric  arrays  and  arrays  indexed  by strings  are  called  associative  arrays   see  Figure  9.2 .  In JavaScript,  arrays  are  built-in  objects  with  some  added  functionality.   "red"   "blue"   \   "green"   \   "yellow"   \    214   Chapter 9       JavaScript Core Objects   P \ "  F F 0 0 0 0 "\  "  0 0 0 0 F F "\  "00FF00"   \   h e x f b l u e "    h e x f g r e e n "    \  h e x f r e d "    Figure  9.2  An  associative Array object  called hex.  Index values  are  strings.   9.2.1  Declaring and Populating Arrays  Like  variables,  arrays  must  be  declared  before  they  can  be  used.  Let's  examine  some  ways  to  create  an  array.   is  used   The  new  keyword   Creating an Array Object with  new.  to  dynamically  create  the  Array  object.  It  calls  the  Array  object's  constructor  func- tion,  Array  ,  to  create  a  new  Array  object.  The  size  of  the  array  can  be  passed  as  an  argument  to  the  constructor,  but it is not necessary.  Values  can  also  be  assigned  to  the  array  when  it  is  con- structed,  called  a  dense  array,  but  this  is  not  required  either.  The  following  array  is  called  array_name  and  its  size  is  not  specified.   F O R M AT   var array_name = new Array  ;  Example:  var months = new Array  ;  months[0]="January";  months[1]="February";  months[2]="March"   In  the  next  example,  the  size  or  length  of  the  array  is  passed  as  an  argument  to  the   Array     constructor.  The  new  array  has  100  undefined  elements.  var array_name = new Array 100 ;    9.2  Array Objects   215   The values  can be  of any data type  or  combination  of types.  Although you  can specify  the  size  of the  array when  declaring it,  it is  not required. JavaScript  allocates  memory as  needed  to  allow  the  array  to  shrink  and  grow  on  demand.  To  populate  the  array,  each  element is  assigned  a value.  Each  element is  indexed  by either  a number  or  string.  If the  array  index  is  a  number,  it  starts  with  0.  JavaScript  doesn't  care  what  you  store  in  the  array.  Any  combination  of  types,  such  as  numbers,  strings,  Booleans,  and  so  forth,  are  acceptable.  Example  9.1  creates  a  new  Array  object  called  booh  and  assigns  strings  to  each  of its  elements.   Another  popular  way  to  declare  an  array  is  with  the  literal  notation.  This  is  a  quick   and  easy way  to  declare  and  populate  an  array  in  one  step:  var friends = [  "John",  "Jane",  "Niveeta",  "Su"  ];   Using the  new Constructor.  To  create  an Array  object,  call  the  Array     constructor  with  the  new  keyword  and  optionally  pass  information  to  the  constructor  if you  know  the  size  and or  what  elements  you  want  to  assign  to  the  array.  When  a  size  is  supplied  but  not  values,  the  empty  elements  will  be  assigned  undefined.  JavaScript  provides  a  number  of methods  to  manipulate  the  array   these  are  listed  in  the  'Array Methods"  on  page  227 .   E X A M P LE    9.1        The Array Object     An Array of Books      var book = new Array 6 ;  book[0]  =  "War and Peace";     Assign values to its elements  book[l]  =  "Huckleberry Finn";  book[2]  =  "The Return of the Native";  book[3]  = "A Christmas Carol";  book[4]  = "The Yearling";  book[5]  = "Exodus";       Create an Array object                     for var i in book {  }              document.write "book[" + i + "]  "+ book[i]  + " " ;   1  2   3  4    216   Chapter 9      JavaScript Core Objects   E X P L A N A T I ON   1   2   3   4   The  variable  book  is  assigned  a  reference  to  a  new Array  object  containing six  el- ements.  You can leave out the size 6  and JavaScript will dynamically build the  ar- ray as you add elements to it.  The  first  element  of  the  book  array  is  assigned  the  string  "War  and  Peace".  Array  indexes  start  at zero.  The  special for loop is used  to  access  each  of the  elements in  the book  array where  i  is  a variable used  to represent the index value.  Each  of the  elements of the book array are  displayed in the browser   see Figure  9.3 .   The  A r r ay   O b j e ct   -  Mozilla  F i r e f ox   File  Edit  View  History  Bookmarks   Tools  Help   I  »   Ç   t ïi        file:   C: wamp www example9.1arra^   The  Array  Object       An  Array of Books   book[0]  War and Peace  book[l]  Huckleberry Finn  book[2]  The Return of the Native  book[3]  A Christmas  Carol  book[4]  The  Yearling  book[5]  Exodus   Figure 9.3  The book array elements and  their values.   Creating an Array Literal.  The array literal is a quick way to create and populate an  array.  To use  the literal notation   array ,  the  array is given a name  and assigned  a list of  elements.  The  elements  are separated by commas  and  enclosed  between  a set of square  brackets.  var myarray=["Joe"  11 Bob"  "Ken"   Once declared,  a literal  array behaves like  a normal  array using index values starting  at 0,  and so  on.  Current best-practice  tells  us  that the literal way of creating an  array is  preferred  to  using  the  new  keyword.   Can you see the difference between the following array declarations?   v ar   a r r a vl    =  n ew   A r r a vd   01    :    217    The Literal Way     An Array of Pets       var pet =  [ "Fido",  "Slinky",  "Tweetie","Wanda" ];   1   2  3                     for var i in pet {  }   document.write "pet[" + i + "]  "+ pet[i]  + " " ;   9.2  Array Objects   E X A M P LE    9.2                      E X P L A N A T I ON   1   2   3   The  variable pet is  assigned  a list enclosed  in  square  brackets.  This  is  called  an  ar- ray  literal.  The  special for  loop  is  used  to  access  each  of  the  elements  in  the  pet  array  where  this  example  represents  the  index  value,  whether  a  number  or  a  string.  Each  of the  elements  of the pet array is  displayed  in  the  browser   see  Figure  9.4 .   Ö  T he   L i t e r al   W ay   -  Mozilla  F i r e f ox   File   Edit   View  History   Bookmarks   Tools  Help   -   C   A      Q   file:   C: wamp www arr;   [J  The Literal Way   [J  The  Array   [J  The Array Object  An Array of Pets   pet[0]  Fido  pet[l]  Slinky  pet[2]  Tweetie  pet[3]  Wanda   Figure  9.4  An  array literal  a nd   its output.    218   Chapter 9      JavaScript Core Objects     T he   Array  O b j e c t         An  Array  of  Numbers   < s c r i pt   var years = new Array 10 ;  for var i=0; i < years.length; i++  {   t y p e = " t e x t   j a v a s c r i p t"   >   y e a r s [ i ] =i   +  2 0 0 0;  d o c u m e n t . w r i t e   " y e a r s ["   +   +   "  "  ;   i  +   "]  =  "+  y e a r s [ i]   The Array     constructor  is  called  to  create  a  10-element  array  called years.  The or loop starts with an initial value  of i  set to 0, which will be  the value of the  first index in the array. As long as the value of i is less than the length of the array,  the body of the loop will be executed.  Each time through the loop,  i is increment- ed by  1.  The  array is  populated  here.  Each  time  through  the  loop, years [i]  is  assigned  the  value  of i  +  2000.  The value  of the  new array element is  displayed  for  each iteration  of the loop   see  Figure  9.5 .   E X A M P LE   9.3       }               E X P L A N A T I ON   l  2  3  4   1  2   3   4   Ah Array of Numbers   years[0] = 2000  years[l] = 2001  years[2] = 2002  years[3] = 2003  years [4] = 2004  years[5] = 2005  years[6] = 2006  years [7] = 2007  years[8] = 2008  years[9] = 2009   Figure 9.5  A  for loop  is used  to  populate an array:  Output from  Example 9.3.    219   9.2  Array Objects   E X A M P LE   9.4       }               E X P L A N A T I ON    The  Array  Object        An Array of Colored Strings       1  2  3  4   var colors = new Array "red",  "green",  "blue",  "purple" ;  for var i in colors {   document.write " " ;  document.write "colors[" + i + "] = "+ colors[i]   + " " ;   1  A  new  array  called  colors  is  created  and  assigned  four  colors.  2   The  special for  loop  iterates  through  each  element  of  the  colors  array,  using  i  as  the  index  into  the  array.  The  color  of the  font  is  assigned  the  value  of the  array  element.  The  value  of  each  element  of  the  colors  array  is  displayed.  The  color  of  the  font  matches  the  value   see  Figure  9.6 .  Make  sure  the  background  color  is  not  the  same  color  as  the  font  or  you  won't  be  able  to  see  the  font.   3  4   The  Array  Object  -  Microsoft  Internet  Explorer   File   Edit   View   Favorites   Tools   Help   'Search   Favorite   Address   C: \sambar50\docs\ch9\arrai'init. html   An Array of Colored Strings   colors[0]  = red  colors[l]  = green  colors[2] = blue  colors[3] = purple   Figure  9.6  Each string  is a  different font color:  Output  from  Example 9.4.   9.2.2  Array Object  Properties   Thf> Arrav nhiprt nnlv TISQ thrpp rvrrvnprtip«; rnnsfrnrfnr Imcrth anrl nrntntvnr T^hlp    220   Chapter 9       JavaScript Core Objects   The  property  most  used  with  arrays  is  the  length  property,  which  determines  the  number  of elements in  the  array,  that is,  the size  of the  array.  You  can  also  use  this prop- erty  to  set  the  size  of an  array;  for  example,  if you  set  the  length  to  0,  all  elements  of the  array  will  be  removed.   Table 9.1  Array Properties   What It Does   Property   constructor   length   prototype   References the object's constructor.   Returns the number of elements in the array.   Extends  the definition of the array by adding properties and  methods.   E X A M P LE   9.5        Array  Properties     Array  Properties      var book = new ArrayO;  book[0]  = "War and Peace";     Assign values to elements  book[l]  =  "Huckleberry Finn";  book[2]  =  "The Return of the Native";  book[3]  = "A Christmas Carol";  book[4]  = "The Yearling";  book[5]  = "Exodus";      Create an Array object                     document.write "The book array has  "  + book.length +  " elements " ;  document.write "The book's constructor is:  " +  book.constructor +  " " ;  book.length= 0;  document.write "The book has been trashed!  The first book is"+  document.write " The size is now "+ book.length ;   book[0]  ;      ^   hi  ^r-v   1   2   3  4  5  6    9.2  Array Objects   221   Figure 9.7  Array properties.   9.2.3  Associative Arrays  JavaScript allows use of a string value as an index of an array.  An array that uses a string  as an index value instead of a number is called  an associative  array.  There is an associa- tion between  the index and  the value stored  at that location.  The index is  often called  a  key and the value assigned to it, the value.  Key value pairs are a common way of storing  and  accessing  data.  In  the  following  array  called  states,  there  is  an  association  between  the  value  of  the  index,  the  abbreviation  for  a  state   e.g.,  "CA" ,  and  the  value  stored  there—the  name  of the  state   e.g.,  "California" .  The  special for loop  can  also  be  used  to  iterate through the elements of an associative array. We will see many examples through- out  the  rest  of the  text where  associative  arrays  are  used.1    222   Chapter 9       JavaScript Core Objects   E X A M P LE   9.6        Associative  Arrays        An Array Indexed by Strings       var states = new Array  ;  states["CA"]  = "California";  states["ME"]  = "Maine";  states["MT"]  = "Montana";  fori var i in states  {   document.write "The index is:  "+ i   ;  document.write ".  The value is:   "  + states[i]   + " . "   ;   1  2  3   4   1  2  3   4   }               E X P L A N A T I ON   The JavaScript  program  starts  here.  The  Array     constructor  is  called  and  returns  a  new  Array  object  called  states.  The  index  into  the  array  element  is  a  string  of  text,  "CA".  The  value  assigned  is  "California".  Now  there  is  an  association  between  the  index  and  the  value.  The  special for  loop  is  used  to  iterate  through  the  Array  object.  The  variable,  i,  represents  the  index  value  of  the  array,  and  states [i]  represents  the  value  found  there.  It  reads:  For  each  index  value  in  the  array  called  states,  get  the  value  asso- ciated  with  it   see  Figure  9.8 .   An Array Indexed by Strings   The  index  is:  CA.  The  value  is:  California.  The  index is:  ME.  The  value  is:  Maine.  The  index  is:  MT.  The  value  is:  Montana.   Figure  9.8  An  associative  array.   Bracket vs.  Dot Nototion.  This  is  an  important  note:  any  object,  not just  the  Array  object,  can use  the square  bracket notation  to reference it's properties.  The  following two  exnressions  are  interchangeable:    9.2  Array Objects   223   The  bracket  notation  allows  you  to  use  either  a  string  or  variable  as  the  index  value,   whereas  the  dot  notation  requires  the  literal  name  of the  property.   E X A M P LE   9.7       I  2  3  4  5   cat = new Object  ;  c =  "color"  cat["name"]  = "Powder";     same as cat.name =  "Powder"  cat[c]  = "gray";     same as cat.color =  "gray";  document.write cat.name + "  is " + cat.color + " " ;  document.write cat["name"] + " is " + cat[c] + " " ;       E X P L A N A T I ON   l  A  new  cat  object  is  instantiated.  2  3   The  variable c  is  assigned  the  string  "color".  The  square  brackets  contain  an  index value  that also  represents  a property for  the  object.  We  could  have  written  this  as  cat.name  =  "Powder".  The  variable c  is  used  as  the  index  value  within  the  square  brackets.  Using  this  notation  would  allow  you  to  easily  change  the  value  of  the  variable,  thereby  changing  the  property  of  the  object.   4   5  A  property  of the  cat  object  can  be  accessed  directly with  the  dot notation,  or  rep-  resented  with  a  string  or  variable  within  the  square  brackets   see  Figure  9.9 .    pe...   Array  Prop!   Powder is  gray  Powder is  gray   Figure  9.9   Properties  of  the cat object  accessed  with  bracket  or  d ot   notation.   9.2.4  Nested Arrays  An  array can  consist of another set of arrays.  Take,  for  example,  a row of seats in  a movie  theater.  One  row  of seats  would  represent  a  one-dimensional  array,  but  the  theater  has  more  than  one  row.  To  get  to  your  seat  you  need  to  not  only  know  what  row,  but  the  number  of the  seat  as  well.   To  create  a two-dimensional  array,  each row is  a new array.  To  find  an  element in  the    224   Chapter 9       JavaScript Core Objects   column   0   1   2   row   i   0   2   arrays.   Figure  9.10  An  array of three  arrays.   Using  the  Array  constructor,  the  following  example  is  an  array  consisting  of  three   var  array_name=new Array new Array 77,88,99 ,  new Array 50,60,99 ,  new Array 99,88,78     ;   or  the  literal  and  easier  way:   var array_name=  [  [77,88,99],  [50,60,99],  [99,88,78]  ] ;   The  first  row  is  array_name[0],  the  first  element  in  the  first  row  is  array_name[0]  [0],  and  the  last  element  is  array_name[2]  [2],   JavaScript  will  not  complain  if  the  number  of  elements  in  each  of the  nested  arrays  varies.    E X A M P LE   9.8         Two-dimens ional array           1    Grade  Sheet         var grades=  [  [77,88,99,75],  [50,60,99,89],  [99,88,78,92]   ];    9.2  Array Objects   225   E X A M P LE    9 .8    CONTINUED    2  3  4  5   for  var i=0; i < grades.length; i++   {   for  var j=0; j < grades[1].length; j++   {   " "+grades[i][j]  +  " " ;   document.write    }  document.write " " ;   }                   E X P L A N A T I ON   2   1  A  two-dimensional  array  array of arrays   is created using the literal  notation.  The  outer  set  of square  brackets  surrounds  the  set  of rows  nested  within  them.  Each  nested  row  is  enclosed  in  its  own  set  of  square  brackets  and  each  row  separates  with  a  comma   see  Figure  9.11 .  This  outer for  loop  will  cycle  through  each  row.  The  length  property  determines  the  size  of the  row,  which  is  3.  The  nested for  loop  is  used  to  cycle  through  each  of  the  elements  in  a  row.  The  two  index  values  represent  the  rows,  i,  and  its  element, j,  respectively.  The     tag  closes  the  table  row.   3  4  5   File  Edit  View  History  B<  t   -  C  X  j  file:  ...c.html      of  Arr...       G r a de   S h e et   77  i8  99  75   ¡ 5 0 ] [ 6 0 [ 9 9 [ 89   [88  78][92]   Figure 9.11  Two-dimensional array.   A  K < »v    in   nn   A s s n H n t i v «»   A r r nv   w i th   M n re   T h r in    f  i ne   V n l no    it    ic   n n c c i ' Mp    t h at    226   Chapter 9       JavaScript Core Objects   E X A M P LE    9.9        Associative  Array             var student=new Array    ;  student["Name"]="John Doe";  II one key,  one value  student["Courses"]=new Array "Math","English",  "PE" ;  student["Phones"]=new  Array "415-333-1234","530-345-5432" ;  document.write "The student's name is " + student["Name"] +  document.write "His courses are " + student["Courses"] +  document.write "His favorite course is " +  document.write "His cell phone number is "  +   ". " ;  ". " ;  student["Courses"][2]  + ". " ;  student["Phones"][0]  +  ". " ;   1  2  3  4  5   6  7  8                 E X P L A N A T I ON   3   1  A  new  array  object  called  student  is  instantiated.  2  An  index  or  key  in  the  student  array  is  a  string  of  text,  "Name"  assigned  a  single  value,  "John  Doe".  Now  there  is  an  association  between  the  index  and  the  value.  The  index key is  "Courses".  The  student  takes  more  than  one  course.  A new Array  is created with  the values of the  courses  assigned  to  the key,  an array with  a nested  array.  The  index  key  is  "Phones".  The  student  has  two  phones.  A  new  Array  is  created  with  two  phone  numbers  assigned  to  the  key,  an  array with  a  nested  array.  To  get the  name  of the  student,  the  "Name" is used  as  an index,  also  called  the  key.  To  get  a  list  of  all  the  courses,  the  key index  in  the  array  is  "Courses".  To  get  one  of  the  courses  out  of  the  list,  two  index  values  are  needed,  one  to  key  into  the  courses  and  one  to  select  a  specific  course.  Because  array  index  values  start  at  0,  student  ["Courses"]  [2]  gets  the  third  course,  "PE".   5  6  7   4   8  Again  two   index  values  are  need  to  get  one  of  the  phone  numbers,  stu- dent ["Phones"] [0]  gets  the  value  of  the  first  phone.  The  output  is  shown  in  Figure    9.3 Array Methods   227   '  Associative Array  - Mozilla  Firefox  [jle   '§pohrtiarks   History   View   Edit   J00I5   Help   VH   file:   0 wamp www assoc.html   <1  [ mf   Arr...  Q  Array  of  Arr...    Q  file:  ...[:. html     Q  file:  ...[:. html     Q  fill   The  student's name is  Jolm Doe.  His  courses  are  Math,English,PE  His  favorite course is  PE  His  cell phone number is  415-333-1234.   Figure 9.12  An associative array—one  key associated  with  more than one value.   3  Array Methods   Because  an  array is  an  object in JavaScript,  it has properties  to  describe  it  and  methods  to manipulate it.  The length property of an array was used in previous examples to  deter- mine  the  size  of an  array.  Now  we  will  look  at  methods  that  allow you  to  manipulate  arrays  such  as  adding  a  new  element  at  the  beginning  or  end  of an  array,  removing  an  element  from  the  end  of an  array,  reversing  an  array,  and  so  on. JavaScript  provides  a  whole  set  of methods  for  doing  all  of these  things  and  more   see  Table  9.2 .   Table 9.2  Array Methods   What It Does   Method   concatO   join     popO   push     reverseO   shift      slice     sortQ   spliceQ   Concatenates  elements  from  one  array  to  another array.   Joins  the  elements  of an array by a  separator to  form a  string.   Removes  and returns  the  last  element  of an  array.   Adds  elements  to  the  end  of an array.   Reverses  the  order  of the  elements  in an array.   Removes  and returns  the  first  element  of an  array.   Creates a  new array  from  elements  of an  existing array.   Sorts  an array  alphabetically  or  numerically.   Removes  and or replaces  elements  of an  array.    228   Chapter 9       JavaScript Core Objects   The  COncatQ Method.  The  concatQ  method  concatenates  the  elements  passed  as  arguments  onto  an  existing  array   JavaScript  1.2 ,  returning  a  new  concatenated  list.  The method  does not change  the existing array in place.  You must assign results to  either  an  existing  array  or  a  new  one.   F O R M AT   E X A M P LE   newArray=oldArray.concat new  elements ;   names = names.concat "green,  "blue" ;   E X A M P LE    9.10                  Array concat    methods    1  2   3       var namesi=new Array "Dan",  "Liz",  "Jody"   ;  var names2=new Array "Tom",  "Suzanne" ;  document.write " First array:  "+ namesl +  " " ;  document.write " Second array:  "+ names2 +  " " ;  document.write " After the concatenation  " ;  namesl = namesl.concat  names2 ;  document.write namesl ;               E X P L A N A T I ON   The  first  Array  object,  called  namesl,  is  created.  The  second  Array  object,  called  namesl,  is  created.   1  2  3  After  concatenating  the  names2  array  to  namesl,  the  result  is  returned  written  to  namesl   see  Figure  9.13 .  Without  assigning  the  return  value  to  namesl,  namesl  will not be  changed.  You can return the results to  a completely different array.  The  concatQ  method  allows  the  elements  of  one  array  to  be  added  to  another.   First  array:  Dan,Liz,Jody    9.3  Array Methods   229   The pop   Method.  returns  the  value  popped  off.   The  pop    method  deletes  the  last  element  of  an  array  and   F O R M AT   E X A M P LE   var  return_value=Arrayname.pop     var popped = myArray.pop  ;   E X A M P LE    9.11        Array pop     method           var names=new Array "Tom",  "Dan",  "Liz",  "Jody" ;  document.write " Original array:  "+ names +" " ;  var newstring=names.pop  ;      Pop off last  element  of array  document.write "Element popped:  "+ newstring ;  document.write " New array:  "+ names +  " " ;   The Array     constructor  creates  a  new  array  called  names  and  initializes  the  array  with  four  values:  "Tom",  "Dan",  "Liz",  and  "Jody".  The  contents  of  the  array  called  names  is  displayed.  The  last  element  of  the  array  is  removed.  The  value  removed  is  returned  and  as- signed  to  the  variable  called  newstring.  The  popped  value  is  displayed.  The  shortened  array is  displayed   see  Figure  9.14 .               E X P L A N A T I ON   1  2  3  4  5   1   2  3   4  5   Original  array:  Tom,Dan,Liz,Jody  Element  popped:  Jody  New  array:  Tom,Dan,Liz   Figure  9.14   The  Array pop    method.    Chapter 9       JavaScript Core Objects   230   F O R M AT   E X A M P LE   Arrayname.push new elements , :     Appended to the array   myArray.push "red",  "green",  "yellow" ;    Array push     method           1  2  3  4   var names=new Array "Tom",  "Dan",  "Liz",  "Jody" ;  document.write " Original array:  "+ names +  " " ;  names.push "Daniel","Christian" ;  document.write "New array:  "+ names +  " " ;   E X A M P LE   9.12                   E X P L A N A T I ON   1  An  Array  object  called  names  is  declared  and  initialized.  2  3   The  contents  of the  array   i.e.,  all  of its  elements   are  displayed.  The  push    method  appends  two  new  elements,  "Daniel"  and  "Christian",  to  the  end  of  the  names  array.  The  array has grown.  It is  displayed in  the  browser window with its new elements   see  Figure  9.15 .   4   Original array:  Tom,Dan,Liz,Jody  New array:  Tom,Dan,Liz, Jody,Daniel,Christian   Figure  9.15  The Array pushQ  method  before  a nd   after.   The ShiftO  and unshifto  Methods.  The  shift    method  removes  the  first  element  of  an  array  and  returns  the  value  shifted  off;  the  unshiftQ  method  adds  elements  to  the    231   var  return_value=Arrayname.shift  ;  Arrayname.shift  new elements ;       Prepended to  the array   var shifted_off = rnyArray.shift  ;  myArray.shift "blue","yellow" ;    Array shift    and unshift    methods           var names=new Array "Dan",  "Liz",  "Jody"   ;  document.write " Original array:  "+ names +  " " ;  names.shift  ;  document.write "New array after the shift:  "  + names ;  names.unshift "Nicky","Lucy" ;     Add new elements  to  the beginning of the array  document.write " New array after the unshift:  " + names ;   l   2  3   9.3  Array  Methods   F O R M AT   E X A M P LE   E X A M P LE    9.13                   E X P L A N A T I ON   l  A  new  Array  object  called  names  is  created.  2  3   The  first  element  of the  array  is  shifted  off,  shortening  the  array  by  1.  The  unshiftO  method  will  prepend  to  the  beginning  of  the  array  the  names  "Nicky"  and  "Lucy",  thereby  making  it  longer  by  two  elements   see  Figure  9.16 .   Original array:  Dan,Liz,Jody  New array after the  shift:  Liz,Jody  New array after the unshift:  Nicky,Lucy,Liz, Jo dy   Figure  9.16   The  Array shiftO  a nd unshiffO  methods.   The Slice   Method.  The  slice    method  copies  elements  of  one  array  into  a  new  array.  The slice    method  takes  two  arguments:  The  first is  the starting element in  a range    Chapter  9      JavaScript Core Objects   var newArray = Arrayname.slice first  element,  last element ;   var ArraySlice = myArray.slice 2,6 ;       ArraySlice  contains  elements      2  through 5 of myArray.    Array slice    method           var names=new Array "Dan",  "Liz",  "Jody",  "Christian",  document.write " Original array:  "+ names +  " " ;  var sliceArray=names.slice 2,  4 ;  document.write "New array after the slice:  " ;  document.write sliceArray ;   "William" ;   1   2   3   232   F O R M AT   E X A M P LE   E X A M P LE    9.14                   E X P L A N A T I ON   1  2   3   This  is  the  original  array  of names.  The  slice    method  will  start  at  position  2,  copy  Jody  into  the  new  array,  then  Christian,  and  stop just  before  position  4,  William.  The  original  array  is  not  affect- ed  by  the  slice.  The  new  array  created  by  the  sliceQ  method  is  displayed   see  Figure  9.17 .   Array  slice ]  method  -  Microsoft  Internet  Explorer   File   Edit   View   Favorites   Tools   Help   Q  Back   -   @   < & \P  'Search   >  Favor   Address   C: \sambar50\docs\ch9\slice. html   FTD.COh   Original array:  Dan,Liz,Jody,Christian,William  New array after the slice: Jody,Christian   i ra   O  1  7   I  l c i r \   -i   A rrr*\\¡         - \f    ~ir\ r~\rrr~\\      9.3  Array  Methods   233   with  new  ones.  method  copies  elements,  Ropes,  tapes,  and  films  are  spliced;  bread,  meat,  and  golf  balls  are  sliced.    the  slice    method.  The  slice    the  splice    method  removes  and or  replaces  elements.   this  method  with    Don't  confuse   Arrayname.splice index position,  number of  elements  to  remove ;  Arrayname.splice index position,  number of  elements  to  remove,   replacement  elements ;   myArray.splice 3,  2 ;  myArray.splice 3,  2,  "apples","oranges" ;   F O R M AT   E X A M P LE   E X A M P LE    9.15                   E X P L A N A T I ON   l   2  3   l  2   3    Array splice     method       < s c r i pt    t y p e = " t e x t   j a v a s c r i p t ">   splice starting_pos,       var  names=new  Array "Tom","Dan",  "Liz",  "Jody" ;  document.write " Original array:  "+ names  +  " " ;  names, spliced,  2,  "Peter","Paul","Mary" ;  document.write "New array:  "+  names +  " " ;   number_to_delete,   new_values    An  Array  object  called  names  is  declared  and  initialized.  The  spliceO  method  allows  you  to  delete  elements  from  an  array  and  optionally  re- place  the  deleted  elements with  new values.  The  first  arguments  to  the  splice  meth- od  are  1,  2.  This  means:  start  at  element  1,  and  remove  a  length  of  2  elements.  In  this  example,  element  1  starts  with  "Dan"   element  0  is  "Tom" .  "Liz"  is  the  second  element.  Both  "Dan"  and  "Liz"  are  removed.  The  next  three  arguments,  "Peter",  "Paul",  and  "Mary",  are  then  inserted  into  the  array,  replacing  "Dan"  and  "Liz".  The  new  names  array  is  displayed  in  the  browser  window   see  Figure  9.18 .    234   Chapter 9      JavaScript Core Objects   9.4  The Date Object   JavaScript  provides  the  Date  object  for  manipulating  date  and  time.2  Like  the  String  and  Array  objects,  you  can  create  as  many  instances  as  you  like.   As  we'll  see,  the  Date  object  provides  a  number  of  methods  for  getting  or  setting  spe- cific  information  about  the  date  and  time.  The  date  is  based  on  the  U N IX   date  starting  at January  1,  1 9 70    in  Greenwich  Mean  T i m e3   [ G M T ]  ,   and  doesn't  support  dates  before  that  time.  Figure  9 . 19   gives  you  an  idea  of  the  difference  between  G MT   and  local  time.  T i me   is  measured  in  milliseconds   one  millisecond  is  one  thousandth  of  a  second .  Because  client-side JavaScript  programs  run  on  a  browser,  the  Date  object  returns  times  and  dates  that  are  local  to  the  browser,  not  the  server.  Of  course,  if  the  computer  is  not  set  to  the  correct  time,  then  the  Date  object  won't  produce  the  expected  results.  Figure  9 . 20   shows  a  typical  date  and  time  control  panel.   Figure 9.19  24-hour world  time zones map with current time.  Courtesy of  htlp:  www.   worldtimezone.com index24.html.    9.4  The  Date Object   235   [pate  and  Time  Properties   Date  & Time   Time  Zone   Internet  Time   Date   4   S  M   T  W  2  1  8  9   F  si  T  3  5  10  11  m  6  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30   7   Current  time  zone:  Pacific  Daylight  Time   OK   I   Cancel   Figure 9.20  The computer's date and  time settings.   If no  arguments  are  passed  to  the  Date  object  constructor,  it  returns  the  local  date  and  time   based  on  the  accuracy  of the  clock  on  your  client  machine .  There  are  five  formats  that  can  be  passed  as  arguments  when  creating  a  Date  object;  shown  in  Example  9.16.   E X A M P LE   9.16   new  Date  "Month dd,  yyyy hh:mm:ss"  new  Date  "Month dd,  yyyy"   new  Date  yy,mm,dd,hh,mm,ss   new  Date  yy,mm,dd   new  Date  milliseconds    Here  are  a few  examples  of instantiating  a date:   mydate  = new Date     mydate  = new Date "March 15,  2 010 09:25:00"   mydate  = new Date "March 15,  2 010"  mydate  = new  Date 10,2,15   mydate  = new  Date 10,2,15,9,25,0   mydate  = new Date  500 ;   9.4.1  Using the Date Object Methods    236   Chapter 9       JavaScript Core Objects   Table  9.3  Date Object  Methods   Method   getDate   getDay   getFullYear   getHours   getMinutes   getMonth   getSeconds   getTime   getTimeZoneOffset   getUTCDateO   getUTCDayO   parse  0   setDate value    setFullYearQ   setHours     getMilliseconds   Returns  the  millisecond   What It Does   Returns  the  day  of the  month   1-31    Returns  the day of the week   0-6 ;  0  is Sunday,  1  is Monday,  and so  on   Returns  the year with  four  digits   Returns  the  hour   0-23    Returns  hours  since  midnight   0-23    Returnsnumberofmonth 0-ll ;0is January, 1 is February, and  so  on   Returns  the  second   0-59    Returns  number  of milliseconds  since January  1,  1970   Returns  the  difference  in  minutes between  current  time  on  local  computer  and  UTC   Returns  the  day  of the  month   Returns  the day of the week  converted  to  universal  time   get  UTCFullYearO   Returns  the year in  four digits  converted  to  universal  time   getUTCHoursQ   Returns  the hour  converted  to  universal  time   getUTCMilliseconds        Returns  the  millisecond  converted  to  universal  time   Converts  the  passed-in  string  date  to  milliseconds  since  January  1,  1970   Sets  day  of the  month   1-31    Sets  the year as a  four-digit number*   Sets  the  hour within  the  day   0-23    setHours hr,min,sec,msec    Sets  hour in local  or UTC  time   setMilliseconds   Sets  the  millisecond*    9.4  The  Date Object   237   Table  9.3  Date Object  Methods   continued    Method   setTimeO   setUTCdateO   What It Does   Sets  time  from January  1,  1970,  in milliseconds   Sets  the  day  of the  month in universal  time   s et UTCFu 11 Yea r 0   Sets  the year as a  four-digit number in universal  time   setUTCHoursO   Sets  the  hour in universal  time   setUTCMillisecondsO   Sets  the  millisecond  in  universal  time   Sets  the  minute  in universal  time   Sets  the  month  in  universal  time   Sets  the  second in universal  time   Sets  the  number  of years  since  1900   00-99    Returns  the  date  string  in universal  format   Returns the string representing date and time based on locale of  computer as  10 09 99  12:43:22   Returns  the  source  of  the  Date  object   Returns  string  representing date  and  time   Returns string representing date and time as  10 09 99  12:43:22  in  universal  time   Converts  comma-delimited values  to  milliseconds   Returns  the  equivalence  of  the  Date  object  in  milliseconds   setUTCMinutesO   setUTCMonthO   setUTCSecondsO   setYearO   toGMTStringO   toLocaleString   toSourceQ   toStringO   toUTCStringO   m   co   valueO 0   E X A M P LE   9.17        Time  and  Date    Date  and Time           var now = new Date    ;     Now is an instance  of a Date  object  document.write " Local  time:   "  + now +  " " ;  var  hours=now.getHours  ;    Chapter 9       JavaScript Core Objects    CONTINUED    9 . 17   document.write "The  full year is  "  + year +" " ;  document.write " The time  is:   "  +  hours +  ":"  + minutes +  ":"  + seconds ;   238   E X A M P LE                   E X P L A N A T I ON   1  A  new  Date  object  called  now  is  created.  It  contains  a  string  with  the  current  date   2  3  4  5   and  time:  Mon  Aug  10  18:22:36  GMT-0700 Pacific  Daylight  Time .  The  variable  called  hours  is  assigned  the  return  value  of  the  getHoursQ  method.  The  variable  called  minutes  is  assigned  the  return  value  of  the  getMinutes    method.  The  variable  called  seconds  is  assigned  the  return  value  of  the  getSecondsO  method.  The  variable  called  year  is  assigned  the  return  value  of  the  getFullYear    method,  2010.  The  output  is  shown  in  Figure  9.21.   Time and  Date  - Mozilla  Firefox  Bookmarks   History   View   Edit   File   Tools   Help   C   fj    File :   C: wamp www example9.13.html   I  ^  Form and Elem...   J  Form and Elem...   Naming Buttons   _J  Naming Buttons   ]  Naming Forms   Date and Time   Local  time:  Fri Feb  12  2010  13  13:20  GMT-0800   Pacific  Standard  Time   The full year is 2010  The time is:  13  13  20   Figure  9.21   D a te   o b j e ct  a nd   its  methods.   9.4.2  Manipulating the Date and Time   JavaScript  stores  dates  in  milliseconds,  so  if you  have  more  complicated  calculations  to  perform,  such  as  the  number  of  days  before  a  date,  or  between  two  dates,  the  informa- tion  in  Table  9.4  might  be  helpful  in  converting  milliseconds  to  minutes,  hours,  days,  and  so  forth.    9.4  The  Date Object   239   Table 9.4  Basic  Units of Time   Unit of Time   Milliseconds   1,000   1  second   1  minute   1  hour   1 day   1 week   second  *  60    1,000  *  60    minute  *  60    1,000  *  60  *  60    hour  *  24    1,000  *  60  *  60  *  2 4    day  *  7    1,000  *  60  *  60  *  2 4 * 7    E X A M P LE    9.18        Countdown  'til  Christmas              var today  = new Date  ;  var  fullyear  =  today.getFullYear  ;  var  future  = new Date "December 25,  "+ fullyear ;  var diff  = future.getTlme    - today.getTime  ;      Number  of  milliseconds  var days  = Math.floor diff     1000  * 60  * 60  * 24    ;      Convert  to  days  var str="0nly  "  + days  +  "   shopping days  left   'til Christmas!  ";   document.write str+" " ;   1  2  3  4   5  6                  E X P L A N A T I ON   1  A  new  Date  object  called  today  is  created.  2  3   The  getFullYearO  method  returns  the  year  as  2010.  Another  Date  object  called uture  is  created.  It will  contain  the  future  date,  Christ- mas,  passed  as  its  argument.  The  difference  between  the  future  time  and  the  present  time  is  calculated  and  re- turned  in  milliseconds  with  the  getTime    method.   4    240   Chapter 9       JavaScript Core Objects   Only JJ3  shopping days left 'til Christmas!   Figure 9.22  The number of days between two dates has been calculated.   9.4.3  Customizing the Date Object   with  the prototype  Property   All  objects  have  a  prototype  property  that  allows  you  to  extend  the  capabilities  of  the  object.  With  the  Date  object's  prototype  property,  you  can  customize  the  time  and  the  date  by  providing  new  methods  and  properties  that  will  be  inherited  by  all  instances  of  this  object.  Because  the  Date  object  provides  methods  that  return  zero-based  months,  weeks,  years,  and  other  measures,  you  might  want  to  create  a  prototype  method  where  "January"  is  month  number  1  instead  of  0,  and  the  day  is  "Monday"  instead  of  1,  and  so  on.   E X A M P LE   9.19        The  Prototype  Property            Customize  the  Date  function  weekDay  {   var now  =  this.getDay  ;  var names  = new Array 7 ;  names[0]="Sunday";  names[1]="Monday";  names[2]="Tuesday";  names[3]="Wednesday" ;  names[4]="Thursday";  names[5]="Friday" ;  names[6]="Saturday";  return names[now] ;   }  Date.prototype.DayOfWeek=weekDay;                          var  today=new Date  ;   1  2  3   4  5   6  7   document.write "Today is  "  + today.DayOfWeek    +  ". " ;        9.4  The  Date  Object   E X P L A N A T I ON   241   1  2   3   4   The  function  called  weekDayO  is  defined.  The  variable  now  is  assigned  a  number  representing  the  day  of  the  week,  where  0  is  Sunday.  A  new  Array  object  called  names  is  created.  It  will  contain  seven  elements.  Each  element  will  be  assigned  the  name  of  the  weekday   e.g.,  "Sunday" .  The  value  in  now,  a  number  between  0  and  6,  will  be  used  as  an  index  in  the  names  array.  If  now  is  6,  then  the  value  of  names[6],  "Saturday",  will  be  returned.   5  A  prototype  method  called  DayOfWeek  is  assigned  the  name  of  the  function  week- Day.  Now  the  Date  object  has  a  new  method  that  will  be  inherited  by  all  objects  created  from  the  Date    constructor.  The  capabilities  of  the  Date  object  have  been  extended  to  provide  a  method  that  will  return  the  name  of  the  weekday.   See  Chapter  8  for  more  on  prototypes.   A  new  Date  object  is  created  with  the  Date    constructor  function.  The  new  prototype  method  is  called,  and  returns  the  string  value  of  today's  date,  "Saturday"    see  Figure  9.23 .   6  7   Today  is  Saturday.   Figure 9.23  The day is converted to a string  using a  prototype.   9.5  The Math Object   The  Math  object  allows  you  to  work  with  more  advanced  arithmetic  calculations,  such  as  square  root,  trigonometric  functions,  logarithms,  and  random  numbers,  than  are  pro- vided  by  the  basic  numeric  operators.  If  you  are  doing  simple  calculations,  you  really  won't  need  it.   Unlike  other  objects,  you  don't  have  to  create  an  instance  of  the  Math  object  with  the  new  keyword.  It  is  a  built-in  object  and  has  a  number  of  properties   see  Table  9.5   and  methods   see  Table  9.6 .  The  Math  object  always  starts  with  an  uppercase  M.   Table  9.5  Math  Object  Properties   Property   Math.E   Value   2.718281828459045091   Description   Euler's  constant,  the base  of  natural  logarithms    242   Chapter 9       JavaScript Core Objects   Table  9.5  Math  Object  Properties   continued    Property   Math.LOG2E   Math.LoglOE   Math.PI   Value   1.442695040888963387   0.4342944819032518167   3.14592653589793116   Description   Log base-2  of E   Log base-10  of E   Pi, ratio of the circumference of a  circle  to  its diameter   Math.SQRTl_2   0.7071067811865475727   1  divided by  the  square root  of 2   Math.SQRT2   1.414213562373985145   Square  root  of 2   Table  9.6  Math Object  Methods   Method   Math,  abs   Number    Math.acos    Number    Math,  asin   Number    Math,  atari   Number    Math.atan2 y,x    Math,  cei I   Number    Math,  cos   Number    Math.exp x *   Math.floor    Number    Math.   log Number    Functionality   Returns  the  absolute   unsigned   value  of Number   Arc  cosine  of Number,  returns  result  in  radians   Arc  sine  of Number,  returns  results  in  radians   Arctangent  of Number,  returns  results  in  radians   Arctangent of y x; returns arctangent of the quotient of its  arguments   Rounds  Number  up  to  the  next  closest  integer   Returns  the  cosine  of Number  in  radians   Euler's  constant  to  some  power   Rounds  Number  down  to  the  next  closest  integer   Returns  the  natural  logarithm  of Number   base  E    Math.max Numberl,   Number2    Returns  larger  value  of  Numberl  and  Number2   Math.min Numberl,   Number2    Returns  smaller  value  of  Numberl  and  Number2   Math.pow   x,  y    Returns the value of x to  the power of y xy , where x is the  base  and y  is  the  exponent   Math.randomO   Generates  pseudorandom  number between 0.0  and  1.0   Math,  round   Number    Rounds  Number  to  the  closest  integer    9.4  The  Date  Object   243   Table  9.6  Math Object  Methods   continued    Method   Functionality   Math, tan  Number    Tangent  of  Number  in  radians   Math.toString Number    Converts  Number  to  string   * Returns the value of Ex where E is Euler s constant and x is the argument passed to it. Euler s constant is  approximately  2.7183.   Square Root,  Power of, and Pi.  The  Math  object  comes  with  a  number  of common  mathematical  constants   all  uppercase ,  such  as PI and  natural  log values,  as well  as meth- ods  to  find  the  square  root  of a  number,  the  power  of a  number,  and  so  on.  Example  9.20  demonstrates  how  to  use  some  of  these  properties;  the  output  is  shown  in  Figure  9.24.   E X A M P LE    9.20        The  Math  Object        Math object  Methods--sqrt  ,pow      Math  object  Property--PI             1   2  3   4   var  num=16;  document.write "The square root of  "  +num+  "  is  " ;  document .write  Math.sqrt  num  , " . "  ,  document.write "PI  is  " ;  document.write Math.PI ;  document.write ". "+num+"  raised to the 3rd power is  "   ;  document.write Math.pow num,3   +  "." ;                 E X P L A N A T I ON   1  2  3  4   The  number  16  will  be  manipulated  by  Math  methods  and  constants.  The  Math  object's  sqrt    method  returns  the  square  root  of  number  16,  which  is  4.  The  Math  object's  PI  constant  produces  the  value  of  PI.  The  Math  object's  pow    methods  raises  and  returns  number  16  to  the  3rd  power,  which  is  4 0 96    see  Fieure  9.24 .    244   Chapter 9       JavaScript Core Objects   Ö The  Math  Object  -  Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   *    y ,t    '¿¿j-      [2]     file: HjC:  wamp www example9.13new. html   Math  object  Methods—sqrt0,pow    Math  object  Property—PI   The  Square  mot  of  16  is  4.  PI  is  3.141592 653589 793.  16  raised  to  the  3rd power is  4096.   Figure  9.24   The Math  o b j e c t,   s o me   properties  a nd   methods.   9.5.1  Rounding Up and Rounding Down  There  are  three  Math  methods  available  for  rounding  numbers  up  or  down.  They  are  the  ceil  ,floor  ,  and  roundQ  methods   see  Table  9.7  for  examples .  The  differences  among  the  methods  might be  confusing because  all  three  methods  truncate  the  numbers  after  the  dec- imal  point  and  return  a  whole  number.  If you  recall, JavaScript  also  provides  the  parselnt    function,  but  this  function  truncates  the  number  after  the  decimal  point,  without rounding  either  up  or  down.   The  Ceil    Method.  The  ceil     method  rounds  a  number  up  to  the  next  largest whole  number  and  then  removes  any  numbers  after  the  decimal  point;  thus,  5.02  becomes  6  because  6  is  the  next largest number,  and  - 5 . 02   becomes  -5  because  -5  is  larger  than  - 6.   The  flOOr    Method.  T he  floor Q  method  rounds  a  number  down  to  the  next  lowest  whole  number  and  then  removes  any  numbers  after  the  decimal  point;  thus,  5.02  now  becomes  5,  and  - 5 . 02   becomes  - 6.   The  roundQ  Method.  The  roundQ  method  rounds  up  only  if  the  decimal  part  of the  number  is  .5  or  greater.  Otherwise,  it  rounds  down  to  the  nearest  integer;  thus,  5.5  is  rounded  up  to  6,  and  5.4  is  rounded  down  to  5.   Table  9.7  Rounding  up   a nd   d o wn   Number   ceil     floor     roundQ   2.55   2.30   3   3   2   2   3   2    9.4  The  Date  Object   E X A M P LE    9.21       245    The  Math  Object        Rounding  Numbers             l   2   3   4   var  num=16.3;  document.write " The number being manipulated is:  ",  num,   document.write "The  Math.floor  method rounds  down:  "   document.write "The  Math.ceil  method rounds up:  "  +   "  " ;  + Math.floor num   +  " " ;  Math.ceil num   +" " ;   document.write "The   Math.round   method  rounds  to\   the nearest  integer:  "  + Math.round num   +  " " ;                 E X P L A N A T I ON   l  2   3  4   The  number  16.3  will  be  manipulated  by  the  Math  object's  methods.  The  Math  object's  floor    method  rounds  the  number  down  to  the  next  lowest  whole  number.  16.3  rounds  down  to  16.  The  Math  object's  ceil    method  rounds  a  number  up.  16.3  becomes  17.  The  Math  object's  roundQ  methods  round  16.3  up  only  if  the  decimal  part  of  the  number  is  5  or  higher   see  Figure  9.25 .   Using  the  Math  Object  Methods   The  number  being  manipulated  is:  16. J   The Math.Jloor method  rounds  down:  16  The Math.ceil method  rounds  up:  17  The Jllath.round method  rounds  to  the  nearest  integer:  16   Figure 9.25  Output from  Example 9.21    246   Chapter 9       JavaScript Core Objects    such  as  for  lotteries  or  card  games .  There  are  examples  throughout  this  text where  ran- dom  numbers  are  used.   The  Math  object's  random    method  returns  a  random  fractional  number  between  0  and  1  and  is  seeded  with  the  computer's  system  time.   The  seed  is  the  starting  number  for  the  algorithm  that  produces  the  random  number.   The  Math  object's floor    method  truncates  numbers  after  the  decimal  point  and  returns  an  integer.   E X A M P LE    9.22         Random Numbers              for 1=0;  i < 10;i++ {       Generate random numbers between 0  and 1  document.write Math.random  ," " ;   }  document.write " " ;      Generate random numbers between 0  and 10  for 1=0;  i < 20;  i++ {   document.write Math.floor Math.random    * 10    +"  " ;   1   2   3  4   }                 E X P L A N A T I ON   1   2   3,  4   The for  loop  is  entered  and  will  cause  the  body  of  the  block  to  be  executed  10  times,  thus  producing  10  fractional  random  numbers  between  0  and  1.  The  randomQ  method  of  the  Math  object  produces  random  numbers  between  0  and  1.  This for  loop  will  cycle  20  times  producing  20  random  numbers  between  0  and  10,  achieved  by  multiplying  the  return  value  of  the  random  number  by  10  and  then  using  the  floor0  method  to  round  down  the  number  to  produce  a  whole  number.  This  will  produce  0  but  never  10   see  Figure  9.26  on  page  2 4 7  .   9.5.3  Wrapper Objects  String, Number, Function, Boolean   A  wranner  is  an  obiect  bearina  tbe  same  name  as  tbe  nrimitive  data  tvne  it  renresents    The Math Object   247   jl>  Random  Numbers  - Mozilla  Firefox  I  File   Bookmarks   History   View   Edit   Tools   Help   T   C   l   M   Ü   file:   C: wamp www tp428e44.html   A  dative  ...   Q  Associative  ...   Q  Random  Nu...   L]  Random  Nu  ..   J  Ran   0 . 7 7 1 9 5 2 9 0 7 6 7 1 5 4 52  0 . 5 5 2 7 9 9 3 4 1 1 9 6 3 4 16  0 . 9 3 1 3 0 1 9 7 8 8 0 8 1 78  0 . 6 4 5 0 0 1 1 4 8 4 8 3 4 0 45  0 . 2 3 3 7 2 1 2 9 4 3 9 6 7 1 34  0 . 7 3 4 8 2 6 9 7 8 4 0 9 7 2 89  0 . 8 2 6 9 9 4 7 2 6 5 4 4 8 77  0 . 0 1 3 7 4 5 5 8 4 4 9 7 7 5 3 9 82  0 . 8 0 8 3 8 0 1 0 3 6 4 4 1 06  0 . 4 5 6 6 1 1 6 4 3 2 1 2 9 0 3 15   4 7 2 3 2 6 9 3 7 4 1 5 8 9 2 16   5  5  8   Figure 9.26  Producing  random  numbers  Example 9.22 .   provide  properties  and  methods  that  can  be  defined  for  the  object.  For  example,  the  String  object  has  a  number  of  methods  that  let  you  change  the  font  color,  size,  and  style  of  a  string;  and  the  Number  object  has  methods  that  allow  you  to  format  a  number  to  a  specified  number  of  significant  digits.  W h e t h er   you  use  the  object  or  literal  notation  to  create  a  string,  number,  or  Boolean, JavaScript  handles  the  internal  conversion  between  the  types.  The  real  advantage  to  the  wrapper  object  is  its  ability  to  apply  and  extend  properties  and  methods  to  the  object,  which  in  turn,  will  affect  the  primitive.   9.5.4  The String Object   We  have  used  strings  throughout  this  book.  They   were  sent  as  arguments  to  the  writeQ  and  writelnO  methods,  they  have  been  assigned  to  variables,  they  have  been  concate- nated,  and  so  on.  As  you  might  recall,  a  string  is  a  sequence  of  characters  enclosed  in  either  double  or  single  quotes.  T he   String  object   starting  with JavaScript  1.1   is  a  core  JavaScript  object  that  allows  you  to  treat  strings  as  objects.  The  String  object  is  also  called  a  wrapper  object  because  it wraps  itself around  a  string  primitive,  allowing you  to  apply  a  number  of  properties  and  methods  to  it.   You  can  create  a  String  object  implicitly  by  assigning  a  quoted  string  of  text  to  a  vari- able,  called  a  string  primitive   see  "Primitive  Data  Types"  on  page  53  of  Chapter  3,  " T he  Building  Blocks:  Data  Types,  Literals,  and  Variables" ,  or  by  explicitly  creating  a  String    Chapter 9       JavaScript Core Objects   248   F O R M AT   E X A M P LE   E X A M P LE    9.23       var string_name  =  "string of  text";  var  string_name  =  new  String "string  of  text" ;   var  title="JavaScript  by  Example";  var  title=new  String "JavaScript  by  Example" ;    The  String  Object             Primitive  and  String  0bjects       var first_string =  "The winds of war are blowing.";  var next_string = new String "There  is peace  in the valley." ;  document.write "The first string is of type   " +   document.write ". The second string is of type   "   typeof first_string  ;  + typeof next_string   +". " ;                     E X P L A N A T I ON   1  2  3   4   1   2   3   4   This  is  the  literal way to  assign  a string to  a variable,  and  the  most typical way.  The  string  is  called  a  string  primitive.  It  is  one  of  the  basic  building  blocks  of  the  lan- guage,  along with  numbers  and  Booleans.  All  of the  properties  and  methods  of the  String  object  behave  the  same  way  whether  you  create  a  String  literal  or  a  String  object  as  shown  next.  For  all  practical  purposes,  both  methods  of creating  a  string  are  the  same,  though  this  one  is  the  easiest.  The  StringO  constructor  and  the  new  keyword  are  used  to  create  a  String  object.  This  is  the  explicit  way  of  creating  a  string.  The  typeof operator  demonstrates  that  the  first  string,  created  the  literal,  implicit  way,  is  a  String  data  type.  T be   tvneof  onerator  demonstrates  tbat  tbis  strina   created  witb  tbe  StrineO  con-   9.4  The  Date  Object   249   T y p es   of  Strings   The  first  string  is  of type string.  The  second  string  is  of type object.   Figure 9.27  Output from  Example 9.23.   The  Properties of the String Object.  The string properties   see Table  9.8   describe  the  attributes  of  the  String  object.  The  most  common  string  property  is  the  length  prop- erty,  which  lets  you  know  how  many  characters  there  are  in  a  string.  The  prototype  prop- erty  allows  you  to  add  your  own  properties  and  methods  to  the  String  object,  that  is,  you  can  customize  a  string.   Table 9.8  String Object Properties   Property   length   What It Does   Returns  the  length  of the  string  in  characters.   constructor   Returns  the  function  that  created  the  String  object.   prototype   Extends  the  definition  of the  string by  adding  properties  and  methods.   E X A M P LE    9.24        The  String  Object              Length of  Strings       1   2   3   var first_string =  "The winds of war are blowing.";  var next_string = new String "There  is peace in the valley." ;  document.write "\""+first_string +"\"  contains  " +   first_string.length +  "  characters." ;  document.write " \""+ next_string+"\"  contains  "+  next_string.length+"  characters. " ;   document.write " ...not  to  imply  that war   is equal  to peace... " ;           250   Chapter 9       JavaScript Core Objects   E X P L A N A T I ON   1   2   3   Two  strings  are  created,  one  the  literal  way   a  string  primitive   and  the  other  with  the  constructor  method   a  String  object .  The  length  property  is  applied  to  the  first  string.  W h en   the  property  is  applied  to  a  literal  string,  it  is  temporarily  converted  to  an  object,  and  then  after  the  opera- tion,  it  is  reverted  back  to  a  string  primitive.  The  length  property  is  applied  to  the  second  string,  a  String  object.   It  is just  a  co- incidence  that  both  strings  are  of  the  same  length.    See  Figure  9.28.    L e n g th   of  Strings   "The  winds  of war  are  blowing."  contains  29  characters.  "There  is  peace  in the valley." contains  29  characters.  ...riot  to  imply  that  war  is  equal  to  peace....   Figure  9.28   Using  the String  o b j e c t 's length  property.   Extending the  String Object.  Because  all  objects  have  the  prototype  object,  it  is  possible  to  extend  the  properties  of  a JavaScript  built-in  String  object,  just  as  we  did  for  a  user-defined  object   see  Chapter  8 .   E X A M P LE    9.25        The  Prototype  Property            Customize  String  Functions  function  ucLarge  {   var  str=this.bold  .fontcolor "white" .  toUpperCase  .fontsize "22" ;  return str ;   }  String.prototype.ucLarge=ucLarge;                   var  str="Watch Your Step!!";  document.write str.ucLarge  +" " ;   1   2   3  4    9.4  The  Date  Object   E X P L A N A T I ON   251   1   2   3  4   T he   ucLarge    function  is  defined.  Its  purpose  is  to  generate  and  return  an  upper- case,  bold,  white  font,  with  a  point  size  of  22.  T he   prototype  property  allows  you  to  customize  an  object  by  adding  new  proper- ties  and  methods.  T he   name  of  the  customized  method  is  ucLarge,  which  is  the  name  of  a  new  method  that  will  be  used  by  the  String  object.  It  is  assigned  the  name   without  parentheses   of  the  function  ucLarge  ,  which  performs  the  meth- od's  actions  and  returns  a  value.  Using  the  same  name  for  both  the  property  and  the  function  reduces  the  chance  of  mistakenly  calling  the  method  by  the  wrong  name.  A  new  string  is  created.  T he   prototyped  method,  ucLarge  ,  is  applied  to  the  String  object,  str.  It  will  mod- ify  the  string  as  shown  in  the  output  in  Figure  9.29.   WATCH YOUR STEP!!   DANGER H   Figure  9.29  Using  the String object's prototype  property.   String Methods.  There  are  two  types  of  string  methods:  the  string  formatting  meth- ods  that  m i m ic   the  H T ML   tags  they  are  named  for,  and  the  methods  used  to  manipulate  a  string such  as  finding  a  position  in  a  string,  replacing  a  string with  another  string,  mak- ing  a  string  uppercase  or  lowercase,  and  the  like.   Table  9.9  lists  methods  that  will  affect  the  appearance  of  a  String  object  by  applying  H T ML   tags  to  the  string,  for  example,  to  change  its  font  size,  font  type,  and  color.  Using  these  methods  is  a  convenient way  to  change  the  style  of a string in  a JavaScript program,  m u ch   easier  than  using  quoted  H T ML   opening  and  closing  tags.   Table 9.9  String Object  HTML   Methods   Method   Formats  as  HTML    252   Chapter 9       JavaScript Core Objects   Table 9.9  String Object  HTML   Methods  continued    Method   String.boldO   Stiing.fixedO   String.fontcolor    color    String.]outsize    size    String.italicsÇ    String.link URL    String.smallÇ    String.striheO   String.subO   String.supO   Formats  as HTML    String     String    <font  e.g.,  <font   color="color">String    color="blue">String    size="size">String    <font  e.g.,   String     String     St ri ng   e.g.,  <a   href="http:  www.ellieq.com">String     String     String    puts  a  line  through  the  text     String    creates  a  subscript     String    creates  a  superscript    E X A M P LE    9.26        String  object              Working with  String  Objects:       1  2   3  4   5  6   var  strl  = new String "Hello world!" ;      Use  a  String  constructor  var str2  =  "It's a beautiful day today.";  document.write strl   +  " ";  document.write strl.fontcolor "blue" +" " ;  document.write strl.fontsize 8 .fontcolor "red" .bold  +  document.write strl.big  +  " " ;  document.write "Good-bye,  ".italics  .bold  .big    +   " " ;   str2  +  " " ;    9.4  The  Date  Object   E X P L A N A T I ON   253   1  A  String  object  is  created  with  the  StringO  constructor.  2  3   A  string  primitive  is  created  the  literal  way.  The  fontcdlorO  method  is  used  to  change  the  color  of  the  string  to  blue.  This  method  emulates  the  HTML  tag,   .  The fontsize  , fontcolor0,  and  bold    methods  are  used  as  properties  of  the  string.  The  HTML  method  is  concatenated  to  the  string  "Good-bye,  "  causing  it  to  be  dis- played  in  italic,  bold,  large  text   see  Figure  9.30 .   4  5,  6   Working  with  String  Objects:   Hello  worldlHello  worldl   Hello  world!   Hello  world!  Good-Jbye,  It's  a  beautiful  day today.   Figure  9.30  d e t e r m i ne   its  size.   Properties  of  the String o b j e ct  a re   used  to  c h a n ge   its  a p p e a r a n ce   a nd   There  are  a  number  of methods   see  Table  9 . 1 0    provided  to  manipulate  a  string.   Table  9.10  M e t h o ds   for  String  M a n i p u l a t i on   Method   char At   index    charCodeAt    index    What It Does   Returns  the  character at a  specified index  position.   Returns  the Unicode  encoding  of the  character at a  specified  index  position.   concat stringl,   ...,   stringn    Concatenates string arguments to the string on which the  method was  invoked.   fromCharCode codes    indexOf  substr,   startpos    Creates a  string  from  a  comma-separated sequence  of  character  codes.   Searches  for  the  first  occurrence  of substr starting  at  startpos  and  returns  the  startpos  index  value   of  substr.   lastIndexOf substr,   startpos    Searches  for  the  last  occurrence  of substr starting  at    254   Chapter 9       JavaScript Core Objects   Table 9.10  Methods for String  Manipulation  continued    split delimiter    Splits  a  string  into  an  array  of words  based  on  delimiter.   Method   search regexp    slice startpos,   endpos    suhstr startpos,   endpos    toLocaleLowerCase     toLocaleUpperCaseO   toLowerCaseO   toStringO   toUpperCaseQ   valueOf   What It Does   Searches for the regular expression and returns the index  of where  it was  found.   Returns  string  containing  the  part  of the  string  from  startpos  to  endpos.   Returns  a  subset  of string starting  at startpos  up  to,  but  not  including,  endpos.   Returns a  copy  of the  string  converted  to  lowercase.   Returns a  copy  of the  string  converted  to  uppercase.   Converts all  characters in a  string  to  lowercase  letters.   Returns  the same string as  the source string.   Converts all  characters in a  string  to  uppercase letters.   Returns  the string value  of the  object.   Methods That Find a Position in a String.  A  substring  is  a  piece  of  an  already  existing  string;  thus  eat  is  a  substring  of  both  create  and  upbeat,  and Java  is  a  substring  of JavaScript.  W h en   a  user  enters  information,  you  want  to  see  if  a  certain  pattern  of  characters  exist,  such  as  the @  in  an  e-mail  address  or  a zip  code  in  an  address. JavaScript  provides  a  number  of  methods  to  assist  you  in  finding  substrings.   The  indexO 0  and  the  lastlndexO O  methods  are  used  to  find  the  first  instance  or  the  last  instance  of  a  substring  within  a  larger  string.  They  are  both  case  sensitive.  The  first  character  in  a  string  is  at  index  value  0, just  like  array  indexes.  If  either  of  the  methods  finds  the  substring,  it  returns  the  position  of  the  first  letter  in  the  substring.  If  either  method  can't  find  the  pattern  in  the  string,  then  a  -1  is  returned.   E X A M P LE    9.27        Substrings       <font  face="arial"     Searching  for an  @  sign    9.4  The  Date  Object   255   E X A M P LE     CONTINUED    9.27  while  email_addr. indexOf     ==  -1    {   alert   "Invalid email  address." ;  email_addr=prompt "What  is your email  address?  ","" ;   }  document.write " OK. " ;                     E X P L A N A T I ON   2  3   1   2   3   email_addr.   The  user  is  prompted  for  his  or  her  e-mail  address  and  the  input  is  assigned  to  a  string  called  The  loop  expression  uses  the  indexOj    String  method  to  see  if  there  is  an  @  sym- bol  in  the  e-mail  address.  If  there  isn't,  the  indexO O  method  returns  -1  and  the  body  of  the  loop  is  executed.  If  the  indexO 0  method  didn't  find  the  @  substring,  the  alert  box  appears  and  the  user  is  prompted  again   see  Figures  9.31  and  9.32 .  The  loop  terminates  when  the  user  enters  an  e-mail  address  containing  an  @  sign.  Of  course,  this  is just  a  simple  test  for  validating  an  e-mail  address;  more  elaborate  methods  of validation  are  dis- cussed  in  Chapter  17,  "Regular  Expressions  and  Pattern  Matching."   Searching  for  an  @  sign   [JavaScript  Application]   What is your email address?   Ii   1      OK        Cancel   ]   Searching  for  an  @  sign   [JavaScript  A p p l i c a t i o n]   ^ ^^   What  is  your  email  address?    silly, user, corr^      OK        Cancel   ]   Figure  9.31   Using  the IndexOf   String  m e t h o d.   Searching  for  an  @  sign   [JavaScript  Application]   r\    Invalid f i m f l il  addrpss   xj    256   Chapter 9       JavaScript Core Objects   E X A M P LE    9.28        String  Manipulation-; tit lex head>       Working with  String  Manipulation  Methods       function  break_tag  {   document.write " " ;   1   2   3   4   }  document.write " " ;  var strl  = new String "The merry,  merry month of June..." ;  document.write "In the  string:   "+  strl   ;  document.write "  the first  'm'  is at position  "  +   strl.indexOf "m"  ;   break_tag  ;  document.write "The last  'm'  is at position  "  +   strl.lastIndexOf "m"  ;   break_tag  ;  document.write " strl.substr 4,5    returns   "  +   strl.substr 4,5     break_tag  ;  document.write strl.toUpperCase   ;  document.write " " ;               E X P L A N A T I ON   1  A  new  String  object  is  created  with  the  StringO  constructor.  2   The  indexO 0  String  method  returns  the  index  value  where  " m"   is  first  encoun- tered  in  the  string  starting  at  the  first  character,  position  0.  The  lastlndexO O  method  returns  the  index  position  of  the  last  occurrence  of  " m"  in  the  string  starting  from  the  left  from  position  0.  Starting  at  position  4,  the  Substr  method  returns  5  characters.   3   4   Working with  String  Manipulation  Methods   In  the  string:  The  merry,  merry month  of June...  the  first'm'  is  at  position  4  The last'm' is  at position 17  strl.siibstr 4,  J   returns  merry  THE  MERRY,  MERRY MONTH  OF  JUNE...    9.4  The  Date  Object   257   Methods That Extract Substrings from a String.  You might have  to  do  more  than  just  find  a  substring within  a  string;  you  might  need  to  extract  that  substring.  For  exam- ple,  we  found  the  @  in  the  e-mail  address,  now  we  might  want  to  get just  the  user  name  or  the  server  name  or  domain  name.  To  do  this,  JavaScript  provides  methods  such  as  spliceO,   substringO.   charAtQ,   substrQ,   split  ,   and   E X A M P LE    9.29        Extracting  Substrings-; titlex head>          Extracting  substrings          l   2  3  4   5   6   7   var  straddr  =  "DanielSavage@dadserver.org";  document.write " His name  is   "  +  straddr.substr 0,6    +  " . " ;  var namesarr  =  s t r a d d r . s p l i t    ;  document.write   "The user name  is   "  +  namesarr[0]  +  document.write   "and the mail  server is   "  +  namesarr[1]   " . " ;   document.write   "The  first character  in the  string  is  "   +  " . " ;  +  straddr.charAt 0 +  " . " ;  +  straddr.charAt straddr.length -  1   +  " . " ;   document.write   "and the last character in the string is  "                     E X P L A N A T I ON   A  string  is  assigned  an  e-mail  address.   l  2  The  substr    starts  at  the  first  character  at  position  0,  and  yanks 6  characters  from   3   4   the  starting  position.  The  substring  is  Daniel.  The  split    method  creates  an  array,  called  namesarr,  by  splitting  up  a  string  into  substrings  based  on  some  delimiter  that  marks  where  the  string  is  split.  This  string  is  split  using  the  @  sign  as  its  delimiter.  The  first  element  of  the  array,  namesarr[0],  that  is  created  by  the  split    method  is  DanielSavage,  the  user  name  portion  of  the  e-mail  address.    258   Chapter 9       JavaScript Core Objects   E X P L A N A T I ON    CONTINUED    6   7   The  charAtQ  method  returns  the  character  found  at  a  specified  position  within  a  string;  in  this  example,  position  0.  Position  0  is  the  first  character  in  the  string,  a  letter  D.  By  giving  the  char At     method  the  length  of  the  string  minus  1,  the  last  character  in  the  string  is  extracted,  a  letter  g   see  Figure  9.34 .   G  E x t r a c t i ng   S u b s t r i n gs    -  M o z i l la   F i r e f ox   File   Edit   View   History   Bookmarks   Tools   Help       C   &         file:   C: waii   Loop Exercise   El   is  Daniel.   Extracting  substrings  His  n a me   The  user  n a me   and  is  dadsetver.  org.  The  first  character  in  the  string  is  D.  and  the  last  character  in  the  string  is  g.   the  mail  server   is  DariielSavage.   Figure  9.34   The charAtQ, splitQ.  a nd substrQ  methods:  O u t p ut   from  Example  9.29.   Search and Replace Methods.  In  word  processing  software  you'll  always  find  some  mechanism  to  search  for  patterns  in  strings  and  to  replace  one  string with  another.  JavaScript  provides  methods  to  do  the  same  thing,  using  the  String  object.  The  search    method  searches  for  a  substring  and  returns  the  position  where  the  substring  is  found  first.  The  match     method  searches  a  string  for  substrings  and  returns  an  array  contain- ing  all  the  matches  it  found.  The  replace    method  searches  for  a  substring  and  replaces  it with  a  new  string.  These  methods  are  discussed  again  in  Chapter  17,  "Regular  Expres- sions  and  Pattern  Matching,"  in  more  detail.   E X A M P LE    9.30        Search  and  Replace          Search and Replace Methods          1   var  straddr  =  "DanielSavage@dadserver.org";  document.write "The original  string  is  "+  straddr    9.4  The  Date  Object   E X A M P LE    259    CONTINUED    9.30  document.write "The  search    method  found  \"dad\"  at  var  mysubstr=straddr.substr index,3 ;  document.write "After replacing \"dad\"  with \"P0P\"   " ;  document.write straddr.replace mysubstr,"POP" +" " ;   position  "+  index  +" " ;                     E X P L A N A T I ON   1  An  e-mail  address  is  assigned  to  the  string  variable  straddr.  2   The  replaceO  method  takes  two  arguments,  the  search  string  and  the  replacement  string.  If  the  substring  Daniel  is  found,  it  is  replaced  with Jake.  The  search    method  takes  a  substring  as  its  argument  and  returns  the  first  posi- tion  where  a  substring  is  found  in  a  string.  In  this  example  the  substring  dad  is  searched  for  in  the  string  DanielSavage@dadserver.org  and  is  found  at  position  13.  The  substr    method  returns  the  substring  found  at  position  13,  3  in  the  string,  DanielSavage@dadserver.org:  The  substring  dad  is  replaced  with  POP  in  the  string   see  Figure  9.35 .   dad.   3   4   5      Search  and  Replace  - Mozilla  Firefox  Tools  File   Bookmarks   : History   View   Edit   Help   C   ijLr   l _i    file :   C: wamp www example9.25. html   Properties  Can  be  0.   :le: i' i'C:,:1  . etget.htm:   what  do  <Me  use   Search  and  Replace  Methods  The  original  string  is  DamelSavage@dadseiver.org  The  new  string  is  JakeSavage@dadseiver.org  The  s;earch    method found  "dad"  at  position  1:3- After  replacing  "dad"  with  "POP"  DanielSavage@POPseiver,org   9.5.5  The Number Object   Figure  9.35   The searchQ  a nd replaceQ String  methods:  O u t p ut   from  Example  9.30.    260   Chapter 9       JavaScript Core Objects   or  an  object  number  type  and JavaScript  manages  the  conversion  back  and  forth  as  neces- sary.  The  Number  object  was  introduced  in JavaScript  1.1.   The  NumberQ  constructor  takes  a  numeric  value  as  its  argument.  If  used  as  a  func- tion,  without  the  new  operator,  the  argument  is  converted  to  a  primitive  numeric  value,  and  that  number  is  returned;  if it  fails,  NaN is  returned.  The  Number  object  has  a  number  of properties  and  methods,  as  listed  in  Tables  9.11  and  9.12.   F O R M AT   E X A M P LE   var number  = new Number numeric value ;    Object  var number = numeric value;      Primitive data type   var n  =  new Number 65.7 ;  var n  =  65.7;   Table 9.11  The Number Object's  Properties   What  It  Describes   Property   MAXJVALUE   MINJVALUE   NaN   prototype   Method   toStringO   toFixed      The  largest  representable  number,  1.7976931348623157e+308   The  smallest  representable  number,  5e-324   Not-a-number  value   NEGATIVEJNFINITY   Negative  infinite value;  returned  on  overflow   POSITIVEJNFINITY   Infinite  value;  returned  on  overflow   Used  to  customize  the  Number  object by  adding  new  properties  and  methods   Table  9.12  The Number Object's  Methods   What It Does   Converts  a  number  to  a  string using a  specified base   radix    toLocaleStringO   Converts  a  number  to  a  string using  local  number  conventions   Converts a number to a string with a specified number of places after the  decimal  point    9.4  The  Date  Object   261   Using  Number Constants and  Different  Bases.  constants  MAX_VALUE,  MINJVALUE,  NEGATIVE JNFINITY,  POSITIVE JNFINITY,  of  the  NumberO  function,  but  are  not  used  with  instances  of  the  Number  object;  thus,  var  huge  =  Number.MAX_VALUE  is  a  special  value  that  is  returned  when  some  mathematical  operation  results  in  a  value  that  is  not  a  number.   is  valid,  but  huge.MAX_VALUE   are  properties   is  not.  NaN   and  NaN   The   The  methods  provided  to  the  Number  object  manipulate  instances  of  number  objects.  For  example,  to  convert  numbers  to  strings  representing  different  bases,  the  toStringO  method  manipulates  a  number,  either  primitive  or  object.  See  Example  9.31.   E X A M P LE    9.31        Number  Contants        Constants       var largest  = Number.MAX_VALUE;  var smallest = Number.MIN_VALUE;  var numl  =  20;  var num2  = new Number 13 ;  document.write " The  largest number is  "  + largest       A primitive  numeric  value       Creating  a Number  object   document.write "The smallest number  is  "+  smallest   +  " " ;   document.write "The number as a string   base 2 :  " +   document.write " The number as a string   base  8 :  " +   document.write " The square root of -25  is:  " +   +  " " ;  numl.toString 2  ;  num2.toStrlng 8  ;  Math.sgrt -25   +  " " ;               E X P L A N A T I ON   1   2  3  4   5   The  constant  MAX_VALUE  is  a  property  of  the  NumberO  function.  This  constant  cannot  be  used  with  an  instance  of  a  Number  object.  The  constant  MIN_VALUE  is  a  property  of  the  NumberO  function.  A  number  is  assigned  to  the  variable  called  numl.  A  new  Number  object  is  created  with  the  NumberO  constructor  and  assigned  to  numl.  It  is  easier  to  use  the  literal  notation:  numl  =  13.  The  number  is  converted  to  a  string  represented  in  binary,  base  2.    262   Chapter 9       JavaScript Core Objects   Constants   The largest number is  1.7976931348623157ef308  The  smallest number is  5e-324  The number  as  a  string   base 2 :  10100  The number  as  a  string   base 8 :  15  The  square root  of -25  is:  NaN   Figure  9.36  Constants,  n u m b er   conversion,  a nd NaN:  O u t p ut   from  Example  9.31.   Formatting Numbers.  To  convert  floating-point  numbers  to  a  string  with  a  speci- fied  number  of  significant  digits,  JavaScript  provides  the  toFixedQ  and  toExponentialQ  methods.  You  can  apply  these  methods  to  a  numeric  variable  whether  it  is  created  as  a  numeric  literal  or  as  an  object.   E X A M P LE    9.32       l   2   3   4   l   2  3                  E X P L A N A T I ON     Number  Obj ect           Formatting  Numbers      var n = new Number 22.425456 ;     var n = 22.425456;  document.write " The unformatted number  is  "  + n  document.write "The  formatted number  is  "+ n.toFixed 2   +  document.write "The  formatted number  is  "+ n.toFixed 3   +   +  " " ;   " " ;   " " ;   A  new  Number  object  is  created  and  assigned  to  the  variable  n.  It  is  a  wrapper  for  the  primitive  number.  The  value  of the  number  is  displayed  as  a  large  floating-point number,  2 2 . 4 2 5 4 5 6.  The  Number  object's  toFixedQ  method  gets  an  argument  of  2.  This  fixes  the  deci- mal  point  two  places  to  the  right  and  rounds  up  if  necessary.  The  new  value  is  22.43.    9.4  The  Date  Object   263   Formatting  Numbers   The unformatted number is  22.425456  The formatted number is  22.43  The formatted number is  22.425   Figure  9.37   Using  the  toFixedO Number  m e t h o d:   O u t p ut   from  Example  9.32.   9.5.6  The Boolean Object   The  Boolean  object  was  included  in  JavaScript  1.1.  It  is  used  to  convert  a  non-Boolean  value  to  a  Boolean  value,  either  true  or false.  There  is  one  property,  the  prototype  prop- erty,  and  one  method,  the  toStringO  method,  which  converts  a  Boolean  value  to  a  string;  thus,  true  is  converted  to  "true"  and false  is  converted  to  "false".   FORMAT   E X A M P LE   var object  = new  Boolean value ;   var bl  = new Boolean 5 ;  var b2  = new Boolean null ;   E X A M P LE    9.33         Boolean  Object            The Boolean Object         var booll= new Boolean   0 ;  var boo12  = new Boolean 1 ;  var bool3  = new Boolean    ;  var bool4  = new Boolean null ;  var bool5  = new Boolean NaN ;  document.write "The value 0  is boolean  "  + booll  +  " " ;  document.write "The value 1  is boolean  "  + bool2  +  " " ;  document.write "The value of  the empty string  is boolean  "  +   bool3  +  " " ;   1   2    264   Chapter 9       JavaScript Core Objects   E X A M P LE     CONTINUED    9.33  document.write "The value of NaN is boolean  "  + bool5   +  " " ;                     E X P L A N A T I ON   1   2   The  argument  passed  to  the  Boolean  object  constructor  is  the  initial  value  of  the  object,  either  true  or false.  If  the  initial  value  is  0,  the  empty  string  "",  NaN,  or  null,  the  result  is false;  otherwise,  the  result  is  true.  The  Boolean  object's  values  are  displayed  as  either  true  or false   see  Figure  9.38 .   The  Boolean  Object  The  value  0  is  boolean  false  The value  1  is boolean true  The  value  of the  empty string  is  boolean  false  The  value  of null  is  boolean  false  The  value  of NaN  is  boolean  false   Figure  9.38  True  or False?  O u t p ut   from  Example  9.33.   9.5.7   The Function  Object   The  Function  object  lets  you  define  a  function  as  an  object.  It  allows  a  string  to  be  defined  at  runtime  and  then  compiled  as  a  function.  You  can  use  the  FunctionQ  con- structor  to  create  a  variable  that  contains  the  function.  Because  the  function  has  no  name,  it  is  often  called  an  anonymous  function  and  its  arguments  are  passed  as  comma- separated  strings.  The  last  argument  is  the  body  of  statements  that  will  be  executed  when  the  function  is  called.  If  the  FunctionQ  constructor  does  not  require  arguments,  then  the  body  of  statements  is  treated  as  a  string,  and  will  be  passed  to  the  FunctionQ  constructor  to  define  what  the  function  is  to  do.  Because  functions  are  objects,  they  also  have  properties   see  Table  9.13   and  methods   see  Table  9.14 .   Function  objects  are  evaluated  each  time  they  are  used,  causing  them  to  be  slower  in   execution  than  normal  JavaScript  functions.   Table  9.13   Properties  of  t he Function  O b j e ct   Drr\rtariw   lAfhnf It Onac    9.4  The  Date  Object   265   Table  9.14  Methods of the Function  Object   Property   What It Does   apply 0   callQ   Allows you  to  apply a  method  from  one  function to  another.   Allows you  to  call a  method  from  another  object.   F O R M AT   var nameOfFunction = new Function   arguments,  statements_as_string:  }   E X A M P LE   FUNCTION  DEFINITION   var addemUp = new Function     "a",  "b",  "return a + b;"   ;   E X A M P LE   FUNCTION  CALL   document.write addemUp 10,  5  ;   E X A M P LE    9.34        Function  Object             Anonymous  Functions  and  the  Function Constructor       1  2  3   var sum = new Function "a","b",  "return a + b;  " ;  window.onload =  new Function     "document.bgColor="yellow";" ;  document.write   "The sum is  "  + sum 5,10 +  " " ;  document.write   "The background color  is yellow " ;                  E X P L A N A T I ON   1   2   A  variable  called  sum  is  a  Function  object,  created  by  the  FunctionQ  constructor.  It  has  two  arguments,  "a"  and  "b".  The  function  statements  are  the  last  string  in  the  list.  These  statements  will  be  executed  when  the  function  is  called.  This  FunctionQ  constructor  only  has  one  argument,  the  statement  that  will  be  ex-   266   Chapter 9       JavaScript Core Objects   Anonymous  Functions  and  the  Function  Constructor   The  sum  is  15   The  background  color Is yellow   Figure 9.39  Output from  Example 9.34.   9.5.8  The with Keyword Revisited  In  Chapter  8,  we  used  the  with  keyword  with  user-defined  objects  to  make  it  easier  to  manipulate  the  object  properties.  Recall  that  any  time  you  reference  the  object  within  the  block following  the  keyword,  you  can  use  properties  and  methods without  the  object  name.  This  saves  a  lot  of  typing  and  reduces  the  chances  of  spelling  errors,  especially  when  the  properties  have  long  names.  The  String  object  is  used  in  the  following  example  to  demonstrate  how  with  is  used   see  Figure  9.40 .   E X A M P LE    9.35        The  with  Keyword        Using  the   with   keyword             var yourname=prompt "What  is your name?  ","" ;      Create  a  string  object  with yourname {   1   2   3   4   document.write "Welcome  "  + yourname +  "  to our planet!! " ;  document.write "Your name is  "  + length +  document.write "Your name in uppercase:  "  + toUpperCase    document.write "Your name in lowercase:  "  + toLowerCase     "  characters  in length. " ;   +  ". " ;   +  ". " ;   }                 F Y PI   A IV A T m IV    9.6  What You Should Know   E X P L A N A T I ON   267   2   3  4   T he   property  length  of  the  string  object  called  yourname  is  printed.  Because  the  object  is  enclosed  within  a  b l o ck   following  the  with  keyword,  the  name  of  the  ob- j e ct   is  omitted.  T he   toUpperCaseO  method  caused  the  str  object's  character  to  be  capitalized.  T he   toLowerCaseQ  method  caused  the  string  to  be  lowercased.   Using  the  with  keyword   Welcome Thomas  B.  Savage to  our planet!!  Your name is  16  characters  in length.  Your name in uppercase:  THOMAS  B.  SAVAGE.  Your name in lowercase:  thomas  b.  savage.   Figure 9.40  The with keyword  and  strings.   9.6  What You Should  Know   In  the  last  chapter  you  learned  h ow   to  create  and  manipulate  your  own  objects,  and  in  this  chapter  we  concentrated  on  the  built-in  core  objects  of JavaScript  and  what  proper- ties  and  methods  are  provided  for  these  objects.  You  learned  about  the  Array  object  so  that  later  you  can  create  arrays  of  images  and  links,  and  so  on.  You  learned  h ow   to  manipulate  time  and  dates  and  how  to  manage  strings  and  numbers.  All  of  these  objects  are  vital  to  working with JavaScript  as  they  are  at  the  heart  of all JavaScript  programs.  At  this  time  you  should  know:   1.  W h at  JavaScript's  core  types  are.  2.  How  to  create  an  Array  object  with  the  new  constructor.  3.  How  to  find  the  size  of  an  array.  4.  How  to  create  a  literal  array.  5.  How  to  populate  an  array.  6.  How  to  loop  through  an  array.  7.  How  to  create  a  two-dimensional  array.  8.  How  to  add  and  remove  elements  from  an  array.  9.  T he   difference  between  slicing  and  splicing  an  array.  10.  Five  wavs  to  instantiate  a  date  obiect.    268   Chapter 9      JavaScript Core Objects   15.  How  to  create  a  Math  object.  16.  How  to  use  the  properties  of  the  Math  object.  17.  How  to  randomly  select  an  array  element.  18.  How  to  control  the  number  of  decimal  places  in  a  number.  19.  How  to  define  a  wrapper  object.  20.  How  to  find  a  character  in  a  string.  21.  How  to  find  a  substring  in  a  string.  22.  T he   meaning  of  NaN.  23.  How  to  convert  a  number  to  a  string.  24.  How  to  get  the  square  root  of  a  number.    Exercises   269   Exercises   1.  Create  an  array  of five  animals.  Use  a for  loop  to  display  the  values  stored  there.  Now  add  two  more  animals  to  the  end  of the  array  and  sort  the  array.   Use Java- Script's  built-in  array  methods.   Display  the  sorted  array.   2.  Create  an  associative  array  called  colors.  Each  element  of  the  array  is  a  string   representing  the  color,  for  example,  red  or  blue.  Use  the for in  loop  to  view  each  element  of  the  array  with  a  color  of  the  font  the  same  color  as  the  value  of  the  array  element  being  displayed.   3.  Create  a  function  that  will  return  the  current  month  by  its  full  name.  Use  the   Date  object  to  get  the  current  month.  Months  are  returned  as  0  for January,  1  for  February,  2  for  March,  and  so  on.  Output  should  resemble  this:   The  current month  is  January.   Hint:  You  can  create  an  array,  starting  at index  0,  and  assign  a  month  value  to  it;  for  example,  month  [0]="January"  or  use  a  switch  statement,  for  example,  case  0:  return   "January".   4.  An  invoice  is  due  and  payable  in  90  days.  Write  a  function  that will  display  that   date.   5.  How  many  days  until  your  birthday?  Write  a  function  to  calculate  it.   6.  To  calculate  the  balance  on  a  loan,  the  following  formula  is  used:   PV  =  PMT  *     1  -   1  +  IR   ~NP     IR   PV  is  the  present  value  of  the  loan;  PMT  is  the  regular  monthly  payment  of  the  loan;  IR  is  the  loan's  interest  rate;  NP  is  the  number  of  payments  remaining.  Write  a JavaScript  statement  to  represent  this  formula.   7.  Using  the  formula  to  calculate  the  loan  balance  from  the  last  exercise,  write  a   function  that will  calculate  the  principal  balance  left  on  a  loan  where  the  monthly  payments  are  $600,  the  annual  interest  rate  is  5.5  percent,  and  there  are  9  years  remaining  on  the  loan.  Use  the  toFixedQ  Number  method  to  format  the  output.   8.  Apply  the  ceil  ,floor  ,  and  roundQ  methods  to  the  number  125.5567  and  dis-   270   Chapter 9       JavaScript Core Objects   10.  Create  a  string  prototype  that  can  be  used  to  create  italic,  Verdana  font,  point   size  26  text.   11.  Calculate  the  circumference  of  a  circle  using  the  Math  object.   12.  Create  a  two-dimensional  array  consisting  of numbers  representing  costs.  After   creating  the  array,  print  out  the  values  with  a  sales  tax  of  9  percent  added  to  each  cost.   13.  Write  a JavaScript  program  that  uses  the  Array  and  Math  objects.  Create  an   array  of  five  sayings;  for  example,  "A  stitch  in  time  saves  9,"  or  "Too  many  cooks  spoil  the  broth."  Each  time  the  W eb   page  is  visited,  print  a  random  saying.   14.  a.  Use  the  Date  object  to  print  today's  date  in  this  format:   Today is Friday,  December  17,  2010.   b.  Calculate  and  display  the  number  of  days  until  your  next  birthday.  c.  Create  a  prototype  for  the  Date  object  that will  print  the  months  starting  at  1   instead  of  0.   15.  a.  Create  a  String  object  containing  "Jose  lived  in  San  Jose for  many  years."   b.  Find  the  index  for  the  second Jose.   16.  Print  5 8 . 5 6 7 8 5 67   in  an  alert  box  with  only  two  numbers  to  the  right  of  the  dec-  imal  point.  Use  the  toFixedQ  method.    chapter   10   It's the BOM!  Browser  Objects   10.1  JavaScript and the  Browser Object Model   JavaScript  programs  are  associated  with  a  browser  window  and  the  document  displayed  in  the  window.  The  window  is  a  browser  object  and  the  document  is  an  HTML  object.  In  the  browser  object model,  sometimes  called BOM,  the  window  is  at  the  top  of the  tree,  location,  and  and  below  screen.  See  Figure  10.1.   it  are  objects:  window,  navigator,  frames  [],  document,  history,   Current  Window   self,  window,   parent,  top   Window  objects   navigator  Navigator   object   Array  of  Window  objects   document  Document   object   history  History  object   l C ' C a t i C 'n  Location  object   screen  Screen  object   Figure  10.1   Jhe  hierarchy  of  the  browser  o b j e ct   m o d e l.   If you  are  writing  a JavaScript program  that needs  to  manipulate  the  window,  then you  would  use  the  window  object  and  properties  and  methods  associated  with  it.  For  example,  the  status  property  of  the  window  object  is  used  when  you  want  to  display  text  in  the  sta- tus  bar,  and  the  window's  alert  method  allows  you  to  send  a  message  to  a  dialog  box.   T h ^A  n r n m p nt   n h i p rt   m n r l f>l     r i > f i > rc    t r>    t h f>   l - I T M!    r l n r n m p nt   an   A  e ll    t h r e -]   p m p n t«   s mn   a t t r i-   272   Chapter  10       It's the  BOM!  Browser Objects   image  objects,  form  objects,  link  objects,  and  so  on   see  Figure  10.2 .   See  Chapter  11,  "Working  with  Forms  and  Input  Devices,"  for  more  on  document  objects  and  the  DOM.    array  of  Anchor  objects   applets[]  array  of  applet  objects   Figure  10.2   The  hierarchy  of  the  d o c u m e nt   o b j e ct   m o d e l.   By  combining  the  browser  and  document  object  models,  JavaScript  allows  you  to  manipulate  all  of the  elements  in  a  page  as  objects,  from  the window  down  the  hierarchy,  as  shown  in  Figure  10.3.   document  Document   object   Current   Window  J   document  Document   object   self,  window,   parent, top   Window  objects   navigator  Navigator   object   Array  of  Window  objects   links[]  Array  of   Link   objects    10.1   JavaScript a nd   the  Browser Object  Model   273   10.1.1  Working with the navigator Object  The  navigator  object  contains  properties  and  methods  the  browser.  Netscape  Navigator  and  Internet  Explorer  support  the  navigator  object,  but  some  brows- ers  do  not.   that  describe   The  navigator  object  can  be  used  for  platform-specific  checking  to  determine  the  version  of the  browser  being used,  whether Java  is  enabled,  what plug-ins  are  available,  and  so  on.   Table  10.1  lists  the  properties  that  describe  the  navigator  object.   Table  10.1   Properties  of  t he navigator O b j e ct   Property   appCodeName   appName   appVersion   mimeTypes   platform   userAgent   What  It  Describes   Code  name  for  the browser.   Name  of the browser.   Version  of the  browser.   An array  of MIME  types  supported by  the browser.   The  operating  system where  the  browser resides.   HTTP  user-agent  header sent  from  the  browser  to  the  server.   10.1   E X A M P LE       Navigator  Object              for var property  in navigator {   1  2  3   str^'navigator1^"."+  property;  document.write property+  "&nbsp;&nbsp; "+   str+" "   ;   }                 E X P L A N A T I ON   1   The  special  for  IOOD  assiens.  in  turn,  each  DroDertv  of  the  navigator  obiect  to  the    274   Chapter  10       It's the BOM!  Browser Objects   Ö  Navigator  Object  -  Mozilla  Firefox  File   Bookmarks   History   Vfew   Edit   Tools   Help   Navigator  Object   J^jjl   O    if   j   flle:7  Ci warnp ™W™ example  10.1.html   -   J-»   en-US   [object  Mim  e  Type Array]   appCodeNamc  Mozilla  appName;  Netscape  app Version  5.0   Windows;  en-US   language  minie Types;  platform  Win32:  oscpu  Windows  iVT 5.1  vendor  vendorSub  product  Gecko  productSub  plugins  securityPolicy  user Agent  MozMa 5.0   Windows;  U;  Windows  AT  5.1;  en-US;  rv: 1.9.1,2   Geclfo 20090729  Firefoxfi,5.2  cookicEnabled  true  oriLine  true  bufldTD  javaEnabldd  junction javaEnabledQ  {  [native  code]  }  tainffinabled  jimction  tamtEnabledQ  {  [native  code] }  preference  junction preferertd:e    { [native  code] }  Figure  10.4  Output  from  Example  10.1.   Note  that  the appName  property  of  Firefox  is  "Netscape."    [object  PluginArray]   20090729225027   20090729   In  Firefox the  browser window displaying  the  properties of the navigator object:   i'.iVS   Navigator  Object  -  Opera   File   Edit  ^.Vig;'!-:.--  Bookmarks  Widgets   Tools   Help   in  0  , 1 4 , ,+          Home   [Q  JavaScript  -  Browser  det...  «   y  Navigator  Object   X   y  Navigator  Object   +1    Q      ?   0    file:  localhost C: wamp ™w'   Index  Contents  Search  Glossary  Help  First  Prevjo.us.,Next.  Last  Up  Copyright  Author   m  m  +  +  o  o   V  V   app Co deName  Mozilla  appMinorVersion  appName  Opera  app Version  9.80   Windows  bW 5.1;  U;  en   brows erLanguage  en  cookicEnabled  true  language  en  mime Types  onLine  true  platform  Wm.3.2  plugins   fobiett  PlusiyiArrav  1   [object  MimeTypes]    10.1   JavaScript a nd   the  Browser Object  Model   275   Navigator  Object  -  Windows  Internet  Explorer   gJ  C:\wamp\www\example 10.1.html   m  ,     X [p^^eärcl^heWel^^^^^^J^   Favorite:   Fo'ols   VievJ   Help   Edit   Tili:   Favorites   g  Navigator  Object   i O L * » » r a d iO   E E e    AddStation   [ 3]   Listen  Wow   1 ]  * *    X  I   AO   jt  Classic  Rock   V  Ra   St *   ® *  Pa9e   .NET  CLR  2.0.50727;   .NET  CLR  3.0.45i   .NET  CLR  2.0.50727;   .NET  CLR   app Co deName  Mozilla  appName  Microsoft  Internet  Explorer  appMinorVersion  0  cpuClass  x86  platform  Win32  phrgins  [object]  opsProfile  null  us erProfile  null  svstemLanguage  en-us  userLanguage  en-us  app Version  4.0   compatible;  MSIE  8.0;  Windows  NT  5.1;  Trident 4.0;  CLR  3.5.30729   userAgent  Mozilla 4.0   compatible;  MSIE  8.0;  Windows  NT  5.1;  Trident 4.0;  .NET  CLR  3.5.30729   onLine  cookieEnabled  mime Typ es  Figure  10.6  navigator  o b j e c t:   O u t p ut   from  Example  10.1.   true   true   In  Internet  Explorer,  t he   browser  w i n d ow   displaying  t he   properties  of  the   e   n   N a v i g a t or   O   j    l  ====   f i l e :       u s e r s   e l t i e   s n i f f e r . h t ml   +  ID vs. Name . StartupCTOJ IE JavaScrip. ..Small Stones From DHTML  echmqUii.  Lee Furniture  Montana Wild, nlification  uboat.ni'   H » CP  1  The  properties  for  Safari  are:  cookieEnabled  true  language  en  productSub  20030107  product Gecko  app Co deName  Mozilla  mimeTypes  vendorS ub  vendor  Apple  Computer,  Inc.  platform  Maclntel  appName  Netscape  appVereion  5.0   Macintosh;  U;  Intel  Mac  OS  X  10_4J1;  en   AppleWebKit 531.9   KHTML.  like  Gecko   Versi  userAgent  Mozilla 5.0   Macintosh:  U;  Intel Mac  OS  X  10_4J1;  en   AppleWebKit 531.9   KHTML.  like  Gecko  plugins  onLine  true   [object  MimeTypeArray]   [object  PluginArray]    276   Chapter  10       It's the  BOM!  Browser Objects   What Is Your Browser's Name? Version Number?  Browsers  support  different  features,  properties,  and  methods;  for  example,  Internet  Explorer  might  display  a  page  in  a  slightly  different  form  than  Firefox,  one  version  of  Mozilla  might  support  a  feature  not  supported  by  an  older  version,  a  version  of  Internet  Explorer  might  not  support  a  feature  supported  by  Opera,  and  so  on.  If  you  take  into  consideration  all  the  other  browsers  and  their  unique  features,  it  can  be  tricky  to  please  all  of  the  browsers  all  of the  time  or  even  some  of the  browsers  all  of the  time.  Browser  detection  allows  you  to  check  for  specific  browser  names,  versions,  whether  cookies  are  enabled,  what  types  of  plug- ins  are  loaded,  and  so  on.  The  navigator  object  contains  a  number  of  properties  that  allow you  to  detect information  about  the  user's  browser  so you  can  customize your W eb  page  in  a  way  that  is  transparent  to  the  user.   E X A M P LE    10.2        The  Navigator  Object        About  The  Browser          1  2  3   var  BrowserName=  navigator.appName;  var  BrowserVersion  =  navigator.appVersion;  var  BrowserAgent=  navigator.userAgent;  var  platform=navigator.platform;  document.write " The Browser's name  is:   "  +   BrowserName  +  " " ;   document.write " The Browser version  is:   "  +   BrowserVersion  +  " " ;   document.write " The Browser's  V'user agent\"  is:   "  +   document.write " The Browser's platform is:   "  +   BrowserAgent  +  " " ;  platform +  " " ;                  E X P L A N A T I ON   1  2  3   The  navigator  object's  appName  property  is  the  browser's  name.  The  navigator  object's  appVersion  property  is  the  version  of  the  browser.  The  user Agent  property  refers  to  the  HTTP  user-agent  header  sent  from  the  brows- er  to  server.    10.1   JavaScript a nd   the  Browser Object  Model   277   !  The  Navigator  Object  - Mozilla  Firefox  Tools  File   Bookmarks   History   View   Edit   Help   ^       Ct   4   ^   I  Q   file: l i f e:   wam^ www example 10.2. html   Q  The  Navigator  Object   About The  Browser   Hie Browser's  name is:  Netscape  Hie Browser version is:  5  0   Windows;  en-US   Hie Browser's  "user agent" is: Mozflla 5.0   Windows; U; Windows NT  5.1;  en-US; rv 1  9  1  2   Gecko 200907.  CLR  3.5.30729    Hie Browser's  platform is:  Win32   Figure  10.8  Browser properties  Example  10.2 .   complete JavaScript program  ready  to  copy  and  paste  into  your  editor.  Save  it  as  a  .js  file  and  then  include  it  in  your JavaScript  code  as  shown  in  Example  10.3.  The  script  creates  a  literal  JavaScript  object  called  BrowserDetect  and  defines  a  number  of  methods  to  detect  your  browser's  name,  version,  and  operating  system.  The  code  is  fully  explained  by  the  author.  At  this  point  in  your JavaScript  experience,  you  should  be  able  to  read  the  script  and  understand  the  explanations  provided.   To  display  the  results,  the  following  function  was  added  to  the  list  of  methods  pro-  vided  by  the  original  script:   printResults:  function  display  {   document.write " This  browser  is  "+BrowserDetect.browser ;   document.write   "  version  "+ BrowserDetect.version +  ". " ;  document.write "The  Operating System is  "+  BrowserDetect.OS  +   1     " . " ;   }   E X A M P LE    10.3          BrowserDetect.init  ;  BrowserDetect.printResults  ;   2  3       E X P L A N A T I ON   1   The source file is a .js file, downloaded from hitp:  www.quirksmode.org js detect.html.    278   Chapter  10       It's the BOM! Browser Objects   E X P L A N A T I ON      C O N T I N U E D    3   T he   printResults    m e t h o d,   s h o wn   here,  w as   added  to  this  script,  to  s h ow   the  val- ue  of  the  properties  set  for  the  n a me   of  the  browser,  its  version  n u m b e r,   and  the  operating  system.  O u t p ut   e x a m p l es   are  s h o wn   in   Figures  1 0 . 9,   1 0 . 10   and  1 0 . 1 1.   the  BrowserDetect  o b j e c t;    that   is,   Figure  10.9  The output from  Example  10.3 shown in Firefox.   2  Mozilla Firefox  File   View   Edit   History   Bookmarks   Tools   Help       ^   f i fr    [  LZ]   file:   C: wamp www browser_sniff<   J   Q   file:   C: wamp w...wser_snifTer.html   - 1-       This browser is Firefox version 3.5.  The Operating System is Windows.   ^ file:  localhost C: warnp www browser_sniffer.htm 1 - Opera  File   Bookmarks  Widgets   Tools   View   Help   Edit   [ ^l   JavaScript - Browser det,..  X   Èj  Navigator Object   X   G          m  m   ,  1  9  1  1  *  1  ,   ,  IB   file:  localhost C: ™;   Home   Index  Contents  Search  Glossary  Help  First  Previous  Next  L   This browser is  Opera version 9.S  The  Operating System is Windows.   Figure  10.10  The output from  Example  10.3 shown in Opera.   Ui-  C:\wamp\www\browser_sniffer.html - Windows Internet E:   ,         ffi  ç : \wamp\www\browser_sniffer. html   File   Edit   View   Favorites   Tools   Help   ^  Favorites   ;jgj c : \wamp\www\browser_snif f er. html   This browser is Explorer version 8.  The Operating System is Windows.   Figure  10.11  The output from  Example  10.3 shown in  Internet Explorer.    10.1   JavaScript a nd   the  Browser Object  Model   279   Shockwave  or  Flash  player,  Adobe  Acrobat  Reader,  and  RealNetworks  RealPlayer.  Plug- ins  can  be  platform  dependent  and  their  MIME  types  can  vary  as  well.  If you  are  using  Firefox,  go  to  the  Tools  menu  and  select Addons  to  get more  information  about  the  plug- ins  supported  on  your  client.  If using  Internet  Explorer,  you  will  find  the  plugins[]  array  is  empty.  You  can  manage  add-ons  by  going  to  the  Internet  Explorer  Tools  menu  and  clicking  Manage  Add-ons.   The  plugins[]  array  of  the  navigator  object   starting  with  Navigator  3   contains  a  com- plete  list  of installed  plug-ins  and  can  be  numerically indexed  to  see  all  plug-ins  installed  for  this  browser.  Each  element  of  the  plugins[]  array  represents  a  plugin  object.  The  prop- erties  of  the  plugin  object  are  shown  in  Table  10.2.  W h en   you  use  the  HTML     tag  in  a  document,  you  are  creating  a  plugin  object.  Each  instance  of  the     tag  cre- ates  another  object   see     and     tags  for  embedding  objects  on  page  281,  Example  10.5 .   Table  10.2   Properties  of  t he plugin  O b j e ct   Property   description   filename   length   name   What  It  Describes   A  description  of the  plug-in.   The  disk  file  name  of the  plug-in.   The  number  of  elements  in  the plugins []  array.   The  name  of the  plug-in.   E X A M P LE    10.4           No  plug-ins  for Windows  IE.  Firefox uses  this program.  var num_of_plugins  =  navigator.plugins.length;  for   var i=0;  i < num_of_plugins;  i++   {   var  number=i+l;  document.write " Plug-in No."  +  number  +  "-  "+navigator.plugins[i].name+"    [Location:  "  + navigator.plugins[i].filename +  "] " ;   }  alert "\nYou have  "  + number +  " plug-ins  installed!"    1  2   3   4       E X P L A N A T I ON   1   The  length  property  specifies  the  number  of  elements  in  the  plugins []  array.  If  us- ing  Internet  Exnlorer  for  Windows,  tben  vou  will  need  to  use  tbe  HTML       280   Chapter  10       It's  the  BOM!  Browser Objects   E X P L A N A T I ON     CONTINUED    3  4   T he   plug-in  is  listed  by  name.  T he   file  name  of  the  plug-in  is  displayed.  T he   alert  lets  you  k n ow   h ow   many  plug-ins  are  installed   see  Figure  10.12 .   1  Mozilla Firefox  File   View   Edit   History   Bookmarks   Tools   Help   T   C   X   t l lï    LZ    file:   C: wamp www exercise 10plugins.html   :    t  -...   Q  file:  ...d.html   Q  file :  ...3. html   g   External  JS  ...   Q  file:  ...st.html   Q  file:  ...st.h   Plug-in No. 5-  QuickTime  P  [Lo c ation: np qtplugin7. dll]   [JavaScript  Application]   Plug-in No. 1-  Mozilla Default Plug-in  [Lo c ation: npnul3 2. dll]   Plug-in No. 2-  downloadUpdater  [Location:  npdnu.dll]   Plug-in No. 3-  downloadUpdater2  [Lo c ation: np dnup dater2. dll]   Plug-in No.4-  Adobe  Acrobat  [Lo c ation: npp df3 2. dll]   Plug-in No. 6-  QuickTime  P  [Lo c ation: np qtplugin6. dll]   Plug-in No.7-  QuickTime  Pie  [Lo c ation: np qtplugin5. dll]   Plug-in No. 8-  QuickTime  Plug-in  6.5.1  [Lo c ation: np qtplugin4. dll]   Plug-in No. 9-  QuickTime  Plug-in  6.5.1  [Lo c ation: np qtplugin3. dll]   Plug-in No. 10-  QuickTime  Plug-in  6.5.1  [Lo c ation: np qtplugin2. dll]   Plug-in No. 11-  QuickTime  Plug-in  6.5.1  [Location:  npqtplugin.dll]   Plug-in No. 12-  Shockwave  Flash  [Location:  NPSTO32.dll]   Figure  10.12  A  list  of  plug-ins  for  Firefox.   W h r it     le   A    " t i \   D Y?    T n c t i > o rl    r ^f   n l n a - i nc    X   i i r - r r w r ^ ft    h oc   c r vm   ¿ » t V n n rT    r aW   o r]    A r t i \ T t >\   n r ^ n-   10.1   J a v a S c r i pt   a nd   t he   B r o w s er   O b j e ct   M o d el   2 81   p a g e.   O n l i ne   s p r e a d s h e e t s,   s e c u r i ty   u p d a t e s,   w o rd   p r o c e s s o r s,   p a t c h e s,   a nd   t i m e rs   a re  e x a m p l es   of   s u ch   c o m p o n e n t s.   T he   p l u g - i ns   we   d e s c r i be   h e re   a re   A c t i v eX   c o n t r o ls   a nd   c an  be   d o w n l o a d ed   f r om   v e n d or   s i t es   on   t he   I n t e r n e t.   Y ou   c an   a dd   A c t i v eX   c o n t r o ls   to   y o ur  W eb   p a g es   by   u s i ng   t he   s t a n d a rd   H T ML      t a g.   T he      t ag   t a k es   a  s et   of   p a r a m- e t e rs   t h at   s p e c i fy   w h i ch   d a ta   t he   c o n t r ol   s h o u ld   u se   a nd   d e f i n es   i ts   a p p e a r a n ce   a nd   b e h a v- i o r.   F or   d e t a i l s,   s ee   t he   A c t i ve   X  W eb   p a g e,   F i g u re   1 0 . 13    h t t p :     m s d n . m i c r o s o f t . c o m  .   ActiveX  Controls  Overviews  and Tutorials  - Mozilla  Firefox   I  File   Edit   ^ ^^        View  C?   Bookmarks  tili   History   Tools   Help   t*   http:  msdn.microsoft.com en-us library aa751969 VS.85 .aspx   £ - m   1  Q  Plugin  Detecti...   Q  Plugin  Detecti...   Q  Plugin  Detecti...    Q  Plugin  Detecti...   Q  Plugin  Detecti...     Plugin  Detecti.. .   Q  Plugin  Detecti.. .   Q  Plugin  Det<   Home  ^Library   Learn   Downloads   Support   Community   Forums   ActiveX  Controls  Overviews  and  Tutorials  This  section  contains  overview  and  tutorial  articles  for  Microsoft  ActiveX  contro   Overviews Tutorials   About  A c t i v eX   C o n t r o ls   This  section  introduces  ActiveX  Controls  and  provides  general  guidelines  f  developers.  It  includes  information  about  run-time  licensing  for  an  ActiveX  identifying  an  ActiveX  control  as  safe  for  scripting  or  safe  for  code  downli  ActiveX  control  in  a  .cab  file,  and  applying  a  test  certificate  to  an  Active!   About  C o n t r ol   I n s t a n t i a t i on   How  does  a  container  bring  control  class  code   binary  executable  code   ir  instantiate  a  control  of  that  class?   MSDN  Library  Web  Development  Internet  Explorer  Development  Content  Extensions  ActiveX  Controls   ActiveX  Controls  O v e r v i e ws   ond  Tutorials  About  ActiveX  Controls  About  Control  Instantiation  About  Cooperative  and  Asynchronous  About  Internet  COM  Object  Requireme  About  IObject  Safety  Extensions  for  Ir  Added  Standard  Properties,  Methods,  Building  ActiveX  Controls  for  Internet  Communicating  Control  Readiness   Figure  10.13  ActiveX Web page.   E X A M P LE       10.5            F l a sh   swf  f i le   As   O b j e c t    < o b j e ct   w i d t h = " 2 5 0"   h e i g h t = " 1 0 0"  c l a s s i d = " c l s i d : d 2 7 c d b 6 e - a e 6 d - l l c f -9   6 b 8 - 4 4 4 5 5 3 5 4 0 0 0 0"  c o d e b a s e = " h t t p :     f p d o w n l o a d . m a c r o m e d i a . c o m   p u b    S h o c k w a v e   c a b s   f l a s h   s w f l a s h . c a b  v e r s i o n = 8 , 0 , 0 , 0"    >                1   2  3   4  5  6    282   Chapter 10     It's  the  BOM!  Browser  Objects   1   2   3   4   5   6   T he   H T ML      tag  allows  you  to  embed  an  Active  X  control  directly  with  the  H T ML   file.  T he   classid  attribute  uniquely  identifies  the  Active  X  control.  This  is  the  unique  ID  for  Shockwave  Flash.  T he   codebase  specifies  the  version  number  of  the  Active  X  control,  in  this  exam- ple,  Shockwave  Flash  is  version  8.   This  line  was  broken  to  fit  the  page.  If  you  copy  this  file,  put  the  codebase  value  on  one  line.   T he   param  attribute  has  the  name value  pair  to  identify  the  source  for  the  .swf   pronounced  "swiff"  or  "swoof" ,  the  Flash  file  that will  be  displayed  on  the  page.  T he   file  is  an  animation  with  audio.  T he      tag  gives  the  location  of  a  data  file  that  the  plug-in  should  handle.  It  is  included  here  for  Mozilla  type  browsers  because  the     tag  is  only  recog- nized  by  Internet  Explorer.  T he   ActiveX  control  is  closed  with  the     tag.   See  components activex activex_ovw_entry.asp  10.14.   http:  msdn.microsoft.com library default.asp?url= workshop    on  ActiveX.    tutorial   Figure   See   for   a   «8»  File   Edit   View   Favorites   Tools   Help   Flash  swf file As  Object   Figure  10.14   E m b e d d ed   Flash  file  a nd   t he    t a g.   What Are  MIME Types?  M I ME   stands  for  Multipurpose  Internet  mail  extensions.2  It  is  a  standard  format  for  sending  mail  messages  across  the  Internet.  Now  it  is  used  to    10.1   JavaScript a nd   the  Browser Object  Model   283    see  Table  10.3 .  These  objects  are  predefined JavaScript  objects  that  allow you  to  access  the  mimeTypes  []  array,  a  property  of  both  the  navigator  object  and  the  plugin  object.   Note:  The  mimeTypes  []  array  will  not  produce  output  in  IE.   audio x-pn-realaudio-plug- in  is  an  example  of  a  MIME  type  for  RealPlayer  G2  LiveConnect-Enabled  Plug-In.   Table  10.3   Properties  of  t he mimeType  O b j e ct   Property   description   enabledPlugin   suffixes   What  It  Describes   A  description  of the  MIME  type.   A  reference  to  the plugin  object  for  this MIME  type  .   A  string  of file name  extensions allowed for  this MIME  type;  e-g > jPeg> jPg> jPe> jfif> PjPeg> PjP object;  e.g.,   navigator.plugins["Shockwave"].length.   type   The  name  of the  MIME  type;  e.g.,  image jpeg.   E X A M P LE    10.6        Mime  Detection        Mime  Types--Firefox          for    var i=0;i < navigator.mimeTypes.length;  i++ {  if navigator.mimeTypes[i].enabledPlugin  !=  null ;   document .write   " " +  navigator.mimeTypes[i].type+" " ;   document.write " "+   document.write " Description:  "+  " "+   "Enabled Plugin Name:   "+  document.write " "+  navigator.mimeTypes[i].enabledPlugin.name+" " ;  navigator.mimeTypes[i].description+  "  Suffixes :  "+ " " +  navigator.mimeTypes[i].suffixes+" " ;   1   2   3   4   5   }   }                284   Chapter  10       It's the  BOM!  Browser Objects   E X P L A N A T I ON   l  2   3  4   5   If  the  MIME  type  for  a  plug-in  is  not  null,  the  information  about  it  is  printed.  This  is  the  MIME  type  of  the  plug-in,  such  as  applicatwn x-mplayer2  or  applica- tion x-shockwave-flash.  This  is  the  enabled  plug-in  referred  to  by  this  MIME  type.  The  MIME  type  is  described,  such  as  Acrobat   *.pdf   or  Network  Interface  Plugin   *.nip .  The  suffixes  are  the  file  name  extensions  that  this  MIME  type  supports,  such  as  .rpm,  .wav,  .pdf,  and  so  on.  Partial  output  is  shown  in  Figure  10.15.   Mime  Detection  -  Mozilla  Firefox  File  Edit  View  History  Bookmarks   Tools  Help   *   C   ^   0   file:    C:  wamp www e>   Q  Mouse Buttons   Q  Mime  Det<   Mime  Types  Firefox   applica tio tn x-vend. a oL  liiup d. 1  Enabled  Plugin  Name:  Description:  ocp  Suffixes:  ocp   downloadUpdater   applica tio til x-vend, a ol. dimp da terl.1  Enabled  Plugin  Name:  Description:  ocp  Suffixes:  ocp   downloadUpdaterl   applica tion p df  Enabled  Plugin  Name:  Adobe  Acrobat  Description:  Acrobat  Portable  Document  Format  Suffixes:  pdf   applica tion vnd. a dob e.p dfxml  Enabled  Plugin  Name:  Adobe  Acrobat  Description:  Adobe  PDF  Suffixes   in  XML  Format   ipdjxml   applica tion vnd. a dob e.x-inais  Enabled  Plugin  Name:  Adobe  Acrobat  Description:  Adobe  PDF  Suffixes:  mars   in  XML  Format   applica tion vnd.f df  Enabled  Plugin  Name:  Adobe  Acrobat  Description:  Acrobat  Forms  Data  Format  Suffixes  :fdf    10.1   JavaScript a nd   the  Browser Object  Model   285   10.1.2  Working with the window Object   The  window  object  is  where  all  the  action  happens  in  a  browser.  It's  at  the  top  of the Java- Script  hierarchy,  and  is  automatically  defined  for  each  window  that  you  open,  as  repre- sented  in  Figure  10.12.  W h en   you  start  up  your  browser,  you  may  stay  in  the  current  window  until  you  exit  the  browser,  or  you  may  have  any  number  of  windows  open  at  the  same  time.  Within  each  window  you  browse  the  Internet,  read  e-mail,  search  for  cheap  airline  tickets,  and  buy  a  new  book.  Each  new  page  you  bring  up  is  a  document  within  the  current  window.  The  window  is  often  partitioned  into  independent  display  areas,  called  frames,  which  are  windows  within  windows.   Frames  are  discussed  in  the  section  "Working  with  Frames"  on  page  3 0 3 .    The  window  object  comes  with  a  number  of properties  and  methods.  Because  it  is  the  basis  of  all  objects,  the  name  of  the  window  object  can  be  excluded  when  applying  meth- ods  to  it;  for  example,  it  is  not  necessary  to  specify  window, alert  "Watch  out!"   or  win- dow.  document.  write "OK" .  You  simply  use  alert "Watch  out!"   or  document,  write   "OK" .  W h en   a  user  clicks  a  button  or  rolls  the  mouse  over  a  link,  an  event  occurs  that  often  affects  the  behavior  of a window.  Such  user-initiated  events  are  discussed  in  Chapter  13,  "Handling  Events."   Object's  Properties and  Methods.  The  window  object has  a  number  of properties,  which  are  also  objects  in  their  own  right.  Table  10.4  lists  those  properties  and  how  they  describe  the  attributes  of  the  window.   Table  10.4  Properties of the window Object   What  It  Describes   True  if the window  is  closed.   Property   closed   defaultStatus   document   frames   history   length   location   name   The default status message displayed in the status bar at the bottom  of the  window.   The  document  object  that is  currently displayed in  the window.   An array  of frame  objects within  the  window.   The  history  object  containing  the  URLs  last  loaded  into  the  window.   The  number  of frames  within  the window.   The  URL  of the  current window.   The  name  of the window.    286   Chapter  10       It's the BOM! Browser Objects   Table  10.4  Properties of the window Object  continued    Property   What  It  Describes   opener   parent   screen   self   status   top   window   The window  that  opened  the  current window.   Indicates  a  window  that  contains  another window   used with  frames .   Displays  information about  the  screen,  such  as  height,  width   in  pixels .   Refers to the current window.  For all windows, the self and window  properties  of a window  object are synonyms  for  the  current  window,  and you  can  optionally use  them  to  refer  to  the  current  window.   Specifies a  temporary message in  the status bar,  resulting user  interaction.   The  topmost window  containing a  particular window   used with  frames .   Identifies  the  current window being referenced,  synonymous with  self.   The  window  object  also  has  a  number  of  methods  that  define  its  behavior,  listed  in   Table  10.5,  such  as  how  to  open,  close,  scroll,  and  clear  a  window.   Table  10.5  Methods of the window Object   Method   alert   text    blur     close     confirm       focus       clearlnterval    interval    clearTimeOut    timer    What It Does   Creates a  triangular dialog box with a message in it.   Removes  focus  from  the  window.   Clears a  previously set interval  timer.   Clears a  previously set  timeout.   Closes a window.   Creates a  dialog box  for user  confirmation.   Gives  the  focus  to  a window.    10.1   JavaScript a nd  the Browser Object Model   287   Table  10.5  Methods  of the window Object   continued    Method   scrollix,  y    setlnterval expression,   milliseconds    setlnterval function,  milliseconds,   [arguments]    setTimeout expression,   milliseconds    setTimeout function,  milliseconds,   [argummts]    What It Does   Scrolls  to  a  pixel position in a window.   After a  specified interval,  evaluates an  expression   see  Examples  10.10  and  10.12 .   After a  specified interval,  evaluates a  function   see  Examples  10.10  and  10.12 .   After a  timeout period has  elapsed,  evaluates an  expression   see  Examples  10.10,  10.11,  and  10.13 .   After a  timeout period has  elapsed,  evaluates a  function   see  Examples  10.10,  10.11,  and  10.13 .   Opening and Closing Windows.  You  can  open  a new browser window by going to  the  File  menu  and  selecting  New  Window   Netscape  and  Internet  Explorer ,  or  you  can  open  a  new  window  from  a JavaScript  program  with  the  window's  open  method.  These  little  windows  are  commonly  called  popups.  W h en   creating  these  windows,  keep  in  mind  that  all  major  W eb   browsers  now  offer  popup  advertising  filters,  and  your  viewer  might  not  even  see  the  popup.   F O R M AT   E X A M P LE   var window_object =  window.open "url",  windowname,  [options] ;   var winObj=  window,  "winter","width=  location=yes" ;   open "http:  localhost windows winter.jpg",  =1150,height=350,resizable=yes,scrollbars=yes,   E X A M P LE   10.7        Opening  a  New Window        function  newWindow  {  }   var winObj=open "winter.jpg",  "winter" ;   1  2    288   Chapter  10       It's the  BOM!  Browser Objects   E X A M P LE    1 0 .7     CONTINUED     Click here  to  see  through my winter window               E X P L A N A T I ON   3   1  2   The  JavaScript  function  newWindow  is  defined.  The  open  method  is  called  and  returns  a  window  object  that  is  assigned  to  the  vari- able,  winObj.  The  first  argument  to  the  open  method  is  the  URL  of  the  new  win- dow;  in  this  case  the  document  is  an  image  file  called  winter.jpg  located  in  the  cur- rent  directory.  The  name  to  be  associated  with  this  window  is  winter.   3  W h en   the  user  clicks  on  the  line  Winter  Scene,  the  JavaScript  user-defined  func- tion,  newWindow,  is  called   see  Figure  10.16 .  This  function  is  responsible  for  opening  the  new  window.  Instead  of  a  URL,  the  HTML     tag  is  assigned  name  of  a  JavaScript  function.  The  JavaScript:  label  allows  the  function  to  be  called  when  the  user  clicks  the  link.  Without  the JavaScript:  label,  the  browser  will  try  to  find  a  URL  address  called  newWindow    and  fail.   Opening a New Window  -  Mozilla  Firefox   File   Edit   History   Bookmarks   Tools   Help   View   -  c   faV   lZ]    file :   C: Documents and Settings    Û   *\    l a-   Google   P    ¿J  Most  Visited   Getting  Started   Latest  Headlines   EzEdit—5F  reports   j  SF-EzEdit—Import   Opening  a  hew  Window   Winter  Scene from  the  Old  Country   Click here  to  see  through my winter window  IWinter  Sc ene   C  winter.jpg  JPEG  Image,  829x244  pixels   - Scaled   76%   - Mozilla  Firefox  File   Bookmarks   History   Tools   View   Help   Edit   C  X   Ü   file:    C:  Documents  and  Settings    Û   'I    I «'    Google   ~ p\   l il   Most  Visited   [2  Getting  Started   Latest  Headlines   EzEdit—SF  reports  J  SF-EzEdit—Import   -   w i n t e r . i pg    JPEG  I m a g e,   8 2 9 h 2 44   piK...    10.1   JavaScript a nd   the  Browser Object  Model   289   The  window  object's  open    method  has  a  number  of  options  listed  in  Table  10.6  that   allow  you  to  further  customize  the  new  window.   Table  10.6   fhe open    Method  and  Its  Options   Values   Yes no  or  1 0   Integer  value   Yes no  or  1 0   Yes no  or  1 0   Yes no  or  1 0   Yes no  or  1 0   Yes no  or  1 0   Yes no  or  1 0   Integer  value   Gives  the  Window   Directory  buttons   Height  in  pixels   A  location box   A  menu  bar   The  ability  to  be  resized   Scrollbars  along  the  side   A  status bar   A  toolbar   Width  in  pixels   E X A M P LE    10.8        Opening  a  New Window with  Parameters   and Closing  It        function  newWindow  {   winObj=window.open "http:  localhost windows winter.jpg",   "winter","width=1150,height=350,resizable=yes,  scrollbars=yes,location=yes" ;   winObj.focus  ;    winObj.blur   ;   }  function  closeWindow  {   winObj.close  ;   }               Winter  Scene  from the  Old Country    Click  the  link to  see my winter window    Option   directories   height   location   menubar   resizable   scrollbars   status   toolbar   width   1  2   3  4   5  6    290   Chapter  10       It's the  BOM!  Browser Objects   E X P L A N A T I ON   1  2   3   4   5  6   7   is  defined.   The  function  newWindow    The  open    method  is  passed  the  URL  of  the J P EG   image  file  that  will  be  displayed  in  the  new  window  called  winter.  The  width  and  height  of  the  new  window  are  1150  and  3 50   pixels,  respectively.  The  window  is  resizable  and  has  scrollbars.  A  location  box  appears  in  the  top  of  the  new  window.  The  name  of  the  window  ob- ject  created  by  the  open  method  is  winObj.  It  is  important  that you  do  not  use  any  spaces  or  linebreaks  between  the  commas  in  the  list  of  parameters.  The focus     method  brings  the  new  window  into  focus:  It  appears  in  front  of  the  parent  window  or  any  other  windows.  The  blur    method   commented  out   would  push  the  window  behind  any  other  windows  that  are  open.  The  user-defined  function,  closeWindowQ,  is  defined.  The  reference  to  the  window  object,  winObj,  will  call  the  dose    method  to  close  the  new  window  that  was  opened.  The  newWindow  function  is  called  when  the  user  clicks  the  link  Winter  Scene.  The  label, JavaScript:,  prevents  the  link  from  trying  to  activate  a  URL,  and  instead  goes  to  the  JavaScript  program  and  calls  the  function  closeWindow  .  See  Figure  10.17.   8  W h en   the  user  clicks  this  link,  the  new  window  will  be  closed.  The  original  or  parent  window  will  remain  in  the  browser.  If  the  name  of  the  new  window  object  is  not  provided,  the  closeQ  method  will  try  to  close  the  parent  window.   ^Back  -  "i  Address   C:\3orrfe^0Woc5^hdawslcpcni«'fi3.htrnl   jj  UJ  uH  ^search   _±JFav»itES   .^Hstay   ^   Winter  Scene from  the  Old  Country   C l i ck   f l it   link  to   se-e  my    «inter  w i n d ow  W i n t er   S c e ne   W h en   y ou   a re   ready  to   d o se   t he   window,  d i ck   h e re  C l o se   the  w i n d ow   3http; lor.-»lhb'window? winte r, j p g - Microsoft Internet Exp'™« provided hy America Online  Add™ [ j i]  http: fftocah KlyWridatfJv -iter-,   3   3    10.1   JavaScript a nd   the  Browser Object  Model   291   Moving and Resizing a Window.  JavaScript  provides  several  methods  with  which  to  resize  and  move  a  window  object.  The  window  can  be  moved  or  resized  absolutely,  or  relative  to  its  current  position  or  size.  The  numbers,  given  as  arguments,  are  the  pixel  coordinates,  and  are  listed  in  Table  10.7.   Table  10.7  Move and  Resize Methods   Method   moveByO   moveTo       resizcByO   resizeTo       Example   What It Does   moveBy    20,20    Moves  the window  relatively by  20  pixels.   moveTo   0,0    resizeBy 15,10    resizeTo    450,350    Moves  to  the  top,  left  corner  of the screen.   Resizes the window relatively by  15  x  10 pixels.   Resizes  the window  absolutely  to  450  x  350  pixels.   E X A M P LE    10.9        Move  a  New Window        function  directions  {   "width=2 00,height=300,resizable=no" ;   winObj=window.open "myplace.html","myplace",  winObj.moveTo 0,  0 ;      Move  window  to  top  left  corner  winObj.focus  ;  parent.window.moveTo 215,  0 ;      Move  the parent  window  parent.window.resizeTo 400,400 ;      Resize  browser  window   1  2  3  4  5   6   }  function  closeWindow  {   winObj.close  ;   }               We've  moved!   For directions  to our new place,     click  the  button      <input  type="button"   value="Simple  Directions"    292   Chapter  10       It's the BOM! Browser Objects   E X P L A N A T I ON   1   2   3   4   5  6   7   A  n ew   window  o b j e ct   is  created.  If  the  resizable  option  is  turned  off,  the  user  will  n ot   be  able  to  m a x i m i ze   the  w i n d o w.  A  m a x i m i z ed   w i n d ow   c a n n ot   be  m o v ed   with  the  moveToQ  m e t h o d.  T he   moveToQ  m e t h od   determines  the  position  w h e re   the  w i n d ow   will  be  moved.  T he   a r g u m e n ts   0 ,0   represent  the  x,y  coordinates    c o l u m n , r o w    in  pixels.  T he   n ew   w i n d ow   will  be  p ut   into  focus,  m e a n i ng   it  will  be  at  the  top  of  the  w i n- d ow   hierarchy,  in  front  of  all  the  other  w i n d o w s.  T he   parent  w i n d ow   is  the  original  w i n d ow   we  started  in.  It  is  m o v ed   to  coordi- nates  2 15   x  0  pixels.  T he   parent   original   w i n d ow   is  resized  to  4 00   x  4 00   pixels.  T h is   is  the  start  of  a  simple  H T ML   form.  It  creates  a  simple  input  device  called  a  b u t t on   on  the  screen.  T h is   is  the  onClick  event  handler.  W h en   the  user  presses  the  b u t t o n,   the  event  is  triggered  and  a  f u n c t i on   called  directions  ,  will  be  called.  T he   n ew   w i n d ow   is  m o v ed   to  the  top  left  corner  and  put  into  focus.  See  Figure  1 0 . 1 8.   Directions   Follow your  nose  to  the  end  of the  road  Go  south,  take  10  baby  steps,  do  a twirl, look up  at the  sky,  count to  100,  shut  your  eyes  and  back  up 20  paces.  You're  there!   J : J xj   '3  Move  a  New  Window  -  Microsoft  Internet  Expl   File  Edit  View   Favorites  Toots  Help   - 1 * 1 *1   Sf   Q ß a ck    -  Ç     -   g]    g     P  Search   Address   i.Nnil   3  Go   Links   We've  moved!   For directions to  our new place,  click the button   Simple Directions   "When  y ou   are  r e a dy   to  close  the  w i n d o w,   click  here  C l o se   the  w i n d ow   £   t  My  Computet   Figure  10.18  After moving,  focusing,  and  resizing  both  the  new window and  the  parent window:  Output from  Example  10.9.    10.1  JavaScript and the Browser Object Model   293   setTimeoutO  and  setlnterval     see  Table  10.8 .  The  setTimeoutO  method  evaluates  an  expression  after  a  specified  amount  of  time  and  quits.  The  setlnterval    method  automat- ically  reschedules  the  execution  of  an  expression  at  set  intervals,  continuing  to  repeat  until  the  program  ends  or  the  setlnterval  is  cancelled.   Table  10.8   limers   Timing Methods   What They Do   setTimeoutO   setlnterval 0   Invokes a  function or evaluates an expression or a  function when the  number  of milliseconds  has  passed.   Invokes a  function or evaluates an  expression  or a  function at set  intervals  in  milliseconds.   Both  methods  have  the  same  syntax,  two  arguments:  a  quoted  expression  or  function  reference,  and  the  time  in  milliseconds  to  delay  execution  of the  expression.   A  minute  contains  6 0 , 0 00   milliseconds,  so  30  seconds  would  be  3 0 , 0 00   milliseconds.   Because  JavaScript  sees  time  in  terms  of  milliseconds,  Table  10.9  gives  you  a  little  conversion  table  to  help  determine  the  time  in  milliseconds.   Table  10.9  Basic  Units of lime   Unit of Time   Milliseconds   1,000   1  second   1  minute   1  hour   1 day   1 week   second  *  60    1,000  *  60    minute  *  60    1,000  *  60  *  60    hour  *  24    1,000  *  60  *  60  *  24    day  *  7    1,000  *  60  *  60  *  2 4 * 7    If  a  function  contains  a  setTimeoutO  or  setlntervalQ  method  that  in  short  intervals  keeps  invoking  the  function,  the  result  can  give  the  effect  of  continuous  motion  such  as  a  scrolling  panorama  or  message,  or  even  animation.3  Often,  timers  are  used  to  scroll  messages  in  the  title  or  status  bars  or  in  containers  within  a  window  such  as  a  div  or  textbox.  You  must  decide  what  is  tasteful  on  your  W eb   page  and  what  is  annoying,  but  that  aside,  we  use  setTimeoutO  and  clearTimeoutQ  methods  for  scheduling  something  to  happen  in  the  future  For  a  detailed  explanation  of how JavaScript  internally  handles  the    294   Chapter  10       It's the  BOM!  Browser Objects   The  setTimeoutO  and  setlnterval    methods  are  methods  of  the  window  object.  They   take  two  parameters:   1.  The  statements  to  execute:  expressions  in  quotes  or  function  references.  2.  The  time  in  milliseconds  to  wait  before  the  statements  are  executed.   W h i ch   of  the  two  timer  functions  should  you  use?  It  depends  on  what  you  are  trying  to  do.  If  the  function  being  called  needs  different  parameters  on  each  call  or  the  content  of  the  function  itself  decides  whether  or  not  to  call  itself  again,  then  you  would  use  set- TimeoutO  but  if  the  function  just  needs  to  be  called  at  regular  intervals,  then  the  setlnt- ervalO  function  would  produce  simpler  and  faster  results.   You  can  cancel  a  timeout  or   interval  by  calling  the  clearTimeoutO  or  clearlntervalO   method  by  passing  it  a  reference  to  the  return  value  of  setTimeoutO  or  setlntervalQ    var timeout  =  setTimeout "expression",  delaytime ;  var  timeout=  setlnterval "expression",  intervaltime ;   F O R M AT   E X A M P LE   var timeout  =  setTimeout "timer  ",  15000 ;      In  15  seconds  call  the   var  timeout  =  setTimeout timer,15000 ;  II Use  function  reference  var timerld =  setlnterval "scroller  ",  500 ;      Every  .5  seconds  II  call  "scroller  "    Use  function  reference   var  timerld  =  setlnterval scroller,  500 ;       function  "timerO"   To  clear  the  timed  event  use  the  clearTimeoutO  or  clearlntervalO  methods:  clearTimeout timeout ;  clearlnterval timerlD ;   E X A M P LE    10.10       The  setTimeout  method       function  changeStatusBar  {   window.status  =  "See me now before  I disappear!";  timeout  =setTimeout "window.status=11",  6000 ;      alert timeout ;   This  value  differs  in  Mozilla  and  IE   1  2  3   }            10.1   JavaScript and  the  Browser Object  Model   295   E X A M P LE    10.10     C O N T I N U E D    4   5   6            Watch the status bar         <input  type="button"  value="click here"  onClick="changeStatusBar  ;">                     E X P L A N A T I ON   l  A JavaScript  function,  called  changeStatusBarQ,  is  defined.  Its  purpose  is  to  print   a  message  in  the  status  bar  of the  window  for  six  seconds.   3   2  A string value is  assigned  to  the status  property of the window.  The string  "5ee  me  now  before  I  disappear!"  will  appear  in  the  status  bar  at  the  bottom  of  the  window.  The  setTimeoutO  method  is  a  window  method.  After  six  seconds,  the  status  bar  will  be  set  to  an  empty  string.  Once  the  setTimeoutO  completes,  it  doesn't  auto- matically  start  up  again  as  setlntervalQ  does.  This  is  an  image  of a  clock  that  displays  on  the  screen, just  for  decoration.   4  5  An  HTML  form  starts  here.  The  user  will  see  a  button,  with  the  text  "click   here,"   on  the  button.   6  When  the  user  presses  the  button,  the  onClick  event  handler  is  triggered,  causing   the  function  changeStatusBarQ  to  be  invoked.  See  Figure  10.19.   Hie timeout is  set for 6  seconds.   Watch the  status  bar  cjick here j    296   Chapter  10       It's the BOM!  Browser Objects   Some  might  find  meddling with  the  status  bar  annoying.  In  fact, JavaScript  could  be  enabled,  but  the  ability  to  change  the  status  bar  might  have  been  disabled.  For  Firefox,  take  the  following  steps  to  enable  or  disable  the  window's  features   see  Figure  10.20 :   1.  Click Tools —> Options.  2.  When  the  Options  dialog  box  appears,  click  Content.  3.  Check  Enable JavaScript  if it  is  not  already  checked,  and  then  click Advanced.  4.  The  Advanced JavaScript  Settings  dialog  box  appears.  From  here,  you  can   enable  or  disable  features  as  desired.   5.  When  done,  click  OK  in  the  dialog boxes  to  close  them.   Options   o & m  s  p â  $   Applications   Privacy   Advanced   Security   Content   Tabs   Main   X   H  Block pop-up windows   Exceptions..   0  Load  images  Advanced JavaScript Settings    X   [Exceptions...  ]   0  Enable  Java   0  Enable  Java   Fonts & Colors  Fonts & Colors   Default font:   t   Languages  Languages   Choose your pre  Choose your pre   Allow scripts to:  0  Move  or  resize  existing  windows  1  1 Raise or lower windows  0  Disable  or  replace  context  menus  0  Disable  or  replace  context  menus  1  1 Hide the status bar  1  1 Change status bar text   OK   1     Cancel      [   Help   i Advanced...  J   Advanced...   [  Colors...  1   I  Choose...  1   Figure  10.20  Enable Disable window and status bar options with  Firefox.   OK   I   I  Cancel   Help   In  the  next  example,  a  timer  is  used  to  create  a  scrolling  message  in  both  the  title  and  status  bars  of the  window.  This  is  done  by  calling  a  function  every  .3  seconds  that  will  use JavaScript's  substring  function  to  change  the  value  in  a  string  of  text.  Removing  the  first  character  of  a  string  and  then  appending  that  value  to  the  end  of  the  same  string,  all  done  repeatedly in  rapid  succession,  gives  the  appearance  of the  text in  motion.  This  example  will  be  expanded  in  Chapter  15  to  put  the  scrolling  message  in  a     con- tainer  within  the  document.    10.1   JavaScript and  the  Browser Object  Model   297   E X A M P LE    10.11       <!--  This script is a modification of a free script found at   the JavaScript source.  Author:  Asif Nasir   Asifnasir@yahoo.com    -  ->       1  2  3  4  5  6  7  8  9  10  11       Number of milliseconds      var today = new Date  ;  var year=today.getFullYear  ;  var future = new Date "December 25,  "  + year ;  var diff = future.getTime    - today.getTime  ;  var days =Math.floor diff     1000 * 60 * 60 * 24    ;  var str=  "Only " + days + "  shopping days left until Christmas!";  function  scroller  {  str = str.substring l,  str.length   + str.substring 0,1 ;  document.title=str;  window.status=str;  setTimeout scroller,  300 ;      Set the timer      Convert to days   }           12            Get Dizzy. Watch the title bar and the status bar!!                    E X P L A N A T I ON   The  Date    constructor  creates  an  instance  of  a  new  Date  object,  called  today.  The  getFullYear    method  returns  the  current  year  in  four  digits.   1  2  3  Another  Date  object  is  created  with  the  date  "December 25,  2010"  assigned  to  the   4   variable,  called future,  assuming  the  current  year  is  2010.  The  difference  in milliseconds between  the  future  time  and  the  current time  is  as- signed  to  the  variable  called  diff.  „ —   „„A tU„   —A-  „f   A„A A„„*„   1t   „A   s  TU„    298   Chapter  10       It's the BOM!  Browser Objects   E X P L A N A T I ON      C O N T I N U E D    7  A  function  called  scrollerQ  is  defined.  8   This  looks  kind  of  tricky,  but  here's  what's  happening.  The  substrQ  method  ex- tracts  everything  between  the  first  character  and  the  rest  of  the  string  substr l,  str.length ,  resulting  in  "rily  19  shopping  days  left  until  Christmas!".  Next,  another  subtsr 0,l   method  extracts  the  first  character  from  the  string,  the  "O".  The  "O"  is  added  onto  the  end  of  the  new  string,  resulting  in  "nly  19  shopping  days  left  until  ChristmasiO"  and  after  .3  seconds  the  scroll    function  will  be  called  again.  Then  the  string  will  become  "ly  19  shopping  days  left  until  Christmas!On",  and  then  "19  shopping  days  left  until  Christmas!Onl"  and  so  on.  Because  the  substrQ  method  is  being  called  so  rapidly,  the  effect  is  a  scrolling  banner.  The  new  string,  str,  created  by  the  two  substrQ  methods  will  appear  in  the  docu- ment's  title  bar.  Every  time  the  function  is  called   i.e.,  every  .3  seconds ,  the  new  string will  appear,  giving  a  scrolling  effect.   9   10  The  new string will  also  appear  in  the  status  bar  of the  window.  11  The  timer  is  set  here  within  the  scrollerQ  function.  The  first  argument  is  a  refer- ence  to  a  function  that  will  be  called,  in  this  case,  scroller,  and  the  second  argu- ment  is  when  it  will  be  called,  in  this  case,  in  300  milliseconds  or  .3  seconds   300 1000 .  Because  the  scrollerQ  function  calls  itself within  the  timer,  it  is  recur- sive  and  will  continue  to  call  itself  every  .3  seconds  until  the  program  ends.  The  display is  shown  in  Figure  10.21.   E X A M P LE    10.12               var today = new Date  ;  var year=today.getFullYear  ;  var future = new Date "December 25,"+ year ;  var diff = future.getTime    - today.getTime  ;   var days =Math.floor diff     1000 * 60 * 60 * 24    ;      Number of milliseconds     Convert to days   var str=  function  startup  {   "Only " + days + "  shopping days left until Christmas!  ";  setInterval scroller,500 ;   }  function  scroller  {   str = str.substring 1,  str.length   + str.substring 0,1 ;   1  2  3    10.1   JavaScript and  the  Browser Object  Model   299   E X A M P LE    10.12     C O N T I N U E D    4           Get Dizzy.  Watch the title bar and the status bar!!                 E X P L A N A T I ON   l   This  is  the  same  program  as  Example  10.11  using  the  setlnterval     method  for  set- ting  a  timer.  The  function  called  startupO  contains  the  code  to  start  the  scrolling.  2  The  setlntervalO  method  is  a window  method  and  is  executed  and  calls  scroller    at  intervals  of 500 milliseconds   .5  seconds ,  and will  continue  to  do so  until  the win- dow  is  exited  or  the  clearlntervalO  method  is  called.  In  Example  10.11  we  used  set- TimeoutO  This  is  the  scroller   unction  that  creates  the  text  in  both  the  title  bar  and  the  sta- tus  bar.  It  is  executed  at  .5  second  intervals.   instead  of  setlnterval    .   3   4  When  the  page  has  finished  loading,  the  onLoad  event  handler  will  call  startupO    left  until  Christmas!  Only  19  shopping  days  -  Microsoft  Internet  Explorer   File  Edit  View   Favorites   Tools  Help   C: \sambar50\docs\ch10\timeout2. html   left  until  Christmas!  Only  19  shopping  days   -  Figure  10.21  continuously in the title bar and  in the status bar.  How annoying!   The  string  "On   19 shopping days left until Christmas!"  scrolls    300   Chapter  10       It's the BOM!  Browser Objects   to  produce  an  animated  effect.  For  example,  if you  have  a  large  image  that  is  too  big  to  view  in  the  new  window,  you  can  set  up  scrolling  so  that  you  start  at  the  left  side  of  the  image  and slowly move  to  a specified position  at the right side  and  then back again, giving  a panoramic  effect.  Scrolling might have  different behavior  on  different browsers.4   The  scrollToQ  method  takes  two  arguments,  the  horizontal  and  vertical  pixel  coordi- nates  to  represent  the  window position,  where  0,0  would  scroll  to  the  left  top  corner  of  the  window,  and  position  0,350 would  scroll  down  350  pixels  from  the  starting position  at  the  top  left  corner,  and  350,0  would  scroll  to  the  right  350  pixels  from  the  starting  position,  and  so  on.   F O R M AT  window_obj ect. .scrollTo horizontal_pixel_position,vertical_pixel_position ;   E X A M P LE  parent.window. .scrollTo  0,350 ;   E X A M P LE   10.13       1   2  3  4  5  6  7  8  9   10  11  12    Scrolling  through Autumn        winObj=window.open "fallscene.gif","mysscene",   ,,width=350,height=292,resizable=no"  ;    Create the new       window wi th an  I    image.   winObj.moveTo 0,  0 ;  winObj.focus  ;  var pixelpos=0;  var ImgWidth=1096;  var pixelstep = 2;  var timeout;  function  startScroll  {   if   pixelpos <=   ImgWidth - 350  {       Check that scrolling is still  within  the     boundaries of the window.  pixelpos += pixelstep;  winObj.scrollTo pixelpos,0 ;  timeout=setTimeout startScroll, 20  ;       Go  to  that position  II  in  the new window   }   }    10.1   JavaScript and  the  Browser Object  Model   301   pixelpos = 0;      Reset the horizontal pixel position to 0  startScroll  ;     Start scrolling again   clearTimeout timeout ;     Stop the clock to stop scrolling   E X A M P LE    13   14   15   16   17     C O N T I N U E D    10.13  function  scrollAgain  {   }  function  stopHere  {  }  function  closeWindow  {  }   winObj.close  ;                       A Window into an Autumn Day      <input  type="button"   <input  type="button"   value="Start  scrolling"  onClick="startScroll  ;">  value="Stop  scrolling"  onClick="stopHere  ;">  <input  type="button"  value="Start  over"  onCllck="scrollAgain  ;">          When you are ready to close the window,  click here    Close  the window       18           E X P L A N A T I ON   1  A  new  window  object  is  created.  It will  contain  a  .gif image  of a  fall  scene.  2   The  new  window  object  is  moved  up  to  the  top  left  corner  of  the  browser   coordi- nates  0,0 .  T he f o c u sO   method  puts  the  window  on  top  of all  other  opened  windows.  The  initial  pixel  position  that will  be  used  for  scrolling is  set  to  0.  The  variable  ImgWidth  is  assigned  1096,  which  will  be  used  to  represent  the  size   3  4  5    302   Chapter  10       It's the BOM!  Browser Objects   E X P L A N A T I ON      C O N T I N U E D    7  A  variable  called  timeout  is  declared.  It  will  hold  the  value  returned  from  the  set-  TimeoutO  method.   8  A  function  called  startScrollQ  is  defined.  It  will  start  the  image  scrolling  from  the  left  of the  screen  to  the  right.  If the  scrolling  is  stopped  before  it reaches  the  end,  this  function  will  start  scrolling where  it  left  off.  If the  value  of the  variable  pixelpos  is  less  than  the  width  of  the  window,  keep  go- ing.   9   10  Add  one  to  the  pixel  position.  11  The  scrollTo    method  takes  two  arguments,  the  horizontal  pixel  position  and  the  vertical  pixel  position.  With  vertical  pixel  position  of 0,  the  image will  move  hor- izontally  over  one  pixel  to  the  right.   12  Set  the  timeout  to  20  milliseconds:  scroll  the  image  to  the  right  50  times  per  min-  ute.   13  A  function  called  scrollAgainQ  is  defined.  14  Scrolling  starts  again.  15  Stops  the  scrolling  by  clearing  or  turning  off the  timer.  16  This  function  closes  the  window.  17  Three  buttons  will  be  displayed.  A  function  to  start,  stop,  or  restart  the  scrolling   18   will  be  called  depending  on  which  button  the  user  clicks.  If the  user  clicks  this  link,  the  window with  the  image  will  be  closed.  See  Figures  10.22  and  10.23.   iyi docs Vhi  O scroll.hhj   arch   Shop  Ö B ^ ^p   A Window into an Autumn Day  Start  over   Stop  scrolling   Start scrolling   W h en   y ou   are  r e a dy   to   close  t he   w i n d o w,   cfick  h e re   Close  til  e  w i h d bw   Figure  10.22   Ihe new window on the left has a scene that will scroll  by slowly;  it    10.1   JavaScript and  the  Browser Object  Model   303   Figure  10.23  This  is the  scene  that will  be scrolling  by in  the  small  window above.   10.1.4  Working with Frames   When you look out  the window in  the  room where you might be  at the moment,  it might  be  one  big pane  of glass  like  a  picture window,  or  the window  might  be  divided  up  into  panes  of squares  or  rectangles.   The  browser  is  a  virtual  window  that  can  be  divided  up  into  frames—independent  windows,  like  panes,  within  the  main window,  where  each  frame  is  used  to  display  dif- ferent  information.  Invented  by  Netscape,  frames  allow  you  to  display  more  than  one  Web  page  in  the  same  window.  Web  designers  have  debated  the  merit  of using  frames  because  they  are  often  misused  but  have  some  distinct  disadvantages  discussed  later  in  this  chapter.   The  file  that defines  the  layout of the  frames  is  called  the  parent window,  and  each  of  the  frames  it  describes  is  called  a  child   see  Figure  10.24 .  Although  you  can't  see  the  parent window,  it will  show up  in  the  browser's  source  for  the  page.   Parent  or  Top  Window   Child  Frame   Child  Frame   Child  Frame   Child  Frame   Figure  10.24   The  parent window  is divided  into  child  frames.    304   Chapter  10       It's the BOM!  Browser Objects   of the  frames.  The  rows  and  cols  attributes  of each  frameset  specify how  much  room  the  frame  will  need within  the window.  These  values  use  exact pixels  as  a  default,  although  you  can  also  use  percentages  to  represent  a  section  of  the  window,  or  an  asterisk  *  to  allocate  leftover  space.   These  size  values  will  be  shown  in  Examples  10.15  and  10.16.    Creating  HTML Frames.  In  Example  10.14  the  window is  divided  into  two  frames:  a  left  frame  that  takes  up  25  percent   in  columns   of the  window  and  a  right  frame  that  takes up  75  percent   in  columns   of the  rest of the window.  Because  files  are  required  to  accomplish  this,  the  main  file  defines  the  frameset,  the  second  file  contains  the  HTML  code  for  the  left  frame,  and  the  third  file  contains  the  HTML  code  for  the  right  frame.   Table  10.10  H1ML Frame lags   Tag       Attribute   What It Does   border   frameborder   rows   cols   name   src   Defines a  collection of frames or other framesets.   Sets frame border thickness   in pixels   between all the  frames.   Draws 3D separators between frames in a  frameset. A  value of 1  or yes turns frame borders on; a value of 0 or no  turns them off.   Defines the number and size of rows in a  frameset.   Defines the number and size of columns in a frameset.   Used by JavaScript to reference the frame by name.   The URL  or location of the frame.       Defines attributes  of specific  frames.   E X A M P LE    10.14        Frame Me!                          1  2  3  4    10.1   JavaScript and the Browser Object Model   305   E X A M P LE    10.14     C O N T I N U E D         Left  Frame              Just to show you that this is the left frame   5   6                                  Right  Frame            7  8   Just to show you that this is the right frame   E X P L A N A T I ON   1   This  is  the  parent  file  that  defines  how  the  window  will  be  divided  into  frames.  The  first  frame  will  take  up  25  percent  of  the  page  in  columns  and  the  second  frame  will  take  up  the  rest  of the  page,  75  percent.   2   3   4  5  6  7  8   The  frame  src  attribute  is  assigned  the  URL  of  the  first  HTML  file,  leftframe.html,  that will  be  displayed  in  the  window.  The  frame  src  attribute  is  assigned  the  URL  of the  second  HTML,  rightframe.html,  that will  be  displayed  in  the  window.  The  frameset  definition  ends  with  the     tag.  The  background  color  of the  left  frame  will  be  yellow.  This  text  appears  in  the  left  frame.  This  section  represents  the  right  frame.  The  background  color  of this  frame  is  light  green.  See  Figure  10.25.    306   Chapter  10       It's the BOM!  Browser Objects   '  "   J  J  J  a*«h   r*..  .Jrtfcr,  !   J  ,J   Just  to show you  that  this  is the left frame   Just to show you  that  this is the  right frame  Just to show you  that  this is the  right frame   Figure  10.25  Two vertically positioned frames:  Output from Example  10.14.   The  next  example  shows  a window  partitioned  into  three  horizontal  frames.    Frame Me!     <!--  This file simply defines  the frames;  it points  to other   <frameset rows="130, *, *" frameborder=,,yes"   HTML files   not shown   that comprise the HTML  content  -->  border= "1"  framespacing=,,0">                E X A M P LE    10.15       1  2  3   4   1           E X P L A N A T I ON   This  time  the  frameset  will  be  divided  up  into  three  sections  by  rows.  The  first  frame  will  be  a  horizontal  frame  consisting  of  130  pixels  in  a  row.  Based  on  the  amount  of space  taken  up  by  the  first  frame,  the  remaining frames will  be  allocat- ed whatever space is left in  the window.  There  are  three  frames  that will  be  placed  horizontally  on  the  page   see  Figure  10.26 .   130  pixels in  rows   topframe.html    10.1   JavaScript and  the  Browser Object  Model   307   2   3   4   This  is  the  URL  to  the  first  frame,  topframe.html,  which  will  be  at  the  top  of  the  window.  This  is  the  URL  to  the  second  frame,  main.html,  which  will  be  in  the  middle  of the  window.  This  is  the  URL  to  the  third  frame,  bottomframe.html,  which  will  be  at  the  bottom  of  the  window.   Jusl  to  slum  you  thai  this  is  the  top  frame.   It's a lousy frameup!   J u st   to vn  "  y ou   t h at   this  is Ml  b o t t om frame   Figure  10.26  Three horizontal frames created in Example  10.15.   The frame Object.  HTML  frames  in JavaScript  are  represented  as  an  array  of frame  objects.  The frames []  array  is  a  property  of  the  window  object  and  is  referenced  with  the  window's  parent  property.  Each  element  of  the  array  represents  a  frame  in  the  order  in  which  it  appears  in  the  document;  thus,  window, parent frames [0]  would  reference  the  first frame  defined in  a frameset   see Figure  10.27 .  If you name  the  frame,  then you  can  reference  the  frame  element  by  its  name.  If the  frame  is  named  leftframe,  it  can  be  refer- enced   as  window.parent.leftframe.   parent  Window  object    308   Chapter  10       It's the  BOM!  Browser Objects   Because  frames  are  just  little  windows,  they  share  many  of  the  same  properties  and  methods  of  the window  object.  See  Table  10.11  for  a  list  of  properties  and  Table  10.12  for  a  list  of  methods.   Table  10.11   Properties  of  t he frame  O b j e ct   What  It  Describes   An  array  of frames.   The  document  currently  loaded  in  the  frame.   The number of elements in the  frames array;  that is,  the number of frames.   The name  of the  frame assigned  to  the HTML  name attribute.   The  main window  from which  the  child  frames  are  defined.   The  current  frame.   The window  that  started  the  script.   Property   document   frames   length   name   parent   self   top   window   The  current window  or  frame.   Table  10.12  Methods of the frame Object   Method   blurO   What It Does   Removes  focus  from  the  frame.   clearlntervalQ   Clears a  timed interval.   clearTimeoutQ   Clears a  timeout.   focus       print       Puts  focus into  the  frame.   Invokes  a  print  dialog box.   setlntervalO   Sets  a  timed interval.   setTimeout     Sets  a  timeout.   Unsets  the  watchpoint.   unwatchO   watch       Sets a watchpoint on a frame property; if a property changes, calls a function.    10.1   JavaScript and  the  Browser Object  Model   309   selection  of links,  then  it  can  serve  as  a  navigation  bar.  When  the  user  clicks  a  link,  the  page  at  that  URL  will  be  loaded  into  the  main  frame.   In  Example  10.16  the  frames  are  defined  for  two  frames.  Example  10.17  displays  the  content  of  the  two  frame  files.  The  left  frame  will  represent  a  menu  of links.  The  back- ground  color  in  the  right  frame will  change when  the  user  clicks  a link in  the  left  frame.   E X A M P LE  10.16       l  2  3  4           E X P L A N A T I ON    Frame Me!                       l  The  HTML     tag  replaces  the     tag when  working with  frames.  The  size  is  determined  by  the  ROWS  and  COLS  attributes  of the     tag.  In  this  example,  the  first  frame  will  occupy  25  percent  of  the  window,  and  the  second  frame  will  occupy  75  percent  of  the  window   in  columns .  The  default  is  to  set  ROWS  and  COLS  in  pixels.   ROWS   and  COLS  are  not  case  sensitive.   The  first  frame,  named  1'frame  occupies  25  percent  of the  left  side  of the  window.  Its  content  is  in  an  src  file  called  leftmenu.html.  This  frame,  called  rframe,  occupies  75  percent  of the  right  side  of the  window.  Its  content  is  in  an  src  file  called  rightcolor.html.  The  HTML     tag  ends  the  definition  of  the  frames.   2   3   4   E X A M P LE    10.17        Left  Frame     .--This HTML file is named: leftmenu.html -->     function  setBgColor color {   parent.frames[1].document.bgColor=color;      Or use  the frame's name:  parent.rframe.document.bgColor   1  2   }    310   Chapter  10       It's the BOM!  Browser Objects   E X A M P LE    10.17     C O N T I N U E D           3   Pick a color:      red       yellow       green       blue                              E X P L A N A T I ON     Right  Frame          This is the frame where colors are changing.   In your JavaScript function,  this is frame[1].   l  A  function  called  setBgCdlorQ  is  defined.  It  takes  one  parameter,  a  reference  to  a   color  being  passed  by  the  user.   2  Going  down  the  document  tree,  start  with  the  parent  window,  to  the  second  frame,frames  [1 j   remember  array subscripts  start  at  0 ,  to  the  frame's  document,  and  then  the  document's  property,  bgColor.  Assign  a  color.  This  assignment  will  cause  the  background  color  in  the  right  frame  to  change.   3  When  the  user  clicks  any  of  the  following  links,  the JavaScript  function  setBgCol- or    will  be  called,  with  the  color  sent  as  an  argument  to  the  function.  The Java- Script:  pseudo  URL  prevents  the  link  from  going  to  a  real  URL.  The  display  is  shown  in  Figure  10.28  on  page  311.   Using the top Property to Keep the Main Window Out of a Frame,  w h en  the  user  loads  your  Web  page  into  his  or  her  browser,  he  or  she  may  load  it  into  a  frame  rather  than  in  the  main  window.  You  might  not  want  this,  as  framesets  create  states  in    10.1   JavaScript and  the  Browser Object  Model   311   fc  lisiüMwaiRPaü j rr^i.ïiiMM Liitsr » n t J M . L'i. r m m n T f f ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ w t tt   Rit  Eil  VfeVi  Fj'.-irtM  Teds  htefc   Wdieis IQc^sanbafSOIdDcstfrmsilTameeetls.hliri   Pick a  color:  r t*  yellow  Erttp  bim   T h is   is   the  f r a me   w h e re   c o l o rs   a re   c h a n g i n g.  In   y o ur   j a v a s c r i pt   function*  this  is   f r a m e ^ ! ].   I«  Figure  10.28  When  the  user clicks a  link  in  the  left frame,  the  background  color in  the  right frame  changes:  Output from  Example  10.17.   1   JavaScript code  shown  in Example  10.18  into  the     portion  of the  page.  Every win- dow  and  frame  has  a  top  property,  a  reference  to  the  topmost  window  object  currently  loaded  in  the  browser.    Forcing  the  Frame        if   window != top   {       True if window is not  the top      window in  the hierarchy   top.location.href = location.href;       Put this window on top   1  2   3       The important page that we1 re talking about   E X A M P LE    10.18       }                    E X P L A N A T I ON   1   If  tbe  current  window  is  not  at  tbe  ton  of tbe  window  bierarcbv  in  tbe  browser.    312   Chapter  10       It's the BOM!  Browser Objects   E X P L A N A T I ON      C O N T I N U E D    2   3   If the  current window isn't  at  the  top  of the  window hierarchy   if it's  not  the  main  window ,  this  assignment  forces  the  page,  location.href,  into  the  main  window,  top.location.href.  This  is  the  body of the  fictitious  page  that will  be  loaded  into  the  main window  of  whoever  views  it.   Collapsing Toolbars and Menu Bars.  You don't always necessarily want to look at  the  toolbar  or  menu  bar.  It  can  be  in  the  way  of what you're  viewing  in  the  main  page.  Example  10.19  collapses  the  frame  to  bring  the  main  frame  to  the  foreground  so  that  it  will  be  viewed  in  the  entire  window.   E X A M P LE    10.19            Untitled  Document   <meta  http-equiv="Content-Type"   content="text html;  charset=iso-8859-l">                 Your browser needs to support  frames to view this page.                          The Startup Main Page            Untitled  Document   <meta http-equiv="Content-Type"  content="text html;   charset=iso-8859-l">              This is the main page         10.1   JavaScript and  the  Browser Object  Model   313   E X A M P LE    10.19     C O N T I N U E D    <meta http-equiv="Content-Type"  content="text html;      charset=iso-8859-l">   var myUrl;  function  openSite url {   parent.main.location = url;  myUrl=url;   } function collapse  {   if   ! myUrl {  else{   parent.location =  "tocmain.html";}  parent.location=myUrl;       Force this page into the     parent location   }   }               Home       Page  l           Hide Menu    Page  2   Page  3            E X P L A N A T I ON   1  A function called openSite is  defined.  It takes  one parameter,  the URL  of the Web site.  The  parent  is  the  main  window  where  the  frames  are  defined,  main.location  is  the  2  frame  on  the  right side  of the  toolbar.  It was  named  main when  the  framesets were  defined.  The  main  frame  is  assigned  the  URL  of one  of the Web  sites  after  the user  clicks  a  link in  the  menu  bar.  The  global  variable  my Url  gets  the  URL  of the  current Web  site  shown  in  the  right  frame.  The  function  called  collapseQ  is  defined.  Its  function  is  to  make  the  right  frame  fit  into  the  whole  window,  hiding  the  menu  bar.  If the  user  hasn't  selected  any  page  prior  to  selecting Hide  Menu,  the  main  frame  will  take  up  the  whole  window.  The  location  property  of  the  window  object  refers   5   4   3    314   Chapter  10       It's the BOM!  Browser Objects   EXPLANATION      C O N T I N U E D    6   The  location  property  of  the  parent  window  is  assigned  the  URL  of  the  window  currently  being  viewed  in  the  right  frame.  This  forces  the  right  frame  to  take  up  the  entire  window.  The  menu  bar  is  no  longer  displayed.  7  This list of links makes up  the menu bar and is in the left frame   see Figure  10.29 .  8  When  the  user  clicks  this  link,  the  collapse    function  is  called,  and  the  menu  dis- appears,  causing  the  right  frame  to  take  up  the  entire window   see  Figure  10.30 .   ^ U n t i t l ed   Document  -  Microsoft  Internet  Explorer  File  Edit  View  Favorites  Tools  Help   -  Q  -  g   Q  Back  Address [ e]   C:\sambar50\docs\ch10\tocframeset.html   ¿J   I  p  Search   Favorites   ^  Media  -0   0 '  ^  [jg      3  ^Gc   Home   Page  1   Page  2   Page  3   Hide  Menu   I E L L IE   Q u î g i zy   Menu   Home   Welcome to Ellieq.com, Ellie  Quigley's  official site fc—'   computer programming training through Learning   Learning Enterprises, Inc.  offers training in Unix, Perl, Pe   and  System Administration.   Learning Enterprises,  Inc.'s  instructors  are  highly r e s p ej spe^j   Unknown  Zone   Mixed    Figure  10.29  Two frames,  a menu,  a nd  the main frame: The user clicked on  Page  1.   [  Ellie  Quigley  ]  -  Microsoft  Internet  Explorer   File  Edit  View   Favorites   Tools  Help   Address  ej  http:  ellieq.com      B a ck   -  Q  -  @   [ £]     >J    ^ S e a r ch    Favorites  ^  Media      0'   ^  H   '   -inlxl   I  ELLIE   QUÎGLIEY   H o me  A b o ut  B o o ks  C o u r s es  S o l u t i o ns   .  .  Hiring  ntartll   .   Welcome to Ellieq.com, Ellie  Quigley's  official site for on-site  customized   computer programming training through Learning Enterprises,  Inc.     ¡Learning Enterprises, Inc.  offers training in Unix, Perl, Perl II,  CGI,  C,  C++, Jz   A    10.1   JavaScript and  the  Browser Object  Model   315   10.1.5   The location  Object   The  location  object  is  a  property  of  the  window  object  and  is  used  to  access  the  URL  of  the  document  currently loaded  in  the window.  In  previous  examples, we  have  seen  loca- tion  as  a  window  property,  but  because  it  is  really  also  an  object  itself,  it  also  has  proper- ties  used  to  describe  the  different  parts  of a  URL   see  Table  10.13 .   If you  are  writing  a  page  containing  frames,  the  entire  page  might  not  be  picked  up  by a search engine, such as Yahoo!  or  Google.  Anyone linking to your page via the search  engine  will  only  get  part  of  the  page,  not  the  complete  frameset.  Also,  when  a  page  is  divided  into  frames,  the  visitor  cannot bookmark the  page  if the  browser  is  not pointing  to  the  top  frameset.  The  location  object  can  be  used  to  make  sure  the  topmost window  is  the  one  currently  viewed  in  the  browser.   See  the  section  "Using  the  top  Property  to  Keep  the  Main  Window  Out  of  a  Frame"  on  page  310.    F O R M AT   E X A M P LE   JavaScript:  JavaScript:   window,  window.   location.  location.   .href =  "URL";  .replace "URL" ;   JavaScript:  JavaScript:   window,  window.   location.  location.   .href =  "http:  www.legos.com ";  .replace "http:  www.legos.com " ;   Table  10.13  Properties of the location  Object   Property   What It Describes in the URL   hash   host   hostname   href   pathname   port   protocol   search   If it exists,  the anchor part.   The  hostname:port.   The  hostname.   The entire URL.   The  pathname.   The port number.   The protocol and colon.   The query string.    316   Chapter  10       It's the BOM!  Browser Objects   Table  10.14  Methods  of the location  Object   Method   reload      replaceO   unwatchO   watch  0   What It Does   Reloads  the  current URL.   Replaces the current page with a new one.   Removes a watch point on the location property.   Sets a watch point on the location property; that is, calls a function if the  property  changes.   Two  methods  of  interest   see  Table  10.14   are  replace0  and  reloadQ.  The  replace0  method  is  used  to  change  the  location  of  the  current  page;  that  is,  to  point  to  another  page.  It is  similar  to  the  href property,  but where  href puts  the  new page  at  the  top  of the  history  list,  the  replace    method  removes  the  current  page  from  the  history  list  and  replaces  it  with  the  new  page.  The  reloadQ  method  behaves  like  the  browser's  Reload  button.  It  causes  the  window's  current  document  to  be  reloaded.   Loading a New Page into a Frame with the location Object,  in Example 10.20,  the  location  object  changes  the  location  of the  current  page.  By  selecting  a  Web  site,  the  user  is  taken  to  that  site,  which  is  displayed  in  the  bottom  frame  of a  frameset.   E X A M P LE    10.20    The  file  defining  the  framesets  called  framefile.html          Frames   <frameset  rows="130,*"  frameborder="yes"  border="8"   framespacing="0">   <frame src = "location.html" scrollings"no"»       The  empty  file  that will  be  the  bottom  frame  called  emptyframe.html     Empty  Frame                               10.1   JavaScript and  the  Browser Object  Model   317   E X A M P LE    10.20      C O N T I N U E D             The History Object      function  loadPage urlAddress {   parent.frames[1].location.href  = urlAddress;   }                    <input  type="button"   <input  type="button"   value="Amazon"  onClick="loadPage 'http:  amazon.com1  ; ">  value="Borders"  onClick="loadPage 1http:  borders.com1  ; " >  value="Barnes&Noble"  onClick="loadPage 1http:  barnesandnoble.com1 ;">   <input  type="button"                  E X P L A N A T I ON   1  When  the  function  loadPageQ  is  called,  it  gets  the  URL  address  of  the  bookstore   2   3   4   as  its  only  parameter  and  assigns  the  address  to  the  location  object.  There  are  two  frames  in  this  document.  The  first  frame  contains  the  buttons  with  the  names  of bookstores  to  pick from—Amazon,  Borders,  and Barnes  &  Noble   see  Figure  10.31 .  The  second  frame  is  empty  until  the  user  makes  a  selection.  This  statement  assigns  the  URL  of the  chosen bookstore  to  the  location  object by  travers- ing  the  JavaScript  hierarchy,  starting  at  the  parent  window,  to  the  bottom  frame,  frames[l j  and  to  the  href property  of  the  location  object.  By  doing  this,  the  browser  will  find  the  home  page  of the  bookstore,  and  display it in  the  bottom  frame.  The  HTML  form  starts  here.  It  is  a  form  that  displays  three  graphical  buttons.  When  the  user  clicks  one  of  the  buttons,  a  function  called  loadPageQ  will  be  in- voked  and  the  bottom  frame  will  display  its  Web  page.  The JavaScript  onClich  event  handler  is  triggered  when  the  user  clicks  the  button.  The  function  called  loadPageQ  will  be  called  with  the  URL  of  the  bookstore.  The    318   Chapter  10       It's the BOM!  Browser Objects   *  C h a n g i ng   L o c a t i on   -  M o z i l la   F i r e f ox   File  Edit  View  History  Bookmarks   Tools  Help   *   C   i ii        file:   C: wamp www f ramefile.html   Q  file:   ...sh2.html   Q  Mime Detection   Q  Mime Detection     Q  The History Obj...  Q  The History Obj...  Q  Cha   [  A m a z on    ]  [  B o r d e rs    ]  [  B a r n e s & N o b le    ]   Figure  10.31  b o t t om   frame.   Two frames: The t op  frame  puts the  location of the  bookstore  in the   *  C h a n g i ng   L o c a t i on   -  M o z i l la   F i r e f ox  File  Edit  View  History  Bookmarks   Tools  Help   I   T   C   ^ r1    Ü   file:   C: wamp www framefile.html   Q  file:   ...sh2.html   Q  Mime Detection   Mime Detection   Q  The History Obj...  Q  The History Obj...  Q  Changing Locat...  Q  Thi   A m a z on   ~]  [  I B o r d e rs  I  ]  [  B a r n e s & N o b le   FREE  SHIPPING   BORDERS.   search   advanced  search   1   Teens  Books  magic  shelf"  Picked  f or   Y 3U   what's this?  edit   Kids  Movies  &  TV  Music   - -M         j N^iiction    10.1   JavaScript and  the  Browser Object  Model   319   10.1.6  The history Object   The  history  object  is  a  property  of  the  window  object.  It  keeps  track  of  the  pages   in  a  stack   that  the  user  has  visited.  The  history  object  is  most  commonly  used  in JavaScript  to  move  back  or  forward  on  a  page,  similar  to  the  back button  and  forward  button  sup- ported  by your  browser.  The  history  object  can reference  only those pages  that have been  visited;  that is,  those pages  on its stack.  It has  a length  property and  three methods  called  go  ,  back  ,  and forwardQ.  See  Tables  10.15  and  10.16.   Table  10.15  Properties of the history Object   Property   What It Describes in the URL   The  current document URL.   The number of entries in the history object.   The URL of the next document in the  history  object.   The URL of the previous document in the  history  object.   The query string.   Table  10.16  Methods  of  the history Object   What It Does   Goes to the previous URL entry in the history list; like the browser's back  button.   Goes to the next URL entry in the history list; like the browser's forward  button.   The browser will go forward or back   if the value is negative   the  number of specified pages in the history object.   E X A M P LE   history. go  -3   history. go  2   back          Go back  three pages      Go  forward  three pages      Same as history.go -1    current   length   next   previous   search   Method   bach     forward  0   go      320   Chapter  10       It's the BOM!  Browser Objects   E X A M P LE    10.21   1    The  file  defining  the  framesets  called  framefile.html         Frames   <frameset  rows="130,*"  frameborder="yes"  border="8"   framespacing="0">   <frame src = "location.html" scrollings"no"»      2    The  empty  file will  be  the  bottom  frame  called  emptyframe.html        Empty  Frame                                      }               The History Object      function  loadPage urlAddress {   3   parent.frames[1].location.href  = urlAddress;   <input  type="button"         value="Amazon"  onClick="loadPage  http:  amazon.com1 ;"   >  value="Borders"  onClick="loadPage 1http:  borders.com'   ; "  >  value="Barnes&Noble"  onClick="loadPage 'http:  barnesandnoble.com' ;"   >   <input  type="button"   <input  type="button"          <input  type="button"   value="go back"    10.1   JavaScript and  the  Browser Object  Model   321   E X A M P LE      C O N T I N U E D    10.21              E X P L A N A T I ON   1   4   This  file  defines  the  framesets  that  will  be  used  to  create  the  page  seen  in  Figure  10.33.  This  is  the  empty  frame  file  seen  at  the  bottom  of the  page.   2  3  When  the  user  clicks  one  of the  buttons,  labeled  Amazon,  Borders,  and  Barnes  &  Noble,  parent.frames[l¡.location.href,  the  bottom  frame,  will  be  assigned  the  URL  of  the  selected  page.  This  button  will  be  used  if  the  user  wants  to  go  back  to  the  previous  page.  If  the  history  object's  go    method  takes  a  negative  integer,  such  as  history.go -l ,  the  user  will  be  sent  back  to  the  previous  page just  visited.   If nothing  happens,  the  page  is  blank,  and  there  is  nothing  in  the  history  list  to  return  to.   This  button  will  be  used  if  the  user  wants  to  move  to  the  next  page.  If you  move  forward  and nothing happens,  it's  because you  don't have  anything  on  the  history  stack  yet;  you  haven't  gone  anywhere.  Once  you  load  a  new  page,  then  go  back,  you will  be  able  to  move  forward.  Likewise  if you  go  back  and  an  empty  page  ap- pears,  it  is  because you  haven't loaded  a  page yet.  The  history  object's go    method,  history.go l ,  will  then  move  you  forward  one  page.  Output  is  shown  in  Figures  10.33  and  10.34.   5   > Changing Location  - Mozilla Firefox  File  Edit  View  History  Bookmarks   Tools  Help   "   file:   C: wamp www framefile.html      file:   C:...Iash2.html  Q  Mime Detection   Q  Mime Detection   Q  The History Object     Q  The   Pick  a  book  store  and we'll take you there!   [  Amazon      Borders"""]  [  Barnes&Noble  ]   [  go back  ]  [  go forward  ]    322   Chapter  10       It's the BOM!  Browser Objects   ' Changing Location  - Mozilla  Firefox  File  Edit  View  History  Bookmarks   Tools  Help   '  @   '¿¿i   [2]   file:   C: wamp www framefile.html   Q  file:   C:...Iash2.html    Q  Mime Detection     Q  Mime Detection   Q  The History Object   Q  The History   Pick  a  book  store  and  we'll   take  you  there!   Amazon i"  [  Borders"-]  [  Barnes&Noble  ]   go back~]  [  go forward  ]   3   1 1 3 2 0 11   C Om    p r i me    Hello, Ellie Quigley. We have recommendations forvou.  Mot Ellie?   Ellie's Amazon.com   i  Today's Deals  Gifts & Wish Lists  Gift Card«   All Departments   M   Show Your  Kindle  Some   This  Valentine's  Day   Shop  All  Departments   Books  Movies, Music & Games  Digital Downloads  Kindle  Computers & Office  Electronics  Home & Garden  Groceiy, Health & Beauty  Toys, Kids & Baby  Clothing. Shoes & Jeweliy  Sports & Outdoors   Built  Neoorene  Kindle   Tirnbuk?  Nylon  Kindle   Sleeve   Fi...   Sleeve   Fit...   Figure  10.34  Bottom  frame  displays bookstore.  If another  bookstore  is selected,  then  you  c an   use  history.   10.1.7   The screen Object   The  screen  object  is  a  property  of the  window  object  and  is  automatically  created  when  a  user  loads  a Web  page.  It  gives  you  access  to  the  various  properties  of  the  user's  screen  such  as  its  height,  width,  color  depth,  and  so  on.  These  are  listed  in  Table  10.17.  This  can  be  helpful  when  designing pages  that will  require  specific  dimensions.  For  example,  if the  user's  available  screen width  is  less  than  650  pixels   640x480 ,  you  might want  to  load  a  smaller  image,  whereas  if it  is  over  1,000  pixels   1024x768 ,  a  larger  image  can  be loaded.  There  are  no  event handlers  for  this  object.  Example  10.22  displays  the prop- erties  of  the  screen  object  shown  in  Table  10.17.   Table  10.17   Properties  of  the screen  Object    10.1   JavaScript and the Browser Object Model   323   Table  10.17  Properties of the screen Object  continued    Property   availTop   availWidth   colorDepth   height   pixelDepth   width   What It Describes   The y coordinate of the first pixel, minus toolbars, and so on.   The pixel width of the screen, minus toolbars, and so on.   The maximum amount of colors that the screen can display.   The pixel height of the screen.   The number of bits per pixel of the screen.   The pixel width of the screen.   E X A M P LE    10.22        Screen  Properties-; titlex head>       The Screen        Screen  Property Value        Height          document.write screen.height ;        Available  Height           document.write screen.availHeight ;                              Width          document.write screen.width ;   1   2   3    324   Chapter  10       It's the BOM!  Browser Objects   E X A M P LE      C O N T I N U E D    10.22                  Available Width              document.write screen.availWidth ;    Color Depth              document.write screen.colorDepth ;                         E X P L A N A T I ON   4   5   L   2   3  4  5   The  height  property  of the  screen  object  contains  the  height  of the  screen  in  pixels.   To  see  how to  create  a table  dynamically with JavaScript,  see  Chapter  15,  section  "Creating  a  Table  with  the  DOM"  on  page  644.   The  available  height  is  the  height minus  any  toolbars  or  other  objects  attached  to  the  window.  The  width  property  of  the  screen  object  contains  the  width  of  the  screen  in  pixels.  The  availWidth  is  the  pixel  width  of  the  screen,  minus  toolbars,  and  so  on.  The  colorDepth  refers  to  the  maximum  number  of  colors  that  the  screen  can  dis- play  in  bit  format.  The  display  is  shown  in  Figure  10.35.    10.2  What You Should  Know   325   Screen  Properties  -  Windows  Internet  Explorer  ^H  Ö  Screen  Properties  -  Mozilla  Firefox   C:\wamp\www\screenprops.html   File   Edit   View  History   Bookmarks   Tools  Help   File  Edit  View  x  [p   Search the Web   I   Favorites   Tools  Help   Favorites   ^ 5creen  Properties   T he   Screen  Screen  Property  Value  Height  826  Available  Height  796  W i d th  1079  Available  W i d th  1079  Color  Depth   32   C   t ±i    J   file:   C: ™amp ww   Mime Detection   Mouse Buttons  The  Screen  Screen  Property Value  1 826  Height  796  Available  Height  1079  W i d th  1079  Available  W i d th  32  Color  Depth   Figure  10.35  Tables  showing  properties  of the screen object  in  Internet  Explorer   left   a nd   Firefox   right .   10.2  What You Should  Know   They  say windows  are  the  eye  of  the  soul  and  what would  a  browser  be  without  them?  This  chapter was devoted to  the BOM,  and specifically the browser's window object.  You  learned  how  to  open  and  close  a  window,  and  to  divide  it  up  into  frames,  how  to  time  events  within  a window,  create  popups,  navigation  bars,  and  how  to  find  the  properties  of your  screen.  You  know  the  following  about  the  browser  and  windows:   1.  The  appName  and  userAgent  for  your  browser.  2.  How  to  detect  a  plug-in.  3.  What  a  browser  sniffer  does.  4.  What  MIME  types  are.  5.  How  to  open  and  close  a window.  6.  How  to  give  the  window  focus.  7.  How  to  move  a window  to  another  part  of the  screen.  8.  How  to  access  the  status  bar.  9.  How  to  access  the  title  bar.  10.  Two  ways  to  set  a  timer.  11.  How  to  create  frames.  12.  How  to  create  a  navigation  bar.  13.  How  to  use  the  location  object.  14.  How  to  use  the  history  object  to  keep  track  of pages  recently  visited.  1  ^   1 — it   tr\  f i n rl   tVio  r\im   c m nc   nf   c r - r o on    326   Chapter  10       It's the BOM!  Browser Objects   Exercises   1.  In  a  new  window,  print  all  the  properties  of  the  navigator  object.   2.  Write  a  script  that will  display  the  name  of your  browser,  the  version,  and  the  operating  system  you  are  using.   Use  the  parselnt    function  to  print just  the  version  number.    3.  Does  your  browser  support  Shockwave  Flash?  Write  a JavaScript  program  to   show whether  the  plug-in  is  installed.   4.  Create  two  links,  one  to  open  a  new window  and  one  to  close  it.  The  new win- dow  will  display  this  message  in  a  big  font:  The  eye  is  the  window  to  your  soul.  The  new window will  be  positioned  in  the  left  corner  of your  screen,  will  be  resizable,  have  a  scrollbar,  and  it will  have  the  focus.   5.  Create  an  HTML  document  that  contains  four  frames   i.e.,  four  panes  in  a  win- dow,  as  in  Figure  10.24 .  Each  frame  will  display  a  different  image.  In  another  window,  use JavaScript  to  display  the  number  of frames  in  the  original  window  and  the  name  of the  original  window.   6.  Create  a  program  that  produces  a  page  containing  frames.  The  first  frame   will  span  across  the  top  of the  page  and  contain  a  centered  heading  entitled  A  Virtual  Zoo.  A  second  frame  will  be  used  as  a  navigation  bar  at  the  left  side  of  the  screen.  It will  contain  links  to  five  animals.  When  the  user  clicks  a  link,  an  image  of that  animal  will  appear  in  a  frame  of its  own  to  the  right  side  of the  navigation  bar.   7.  In  an  alert  dialog  box,  display  the  pixel  height,  width,  and  color  depth  of your   screen.  Each  value  will  be  separated  by  a  newline.   8.  Create  a  program  that will  create  a  digital  clock in  the  status  bar.  Use  the  setlntervalO  method  to  update  the  status  bar  once  every  minute  with  the  current  time.    chapter  11  Working with Forms  and Input Devices   11.1  The Document Object Model  and the   Legacy DOM  0   If you  recall  from  Chapter  1,  "Introduction  to JavaScript,"  a  document  object  model  is  a  way of conceptualizing  a Web  page where  the  document is  represented  as  a  tree  structure.  In  Chapter  10,  "It's  the  BOM!  Browser  Objects,"  we  addressed  the  browser  object  model   BOM .  The  properties  and  methods  of  different  browsers  vary  because  there  is  no  stan- dard  for  defining  what  a  browser  does.  The  DOM,  on  the  other  hand,  deals  specifically  with  a  document,  and  there  are  now  standards  that  dictate  how  the  objects  in  an  HTML   or  XML   page  should  be  represented.  The  industry standard  DOM  is  discussed  in  full  in  Chapter  15,  "The  W 3C   DOM  and JavaScript."  Before  the  W 3C   created  a  standard  way  to  represent an  XML HTML  document  and  all  of its  elements   DOM  Levels  1,2,  and  3   there  was  a  DOM,  now  called  the  Legacy  Dom  0,  invented  by  Netscape  at  the  same  time  they  created JavaScript.  This  DOM  allowed  developers  to  manipulate  and  query  the  content  of  a Web  page,  particularly forms  and images,  and it is still  supported by all  browsers  even if  they are DOM  1,  2,  or 3  compliant.  So if we have  a better, newer, and more versatile DOM,  why use  the  old  DOM  at  all?  Because  the  Legacy DOM  is still  more  practical  and  easier  to  use  when  it  comes  to  dealing with  forms,  images,  links,  and  anchors.   In  addition,  DOM  0 is useful in searching for  an  element by its name with index values, removing and  adding  option  elements  from  a  select  list,  and  using  the  elements []  array  to  work  with  input  devices,  such  as  buttons  and  textboxes.    When  an  HTML  document  has  been  completely  loaded,  the  browser  represents  it  as  a  tree  structure  where  all  elements  in  the  page  are  objects.  When  working  with  forms,  JavaScript  creates  an  array  of  all  forms  as  it  encounters  them  in  the  document,  where  document.forms[0]  represents  the  first  form  and  if  there  is  another  form,  it  is  docu- ment.forms [1 j.  Similarly,  all  images,  links,  and  anchors  on  the  page  are  stored  in  a  arrays    328   Chapter  11      Working with Forms and  Input Devices   Objects."  The  elements  can  be  accessed  in  two ways:  by name  or  by number.  If,  for  exam- ple, you  name  the  first  form,"forml",  then you  can  access  it by name   associative  array   as  document.forms["forml"]  or  by  numeric   numeric  array   as  docu- ment.forms   index  value   [0],   11.2  The JavaScript  Hierarchy   We  discussed  the window  as  part of the BOM  in  the  last  chapter.  The  DOM  is  concerned  only  with  those  nodes  that  make  up  the  document  object.  Documents  contain  text,  images,  forms,  links,  anchors,  and  so  on.  The  most  commonly  used  object  is  the  docu- ment  object.  Subordinate  to  the  document  object  are  another  collection  of objects,  its  chil- dren   see  Figures  11.1 :   1.  The  anchors  object.  2.  The  images  object.  3.  The  forms  object.  4.  The  I inks  object.   document  D o c u m e nt   o b j e ct   anchors[]  array  of  A n c h or  objects   images[]  array  of  I m a ge  objects   fournis [ ]  array of  Form  objects   links[]  array  of   Link   objects   src   src  property   elements[]   Submit   elements[]  C h e c k b ox   elements[]  1   Text   Figure  11.1   Ihe document model.   Revisiting the Dot Syntax.   To  refer  to  an  object,  you  start  with  the  window  object    11.2  The JavaScript Hierarchy   329   the  window,  because JavaScript  knows  that  the  window is  at  the  top  of the  tree.  Instead  of  saying  window.document.bgcolor,  you  can  simply  say  document.bgcolor.   11.2.1  The Document Itself   The  document  object  is  a  property  of  the  window  object,  and  if  the  window  is  partitioned  into  frames   subwindows ,  each  frame  is  a  property  of  the  window  object.   Every  window   or  frame   contains  a  document  object  that  corresponds  to  the  HTML  document shown in  the window.  This  object corresponds mainly to  the  body of the  doc- ument—that  is,  what  is  inserted  between  the     tags.  JavaScript  programs  manipulate  this  object  to  bring life  to  otherwise  dead,  static pages.  Because  the  document  object  is  below  the  window  object,  the  document  object  can  be  represented  as  a  property  of  the  window  by  saying  window, document.  The forms  object  is  an  array  of  objects  below  the  document  object,  so  the forms  object  is  a  property  of  the  document  object  and  is  rep- resented   as  window.document.forms  [].   As  stated  before,  because  the  window  object is  at  the  top  of the  hierarchy,  any  objects  just  below  it,  such  as  the  document  or  location  objects,  are  window  properties  and  the  word  window  is  not  required;  thus,  specifying  window.document.bgColor  is  the  same  as  document.bgcolor.   The  syntax  for  describing  the  background  color   bgcolor    property  for  a  document   object  is  shown  in  the  following  example:  document.bgcolor =  "yellow";   Document  Properties.  The  document  object is  defined when  the  HTML     tag is  encountered  on  the  page  and  stays  in  existence  until  the  page  exits.  The     tag has  a  number  of attributes  that  define  the  appearance  of the  page.  The  document object has prop- erties  that  correspond  to  the  HTML     tag  attributes,  as  shown  in  Tables  11.1  and  11.2.  The  properties  of the  document  object are  shown in  the  output of Example  11.2.   See  Chapter  13,  "Handling Events,"  for  events  that  are  associated with  the     tag.    Table  11.1  HTML   Tag Attributes   What It Specifies   Attribute   alink   background   bgcolor   fgcolor   Color of an active link; that is, while the mouse is on the link.   URL of a background image.   Background color of the page.   Text or foreground  color.    330   Chapter  11      Working with Forms and  Input Devices   Table  11.2  Some document Object  Properties   Property   What It Describes   bgColor, fgColor   Determines the background color and text color, related to  the HTML      tag.   Allows reading and writing HTTP  cookies   see  Chapter  16,  "Cookies" .   A security property for Web servers in the same domain.   lastModified  linhColor,  alinkColor,  vlinhColor   A string with the date when the page was last modified.  Determines the color of unvisited links, active links,  and visited links,  respectively; related to link attributes of the HTML    tag.   The URL  of the document   deprecated .   URL  of the document that linked the browser to  this document.   The  title  of the current document,  related to  the  text between the     tags  found in  the  head  of the  document.   A string containing the URL  of the document.   cookie   domain   location   referrer   title   URL   As  shown  in  the  output  of Example  11.1   see  Figure  11.2 ,  the  document has  a  large  assortment  of properties.  Most  of  these  properties,  those  containing  the  word  "Node,"  will  be  used  with  the  standard  W3C  DOM  Levels  1  and  2.  The  newer  versions  of  the  DOM  give you  the  ability to get access to  and manipulate  all  of the HTML XML  elements  in  the  document.   E X A M P LE    i ll        Looping  through Object  Properties           1  2  3  4  5   var props=new Array  ;  for    var property in window.document {  }  for 1 = 0 ;i<props.length; i++ {   props.push property ;   document.write  props[i] + "  " ;  if  i>0 && i%4 == 0  {   document.write " " ;   }   }    11.2  The JavaScript Hierarchy   E X P L A N A T I ON   331   3   l  A  new  array  object  called  props  is  created  with  the  Array Q  constructor.  2   The for in  loop  allows  you  to  enumerate   list  one  by  one   the  properties  of  an  ob- ject,  in  this  case  the  document  object.  The  body  of  the for in  loop  is  executed  once  for  each  property  of  the  document  object.  Each  time  through  the  loop,  a new property  of the  document  object is  pushed  onto  the  props  array.  This for  loop  iterates  through  the  props  array  to  list  the  properties  that  were  as- signed  to  it.  Each  property  of  the  document  object  is  displayed  in  groups  of  three.  The  output  differs  somewhat  on  different  browsers.   5   4   1 Looping through  Object Properties  - Mozilla Firefox  File  Edit  View  History  Bookmarks   Tools  Help   T   C   &   G   file:   C: wamp www exercisel 1.2.html      Form and E l e m e n t . . . 1 F o rm  and Element  ...[yj     Naming Buttons        Naming Buttons        Namir   evaluate  createExpression  ereateNSResolver baseURI textContent  compareDocumentPosition  getUserData  isSameNode  lookupNamespaceURI  setUserData lookupPrefix isDefaultNamespace  isEqualNode  documentURI  adoptNode  renameNode  dispatchEvent  removeEventListener  createNodelterator  defaultView  createEvent  activeElement getElementsByClassName  hasFocus  elementFromPoint  getBoxObjectFor width height  domain  designMode  getSelection body  anchors  links  title  URL referrer  forms  cookie  images  getElementsByName  documentElement implementation  doctype  getElementsByTagName  getElementsByTagNameNS  getElementByld  createDocumentFragment  createElement  importNode  createTextNode nextSibling firstChild  prefix no deValue  childNodes nodeName  namespaceURI previous Sibling nodeType localName  lastChild  ownerDocument parentNode  attributes  appendChild  cloneNode  normalize  has ChildNodes  insertBefore  replace Child remove Child has Attributes  styleSheets  getFeature  DOCXJMENT_POSmON_DISCONNECTED  DOCUMENT_POSmON_PKE   n n r ! T m F . NT   p n s m n KT  vnn.OWINGT nrrruvwr  p n s m n KT   nnNTATKre n n r : T m F . NT vc  Figure  11.2  Partial  output showing  the  document's  properties.   Using  t he document O b j e ct   Properties  in  JavaScript.   11.2  demon- strates  how  the  properties  that  describe  the  document  are  used  in  a JavaScript program.  The  write    method  displays  a  description  of each  of  these  properties  as  they  pertain  to   Example    332  E X A M P LE  11.2       Chapter  11      Working with Forms and  Input Devices    Document  Object  Properties   <body bgcolor="silver"  text="forestgreen"  link="blue"   vlink="purple">         var beg_tag=" ";  end_tag=" ";  document.write "The location of the document"+ beg_tag +  document.write "The document's title:  "+ beg_tag+   document.write "The background color:  "+ beg_tag+  document.write "The link color is:  "+ beg_tag+   document.location + end_tag ;  document.title + end_tag ;  document.bgColor + end_tag ;  document.linkColor + end_tag ;  document.fgColor + end_tag ;  document.lastModified + end_tag ;   document.write "The text color is:  "+ beg_tag+  document.write "The document was last modified:  "+ beg_tag +       Thanks!   < font           E X P L A N A T I ON   This  property  contains  the  location  of  the  document;  that  is,  the  full  path  name  to  the  document.  This  property  contains  the  title  of the  document,  shown  in  the  title  bar  at  the  top  of  the  window.  This  property  describes  the  hexadecimal  color  of the  document's  background,  in  this  example,  silver.  This  property  describes  the  hexadecimal  color  of links,  blue  in  this  example.  This  property  describes  the  hexadecimal  color  of  the  text,  forest  green  in  this  example.   6  This  displays  the  date  and  time  when  the  document was  last  modified.  7   The  link will  change  color  from  blue  to  purple  once  it has  been  visited.  Complete  output  is  shown  in  Figure  11.3.  Clicking  this  link  opens  another  page  called  "thanks2.html"  displayed  in  Figure  11.4.   l   2  3   4  5   6  7   l   2   3   4  5    11.2  The JavaScript Hierarchy   333   !  D o c u m e nt   O b j e ct   P r o p e r t i es   -  M o z i l la   F i r e f ox   File  Edit  View  History  Bookmarks   Tools  Help   *   C   Q file: fffC:  wamp www example 11.2. html   I  ^  Form and Element Prop...   Form and Element Prop...   J  Naming Buttons   J  Naming Buttons   Nc   d o c u m e n t 's    title:  Document  Object  Properties   T he   l o c a t i on   of  t he  d o c u m e n tfiie:       C V i v a mp www example11,2.htm!  T he   T he   b a c k g r o u nd   c o l o r:  silver  T he   T he   T he   d o c u m e nt   w as   T h a n k s!   link  c o l or   is:  blue  t e xt   c o l or    last  m o d i f i e d:  02 10 2010  09:41:35   is:  forestgreen   Figure  11.3  Document properties:  Link turns purple after "thanks.html"  has been visited.   p   www thanks2.html   rop...   J  Naming Buttons     j   Naming Buttons     j   Naming Fori   Thank you so much!!!!   Figure  11.4  After the  user clicks the  link,  this  p a ge   is displayed.   The  document  object  has  methods   The document O b j e ct   Methods.  the  object  how  to  behave  or  what  to  do.  Table  11.3  lists  these  methods.  We  have  used  the  writeQ  and  writeln    methods  throughout  this  text  to  send  output  to  the  screen  dynam- ically,  as  shown  here:  document.writeln " Welcome  to the JavaScript World! " ;   tell   to   Methods,  like  properties,  use  the  dot  syntax  to  define  the  object  they  are  manipulat-  The  parentheses  differentiate  a   ing;  for  instance,  document.clearQ  or  window.open  .  method  from  a  property.    Table  11.3   Methods  of  the document  Object   Method   What It Does    334   Chapter  11      Working with Forms and  Input Devices   Table  11.3  Methods  of the document Object   continued    What It Does   Brings the document into  focus.   getElementByldO   Returns a reference to the first object with the specified ID.   getElementsByName        Returns a  collection of objects with the specified name.   getElementsByTagNameO   Returns a  collection of objects with the specified tag name.   Begins a new document,  erasing the old one.   Writes and appends text into  the current document.   Same as write  , but appends a newline if in a   tag.   Method   focus  0   open     write     writelnQ   11.3  About HTML Forms   At  the  heart  of  the  Web  is  the  form.  It  is  used  to  pass  information  from  the  browser  to  the server.  Anytime you go  online  and order  a book,  trade  at an auction,  fill  out a survey,  or  send  an  e-mail  using  a Web  browser,  you  are  working with  a  form.   An  HTML  form  offers  you  a  number  of ways  to  accept  input,  such  as  radio  buttons,  checkboxes,  popup  menus,  hidden  fields,  and  textboxes;  these  are  called  virtual  input  devices  or  controls.  Once  the  form  has  been  filled  out  by  a  user,  it  normally  is  sent  to  a  server where  the input is processed by a server-side program, such as  a Java servlet,  CGI,  ASP.NET,  or  PHP  application.  It  is  important  to  understand  how  the  form  data  is  col- lected  and  sent  to  the  server  and  then  what  role JavaScript  has  in  this  process.   11.3.1  Attributes of the   Tag  All  forms  are  in  HTML  documents.  They  begin with  a     tag  and  its  attributes,  fol- lowed  by  the  input  fields  where  the  user  enters  form  information,  and  end  with  a     tag.  <form name="forml"  id="forml"   action="URL to server program"  method="post">      continue here with body of the form  including input devices  for  filling out the form;  see Table 11.4 for a comnlete examnle .    11.3  About HTML Forms   335   The action Attribute.  The  action  attribute  is  assigned  the  URL  of the  server  program  that  will  process  the  form  data.  After  the  user  enters  the  information  requested  in  the  form,  he  or she will  normally click a Submit button.  That button  might say  "Order  now,"  "Send  Your  Order!"  or  simply  "Submit."  When  this  button  is  clicked,  the  browser  goes  to  the  value  in  the  action  attribute  to  see  where  to  send  the  data,  which  is  normally  the  URL  of a PHP,  Perl  CGI,  or  ASP  script.  The  URL  can  be  a  relative  or  absolute  URL   e.g.,  http:lflocaihostlcgi-binlvaiidate.pl  etc. .  When  the  form  data is  sent to  the  server  program,  it is  processed  further,  validated,  sent  to  a  database  or  file,  used  in  an  e-mail,  and  so  on.   cgi-bin validate.pl   validate.php,   simply   or   or   Form  data doesn't always get sent to  a server program.  It might be used by JavaScript  to  pass information  to  functions,  cookies,  and so  on.  To prevent  the  form  from  directing  the  page  to  a  server,  the  action  attribute  can  be  assigned  the  empty  string  or  simply  be  omitted,  in  which  case  the  form  data will  not  be  sent.   The method Attribute.  A  method  attribute  can  be  assigned  to  the     tag.  The  method  attribute  indicates  how  the  form  data  will  be  sent  to  the  server.  Simply  put,  for  pure  queries,  the  GET method is normally used,  and  for submitting form  data,  the POST  method  is  used.   The  method  names  are  not  case  sensitive.    The  G ET   method is the  default   does not need  to be specified   and is used  every time  the  browser requests  a document.  The  GET method is preferable  for  operations  that will  not  affect  the  state  of  the  server;  that  is,  simple  document  retrieval,  queries,  database  lookups,  bookmarking,  and  the  like.  It  is  the  only  method  used  for  retrieving  static  HTML  files  and  images.  The  GET  method  passes  data  to  the  server  by  appending  the  data  to  the  URL   called  the  query  string .  The  query  string,  prepended  with  a  question  mark, is  a URL-encoded string consisting of name value pairs.  It can be seen in  the Loca- tion  bar  of the  browser  as  soon  as  the  user  clicks  the  Submit button  in  a  form.  In  Figure  11.5  the  name value  pairs  being  sent  to  the  server  are  color=yellow.   You  can  also  view  HTTP  headers  of  a  page  while  browsing  with  a  Firefox  add-on   called Live Headers   http:  livehttpheaders.mozdev.org  .   See Figures  11.5  and  11.6.   The POST  method  is  preferred  for handling operations  that might change  the state  of  the  server,  such  as  adding  or  deleting  records  from  a  database,  uploading  files,  sending  e-mail,  and so  on.  The POST method is  the most commonly used  alternative when send- i n gf o rm   data   see  Figure  11.6 .  The  post data is URL  encoded  in  the  same way it is with  the get method, but it is posted  to  the server  as  a message body, similar  to  an  e-mail  mes- sage,  rather  than  in  a  URL.  The  post  method  can  be  used  when  sending  large  amounts  of data  and  is  not  shown  in  the  Location  bar  of the  browser,  although  it  can  be  viewed  as  View Source  under  the  browser's  View  option.  If you  try  to  backbutton  post  data,  the  browser  normally  sends  you  a  warning  so  that  you  do  not  destroy  or  lose  a  previous  transaction.  This  caution  presumes  that because  the  post method was  used,  there  might  be  some  permanent  change  to  the  state  of the  server.    336   Chapter 11      Working with Forms and Input Devices   -I  Live  HTTP  headers   Headers    Generator config About    [  HTTP Headers   GET   cgi-bin printenv.pl?color=yellow  HTTP 1.1  Host:  localhost  User-Agent:  Mozilla 5.0  Windows;  U;  Windows NT 5.1;  en-US;  rv: 1.9.1.3  Gecko 20090824 Firefox 3.5.3  .NET CLR 3.5.30729   Accept:  text htmlj application xhtml+xmlj application xml; q=0.9, *   *;  q=0.8  Accept-Language:  en-uSjen;q=0.5  Accept-Encoding:  gzipjdeflate  Accept-Charset:  ISO-8859-1, utf-8; q=0.7, *; q=0.7  Keep-Alive:  300  Connection:  keep-alive   HTTP 1.x 200 OK  Date: Mon,  21  Sep 2009  17:01:29 GMT  Server:  Apache 2.2.11   Win32  PHP 5.2.8  Keep-Alive:  timeout=5j  max=100  Connection:  Keep-Alive  Transfer-Encoding:  chunked  Content-Type:  text plain;  charset=iso-8859-l   <  [ s a ve  All...   "JL-  m  J  ]  [  Replay...   ]   -£   Live HTTP  headers   Headers  Generator  Config  About    HTTP Headers   http:   localhost cgi-bin printenv. pi   0  Capture   [   Clear   ]   [   Figure  11.5  Firefox Live  Headers shows how the GET method sends data  in a query  string  appended  to a  URL and  a  question  mark.     I U I*   >ji  Close  3   E 0H   POST   cgi-bin printenv.pl  HTTP 1.1  Host:  localhost  User-Agent:  Mozilla 5.0  Windows;  U;  Windows NT 5.1;  en-US;  rv: 1.9.1.3  Gecko 20090824 Firefox 3.5.3  .NET CLR 3.5.30729   Accept:  text html, application xhtml+xmlj application xml; q=0.9, *   *;  q=0.8  Accept-Language:  en-uSjen;q=0.5  Accept-Encoding:  gzip, deflate  Accept-Charset:  ISO-8859-1, utf-8; q=0.7, *; q=0.7  Keep-Alive:  300  Connection:  keep-alive  Content-Type:  application x-www-form-urlencoded  Content-Length:  11   color=green   200  OK!   HUP 1  Date;  Mon,  21  Sep 2009  16:53:12 GMT  Server:  Apache 2.2.11   Win32   PHP 5.i,S    11.3  About HTML Forms   337   A  summary  of  the  steps  in  producing  a  form  follows:   1.  START:  Start  the  form  with  the  HTML     tag.  2.  ACTION:  The  action  attribute  of  the     tag  is  the  URL  of  the  server-side     C G I    script  that  will  process  the  data  input  from  the  form.   3.  METHOD:  Provide  a  method  on  how  to  process  the  data  input.  The  default  is   4.  CREATE:  Create  the  form  with  buttons,  boxes,  and  whatever  looks  attractive   the  get  method.   using  HTML  tags  and  fields.   5.  SUBMIT:  Create  a  submit  button  so  that  the  form  can  be  processed.  This  will   launch  the  PHP,  ASP.NET,  or  CGI  script  listed  in  the  action  attribute.   6.  END:  End  the  form  with  the     tag.   Table  11.4  shows  the  various  form  input  types.   Table  11.4  HTML Form Controls   Input  Type   Attribute   Description   button   name,  id   text   name,  id,  size,  maxlength   Creates a  generic button for user input.  It has no  default  action.   Creates  a  textbox  for user  input,  size specifies  the  size  of  the  textbox.  maxlength  specifies  the  maximum  number  of  characters  allowed.   Creates a  text area  that can  take input spanning multiple  lines,  rows  and  cols  specify  the  size  of the  box.   Like  textbox but  input  is  hidden.  Asterisks  appear in  the  box  to  replace  characters  typed.   Displays a  square box  that can be  checked.  Creates  name value  pairs  from  user  input.  Multiple boxes  can be  checked.   Like checkboxes,  except only one button   or circle   can be  checked.   Provides popup menus and scrollable lists.  Only one can be  selected.  Attribute  multiple  creates  a  visibly  scrollable  list.  A  size of 1  creates a  popup  menu with only one visible box.   Specifies files to be uploaded to the server. MIME type must  be  multipart form-data.   textarea   name,  id,  size,  rows,  cols   password   name,  id,  value   checkbox   name,  id,  value   radio   select   name,  id,  value   name,  id,  option,  size,  multiple   file   name,  id    338   Chapter  11      Working with Forms and  Input Devices   Table  11.4  HTML Form Controls  continued    Input Type   Attribute   Description   submit   image   name,  id,  value   When clicked,  executes the form; launches  egi.   sre,  name,  id,  value,  align   Same as submit button, but displays an image instead of  text.  The image is in a  file found at src.   reset   name,  id  value   Resets the form to its original position; clears all input  fields.   First  let's  see  how  input  gets  into  the  form  by  looking  at  a  simple  document   see  Figure  11.7   and  the  HTML  code  used  to  produce  it   see  Example  11.3 .  The  user  will  be  able  to  click a button  or  enter  data in  the  textbox.  The  input in  this  example won't be  processed when  the  Submit button  is  clicked.  Nothing will  be  displayed  by the  browser.   Browser Fillout  Form  http:  webserver from, html      name  name  name  address  address  address  credit  card  credit  card  credit  card      San Francisco     London     New York     Tokyo   Submit   Server  PHP  ASP   Form  data  processed   here   HTTP   CGI   Perl   Form  data  processed   here   Figure  11.7  The life cycle of a fillout form.   E X A M P LE   11.3        An  HTML  Form          <form name="forml"  id="forml"   action="http:  localhost formtest.php"  method="GET">     All About  You   Type your name here:         Talk about yourself here:    1   2    11.3  About HTML Forms   E X A M P LE      C O N T I N U E D    11.3    Choose your food:      339   4   5   6   7  8  9   1   <input type="radio"  name="choice"  id="choicel"  <input  tYpe="radio"  name="choice"  id="choice2"  <input  tYpe="radio"  name="choice"  id="choice3"   value="burger" >Hamburger  value="fish" >Fish   <input  tYpe="radio"  name="choice"  id="choice4"   value="steak" >Steak  value="yogurt" >Yogurt       Choose a work place:    <input type="checkbox"  name="place"  id="placel"  <input  type="checkbox"  name="place"  id="place2"  <input  type="checkbox"  name="place"  id="place3"   value="LA" >Los Angeles   value="SJ" >San Jose   value="SF"  checked  >San Francisco       Choose a vacation spot:          Hawaii     Bali     Maine     Paris                                         E X P L A N A T I ON   This  is  the  beginning  of  a     tag  that  specifies  where  the  browser  will  send  the  input  data  and  the  method  that will  be  used  to  process  it.  The  default method  is  the  GET  method.  When  the  data is submitted,  a server-side program,  in  this  ex- ample  a  PHP  script,  will  be  executed  by  the  server  on  the  local  machine.   CGI  scripts  were  the  traditional  way  to  process  data  submitted  on  a  server.     340   Chapter  11      Working with Forms and  Input Devices   EXPLANATION      C O N T I N U E D    2   3   4   5   6   7   8  9   The input type is  a textbox that will hold up to  50  characters.  When  the user  types  text  into  the  textbox,  that  text  will  be  stored  in  the  user-defined  name  value,  your_name.  For  example,  if  the  user  types  Stefan  Lundstrom,  the  browser  will  as- sign  to  the  query  string,  your_name=Stefan  Lundstrom.  If  assigned  a  value  attribute,  the  text  field  can  display  a  default  text  string  that  appears  in  the  textbox  when  it  is  first  displayed  by  the  browser.  The  id  attribute  can  be  used  by JavaScript  to  ma- nipulate  the  form  element.  The  user is  asked  for  input.  The  text area is  similar  to  the  text  field,  but will  allow  input  that  scans  multiple  lines.  The     tag will  produce  a  rectangle  named  "comments" with  dimensions in rows  and  columns   5  rows  x  50  columns   and  an  optional  default  value   I  was  born... .  The  user  is  asked  to  pick  from  a  series  of menu  items.  The  first  input  type  is  a  list  of radio  buttons.  Only one  button  can be selected  at a  time.  The input type  has  two  attributes:  a  type  and  a  name.  The  value  of the  name  attribute  "choice",  for  example,  will  be  assigned  "burger"  if  the  user  clicks  on  the  Hamburger  option.  choice=burger  is  passed  onto  the  PHP  program.  And  if the  user  selects  Fish,  choice=fish  will  be  as- signed  to  the  query string.  These  name value  pairs  are  used  to  build  a  query string  to  pass  onto  the  PHP  program  after  the  Submit button  is  clicked.  The  input  type  this  time  is  in  the  form  of  checkboxes.  More  than  one  checkbox  can  be  selected.  The  optional  default  box  is  already  checked.  When  the  user  se- lects  one  of  the  checkboxes,  the  value  of  the  name  attribute  will  be  assigned  one  of  the  values  from  the  value  attribute;  place=LA  if  Los  Angeles  is  checked.  The  user  is  asked  for  input.  The     tag  is  used  to  produce  a  popup  menu   also  called  a  drop-down  list   or  a  scrollable  list.  The  name  option  is  required.  It  is  used  to  define  the  name  for  the  set  of  options.  For  a  popup  menu,  the  size  attribute  is not necessary; it  defaults  to  1.  The  popup menu initially displays  one  option  and  expands  to  a  menu  when  that  option  is  clicked.  Only  one  selection  can  be  made  from  the  menu.  If a  size  attribute  is  given,  that  many  items  will  be   as  <select  multiple  name="whatev- displayed.  er"> ,  the  menu  appears  as  a  scrollable  list,  displaying  all  of the  options  and  the  user  can  select  more  than  one  option  by  holding  down  the  Ctrl  key  while  click- ing  the  option.  If  the  user  clicks  the  Submit  button,  the  PHP  script  listed  in  the  form's  action  at- tribute will  be  launched.  The  form  data will  be  URL  encoded  and  sent to  the  serv- er  program  assigned  to  the  form's  action  attribute.  If  the  reset  button   "Clear"   is  pressed,  all  input  boxes  are  reset  to  their  defaults.  This  tag  ends  the  form.  The  output  is  shown  in  Figure  11.8.   If  the  multiple  attribute  is  given    11.4  JavaScript and  the form  Object   341   File   Edit   View  History   Bookmarks   Tools  Help   C   ÎÈ   LJ   file:   C: wamp ™™™ examplel 1.3.html   Concatenation   J  [J  An HTML Form   M  About  Y ou   Type  your  name  here   Talk  about  yourself here  I  was  b o r n . ..   Choose  your  food  OH a m b u r g er   C  Fish  O S t e ak   O Y o g i nt   Choose  a  work  place:     L os   Angeles     San  J o se  0  San  Francisco   Choose  a  vacation  spot:  Hawaii  Bali  Maine  Paris   I  Submit   I  I  Clear      Figure  11.8  An HTML form.   11.4  JavaScript  and  the form Object   In the previous  example,  the HTML form  had nothing to  do with JavaScript.  After  a form  has been  filled  out,  the  user  clicks  a  Submit button  and  the  information  is  normally sent  from  the  browser  to  a  server  in  a  URL-encoded  format.  The  server  then  calls  a  server  helper  application  such  as  PHP  or  CGI  to  handle  the  information.  So  where  does Java- Script  come  into  all  of  this?  Well,  before  sending  the  form  information  to  the  server,  JavaScript  can  check to  see  if the  form  was  filled  out  properly;  for  example,  every input  field  can be validated by JavaScript.  It can check for  empty fields  or improperly filled  out  fields.  For  example,  it  can  check  for  the  correct  format  of  a  credit  card  number,  e-mail  address,  zip  code,  and  so  on.  In  addition,  rather  than  having  the  user  submit  the  form,  submission  can  be  controlled  bv  lavaScrint  witb  its  own  submit0  method  And  bv  nam-   342   Chapter  11      Working with Forms and  Input Devices   As shown in Example  11.3,  a document can have  a number  of HTML forms and input  types,  called  controls,  such  as  simple  textboxes,  radio  buttons,  checkboxes,  and  so  on.  JavaScript  provides  objects  that  parallel  HTML  tags;  for  example,  the  JavaScript form  object  parallels  the  HTML     tag  and  the  JavaScript  elements  object  parallels  the  input  devices  such  as  radio  buttons  or  checkboxes.   In  this  section  we  focus  on  the  structure  of the JavaScript form  object  and  how  to  use  it in  terms  of the  Legacy DOM  0,  but because  DOM  1  is  a standardized  version,  some  of  the  examples  will  include  that  version.  In  this  chapter  you  will  be  introduced  to  event  handling and  forms,  but events will  be  covered  in more  depth  in  Chapter  13.  This  chap- ter  also  includes  a  section  on  how  to  validate  input  data,  but  in  Chapter  17,  "Regular  Expressions  and  Pattern  Matching,"  you will  learn  how  to  check all  the  input  fields  of a  form,  using  the  magic  of  regular  expressions  and  pattern  matching  and  in  Chapter  15  we will use the W3C DOM  to manipulate  form  objects  and  fields   as well  as other HTML  elements .   11.4.1  Naming Forms and Input Types  Controls  for Forms  The name Attribute.  The  HTML  4.01  specification  calls  the  input  types  for  forms,  controls.  The  controls  are  listed  in  Table  11.4.  The  form  shown  in  Figure  11.8  displays  the  controls  in  the  browser  as  textboxes,  checkboxes,  select  menus,  radio  buttons,  etc.  The  controls  are  created  by  the  HTML     tag  shown  in  Example  11.3.  After  the  user  enters  data  into  the  form  or  clicks  a  button  to  make  a  selection,  the  data  is  collected  by  the  browser  and  normally  submitted  to  the  server  for  further  pro- cessing.  The  name  of  the  form  control  and  its  value  are  sent  as  name value  pairs   e.g.,  choice=fish  or  city=San  Francisco ,  to  the  server,  where  the  names  are  used  to  extract  the  values  associated  with  them.  This  means  that  if form  data will  be  used  in  a  server  script  such  as  PHP,  ASP.NET,  or  CGI,  the  name  attribute  is  required.   The id Attribute.  Before  the  server-side  program  is  called, JavaScript  can  be  used  to  validate  the  data  that was  entered  into  a  form,  manipulate  the  data,  collect the  form  data  and  display in  another window,  send  it in  an  e-mail,  and  so  on.  So  why  the  id  attribute?  Java-Script  uses  the  unique  its  associated  document.getElementByldO  method  to  identify  all  XML HTML  elements   nodes   within  the  document,  including  form  controls.  If the  form  data  is  not  going  to  be  sent  to  the  server  for  processing,  then  the  name  attribute  is  not necessary.  Because  the  form  control  can  be  referenced  either  by  its  name  or  a  unique  ID,  when  creating  form  fields,  it  is  customary  to  use  both  and  give  them  the  same  value  when  possible:1      id  attribute  and           11.4  JavaScript and  the form  Object   343   Normally  the  id  and  name  attribute  should  match  but  this  is  not  always  possible.  For  example,  when  creating  radio  buttons,  one  name  suffices  for  all  the  buttons,  because  only  one  of the  buttons  can  be  selected,  but  if you  use  the  id  attribute,  each  id  has  to  be  unique  as  shown  here:             In  Example  11.4  the  radio  buttons  are  named  using  the  same  name,  but  with  different  IDs.  After  the  user  clicks  a radio  button,  based  on  his  or  her  choice,  the  name value  pairs  from  the  form  are  collected  by  the  browser  and sent to  the  server-side  program   see  Fig- ure  11.9 .  If  the  method  attribute  is  GET,  the  name value  pairs  will  be  assigned  to  a  query  string  and  if  the  method  attribute  is  assigned  POST,  the  pairs  will  be  sent  in  an  HTTP  message body.  When the PHP server script called  color.php is executed, it receives  the  name value  pair  "color=green".  The  PHP  program  can  process  the  data,  send  it  to  a  file  or  database,  send  it in  an  e-mail,  respond  to  the  user,  and  so  on.  The  output  for  the  server  program  is  shown  in  Figure  11.10.  Notice  that the  id  attribute  values  are  not sent  to  the  server,  but  are  retrieved  via  the  getElementByldO  methods  so  that JavaScript  can  utilize  them.  Name  attributes  do  not  have  to  be  unique;  id  attributes  do.   EXAMPLE   11.4       2    Id  and Name  Attributes          <form name="forml"  id="forml"   method="GET"  action="http:  localhost color.php">   value="blue" >   value="green" >   Pick a color:    <input type ="radio" name="color"  id="rbuttonl"   Green      <input type ="radio" name="color"  id="rbutton2"   Blue      <input type ="radio" name="color"  id="rbutton3"   Yellow          e="submit" value="Send to Server"   >   value="yellow" >    344   Chapter  11      Working with Forms and  Input Devices   EXAMPLE      C O N T I N U E D    11.4  < s c r i pt    t y p e = "t e x t   j a v a s c r i p t ">   var  rbl=document.getElementById "rbuttonl" ;  var  rb2=document.getElementByld "rbutton2" ;  var  rb3 =document.getElementByld "rbutton3" ;  d o c u m e n t . w r i t e   " U s i ng   document.write rbl.value+" " ;  document.write rb2.value+" " ;  document.write rb3.value+" " ;   id   A t t r i b u te   : < br    t he      > "  ;                  EXPLANATION   The  form  is  an  object.  It  has  a  name  and  an  ID.  When  this  form  is  submitted,  it  will  use  the  GET  method  to  send  the  data  to  the  Web  server.  You  will  be  able  to  see  the  input  data  as  name value  pairs  right  in  the  location  box  of your  browser,  the  name  of the  input  device  being  the  key  and  the  user  input,  the  value.  The  input type  is  a radio  button.  The name  for  all  radio  buttons is  the  same  for  all  the  buttons  because  only  one  button  can  be  selected  by  the  user.  But  the  id  attri- bute  must  be  unique.  Therefore,  each  radio  button  has  the  same  name  but  a  dif- ferent ID.  If input  data  is  going  to  be  sent  to  a  server  program,  the  name  attribute  is necessary to  create  the  name value pairs.  If the  input data is going  to  be  used by  JavaScript  then  the  getElementByldO  method  can  use  the  unique  value  to  get  a  ref- erence  to  the  input  device.   3  When  the  submit  button  is  selected,  the  data  input  by  the  user  is  collected  in   name value  pairs  and  sent  by  the  browser  to  the  server.  The  HTML  form  ends  here.  In  the  following  script,  JavaScript  utilizes  the  id  attribute  to  access  the  data  for  each  of  the  radio  buttons.  The  getElementByldO  method  returns  a  reference  to  the  first  radio  button  by  using  its  unique  id.  The  variable  rbl  contains  the  reference.   7  Once  you  have  a  reference  to  the  button,  you  can  use  its  properties  with  the  dot   syntax.   5  6   7   1   2   4  5   6    11.4  JavaScript and  the form  Object   345   G  Id  and  Name  Attributes  -  Mozilla  Firefox  File   View  History   Bookmarks   Edit   Tools  Help   '   C   i ß1    j   file:   C: wamp ™™™ examplell   _i  Problem loading pagi   Concatenation   Pick  a  color:  Si  Green  O  Blue  0  Yellow   1  S e nd   to  S e r v e r "]   Using the  id Attribute  green  blue  yellow   6   Mozilla  Firefox  File  Edit  View  History  Bookmarks   Tools  Help      -  C  X  ô   Q   Concatenation   J  Problem loading p...   J  Problem loading p...   http   green is  a nice  color.   Figure  11.9  The  form  from  Example  11.4  using  both  the name a nd id attribute.   Figure  11.10  The  PHP  program  responds.  Note  the  name value  pair after the  ?  in  the  Location  box.   11.4.2  The Legacy DOM with Forms  The forms[ ]  Array.  Because  the  document  contains  forms,  the form  object is  a prop- erty  of  the  document  object.  Every  time  you  create  a  form  in  a  given  document,  the  browser  creates  a unique  form  object  and  assigns  it  as  an  element  of an  array,  called  the  forms []  array.  The  index  value  of  the  array,  starting  at  0,  corresponds  to  the  order  in  which  the  form  occurs  in  the  document;  the  first  form  is  assigned  to forms [0],  and  each  successive  form would  get  the  next index  value.  When  accessing a  form  from JavaScript,  the  first  form  to  appear  in  the  page  would  be  referred  to  as  document.forms[0]  and  the  next  form  document.forms[1 j,  and  so  on.  See  Figure  11.11.    346   Chapter  11      Working with Forms and  Input Devices   w i n d ow   d o c u m e nt   forms [0]   forms[1]   forms [2]   Figure  11.11  The JavaScript formsQ array parallels the HTML form elements.   If you  name  the  form  with  the  name  attribute  of  the  HTML     tag,  you  can  use  that  name  to  reference  the  JavaScript forms  object.  Rather  than  saying  documentforms  [0]  or  document forms [1 j,  you  can  reference  the  form  by  its  name.  For  example,  if  the  first  HTML  form  is  named  myforml,  the  correspondingJavaScript  object,  document.forms  [0],  can  now  be  referenced  as  document.myforml.  Even  better,  you  can  use  the  name  of  the  form  as  the  index  in  an  associative  array,  document.forms  ["myforml"]  where  the  name  of  the  form  is  the  index  value  rather  than  a  number.   The elementsU Array.  HTML  forms  contain  input  devices  like  buttons  and  text- boxes,  also  called  fields.  Similarly,  the JavaScript form  object  consists  of  a  property  called  elements.  This  is  a JavaScript  array  that  parallels  all  of the  HTML  fields  within  the  form.  Each  of  the  input  types  in  the  elements[]  array  is  also  an  object  in  its  own  right.  See  Figure  11.12.   w i n d ow   d o c u m e nt   forms[0]   forms[1]   elements [0]  elements[1]  elements!...]   elements [0]  elements[1]  elements!...]    11.4  JavaScript and  the form  Object   347   When  going  down  the  DOM  hierarchy,  document.forms  [0].elements[0]  refers  to  the  first  field  in  the  first  form.  The  element  objects  also  contains  properties,  such  as  the  name,  type,  and  value  of  the  field.  For  example,  document.forms  [0].elements[0].name  ref- erences  the  name  of  the  field  and  document.forms  [0].elements  [0].type  references  the  type  of  the  field,  such  as  submit,  reset,  button,  text,  radio,  or  checkbox.   is  easier   to  decipher   If you  name  the  field  or  input  types,  those  names  can  be  used  to  reference  the  corre- sponding  JavaScript  object.  For  example,  document.forms  ["myforml"]  .elements  ["your- name"]  .value  than  document forms  [0]  .elements  [0],value,  although  they reference  the  same  field  value.  Furthermore  if the  forms  on  the  page  are  reordered,  using the name  of the  form  element as  an  associative  array value  makes  it easier  to  move  the  object by name  rather  than by resetting the index values.  When you start using DOM  1  and  2  in  Chapter  15  the  form  and  its  elements  can  be  assigned  an  id  attribute.  The  id  attribute  must  be  unique  for  each  element.  It  is  used  with  the  getElementByldO  method  to  retrieve  a  reference  to  the  form  or  its  fields,  and  in  fact  it  can  be  used  to  retrieve  any  other  element  on  the  page  as  well.   The  following  example  contains  two  forms,  each  containing  input  types.  The  name  of  the  first  form  is forml  and  the  name  of  the  second  form  is form!.  Each  form  is  an  ele- ment  of  the forms []  array.   Properties  and  Methods   EXAMPLE   11.5    Two  Forms       <input  type="text"  <input  type="button"   name="yourname" : Type your name here  xbr  >  name="buttonl"  id="buttonl"  value="Push Button"   >          <input  type="radio"   <input  type="radio"   name="veggie"  id="veggiel"  value="bean"   >Beans  name="veggie"  id="veggie2"  value="carrot" >Carrots       Continues    348   Chapter  11      Working with Forms and  Input Devices   EXAMPLE    11.5     C O N T I N U E D     Object Hierarchy using  the  array notations  and  the  "name"  attribute    window I   document   forms[0]  "forml"   forms[1]  "form2"   elements[0] elements[1]  "yourname"   "buttonl"   elements[0] elements[1]  "veggie"   "veggie"   i   value  "bean"   Ï   value  "carrot"   The form  object  is  a  property  and  child  of  the  document  object.  Each  form  is  an  ele- ment  of  the forms []  array  and  each  form  has  properties  that  correspond  to  the  HTML  attributes  of  the  form  as  well  as  properties  that  describe  the  form.  As  discussed  previ- ously,  these  properties  might be  objects  in  their  own  right;  for  example,  the  button  prop- erty  of  the  form  is  also  an  object  with  its  own  properties.  Some  of the  properties  of  the  form  object  are  listed  in  Table  11.5  and  methods  are  listed  in  Table  11.6.  Properties  of  the  elements  object  are  listed  in  Table  11.7.    11.4  JavaScript a nd  the form  Object   349   Table  11.5  Properties of the forms Object   What  It  Describes   The  URL  to  the  server   where  the  form is sent .   An  object  representing  a  generic  button.   An  object  representing  a  checkbox  field.   An array  containing  an  element  for  each  form  field   radio  button,  checkbox, button,  etc.   defined within a  form.   MIME  type   application x-www-urlencoded   or  multipart form-data .   password   An  object  representing  a  password  field.   An  object  representing  a  file-upload  form  field.   An object representing a  hidden  field in a  form.   The  number  of fields  defined within  the  form.   get  or post   how  the  form  is  sent  to  the  server .   The  name  of the  form.   An  object  representing  a  radio  button  field.   An  object  representing  a  reset button.   An  object  representing  a  selection list.   An  object  representing  a  submit button.   References  the HTML  target  tag attribute,  the name  of the  frame  where  the user's  response  to  the submitted  form will be  displayed.   An  object  representing  a  text  field.   An object representing a  text area  field.   Table  11.6  Methods of the forms Object   What It Does   Submits a  form.   Resets  the  form  fields  to  their default values.   Property   action   button   checkbox   elements   encoding   FileUpload   hidden   length   method   name   radio   reset   select   submit   target   text   textarea   Method   reset  0   submit        350   Chapter  11      Working with Forms and  Input Devices   Table  11.7  Properties of the elements Object   What It Describes   Property   form   type   disabled   value   The name of the  form object where the element was defined   read- only  .   The name of the input device as specified in the HTML name attribute   read-only .   The type of input device, such as radio, checkbox, password, and so  on   read-only .   A Boolean value; if true the element is disabled so  that it can't be  modified; even if it contains a value, data from a disabled form field is  not sent back  to  the server.   The  text that is associated with the input device,  such as the text  entered into the text area or textbox, the text that appears in a button,  and so  on   read write .   11.4.3  Naming  Forms and  Buttons  How JavaScript References a Form by name or id.  The     tag has  a  name  attribute  that allows you  to  give your  form  a name.  It is somewhat  easier  and  more read- able  to  reference  a  form  by its  name  than  by using  the  array syntax,  such  as forms [0]  and  forms [1 j.  You will  need  the  name  attribute  if you  are  submitting  the  form  to  a server-side  program  as  discussed  in  Section  11.4.1.   Any  object,  including the  form,  can  also  be  referenced  by using its  unique  ID  and  the   getElementByldO  method  of  the  document,  standardized  by  the  W3C  DOM.   In Example  11.6,  two  HTML forms are  created:  One  contains  a textbox,  and  the  other  a  button.  Each  of  the  forms  is  given  a  name  with  the  name  attribute  and  an  id.  In  the  JavaScript program,  the  two  forms  are  accessed  by using  the  name  and  the  id  of the  form  and  its  elements.   E X A M P LE    11.6        Naming  Forms  object           l   2   Enter your name:  <input  type="text"    11.4  JavaScript and  the form  Object   351   EXAMPLE   11.6     C O N T I N U E D                        DOM Level 0.  How do we reference the form in JavaScript?     Go down the document tree:  window document form.property     The window object can be left off, because it is at the top  document.write   "The first form is named:  " +   document.write   ". The second form is named:  "  +  document.write ". Also can be referenced as:   "  +   window.document.forms["forml"].name ;  document. forms [ " form2 " ] . name   ;  1 document [ " f orm2 " ] . name 1 + " .   "   ;  1 document.form2 .name 1 + " . "  ,   document.write "Another way to reference a form:   "  +     DOM Level 1. The standardized W3C DOM way  document.write " Using the id attribute to get the form \  var fl = document.getElementById "first_form" ;  var f2 = document.getElementById "secondform" ;  document.write "The first form is named "  + fl.name +  document.write "The first form is named "  + f2.name +   name, " ;     define variables   ". " ;  ". " ;   4  5  6  7   8   9   10   11   12                  EXPLANATION   L   2  3  4  5   6  7   The  name  of  the  first  HTML  form  in  the  document  is forml.  The  id  attribute  is  as- signed fi rs t_fo rm.  The  input  type  for  this  form  is  a  text  field  with  a  default  value  "Name:  ".  This  tag  ends  the  first  form.  The  name  of  the  second  form  is forml.  Its  id  is  second_form.  The  input  type  for  this  form  is  a  button with  the  value  "Press  here",  which will  ap- pear  as  text  in  the  button.  This  tag  ends  the  second  form.  The JavaScript  program  starts  here.    352   Chapter  11      Working with  Forms a nd   Input Devices   EXPLANATION   8   9   To  display  the  name  of  the  first  form,  descend  the JavaScript  tree,  starting  at  the  window,  to  the  document,  to  the  first form  object  named form  1,  to  its  name  property.  We  could  write  documentforms  [Oj.name  or  document forml.  name,  but  by  using  the  form  object  as  a  property  of  the  document  and  the  associative  array  notation  with  its  name  in  square  brackets,  it  is  easier  to  identify  the  object  as  a  form  object  by  name  if  there  are  a  number  of  forms  on  the  page.  To  display  the  name  of  the  second  form,  descend  the JavaScript  tree  as  in  line  8.  This  time  we  left  out  the  window  object,  which  is  fine  because  JavaScript  knows  that  the  window  is  always  at  the  top  of  the  tree.  See  Figure  11.13.   10  Although  this  chapter  focuses  on  the  JavaScript  legacy  DOM  0  when  working  with  forms,  all  HTML  elements  are  accessible  via  the  DOM  Level  1,  the  standard- ized  DOM,  which  all  modern  browsers  should  support.  Navigating  forms,  images,  and  links  with JavaScript  has  always  been  supported  by  D OM   0  and  is  still  widely  used.   11  The  getElementById    method  returns  a  reference  to  the  HTML  element  by  the  id  that  was  assigned  to  it  on  line  1.  In  most  of  the  examples,  the  name  and  id  are  the  same,  but  in  this  example,  they  are  different  to  make  it  clear  that  the  id,  not  the  name,  is  used  to  get  a  reference  to  the  element.  The  variable, !,  is  a  reference  to  the  first  form.   12  Now  that  we  have  a  reference  to  the  form,  we  can  use  it  and  the  dot  notation  to   get  its  name.   '" Naming Forms object - Mozilla Firefox  File  Edit  Vie1.-;   : History  Bookmarks   Tools  Help   C   t f il    i_   file :   C: wamp www examplel 1.6new.html   <1  ^ipxes     l"^  Radio Buttons']   AOL Mail  1     ^  Naming Fur     I"1]  Naming For...   Enter your name: [Name:      Press  here   The first form is nallied  forml  The  second form is named  fomii.  Also  can  be  referenced  as:  document["form2"].namet  Another  way to  reference  a  form  docwnent.form2.name.   Using the id  attribute to  get the  form name,  The first form is named Forml  The first form is named forrni    Object   button   checkbox   radio   reset   select   submit   text   textarea   11.4  JavaScript and the form Object   353   The  elements  and  properties  of  the  HTML     tag  are  shown  in  Table  11.8.   Table  11.8    Tag  Elements and  Properties   Property   Purpose   name,  type,  value   A general-purpose GUI button.   checked,  defaultChecked,  name,  type,  value   A set of  or one   clickable boxes allowing multiple  selections.   FileUpLoad   name,  type,  value   hidden   name,  type,  value   password   defaultValue,  name,  value   A field allowing a file to be submitted as part of a  form.   A  field where the content is not shown in the  form.   A field for entering a password, masking the real  characters  typed.   checked,  defaultChecked,  name,  type,  value   A set of  or one  clickable boxes allowing only one  selection.   name,  type,  value   A button that clears and resets the form fields.   length,  name,  options,  selectedlndex,  type,  value   A popup or scrolling list of items from which to  choose.   name,  type,  value,   A button used for submitting form data.   defaultValue,  name,  type,  value   A rectangular field allowing one line of input.   defaultValue,  name,  type,  value   A rectangular box allowing multiple lines of input  value.   How JavaScript References the Form Elements by Name.  Each  form  object  is  an  element  of  the forms []  array  and  each  form  contains  input  types  such  as  buttons,  textboxes,  checkboxes,  and so on.  Each of the input types is also stored in an array called  elements []  in  the  order  in  which  the  input  device  is  found  in  the  document.  In  the  fol- lowing  example,  there  is  one  form,  called  myform.  It  contains  two  elements,  button  input  types,  named  buttonl  and  button2,  respectively.  The JavaScript  program  gets  access  to  the  form  and  button  properties  by  using  names  to  reference  them.  An  object  can  be  referenced  by  using  the  numeric  array  notation,  or  referenced  by  its  name  with  the  dot  notation;  that  is,  object  first,  then  dot  and  name,  or  by  putting  the  name  as  a  string  in  square brackets   associative  array .  If there  are  a number of forms  and buttons, using the    354   Chapter  11      Working with Forms and  Input Devices   to  be   changed.  Writing  need  ment.forms[2].eIements[l]  would  make   document["form3"] ["button2"]  the  change  easier.   in  place   of  docu-  If the  first form  on  the page is named  "myForm",  there  are  several ways  to reference it:   And  to  name  a  form's  input  element:   document.forms[0]  document.forms.myForm  document.forms["myForm"]   document.forms[0].elements[0]  document .myform.buttonl  document["myForm"]["buttonl"]   EXAMPLE      11.7     Naming But tons       Naming Forms and Buttons          1  2  3  4   5  6  7   8   <input type="button" name="buttonl"  id="buttonl"  <input type="button" name="button2"  id="button2"   value="red"  >  value="blue"  >          document .write   " Form name is:  "  +  document .write   " Form name is:  "  +   document .write   " Name of first button is:  "  +   document.myform.name  +  " " ;  document["myform"].name  +" " ;  document["myform"]["buttonl"].name  +  " and its type is "  + document.myform.buttonl.type ;  document["myform"]["buttonl"].value ;  + document.myform.button2.name ;  + document.myform.button2.value ;   document .write   " Value of buttonl f ield:  " +   document .write   " Name of second button is:  "  document. write  " Value of button2 field :  "              11.4  JavaScript and  the form  Object   355   EXPLANATION   1   2   The  HTML  form  starts  here.  It is  named  my form. JavaScript can now reference  the  form  by  its  name.  The  input  type  is  a  button  named  buttonl  and  assigned  a  value  of  red.  JavaScript  can  now reference  the  button  by its name.  The  id  attribute will  not be  used in  this  example.  It  is  here  because  it  is  common  to  use  both  a  name  and  id  for  the  form  and  its  elements.  The  id  gives JavaScript  another  way  to  get  access  to  the  object,  which  will  be  covered  in  detail  in  later  chapters.  The  input  type  is  a  button  named  button2  and  assigned  a  value  of blue.  The  form  ends  here.   3  4  5  Within  the JavaScript program  the  form  is  referenced  by its  name.  It is  a property  of  the  document  object.  Without  naming  the  form,  it  would  be  referenced  as  doc- umentforms  The  name  assigned  to  the  first button  is  displayed.  Putting the  name  as  a string in  square  brackets   associative  array   is  a  common  approach  to  naming  forms  and  their  elements.  Without naming the  form  or  the  button,  it would  be  referenced  as  typos  here.  Spelling  my- document.forms[0].elements[0].value.  form.name  as  myforml.name  causes  the  output  to  be  myforml  is  undefined.  See  Fig- ures  11.14  and  11.15.   It  is  easy  to  make   [Oj.name.   6   7  Using  the  associative  array  notation,  the  name  for  the  form  is  a  string  inserted  in  the  first  set  of  brackets,  and  the  second  element,  a  string  name  for  buttonl  is  in- serted in  the second set of square brackets.  We use  the  dot notation  to retrieve  the  value  of  the  type  property  for  the  form's  button.   8  Using  the  two-dimensional  associative  array  notation,  we  retrieve  the  value  that   was  assigned  to  buttonl,  which  is  red.   1  Naming Buttons  - Mozilla  Firefox  File   '¿lew  History   Bookmarks   Edit   Tools  Help   C   t^f1   i_j   file:   C: wamp www examplel 1.7.html   Form and Element Properties   Form and Element Properties   Naming  buttons   reel   blue   Form  name  is:  myfoim  Form  name  is:  myfoim  Name  of first  button  is:  buffottland  its  type  is button  Value  of buttonl  field: red    356   Chapter  11      Working with Forms and  Input Devices   ^ M r r or   Console   All   ^  Errors   J  Warnings   Messages   ^   Code:   _   d o c u m e n t . m y f o r ml   is  undefined  File :    C :  waino www example 11.7. html   Figure  11.15  What went wrong? Watch your spelling! We tried to reference a form  by the wrong  name!   11.4.4  Submitting Fillout Forms  Submitting an  HTML Form Without JavaScript,  w h en   the  user  clicks  a  submit  button,  the  form  is  normally  sent  to  the  server  for  further  processing  by  another  appli- cation such as a PHP, ASP.NET,  or  CGI  script.  Before  the server gets the  form, its content  is  gathered  by  the  browser,  URL  encoded,  and  then  sent  to  the  address  supplied  in  the  action  attribute  of the  form.   In  the  previous  examples,  the  action  attribute  was  not  used  because  there  was  no  reason  to  process  the  user  input  in  the  sample  forms.   The  appli- cation  on  the  server  side  decodes  and  processes  the  form  information.  From  there,  an  acknowledgment  can  be  sent  back  to  the  user,  an  e-mail  delivered,  the  processed  infor- mation  sent  to  a  database,  or  whatever  else  we  define.  Now  let's  look  at  an  example  of  an  HTML  form  and  how  it  is  submitted  to  a  server  application.  After  the  user  fills  out  the  form,  he  or  she  will  click  the  Submit  button.  The  form  data will  be  collected  by  the  browser  as  name value pairs  and sent to  the server.  The  method  attribute  determines how  the  data  is  sent   as  a  query  string  or  message  body   and  the  action  attribute  determines  where  it will  be  sent   the  URL  of  a  server .   E X A M P LE    11.8        An  HTML  Form             All About  You      Type your name here:         Choose a work place :    <input  type="checkbox"  name="place"   1   2   3    11.4  JavaScript and  the form  Object   357   EXAMPLE     C O N T I N U E D    11.8     <input  type="radio"  name="status"   value="senior"  id="senior"   >    senior           adult           child       Choose a vacation spot:         Hawaii     Bali     Maine     Paris                                  4   5  6   7           EXPLANATION   l   The  form  starts  here.  The  action  attribute  contains  the  URL  of the  server  program  that will  get  the  form.  The  method  being  used   how  the  form  will  be  sent   is  the  post  method.  This  is  the  most  common  method  used  with  forms.   2  The  user  is  asked  to  type  something  into  a  text  field  box.  3   The  user  is  asked  to  check  a  box  for  his  or  her  place  of work.   4   The  user  is  asked  to  select  a  vacation  spot  from  a  select menu,  or  drop-down  list.  Because  this  is  set  to  multiple,  it  allows  more  than  one  option  to  be  chosen.   5  When  the  user  clicks  the  Submit  button,  the  form  is  sent  to  the  URL   server  pro-  gram   assigned  to  the  action  attribute  of  the     tag.    358   Chapter  11      Working with Forms and  Input Devices   t ut    I  "1   file :   C: Documents  and  Settings Owner My  Documents example 11.9nol;      An  HTML  Form  -  Mozilla  Firefox  Bookmarks  File   View  History   Edit   Tools   Help   J  An  HTML  F o rm   All About You   Type your name here:  D e b b ie   J e an   S a v a ge   Choose a work place:     Los Angeles     San Jose  0 San  Francisco   What is your age category?  O  senior  SI adult  O  cliilil   Choose a vacation spot:  Hawaii  Bali  M a i ne  P a r is   S u b m it    I   [ C l e ar   Figure  11.16  AnHTMLform.   Submitting a Form with an Image Button.  The  type  gives  you  another way to submit a  form.  You  can replace  the standard  Submit button with  a graph- ical  image.  The  src  attribute  must be  included  to  specify the  location   URL   of the image.  As with other image tags, the alt attribute   HTML 4.0   should be used to give replacement  text  for  browsers  that  cannot  load  the  image.  Many  browsers  rely  on  either  the  name  or  value  attribute  as  alternate  text,  so  if  there  is  any  doubt,  all  three  attributes  for  the  same  purpose  should  be  used.   image   input   E X A M P LE    11.9        An  Image  Input  Type            Enter your name:       11.4  JavaScript and the form Object   359   EXAMPLE      C O N T I N U E D    11.9   < input type="image"  name="submitbutton"  src="submit.gif"   alt="submit"   >                          EXPLANATION   3   4  5   l  2  3   The  HTML  form  starts  here  using  the  POST  method  to  send  the  form  input.  The input type is  text.  The user  enters his  or her  name  here.  The  input  type is a  GIF image submit button. When the user clicks on the image,  the  form will be submitted and sent to  the  CGI  program  assigned to  the  form's ac- tion  attribute.  The  src  attribute  is  assigned  the  URL  of the  submit.gif image.  If  the  image  can't  be  loaded,  the  alt  attribute  will  cause  the  word  "submit"  to  appear  where  the  image  should  go.   4  When  the  user  clicks  the  Reset  button   see  Figure  11.17 ,  the  textbox  will  be   cleared.  The  HTML  form  ends  here.   5   and Settings Owner My Documents example 11.10.html   Eniei  your name   Jack  Sjprat   Figure  11.17  An  image as a  submit button   IE .   Çi   i h m i t t i nn   n  F o rm   w i th    I r i v r i ^ r r i nt    f F v o nt   H n n H l o rO    A   Hi' ç r i i ç ç i nn    nf    f o r m«    360   Chapter  11      Working with Forms and  Input Devices   on  what  event  is  triggered,  something  will  be  done  in  response.  A  function  might  be  called,  a  form  can  be  validated—something happens.  See  Figure  11.18.   Q  Send  discount and  place  my order   f ^^   Ho thanksTjust place  my order   or           Figure  11.18  The  user  initiates an  action,  a nd   an  event  is triggered.   With  a  form,  an  event  handler  allows  you  to  control  whether  the  form  is  submitted  or  cleared.  For  example,  after  the  user  has  filled  out  the  form,  normally  it  is  sent  right  off to  a  CGI,  PHP,  or ASP  program  on  the  server  side  to  be  processed.  But if a JavaScript  event  handler  is  set  up,  then  when  the  user  clicks  the  submit  button,  the  handler  can  check the  input  data,  and  based  on  what  comes  in,  determine  whether  to  go  ahead with  the  submission  of  the  form  data  or  reject  it  without  refreshing  the  page.  That  way,  the  user doesn't have to wait for  the  form  to go  to the server, have it validated  there,  and then  sent  back  for  mistakes  that  could  have  been  corrected  right  away.   See  section  "Form  Validation with  Regular  Expressions"  on  page  765  in  Chapter  17  for  a  complete  discus- sion.   Likewise,  before  clearing  all  the  values  typed  into  the  form,  an  event  handler  can  confirm  with  the  user  that  this  is  really  what  he  or  she  wants  to  do,  before  resetting  all  the  input  devices  to  their  default  values.   With  forms  there  are  two  event  handlers  that  allow  you  to  catch  the  form  before  it  goes  to  the  server.  They  are  the  onClick  event  handler  and  the  onSubmit  event  handler.  The  onReset  event  can  be  used  to  clear  the  form's  input  devices  or  to  stop  them  from  being  cleared.   The  onClick Event Handler.  One  way  to  either  accept  or  reject  the  submission  is  to  use  the  onClick  event  handler.  The  onClick  event  handler  is  an  attribute  of the  HTML  sub- mit or button  input type.  When  the  user  clicks  the button,  the  event is  triggered,  and if the  handler  function  returns  true,  the  form  will  be  submitted;  otherwise,  it will  be  rejected.   E X A M P LE    11.10        onClick Event Handler and Forms    1       function readySubmlt  {   if confirm "Are you ready to submit your form?  "  {   return true;   }  else{    11.4  JavaScript and  the form  Object   361   EXAMPLE   11.10     C O N T I N U E D        <form  action=,,http:  cgi-bin testform.cgi"   2   3   4   method="post">  Enter your user id:  <input  type="text"   name="textbox"  value=""   >      Type your password:  <input  type="password"   name="secret"   >       <input  type="submit"  onClick="readySubmit  ;"  >               EXPLANATION   2   1   The  JavaScript  function  called  readySubmit    is  defined.  It  will  display  a  confirm  dialog  box.  If  the  user  clicks  OK,  a  true  value  will  be  returned  and  the  form  will  be  submitted.  If the  user  clicks  Cancel, false  will  be  returned,  and  the  form  will  be  stopped   see  Figure  11.19 .  The  form  starts  here.  When  submitted,  it will  go  to  the  server-side  CGI  program.  The  URL  of  the  CGI  program  is  assigned  to  the  action  attribute  of  the  HTML     tag.  The  input  types  for  this  form  are  a  text  field  and  a  password  field.   3  4  When  the  user  clicks  the  submit  button,  the  onClick  event  handler  is  triggered.  It   will  handle  the  event  by  invoking  the  JavaScript  function  called  readySubmit  .   Enter your user id: babyblue  Type your password:    i S u b m t   Q u e ry    i   [JavaScript  Application]   *1   Are you ready to submit your form?   I   OK   I   I  Cancel   ]    362   Chapter  11      Working with Forms and  Input Devices   The  OnSubmit Event Handler.  Another important form  event handler, called onSub- mit, will  also be  triggered when the user  clicks the submit button or presses the Enter key,  just  before  the  form  is  submitted.  The  onSubmit  event  handler  is  added  as  an  attribute  of  the     tag   and  only  the     tag ,  to  control  what  happens  when  the  user  clicks  the  submit  button.  When  a  function  is  assigned  to  the  onSubmit  event  handler,  if  the  value  returned  by  the  function  is  true,  the  form  will  be  submitted  to  the  server,  but  if it  returns false,  the  form  will  be  stopped  and  the  user will  be  given  a  chance  to  reenter  data  in  the  form.  Example  11.11  produces  the  same  output  as  the  previous  one,  but  notice  the  placement  of the  handler.  Instead  of being  associated  with  a  button,  it  is  associated  with  the  form  and  set  as  an  attribute  of  the     tag.   E X A M P LE    11.11        onSubmit  Event  Handler and Forms    1       function readySubmlt  {   if confirm "Are you ready to submit your form?  "  {  else{   return true;}  return false;}   }              <form  action="cgi-bin testform.cgi"   method="post"  onSubmit="return readySubmit   ;"  >   2   3   Enter your user id:  <input  type="text"   name="textbox"  value=""   >      Type your password:  <input  type="password"         name="secret"   >               E X P L A N A T I ON   1   The JavaScript  function  called  readySubmit    is  defined.  It  will  display  a  confirm  dialog  box.  If  the  user  clicks  OK,  a  true  value  will  be  returned  and  the  form  will    11.4  JavaScript and the form Object   363   E X P L A N A T I ON      C O N T I N U E D    2   3   The  onSubmit  event  handler  is  an  attribute  of  the  HTML     tag.  It  will  catch  the  form  just  before  it  is  sent  off  to  the  server.  When  the  user  clicks  the  submit  button,  the  event  handler  readySubmitQ  will  be  invoked.  If  the  event  handler  is  called  by  the  onSubmit  attribute  of  the     tag,  an  explicit  return  must  be  used   see  Figure  11.20 .  The input type is a submit button.  When the user  clicks  this button,  the JavaScript  onSubmit  event  is  triggered.   See  line  2.    Enter your user id:   b a b y b l ue  Type your password:    S u b m jt   Q u e ry    i   [JavaScript  Application]   *1   Are you  ready  to  submit your  form?   I   OK   I   I  Cancel      Figure  11.20  Submitting  a  form  a nd   the  onSubmit event  handler.   The  OnReset Event Handler.  The  HTML  reset  button  allows  the  user  to  clear  the  form  fields  and  set  them  back  to  their  default  values.  JavaScript  will  let  you  set  up  an  onReset  event  handler  to  either  accept  or  reject  this  action.  This  event  handler  can  be  used  to  make  sure  that  clearing  an  entire  form  is  really  what  you  want  to  do  before  it's  too  late,  especially  if you've  done  a  lot  of  typing  and  don't want  to  reenter  all  that  data.  It  is  an  attribute  of  the     tag.   E X A M P LE    11.12        The  onReset  Event        function resetAll  {   if confirm "Do you want to reset the form to its default   + " values? "  {   1  2  3   4   return true;   }  else{   return false;    364   Chapter  11      Working with Forms and  Input Devices   EXAMPLE   11.12     C O N T I N U E D        <form  action=,,http:  cgi-bin testform.cgi"   method="post"  onReset="return resetAHO;"   >   5   6   7   8   Enter your user id:  <input  type="text"   name="textbox"  value="Name? "  id="textbox"   >  value="Name? "  >   Type your password:  <input  type="password"  name="secret"  id="secret"   >         <input  type="reset"   value="Reset  Form" >                  EXPLANATION   1   2   3  4  5  6,  7  8   The  function  called  resetAHO  is  defined.  It  is  invoked  when  the  onReset  event han- dler  is  triggered.  If the user  clicks the Reset button  on line  8, he  or she sees  this confirm  dialog box,  a  true  value  will  be  returned  by  this  function,  allowing  the  reset  to  clear  all  the  input  fields  and  set  them  back  to  their  original  values.  If a  value  true  is  returned,  the  fields  will  be  cleared.  If  a  value  of false  is  returned  by  this  function,  the  reset  action  will  be  dismissed.  The  form  starts  here.  The  onReset  event  handler  is  an  attribute  of  the     tag.  The  input  types  for  this  form  are  a  text  field  and  a password  field.  The  reset  button  is  used  to  reset  the  form  fields  back  to  their  original  values.  When  this  button  is  clicked,  the  onReset  event  handler  will  be  triggered.  See  Figure  11.21.    11.4  JavaScript and  the form  Object   365   !  The  onReset  Event  - Mozilla  Firefox  File   Bookmarks   History   View   Edit   Tools   Help   '   C   i i3    L_   file :   C: Documents  and  5ettin   ling V...   Assigning V...   Assigning V...   Assigning V...   Do  you  want  Firefox  to  remember  the  password  for  "Name?  "  on  file:  ?   Enter your user id: Name?  Type your password:             S u b m it   Q u e ry        R e s et   F o rm       Figure  11.21  choice  before  the  input  boxes  are  reset  to  their  default values.   f he   user clicked  the  Reset  Form  button,  f he   dialog  box confirms the   11.4.5  The this Keyword  The  this  keyword  is  especially  helpful  when  dealing  with  forms.  We  used  the  this  word  when  working  with  objects  as  a  reference  to  the  current  object.  For  forms  containing  multiple  objects,  such  as  checkboxes,  radio  buttons,  and  textboxes,  it  is  easier  to  refer  to  the  object with  the  this  keyword  than  by using its  full  name when  calling  a  function.  When  using  an  event  handler,  the  this  keyword  always  refers  to  the  object  that  trig- gered  the  event.  If  the  event  is  triggered  from  within  the     tag,  this  refers  to  the  current form, but if it is triggered by an element within the  form, such as an input device,  then  it  references  that  element.  Each  element  has  a form  property  that  references  the  form  in which  it was  created.  In  the  following segment  of an  HTML  document,  note  that  when  the  onClick  event  handler  is  triggered  within  the  first  button  input  type,  the form  property is  used  to  reference  the  form  itself,  whereas  in  the  second  button,  the  this  key- word  refers  to  the  current  button.   F O R M AT     <input  type="button"   value="Print  Form Stuff"  onClick="display_formval this.form ;"   <input  type="button"   value="Print  Button Stuff"  onClick="display_buttonval this ;   >   <-- The JavaScript  form object  <-- This a JavaScript element    >  <--  this keyword references the   form object by using the  element's  form property   <--  this keyword references the  current object,  the button    366   Chapter  11      Working with Forms and  Input Devices   EXAMPLE  11.13        An HTML form and the  "this"  keyword and   Event  Handler        function  checkForm forml {   if forml.your_name.value ==  "" {      Check for an empty string  alert "Please type in your name" ;  return false ;   }  else{   return true ;   }   }              <form method="post"   action="http:  localhost cgi-bin check.pi"  onSubmit="return  checkForm this ">       Type your name here:                           EXPLANATION   1  2  3   4   5  6   1   The  function  called  checkForm    is  assigned  to  the  onSubmit  event.  When  the  user  clicks  the  submit  button,  the  event  is  triggered  and  as  a  result,  the  checkForm  function  is  called.  The  this  argument  is  a  reference  to  this  form.  In  checkForm,  the  parameter  is  called forml,  called  on  line  4  with  the  this  keyword,  which  is  a  refer- ence  to  the  form.   2  When  following  the  DOM  hierarchy, forml  refers  to  document forms  [0].  The  text  field  was  named  your_name  on  it  can  be  referenced  as  docu- mentforml  ,your_name.  The  value  property  refers  whatever  was  entered  in  the  text  field.  We  are  checking  to  see  if the  text  field  is  the  empty string,  in which  case we  will  alert  the  user.  The  user  is  alerted  to  enter  his  or  her  name  in  the  text  field.   line  5.  Now   3    11.4  JavaScript and  the form  Object   367   E X P L A N A T I ON    CONTINUED    5   6   The  HTML  input  type  is  a  text  field  named  your_name,  which  will  display  up  to  50  characters.  The  HTML  input  type  is  a  submit  button.  When  the  user  clicks  this  button,  the  onSubmit  handler  in  line  4  is  triggered.  If  the  return  value  from  the  function  check_Form  is  true,  the  form  will  be  submitted  to  the  server,  located  at  the  URL  shown  in  the  action  attribute  of  the  form  named  info.   Using the button Input Type Rather than submit.  As  shown  the  previous  examples,  before  the  browser  sends  data  to  the  server,  an  onSubmit  or  onClick  event han- dler  is  triggered  when  the  user  clicks  the  submit  button  or  presses  the  Enter  key.  But  what if you  don't want  the  form  to  go  off to  the  server?  Then  you will  have  to  reject  the  submission  or  the  browser  will  reset  all  the  field  values  to  their  defaults.   in   If the  form  is  not  going  to  submit  data  to  a  server,  the  button  input  type  can  be  used  instead  of  the  submit  button.  The  button  object  has  no  default  behavior  and  is  used  as  a  triggering device so  that when  the user  clicks  the button, it causes something to happen.  The  onClick  event  handler  is  commonly  used  with  buttons  and  is  set  as  an  attribute  of  the  button  input  type.  The  onClick  event  handler  is  triggered  when  the  user  clicks  the  button  associated  with  it.   E X A M P LE   11.14        button  input  type        function greetme  {   alert "Why did you click me like that?  " ;   }                  <!-- event handler for a button is an attribute for its  input type -->  <input  type="button"  value="Click me!"  onClick="greetme  "   >   1   2   3  4               E X P L A N A T I ON    368   Chapter  11      Working with Forms and  Input Devices   E X P L A N A T I ON    CONTINUED    The  input  type  is  a  simple  graphical  button  containing  the  text  "Click  me!"   3  4  When  the  user  clicks  the  button,  the  onClick  event  handler  is  triggered  and  the  function  called  greetme    is  called.  It will  send  an  alert  dialog box  to  the  screen,  as  shown  in  Figure  11.22.   Figure  11.22  Using  a  button  to  call  a  function.   11.4.6   The submit    and reset    Methods   In  addition  to  event  handlers   fully  discussed  in  Chapter  13 , JavaScript  provides  two  methods  for  the forms  object,  the  submitQ  and  the  reset     methods.  These  methods  emu- late  the  event  handlers  of the  same  name:  The  submitQ  method  submits  the  form just  as  though  the  user  had  clicked  the  submit  button,  and  the  reset0  method  resets  the  form  elements  to  their  defaults just as if the user had  clicked  the reset button.  Neither  of these  methods  trigger  the  onSubmit  or  onReset  event  handlers.   Note  that  the  methods  must  be  spelled  with  lowercase  letters.   These  methods  allow  you  to  ask  for  user  confirma- tion,  check input  data,  and  so  on,  before  sending  the  form  to  the  server  for  processing.   E X A M P LE   11.15        An  HTML  Form         <£orm name =myForm   1   action="http:  localhost cgi-bin environ.pi"  method="post">        All About You     11.4  JavaScript and  the form  Object   369   EXAMPLE    1 1 . 15    CONTINUED      Talk about yourself here:   <textarea name="comments"   align="left"  rows="5"  cols="50">I was born...          Choose a work place:    <input  type="checkbox"   name="place"  value="LA"   >Los Angeles      <input  type="checkbox"   name="place"  value="SJ"   >San Jose      <input  type="checkbox"   name="place"  value="SF"  checked   >San Francisco                Click here to submit this form         Click here to reset this  form            EXPLANATION   The  form  called  myForm  starts  here.  When  the  form  is  submitted,  it will  go  to  the  address  assigned  to  the  action  attribute,  and  the  method—how  the  form  is  sent—  is  the  post  method.  The  text  field  input  type  will  accept  a  line  of text  from  the  user.  The  text  area  box will  accept  up  to  5  rows  of  text  from  the  user.  The  user  can  select  any  of  the  checkboxes.  The  default,  San  Francisco,  is  checked.  The  link  has  been  deactivated  with  the  .  When  the  user  clicks  the  link,  the  on- click  event  will  be  triggered  and  cause  the  JavaScript  submitQ  method  to  be  in- voked   see  Figure  11.23 .  The  form  data  will  be  sent  to  the  URL  assigned  to  the   „f TU„   -TU„  7 IDT   „  RRL   „„   TU„   3   4   5   6   l   2  3  4  5    370   Chapter  11      Working with Forms and  Input Devices   All About You   Type your name here: Danny Duck   Talk about yourself here:  in   D i s n e y v i l le   I  w as   b om    . ..    l o ng   a go   Choose awork place:  F"Los Angeles   San Jose   D San Francisco   Click here to submit this form   Click here to reset tius form   Figure  11.23  When  the  user clicks  one  of the  links,  either  the submitO or  the resetO  m e t h od   will  be  invoked.   Displaying a Form's Content in a Popup Window.  After  filling  out  a  form,  you  might want to  display the  form  content for  confirmation before submitting it to  a server.  This  can  be  done  by  creating  another  window,  called  a popup,  and  outputting  the  form  data  dynamically  into  that window.  Example  11.16  uses JavaScript  to  open  a  new win- dow  to  display  the  gathered  form  data  from  another  file.   E X A M P LE    11.16        Display  Form  Input       function showForm myform   {   +  " ";   NewWin=window.open 11,11,1width=300,height=2001 ;  name_input=" Your name:  "  + myform.user_name.value  NewWin.document.write name_input ;  phone_input=" Your phone:  "  + myform.user_phone.value  NewWin.document.write phone_input ;   +  " ";   }  function  close_window  {  NewWin.window.close  ;   1  2  3  4   5  6    11.4  JavaScript and  the form  Object   371   EXAMPLE  11.16   CONTINUED    7  8   9      Display form data in a little window    <form name="formtest"»   Please enter your name:           Please enter your phone:           <input  type="button"   value="show form data"  onClick="showForm this.form ";   >   10      Click here to close little window                          EXPLANATION   l  A JavaScript  function  called  showForm    is  defined.  Its  only  parameter  is  a  refer-  ence  to  the  name  of  the  form;  in  this  example,  myform.   2  A  new  window  object  is  created  with  the  window's  open    method.  3   The  variable  called  name_input  is  assigned  a  string  that  will  contain  HTML  tags  and  the  value  that was  assigned  to  the  form's  text  field.  The  document  of  the  new  window  will  display  the  string  value  assigned  to  the  variable  name_input  in  line  3.  The  document  of  the  new  window  will  display  the  string  value  assigned  to  phone_input.   4   5   6  This  function  will  close  the  new  window.  The  HTML  form  called formtest  starts  here.  7  8  The  input  type  for  this  form  consists  of two  text  fields  that will  be  used  to  obtain   the  name  and  the  phone  of the  user.   9  When  the  button  input  device  is  clicked,  the  onClick  handler  will  be  invoked.  This  is when you will  see  the  new little  window  appear  on  the  screen with  all  the  form  data.   10  The JavaScript void 0   operator  has  the  effect  of deactivating  the  link so  that  it will  not  try  to  go  to  some  URL  when  clicked   like  the    in  Example  11.17 .  Instead,    372   Chapter  11      Working with Forms and  Input Devices   > Display  Form  Input  - Mozilla  Firefox   1  Display Form  Input  - Mozilla Firefox  File   Bookmarks   History   Viei'V   Edit   Tools   Help   File: yjicZ.:  wamp w.w.w example 11.17. html   I    t>   AOL  Mail   Q ^^    GMC  I  2009  New  Vehicle...  Q ~]   Q  Maming  Buttons   ]     Q  Mi   Display  form   lata  m al  Display  form   lata  m al  Please enter your name:  Please enter your name:  Mick Main  Please enter your phone  760-234-1 £34  [ i show form data: J Click here   ö  Mozilla  Firefox   file:    C:  wamp www example 11.17. html   M  n  X   Your name:  Nick Main  Your name:  Nick Main  Your name:  Nick Main  Your name:  Nick Main  Your name:  Nick Main  Your phone:  760-234-1234  Your phone:  760-234-1234  Your phone:  760-234-1234  Your phone:  760-234-1234  Your phone:  760-234-1234   Figure  11.24  Form  d a ta   is displayed  in  another window,  called  a  p o p up   window.   11.5  Programming  Input  Devices   Controls    With JavaScript, you  can  alter  the  contents  of the  form's  input  devices  dynamically   also  called  controls  or  elements .  Because  each  input  device  is  an  object,  each  has  properties    11.5  Programming  Input Devices   Controls    373   The text Object.  The  text  object  represents  the  HTML  text  field     and  also  has  name  and  value  fields.  To  reference  a  text  field  from JavaScript,  go  down  the  document  tree,  starting  at  the  document,  then  to  the form,  and  then  the  text  element.  To  get  a  value  in  the  text  field,  for  example,  you  would  use  the  following  syntax:  document.forml.textboxl.value,   w h e re f o r ml   is  the  name  of the  form  and  textboxl  is  the  name  of the  text  field.  Shown in  Figure  11.25  is  the  JavaScript  object  hierarchy  for  the  text  object.  Table  11.9  lists  its  properties  and  Table  11.10  lists  its  methods.   w i n d ow   I  d o c u m e nt 1  form I text   Property   accessKey   alt   defaultValue   disabled   form   Figure  11.25   f he text object  within  the  JavaScript  hierarchy.   Table  11.9  Properties  of the text Object   What  It  Describes   By default, pressing an access key sets focus to the text object. The  object receives focus when the user simultaneously presses the Alt key  and the access key assigned to an object.   Sets or returns alternate text to display if a browser does not support  text fields.   The value assigned to the value attribute, and the default value the user  sees in the  textbox when it first appears.   Sets or returns whether or not a text field should be disabled.   The name of the form where the textbox is defined.    Chapter  11      Working with Forms and  Input Devices   Table  11.9  Properties  of  the text Object   continued    Property   What It Describes   The  type of the input device;  for example,  text.   Sets or returns whether or not a text field should be read-only.   Sets or returns the size of a text field.   Sets or returns the tab order for a text field.   Returns the type of form element a text field is.   The value attribute that will be assigned whatever the user types in the  textbox.   Table  11.10  Methods  of  the text  Object   What It Describes   Removes focus away from the object.   Puts focus on the object.   handleEvent   evmt    Invokes the handler for a specified event.   Selects or highlights text in the box.   Turns off the watch for a particular property.   Watches, and when a property is changed,  calls a  function.   type   readonly   size   tablndex   type   value   Method   blurO   focus  0   select      unwatchQ   watch      E X A M P LE    11.17        Text  Boxes       <form name="forml"  id="forml">   Enter your name:   <input  type="text"  name="namefield"  id="namefield"  size=30  value="Name:  "  onFocus="document.forml.namefield.select  "   >   1   2   3    11.5  Programming  Input Devices   Controls    375   EXAMPLE    1 1 . 17   CONTINUED    5  6                   How do we reference  the form's  text  field in JavaScript?      Go down  the document  tree:  document.form[].element.property   document.write   "The type of the input device is:  " +     document.write   "The type of the input device is:   "+       document.write   "  The textbox is named:  " +  document.write "  The value in the text field is: "   document.forml.name field.type ;  document["forml"]["namefield"].type ;  document.forml.name field.name ;  +  document.forml.namefield.value ;  + document.forml.name field.size ;   document.write "  The size of the text field is: "       Using the id attribute of the element   var  tfield=document.getElementById "namefield" ;  document.write " The id of the textbox is  "+tfield.id ;  document.write " The  name of the textbox is  " +   tfield.name+" " ;                     EXPLANATION   The  form  starts  here  in  the  body  of the  document.  The  input  type  is  a  textbox,  named  namefidd  with  a  default  value  "Name:  ".   l  2  3  When  the  mouse  cursor  is  clicked  in  this  box,  the  onFocus  event  is  triggered  and   4   5   the  selectO  method  causes  the  value  in  the  textbox  to  be  highlighted.  Instead  of using  the  long,  drawn-out,  DOM  hierarchy,  the  this  makes  it  easier  to  reference  this  input  type.  The  property  for  the  textbox,  named  namefield,  is  accessed  using  the  DOM  hier- archy.  The  output  is  shown  in  Figure  11.26.   6  An  alternate way to  access  the  property of the  textbox  is  to  shed  the  array  format,   in  this  case  a  two-dimensional  associative  array.    376   Chapter  11      Working with  Forms a nd   Input Devices   '  Text Boxes  - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help   C   i i3    lJ    file:   C: wamp w™™ examplel   Naming For...   Naming For...   Naming For...   gFor...  Enter your name:  N a m e:  The type  of the  input  device  is:  fexf  The type  of the  input  device  is:  fexf  The  textbox  is  named:  namefield  The  value  in  the  text  field  is:  Name:  The  size  of the text field  is:  30  The  id  of the  textbox  is  namefield  The  name  of the  textbox  is  namefield   Figure  11.26  The textbox and its properties.   EXAMPLE   11.18           Assigning Value  on  the  Fly to  a Text  Field    1   2  3   4  5   6                    Enter your  name  <input  type="text"  name="yourname"  id="yourname"  size="60" >      Click  in  the box  <input  type="text"  name="message"  id="message"  size="60"  onClick="this.value='Greetings and Salutations,  1 +  document.forms["forml"]["yourname"].value+  1!1;"    >           11.5  Programming  Input Devices  Controls    377   E X P L A N A T I ON   l  An  HTML  form  called forml  is  started.  2  3  4  5  6   The input type  for  this  form  is  a textbox that will hold up  to  60  characters.  The  name  of  the  textbox  is yourname.  The second input type is  also  a  textbox.  The  name  of  this  textbox  is  message.  The  onClick  event handler is  triggered when  the user  clicks inside  this  textbox.  It  concatenates  the message  "Greetings  and Salutations"  to whatever was typed in  the  first box,  and  assigns  that value  to  this  textbox,  called  message.  To  clear  all  the  boxes,  the  user  can  click the  Reset button.  See  Figures  11.27  and  11.28.   7   Figure  11.27  The user enters his or her name in the first text field.   Enter your name EMS   Click  in  the  box  P   R e s et       Enter your  name   Elvis   Click  in  the  box  ¡Greetings  and  Salutations,  Elvis!   R e s et       Figure  11.28  When the  user clicks in the second  textbox,  a  message appears.   The password Object.  The  password  object is  much like  the  text  object except that  the input does not appear as text, but as asterisks or bullets,  depending on the browser.  The idea is to prevent a snoopy onlooker from seeing what is being typed in the box, but  this  is  hardly a  safe  or  secure  type  of password.  If you  look at the  source  of the  HTML  document,  anywhere  the  actual  password  is  spelled  out,  it  appears  in plain  text  for  the  viewer  of the  source.   The  password  object  parallels  the  HTML  password  field     and  also  has  name  and  value  fields.  To  reference  a  text  field  from JavaScript,  you  go  down  the  document  tree  starting  at  the  document  the  form  and  then  the  text  element  To  aet    378   Chapter 11      Working with Forms and Input Devices   d o c u m e nt 1  form 1   password   Property   accessKey   alt   defaultValue   form   id   maxLength   readonly   size   tablndex   type   Figure  11.29  The password object within  the  JavaScript  hierarchy.   Table  11.11   Properties of the password Object   What  It  Describes   Sets or retrieves the keyboard key to access a password field.   Sets or retrieves an alternate text to display if a browser does not  support password fields.   The value assigned to the value attribute, and the default value the  user sees in the password field when it first appears.   A reference to the form where the password field is defined.   Sets or retrieves the id of the password field. Used with  getElementById    method.   The name used to reference the password box. Used by the browser to  set name value pairs sent to a server when the form is submitted.   Sets or retrieves the maximum number of characters in the password  field.   Sets or retrieves whether or not the password field should be read- only.   Sets or retrieves the size of the password field.   Sets or retrieves the tab order for the password field.   The type of the input device   i.e., password .    11.5  Programming  Input Devices  Controls    379   Table  11.12  Methods  of  the password  Object   What It Describes   Removes focus from the password box.   Puts focus on the password box.   handleEvent     Invokes the handler for a specified event  JavaScript  1.2 .   Selects or highlights text in the box.   Turns off the watch for a particular property.   Watches, and when a property is changed,  calls a  function.   Method   bhir     focus  0   select      unwatchQ   watch      EXAMPLE   11.19        Password  Boxes        function verify pw {   if    pw.value == "letmein"  {   alert "The chamber door will open now!" ;   alert "Sorry,  you cannot enter.   Please leave."  ,   else{   }   }                   Welcome To The Secret Chamber      To enter,  a password is required:       <input  type="password"   name="passwfield"  size="30"  onBlur="return  verify this " >                   380   Chapter 11      Working with Forms and Input Devices   1  EXPLANATION   1   l   2   3   4  5   6   The  function  called  verify     is  defined  with  one  parameter,  a  reference  to  a pass- word  object.  If the  value  of the  password  box  is  equal  to  the  string  letmein,  the  user  is  told  he  can  enter.  If the user  didn't type in the  correct password, he or she will be sent a message in  an  alert box.  The  HTML  form  named forml  starts  here.  The input type is a password box.  When the user types something into  the box, a  series  of dots  appears.  The  onBlur  event  handler  function,  called  verifyO,  is  invoked  when  the  user  leaves the box and clicks his or her cursor anywhere else on the page. The purpose  of the handler is  to  check that the user  typed in  a correct password.   7  When the user clicks the button, the onBlur event handler is triggered.  See Figures   11.30  and  11.31.   Figure  11.30  The password object.    11.5  Programming  Input Devices  Controls    381   Welcome  To  The  Secret  Chamber   To  enter,  a  password  is  required:   Figure  11.31  The user enters a  password  that isn't correct and  receives the alert  message.   The  textarea Object.  If you don't have enough room to say it all in a text field, then  you can use the text area box for multiple lines of input.  The  textarea object parallels the  HTML     tag.  The  number  of characters  in  a line  is specified with  the  cols  attri- bute  of  the     tag,  and  the  number  of rows  in  the  box  is  specified  by  the  rows  attribute.  If the  wrap  attribute is defined, when the user reaches  the  end  of a line,  a new- line will  be  inserted  and  the  input will  start  on  the  next line;  otherwise  a scrollbar will  appear.  The  textarea object, like  the  text object, has a number  of properties and methods  that  make  it  possible  to  access  and  change  the  text  area  from  within  a JavaScript  pro- gram.  These  are shown in Tables  11.13  and  11.14.   To reference a text area box from JavaScript, you go down the document tree, starting  at  the  document,  then  to  the form,  and  then  the  textarea  element.  To  get  a  value  in  the  text  area  box,  for  example,  you  would  use  document.forml  .textareal.value,  where forml  is  the  name  of the  form,  and  textareal  is  the  name  of the  text  area.  Figure  11.32  shows  the JavaScript  object  hierarchy  for  the  textarea  object.    382   Chapter 11      Working with Forms and Input Devices   Table  11.13  Properties  of the textarea Object   What  It  Describes   Sets or returns the keyboard key to access a textarea.   Sets or returns the width of a textarea.   The value assigned to the value attribute, and the default value the user  sees in the text area when it first appears.   Sets or returns whether or not a textarea should be disabled.   The name of the form where the text area is defined.   Sets or returns the id of a textarea.   The name used to reference the text area.   Sets or returns whether or not a textarea should be read-only.   Sets or returns the height of a textarea.   Sets or returns the tab order for the textarea.   The type of the input device; i.e., textarea.   The value attribute that will be assigned whatever the user types in the  text area.   Table  11.14  Methods  of  the textarea  Object   What  It  Describes   Removes focus from the text area box.   Puts focus on the text area box.   handleEvent      Invokes the handler for a specified event  JavaScript 1.2 .   Selects or highlights text in the text area box.   Turns off the watch for a particular property.   Watches, and when a property is changed, calls a function.   Property   accessKey   cols   defaultValue   disabled   form   id   name   readonly   rows   tablndex   type   value   Method   blurQ   focus  0   select      unwatchO   watch       11.5  Programming  Input Devices   Controls    383   w i n d ow   I   d o c u m e nt I form I textarea   Figure  11.32  How  the textarea object  is  created  within  the  JavaScript  hierarchy.   E X A M P LE    11.20        Text  Area  Boxes                     Finish the story   1   2  3  4  5  6             Once upon a time,  there were three little  ...         document.forml.story.type ;  document. forml. story. name   ;  "text area is:  "+document.forml.story.rows ;  + document.forml.story.value ;  +  "area is: "+  document.forml.story.cols ;   document.write   "The type of the input device is:   "+  document.write   "  The text area is named:  " +  document.write "  The number of rows in the  "+  document.write "  The value in the text area is: "  document.write   "  The number of cols in the text  "           384   Chapter 11      Working with Forms and Input Devices   EXPLANATION   2  3  4   1  An HTML text area is defined.  Its name is story and it consists of 8 rows and 60 col- umns.  The  text,  "Once upon  a  time,  there were  three little..."  appears in the  text area.  The  name  of  the  text  area  is  story.  It  is  a  textarea  object.  Its  type  is  textarea.  The  value  of the  name  property is  displayed.  The  rows property of the text area contains the number of rows that were assigned  in  the  rows  attribute  of the  text  area.  This is  the value  of the  text that appears inside  the  box.  The cols property of the text area contains the number of columns that were assigned  in the cols attribute of the text area.  The output is shown in Figures  11.33 and  11.34.   5  6   Finish  the  story  O n ce   u p on   a  t i m e,   t h e re   w e re   t h r ee   l i t t le   ...   J   The  type  of  the  input  device  is:  t e x t a r ea  The  t e xt   area  is  named:  s t o ry  The  n u m b er   of  r o ws   in  the  t e xt   area  is: 8  The  value  in  the  t e xt   area  is:  Once upon  a time,  there were  three  little  ...  The  n u m b er   of  cols  in  the  t e xt   area  is: 60   Figure  11.33  The textarea object.   !  T e xt   A r ea   B o x es   -  M o z i l la   F i r e f ox   II  Ei'    Edit   View   History   Bookmarks   Tools   Help   O   i ii    0   file:   C:  Documents and Settings Owner My Documents example 11.21. html   !  Restore Session    T e xt  Boxes   Q  Text Boxes      Assigning Value  ...  Q  Assigning Value  ...  Q  Assigning Value  ...   1      Finish  the  ston   O n ce   u p on   a  t i m e,   t h e re   w e re   t h r ee   l i t t le   ...  p i gs   a nd   t h ey   w e re   w o r r i ed   a b o ut   t he   b ig   b ad   w o lf    11.5  Programming  Input Devices  Controls    385   Selection  Lists  Drop-Down Menus .  The  HTML     tag  defines  a  field  for  display  as  a  drop-down  or  a  scrolling  box.  A  select  list  consists  of  menu  items  called  options.  JavaScript  supports  a  select  object.  The  select  object  can  be  named  but  the  options  cannot.  However,  the  select  object  has  an  options  property   unique  to  DOM  0   that  is  an  array  of  all  the  option  items,  so  that  if you  have  to  get  access  to  one  of  the  options,  remove  or  add  options,  you  can  use  the  options  array.  The  selectedlndex property  contains  a  number  that  represents  the  index  number  of  the  option  that  has  been  selected.  If,  for  example,  the  first  option  in  the  menu  is  selected,  then  the  value  of  the  selectedlndex property  is  0   because  array  elements  start  at  0 .  To  get  a  value  in  the  selec- for  example,  document.forml.select 1.options  [0].value,  where  tion  forml  is  the  name  of  the  form,  selectl  is  the  name  of  the  select  object,  and  options [0]  is  the  first  option  in  the  list.  Tables  11.15  and  11.16  list  the  properties  and  methods  of the  select  object.  Figure  11.35  shows  the  JavaScript  object  hierarchy  for  the  select  object.   list,  you  could  use,   Table  11.15   Properties  of  the select Object   What  It  Describes   Property   disabled   form   id   length   multiple   name   options []   size   tablndex   type   Sets or retrieves a value that indicates whether the user can interact with  the drop-down list.   The name of the form where  the select is defined.   Sets or retrieves the id of a drop-down list.   The number of items in the select list;  same as options, length.   Sets or retrieves whether or not multiple items  can be selected.   The name used to reference  the select menu.   An array of option objects describing each of the selection options.  Can  modify select options   JavaScript  1.1 .  The options  object has properties:  index  length,  text,  selected,  value.   selectedlndex   The integer index value of a  selected option, -1  if no  option is selected.  This value can be modified.  If set to an index value, that option is selected,  and  all  others  deselected.   Sets or retrieves the number of visible rows in a  drop-down list.   Sets or retrieves the index that defines the tab order for the select object.   Two  possible values for the select object;  if multiple is on,  the value is  select-one  and  if  not,  select-multiple.    386   Chapter  11      Working with Forms and  Input Devices   Table  11.16  Methods  of  the select Object   What It Does   Removes focus  from the select box.   Puts  focus in the select box.   handleEvent     Invokes  the handler for a specified event   JavaScript  1.2 .   Turns off the watch for a particular property.   Watches, and when a property is changed, calls a  function.   Method   bhir     focus  0   unwatchQ   watch  0   w i n d ow V d o c u m e nt 1  form 1  select 1   option   Figure  11.35  How the select object  is  created  within  the  JavaScript  hierarchy.   E X A M P LE    11.21         Drop-Down  Menus           Select a Course  <form name^'forml"»        Intro to   Perl    1  2  3    11.5  Programming  Input Devices   Controls    387   EXAMPLE   11.21     C O N T I N U E D     Intro to   Unix     Shell   Programming           document.write "The name of the selection list is  ",   document.write " The number of items in the selection"+  document.write " The item currently selected is option["+         document.forml.menul.name ;  "list is ",  document.forml.menul.length ;  document.forml.menul.selectedlndex  +  "]" ;  document.forml.menul.options[0].text ;  document.forml.menul.options[1].text ;   document.write " The text in the first selection is  " +  document.write " The text in the second selection is  " +   4   5  6   7   8   9                     EXPLANATION   l  The  HTML  form  named forml  starts  here.  The  action  and  method  attributes  are  not   included  here  because  this  form  is  not  being  sent  to  a  server.   The  options  that will  appear  in  the  menu  are  listed.  This  ends  the  select  list.  The JavaScript  program  starts  here.  It  displays  the  properties  of  the  select  object.  The  name  of  the  select  object  is  displayed.  The  number  of options  in  the  select  list is  displayed.   2  The  select  tag  starts  a  drop-down  list  named  menul;  it  has  four  options.  3  4  5  6  7  8  The  index  value  of  the  option  selected  by  the  user  is  displayed.  If no  option  has  been  selected,  the  value  of  selectedlndex  is  —1.  If  one  has  been  selected,  the  index  value  of the  option is  displayed.  The  options  are  in  an  array where  the index starts  at  0.  The  first  option  is  at  index  0,  the  second  option  is  index  1,  and  so  on.  The  actual  text  shown  in  the  list  for  the  first  option  is  displayed,  followed  by  the  text  in  the  second  selection.  The  output  is  shown  in  Figures  11.36  and  11.37.   9    388   Chapter  11      Working with  Forms a nd   Input Devices   The name of the selection list is menul  The number of items in the selection list is 4  The item currently selected is option[-1]  The text in the first selection is Intro to Perl  The text in the second selection is Advanced Perl   Figure  11.36  A  selection  list's  properties  b e f o re   a n y t h i ng   has  b e en   selected.   Select a Course  Intro  to  Perl  A d v a n c ed   Perl  Intro  to  Unix  Shell  P r o g r a m m i ng   Select a Course    A d v a n c ed   Perl    Shell  P r o g r a m m i ng   The name of the selection list is menul  The number of items in the selection list is 4  The item currently selected is option[2]  The text in the first selection is Intro to Perl  The text in the second selection is Advanced Perl   Figure  11.37  A  selection  list's  properties  after  an  item  has  b e en   selected.   EXAMPLE   11.22        Drop-Down  Menus        function  schedule f {   if f.menul.selectedlndex  ==  0 {   1  2  3       Could  also  say:  document.forml.menul.selectedlndex  f.textl.value="PL100,  Feb 3-7,  9am to 5pm,  Room 2133,   Dr. Baloney "       Could  also  say:  document.forml.textl.value   }  if f.menul.selectedlndex  ==  1 {   f.textl.value="PL200  Feb  10-13  9am to  5pm,  Room 209B,   Ms.  Eclectic";   }    11.5  Programming  Input Devices   Controls    389   EXAMPLE   11.22     C O N T I N U E D    if  f.menul.selectedlndex == 3 {   f.textl.value="SH201 Apr 10-13  9am to 5pm,  Room 209B,   Miss Bashing";   }   }                        Select a Course   <select name="menul"  slze="4"   onChange="schedule this.form ">  Perl   Perl     Intro to   Advanced   Intro to    Shell   Unix   Programming                             EXPLANATION   1  A  function  called  schedule    is  defined.  The  parameter, ,  represents  the form  object;   2   3   4  5   is,  document forml.   that  If the  first item  in  the  select menu  is  checked,  the  selectedlndex value  is  0.  The  num- ber  represents  the  index into  the  options []  array, where  options [0]  is  the  first option.  If  the  first  option  was  selected  in  the  menu,  then  the  value  of  the  textbox,  called  textboxl,  is  assigned  a  string  describing  the  "Intro   to  Perl"  course.  This  assignment  updates  the  textbox  field  dynamically.  The  form,  named forml,  starts  here.  The  select menu  called  menul  will  contain  a list  of four  options.  The  onChange  event  will be  triggered for  this event as soon  as something is  entered in one  of the  options.    390   Chapter  11      Working with Forms and  Input Devices   Figure  11.38  After the  user selected  the third  option  in  the  menu,  the textbox  is  u p d a t ed   dynamically.   Select a Course   1 A d v a n c ed   Perl  IliOTiltilViTCM  1 Shell  P r o g r a m m i ng   UX101  Mar  2-6  3am  to  5pm,  R o om   203,  Mr.  N e r d ly   Select a Course  I Intro  to  Perl  Advanced  Perl   IIntro  to  Unix   Shell  P r o g r a m m i ng   PL200  F eb   10-13  3am  to  5pm,  R o om   203B,  Ms.  Eclectic   Figure  11.39  The  user selects another  menu  item.   Multiple Selects.  If  you  use  the  multiple  attribute  of  a  select  list,  more  than  one  option  can  be  selected.  To  select more  than  one  item,  hold  down  the  Control  key while  clicking  on  an  item.  If more  than  one  item  is  chosen,  the  selectedlndex value  will  indicate  only  the  first  one  that  was  selected.  To  test  whether  more  than  one  option  has  been  selected,  you  can  use  the  selected  property  of the  options  object.  This  property will  result  in  true  if  an  option  has  been  selected; false  otherwise.  See  Example  11.23.   E X A M P LE    11.23        Drop Down Menus        function  showme form {   var choices="";  for   i=0;i<  form.vacation.options.length;i++ {   if   form.vacation.options[i].selected ==  true {  choices  +=  form.vacation.options[i].text+"\n";   }   }  alert choices ;   1  2  3  4  5   6    11.5  Programming  Input Devices   Controls    391   EXAMPLE    11.23   CONTINUED                  Where do you want to go?    <select name="vacation"  size=4 multiple»   7  8    Maui    Jamaica    Bali    Virgin  Islands                                   EXPLANATION   1   2  3   4  5   6   7  8   The  function  called  showmeQ  is  defined.  It is  passed  one  parameter,  a reference  to  a form  object.  The  variable  called  choices  is  declared  and  assigned  an  empty  string.  The or loop  is  entered.  The  initial  value,  i,  is  set  to  0.  As  long  as  the  value  of i  is  less  than the length  of the  options  array,  the body of the loop will be entered;  thus,  as long as we  haven't looped  through  all  the  options in  the  menu,  the  loop will  be  entered.  If the  option  from  the  menu was  selected,  the  selected  property will  evaluate  to  true.  If an  option was  selected,  the  variable,  called  choices,  will  be  assigned  the  text  val- ue  of  the  option;  perhaps  Maui  or  Bali  will  be  assigned  to  choices.  Each  time  through  the or loop,  if  an  option  is  selected,  it  will  be  appended  to  the  variable,  resulting  in  a  string  that  contains  all  of the  selected  options.  The  alert  dialog  box  will  display  the  string  value  containing  all  the  options  that  were  selected.  The  HTML  form  called forml  starts  here.  The  HTML  select  menu  called  vacation  starts  here.  It  will  contain  four  menu  op- tions,  and  allow  multiple  selections.  See  Figure  11.40.    392   Chapter 11      Working with Forms and Input Devices   3  Multiple  S e l e c ts   -  Microsoft  I n t e r n et   Explorer  provided  by  A m e r i ca   0   J  File   Edit   View   Favorites   Tools   Help   J   Back   -   -  @  g]   f S Jl     S e a r ch    [ ^ F a v o r i t es    ^ H i s t o ry   J  Address   file:   C: sambar50 docs ch 11  multiple_selects.html?vacation=Bali   Where  do  you  want to  go?  Maui  Jamaica   Figure  11.40  Multiple selections were  made  by the avid  traveller.   Radio Buttons.  Like  the  buttons  on  an  old-fashioned  radio,  you  can  only push  one  button when using HTML radio buttons.  When  a radio  button is  checked,  it is selected,  and when another button is checked,  the previously checked  one is deselected.  In short,  only one button at a time can be checked. This type of button is useful if you want a user  to  be  able  to select only one  of a list of items.   Radio  buttons  are  created  with  the  HTML     and  are  represented  in JavaScript  as  a  radio  object with  specific properties  and  methods  used  to  manipulate  the  object.  Each button  is  a  property  of the  radio  object  and  assigned  to  an  array  of ele- ments  in  the  order  in  which  they  are  placed  in  the  form.  The  checked  property  of  the  radio  object specifies whether  a button was  checked.  It returns Boolean  true if the button  was  selected,  and false  if not.   window   d o c u m e nt I    11.5  Programming  Input Devices   Controls    393   To  reach  a  value  in  the  radio  list,  for  example,  you  would  use  document forml  .radio!,   where forml  is  the  name  of  the  form,  and  radiol  is  the  name  of  the  radio  object.   Figure  11.41  shows  the JavaScript  object  hierarchy  for  the  radio  object.  Tables  11.17   and  11.18  list  the  properties  and  methods  of  the  radio  object.   Table  11.17   Properties  of  the radio  Object   What  It  Describes   Sets or retrieves the keyboard key to access a radio button.   Sets or returns alternate text to display if a browser does not support  radio buttons.   checked   Is true if the radio button was selected,  false if not.   defaultChecked   Refers to  the checked attribute of the radio input tag—what the user  sees as a default checked box when the buttons first appear.   The name  of the form where the radio buttons are defined.   Sets or retrieves the id of a radio button.   The name used to reference the radio input tag.   Sets or retrieves the tab order for a radio button.   Refers to  the type attribute of the radio input tag.   Refers to  the value attribute of the radio input tag.   What  It  Does   Removes focus from the select box.   Simulates a mouse being clicked on the button.   Puts focus in the select box.   Table  11.18  Methods  of  the radio  Object   handleEvent     Invokes the handler for a specified event  JavaScript  1.2 .   unwatchO   watch      Turns off the watch for a  particular property.   Watches, and when a property is changed,  calls a function.   Property   accessKey   alt   form   id   name   tablndex   type   value   Method   blurQ   click      focus       394   Chapter  11      Working with Forms and  Input Devices   EXAMPLE   11.24        Radio  Buttons       function changeBg f {   for   var i = 0;  i < f.color.length;i++ {  document.bgColor=  f.color[i].value;   if f.color[i].checked {   }   }   }                     Pick a background color:   <input  type=radio   <input  type=radio   <input  type=radio   name="color"  value="0099CC   name="color"  value="33 99 66   name="color"  value="FF00FF   name="color"  value="FFFF66   <input  type=radio   <input  type=radio   name="color"  value="FF9933      <input  type=button       >dark cyan     >teal     >magenta     >light yellow     >light orange    value="Click for Color" onClick="changeBg this.form ;"   >                  EXPLANATION   1   A function called changeBgO is defined.  It will take one parameter,  a reference to the  form where  the radio  buttons  are  defined.  The parameter could  also be written us- ing  the  DOM  hierarchy:  document.form[0]  or  document.formradio   the  form's  name .    11.5  Programming  Input Devices  Controls    395   E X P L A N A T I ON     CONTINUED    3  4   5  6   If a  radio  button  was  checked,  the  checked  property will  return  true.  If checked,  the  color  of the  background will  be  changed by assigning the  value  of  the  radio  button's  value  attribute  to  the  bgColor property  of the  document.  The  form  is  defined.  It  is  named formradio.  The  input  type  is  a  radio  button,  named  color.  Only  one  button  can  be  selected   see Figure  11.42 .  The  value is  a hexadecimal  color  code.   7  When  the  user  clicks  this  button,  the  onClick  event  handler  is  triggered  and  the  handler  function  changeBgO  is  called,  using  the  this  keyword  and  the form  object  as its  argument.   Radio  Buttons   Pick  a background  color:   teal   Id ark cyan   magenta  Click  for  Color  light yellow  light  orange   Reset   Figure  11.42  Using  radio  buttons;  only one can  be checked.   Checkboxes.  Although radio buttons can only be checked once, a user can check as  many checkboxes as he or she wants.  When  a checkbox is  clicked, it is  on,  and when it  is not, it is  off.   Checkboxes  are  created  with  the  HTML     and  are  represented  in JavaScript  as  a  checkbox object with  specific properties  and  methods  used  to  manipu- late  the  object.  Each  checkbox  is  a  property  of  the  checkbox  object  and  assigned  to  an  array of elements in the  order in which  they are placed in the form.  The  checked property  of  the  checkbox  object  specifies  whether  a  box  was  checked.  It  returns  true  if  checked,  and  false  if not.   To  reach  a  value  in  the  checkbox  list,  you  could  use,  for  example,  docu- is  the  name  of   is  the  name  of  the  form,  and  chechl   ment.forml.chechl,  where forml    396   Chapter 11      Working with Forms and Input Devices   window   I   d o c u m e nt I form I   checkbox   Table  11.19  Property   accessKey   alt   checked   defaultChecked   disabled   form   id   name   tablndex   type   value   Figure  11.43  How the checkbox object  is  created  within  the  JavaScript  hierarchy.   Properties  of  the checkbox Object   What  It  Describes   Sets or returns the keyboard key to access a checkbox.   Sets or returns an alternate text to display if a browser does not  support checkboxes.   Returns true if the checkbox is checked.   Returns true if the   tag includes the checked attribute, a default  box that is initially checked; otherwise, returns false.   Sets or returns whether or not a checkbox should be disabled.   The name of the form where the checkbox is defined.   Sets or returns the id of a checkbox.   A string that names the checkbox.   Sets or returns the tab order for a checkbox.   The type of input device; i.e., checkbox.   The text assigned to the value attribute.    11.5  Programming  Input Devices  Controls    397   Table  11.20   Methods  of  the checkbox Object   Method   bhir     click  0   focus  0   unwatchQ   watch      What It Does   Removes  focus from  the  checkbox.   Simulates a mouse being clicked in the  checkbox.   Puts  focus in the checkbox.   handleEvent     Invokes the handler for a  specified event   JavaScript  1.2 .   Turns  off the watch for a particular property.   Watches, and when a property is changed, calls a function.   EXAMPLE   11.25       1  2  3  4   5  6   7    Checkboxes        function check f {   var str="";  for   var i = 0;  i < f.topping.length;i++ {   if f.topping[i].checked {   str += f.topping[i].value + "Xn";      Put str value into the text area   }   }  f.order.value=str;  }  function OK myForm {   var result= confirm "Are you sure you   are ready to order?  " ;   if result == true {   document.myForm.submit  ;   }  else { return false;}   }                      Checkboxes          398   Chapter  11      Working with Forms and  Input Devices   EXAMPLE    11.25   CONTINUED       <form name="formchbox"   method="post"  act ion="http:  localhost pi z za.php">   Pick your pizza toppings :   <input  type="checkbox"  name="topping"  value="tomatoes"   >Tomatoes      <input  type="checkbox"  name="topping"  value="salami"   >Salami      <input  type=checkbox  name="topping"  value="pineapple"   >Pineapple      <input  type=checkbox  name="topping"  value="Canadian bacon"   >Canadian bacon      <input  type=checkbox  name="topping"  value="anchovies"   >Anchovies      <input  type=checkbox  name="topping"  value="extra cheese"   >Extra Cheese         Pizza Toppings     <textarea name="order"  rows=6 cols=35   onFocus="JavaScript:check this.form ;">  Click here to check your order!!         Press the pizza man to order!     <input  type=image  src="pizzaguy.jpg"            onClick="JavaScript :return OK this.form ;"   >   10  il   12    11.5  Programming  Input Devices  Controls    399   EXPLANATION   1  A JavaScript function  called  check     is  defined.  It takes  one  parameter,  a reference  to  a  form.  Instead  of ,  the  form  could  also  be  referenced  as  document.forms [0]  or  document.formchbox.   2  A for loop is  entered  to  go  through  each  of the  checkboxes in  the  form.  The name  of  the  checkbox  object  is  topping.  The  length  property  refers  to  how  many  check- boxes were defined. After all of the checkboxes have been inspected, the loop exits.  If  the  checkbox  element,  called  topping[i],  is  checked,  the  check  property  has  a  value  true;  otherwise false.   3   4  A  string  called  str is  assigned  the  value  stored  in  the  checkbox,  and  for  each  box   that is  checked,  its  value will  be  appended  to  the  string.   5  After  all  of the  checkboxes  have  been  tested,  their  values will  be  found  in  the  str   variable.  These  values  are  assigned  to  the  text  area  box,  called  order.   6  A function,  called  OK  , is  defined.  Its purpose is  to  confirm  that the user is ready   7   8  9   to  submit his  or  her  order.  If the  user  clicks  OK  in  the  confirmation  box,  the  checkbox's  submitQ  method  is  invoked.  Otherwise,  nothing  happens.  The  HTML  form  called formchbox  is  defined.  The input type is  a checkbox,  named  topping.  Each of the  checkbox choices is  cre- ated  for  this  form.   10  An HTML text area, named  order, is defined.  It consists  of 6 rows and 35  columns.  11  When  the  text area gets  focus   that is, when  the user  clicks his  or her mouse  any- where  in  the  text  area  box ,  the  handler  check    is  invoked.  A  reference  to  this  form  is  passed  as  an  argument.   12  This is  an image input type used instead  of a submit button.  When  the user  clicks  the  image  of the  pizza  man,  the  OK    handler  will  be  invoked   see  Figures  11.44  and  11.45 .    400   Chapter 11      Working with Forms and Input Devices   Checkboxes   Checkboxes   Pick  y o ur   pizza  toppings:  r  Tomatoes  r  Salami  r  Pineapple  r  Canadian  bacon  r  Anchovies  r  Extra  cheese   P i z za   T o p p i n gs   Pick  y o ur   pizza  toppings:  I*  Tomatoes  I*  Salami  I*  Pineapple  r  Canadian  bacon  r  Anchovies  I*  Extra  cheese   P i z za   T o p p i n gs  tomatoes  salami  pineapple  extra  cheese   P r e ss   t he   p i z za   m an   to   o r d e r!   P r e ss   t he   p i z za   m an   to   o r d e r!   d   Clear the  form   Clear the form   Figure  11.44  The initial form with empty checkboxes  left  and  after the user has  clicked  on  some  of the  checkboxes   right .   ~3   d   P r e ss   t he   p i z za   m an   to   o r d e r!   9    ß   Microsoft  Internet  Explorer   P i z za   T o p p i n gs  tomatoes  salami  pineapple  extra  cheese   Clear the form   Figure  11.45  When the user clicks the pizza  man,  a confirmation box appears.    11.5  Programming  Input Devices   Controls    401   11.5.1  Simple Form Validation  Have  you  ever  filled  out  a  form  to  buy  something,  clicked  the  submit  button,  waited,  waited,  and  then  received  a  big  red  message  saying  that  the  card  number  you  entered  was  invalid?  And  then  after  all  that waiting,  you  had  to  retype  the  entire  form  because  all  of  the  fields  were  reset?  By  letting JavaScript  do  some  preliminary  checking  of  the  form  input  for  obvious  mistakes  and  erroneous  information,  you  can  save  the  user  a  lot  of  time  and  aggravation.  Then,  after  the  preliminary  checking  is  done,  the  form  is  ready  to  go  off  to  a  server  program,  such  as  Perl  or  PHP,  where  it  can  be  further  vali- dated  and  processed.  This  section  will  show you  a  little  about  validating  forms:  doing  preliminary checking to see if a password is  the  correct length,  making sure  a  field isn't  empty,  checking  for  unwanted  characters,  and  more.  Chapter  17,  "Regular  Expres- sions  and  Pattern  Matching,"  shows  you  how  to  validate  the  format  for  e-mail  addresses,  credit  cards,  zip  codes,  names,  phone  numbers,  Social  Security  numbers,  and  the  like  by  using  regular  expressions,  a  powerful  pattern  matching  tool  provided  by  JavaScript.   Checking for Empty Fields.  Forms  often  have  mandatory fields  that must be  filled  out  before  the  form  can  be  submitted.  The  following  example  checks  for  empty  fields.   E X A M P LE    11.26        An HTML Form and the onSubmit  Event Handler       function  checkForm yourinfo {   if yourinfo.namestring.value == ""    yourinfo.namestring.value  == null {       Check for an empty string or null  value   alert "Please type in your name" ;  return false ;   }  else{  }   return true ;   }                <form name="info'  action="http:  cgi-bin bookstuff forml.cgi"   method="post"  onSubmit="return  checkForm this ;">   1  2   3  4   5   6  7    Chapter  11      Working with Forms and  Input Devices   402  EXAMPLE  11.26               EXPLANATION   8   9   Type your name here:                  l   3   2   The  function  called  chechFormQ  has  one  parameter,yourinfo,   which  is  a  reference  to  the  form  defined  on  line  6.  If the  user  didn't  enter  anything  into  the  textbox,  the  value  of  the  input  type  will  be  null.  The  expression  if yourinfo.namestring.value  ==  ""   checks  for  an  empty  field.  The user  didn't enter  anything into  the  textbox,  an  alert dialog box will  appear  on  the  screen,  and  after  he  presses  OK,  he  will  have  a  chance  to  fill  out  the  form  again.  If false  is returned  from  this  function,  the  form  will  not be  submitted  to  the  server.  If  true  is  returned  from  this  function,  the  form  will  be  submitted  to  the  server.   4  5  6  The  HTML  form  starts  here.  The  form,  document forms [0],  is  named  info.  The  ac- tion  attribute  contains  the  URL  of  the  program  that  will  process  the  form,  a  CGI  script  on  the  server.  The  method  attribute  defines  the  HTTP  method  that  deter- mines  how  the  data  will  be  sent  to  the  server.  The  onSubmit  event  is  an  attribute  of  the  HTML     tag.  It  is  triggered  when  the  user  clicks  the  Submit  button.  The  event  handler  is  a  function  called  chech- Form  .  Its  argument  is  this,  same  as  documentforms[0]   .  The  return  keyword  is  required  when  using  the  onSubmit  event  handler.  One  of  two  values  will  be  re- turned:  either  true  or false.  The  input  type  for  this  form  is  a  text  field  box.  Its  name  is  namestring  and  it  can  hold  a  string  of up  to  50  characters.  The  input  type  is  the  Submit button.  When  the  user  clicks  this  button,  the  onSub- mit  event  handler  on  line  7  is  activated.  See  Figure  11.46.   7   8   9    11.5  Programming  Input Devices   Controls    403   Address   C:\sambar50\docs\ch11\submitevent.html   Type your name here:    Submit     Clear     Please type in your name   OK   Figure  11.46  enter  anything  in  the  field.   Using  the  onSubmitevent  handler  to  stop  a  form  if  the  user  didn't   Checking for Alphabetic Characters,  for  alphabetic  characters, such as  a user name,  the  following example will go  through a loop  evaluating  each  character  in  a  string  to  guarantee  it  is  an  alphabetic.  See  Chapter  17  for  more  on  this  type  of validation.   if  checking  input   fields   E X A M P LE    11.27        Verifying  a Name        function validate form {   if alpha form.first   == false {   alert   "First name is invalid" ;  return false;   }  if alpha form.last   == false {   alert "Last name is invalid" ;  return false;   } return true;   }  function alpha textField  {   if  textField.value.length != 0 {   1  2   3   4  5  6  7   8   for  var i = 0; i < textField.value.length;i++ {   var ch=  textField.value.charAt i ;   * alert ch ;  Using alert  to see what characters   are coming in   *   if  ch   "Z"  &&  ch "z"  {   return false;    404   Chapter  11      Working with Forms and  Input Devices   9   10   11   12   13   EXAMPLE    11.27   CONTINUED    else {  }   return true;   }                        Enter your first name:     <input name="first"  type="text"  size=60>      Enter your last name:     <input name="last"  type="text"  size=60>                            EXPLANATION   1  A JavaScript  function  called  validateQ  is  defined.  It  takes  one  parameter,  a  refer-  ence  to  a form  object.  The  ¡ expression  invokes  a  function,  called  alpha  ,  and  passes  the  text  object  to  it.  The  first name  is  validated  by  the  alphaQ  function.  If false is returned,  the  block  is  entered  and  the  user  is  alerted  that he  or  she  did  not  enter  a  valid  first name.  If  this  function  returns alse  to  the  onSubmit  handler  that  invoked  it,  on  line  10,  the  form  will  not  be  submitted.   3  As  in  line  2,  the  alphaQ  function  is  being  called,  only  this  time  to  verify  the  last   name  of  the  user.  The  function  called  alphaQ  is  defined.  All  the  validation  work  is  done  here.  This  function  will  validate  that  the  user  entered  something  in  the  textbox,  and  that  „  1 --      -   1-  J   ^   ^   ^   -   -   j   2   4    11.5  Programming  Input Devices  Controls    405   EXPLANATION   8   7   6   The for loop is used  to  check each  character,  one at a time,  that was  entered in the  text  field.  The  char At 0  string  method  returns  a  character  at  a  specified  position  in  the  string.  Each time through the loop, a new character is assigned to the variable, ch.  This is the test for alphabetic characters.  Because each character is represented in- ternally as an ASCII number,     "A"  is ASCII  65,  "B" ASCII  66, etc. ,  any character  outside  the range  "A"  to  "Z"  and  "a"  to  "z"  is not an  alphabetic character.  If  true  is  returned  by  the  alphaQ  function,  the  form  will  be  submitted.   9  10  The  name  of the  form  is  alphachh.  The  onSubmit  event  is  triggered  when  the  user   clicks  the  Submit button  on  line  13.   11  The  input  type  is  a  text  field,  called first.  This  is where  the  user will  enter  his  or   her  first name.   her  last name.   12  The  input  type  is  a  text  field,  called  last.  This  is  where  the  user  will  enter  his  or   13  The input type is a Submit button.  When the user clicks this button,  the  onSubmit  event is triggered,  and if the form was valid, it will be submitted to the server.   In  this  example,  it  isn't  going  anywhere,  because  the  action  attribute  of  the  form  wasn't specified.   See  Figure  11.47.   Enter  y o ur   first  name:  piiie   Enter  y o ur   last  name:   Q u i g l e y 1   i C h e ck   it   out   i   R e s et   Figure  11.47   fhe user enters a valid  first name and  an  invalid  last name.   Checking E-Mail Addresses.  You  are  frequently  asked  to  include  your  e-mail  address when  filling out a form.  There are some requirements for  a valid e-mail address  Q n r ti  aq Tntr}tr}vTlirhpr ci cntr}Pwhprp mm  O n i*   r m n i r p m p nt    1« that thprp  1'«  nn   i iD   Q v m V i r tl    406   Chapter  11      Working with Forms and  Input Devices   EXAMPLE   11.28        Checking  Email        function email form {   if form.address.value.indexOf "@"   != -1 &&  form.address.value.indexOf "."   != -1 {       Validate  the address   1  2   3   4   5   6   7   alert "OK  address!" ;  return true;   alert "Invalid  address" ;  return false;   }  else {   }   }                       <form name="mailchk"  action="http:  cgi-bin ml.pl"  method="post"  onSubmit="return  email this ;">   Enter your email address:     <input  name="address"   type="text"  size=60  >                              EXPLANATION   1  A JavaScript  function  called  emailQ  is  defined.  It  takes  one  parameter,  a  reference   to  a  form.  If the  string method,  indexOf,  does  not return  a - 1,   then  the  @  character  and  a  dot   2    11.5  Programming  Input Devices  Controls    407   EXPLANATION   4  5   If false  is  returned,  the  form  is  stopped,  and will  not be  submitted.  The  HTML  form,  called  mailchk,  starts  here.  The  onSubmit  event will  be  triggered  when  the  user  clicks  the  submit button  on  line  7.  The form's input type is a textbox named address  that will hold up to  60  characters.  6  7  When  the  user  clicks  the  submit  button,  the  onSubmit  handler  on  line  5  is  trig- gered.  It invokes  the  handler  function,  called  email,  and  passes  a reference  to  the  form  as  an  argument.  See Figures  11.48  and  11.49.   Figure  11.48   fhe user enters a valid  e-mail  address.   Enter  y o ur   email  address:   [ ¡   h n @ b a l o n e y . e du   i C h e ck   it   out   j   R e s et   [JavaScript  Application]   x   OK  address!   I   OK   I   Enter  y o ur   email  address:   j o e y @ s o m e w h e re   C h e ck   it  out   i   R e s et   I  [JavaScript  Application]   Invalid  address   r\    Jk   I  OK  I   üJ   Figure  11.49   fhe user enters an invalid e-mail address. A dot is missing in the address.   _   1   -f    J  -   408   Chapter  11      Working with Forms and  Input Devices   EXAMPLE   11.29        Verifying  a  Password        function valid form {   if! form.pass.value.length == 0  {  alert "Please enter a password" ;  return false;   }  if  form.pass.value.length < 6  {   1  2   3   4   alert "Password must be at least  6 characters" ;  return false;   }  for   var i = 0;  i < form.pass.value.length;i++ {   var ch=  form.pass.value.charAt i ;  if  ch   "Z"  &&  ch "z"   &&  ch   "g"  {  alert "Password contains  illegal characters" ;  return false;   }   }  alert "OK  Password"    ;  return true;   }              Enter your password:     <input name="pass"   id="pass"  type="password"  size=33  >                                            11.6  What You Should  Know   EXPLANATION   409   1  A JavaScript function  called validQ  is  defined.  It  takes  one  parameter,  a reference   2   3   4   5   6   7   to  a form.  If the password  entered by the user has  a length  of 0  characters,  an  alert message  is  sent.  If the password entered by the user has  a length of less  than  6 characters,  an alert  message  is sent.  If the  value  of the  password  entered by the user  contains  any character  that is not  an alphabetic  character  and not a number,  an  alert message is sent.  If the  password  was  at least  6  characters  and  contained  only  alphanumeric  char- acters   letters  and  numbers ,  then  the  validation  test was passed,  and  the  user  is  alerted.  A  value  of true  is  returned  to  the  onSubmit handler,  allowing  the  form  to  be  submitted.  The  HTML  form  called  passchk  is  started  here.  Its  onSubmit  handler  is  triggered  when  the  user  clicks  the  submit button.  The input type is a password box,  called pass.  This is where the user will  enter his  or her password.  See Figure  11.50.   Figure  11.50  The user enters a  password  of less than 6 characters  left  or enters a  password  that contains  illegal  characters   right .   11.6  What You Should  Know   Any Web site  that is  trying to sell you something will have  a form.  They are at the heart  of Web  commerce.  This  chapter  focused  on  how  to  create  forms  and  different  input  devices  used  to  collect  the  data,  textboxes,  checkboxes,  drop-down  menus,  and  so  on.    410   Chapter  11      Working with Forms and  Input Devices   another  window  and  display  the  form  data,  do  some  simple  validation,  and  so  on.  After  going  through  this  chapter,  you  should  know:   1.  What  the  DOM  tree  looks  like  to JavaScript.  2.  Why we  use  the  Legacy  DOM  with  forms.  3.  How  to  create  HTML  forms  and  input  devices.  4.  What  two  methods  are  used  to  send  data  to  a  server.  5.  How  the  browser  bundles  up  the  input  data.  6.  What  name value  pairs  represent  in  forms.  7.  What  a  server-side  program  does.  8.  How  the form  object  and  the  elements  object  are  used.  9.  When  to  use  the  name  and  the  id  attributes.  How  do  they  differ?  10.  How  to  catch  a  form  before  it is  submitted  to  a  server.  11.  How  to  reference  the  input  devices  in  a JavaScript  function.  12.  How  to  stop  form  data  from  being  submitted.  13.  How  to  program  input  devices controls.  14.  How  the  this  keyword  is  used  with  forms.  15.  How  the  button  input  device  differs  from  the  submit  button.  16.  How  to  use  an  event  handler  with  a  form.  17.  How  the  form's  submitQ  method  differs  from  the  onSubmit  event  handler.  18.  How  to  change  the  text  in  a  textbox with JavaScript.  19.  What  the  blur    and focus    methods  do.  20.  How  to  use  multiple  selects.  21.  How  the  selectedlndex  property  works  with  drop-down  menus.  22.  How  to  test  for  input  that  does  not  contain  alphabetic  data.  23.  How JavaScript  can  tell  which  button  was  selected  in  a  list  of radio  buttons.    Exercises   411   E x e r c i s es   1.  What's  a BOM?  What's  a DOM?  What is  the  Legacy DOM  and why is  it used   with  forms?   2.  How  does  the  name  attribute  differ  from  the  id  attribute  of an  input  device?   3.  Create  an HTML  document that contains two  forms.  One  form  consists of a text   field,  the  other  a  text  area.  Name  the  forms  and  the  input  devices.  Use Java- Script  to  print  out the  names  and  values  in  the  forms.   4.  Add  a button  to  the  last  example.  If the  user  clicks  it,  display the  form  content   in  another  window.   5.  Create  two  text  fields.  In  one  text field,  the  user will  enter  his  or  her  birth   month  and  day.  Write  a JavaScript program  that will  print  the  number  of days  until  his  or  her  birthday in  the  second  text  field.   6.  Write  a JavaScript function  that will  finish  the  story in  Example  11.20.   7.  Write  a multiple-choice  quiz.  It has  five  questions  and  the  user  can  only select   one  answer.  After  the  user  selects  an  answer,  alert him  or  her  if he  or  she  is  wrong,  and  show  the  user  the  correct  answer  in  a separate  textbox  field.   8.  Change  Example  11.36  so  that  a  confirmation  box will  appear,  asking  the  user  to  confirm  his  or  her  vacation  choices.  The  vacation  choices will  be  listed  in  a  popup  window.   9.  Create  a form  that uses a text input type.  Ask the user to  type his or her name in  uppercase  letters.  The submit button will  be  an image.  Validate  that the  form  is  not  empty  and  that  the  user  typed  his  or  her  name  in  only uppercase  letters.  Send  the  form  to  a server  program  if it is  valid.   10.  Create  a  form  with  radio  buttons  representing different  colors.  Use  the  id  attri- bute  for  each  radio  button.  In  a JavaScript  program,  the  getElementsByldO  will  return a reference  to the radio button that was selected.  Change the background  color  to  the  color  that was  selected.    chapter   12   Working  with  Images   and  Links    12.1  Introduction to  Images   A picture is worth a thousand words.  Whether it's a slide show, banner, movie,  or photo  album,  the  Web  contains  a  huge  collection  of  images.  Any  time  you  buy  something  online, there is usually an image associated with the item, maybe a small image, and then  a bigger  image  if you want more  detail.  Whatever  it is,  a  book,  a house,  a  pair  of shoes,  or a toy, we like to see it before we put it in our virtual shopping cart and pay the money.  Although  the  focus  of  this  chapter  is  on JavaScript  and  images,  hypertext  links  are  so  closely intertwined with  images  and  navigation,  they  are  also  discussed  here.   Images  can  be  links,  clickable  image  maps,  banners,  marquees,  billboards,  or  roll- overs—you name it. With HTML,  the images you load are static, and just sit on the page.  They cannot be  changed without loading a brand  new page,  and  loading a lot of images  takes  time. JavaScript brings  a new dimension  to working with images.  Instead  of view- ing  a  static  image  on  the  page,  you  can  create  dynamic  images  that  can  be  changed  on  the  fly,  adding  animation  and  drama  to  your  Web  page.  For  example,  you  can  create  effects  such  rollovers,  slide  shows,  cycling banners,  dynamic  menus,  and  more. Just  as  with forms, JavaScript has access to  every image  on you page.  Before getting into  the  fun  of  images,  we  will  look  at  how  JavaScript  accesses  them.  In  Chapter  13,  "Handling  Events,"  and  Chapter  15,  "The  W3C  DOM  and JavaScript,"  you  utilize  what you  learn  here  to  see  the  full  potential  of image  manipulation  with JavaScript.    414   Chapter 12      Working with Images  and Links    12.1.1  HTML Review of Images  Before  using  images  with JavaScript,  the  following  section  reviews  the  basics  of  using  images in  a static Web page.  Table  12.1  lists HTML image  tags.   Table  12.1  HTML Image Tags   Attributes   Description   Tag   IMG   Starting tag for loading an image.   ALIGN   ALT   BORDER   HEIGHT   HSPACE   SRC   VSPACE   WIDTH   ID   NAME   ALT   COORDS   HREF   Floats the image either to the left or right side of the page, or aligns  the image with text in directions, texttop, top, middle, absmiddle,  bottom,  or absbottom.   Alternative text in case the image doesn't appear.   The width in pixels of an image border.   Height of the image in pixels.   Adds space, in pixels, to both the right and left sides of the image.   Contains the URL, location of the image relative to the document root  of the Web page.   Adds space, in pixels, to both the top and bottom of the image.   Width of the image in pixels.   Starting tag for an image map. Image maps link areas of an image with  a set of URLs.  Clicking on an area of the map sends the user to that  page.   The name of the image map.   Also the name of the image map.   Describes what happens when the user clicks.   Determines the shape of a rectangle, circle, or polygon inx,y pixel  coordinates.   The address of the page that will appear when the user clicks in a  particular area.   AREA   Defines the clickable areas of the image map.   MAP    12.1   Introduction to  Images   415   Using an Image in an HTML Web Page.  Example  12.1 is an HTML file linked to  an  image.  In  this  example,  we  review  the  way  inline  images  are  created  in  a  document.   EXAMPLE   12.1         HTML  Images       hspace=" 10" width=,,220" height=,,250"   >    y.jpg"  alt="baby"  border=2  align=" left"     Father calls me William,   l  2  3   sister calls me Will,  but the fellers call me Bill!   Mother calls me Willie,  Mighty glad I ain't a girl--  ruther be a boy,  that's worn by Fauntleroy!   Without them sashes,  curls,  an1  things  Love to chawnk green apples   an'  go swimmin'  in the lake-- they give  for belly-ache!   Hate to take the castor-ile  Most all the time,  the whole year round,   there ain't no flies on me,  I'm as good as I kin be!   But jest  'fore Christmas              EXPLANATION   Eugene Field,  Jest  'Fore Christmas,  in Childcraft, Vol . 2,   Chicago:  Field Enterprises,  Inc.,  1949 .   1   2   The  image  src  attribute  defines  where  the  image  is  located.  This  image,  baby.jpg,  is  located  where  the  HTML  file  called  image.html  is  found,  normally  under  the  document root  of your browser.  If the  image  can't be  loaded,  the  alt attribute spec- ifies  text  that will  appear  in  its  place.  The  image  will  be  aligned  at  the  left  side  of  the  page  and  will  have  a  thin  black  border  around  it.  There  will  be  10  pixels  of  space  on  both  the  left  and  right sides  of the  image.  This  keeps  the  text  from jam- ming  up  too  close  to  the  picture.  The  width  and  height  attributes  of the  img  tag  allow you  to  specify  the  size  of your  image  in  pixels.  If you  right-click  on  an  image   Windows ,  a  popup  window will    416   Chapter 12      Working with Images  and Links    Ö  HTML  Images  -  Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   C   J   file:   C: wamp www examplel  1.32.new.html   _L  Restore  Session   l   ^  Preloading  Images   j~   ^  Preloading  Images   j~   ^  HTML  Image7   sister  calls me Will,   Father  calls me Willi .till  Mother  calls me Willie,  Mighty  glad  I  ain't  a  girl—  Without  them sashes,  curls,  ail1  things  Love  to  rhdvnk  green  apples  Hate  to  take  the  castor-ile  Most  all  the  time,  the whole  year  round,  But  jest  'fore  Christmas   tout the fellers  call me Bill!  ruther toe a liny.  that's  worn toy Fauntleroy!  an'  go  svrimnin'  in the lake—  they  give  for toelly-ache!  there  ain't  no  flies  on me,  I'm as  good as  1 kin toe!   Figure  12.1  Using  images in an  HTML page:  Output from  Example  12.1.   12.1.2  The JavaScript image Object  With  the  Legacy  DOM, JavaScript  provided  the  image  object  as  a  property  of the  docu- ment object, giving you easy access to the images that have been loaded into a document.  Although you  can use  the W3C  versions  of the  DOM,  the  Legacy DOM  is  supported  by  all  modern  browsers  and  is  commonly  used  when  working  with  images.  Just  like  the  form  object,  the  image  object  corresponds  to  the  HTML     tag  and  each  image  is  assigned  to  the  images[]  array1  in  the  order  in which  the  image  appears within  the  doc- ument.  The  first  image  would  be  represented  as  document.images[0],  the  next  as  docu- ment. images[l j,  and  so  on   see  Figure  12.2 .  As  with  forms,  images  can  also  be  named  and given  an  id.  The properties  for  the  image  object correspond  to  the  HTML  attributes  of  the     tag,  such  as  src,  width,  height,  border,  vspace,  and  hspace,  and  are  shown  in  Table  12.2.2 It is possible to  assign values to  these properties to  dynamically change the  size, shape, and border of the image.  There are no common methods for the  image object  unless  you  use  the  id  attribute  and  methods  such  as  getElementByldO  and  getElements- ByTagNameO  provided  by  the  W3C  DOM.   JavaScript also provides  event handlers that are  triggered when  an image is loaded,  a  mouse  crosses  the  image,  or when  the  user  clicks  on  an image.  Although we  use  event  handling in  this  chapter,  Chapter  13  provides  a  more  complete  discussion.    12.2  Reviewing Links   417   w i n d ow   I   d o c u m e nt   images[0]  images[1]  images[...]  Figure  12.2  Document object and  images.   \   For  preloading  offscreen  images,  JavaScript  provides  an  image  constructor   see  Example  12.6 .  The  constructor  is  used  if you  have  large  images  that will  take  time  to  download or images that are being replaced dynamically within the page.  The images are  preloaded into  memory   but not displayed   and  available  from  the  cache when  the  user  requests  them,  thus  making  the  response  time  much  faster   see  Example  12.4 .   Table  12.2  image  Object  Properties   HTML     Attribute   Description   Property   border   complete   height   hspace   lowsrc   name   src   vspace   width   prototype   border   An integer value determining the width of an image border in pixels.   A Boolean value returning true if Navigator has finished  downloading the image.   An integer representing the height of the image in pixels.   An integer representing the horizontal space  pixels  around the  image.   Specifies an optional image to display for a low-resolution device.   A string containing the name of the image.   Used to add user-specified properties to an image object.   A string containing the path and name of the image.   An integer representing the vertical space  pixels  around the image.   An integer representing the width of the image in pixels.   height   hspace   lowsrc   name   src   vspace   width   12.2  Reviewing  Links    418   Chapter  12      Working with  Images  and  Links    a  popup  window,  calling  a  function  from  a  link,  submitting  a  form  from  a  link,  and  so  on.  This  chapter  focuses  on  how  links  are  used  with  images.   As  you  know,  HTML hypertext  links  are  usually  created  by  assigning  a Web  address   or  a  file  name  to  the  HTML     tag,  for  example:   Go  Home    If a JavaScript  function  is  assigned  to  the     tag,  when  the  user  clicks  the  link,   the  function  will  be  executed   see  Example  12.4 .    Click here  for salutations      Do Something     And  you  can  use  an  event  handler  with  a  link   see  Chapter  13 :   Click Here!            12.2.1  The JavaScript links Object  Like  the  form  object  and  image  object,  the  link  object  is  a  property  of  the  document  object and gives you  access  to  the hypertext links that have been loaded into  a document   see Figure  12.3 .  It corresponds  to  the  HTML    tag.  As  each HTML form is  a Java- Script  element  of  the forms []  array,  and  each  image  is  assigned  to  the  images[]  array,  so  each  link  is  assigned  to  the  links []  array  in  the  order  in  which  the  link  appears  within  the  document.   w i n d ow   d o c u m e nt   links[0]   links[1]   links[...]   Figure 12.3  Document object and links.   The  first  link  would  be  represented  as  document.links [0].  The  properties  for  the  links  object  are  shown  in  Tables  12.3  and  12.4.3  There  are  no  common  methods  for  the  links    12.2  Reviewing Links   419   A  links  object  contains  a  URL,  similar  to  the  window's  location  object,  and  shares  the   same  properties.  A  full  URL  takes  the  following  form:       [: ]  [ ]  [ ]   There  are  nine  events  that  can  be  triggered  by  a  link:  onClick,  onDblClick,  onKey- onMouse-  onMouseOver,  and   onMouseDown,   onMouseUp,   onKeyPress,   onKeyUp,   Down,  Out.   For  details,  see  Chapter  13.    Table  12.3  Properties of the W3C links Object   Property   What It  Describes   Sets or returns the character encoding of the  target URL.   Sets or returns whether or not the  target URL should be disabled.   The entire URL.   Sets or returns the base language of the  target URL.   Sets or returns the id of a    element.   Sets or returns on what device  the document will be displayed.   The name of the    element.   Sets or returns the relationship between the current document and the  target URL.   Sets or returns the relationship between the target URL and the current  document.   Table  12.4  Properties of the JavaScript links Object   Property   What It  Describes   The anchor part of the URL   if any .   The hostname port part of the URL.   The hostname part of the URL.   The  entire URL.   ¿7    ~   " T l,    t l,    1  ^f    T T DT   charset   disabled   href   hreflang   id   media   name   rel   rev   hash   host   hostname   href    420   Chapter  12      Working with  Images  and  Links    Table  12.4  Properties  of the  JavaScript links Object   continued    Property   protocol   search   target   What It Describes   The protocol part of the URL,  including the colon.   The query part of the URL.   The HTML target attribute of the link.        Using Links          Links  and their Properties      <a  href="http:  search.yahoo.com bin search?p=JavaScript  Search for JavaScript Stuff    Go to google       Go to bing          document.write "  This document contains  "  for  i = 0; i< document.links.length; i++ {   +document.links.length +  "  links.  " ;   document .write   " document. links [ " + i+ " ] : "   ;  document.write " hostname:  "  document.write " href:   "   document.write " pathname: "  document.write " port:  "   +document.links[i].hostname  +" " ;  +document.links[i].href  +" " ;  +document.links[i].pathname  +" " ;  +document.links[i].port  +" " ;  document.write " query string:   "  +document.links[i].search +" " ;  document.write " protocol:  "  +document. links [ i ] .protocol +" " ;   1   2   3   4  5  5   6   7   8   9  10   }           12.2  Reviewing Links   E X P L A N A T I ON   421   1   2  3  4   5-10   This  link goes  to  the  Yahoo!  search  engine's  main  site  and  searches  for  the  word  "JavaScript  tutorial."  Note:  The  browser  inserted  a  %20  for  the  space  between  "JavaScript"and  "tutorial",  an  example  of URL  encoding.  This  link goes  to  the  Google  search  engine's  main  site.  This  link goes  to  the Bing search  engine's  main  site.  The  size  of  the  links []  array  is  determined  by  the  length  property.  It  displays  the  number  of links  in  the  document.  The or loop is used to iterate through the links array and display some of its prop- erties.  The  output is  shown  in  Figures  12.4  and  12.5.   '  External  Sty...   Using  Links   X jj   Using  Links     J  Using  ...   Links  and  their  Properties   Yahoo  search  for JavaScript  stuff   - A   Go to aoo ale   Go to biiia   This  document  contains  3  links.  do cimient. links f 01:  hostname:  search.yahoo  com  href:  http  search.yahoo.com  bill s e arch?p=j a va s cript%20tutorial  1>atluiametbiii search  Im- port:  query  string:  ?p=javascript%20tutorial  protocol:  http   do cumeiit. links [ 11  hostname:  google.com  href: http   google, com'?  pa tímame:  port:  query  string:  protocol:  http   do cumeiit. links [21:  hostname:  www biiig.com  href: http   www biiig.com'  pa tímame:    422   Chapter 12      Working with Images  and Links    1  Bing  -  Mozilla  Firefox  File  Edit  View  History  Bookmarks  Tools  Help   @  "  c   Using Links   f i ft    3  http:  www.bing.com    û -  lf   Google   P   Tour Bing     MSN     Hotmail   Make Bing your search provider     Sign in     United States   Q  Using  Links   Bing   E 0B      Et     Preferen   -  w   wlmages   iVideos   Chopping    Jews   H a ps   Travel   History   Visual  Search',   Figure  12.5  After clicking on a  hyperlink:  Output from  Example  12.2.   >  *   12.3  Working  with  Imagemaps   An imagemap is  an image with  clickable  areas where  each area is represented by a link,  also  called a hotspot.  An imagemap makes it possible  to make one image link to several  pages  depending on the  area or pixel  coordinate positions clicked by the user.  A simple  example would be an image of the map  of the United States.  If the user clicks on Maine,  for example, then a link would navigate the user to another page with information about  that state,  a closer  image  of the state,  and so  forth.   In  the  HTML  page  you  simply  specify  the  area  of the  image   hotspot   and  the  link  that will be associated with that part of the image.  The most time-consuming and boring  part of this process is  determining the  coordinate positions for  the hotspot.  This can be    12.3  Working with  Imagemaps   iC  Image  MIP Tool - On-line  Image Map Creator  - HTML 8: CSS  - Windows Internet Explorer   ^   http:  www,image-maps.com    View   Favorites   Tools   Help   File   Edit   x [p   Search the Web   Favorites   g  Image  Map  Tool  -  On-line  Image  Map  Creator  -  HTML  ...   Online  image  man  Creator   www.image-maps.com  online  image  mapper   423   -ii  3 00   S   a  -  Add Station   Listen Now   y  Classic  Rock   V  F   I m a ge   M a p p er   L i n ks      Image  Map  Home     Image  Map  Forum     Notes,  Updates,  Changes     United  States  Mapped     Image  Map  Rollover  Example     Contact  Us   Free  Online  HTML  Image  Mapping  Tool   Basic  Online  Image  Mapping  Tool   Basic online html image mapping tool. No software to download. Use ima  from the web or your PC. Load the image, map out your links and get tf"   code! The Best and most Simple online image  mapper and free.   New Now outputtinq CSS style image maps with HTML image maps   Tutorial on mapping mvspace 2.0 image map - video   Upload your image to be mapped   M  buy  now  >   a   F r om   y o ur   PC   F r om   a  U RL   :   Use  a test image   Maps Image   Detailed Map   Driving Map  Maps Picture   ShareThis   Post a Comment Email   Imane  Manner  Friends   Figure  12.6  A free online image mapping tool.    424   Chapter 12      Working with Images  and Links    f-  Map  Your  Image!  -www.image-maps.com  -  Windows  Internell   ¡f v  I ^ http:    '.-  .  '.-  .  '.-  . ,image-maps.com F1 HP _M a p _I m age, p h p   File  Edit  View   Favorites   Tools  Help   - p   15   V^J Favorites   ^  Map  Your  Image!  -  www.image-maps.com    i\  Refreshing the page will start you over. IE 7 will give a  ' I \ l4   rectangle  maps,  Firefox  3  does  not.   transamerica   Figure  12.7  Using the tool to map a  rectangular hotspot.   0   I m a g e   M ap   C o o r d i n a t e s:   The  Image Map  Coordinates  are the  points which a map is outlined by.  Each point has two values. An X and  Y value. For example for a Triangle  you would need to plot atleast three  points and each point having an X  and Y Value.   102,16,180,309   Figure  12.8  Using  the  image  mapping tool  to get the coordinates of the hotspot.  Coordinates are  for the  highlighted  rectangular shape.   In Example  12.3, if you click on  the  face  of any of the people in  the  family, you are    12.3  Working with  Imagemaps   425   In  Example  12.3  the  coordinates  are  plotted  with  rectangular  image  mappings,  but  there  are  other  shapes  that  can  be  used:  the  circle  and  polygon.   The  polygon  shape  can  be  used  to  customize  the  area  of the  link.   Note:  All  coordinate  values  are  relative  to  the  top  left  corner  of the  image   0,0 .   Table  12.5  Shape  Coordinates for an  I m a g e m ap   Shape   red   circle   poly   default   Coordinates-coords   "xl,yl,x2,y2"  Top left and bottom right  corners  of the rectangle.   "x.y,r"  Center and radius  of the circle.   "xl,yl,x2,y2,x3,y3,..."  Corners  of the polygon.   The remaining area  of the  image,  not defined by any  coordinates.   E X A M P LE         <area shape=polygon coords= xl,yl,  x2,y2,  ..,  xn,yn   href="http:  www.domain.com">   E X A M P LE    12.3       1  2    Using Links                      <area shape="rect" hre£="uncledan.html"    426   Chapter  12      Working with  Images  and  Links    E X A M P LE    12.3   CONTINUED           4               The  Family        The file:  nicky.html         Nicky          var age = 14;  alert "Nicky,  age "+ age ;  window.location="example12.12.html";               E X P L A N A T I ON   5   1   2   3   4   The  HTML     tag  defines  the  client-side  image  map.  The  name  attribute  is  re- quired  to  make  an  association with  the  name  and  the  usemap  attribute  of the  image.  See  line  4.  In  this  definition,  you  tell  the  browser  where  the  hotspots  are  in  the  im- age,  and  what  the  hotspots  need  to  link  to.  The     tag  defines  the  hotspot  for  a  rectangular  shape;  that  is,  the  top  left  and  bottom  right  corners  of  the  rectangle.  The  rectangular  shape  for  each  area  of  the  map  is  drawn  around  each  of the  family members in  the  picture   see  Figure  12.9 .  The  default  represents  the  remaining  area  of  the  image  not  defined  by  any  area  tags.  It  has  no  coordinates.  This  is  the  image  that  will  be  displayed  on  the  screen.  The  attribute  use- map="my_image_map"  attribute  associates  the  image  map  with  this  image.  The  as  usemap=" image- another  image  map  file,mapmy_image_map"  where  "imagefile.map"  is  the  name  of  a  file  that  de- fines  the  areas.   also  be  placed   could   file   in   5  When  the  user  clicks  on  the  area  around  the  image  of  the  girl  at  the  far  left,  the  link  goes  to  this  page,  nicky.html.  After  displaying  information  about  Nicky,  the  user  is  directed  back  to  the  original  page.    The user clicks his or her mouse on one of the faces and will be redirected to another   12.3  Working with  Imagemaps   file   see  Figure  12.10 .   *  U^lng Links  - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help   427   H 0E   T   C   A   J   file :    C :  wamp www example 12.12, html   t -7    T   T  redirect p   n   The  Family   Figure  12.9   fhe  image  has  hotspot areas defined  for each  of the  family members.   ^  Nicky  -  Mozilla  Firefox  File   History   View   Edit   Bookmarks   lools   Help   o   4  jky   C   X   f i^    ll    file:   C: wamp www nicky.html   Javascript:  ...   !  Problem loa...   !  Problem loa...   !  Prob   1    X    [JavaScript Application]   1   Nicky j age 14   OK   j    428   Chapter  12      Working with  Images  and  Links    12.3.1  Replacing Images Dynamically with the src Property  By  changing  the  value  assigned  to  the  src  property  of an  image,  it  is  possible  to  dynam- ically replace  one image with  another.  You  can  create  an  array of images with  the Array     constructor,  and  assign  any  one  of  these  images  to  the  src  property  of  the  JavaScript  images[]  array.   E X A M P LE    12.4       1  2  3  4  5  6   7   8  9     HTML  Images       var mylmages=new Array "babyl.jpg",  "baby2.jpg",   baby3.j pg", "baby4. j pg "   ;  index_val=0;  function next_image  {   index_val++;  if   index_val < myImages.length {   document.images["babypic"].src  = myImages[indexval];      could say document.babypic.src  or      document.images[0].src   index_val=0;  document.images["babypic"].src  = myImages[indexval];   }  else{   }   }  function previous_image  {   index_val--;  if   index_val >= 0 {   document.images["babypic"].src  = myImages[index_val];   index_val=rnyImages . length - 1;  document.images["babypic"].src  = myImages[index_val];   10   }  else{   }   }              11       Baby Gallery   <img name="babypic"  id="babypic"  src="babyl.jpg"      width="32 9" height="440" >    12.3  Working with  Imagemaps   429   E X A M P LE    12.4    CONTINUED    12   13   View next baby                       View previous baby        E X P L A N A T I ON   The  array  my Images  consisting of four  images  is  created  by  the Array     constructor.  The  index  value  for  the  array  is  assigned  to  a  variable  called  index_val.   1  2  3  A  function  called  next_image    is  defined.  When  called,  the  function  will  cause   the  next  image  in  the  array  to  be  displayed.  4  By increasing  the  value  of the  index,  the  next  image  in  the  array will  be  accessed.  5  As  long  as  the  end  of the  array hasn't  been  reached,  the  block will  be  entered  and   the  new  image  displayed.  The  name  of the  image,  babypic,  is  used  as  an  index into  the  images []  array  to  refer- ence  the  default  image  by  name.  By  assigning  a  new  image   from  the  mylmages  ar- ray   to the image's src property, the current image will be replaced by the new image.  If  the  end  of  the  array  has  been  reached,  the  statements  within  the  else  block will  be  executed,  resetting  the  array  index  back  to  the  beginning,  index  0.   8  A  function  called  previous_image    is  defined.  When  called,  it  will  go  backward  in   the  array  and  cause  the  previous  image  to  be  displayed.  If the  index  value  is  still  >0,  we  are  still  within  the  boundaries  of the  array.  If by  subtracting  one  from  the  index  value,  we  have  ended  up  with  a  value  of - 1,  we  are  out  of the  bounds  of the  array,  and will  set  the  index value  back to  the  size  of  the  array,  its  length  - 1.   11  This is  the initial image  displayed  on  the screen before  the  user initiates  an  action.  12  When  this  link  is  clicked,  the JavaScript  function  called  next_image    is  invoked.  13  When  this  link  is  clicked,  the JavaScript  function  called  previous_image    is  invoked.   6   7   9  10   See  Figure  12.11.    430   Chapter 12      Working with Images  and Links    , 0   HTML  Images  -  Mozilla  Fircfox   L Images   J  HTML Images   !  HTML Images   J HTML Images   H T M L . ..    j   S DH   Babv Gallery   View next baby   View previous baby   j  pj   e   E X A M P LE    12.5       Figure  12.11  another.   Image replacement. Each time a link is pressed, one image is replaced with   r       ij'  a   A   i  JT   > -   12.3  Working with  Imagemaps   431   E X A M P LE    12.5    CONTINUED    1  2  3  4  5    &nbsp;&nbsp;This  Is Baby William          var mylmages=new Array "babyl.jpg",  "baby2.jpg",  var n = prompt "Pick a number between 1 and 3 " , " " ;  n--;  document.Images["display"].src  = myImages[n];  II  document.images[0].src  = myImages[n]   "baby3.jpg" ;               E X P L A N A T I ON   1  An  HTML  inline  image  called  display  is  created.  Its  source  is  a  file  called  babyl.jpg   with  the  width  and  height  defined  in  pixels.   2  An  array  object  called  mylmages  is  created  with  the  Array Q  constructor.  The  ele-  3   ments  of  the  array  are  three  .jpg  files.  The  user  is  prompted  to  pick  a  number  between  1  and  3,  which  will  determine  which  image  will  be  displayed.  The  user  input  is  assigned  to  variable  n.   4  Array indexes  start at 0.  The  user  entered  a number between  1  and  3,  and  because  n  will  be  used  as  an  index  into  the  array,  it  must  be  decremented  to  produce  an  index  number  ranging  from  0  to  2.  The  images  array  can  be  indexed  by  number  or  name.  In  this  example,  display  is  the  name  given  to  the  default  image  shown  on  the  screen,  baby.jpg.  By  changing  the  src  property,  the  default image will be replaced by any one  of the images listed  in  the  mylmages  array.  See  Figure  12.12.   5   This  Is  Baby William    432   Chapter  12      Working with  Images  and  Links    12.3.2  Preloading  Images and the ImageO Constructor  If you  assign  a new image  to  the  src  property  of an  image  object,  there  might  be  some  lag  in  the  time  it  takes  to  download  the  image  from  the  server.  And  if you  have  a  slow  con- nection,  this  can be  a real  turnoff,  to  the  point  that you  don't  even  bother  to wait  for  the  image  to  load.  To  solve  this  problem,  the  ImageO  constructor  allows  you  to  preload  an  offline image;  this puts  the image in  the browser's  cache before it is used.  This  technique  of  caching  the  image  makes  the  response  time  much  faster,  especially  when  you  have  large  images,  animation,  rollovers,  and  the  like.  The  ImageO  constructor  can  also  define  the  size   height  and  width,  in  pixels   of  the  cached  image.  Be  sure  to  put  the  ImageO  constructor  in  the     portion  of  the  document  so  that  the  images  are  put  in  the  cache  before  the  script  starts  to  run.  For  seamless  transition  when  replacing  one  image  with  another,  both images should be  of the  same size,  accomplished by cropping or scal- ing  the  image.  To  use  the  ImageO  constructor,  see  next.   F O R M AT   E X A M P LE   var newlmage = new Image  ;  var newlmage = new Image height,  width   newlmage.src =  "image.gif";   var mylmage = new Image 200,300 ;  mylmage.src =  "baby.gif";   It  is  possible,  but  unlikely,  the  viewer  is  using  a  browser  that  doesn't  support  the  image  object.  We  can  add  a  little  snippet  of code  to  detect  if the  image  object  exists  and  then  continue  with  preloading  the  images:   i £ document.image s {   picl=new  Image 100,25 ;  picl.src="http:  someplace.com imagel.gif";   }   A Simple Rollover with a Mouse Event.  We  talked  about event handlers with  the  form  object  and  now  we  will  demonstrate  the  use  of  an  event  handler  with  the  image  object.  For  a  complete  discussion,  see  Chapter  13.  The  objective  of the  next  example  is  to  change  the  image  when  the  mouse  rolls  over  a  link,  and  to  change  it  back when  the  mouse moves away from  the link.  There  are  two images involved:  the image  that initially  appears  on  the  page  and  the  image  that  replaces  it  when  the  mouse  rolls  over  the  link  r-rtnctrn ^tAT* Tl-i  n c c ^ z - i   i t   i rl   U T i ' t Vi    r ^o A ¿*A  u r i ' t V.   t V. o Tl   i m n i l oc    r ^f    it     12.3  Working with  Imagemaps   433   E X A M P LE    12.6        Preloading  Images        function preLoadlmages  {   baby = new Array  ;      global variable  baby[0]=new  Image  ;  baby[0].src="babyl.jpg";  baby[l]=new Image  ;  baby[l].src="baby2.jpg";      Preload an image   }               This  Is Baby William   <a href=""  onHouseOver="document.willy.src=baby[l].src;"   onMouseOut="document.willy.src=baby[0].src;">                 E X P L A N A T I ON   1  A  function  called  preLoadlmages     is  defined  in  the  head  of  the  document.  It  will  define  a list of images that will be loaded before anything else.  With this technique   unless  the  images  are  large  or  great  in  number ,  the  viewer  will  have  the  neces- sary images in  his  browser's  cache before  the script starts  to  run,  reducing waiting  time.  For  a  small  example,  such  as  this,  there  will  be  no  noticeable  difference.  The  new  array,  called  baby,  is  declared.  The  Image    constructor  creates  and  preloads  a  new  image  object  and  assigns  it  to  the  first  element  of  the  baby  array.  The  src  property  is  assigned  the  name  of  the  external  image  file  called  babyl.jpg.  4  5  The  src  property  is  assigned  the  name  of  the  external  image  file  called  baby2.jpg.  6  When  the  page  has  loaded,  the  onLoad  event  is  triggered  causing  the  preLoadlm-  2  3   7   ages     function  to  be  called.  The     hash  mark   disables  the  link so  that  the  browser  does  not  try  to  go  to  a  URL  when  clicked.  The link is  an image.  The  onMouseOver event is  triggered when  the  us- er's mouse moves onto the link, and the onMouseOut event is triggered when the user's  mouse  moves  away  from  the  link   image .  When  the  mouse  moves  over  the  image,  the  baby image  changes  from  the  first image  to  the  second  one.  When  the mouse is  moved  away  from  the  image,  the  original  image  is  displayed.  Going  down  the Java- Script  hierarchy,  we  start  with  the  document,  then  to  document.willy  or  document.im-   434   Chapter  12      Working with  Images  and  Links    E X P L A N A T I ON    CONTINUED    8  When  the  mouse  is  moved  away  from  the  link,  the  initial  image  babyl.jpg  will  re-  9   appear  on  the  screen.  The  initial  external  image  called  babyl.jpg  is  named  willy  and  is  aligned  on  the  left  side  of the  screen.  The  output  is  shown  in  Figure  12.13.   This  Is  Baby  William   Figure  12.13  Before the mouse rolls over the image  left ,  as the mouse hovers over  the  image   middle ,  a nd   when  the  mouse  moves  a w ay  from  the  image   right .   12.3.3  Randomly Displaying  Images and the onClick Event  By  using  the  Math  object's  random    method,  it  is  sometimes  fun  to  randomly  generate  pictures  from  a  list  of images.  Example  12.7  demonstrates  how  to  change  the  src  attri- bute  of  an  image  object  by  using  a  random  number  as  the  index  of  an  element  in  an  image  array.  All  of  the  images  are  preloaded  by  using  the  Image    constructor,  greatly  improving  the  time  it  takes  to  load  the  images.   E X A M P LE    12.7        Preloading  Images        1  2   3   4   ImageHome=new Array 3 ;  for var i=0;  i<3;  i++ {   ImageHome[i]=new  Image  ;   }  ImageHome[0].src="babyl.jpg";  ImageHome[1] .s rc ="baby2.j pg";  ImageHome[2] .s rc ="baby3.j pg";  function myRandom  {    12.3  Working with  Imagemaps   435   E X A M P LE    12.7    CONTINUED             &nbsp;&nbsp;This  Is Baby William   <img name="display"  id="display"   src="baby.jpg"  border=5  width="200" height="250"  >   <input  type="button"   value="Click Here for Baby Picture"  onClick="myRandom  "  >   8   9  10                         E X P L A N A T I ON   1   2   3   4   5  6   7   8   9   The  Array     constructor  creates  an  array  object  to  consist  of  three  elements.  This  array will  be  used  to  hold  three  images.  The  Image     constructor  will  preload  and  cache  three  images  and  assign  them  to  the  array  created  in  line  1.  The  src  property  of the  first  element  of the  image  array is  assigned  an  image  called  babyl.jpg.  Each  array  element  is  assigned  a  different  image.  The  function  called  myRandom    is  defined.  It  produces  a  random  number  that  will  be used  as  the  index into  the image  array,  causing a random  picture  to be  dis- played  on  the  screen.  The  variable  called  n  is  assigned  the  value  of the  length  of the image  array minus  1.  The  variable  called  randnum  is  assigned  a  random  whole  number  between  1  and  3,  the  value  returned  from  the  Math  object's  random  method.  Instead  of using  a number  to  access  the  image  array,  a string is used.  The  string is  the  name  given  to  the  HTML  image  defined  on  line  8.  This  is  the  image  that  ini- tially  appears  in  the  browser  window.  In  the JavaScript  tree,  this  image  is  repre- sented  as  document.images[0].src  document.images["dis- play"]. src.  Either  way,  this  image  will  be  replaced  with  the  value  of  the  image  in  the  The  inline  image,  called  baby.jpg  is  displayed  on  the  screen  when  the  program  starts.  It  is  named  display.  This  form  input  type  creates  a  button  on  the  screen.   ImageHome[randnum],src.   document.display.src   array   or   or    436   Chapter  12      Working with  Images  and  Links    Baby, oh Baby!   C l i c k H e r e f o r E i a b yF   Figure  12.14  Each  time  the  user clicks the  button,  a  random  picture  is displayed.   12.3.4  Links with an Image Map and JavaScript  You  might  want  to  associate  more  than  one  link  with  an  image.  This  can  be  done  by  using  an  HTML  image  map.  The  image  map  is  used  to  list  the  links  associated  with  the  image  and  an  event  handler  will  activate  some  action  when  the  user  clicks  the  link  or  rolls  the mouse  over it,  and so  on.  In Example  12.8,  an image map is  created with a num- ber  of links  associated  with  an  original  image  entitled  "Spring  in  San  Francisco."  When  JavaScript  handles  the  page,  it  creates  a  links  array where  each  element  of the  array is  a  link in  the  order  in  which  it was  placed  in  the  document.  There  is  an  onClick  event han- dler  associated with  each  link.  When  the  user  clicks  on  a  link,  he  or  she  is  redirected  to   see  http:  www.tutorialspoint.com java- another  scritpt j   avascript_image_map.htm .   in  San  Francisco"   image  of   "Spring   E X A M P LE    12.8       1  2    Using Links          <area shape="rect"  href="spring5.jpg"onelick=  <area  shape="rect"  href="spring2.jpg"onclick=  <area  shape="rect"  href="spring3.jpg"onclick=   "this.href=1 JavaScript:void 0 1;this.disable=true">  "this.href=1 JavaScript:void 0  1;this.disable=true">    12.3  Working with  Imagemaps   437   E X A M P LE      C O N T I N U E D    12.8  <area shape="rect"  href="spring6.jpg"  onclick=   "this.href=1 JavaScript : void 0  1 ; this.disable=true"  >                      Spring in San Francisco   <img src="springl.jpg" height=257 width=343  usemap="my_image_map"  >      var lstr =  " ";      tag to create a bulleted list  var len = document.links.length - 1;  for   var i = 1;  i < len;  i++  {     Create links  lstr +=  " < l i xa  href=" + document. 1 inks [i] .href;  lstr += ">spring" + i +"  \n";   }  lstr +=  " ";  document.write lstr ;                  E X P L A N A T I ON   The  image  map  starts  here.  It  can  be  used  to  allow  multiple  links  to  be  associated  with  one  image.  For  each  HTML  hyperlink  created  in  the  document,  JavaScript  creates  a  corresponding  links  array,  the  first  link  being  linhs[0].  The  links  are  deactivated  to  prevent  the  user  from  being  surprised  if  he  or  she  clicks  on  one  of the  images.  The  disabled  property of JavaScript is a Boolean prop- erty;  it  can  take  two  possible  values:  true,  or false.  The image  map  is used  to  create  links,  shown  under  the  picture,  so  that  the  user  can  click  on  one  of the  links  and  be  redirected  to  another  image.  The  image  map  makes  it possible  to  have  one  im- age  with  multiple  links,  rather  than  a  single  link  with  a  single  image.  Because  there  will  be  no  "hotspots"  in  this  image,  there  is  no  need  to  use  coordinates   see  Figure  12.15 .  This  is  the  image  that is  displayed  on  the  screen.  The  string  lstr will  contain  a  bulleted  list  of  each  hyperlink  in  the  links  array.  The for  loop  will  cycle  until  all  the  links  have  been  assigned  to  lstr.  JavaScript  makes  use  of  the  href property  of  the  link  object  to  create  the  string.  - rl    . . „     -]    „ » „J    . J l  n .  „1    .t:,  :   ;   :  .  ,  .     ,  l  l  3   4  5   6  7   1   2   3  4  5   £    438   Chapter 12      Working with Images  and Links    Spring in  San  Francisco      spring 1  s p r i n g2        s p r i n g3      *   s p i B g4  b r i n gt   Figure  12.15  Creating  links with JavaScript and  an  image  map.   Figure  12.16  Thumbnails of pictures in the image map for "Spring in San  Francisco."   12.4  Resizing  an  Image to  Fit the Window   Tf   ^ 7Ai  n  r c ci to  o  u n n rl  am?  o n rl   t ta i>  im  o rti> ri>Tnainc t  li  i> c o me  c i to   i r nn  tyi  i  r rk   t  « r o nt   t r~\ t-ocito    12.4  Resizing  an  Image to  Fit the Window   439   Because  the  image  size will  be  based  on  the  height  and width  of the  client's window,  it  is  better  to  base  the  size  of the  image  on  the  height  of the  window rather  than  the  width,  as  vertical  positioning  is  less  flexible  in  most  browsers.  The  width  of  the  image  will  be  scaled  automatically  as  long  at  the  browser  knows  its  height.  Example  12.9  demonstrates  how  to  resize  the  window  and  to  see  its  actual  dimensions  once  it has  been  resized.   E X A M P LE    12.9            Planet  Earth       function alert_me  {   alert "This window's outer width is:  "   +window.outerWidth+" and the outer height is:  "  +window.outerHeight  ;   }  function resizeEarth    {   document.images["earth"].style.height  =    document.body.clientHeight - 75   * 0.9;   }                 <img name="earth"  src="http:  recycle4acause.files.wordpress.com 2 009 12 earth.jpg"  alt="earth"images Earth.jpg"  alt="earth picture"  onclick="alert_me  ;" >              E X P L A N A T I ON   This is  a test to  find  the  dimensions  of the window's  dimensions before resizing it.  The  properties  of  the  window  object  are  used  to  get  the  height  and  width  of  the  window.  If the  user  resizes  his  browser window,  this  function will  scale  the  image  down  to  be  proportional  to  the  size  of  the  screen.  The  style  property  of  the  object will  be  used  to  resize  the  height  of  the  image.  Be- cause  the  image was  initially given  a margin  of 75  pixels  from  the  top  of the  page,  75  is  subtracted  from  the  total  height  of the  browser  window   clientHeight -  75 ,  and  multiplied  by  90  percent.   5,  6  Now resize  your  browser  window  manually.  The  image  will  not be  proportioned   1  2   3  4  5   6  7   1  2   3   4    440   Chapter 12      Working with Images  and Links    File   Edit   View   History   Bookmarks   Tools   Help   '   C   ô    Q  Pile :   C: Documents  and  Settii  ^   Google   P   !  Restore  Session   J   [2]  Planet  Earth   Figure  12.17  The image  before changing  the size of the window.   Ö  Planet  Earth  -  Mozilla  Firefox  File   History   Bookmarks   View   Edit   Tools   Help   E 0E   -   C   Ô        file :   C: Documents  and  5ettings Owner M;  &      Gc   Q  Planet  Earth   T    12.5   Introduction to Slideshows   441   Ml Pia net Earth  - Mozilla Firefox  File   History   .View   Edit   Bookmarks   Tools  Help   C   f xt       Q   file:   C: Documents  and  Settings Owner M^   -      Googie^   J  Planet  Earth   p   This window's outer width is:  618 and the outer height fs:  475   Figure  12.19  After clicking on the  image,  this alert box displays the window's  dimensions.   12.5  Introduction to Slideshows   Figure  12.20  A carousel  slideshow   .http:  www.  dynamicdrive.  com dynamicindex  14 carousel.htrri .   JavaScript slide  shows  are  great  for  creating photo  albums,  auction  listings,  digital  pre- sentations, art galleries, 3D carousels, and so on  see Figure  12.20 .  Once you get a basic    442   Chapter  12      Working with  Images  and  Links    slideshow  is  created,  how  to  control  the  start  and  stop  of  the  slideshow,  how  to  create  clickable  images,  and simple  animation.  Once you understand  the  basics,  understanding  and  debugging  existing  code  will  be  much  easier.   When you build  a slide show,  the  visitor  of your site must be  a first consideration;  for  example,  what  is  the  bandwidth  and  type  of browser,  or  will  the  load  time  be  too  slow  if you  are  loading  a  large  number  of images?  Navigation  is  another  important  consider- ation.  Will  the  visitor  be  able  to  control  the  slideshow  manually  or  will  it  automatically  start  when  the  page  loads  and  stop  when  it  exits  or  when  it  has  completed  a  specified  number  of  cycles?  You  might  want  to  create  buttons  to  control  the  slideshow  such  as  start,  pause,  go  back,  forward,  speed  up,  slow  down,  stop,  and  so  on.  You might want  to  create  optional  hyperlinks  or  clickable  images  where  each  frame  leads  to  a  different  URL.  You  might  want  to  randomly  display  the  images  or  show  them  in  a  certain  sequence.   The size  of the  images  also weighs into  a well-constructed slideshow.  When you have  a  series  of images  coming  from  different  sources,  they will  probably  not  have  the  same  height  and width.  When  the  slideshow starts,  images  of different sizes will  give  the  page  a jumpy appearance.  You might want to  crop  the  images  to  make  them  all  the  same size.  Because  the  first image you load will be  followed  or  overlaid by the next series  of images,  the  dimensions  of that  image will  determine  the  size  of the  rest  of the  images  giving  the  page  a  smooth  transition  as  each  one  loads.  However,  if  you  have  images  of  varying  dimensions,  forcing all  the  images  to  be  of the same size,  might distort the image  objects  if not  proportionally  scaled.  You  might  also  want  to  get  a  sleek  fade-in  effect when  one  image  replaces  the  previous  image,  or  get  persistence  so  that when  the  user  reloads  the  page,  he  or  she  picks  up  in  the  slideshow where  it  left  off.   Figure  12.21  on  page  443,  called  "Ultimate  Fade-in  slideshow   v2.1   located  at  dynam- icdrive.com,  demonstrates  a  sophisticated,  cross-browser,  fade-in  slideshow  script,  and  the  site  offers  free  code  to  build  your  own  slideshow  similar  to  the  demos  shown  later,  saving lots  of time  and  energy.  Before  downloading sophisticated  scripts  from  the  Web,  this  chapter  describes  a  very  basic  slideshow  to  help  you  understand  how  JavaScript  slideshows  work,  which will  help  you  later when you  are  debugging,  updating,  revising,  and  maintaining  more  complicated  scripts.   Note: To disable the viewer from right-clicking the mouse to get a menu for saving images  from  your  page,  go  to  http:  www.dynamicdrive.com dynamicindex9 noright2.htm  for  freejava- Script  code.   12.5.1  A Simple Slideshow with Controls  Example  12.10  is  a  JavaScript  program  that  cycles  through  a  selection  of  images.  It  makes  use  of image  replacement,  a  timer  function,  and  buttons  that serve  as  controls  to  give  the  user  the  ability  to  start  and  stop  the  slideshow.  See  Chapter  13  for  an  example  f  TT   1  -  n   n  n  ^   -f   _   - 11      j   1   -    12.5   Introduction  to Slideshows   443   Demos:   -Straightforward,  auto  playing  slideshow  with  no  hyperlinking,  descriptions  etc.   -Auto  playing  slideshow  with  all  slides  showing  a  persistent  description.   -Auto  playing  slideshow  with  some  slides  hyperlinked  and  carrying  a  description,  shown  onmouseover,   1  4    a   -Manual  slideshow  with  custom  buttons  and  statu:  control.   F  i g  u  re  12.21   see  p a ge   442 .   http:  www. dynamicdrive. com dynamiciridex 14 fadeinslideshow. htm   E X A M P LE    12.10        Slide  Show   <script  type="text javascript   if document.images {   var i=0;  var timeout;  function preLoadlmages  {  planet = new Array  ;  planet[0]=new  Image  ;  planet[0]=" images Venus.jpg";  planet[1]=new  Image  ;  planet[1]=" images Neptune.jpg  Dianet T 21=new Imaae  ;      global variable    444   Chapter  12      Working with  Images  and  Links    E X A M P LE    12.10     C O N T I N U E D    planet[4]=new  Image  ;  planet[4]=" images Jupiter.jpg";   4  5  6   7  8  9   }  else{   }   }  else{   alert "There are no images to preload" ;   }  function  startSlideShow  {   if i < planet.length {   document.images["planet pic"].src  = planet[i];  i + + ;   i = 0;  document.images["planet pic"].src  = planet[i];   }  timeout  =  setTimeout 'startSlideShow  ',1500 ;   }  function  stopSlideShow  {  clearTimeout timeout ;   }       10          <img name="planet pic"  src="Jupiter.bmp"  height="348"      width="545px"  >      <input  type=button value="Start Show"  <input  type=button value="Stop Show"   onClick="return  startSlideShow  ;" >   onClick="return  stopSlideShow  ;" >               E X P L A N A T I ON   1  A  function  called  preLoadlmages     is  defined  in  the  head  of  the  document.  It  will   define  a  list  of images  that will  be  loaded  before  anything  else.   2  A  new  array  called,  planets,  will  is  declared.  It  will  be  assigned  the  images  of  the   planets.  The  Image    constructor  creates  and  preloads  a  new  image  object  called  planet [0],  The  function  called  startSlideShow    allows  the  user  to  determine  when  to  start   3  4    12.5   Introduction to Slideshows   445   E X P L A N A T I ON    CONTINUED    6   The src property of the image  object is  assigned  a new picture.  By using the  name  of the image as an index value of the images array, JavaScript can determine which  image  object  to  use.   Another  way  to  get  to  the  image:  document.planet_pic.src  or  document,  images  [0].src.    7  Once the index value exceeds the length of the array, the index value,  i, is reset to   0  and  the  slideshow begins  again.  The  timer is set so  that once  every  1.5  seconds  a new picture is  displayed.   8  9  When  the  user  clicks  the  button  labeled  "Stop  Show,"  the  clearTimeout    function  is  called,  causing  the  timer  to  stop.  The  argument,  timeout,  is  a  reference  to  the  timer  set  on  line  8.   10  The  initial  image  is  a  picture  of the  planet Jupiter   see  Figure  12.22 .  It is  given  size  dimensions,  which will  determine  the  size  of all  images  in  the  slideshow.  If  the images are of different dimensions, they will have to be scaled to this size.  Not  properly sizing images will  give  them  a  distorted  appearance.   S l i de   S h ow   -  M o z i l la   F i r e f ox   Edit   1 File  U —.  LSzL  j   Slide  Show   '  C  X   Ô   ¡Ü   View   History   Bookmarks   Tools  Help   I   file :   C: Documents  and  Settings Owner My  DocumJ  '  I   j  Q  Slide  Show   ^W:d. J ^W:d. J   Figure  12.22  Planet slideshow with two control  buttons.    446   Chapter  12      Working with  Images  and  Links    is  accomplished  by  assigning  the  image  to  a  link;  that  is,  a  link  that  is  assigned  a Java- Script  user-defined  function  and  triggered  when  the  user  clicks  the  image.   E X A M P LE    12.11       1   2  3   4  5  6  7   8  9  10  11  12    Planet  Slide  Show        var timeout;  var step=0  var whichimage=0;  var planet=new Array    ;  function preLoadlmages  {  planet[0]=new  Image  ;  planet[0]=" images Jupiter.bmp";  planet[1]=new  Image  ;  planet[1]=" images Neptune.bmp";  planet[2]=new  Image  ;  planet[2]=" images Earth.jpg" ;  planet[3]=new  Image  ;  planet[3]=" images venus.jpg";  planet[4]=new  Image  ;  planet[4]=" images http: mars.jpg";   function  slideShow  {   document.images["planet  pic"].src=planet[step];  whichimage=step;  if   step < planet.length {   step++;   }  else{  }  setTimeout "slideShow  ",1800 ;   step=0;   }  function  slideLink  {  switch whichimage {   case 0:   window.locat ion=  "http :  www.nasa.gov worldbook jupiter_worldbook.html";  break;  case 1 :   window.location=  "http:  www.aerospaceguide.net planet planetneptune.html"  break;  case 2 :    12.5   Introduction  to Slideshows   447   E X A M P LE    12.11     C O N T I N U E D    case 3:   window.location=  break;  case 4:   "http:  cseplO.phys.utk.edu astr161 lect venus venus.html";   window.location=  "http:  www.nasa.gov worldbook mars_worldbook.html";  break;   }   }           13      14         Click on a Planet      <img src="Jupiter.bmp" name="planet pic"  border="0" width="120"   >                  E X P L A N A T I ON   1  Global  variables  that will  be  used  by the  functions  in  this  program  are  declared  in   2  3   4   5   6   the  head  of  the  document.  The  Array     constructor  creates  an  array  object,  called  planets.  The  Image     constructor  will  preload  and  cache  four  images  and  assign  them  to  the  array  created  in  line  2.  This  function  starts  the  slideshow.  It  displays  an  array  of images  one  at  a  time  at  selected  intervals  of  1.8  seconds.  The  src  property  of the  first  element  of the  image  array is  assigned  an  image  called  Jupiter.bmp.  Each  array  element  is  assigned  a  different  image.  Every  1.8  seconds  an image  is replaced with  a new image  in  the  array,  until  all  the  planets  have  been  displayed,  at which  time  the  index  value,  called  step,  is  set  back  to  0.  The  variable,  whichimage,  is  used  to  get  the  index  value  of  the  image  that  was just  clicked  by  the  user.  This  value  will  be  used  in  the  switch  statement  on  line  11.   7  As  long  as  the  value  of step  is  less  than  the  size  of  the  planets  array,  the  step  value   will  be  incremented  by  1,  taking us  to  the  next  image  in  the  array.   8  When  the  index  value  is  greater  than  the  size  of  the  array,  it will  be  reset  to  0.    448   Chapter 12      Working with Images  and Links    EXPLANATION   11  The  whichimage  variable  is  set  to  the  index  value  of  the  current  image.  After  the  user  clicks  the link in  the  current image,  the switch statement is used  to match  on  the  index value  of that image  and  then  redirect  the  user  to  a page  describing  the  planet.  By using  the  back button,  the  slideshow will  continue.   12  The  location  property  of the  window  object is  assigned  a Web  page  describing  the   planet  that  the  user  clicked  during  the  slideshow.   13  Once  the  page  has  loaded,  the  functions  preLoadlmagesQ  sand  StartShowQ  are  called  to preload  the images  and  then start the slide show.  In  this  example,  there  are no  controls  to start or stop  the slideshow.   14  The first image, Jupiter.bmp, is assigned  to a link,  that when  clicked, will  call  the  function,  slideLinhQ  to  bring  up  another  page  with  a  description  of Jupiter.  Out- put is shown in Figures  12.23  and  12.24.  Figure  12.25 shows an open source Web  site  that includes  example  slideshows.   - p l i ck   on   a  P l a n et   è   Figure  12.23  A clickable  image slideshow.   -   G   ' f er    http:  www.aerospaceguide.net planet planetneptune.html    fa   -   Ï »"   !  AOL  Search   [ 2]   The  Planet  ...     3  venus.jpg   ...      J  The  Planet  ...   Planet  Slide  ...     J  Planet  Slide  ...    $  MASA  -  Mars      J  Planet  Slide  ...    Q  T he   PI...  Q      Cosmonaut  Training   HYDROLAB  MiG-29   Fiy  the  M i G - 25   Sub-Orbital Flights  EDGE OF SPACE   Experience Zero-Gravity  Star City  The  Planet  Neptune   Fly  the  Legend!   The  Planet  Neptune  is  the  eighth  planet  from  the  sun.  It  is  also  known  as  the  Blue  Giant.  Neptune  is  the  fourth  and  outermost  of  the  gas  giant  planets  and  also  has  rings.  Its  atmosphere  is  mostly  hydrogen  and  helium.  In  Roman  mythology  Neptune  was  the  god  of the  Sea.   Buy  @ASG:  Support  Us!   ASG  Space  Shop  Books  Clothes  Collectibles  Space  Magazine:  Models   You  are  here:   >  the  Planet  Neptune   The  Solar  System    12.6  Animation and Timers   449   BarelyFitz  Designs   Web-standard solutions for a non-standard world   s  H o me   :  Software  Projects   JavaScript  Slideshow   Intro  Wizards  Download  &  Examples  Tutorials  Docs   License   [  play  ]  [ stop  ]   [  previous""]  [  newt  ]   1.  Welcome   Slideshow   @  Print  this  page  Email  this  page  Add  to  del.icio.us  Translate  this  page:  1  Italian  i . vj   [  Ok   ]      Slideshow Home      Slideshow Wizard   Rate  This  Script      HotScripts.com   I Excellent!   Vote!   Welcome to the BarelyFitz JavaScript  slideshow!  Use the slideshow controls  for a  tour of the slideshow features.   Welcome to the BarelyFitz JavaScript slideshow! Use the slideshow  controls for a tour of the slideshow features.   This is free, open-source software: you can redistribute it and or  modify it under the terms of the GNU General Public License. For more  information refer to the  License page.  The slideshow is supported by user donations.   Home  About  Contact  Blog   Projects  Support future  development!   Make  a  D o n a t i on  J   CSS Positioning  CSS Colors  Filter Select  Slideshow  Sere en casts  Syndication  Tab Interface  T r u n c a te   H T ML   T e xt  Web Data Encoder  More...   Figure  12.25  An open  source Web site that provides excellent examples of slideshows.   12.6  Animation  and  Timers   On a small but thick pad of paper a boy has drawn a stick man on each page. For each page  he  draws  his  stick man  in  a  sightly  different position,  maybe  moving  one  leg up  and  an  arm down. After filling the pad with as many little stick man pictures as he wants to draw,  he goes to his friend and starts rapidly flipping the pages. Voila! He has made a little movie!  Although seemingly primitive, this is the idea behind JavaScript animation.  Instead of flip- ping  through  a pad  of drawings,  the  stick man  drawings  can  be  scanned  into your  com- puter as a set of images as shown in Figure  12.26. JavaScript can load the images and then  give them the appearance of animation by using a timer that will be set to put a new image  on  the  page  at short repeating intervals,  similar  to  flipping  the  pages  of the  small  pad  of  paper. With JavaScript, a number of DOM elements   ,   , etc.  can be moved in  the  document according to  a looping mechanism  or  an expression tied  to  a timer.   Two  JavaScript  functions  used  as  timers  are  setTimeoutO  and  setlnterval  ,  which  allow JavaScript  code  to  be  executed  at set intervals.   We  have  seen  the  use  of both  of  th   i>ci>   tb  r nn   rvii  n nt    f n n r t i n nc    t i > vt    t k ic    1    450   Chapter  12      Working with  Images  and  Links    12.6.1  Changing Image Position  In  Example  12.12,  two  stick  figures  have  been  scanned  into  the  computer  and  saved  as  .png files.  The  figures  are  loaded  and  alternately  displayed  on  the  screen  at short intervals  giving  the  illusion  that  the  stick figure  is  running.   E X A M P LE    12.12        animation    1  2  3  4  5   6  7  8      var pics;  function  animate whichone {  whichone %= pics.length;  document.images["stickman"].src=pics[whichone];  window.setTimeout "animate "  +   whichone + 1 +" ;",500 ;   }  window.onload=funct ion  {   pics=new Array   "0.png","1.png","0.png","1.png" ;  animate 0 ;   }              9               E X P L A N A T I ON   1  A  global  variable  called  pics  is  declared,  which  will  be  available  to  all  the  functions   in  this JavaScript  code.  The  function  called  animateQ  is  called  the  first  time  on  line  8.  The  initial  value  of  pos  is  0.  On  line  5  the  window's  setTimeout    function  calls  animateQ  repeatedly  every  .5  sec.  Each  time  animateQ  is  called  the  whichone  value  is  incremented  by  1.  The  value  of  whichone  is  changed  each  time  the  function  is  called  by  using  the  modulus  operator.  The  remainder  will  be  a  number  between  0  and  4,  not  includ- ing  4.  This  number  is  used  as  an  index  in  the  pics  array  to  select  an  image.  The  source  file  for  the  stick  man  image  file  changes  each  time  the  function  is  called,  so  rapidly  that  the  stick man  appears  to  be  running.  This  is  where  the  timer  is  set  to  cause  the  animation  of the  stick man.   2   3   4   5    12.6  Animation and Timers   451   animation  - Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   animation  -  Mozilla  Firefox      Windows  Marketplace   ^  AOL  Mail   1629   ti   ~D~  file :   C: Documents" ;.;   1  Q  animation   Figure  12.26  Animated  stick  m an   appears  to  be  running.   12.6.2  Changing Image Height and Width Properties  In Example  12.13  the width  and  height properties  of the  image  object  allow us  to  change  the size  of an image  dynamically.  By increasing the width  of a black bar image  at set time  intervals,  the  bar  appears  to  be  lengthening  as  it  is  displayed.   EXAMPLE   12.13        Progress  Bar       function progress  {   1  2  3   4       Set  the width of the image every .5 second  if document.images["bar"].width < 3 00 {   document.images["bar"].width += 5;  document.image s["bar"].he ight = 10 ;      Setting the height keeps  the bar from getting taller     as  the image is widened.  }  else{  }   clearlnterval timer ;   var timer;  window.onload = function  f    452   Chapter  12      Working with  Images  and  Links           7       Watching your  Progress    E X A M P LE    12.13           E X P L A N A T I ON   l   This  user-defined  function will  cause  the  image  to  be  stretched  horizontally  every  .5  seconds.   2  As  long  as  the  length  of  the  bar  is  less  than  300  pixels,  we  enter  this  if block.  If   3  4   not,  the  interval  timer  is  stopped.  The  width  of the  image  is  increased  by  5  pixels  every  .5  seconds.  The  height  of  the  bar  is  at  a  constant  10;  otherwise  the  browser  will  attempt  to  increase  the  height  of the  bar  to  be  proportional  to  the  increase  in  the  length.  The  variable,  timer,  will  be  assigned  the  return  value  of  the  setlnterval    function.  5  6  The  window's  onload  method  is  assigned  an  anonymous  function.  When  the  page  has  finished  loading,  this  function  starts  the  timer,  set  Interval  ,  which  in  turn  calls  the  progress     function  every  .5  seconds.  The  image  of  a  black  bar  will  be  displayed  when  the  page  is  loaded   see  Figure  12.27 .   7      inds   Qj  Backgrounds   Q   Backt   +  inds   Qj  Backgrounds   Q  Backgroi   Watching your Progress   Watching your Progress   Figure  12.27  Making  an  image grow!   12.7  What You Should  Know   A  story book without pictures  is like  a Web  page without images:  Doable,  but not much  fun.  This  chapter  demonstrated  some  of  the  ways  you  can  animate  a  Web  page  using  JavaScript  to  manipulate  images.  Now you  should  know:    12.7  What You Should  Know   453   5.  How  the  image  name  is  used  to  reference  a  particular  image.  6.  How  to  replace  images  with  the  src  property.  7.  How  to  create  a  simple  rollover.  8.  What  considerations  contribute  to  how you  set  up  a  slideshow.  9.  What  preloading  accomplishes.  10.  About  the  Image  constructor.  11.  How  event  handlers  work with  images.  12.  How  links  work  with  images.  13.  How  to  use  the  link  object  and  imagemaps.  14.  How  to  create  a  simple  slideshow.  15.  How  timers  work with  animation.  16.  How  to  resize  an  image.  17.  How  to  randomly  display  a  set  of images.    454   Chapter  12      Working with Images  and  Links    Exercises   1.  Create  an  array  of different sports  images  so  that  each  time  the  page  loads,  a  random  image  is  displayed.  Center  the  image  on  the  page,  and  specify width  and  height.  Choose  a  background  color.   2.  Create  a  document  entitled  "Our  Universe."  The  page will  consist  of three   frames.  The  top  frame will  be  a  horizontal  frame  to  contain  the  title,  "Our  Uni- verse,"  The  left  frame  will  contain  a  form with  radio  buttons  representing  the  names of planets and a textbox.  The background image in the second frame will  be  a sky  filled with  stars.  When  the  user  clicks  a radio  button,  a picture  of the  selected  planet will  appear  in  the  second  frame.  A  description  of the  planet will  appear  in  a  textbox under  the  form  in  the  left  frame.   3.  Create  a JavaScript program  that will  produce  a slideshow.  It will  contain  an   array of four images.  Preload  the images.  A  timer will be set so  that a new image  replaces  another  image  every  10  seconds.  If the  user  clicks  a button  labeled  Start,  the  timer  starts  the  image  replacement.  If the  user  clicks  a  button  labeled  Stop,  the  timer  stops  it.   4.  When  the  page  is  loaded,  call  a  function  that will  preload  two  images,  each   associated with  a link.  When  the  mouse  rolls  over  an  image,  replace  the  first  image with  the  second  image.  When  the  mouse  moves  away  from  the  image,  the  first image  appears.   5.  Create  the  illusion  of a  car  driving  across  the  screen using  animation.  Move  the  car  to  the  right a  certain  number  of pixels  using a  timer.  Create  two  buttons  to  start  and  stop  the  car.   6.  Use  a program such  as Windows Paint to  draw three  traffic lights.  Preload  the   three images.  Every 30 seconds  change  the light.  When  the  light turns green, say  "Go"  in  a little box under  the  light,  for yellow  "Slow down,"  and  for red,  "Stop."   7.  Find  a picture  of the  major  planets in  our  solar  system.  Create  an  imagemap  so   that when  the  user  clicks  one  of the  planets,  a popup window is  opened  describing  that  planet.    chapter 13   Events   13.1  Introduction to  Event Handlers   JavaScript  reacts  to  events.  We  have  been  talking  about  events  since  Chapter  1,  "Intro- duction  to JavaScript,"  because  events  are  inherently  part  of  almost  all  Web  pages  and  they  make  the  pages  interactive  and  dynamic.  JavaScript  events  are  asynchronous,  meaning  that  they  can  happen  at  any  time.  They  are  actions  that  are  initiated  by  a  user  visiting  a Web  page;  for  example,  if the  user  submits  a  form  or  moves  the  mouse  over  a  link  or  an  image,  he  or  she  might  trigger  an  event.  When  an  event  occurs,  your  browser  has some  default actions it takes;  for  example,  if you  click on a link,  it opens up  the loca- tion  in  the  href.  JavaScript  can  also  respond  to  a  user's  action  and  execute  code  in  response.  The  event itself may be blur,  click, change, keystroke,  and so  on.  We have seen  many  examples  using  event  handlers  in  previous  examples.  This  chapter  explains  how  each  of  the  event  handlers  responds  when  events  occur  on  different  objects.   JavaScript  has  three  event  models  for  programming  events:  the  inline  model,  the  scripting model,  and  the  DOM  2  model.  In  this  chapter we  discuss  the  inline  model  and  the  scripting  model.  In  Chapter  15,  "The  W3C  DOM  and JavaScript,"  we  describe  the  way  events  are  handled  by  the  W 3C   DOM  Level  2  model  and  its  pros  and  cons.   13.2  The  Inline Model for Handling  Events   This  is  the  oldest  and  easiest way  to  handle  events.  With  the  inline  model,  the  event han- dlers  are  attributes  of an  HTML  tag  and  are  used  to  handle  the  event  for  which  they  are  named.  For  example  the  onClich  handler  will  handle  the  click  event,  the  onSubmit handler  will  handle  the  submit  event,  and  so  on.  Although  a  very  popular  way  of  dealing  with  events,  the  disadvantage  of using  the  inline  model  is  that JavaScript is  intrusive;  that is,  it    456   Chapter  13      Handling Events   As  shown  in  previous  examples,  if the  user  clicks  the  submit  button, JavaScript  can  check  to  see  if a  form  was  filled  out  properly;  or  if  the  mouse  moves  over  a  link, Java- Script can  replace  one  image with  a new one. JavaScript's  response  to  one  of these  user- initiated  events  is  called  event  handling.  If the  user  clicks  a  button,  for  example, Java- Script  might  handle  the  event  by  calling  a  function  that  will  perform  some  designated  task,  such  as  to  open  a  new  window  or  bring  a  window  into  focus,  perform  a  calcula- tion,  or  submit  a  fillout  form.  Here  is  a  list  of  some  of  the  kinds  of  events  that Java- Script  can  handle:      Mouse  actions.     Keyboard  actions.     Actions  on  form  fields.     When  the  page  is  first  loaded  or  unloaded.     After  a  specified  time  has  passed.     When  an  error  has  occurred.   13.2.1  HTML and the Event Handler  JavaScript  event  handlers  are  not  enclosed  between     tags.  Event  han- dlers  are  attributes  of HTML  tags   specified  in  the  HTML 4 specification .  If the  event is  associated with  a  form  tag,  then  it will  be  an  attribute  of the     tag,  and  if associated  with  a  link,  it will  be  an  attribute  of the     tag,  and  so  on.  Once  you  have  decided  what  event  you  want  to  handle,  you  normally  assign  a  function  to  the  event  handler.  This  is  called  registering  the  event.   To register an event, a string representing a command is assigned to the event handler.  The  command,  usually  a JavaScript  function,  will  be  executed  when  the  event  is  trig- gered  by  the  user.  Whereas  a  property  or  method  might  be  associated  with  a  single  object,  events  are  usually  associated  with  more  than  one  object.  The  onClick  event  han- dler,  for  example,  may  be  associated with  a  form's  input  tag,  but  it  could  also  be  associ- ated with a link tag,  or  an image map area,  or  a simple button.  There is  an  order in which  events  are  handled.  See  the  section  "Capturing and Bubbling   Trickle  Down  and Bubble  Up "  on  page  500.    Note  the  spelling  convention  used  for  the  event  handlers.  The  first  word,  on,  is  all  lowercase,  and  the  first  letter  of each  subsequent word  is  capitalized.  Unless  the  event  is  being used  as  a method  in  a JavaScript program   see  the  section  "JavaScript  Object Meth- ods  and  Events"  on  page  462 ,  it  is  not  case  sensitive.  Using  onClick  or  onclick  is  fine.    Consider  the  following  example:       <input  type="button"   value="Wake me"   n n rl     i  r ^ V - " i . i a t o T T n ra   1  1  M"       ~>    13.2  The Inline  Model for Handling Events   457   The  HTML     tag  contains  an  input  tag  with  three  attributes:  type,  value,  and  onClick.  The  input  type  is  a  "button";  it  has  a  value  of  "Wake  me",  and  a JavaScript  event  handler  called  onClick.  The  onClick  event  handler  is  assigned  a  function  called  "wake- UpCallO".  When  the  user  clicks  the  button  labeled  Wake  me,  a  click  event  occurs,  the  onClick  event  handler  is  triggered,  and  the  wakeUpCall    function  will  be  executed,  as  demonstrated  in  Example  13.1  and  shown  in  Figure  13.1.   EXAMPLE   13.1        Wake   up call       function wakeUpCall  {  }   setTimeout "alert "Time to get up!" 1,5000 ;       Function is defined here                <input  type="button"   value="Wake me"  onClick="wakeUpCall   >               EXPLANATION   The  start  of  the JavaScript  program.  The  wakeUpCallO  function  is  defined  in  the  JavaScript  program,  between  the      tags.  When  the  user  clicks  the  form  button,  the  function  assigned  to  the  event  handler  is  called;  that  is,  wakeUpCallO  is  called.  The  function  itself is  defined in a JavaScript program,  even though it is called from  outside  the program.  The  timer  is  set  for  5,000  milliseconds.  The  alert  dialog  box  will  pop  up  on  the  screen  5  seconds  after  the  user  clicks  the  button.  End  of  the JavaScript  program.  End  of  the  HTML     tag.  This  is  the  start  of  an  HTML     tag.  The  type  of  form  uses  a  "button"  input  type.  The  value  is  shown  in  the  button  as  the  text,  "Wake  me".  The  onClick  event  is  assigned  the  name  of  a  function.  When  the  user  clicks  the  button,  the  onClick  event  handler,  wakeUpCallO,  will  be  called.   1  2  3  4  5  6  7  8  9   1  2   3   4  5  6  7  8  9    458   Chapter 13      Handling Events   Figure  13.1  Before clicking the button  left ; after clicking and waiting five seconds   right .   A  list  of JavaScript event handlers  and  their  uses  is  given  in  Table  13.1.   Table  13.1   JavaScript Event Handlers and What 1 hey Do   Event  Handler   What  It  Affects   When  It  Happens   onAbort   onBlur   Images   Windows, frames,  all form objects   onChange   Input, select, and text areas   When image loading has been interrupted.   When focus moves out of this object except  hidden; e.g., when the cursor leaves a textbox.   When a user changes the value of an element  and it loses the input focus. Used for form  validation.   onClick   Links, buttons, form objects,  image map areas   When a user clicks on an object. Return false  to cancel default action.   onDblClick   Links, buttons, form objects   When a user double-clicks on an object.   onDragDrop   Windows   onError   Script   onFocus   Windows, frames,  all form objects   When a user drops an object, such as a file,  onto the browser window.   When an error in the script occurs; e.g., a  syntax error.   When a mouse is clicked or moved in a  window or frame and it gets focus; except  hidden.   onKeyDown   onKeyPress   Documents, images, links, forms   When a key is pressed.   Documents, images, links, forms   When a key is pressed and released.    13.2  The Inline  Model for Handling Events   459   Table  13.1   JavaScript  Event  Handlers a nd   What They  Do   continued    Event  Handler   What It Affects   When  It Happens   onMouseOver   Links   and images within links    onMove   onReset   onResize   onSelect   onSubmit   Windows   Forms reset button   Windows   Form  elements   Forms   onUnload   Body,  framesets   When the mouse moves over a link.  Return  true to prevent link from showing in the status  bar.   When the browser window is moved.   When the form's Reset button is clicked.  Return false to stop reset.   When the browser window changes size.   When a  form element is selected.   When you want to send a  form to the server.  Return false to stop submission to the server.   After the document or frameset is  closed or  reset.   13.2.2  Setting Up an Event Handler   There  are  two  parts  to  setting  up  an  event  handler:   1.  The event handler is assigned as an attribute of an HTML tag such as a document,   form,  image,  or  link.  If you want  the  event  to  affect  a  document,  then  it would  become  an  attribute  of the     tag;  if you want  the  event  to  affect  a button,  then  it would  become  an  attribute  of the  form's     tag;  and  if you want  the  event  to  affect  a  link,  then  it would  become  an  attribute  of the     tag.  For  example,  if the  event is to be  activated when a document has  finished loading,  the  onLoad  event  handler  is  used,  and  if the  event  happens  when  the  user  clicks  an  input  device,  such  as  a  button,  the  onClick  event  handler  is  fired  up.           <input  type="button"   value="Tickle me "  onClick="alert 1Hee hee ho hee1 ;"   >           2.  The  next step  is  to  register  or  assign  a value  to  the  event handler.  The  value  can   KÖ   ft  K m 1 t _ i vi   Tu   c n ^ ii     c    11    460   Chapter  13      Handling Events   And  be  careful  with  quotes!  The  handling  function  must  be  enclosed  within  either  double  or  single  quotes.  If  you  have  double  quotes  within  the  function,  surround  the  whole  thing  in  single  quotes,  and  if you  have  single  quotes  within  the  function,  either  escape  the single  quote with  a backslash,  or surround  the whole  thing in  double  quotes.  onClick="window.open 'myhome.html1,  1newWin1 "   built-in method  -->  user-defined  function  -->  onUnLoad="timeOver  ;"  group of statements  -->   onChange="if   IcheckVal this.value,  1,  10  {   this.focus  ;  this.select  ;>"   EXAMPLE   13.2                      EXPLANATION   1   2  3  4  5  6   1   2  3   4  5     An  event   <body bgcolor="magenta"  onUnload="alert 1 So long,  stranger!1 ",^          <input  type="button"   value="Click here to be alerted"  onClick='alert "Watch out!  An asteroid is approaching   earth!" 1   >   The     tag  contains  the  onUnload  event  handler.  When  the  user  browses  to  another  page  or  exits  the  page,  the  alertQ  method  will  be  triggered.  Normally you  would  use  this  event  for  a  quick  cleanup  or  exit  function,  such  as  closing  a  win- dow or  clearing a page.  Starting some  time-consuming process  at this point would  be  annoying to  the user, because he  or  she  is  trying to leave  this page without silly  delays.  The  only purpose  for  this  example  is  to  demonstrate  when  the  event  hap- pens.  The  form  starts  here  with  the     tag.  The  input  type  for  this  form  is  "button".   The  value  on  the  button  is  "Click  here  to  be  alerted".  The  onClick  event  is  an  attribute  of  the  HTML  form's  input  tag.  When  the  user  clicks  the  mouse  on  the  button   the  onClick  event ,  the  alertQ  method  is  called.    13.2  The Inline  Model for Handling Events   461   Figure  13.2  When  the  user  clicks  the  button,  the onClickevent  is  activated   left ;  when  the  p a ge   is  refreshed  or  exits,  the onUnload event  is  activated   right .   13.2.3  Return Values  Sometimes  the  event  handler's  return  value  is  necessary  if  a  certain  action  is  to  proceed.  The browser's  default actions  can be  suppressed  by returning  a false value,  or  a form's sub- mission  can  be  completed  by sending back a  true  value.  For  example,  if the  onSubmit han- dler  gets  a  true  value  back  from  a  function  or  method,  then  a  form  may  be  submitted  to  the  server,  and  if not,  the  form will  be  stopped.  In  Chapter  11,  "Working with Forms  and  Input Devices," we saw that when validating a form, return values  are used.  Example  13.3  illustrates  these  return  values.    An HTML Form and the onSubmit  Event Handler       c h e c k F o r m   y o u r i n f o  {   f u n c t i on    if yourinfo.namestring.value == ""    y o u r i n f o . n a m e s t r i n g . v a l ue   ==  null {       Check for an empty string or null  value  alert "Please type in your name" ;  r e t u r n   f a l s e  ;   EXAMPLE   13.3       1  2   3  4   5   6   }  else{   r e t u r n   t r u e  ;   }   }                < f o rm   n a m e = " i n f o'    a c t i o n = "   c g i - b i n   b o o k s t u f f   f o r m l . c g i"    Chapter  13      Handling Events    CONTINUED    13.3  Type your name here:               462   EXAMPLE                  EXPLANATION   The  function  called  checkForm    has  one  argument,  yourinfo,  which  is  a  reference  to  the  form  defined  on  line  6.  If the  user  didn't  enter  anything  into  the  textbox,  the  value  of  the  input  type  will  be  null.  The  expression  if yourinfo.namestring.value  ==  ""   checks  for  an  empty  field.  The  user  didn't  enter  anything  into  the  textbox.  An  alert  dialog  box  will  appear  on  the  screen,  and  after  the  user  clicks  OK,  he  or  she will  have  a  chance  to  fill  out  the  form  again.  If false  is returned  from  this  function,  the  form  will  not be  submitted  to  the  server.  If  true  is  returned  from  this  function,  the  form  will  be  submitted  to  the  server.   The  HTML  form  starts  here.  The  form,  document forms [0],  is  named  "info".  The  action  attribute  contains  the  URL  of the  program  that will  process  the  form,  a  CGI  script  on  the  server.  The  method  attribute  defines  the  HTTP  method  that  deter- mines  how  the  data  will  be  sent  to  the  server.  The  onSubmit  event  handler  is  an  attribute  of  the  HTML     tag  and  is  trig- gered  when  the  user  clicks  the  submit  button.  The  event  handler  is  a  function  called  chechFormO.  Its  parameter  is  the  name  of  the  form,  document.info   also  could  use  its  array  name:  document.forms[0] .  The  return  keyword  is  required  when using the  onSubmit  event handler.  One  of two  values will  be  returned:  either  true  or  false.  The  input  type  for  this  form  is  a  text  field  box.  Its  name  is  "namestring"  and  it  can  hold  a  string  of up  to  50  characters.  The  input  type  is  the  submit  button.  When  the  user  clicks  this  button,  the  onSub- mit  event  handler  on  line  7  is  activated.  See  Figure  13.3.   8  9   1   2   3   4  5   6   7   8   9    13.2  The Inline Model for Handling Events   463   Address   C:\sambar50\docs\ch11\submitevent.html   Type your name here:    Submit     Clear     Please type in your name   OK   Figure  13.3  Using  the onSubmitevent and  return values.  If the  return value  is true  the form is submitted; otherwise, it is stopped.   tag, whereas  an  event method  is  applied  to  an  object.  Because HTML  elements  are  also  treated  as  objects   e.g.,  the  window,  form,  or  button  are  also JavaScript  objects ,  there  are  several  methods  that  can  be  applied  to  these  objects  to  simulate  events   see  Table  13.2 .  When  an  object uses  an  event method,  the  method behaves  as  though  the  event has happened;  for  example,  the  click    method  behaves like  the  onClick  event,  the  blur    method behaves like  the  onBlur event,  and so  on.1  The  event method is  applied to  the object with the dot syntax, as are all other methods; for example, in a JavaScript pro- gram  you  might see  something like  the  following:   document.test.buttonl.click  ,  window.focus  ,  document.myform.submit  ;   Table  13.2  Event Object Methods   Event  Method   Event Handler It  Simulates   The Object It Can Affect   bhirO   click      focus      reset      select 0   onBlur   onClick   onFocus   onReset   onSelect   Removes focus from windows, frames, form fields.   Simulates a mouse click in form fields  buttons .   Puts focus in a window, frame, form field.   Clears the form fields.   Selects or highlights text in a form field.   submitO   onSubmit   Submits a form.    464   Chapter  13      Handling Events   EXAMPLE   13.4        Simulation  Methods       <form name="myform"  action="http:  localhost cgi-bin doit.pi"  method="post">   Enter your name:   <input  type="text"  name="namefieId"  id="namefield"  size="30"  value="Name: "  onFocus="this.select  "  >      Enter your address:   <input  type="text"  name="addressfield"  id="namefield"  size="30"  value="Address: "  onFocus="this.select  "  >   l  2   3   4   5   6   7           Click here to submit your form                    Click here to reset your form        EXPLANATION   l  A  form  named  myform  is  started.  2  This  is  the  URL  where  the  form  will  be  processed  after  it  is  submitted.  3   The  onFocus  event  handler  is  assigned  an  event  method  called  select  .  For  this  textbox,  when  the  mouse  cursor  is  clicked  in  the  box,  the  onFocus  event  is  trig- gered  and  the  event  is  handled  by  highlighting  or  selecting  the  text  in  the  box.   4  Another  textbox  is  defined  to  hold  the  user's  address.  5  When  the  cursor  is  moved  into  this  field,  the  textbox  gets  focus  and  the  selectO   method  is  called  to  highlight  this  box,  as  in  line  3.   6  A  deactivated  link  is  assigned  an  onClich  event  handler.  When  the  user  clicks  the    13.3  Handling a Window or Frame Event   465   been  called  here  such  as:     and  the  sub- mit 0 method used within the function if the form is OK.   See the section "Form Valida- tion with Regular Expressions"  on page  765 in  Chapter  17.    7  A  deactivated  link is  assigned  an  onClick  event handler.  When  the user  clicks  the  link,  the JavaScript  code  is  executed.  The  pseudo JavaScript:  protocol  is  followed  by a  reference  to  the  form  and  a  reset    method,  which  clears  the  form  fields.  See  Figure  13.4.   Enter your name:   Enter your address:  [Address:   Click here to  submit your form   Click here to reset your form   Figure  13.4  The focus is in the first box and the field is selected  highlighted .   13.3  Handling  a Window or  Frame  Event   A window is the main Web page, unless it is divided up into frames.  There are a number  of events that will affect windows and frames; these are described in Table  13.3.  The fol- lowing  examples  illustrate  some  of the  events  that  affect windows  and  frames.   Table  13.3  Window and  Frame  Events   Event  Handler   When  It Is  Triggered   onBlur   onFocus   onLoad   onMove   When the mouse moves away from the window or frame and it loses focus.   When the mouse is clicked or moved in a window or frame and it gets focus.   When a document or image has finished loading.   When a window is moved.   onUnLoad   When a page is exited or reset.    466   Chapter  13      Handling Events   forms  are  available.  This  event  can  be  helpful  in  synchronizing  the  loading  of  a  set  of  frames, particularly when there might be large images  that need  to be loaded  or  all  of the  frame  data  hasn't  arrived  from  the  server.   The  onUnLoad  event  handler  is  invoked  when  the  page  is  exited  or  reset.   EXAMPLE   13.5       1  2  3   4  5   6  7  8    load and unload Events        var sec=0;  function now  {   var newdate= new Date  ;  var  hour=newdate.getHours  ;  var  minutes=newdate.getMinutes  ;  var  seconds=newdate.getSeconds  ;  var  timestr=hour+":"+minutes+":"+seconds;  window.setlnterval "trackTime  ",  1000 ;  alert "Your document has  finished loading\n"+   "The time:  "+timestr ;   }  function  trackTime  {  }  function howLong  {   sec++;   }       alert "You have been browsing here for  "+ sect"  seconds" ;      <body backgrounds11 blue hi 11 s. j pg" onLoad= " now    ; "   onUnLoad="howLong  ;">   9  10      When you leave or reload this page,   an alert dialog box  will appear.              EXPLANATION   The JavaScript  program  starts  here.   1  2  A  global  variable  called  sec  is  declared.  3   The  user-defined  function  now    contains  several  of  the  Date  object's  methods  to  calculate  the  time.  This  function is used  to  keep  track of how long the user brows- es  from  the  time  the  page  is  loaded  until  it  is  exited.    13.3  Handling a  Window or Frame Event   467   EXPLANATION    CONTINUED    5  6   7  8   The  alert  dialog box pops  up when  the  page  finishes  loading.  This  is  a  user-defined  function  that  keeps  track  of  the  number  of  seconds  that  have  elapsed  since  the  page was  loaded.  The  variable  called  sec  is  increased  by  one  each  time  trackTime    is  called.  This  function  is  called when  the  page  is  exited  or  reloaded.  It  is  the  event  that is  triggered  by  the  onUnLoad  handler  on  line  10.   9  When  the  document  has  finished  loading,  the  onLoad  event  handler  is  triggered.  The  onLoad  event  handler  is  an  attribute  of  the     tag.  The  event  handler  is  assigned  a  function  called  now    that sets up  a  timer  that will  go  off every second  while  the  page  is  opened.  After  a  second  passes  another  function  called  track- TimeQ  will  keep  updating  a  variable  that  stores  the  number  of seconds  that  have  elapsed.  The  background  attribute  of  the  HTML     tag  is  set  to  an  image  of  blue  hills.   10  The  onUnLoad  event  handler  is  triggered  when  the  user  either  leaves  or  reloads   the  page.  See  Figure  13.5.   o n L o ad   and  o n U n L o ad   Events  -  Microsoft  Internet  Explorer   n   Edit   View   Favorites   Tools   Help   Q  Back   -  ^   Search   ^  Favorites   ^   Address   C:\sambar50\docs\ch12\onload.html   When you leave  or reload this page,  an alert dialog box will appear.    468   Chapter  13      Handling Events   13.3.2   The onFocus and onBlur Event  Handlers   When  an  object  has  the  focus,  it  is  waiting  for  the  user  to  do  something,  such  as  click  a  button,  click a link,  or start or stop  an  animation.  If you  are  moving between  frames,  the  frame  where  the  mouse  is  pointing has  the  focus,  and when  the  cursor  moves  out  of the  frame,  it  loses  focus  or  is  "blurred."  The  onFocus  event  handler  is  triggered  by  the  user  clicking on  the  current window,  frame,  or form  element,  or by using the Tab key to  cycle  through  different  elements  on  the  screen.  The  onFocus  event  handler  allows  you  to  ini- tiate  a window or  frame  type  function when  the mouse  is moved  into  a window,  and  the  onBlur event handler  is  triggered when you  leave  a window  or  frame.  This  can  be  caused  by  the  user  clicking  outside  of the  current window,  frame,  or  form  element.  It's  exactly  the  opposite  of  onFocus.   When  a window has  focus,  it becomes  the  top window in  a stack  of windows.  Exam- ple  13.6  changes  the  background  color  of the  left  frame  to  pink when  it  goes  into  focus  and  to  yellow  when  it  goes  out  of  focus.  The  status  bar  at  the  bottom  of  the  window  reflects  what  frame  has  the  focus.   E X A M P LE    13.6        Frame Me!                1  2  3                4   Right  Frame   5        right frame                6  7  8  9    Left  Frame        function  focus_on_me  {   document.bgColor="pink";      Current doc is  the left frame  window.status="focus  leftframe";   }  function  defocus_me  {   parent.left.document.bgColor="yellow";      Another way to    13.3  Handling a  Window or  Frame Event   469   EXAMPLE    13.6    CONTINUED    11  12      <body onFocus="focus_on_me  "   onBlur="defocus_me  "  bgColor="lightgreen">              EXPLANATION       Event handlers   1   2  3  4  5  6   7   8   9   In  this  example,  there  are  three  files  involved  with  frames.  This  is  the  HTML  file  that  defines  the  frameset.  It  consists  of a main window  divided  into  two  frames,  a  left  frame  consisting  of 25  percent  of the window,  and right frame  consisting  of 75  percent  of  the  window.  The  left  frame's  source  code  is  in  a  file  called  leftfocus.html.  The  right  frame's  source  code  is  in  a  file  called  rightfocus.html.  This  HTML  document is  the  content  for  the  right  frame.  The  background  color  of  the  right  frame  is  lightblue.  This  is  the  start  of  the JavaScript  program  found  in  the  file  called  leftfocus.html.   is  called  when   parent.left.document.bgcolor.   function,  called  focus_on_me  ,   the  onFocus  This  user-defined  event handler is  triggered;  that is, when  the  user's cursor has  focus in that window.  It  assigns  a  pink background  color  to  the  left  frame  by  going  down  the JavaScript  hierarchy:  The  status  bar  in  the  window  is  assigned  the  string  "focus  leftframe".  Look  in  the  status  bar.  This  user-defined  function,  called  defocus_me,  is  called  when  the  onBlur  event  handler  is  triggered;  that  is,  when  the  user's  cursor  loses  focus  in  that window.  It  assigns  a yellow background  color  to  the  right frame  by going down  the JavaScript  hierarchy:   right.document.bgcolor.   parent,   10  The status bar in  the window is assigned  the string  "focus  rightframe".  Look in  the sta- tus bar.   If the  status bar  doesn't show anything,  it  could  be  that the  "Hide  the  status  bar"  feature  has  been  enabled  for  your  browser.  For  Firefox,  see  Tools—»Options—>  Enable JavaScript—»Advanced JavaScript  Settings .   11  An  onFocus  event  handler  is  assigned  to  the     tag  for  the  file  called  leftfo- cus.html.  As  soon  as  focus  goes  into  this  window   frame ,  the  handler's  function  called  focus_on_me     is  called.   12  An  onBlur  event  handler  is  assigned  to  the     tag  for  leftfocus.html.  When  fo- cus leaves this  frame   i.e.,  the user  clicks  the mouse in another window ,  the func-   470   Chapter  13      Handling Events   Address   C:\Documents  and  Settings\Ellie  Quigleir'\My  Documents\Courses\javacourse\final\finalfinal\frames\   i     ^   1   '   A A   Left  Frame  ^   right frame   t*   t^]  focus   rightframe  Figure  13.6  When focus is on the  left frame,  it turns pink.  When focus leaves the left  frame,  it turns yellow.  Notice  the  mouse  pointer is  in  the  right frame,  fhat's where  the  focus  is.  Check  the  status  bar.   The  fOCUS   and blurO Methods.  The  focus    and  blur    methods  behave  exactly  the  same  as  their  like-named  events.  These  methods  are  applied  to  an  object,  such  as  a  window  or  form  object,  and  are  called  from  the  JavaScript  program.  When  the focus     method  is  applied  to  an  object,  it will  cause  that object to  be in  focus  and when  the  blur    method  is  applied  to  an  object,  it will  lose  its  input  focus.   EXAMPLE  13.7        The  focus  and blur methods        function newWindow  {   winObj=window.open "summertime.jpg",  "summer","width=650,height=200,resizable=yes,  scrollbars=yes,location=yes" ;  winObj.moveTo 0,0 ;  winObj.focus  ;    windObj.blur   ;      Move  to left  corner of screen     New window gets  the  focus   }  function  closeWindow  {  }   winObj.close  ;                  Close  the new window    Summer Scene  from the Old Country       <input  type=button   value="Open Window"  onClick="JavaScript:newWindow  ;"   >   1  2   3  4   5  6   7    13.3  Handling a Window or Frame Event   471   EXAMPLE      C O N T I N U E D    13.7              EXPLANATION   L  A  user-defined  function,  called  newWindowQ,  will  create  a  new  window  object  with  the  window  object's  open    method,  specified  with  a  number  of  options  to  further  define  the  window.  The  new  window  object  contains  an  image  called  summertime.jpg.  The  new window is  moved  to  the  left  corner  of the  screen,  pixel  position   0,0 .  The new window gets  focus.  It will  be  on  top  of all  the  other windows.  This  user-defined  function is  responsible  for  closing  the  new window.  The  close    method  of the  window  object  causes  the  new window  to  be  closed.   2  3  4  5  6  7  When the user clicks this button, the onClick event handler is triggered, and a new   window will  be  opened.   8  When  the  user  clicks  this  button,  the  onClick  event handler  is  triggered,  and  the   new window will  be  closed.  The  output is  shown  in  Figures  13.7  and  13.8.   The  focus  and  blur  methods  -  Microsoft  Internet  Explorer   File   Edit   View   Favorites   Tools   Help     B a c k-    'Search  B       Favorites   HI    ' MP   Address  J f fi   C:\sambar50\docs\ch12\summerwindow.html   Summer  Scene from  the  Old  Country   O p en   W i n d ow    C l o se   W i n d ow   Figure  13.7  The parent window.   3  h t t p :     l o c a l h o s t   c h 1 2   s u m m e r t i m e . j pg   -  Microsoft   Internet  Explorer   - i n l xl   ^Address    472   Chapter  13      Handling Events   13.3.3  The onResize Event Handler  The  onResize  event  handler  fires  when  the  size  of  an  object  has  changed.2  In  Firefox,  Opera,  and  Safari,  the  onResize  event  handler  is  fired  only  when  the  size  of  the  browser  window  changes  and  can  be  an  attribute  or  property  of  the  body,  frameset,  document,  and  window  objects.  In  Internet  Explorer,  the  onResize  event  handler  is  fired  when  the  size  of the  browser  window  or  the  size  of a  body  element is  changed   although  Internet  Explorer  can  be  quirky  and  lock  up  at  times;  new  problems  with  this  handler  were  reported  with  Internet  Explorer  8 .       This  event  handler  can  be  used  as  an  attribute  of  the  window  object  but  is  not  a  valid  attribute  for  the  XHTML  body  tag.  When  the  size  of the  document  or  window  changes,  the  onResize  event  is  fired  on  the  body  element  in  Internet  Explorer.  In  Firefox,  Opera,  and  Safari,  an  onResize  event handler  is  fired  on  the body element when  the  browser win- dow  is  resized.   E X A M P LE    13.8        Test window. onresize        function shrinkScreen    {   var  newWidth=screen.availWidth 2;  var  newHeight=screen.availHeight 2;  window.resizeTo newWidth,newHeight ;  alert "The screen's width is:  " +   newWidth+ " and the height is:  "+ newHeight ;   }  function getDimensions    {   are: " +   if   window.outerWidth {      Firefox   alert "OnResize event:  the original screen dimensions   screen.availWidth+"  x  "+ screen.availHeight+  "new dimensions are: \n" + window.outerWidth + "  " +  window.outerHeight ;  }  else{      Internet Explorer   alert "OnResize event:  the original screen dimensions   are: "+   screen.availWidth+"  x  "+ screen.availHeight+  "\nnew dimensions are:  " + document.body.clientWidth +   "+ document.body.clientHeight ;   1  2  3  4   5  6   1    13.3  Handling a  Window or  Frame Event   473   EXAMPLE    13.8    CONTINUED                   <input tYpe="button"  value="Click to change window size"   onClick="JavaScript:shrinkScreen  "   >               EXPLANATION   The  function  shrinkscreen    will  cause  the  screen  to  be  made  half  its  size,  if  it  is  within  the  lower  limit  of  100  pixels.  The  available  screen  width,  screen.availWidth,  and  the  available  screen  height,  screen. availHeight,  specify  the  current width  or  height  of the  screen,  in  pixels,  minus  features  such  as  the  taskbar  in  Windows.  The  variables  newWidth  and  newHeight  will  get  the  available  screen width  and  height  divided  by  two.  The  window  will  be  resized  to  the  new  dimensions  created  on  the  previous  two  lines.  The  alert  box  displays  the  dimensions  of the  screen  in  pixels  after  it  has  been  re- sized.  The  function,  getDimensions  ,  is  called  whenever  the  window  is  resized.  If  the  outerWidth  property  exists,  the  browser  is  not  Internet  Explorer.  The  origi- nal  screen  dimensions  and  the  new  window  dimensions  will  be  displayed  in  the  alert  box.  The  outerWidth  property  determines  the  width  of  the  window   includ- ing  taskbars,  etc. ;  using  the  innerWidth  property  determines  the  width  excluding  the  text  decoration.  Internet  Explorer  uses  the  clientWidth  property  of  the  document  object  to  get  the  width  of  the  window.  The  onResize  handler  is  associated  with  the  body  of the  document.  When  the  win- dow  changes  in  size,  this  handler  is  triggered.   9  When  the  onClick  event  handler  is  triggered,  the  shrinkScreenQ  function  will  be  called  and  the  screen  will  be  resized  to  half its  size.  The  output  is  shown  in  Figure  13.9.   8   9   1   2   3   4   5  6   7   8    474   Chapter  13      Handling Events   File   Edit   View   History   Bookmarks   Tools   Help   C   la.]   Ü   file :   C: Documents and Settings Owner My   T   Google   [  Click to change window size  ]   ! .  OnResize event:  the original screen dimensions are:  12CM  :c S34   new dimensions are:  624 >l:4zZ  :   "   Figure  13.9  Window was resized  manually by the user. The onResize event handler  was  triggered.   13.4  Handling  Mouse  Events   In  many  previous  examples,  we've  seen  uses  of the  onCVick  event  handler  to  initiate  an  action when a user clicks  the mouse in a button  or  on a link.  There are  a number  of other  events  that  can  be  fired  due  some  action  of the  mouse.  When  the  user  moves  the  mouse  pointer over a link, image, or other object, the onMouseOver event handler is triggered, and  when he or she moves the mouse pointer away from an object, the onMouseOut event is trig- gered.  Table  13.4 lists events that are triggered when mouse movement is detected.   Table  13.4  Mouse  Events   Event Handler   When It Is Triggered   onClick   onDblClick   When the mouse is clicked on a link and on form objects like button,  submit.   When the mouse is double-clicked on a link, document, form object,  image.   onMouseDown   When the mouse is pressed on a link, document.   onMouseMove   When the mouse is moved when it is over a link, form object, or most  elements.   onMouseOut   When a mouse is moved out of a link, imagemap.    13.4  Handling  Mouse Events   475   13.4.1  How to Use Mouse Events  The  onMouseOver  and  onMouseOut  event  handlers  occur  when  the  user's  mouse  pointer  is  moved  over  or  out  of  an  object.  The  onMouseMove  event  occurs  when  the  mouse  just  touches  the  object.  In  Example  13.9,  every  time  the  user  touches  the  button  labeled  onMouseMove  with  his  or  her  mouse,  a  function  called  counter    is  invoked  to  keep  track  of the number of mouse moves that have taken place.  That number is displayed in an alert  dialog  box,  as  shown  in  Figure  13.10.  If  the  user  double-clicks  the  mouse  anywhere  on  the  page,  the  a  message  will  appear,  and  if OK is  clicked,  the  window will  be  closed.   EXAMPLE   13.9        Mouse  Events       var counter=0;  function alertme  {   alert "I'm outta hea! "   ;  window.close  ;   }  function track_Moves  {   counter++;  if  counter==l {   alert counter + " mouse moves so far!" ;   alert counter + " mouse moves so far!" ;   }  else{   }   }                Double click anywhere on this page to get out!     When the mouse moves over the link,  an event is triggered.        When the mouse moves away from a link,  an event is triggered.        When the mouse moves in or out of the button,  a function   is called that keeps track of how many times the mouse touched   onMouseOver   onMouseOut   1  2  3  4  5  6   7   8   9    476   Chapter  13      Handling Events   EXAMPLE     CONTINUED    13.9      10   11   <input  type="button"   value="onMouseMove"  onMouseMove="track_Moves  ;"  >                 EXPLANATION   1  A JavaScript  program  starts  here.  2  A  global  variable  called  counter  is  initialized.  3   4  5   6  7   8   9   If the user  double-clicks  the  mouse  anywhere  on  the page,  an  alert  dialog box will  appear;  if the  user  clicks  OK  in  the  alert  dialog  box,  the  window will  be  closed.  The  window's  close  method  causes  the  current  window  to  be  closed.  This  function  is  called  when  the  onMouseOver  event  handler  is  triggered.  This  event  happens when  the  user  touches  the  mouse  on  an  object,  in  this  case,  a  but- ton  object.  The  counter  is  incremented  by  one  every  time  the  user  touches  the  button.  The  onDblClick  event  handler  is  an  attribute  of  the  HTML     tag.  When  the  user  double-clicks  the  mouse,  the  alertme    function  will  be  called,  and  the  win- dow  closed.  The  onMouseOver  event  handler  is  an  attribute  of  the     link  tag.  It  is  trig- gered  anytime  the  user  moves  the  mouse  over  the  link.   The  link  has  been  deac- tivated  by  using  the    sign.   When  this  event  occurs,  the  alert  method  is  called.  The  onMouseOut  event  handler  is  an  attribute  of  the     link  tag.  Any  time  the  user moves  the  mouse  away from  this  link,  the  event is  triggered,  and  the  alert  method  is  called.   10  The  form  starts  here.  The  input  type  is  a  button.  11  When  the  user's  mouse  touches  the  button,  the  onMouseMove  event  handler  is  triggered,  and  the  track_Moves    function  is  called.  This  function  will  simply  in- crement  a  counter  by  one  each  time  it  is  called,  and  then  alert  the  user.    13.4  Handling  Mouse Events   477   Q  Back   -  ^   Search   -Favorites   ^  Media   ^   01  *   y   Mokse   Events  -  Microsoft  Internet  Explc   File   Edit   View   Favorites   Tools   Help   Address   C:\sambar50\docs\ch12\mouseevent.html   Double  click anywhere  on this  page to  get out!   When the  mouse  moves  over the  link,  an  event Is triggered.  onMouseOver   When the  moves  away from  a  link,  an  event Is triggered.  onMouseOut   When the  mouse  moves  In  or out of the  button,  a function  Is  called that keeps track of how many times the  mouse touched the  button.   o n M o u s e M o ve   Microsoft  Internet  Explo   Figure  13.10   Links a nd   mouse  events.   13.4.2  Mouse Events and Images—Rollovers  The  onMouseOver  and  onMouseOut  event  handlers  are  commonly  used  to  create  a  roll- over,  an  image  that  is  replaced  with  a  different image  every  time  the  mouse  moves  over  a  link  or  image.   See  section  "A  Simple  Rollover  with  a  Mouse  Event"  on  page  432  in  Chapter  12.   In  the  following  example,  if  the  user  touches  the  first  link,  the  picture  of  the  first  mouse  will  be  replaced  with  a  new  picture,  giving  the  illusion  that  the  mouse's  eyes  are  moving.     Mouse  Events      onMouseOver                onMouseOut    i  2   3   EXAMPLE   13.10               EXPLANATION    478   Chapter 13      Handling Events   EXPLANATION    CONTINUED    2   3   The  onMouseOut  event  handler  is  assigned  to  another  deactivated  link,  this  time  with  another  image  of the  mouse.  When  the  mouse  rolls  away  from  the  link,  the  event  is  triggered,  and  a  new  image  called  mouse2.gif will  replace  the  last  image,  mouse.gif.  By  rolling  the  mouse  back  and  forth,  the  mouse's  eyes  seem  to  move.  The words  "hi"  and  "bye"  also keep  changing.  This is the original image that is displayed before the links are touched. See Figure 13.11.   Figure  13.11  Original display  left , as the mouse moves over the link  middle , and  as the  mouse  moves away from  the  link  right .   13.4.3  Creating a Slideshow with Mouse Events  By using a  timer with  an  event, you  can  do  all  sorts  of fun  things with images.  You  can  create scrolling banners, rotating billboards, button rollovers, and more.  Example  13.11  is a simple slideshow.  Four images are preloaded  and each image is assigned to  an array  element.  When  the  user  moves  the  mouse  onto  one  of the  pictures,  a  new picture will  replace  the  previous  one  every  2  seconds,  and  when  he  or  she  moves  the  mouse  away  from  the  image,  the  show  stops.  Any  time  the  mouse  moves  over  the  image,  the  show  starts  again.   EXAMPLE   13.11        The Four Seasons        var season = new Array  ;   1    13.4  Handling  Mouse Events   479   EXAMPLE  13.11   CONTINUED    4  5   6  7   8  9  10  11   12   season[0]=new  Image  ;  season[0].src="winter.jpg";  season[1]=new Image    ;  season[1].src="summer.jpg";  season[2]=new  Image  ;  season[2].src="fall.jpg";  season[3]=new  Image  ;  season[3].src="spring.jpg";  function changeSeason  {   var size= season.length - 1;  if  indx < size    {   indx++;   }  else {   indx = 0 ;   }  document.times.src=  season[indx].src;  timeout=setTimeout 'changeSeason  1,  timeDelay ;   }  function  stopShow  {  }   clearTimeout timeout ;                  The 4  Seasons   To see slide show,  put your mouse on the image.   Move your mouse away from the image,  to stop it.  <a  href="JavaScript:void null ;"   onHouseOver="return  changeSeason  ;"  onMouseOut="return  stopShow  ">  border=8  hspace="10" width="700" height="2 00">   <img name="times"  src="winter.jpg"  align="left"                     EXPLANATION   1   A  new  Array  object  called  season  is  declared.  It  will  be  used  to  store  an  array  of  images.    480   EXPLANATION   Chapter  13      Handling Events   5   The  first  element  of the  season  array gets  a  new  Image  object.  The  src  property   the  location  and  name  of  the  image   is  winter.jpg,  located  in  the  present working  di- rectory.   7   6  A  user-defined  function  called  changeSeasonQ  is  defined.  It is  called  when  the  on- MouseOver  event  handler  is  triggered  by  the  user  moving  the  mouse  onto  the  im- age.  Its  purpose  is  to  replace  one  image  with  another  image  in  the  season  array,  every  2  seconds,  for  as long as  the  user's mouse is  on  the image.   It might be nice  to  add  a little  Vivaldi  audio  clip  here  to  enhance  the  show!   The  size  of the  array  is  its  length  -  1  because  array  indexes  start  at  0.  As  long  as  the  array size  isn't surpassed,  the  index  value will  keep  being incremented  by  1.  This is where  image replacement happens.  The name  of the  original image is  times   line  14   and  it  is  referenced  by  JavaScript  using  the  DOM  hierarchy:  doc- ment.times.src  is  assigned  a  new  image  from  the  season  array,  season[indx].src.  The  new image will  be  displayed.  The  window  object's  setTimeout    method  will  be  set  to  call  the  changeSeasonQ  function  every  2,000  milliseconds   2  seconds .  Every  2  seconds  a  new  image  is  displayed  as  long  as  the  user  keeps  the  mouse  on  an  image.   8   9   10  The  user-defined  function  called  stopShow    is  defined.  It  is  called  when  the  on- MouseOut  event  is  triggered  by  the  mouse  moving  away  from  the  image.  It  turns  off the  timer,  stopping  the  slideshow.   11  The  setTimeoutO  method  is  cleared.  12  The  link has  two  mouse  event handlers,  onMouseOver  and  onMouseOut.  The  pseu- do  URL, JavaScript:void null ,  deactivates  the  link  and  ensures  that  if there  is  a  re- turn value from the event, it will be nullified. Because neither of the events returns  anything,  it  would  be  enough  to  just  use  the  protocol  as JavaScript:.  The  display  is  shown  in  Figures  13.12  and  13.13.   The 4  Seasons   To  see  slide  show,  put your mouse  on the  image.  Move your mouse  away From  the  image, to  stop  it.    13.4  Handling Mouse Events   481   Figure  13.13  Spring image  top , summer image  middle , and fall image  bottom   are all  part of the slideshow created  in  Example  13.11.   13.5  Handling  Link Events   In many of the previous examples, links have been used to trigger events. When the user  clicked  or  moved  the  mouse  over  a  link,  a  link  event  was  triggered.  One  link  event,  onClick,  gets  sent  whenever  someone  clicks  on  a  link.  As  we  saw  with  mouse  events,  onMouseOver and  onMouseOut  also  cause  a link event to  occur.  The  link events  are  listed  in  Table  13.5.   Table  13.5  Link  Events   Event  Handler  onClick  onMouseOut  onMouseOver   When It Is  Triggered  When the mouse is clicked on a link  When a mouse is moved out of a link  When a mouse is moved over a link   13.5.1  JavaScript URLs    482   Chapter  13      Handling Events   <a href=""  onClick=1 alert "This hotlink is out of service!" ;   return  false;'>Click here    or  by  using  the JavaScript:  protocol  followed  by  the  void  operator  to  guarantee  that  any  return  value  from  the  function  will  be  discarded:   <a href="JavaScript:void 0 ;"  onMouseOver="return changeSeason  ;"   In  either  case,  the link was not supposed  to  take  the user  to  another location, but instead  to  handle  an  event  or  call  a  function.   Make sure  that any function  calls in  the  URL have  been  defined.   Another note:  If the  ""  causes  the browser  to jump  to  the  top  of the page  when  the  link  is  clicked,  you  can  add  a  return false  statement  inside  the  onClick  handler  to  keep  the  browser  from  checking  the  content  of  the  href   The  following  simple  example  uses  the  onClich  event  handler  with  a  deactivated  link   and  the  return  statement;  the  display  is  shown  in  Figure  13.14.   EXAMPLE   13.12    Deactivate  the  hotlink         <a href="" onClick=1 alert "This hotlink is out of service!" ;            return false;1>Click here    Click here   [JavaScript  Application]   A  This hotlink is out of service!   Figure  13.14  The  user clicked  a  deactivated  link.   13.6  Handling a  Form  Event   As  discussed  in  Chapter  11,  the  document  object has  a form  property.  It  contains  an  array    13.6  Handling a  Form  Event   483   the  form,  such  as  a  checkbox,  radio  button,  or  text  field.  By  naming  each  of  the  forms  and its respective  elements, it is much easier to work with them in JavaScript.   See  Chap- ter  11  for  a  complete  discussion  of the forms []  array.   There  are  a number  of events  asso- ciated  with  the  form's  elements.  Many  of  them  were  also  covered  in  Chapter  11.  They  are  listed  in  Table  13.6.   Table  13.6  Event  Handlers for the  Form's  Elements   Event  Handler   onClick,  onBlur,  onFocus   onClick,  onBlur,  onFocus   onClick,  onBlur,  onFocus   none   onBlur,  onFocus,  onSelect   onClick,  onBlur,  onFocus   onReset   onSubmit   onFocus,  onBlur,  onChange   onClick,  onBlur,  onFocus,  onChange   onClick,  onBlur,  onFocus,  onChange   Object   button   checkbox   FileUpLoad   hidden   password   radio   reset   select   submit   text   textarea             submit  reset  button   13.6.1  Buttons  One  of  the  most  common  GUI  form  elements  is  the  button.  The  button  object  has  no  default  action  and  is  normally  used  to  trigger  an  event  such  as  the  onClick  event.  HTML  4  allows  you  to  create  a     tag without  the     tag.3  There  are  several  buttons  associated  with  a  form;  the  buttons  are  called:   If  an  event  handler,  such  as  onSubmit  or  onChange  is  an  attribute  of  a  form  tag,  then  the  event occurs when  the user  clicks  one  of the buttons  associated with the  form  object.  Form  event  handlers  are  listed  in  Table  13.7.    484   Chapter  13      Handling Events   Table 13.7  Form  Event Handlers   Event  Handler  When It Is Triggered   onBlur   onChange   onClick   onFocus   onReset   onSelect   onSuhmit   When a  form's select, text, or textarea  field loses focus.   When a select, text, or textarea field loses focus and its value has been  changed.   When an object on a form is clicked.   When a field receives input focus by tabbing with the keyboard or clicking  with the mouse in the field.   When the user resets the form.   When a user submits a  form.   When a  user selects some of the  text within a  text or textarea  field.   13.6.2  this for  Forms and this for  Buttons   The  this  keyword  refers  to  the  current  object  and  is  especially helpful  when  dealing with  forms.  In  forms  that  contain  multiple  items,  such  as  checkboxes,  radio  buttons,  and  textboxes,  it  is  easier  to  refer  to  the  item  with  the  this  keyword  than  by  using  its  full  name  when  calling  a  function  or  an  event  handler.   Examples  of  the  this  keyword  are  shown  in  Chapter  11.    In  a form,  this  could  be  the  form  itself or  one  of the  input devices.  With  an  event han- dler,  the  this  keyword  by  itself  references  the  current  object,  such  as  an  input  device,  whereas  this.form  references  the  form  object where  the  input  device  was  created.   E X A M P LE    13.13        The  this  keyword   function  display_formval myform {       alert "text box value is:  " + myform.namestring.value  ;   }  function  display_buttonval mybutton {   alert "button value is:  " + mybutton.value ;   1   2   }               13.6  Handling a  Form  Event   485   EXAMPLE  13.13   CONTINUED       <input  type="button"   <input  type="button"   value="Print  Form Stuff"  onClick="display_formval this.form ;"   >  value="Print  Button Stuff"  onClick="display_buttonval this ;"  >                   EXPLANATION   The  function  called  display_formval    is  defined.  Its  only  parameter  is  a  reference  to  a  form;  in  this  example  the  form  started  on  line  3.  The  purpose  of this  function  is  to  display  the  text  that  the  user  typed  in  a  text  box,  called  "namestring".  The  function  is  called  when  the  onClick  event  handler  is  triggered  on  line  5.  The  function  called  display_buttonval    is  defined.  Its  only  parameter  is  a  button  input  type,  defined  on  line  4.  It  displays  the  value  in  the  button.  This  is  the  start  of  a  form  named  simple.  The  input  type  is  a  button  in  the  form  named  simple.  The  onClick  event handler  is  triggered  when  the  user  clicks  this  button.  The  argu- ment  sent  to  the  display_formval    function,  this.form,  is  a  reference  to  the  form  object.  Without  the form  property,  the  this  keyword would  refer  to  the  current  ob- ject,  the  button.  See  line  6.  Rather  than  using  the  full JavaScript  hierarchy  to  ref- erence  a  form,  the  this  keyword  simplifies  the  process.  The  onClick  event is  triggered when  the  user  presses  this  button.  Because  the  han- dler  is  assigned  to  the  button,  the  this  keyword  is  a reference  to  the  button  object.  The  display is  shown  in  Figure  13.15.   4  5   6   1   2   3  4  5   6   Type your name here:  [i Daniel  Leo   I  -                I   Print Button  Stuff   Clear   [JavaScript  Application]   text box value is:  Daniel Leo   X]    486   Chapter  13      Handling Events   13.6.3  Forms and the onClick Event Handler  The  onClick  event  handler  is  used  most  often  in  forms.  The  click  event  occurs  when  a  button in a form,  such  as  a radio  or  checkbox, is pressed.  It also happens when an option  is  selected  in  a  Select menu.  In  Chapter  11,  we  used  many  examples  of the  onClick  event  handler.  Here  are  a  few more.   E X A M P LE    13.14           Event  Handling and Forms       function greetme message {   alert message ;   }                 Greetings Message             <input  type="button"  value="Morning"  call!1 "  >   <input  type="button"  value="Noon"   onClick="greetme 'Good morning.  This is your wakeup   <input  type="button"  value="Night"   onClick="greetme 1Let\1s do lunch.1 "   >  onClick="greetme 'Have a pleasant evening.\nSweet   dreams...  "  >               E X P L A N A T I ON   1  A  simple  function  called  greetme    is  defined.  It  will  be  called  each  time  the  user   2  3   clicks  one  of three  buttons  and  will  send  an  alert  message  to  the  screen.  The  HTML  form  starts  here.  The  input  type  for  this  form  is  three  buttons,  respectively  labeled  "Morning",  "Noon",  and  "Night".  See  Figure  13.16.   4  When  the  user  clicks  a  button,  the  onClick  event  is  fired  up,  and  the  greetme      13.6  Handling a  Form  Event   487   Greetings  Message   M o r n i ng      N o on     N i g ht      Figure  13.16  Three  buttons  waiting  for a  user  to  click  one  of them.   Greetings  Message   M c m i r ï tj   1  Moon    Night     n s a m!     xi   j\  *  N   Have  a  pfeasant  evering.  Sweet dreams...   OK   Figure  13.17  The  user clicked  the  Night button.   13.6.4   Forms  and  the onFocus and onBlur Event  Handlers   The  onFocus  event handler  is  triggered when  a  form  element has  focus:  The  cursor  is  sit- ting  in  the  box,  waiting  for  key  input  or  in  the  case  of  a  button,  for  the  Enter  key  to  be  pressed.  The  onBlur event  is  triggered when  the  form  element loses  focus, when  the  cur- sor  is  moved  away  from  the  input  device.   E X A M P LE    13.15        Using the onFocus  Event Handler    1  2       function handler message {  window.status = message;  }       Watch  the status bar           The onFocus  Event Handler    When you click in one of the boxes,  focus goes    488   Chapter  13      Handling Events   name="namestring"  size="50"  onFocus="handler "Don\1t forget to enter your name1 "*    Talk about yourself here:   textarea name="comments"   align="left"  onFocus="handler "Did you add comments?1 "  rows="5"  cols="50">I was born...   EXAMPLE  13.15   CONTINUED         Type your name:  <input  type="text"   3   4   5   6  7      <input  type="button"   value="submit">   <input  type="reset"   value="clear">               EXPLANATION   l  A  user-defined  function  called  handlerQ  is  defined.  It  takes  a  string  as  its  only   2   3  4  5   parameter.  The  string  message,  "Don't forget  to  enter your  name"   or  "Didyou  add  comments?"   is passed  to  the  function  and  assigned  to  the window's  status bar.   If you  don't see  anything  in  the  status  bar,  the  feature  has  been  disabled  for  your  browser.  For  Firefox go  to  the View option and click Status bar.  For  Safari, View,  and  click Hide  Status  Bar.   The  HTML  form  starts  here.  The  first  input  type  is  a  textbox.  The  textbox  contains  the  attribute  for  the  onFocus  event  handler.  When  this  box  has  focus,  the  event  will  be  fired  up  and  call  the  handlerQ  function.   6  A  text  area  is  defined  to  hold  user  comments.  7   The  text  area  contains  the  attribute  for  the  onFocus  event  handler.  When  this  box  has  focus,  the  event  will  be  fired  up  and  call  the  handlerQ  function.  See  Figure  13.18.    13.6  Handling a  Form  Event   489   The  OILFOCUS  Event  Handler   When  you  click  in  one  of the  boxes, focus  goes  to  the  status  bar    Type  your name:  Danny Stachelin   J   Talk  about yourself here:  I  w as   k i o r n.   .  .   s u b m it    c l e ar   Figure  13.18  feature  for  your  browser.   Look  at the  status  bar.  You  might have  to  enable  the View Status  Bar   13.6.5  Forms and the onChange Event Handler  The  onChange  event  handler  is  triggered  after  the  user  modifies  the  value  or  contents  of  an HTML input,  select,  or  text area element in  a form,  and  then releases  the mouse.  This  is  another  event  handler  that  can  be  useful  in  checking  or  validating  user  input.    onChange  Event  Handler           Please enter your grade:  <input type="text"  onChange="   grade=parselnt this.value ;  IIConvert  to integer   if grade   100 {   alert 1 Please enter a grade between 0 and 100' ;   confirm 'Is  '+ grade +  1  correct?1 ;   E X A M P LE    13.16       1  2  3   4   5  6   }  else{   }   "  >               490   EXPLANATION   Chapter 13      Handling Events   1  2   3   4   5   6   The  HTML  form  starts  here.  The  input  type  is  a  text  field.  The  onChange  event  is  triggered  when  something  changes in the  text field box, such as  a user  entering input.  Instead  of assigning a  function to  the handle  the  event,  the JavaScript statements are  enclosed in  double  quotes  and  will  be  parsed  and  executed when  the  event is  triggered.  It might be  less  error prone  to write  a function than  to  try to  keep  this whole section of code  enclosed  in  quotes.  If the input assigned to grade is less than 0 or greater than  100, it is out of the legal  range,  causing an  alert box to  appear.  If the  input was within  the  limits,  then  the  else  block is  executed.  A  confirm  box  will  appear  to  verify that this is what the  user meant to  type.  This  quote  marks  the  end  of the JavaScript  statements,  and  the  >  marks  the  end  of the  input  type  tag.  The HTML form  ends here.  The  actions of the handler are shown in Figures  13.19  through  13.21.   Figure  13.19  The user enters no value at all: There is no change.   Please  enter your grade:   Please  enter your grade:   i M i m a i  i m - f f l f f i J f f l M i mi    x   C ^ ?^    Is  87  correct?   ;   OK   ;   Cancel   Figure  13.20  The user enters a value.  A change  has taken  place within the  textbox.  The onChange  handler  is  invoked.   Please  enter your grade:  12  4   localhost  -  [ J a v a S c r i pt   Application]   »\  Please enter a grade between 0 and  100    13.6  Handling a  Form  Event   491   13.6.6  Forms and the onSubmit Event Handler  When  you  submit  an  online  order  for  a  purchase  you  made  at  a Web  site  like  Amazon  or iTunes,  once you have submitted  the order, you can't back out.  It's too late. You have  your  e-mail  confirmation  before  you  can  blink  an  eye,  your  new  tune  or  movie  ready  to  play,  and  your  payment  has  already been  processed.  You  pressed  the  submit  button,  maybe  with  a  different  label,  like  "Order  now,"  but  pressing  that  button  triggered  an  event  that  caused  your  order  to  be  processed.   The  onSubmit  event  handler  was  discussed  in  detail  in  Chapter  11,  but  it  is  included  again  in  this  chapter  because  it  is  such  an  important  form  event.  You  will  see  this  event  again  in  Chapter  17.  If you  recall,  the  onSubmit  event  is  an  attribute  of  the  HTML     tag  and  is  triggered  when  the  user  presses  the  submit button  after  filling  out  a  form.  This  event allows  the programmer  to validate  the  form  before  sending it off to  the  server.  If the  return value  from  the  event handler  is  true,  the  form  will  be  submitted;  if false  it won't be  submitted.  The  following  examples  demonstrate  two  different programs  using  an  onSubmit  event handler.  Example  13.17  creates  two  text fields  for  the user's  name  and  address.  The  onSubmit  event  handler  is  triggered  when  the  user  clicks  the  submit  button,  causing  a  function to be  called that will produce  a little popup window with the user's input data.  By  allowing  the user  to  view  the  data  entered,  the  submission  can  be  delayed  for  further  vali- dation,  and  so  on.  Example  13.18  is  a snippet  of code  that  could  be  used  after  a shopping  cart has  been  filled  and  the  user is  ready  to  go  to  the  checkout page.  When  the  user  clicks  the  submit button labeled  "Go  to  Checkout"  a function will be  called.  It returns  true if the  user has checked  a checkbox and false if he  or she hasn't.  By checking the small checkbox,  the  user  is  confirming  that  he  or  she  is  ready  to  submit  the  form  data.  Then  a  server  side  program  will  perform  further  validations  and  calculations,  send  e-mail,  open  a  database,  and  so  on.  Both  of  the  examples  show  the  value  of having  an  onSubmit  handler  to  catch  the form before it is submitted to allow the user to change a field, go back to  another page,  confirm  that he  or she has  finished  and  is ready to  order,  and  so  on.   E X A M P LE       13.17   1  2  3    The  onSubmit  Event  Handler        function popUp  {   newWin=window.open 11,'NewWin','toolbar=no,  status=no,width=500,height=2001 ;  newWin.document.write "   newWin.document.write " Your name is:   "  +  document["forml"].namestring.value ;  newWin.document.write "  Your address  is:    Form  data " ;    492   Chapter  13      Handling Events   EXAMPLE   13.17   CONTINUED           4        Type your name:    <input  type="text"  name="namestring"  size="50">                                             5   6    Type  in your address:    <input  type="text"   name="address"  size="80">                                   EXPLANATION   2   L  A  function  called popUpO  is  defined.  It will  cause  a popup window  to  appear with  data that was  entered into  a form.   Your browser might not allow popup windows  unless  you  change  a  setting.   This  is  where  the  new  window  object  is  created  and  assigned  properties.   In  this  example,  the  line is broken  to make  it fit on  the  page,  but if you  do  this  in  a script,  make  sure  there  are  no  spaces  between  any  of the  window  options.   The  writeQ  method  will  send  its  output  to  the  new  window.   3    13.6  Handling a Form Event   493   EXPLANATION    CONTINUED    4   5   6   The  HTML  form  starts  here.  When  the  submit  button  is  clicked,  the  onSubmit  event handler will be  triggered  and  call  the popUpO  function,  causing a new pop- up  window  to  appear  containing  the  information  that  the  user  typed  into  the  form. At this point the program could ask the user if the data is valid and continue  to  process  the  information  by  sending  it  to  a  server.  Because  the  action  attribute  for  the  HTML  form  hasn't been  defined,  nothing will  happen.  The input types  for  the  form  are  defined here  as  two  textboxes,  one  for the user's  name  and  one  for  the  address.  The  submit button  is  created here.  When  the user submits  the  form,  the  onSubmit  handler on line 4 will be triggered.  The action is shown in Figures  13.22 and  13.23.   T he   o n S u b m it   Event   H a n d l er   -  M o z i l la   F i r e f ox   File   Edit   View   History   Bookmarks   Tools   Help   ^ ^^    *   t ii        file:   C: wamp www examplel3.17.html?nam   story...      The History  ...   javascript e...   ¿K  bubbles Eve...   J5  Tryit Editor...   latest news  ...   latest news  ...   St«   T yp  e  y o ur   n a m e:    ¡ D e b b i e J e a nS  a v ag  e   T y pe   i ll   y o ur   a d d r e s s:   11    N o b el   Prize  W i n n er   D r i ve     S u b m it  f o rm        C l e ar       Figure  13.22  The fillout form.   >  >   p y j o z i l la   F i r e f ox    — J U M*   File:   <I: wamp www examplel3.]  i.himlVnamestririq-Debblef      F o rm   <lntn   y o ur   n a me   is   Y um   a d d r e ss   in    ;  '   J e an   S a v a ge   :  4 24   N o b el   P r i ze   W i n n er   D r i ve   Figure  13.23  Popup window with form  data  after submit.    494   Chapter  13      Handling Events   EXAMPLE   13.18        Check it  Out!           Script modified from original  found at  II http:  JavaScript.internet.com  function okForm form {   if   form.accept.checked == true {  else{   return true;}  alert "Please check the box!" ;  form.accept.focus  ;  return  false;}   }                 <form  action="http:  localhost phpexamples processform.php"   method="post"  onSubmit="return  okForm this ">   Your name:           What will you purchase today?       <input  type="radio"  name="choice"     <input  type="radio"  name="choice"   value="burger">Burger,  fries and coke   value="veggie">Veggies  and Vitamin water   Check the box and then  "Go to Checkout" .        Thank you for your order.  <input  type="checkbox"   name="accept"  value="0"   >  <input  type="submit"  value="Go to checkout"   >      <input  type="button"   value="Go back to Home Page"  onClick="window.location.replace 1http:  localhost1; ">           13.6  Handling a  Form Event   EXPLANATION   495   2   1  A  function  called  ohFormQ  is  defined.  The  function  is  called  by  the  onSubmit event  handler.  Its purpose is  to  ensure  that a checkbox has been checked before  allowing  the  user  to  submit the  form.  If it has,  the  return value is  true,  and  the  form will be  submitted.  If not,  the user will be reminded  to  check the box, false will  be returned,  and  the  form will not be submitted.  See Figure  13.24.  Once  the  checkbox has been  checked,  and the submit button labeled  "Go  to  Checkout"  clicked,  the  form will be  submitted  to  the URL  address  assigned  to  the form's  action  attribute;  in this  case  a  PHP  script called  "processform.php"   see Figure  13.25 .  The  action  attribute  is  the  URL  of the  server where  the  form  data will  be  sent  for  processing,  once  it  has  been  submitted.  The  onSubmit  event  handler  is  triggered  when  the  user  clicks  the  submit  button  for  this  form.  This is  the part of the  form where  the user  enters data to be sent to  the server-side  program  for  processing.  This  is  the  checkbox  that  must  be  clicked  before  the  user  can  submit  the  form.  The  ohFormQ  checks  to  see  if  this  box  was  checked  before  allowing  the  form  to  be  submitted.   5   4   3   6  When  this submit button, labeled  "Go  to  Checkout"  is pressed,  the  onSubmit han-  dler  on  line  3  is  triggered.   7  When  the  user  presses  this  button,  the  onClick  handler will  be  fired  up,  and  cause   the  page  to be redirected  to  the  shopping cart page  for  the site.   i O j f e h e ck   it  Out!  -  Mozilla  Firefox  File  Edit  View  History  Bookmarks   Tools  Help    *   @   t i ii    0   file:   C: wamp www example 13.18.html  <£t  "   [3  http:  loc...sform.php  Q  Check it Out!   Q  Check it Out!   Q  Chi   Your  n a m e:   Ellie      W l u it   w i ll   y ou   purchase   t o d a y?  L3 Burger,  fries  and  coke  O V e g g i es   and  Vitamin  water   T h a nk   y ou   f or   y o ur   order.  Check   t he   b ox   a nd   t h en   "Go  to   C h e c k o u t ".  0     Go  to  checkout   ]   [  Go  b a ck  to  H o me   P a ge    ]    496   Chapter  13      Handling Events   Ö  Mozilla  Firefox  File   View   Edit   History   Bookmarks   Tools   Help   ^ ^^    ^^      Q   http:  localhost phpexamples processforrr  ^   *     '   _2]  http:  loc...storm.php   J  CheckltOutl   J  Check it Out!'   [J  h f c t p :   — rm   Your  order was  successfully processed,  Ellie!  Coiifiiination will be  sent to your email address  shortly.  Today Is  Tue  Mar 2,  2010.   Figure  13.25  After the  user checks out,  the  PHP  script processes the  input d a ta  from  the  form.   13.6.7  HTML Event Handlers and JavaScript Event Methods  You'll  find  that many JavaScript programs  use  a  combination  of event handlers  and  event  methods,  especially  when  working  with  forms.  Example  13.19  uses  event  handlers  and  event methods.  It creates  a random  number between  1  and  10,  and  asks  the user  to  guess  what  the  number  is.  As  soon  as  the  document is  loaded,  the  onLoad  event handler  is  trig- gered,  and  when  the  user  clicks  the  button,  the  onClick  handler  is  fired  up.  The focus     method  is  used  to  put  focus  in  the  textbox where  the  user will  enter  his  or  her  guess.   EXAMPLE  13.19       1   2   3     Event Handling        var tries=0;  function  randomize  {      Random number is set when  the document has loaded  var now=new Date  ;  num= now.getSeconds   %10;    modulus-remainder  after  division  num++;       Function is called each  time  the user clicks  the button  if   form.tfield.value == num {   }  function  guessit form {   alert "Correct!!" ;  form.tfield.focus  ;  n=0 ;  randomize   ;   }    13.6  Handling a  Form  Event   497   EXAMPLE   13.19   CONTINUED    else{   }   tries++;  alert tries + " Wrong. Try again." ;  form.tfield.value="";      Clear the textbox  form.tfield.focus  ;     Put  the cursor in the textbox   }     End hiding from old browsers  -->          <body  bgcolor="lightgreen"   onLoad="randomize  ">         Pick a number between 1 and 10       name="tfield"   >   <input  type="textbox"  size=4     <input  type="button"  name="buttonl"  value="Check my  guess"  onClick="guessit this.form "   >     4   5   6   7  8               EXPLANATION   This script was modified from one written by Andree Growney originally available at  http:  www.htmlgoodies.com primers jsp .   2   1  A  function  called  randomizeQ  is  defined.  It will  create  a  random  number  by  divid- ing  the  number  of seconds  by  10  and  returning  the  remainder   modulus ;  for  ex- ample,  59 10  would  return  the  number  9.  Then,  by  adding  1  to  that,  we  get  10.  The  function  called  guessit  will  take  one  argument,  a  reference  to  the  form.  Its  purpose  is  to  see  if  the  number  entered  by  the  user, form.tfield.value,  matches  the  value  of  the  random  number  calculated  in  the  randomizeQ  function.  T he f o c u sQ   method  puts  the  cursor  in  the  text  field.  If the user  guessed wrong,  the  alert dialog box  appears  and  tells him  or her so,  the  text  field  is  cleared,  and  focus  is  put  there.   3  4   5  Once  the  document  has  loaded,  the  onLoad  event  handler  is  triggered,  causing  the  function  randomizeQ  to  be  called.  This  sets  the  initial  random  number  for    498   Chapter 13      Handling Events   E X P L A N A T I ON    CONTINUED    The form's input type is a textbox. This is where the user will enter his or her guess.  This input type is  a button.   6  7  8  When  the  user  clicks  this  button,  the  onClick  event  handler  is  triggered,  causing  the  guessitO  function  to  be  called  with  this  form  as  an  argument.  The  display  is  shown  in  Figures  13.26  and  13.27.   Pick   I  nmnber  between  i  anil  10   4   I  Check my  guess~~   Pick  a  number  between  i  anil  10   Checkmy  guess.   [JavaScript  Application]   2 Wrong, Try again.   iL   Figure  13.26  The user makes a guess  left ,  but is told he or she guessed wrong  right .   Figure  13.27  Focus returns to the form field.   13.6.8  The onError Event   The  error  event fires when  a JavaScript error  has  occurred   window   or when an image  cannot be  found   image  elements .   E X A M P LE    13.20        Wake up call     13.7  The event Object   499   EXAMPLE   13.20   CONTINUED                   l  2         < image src="Image java_steam.gif"     <input  type="button"   value="Wake me"  onClick="wakeupCall  "   >                   EXPLANATION   onError="alert 'Image is having trouble loading!' ">   l   2   Image.   The     tag  identifies  the  src  of  a  .gif image  to  be  loaded  from  a  subdirectory  called  The  onError  event  handler  is  triggered  when  an  error  occurs  while  loading  the  image.  See  Figure  13.28.   Figure  13.28  The onError event  handler was  triggered  because  the  image src was  wrong   left ,  a nd   after  the  image  loads   right .   13.7  The event Object   As we  have  seen  throughout  this  text,  events  are  happening  all  the  time with JavaScript.  Event  objects  are  sent  to  an  event  handler  with  each  event  that  occurs  within  a  docu- ment;  for  example,  when  the  user  clicks  on  the  left  mouse  button, JavaScript  registers  the  event,  what key was pressed,  its  coordinates   pixel  positions  of where it was  pressed  on  the  screen ,  and  so  on.  To  learn  more  about  what  happened  so  that  you  can  track    500   Chapter 13      Handling Events   taxes,  trickle-up  or  trickle-down  economics,  browser  companies  argued  over  the  order  in  which  events  are  handled,  also  called  event  propagation.  Does  the  event  bubble  up  from  its  target or  does it trickle  down  to  its  target?   13.7.1  Capturing and Bubbling  Trickle Down and Bubble Up   The way that the events are handled differs by the browser and is based on how Netscape  and  Internet  Explorer  dealt with  events  back in  the  1990s.  Suppose  you  have  used  an  onClick  event  handler  in  the  button  of  a  form.  The  user  clicks  the  button.  What  hap- pens?  Netscape  said  that  the  event  is  captured,  that  is,  it  comes  to  life  at  the  window  level  and  trickles  down  the  document to  the  form  object until it finally reaches  the  but- ton, its target: When it reaches its target, the button, the event is fired. An analogy could  be water trickling down a mountain stream until it reaches a lake at the bottom.  Internet  Explorer says  the  event springs  to life  for  the  target for which it was intended;   i.e.,  the  button   and then sends information about the event back up from the button to the form  to  the  document,  then window, like  the  bubbling up  effect of soda water  in  a glass   see  Figure  13.29 .   Capturing   Bubbling   o form  o   button  onClickCdo   something"    Figure  13.29  Bubbling  and  capturing   Fortunately,  the W3C DOM Level  2 provides an Events module  that allows the DOM  nodes  to  handle  events with  a combination  of these methods, but defaults to  the bubble- up model. We will see later how to use event handling with the DOM, how to specifically  program  the  event to use  one model  or  the  other,  cancel  the bubbling effect,  and so  on.  For now we will  assume  the  browser is W3C  compliant and  defaults  to bubbling.  If you    13.7  The event Object   501   13.7.2  Event Object Properties  Now  we  will  look  at  some  of the  properties  of  the  event  object  and  how  they  are  used  to  glean  information  about  an  event  that  has  occurred.  Many  of  the  examples  listed  on  different Web  sites  might  not work when  you  try  them  because  they were  written  for  a  specific  client.  You  might  be  using  Opera  or  Safari  and  think,  "This  doesn't work  at  all.  I  give  up."  But if you bring up Internet Explorer,  the program  seems  to work fine.  To see  what  does  or  doesn't  apply  to  your  browser  go  to  "Events  Compatibility  Table"  at  http:  www.quirksmode.org dom events index.html.  Although  stan- the  DOM  provides  a  dard  model,  not  all  browsers  are  compliant.  We  discuss  the  DOM  in  Chapter  15.   Tables  13.8  and  13.9  provide  a  list  of  the  event  properties  for  Internet  Explorer  and   Firefox.   Table  13.8   Properties  of  the event Object:  Internet  Explorer   Property   What  It  Describes   altKey,  ctrlKey,  shiftKey   Set to true or false to test if Alt, Shift, or Control keys were pressed when  the  event occurred.   button   cancelBubble   clientX and  clientY   fromElement,   toElement   keyCode   offsetX  and  offsetY   An integer indicating which mouse button was pressed or released,  1  =  left, 2 = right, 4 = middle. If multiple buttons are pressed, the value is the  sum of both buttons, such as 3   1+2   for left and right.   Set to true or false to cancel or enable event bubbling.  To cancel across  browsers,  the  stopPropagationQ  method  is  supported.   The cursor's horizontal and vertical position in pixels,  relative to  the  upper-left corner Web page in which the event occurred. Also good for  the Mozilla Firefox and W3C  event model.   Used to indicate the elements where a mouse is   mouseout and  mouseover   leaving  from  or moving into.  See  relatedJarget  for  W3C Firefox.   The Unicode key code associated with a keypress event. Use  String.fromCharCode keyCode   to  convert  keycode  code  to  a  string.   The cursor's horizontal and vertical position in pixels,  relative to  the  container in which the event occurred, or if outside the container returns  the upper left corner of the document.   retumValue   The return value  of the  event handler,  either true or false. For  W3C Firefox  use  preventDefaultQ  method.    Table  13.8  Properties of the event Object:  Internet  Explorer  continued    Chapter 13      Handling Events   What  It  Describes   Specifies the filter object that caused an onfilterchange event.   The cursor's horizonal and vertical position in pixels, relative to the  document in which the event occurred.   Used to indicate the status of a data transfer for data source objects.   502   Property   srcFilter   x and y   reason   Table  13.9  Properties of the event Object:  Mozilla  Firefox   Property   What  It  Describes   altKey,  ctrlKey, metaKey,  shiftKey   Set to true or false to test if Alt, Shift, Control, or Meta keys were pressed  when the event occurred  Internet Explorer doesn't support metaKey .   pageX and pageY   Horizontal and vertical cursor position within a Web page, relative to the  document, not supported by Internet Explorer.   bubbles   button   cancelable   charCode   clientX, clientY   currentTarget   eventPhase   layerX and layerY   relatedTarget   Set to Boolean value indicating whether or not the event bubbles.   An integer indicating which mouse button was pressed or released, 0 =  left, 2 = right, 1 = middle. Slightly different in Internet Explorer, as  described earlier.   A Boolean value indicating whether or not the event can be canceled.   Indicates the Unicode for the key pressed. Use  String.fromCharCode which   to  convert code to string.   Returns the mouse coordinates at the time of the event relative to upper- left corner of the window.   The node that this event handler is currently being run on.   An integer value indicating which phase of the event flow this event is  being processed in. One of CAPTURING_PHASE  1 , AT_TARGET  2  or  BUBBLING_PHASE   3 .   Returns the horizontal and vertical cursor position within a layer, not  standard.   On a mouseover event it indicates the node that the mouse has left. On a  mouseout event it indicates the node the mouse has moved onto.   screenX and screenY   Returns the coordinates of the mouse relative to the screen when the    13.7  The event Object   503   Table  13.9   Properties  of  the event Object:  Mozilla  Firefox   continued    Property   target   timestamp   type   which   modifiers   data   What It Describes   The node from which the  event originated.   Returns the time  in milliseconds since the epoch   the event was created.   Not all events return a  timestamp.   A string indicating the type of event, such as "mouseover", "click", and so on.   Netscape legacy property indicating the Unicode for the key pressed.   Identical  to  charCode.   The bitmask representing modifier keys such as Alt, Shift, Meta, and so on.   Array of URLs for dragged and dropped.   height and width   Height and width of the window.  13.7.3  Using Event Object Properties  The srcElement target and  type Properties.  The  srcElement   Internet  Explorer   and  the  target  properties   Firefox   return  the  element  that  fired  the  event.  The  srcEle- ment  also  has  a  tagName  property:  event.srcElement.tagName  will  return  "IMG"  if  you  click  on  an  image  object.  And  we  can  also  read  styles,  so  if the  image  has  a  style  height  of   lOOpx,  then  event.srcElement.style.height  will  return  "lOOpx".  The  type  property  contains  the  event  name   e.g.,  click,  mouseover,  keypress,  and  so  on .  This  is  the  same  for  nonphysical  events.  If we  capture  and  handle  an  onload  event,  type  will  be  "load",  and  so  on.   EXAMPLE   13.21        Event  Properties-; titlex head>  <body bgcolor="yellow"                <input  type=button   <input  type=button   value="Internet  Explorer"  onClick="alert  event.type +  1  1 + event.srcElement ;">  value="Firefox"   1  2  3    504   Chapter 13      Handling Events   EXAMPLE    CONTINUED    13.21              EXPLANATION   The  HTML  form  starts  here.   1  2  When  the  user  clicks  the  first button  in  this  form,  the  onClick  event  is  triggered.  It will  cause  an  alert message  to  appear  displaying  two  event properties:  the  type  of the  event and  the HTML  element where it came from   srcElement   Internet Ex- plorer   property  of the  object .  The  type  of event is  cross-browser  compliant.  The  input  type  for  this  form  is  a button.  When  the  user  clicks  the  button  for  In- ternet Explorer, an alert box displays the type of the event and the source or object  from  when  it  originated.   3   4  When  the  onClick  event is  triggered,  an  alert message will  appear  displaying  two  event properties:  the  type  of the  event  and  the  target   Firefox   property  or  object  from  which  the  event  originated.  See  Figures  13.30,  13.31,  and  13.32.  W3C  and  Firefox  both  use  the  target  property.  Internet  Explorer  uses  srcElement.   Figure  13.30  Displaying the event object's property in  Internet Explorer  left ,  and  Firefox  right .   Event  Properties  - Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   C   Q   FNe:   C: wamp www e   Event  Properties   [  Internet Explorer ~] [ jFirefoxj"]   Event Properties  -  Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   T   C   LBJ'   LZ]   file:   C: wamp www examplel3.22.html   Event  Properties   Internet Explorer    [  Firefox  ]   IB   r.lavaSnrint  Ann Meat ionl    13.7  The event Object   505   Event  Properties  -  Windows  Internet  Explorer   I  ,   .      I Ë    C  \wamp\www\example 13.22. html   File  Edit  View   Favorites   Tools  Help   X   [ p"   1   Favorites   g Event  Properties   Internet Explorer   [  Firefox  ]   Message  from web page   Figure  13.32  The  user clicked  the  Internet  Explorer  button.   13.7.4  Passing Events to a JavaScript Function  As  stated  earlier, JavaScript registers  events  as  they  occur within  the  document  and  reg- isters  information  about  that  event  such  as  what  key  was  pressed,  what  mouse  button  clicked,  and  so  on.  You  can  pass  this  information  directly  to  a JavaScript  function.  The  problem  is  that Internet Explorer  has its  own way of tracking events  and  the  other  major  browsers  use  the  W 3C   standard   e.g.,  Firefox  and  Opera .  With  the  W 3C   method,  the  event  object  is  sent  as  a  parameter  to  the JavaScript  function,  but with  Internet  Explorer  the  event  is  a  property  of  the  window  object   window.event .  It  is  easy  enough  to  check  for  both  without  interrupting  the  flow  of your  program  by  testing  for  both  conditions.  The  following  line  uses  the  ternary  operator  to  test  for  both  events  and  for  null.   The  ternary  operator  was  described  in  detail  in  section  "The  Conditional  Operator"  on  page  108,  Chapter  5.    function  testEvent e {   var evt =   e   ? e:    window.event ? window.event: null    EXAMPLE   13.22   }            Event  Object  and  Incompatible  Browsers     506   Chapter  13      Handling Events   EXAMPLE   13.22   CONTINUED    3   4  5   6   7   if e.target   {targ=e.currentTarget;  targ=targ.id;}  else if e.srcElement   {targ=e.srcElement.id;}  alert targ +" has recieved a "+e.type ;      Microsoft IE      Fire fox   }                          <input  type="text"  id="textboxl"   onkeypress="whichEvent event ;"   >      <input  type="button"  value="rollover me"  id="buttonl"   onmouseout="whichEvent event ;"   >                      EXPLANATION   1   Four  types  of  events  will  be  sent  to  this  user-defined  function:  the  load,  keypress,  mouseout,  and  click  events.  The  purpose  of  the  function  is  to  show  you  how  to  make  a  cross-compliant script  to  handle  events  on  different  browsers.   3   2  Unless  the  browser  is  Microsoft  Internet  Explorer,  a  reference  to  the  event  object  is  passed  as  an  argument  to  whichEventQ  and  called  e  as  a  parameter  to  the  which- EventQ  function.  If  not,  Internet  Explorer  uses  the  event  property  of  the  window  object  to  get  the  value  of e.  If the  target  property is  applied  to  the  object,  then  a  Mozilla  type  browser  is  being  used.  The  currentTarget  property  returns  the  object  from  where  the  click  originat- ed.   To  understand  the  flow  of  events,  see  the  section  "Capturing  and  Bubbling   Trickle  Down  and  Bubble  Up "  on  page  500.   Using  the  id  attribute  of  the  object  where  the  event  occurs  allows  us  to  identify  what  object  received  the  event.  For  example,  if the  user  clicks  the  form,  with  the  id  o ff o r m l,   then  we  can  see  that  the  click  originated  in forml.  If  the  srcElement  property  is  defined,  then  we  are  using  Internet  Explorer   4   \f]  r>f  thf>  f>1f>mf>nt   i in  A  thP   w s i«   firf>rl  arp'  r l i c r ^l    13.7  The event Object   507   EXPLANATION    CONTINUED    7   Each object, the form, the textbox, and the button have an event attribute that will  be triggered if the user clicks any of those objects.  The  argument to  this function,  event,  is  a  reference  to  the  particular  event  that  was  triggered  when  the  user  clicked it.  Output  examples  are shown in Figures  13.33,  13.34,  13.35,  and  13.36.   s r c E l e m e nt   a nd   t y pe   -  O p e ra   File  File   Edit   View   Bookmarks  Widgets   Tools   Help   Ül   I  Plugin Detection  X   [g  Plugin Detection  X   Home   Index  Contents  Search  Glossary  Help  First  Previous  Next  Last  Up  Copyric   file :   localhost C :  wamp www event   rollover  me   a   button 1  has recieved a mouseout   Stop executing scripts on this page   Figure  13.33  Opera—the  mouse  has left the button.   s r c E l e m e nt   a nd   t y pe   - W i n d o ws    I n t e r n et   E x p l o r er   e  e   File  File   V    SJ  C:\wamp\www\eventprops.html   Edit   View   Favorites   Tools   Help   X   f>   arch the Web   SfftPCT   A OL    r a d io    l > '    Favorites;   jj srcElement  and  type   Message   f r om   w eb  page   J\   textbox 1  has recieved a click    508   Chapter 13      Handling Events   ^  Event Object  and  Incompatible  Browsers  - Mozilla  Firefox  File   History    Bookmarks   Trunk   ^iew   Help   Edit   *  C   C   Hi   l3   file::    I: wamp www tp227b3J.htm               ^  srcElement  and  type   i~   srcElement  and  type   J  Q  Event  Object  a n d l . ..   E   Figure  13.35  Firefox—The mouse was clicked in the textbox but captured first in the  form.   hj  Event  Object  and  Incompatible  Browsers  -  Mozilla  Firefox  File   Bookmarks   History   Tools   View   Help   Edit   ES   '   C   f it    f  Q   file : I HC :  wamp www tp227b3d. htm &  ^     fi   Google    Q  Event  Object  and  [...a   srcElement and type   Q  srcElement and type   [JavaScript  Application]   textbox 1  has recieved a keypress   Figure  13.36  Firefox—A key was pressed  in the textbox.   13.7.5  Mouse Positions  We devoted a whole section of this chapter to handling mouse event handlers and what hap- pens if the mouse rolls over a link or an image.  In this section we discuss how to find out  what  event  the  mouse  triggered  and  where  the  mouse  was  positioned  when  it  fired.  For  browser  compatibility  tables  see  http:  www.quirksmode.org doin w3c_cssom.html.   Mouse Position.  The  client  X  and  clientY  properties   Internet  Explorer   and  pageX  a nd   naceY  n r o n e r t i es    c o o r d i n a Te   n o s i î i o ns   of   T he   m o u se   f F i r e f o x     a re   u s ed    a eT   T he    To     13.7  The event Object   EXAMPLE   13.23       509    Mouse  Coordinates-; title>       function getCoords e   {   var x = 0;     x and y positions  var y = 0 ;  if   !e  var e = window.event ;      if   e.pageX    e.pageY {       x = e.pageX;  y = e.pageY;   Internet  Explorer  Fire fox   }  else if   e.clientX   e.clientY  {   e.clientX + document.body.scrollLeft  x =  +  document.documentElement.scrollLeft;  y = e.clientY + document.body.scrollTop   +  document.documentElement.scrollTop;   }  II  x and y contain  the mouse position  II relative to the document  alert x +",  "+ y ;   <div  style="background-color:aqua position:absolute;top:50px"   onMouseover="return  getCoords event ;">  &lt;div&gt;  container-; hl>    Mouse positions are relative to the document,  not the          }                 EXPLANATION   1  Variables x and y  are  declared.  They will  hold  the  pixel  coordinates  of the  mouse.  2  If using  Mozilla Firefox,  the  value  of e will  be  sent  to  the  function;  if using  Inter- net  Explorer,  the  value  of  window.event  will  be  assigned  to  e.  In  this  way  both  browsers will get a reference  to  the  event  triggered when  the mouse  event is  fired.  The  pageX,pageY pair  represents  the  coordinates  of  a  page  regardless  of scrollbars,  but  this  pair  is  not  supported  by  Internet  Explorer.  See  an  excellent  demo  at  http:  www.java2s.com Code JavaScnptDemo EventpageYandpageX.htm.  The  clientX,clientY  pair  represents  the  coordinates  of  a  page  and  accounts  for  scrollbars.   3   4    510   Chapter 13      Handling Events   ouse  C o o r d i n a t es   -  M o z i l la   F i r e f ox   File   Edit   View   History   Bookmarks   Tools   Help   S UB   C   t ii    C3   file:   C: wamp www cursor.html   ffi            ';  Google   Q  M o u se  Coordinates    J  Mouse Coordinates        Mouse Coordinates   Mouse  positions are relative to the  document,  not  the   container   [ J a v a S c r i pt   A p p l i c a t i o n]      X     1   11,  50   M   1   Figure  13.37  Mouse was positioned  on  the  left top corner of the div box,  11  px  from left, 50 px from top.   Mouse Buttons.  Here we  go  again with  more  incompatibilities  among browsers!  And  the  mouse might only have  one button,  such  as  the Mac's  mouse,  or  two  buttons  and  a  wheel,  or  maybe  the  mouse  button  properties  don't  work  for  all  of  the  buttons.  You  will  have  to  work  with  these  properties  for  the  particular  browser  you  are  using  or  make  adjustments  to your program  to  allow for multiple  conditions;  for  example:   if  browser == "Opera"   {   do this;   }   else if   browser == "IE"  {  } . . . .   do that;   In  Example  13.24  the  mouse  used  was  a  Microsoft  mouse  and  then  a  Targus  mouse  with  a  left  and  right  button  and  wheel  in  the  middle.  The  browsers  used  were  Firefox  and Internet Explorer.  Firefox returned  a 3  for  the  right click and  a  1  for  the  left click.  Inter-net  Explorer  was  consistent with  Table  13.10.  Could  it  be  that  running  a  virtual  window  OS  on  a  Mac  could  make  the  difference?  This  is  where  the  confusion  really   .  .  ^  .   -   I  T1  .   .   . 1 __    .  _   .   -  .  ^  .   ^  .  .  ^   . 11   _   .   . - 1 . 1.   1.   .   1   -   .   .   ^    13.7  The event Object   511   Table  13.10  Button Values   Microsoft  Internet  Explorer   W3C Mozilla Firefox   event.button   Left button = 1   Middle button = 4   Right button = 2   event.which   Left button = 0   Middle button =  1   Right button = 2   EXAMPLE   13.24        Mouse  Buttons        function whichButton e   {   var button;  if   !e   {var e = window.event;}  if e.which { button = e.which;}  else if e.button { button=e.button; >  alert button ;  switch button {   1  2  3  4   case 0:  return "FF  leftclick" ;  break;  case 1:   return "leftclick" ;   case 2:  case 3:      Firefox returned 3 on  the Mac   return "rightclick" ;  break;  case 4:   return 1 IE middleclick" ;   }   }                      &nbsp;&nbsp;Click the mouse in the green box  <div  onMousedown="alert whichButton event  ;"  style="position:absolute;top:100;left:20;   height:2 00;width:2 00;background-color:green">    512   I  EXPLANATION   Chapter 13      Handling Events   1   2   l  Unless  the  browser  is  Microsoft Internet Explorer,  a reference  to  the  event  object  is passed  as  a parameter  called  e.  Internet Explorer uses  the  event property of the  window object to get the value  of e.  If  not  Internet  Explorer,  the  which  property  contains  a  value  representing  the  mouse  button.  If Internet Explorer,  the  button  property contains  that value.  The  switch  statement is  used  to  determine which  button was  clicked.  See  Figures  13.38  and  13.39.   3  4   «   use  Bullaus  -  Windows  Internet  Explorer   Mouse  Buttons  -  Windows  Internet  Explorer   t'  Li'i.DDCumerts and r.ercrigs'i.l.Arer'iv..  [n: c jments ,t Lite - r-n, -mil   ,   .   G^DocumentsandSettings1jOuuner\My  Documents\buttoninfo.html   ¿e  Favorites   gg  T  ^  AOL.com -Wefcome to AOL   Mnnw   ftitfïw   &  Favories   SB  -  S* ftOi.com - Welcome to Ad   & Mouse Buttons   E   AOL  fr  r a d io    aüj stdtMi   Click the  mouse  in  the  green  box   Click  the  mouse  in  the  green b ox   Figure  13.38  The left mouse button was clicked  in the green box  Internet Explorer . The  value was  1.   ^  Mouse  Buttons  -  Windows  Internet  Explorer   ^  Mouse  Buttons  Windows  Internet  Explorer   j?  C:\Document5 and jettngs^Owner^My Docurent5\buttoninfo.ht riJ   .   , .   ' ,   ¿2 I C:\Documents ond 5cttings\0vincr\Hy Doojrnicrit5\buttoninfo,   E   AOL  »>radio  ftl+fiän   Add Station   i.htrrJ  a oi   tf  Favorites   SQ '    y ftOL.com - Welcome to AOL   Muu>e Bullui »   ¿f  Favorites   GG  -   AOI .rnm - Wdrrm» rn AOI   0 Mouse Buttons   CKrk:  the mmise  in  the  green  box   Click" the  mouse  in  the  green  box   Message  from  we h page   [X      13.7  The event Object   513   13.7.6  Key Events  The Handlers.  As  of JavaScript  1.2,  keyboard  actions,  not just mouse actions, can be  detected  in JavaScript  programs.  Now  that  we  have  discussed  the  event  object,  we  will  look  at  how  to  detect  keyboard  actions.  This  is  useful,  for  example,  in  creating widgets  or  certain  types  of game  programs where  keyboard  entry must be  detected  to  determine  the  next  action.  The  onKeyPress,  onKeyDown,  and  onKeyUp  event  handlers  are  triggered  when  the  user  presses  a  key  and  releases  it.  The  onKeyPress  event  is  a  combination  of  two  actions:  After  you  press  down  on  the  key,  the  event  happens  just  at  the  point  you  release  it.  The  other  two  key  events  happen  as  soon  as  you  press  a  key  down   onKey- Down   and  then  when  you  release  it   onKeyUp .  The  onKeyDown  and  onKeyPress  events  keep  firing continuously  as  long as  the  user  keeps  a key depressed, whereas  the  onKeyUp  event  fires  once when  the user  releases  the  key.  Detecting a user's keystrokes  might give  you  problems  as  all  browsers  are  not  compatible  in  how  they  handle  the  keys  and  the  event  properties.   Properties for the key Event.  The  two  main  properties  for  the  key  event  are  key- Code  and  charCode.  The  key Code  property  describes  the  actual  key  that  was  pressed,  for  example,  the  B  key.  The  charCode  property  provides  the  ASCII  value  for  that  key.  If it is  a lowercase  b,  it will  return  98  and  if it is  an  uppercase B,  it will  return  66.  The  problem  is  that Windows  Internet  Explorer  and  Opera  do  not support  charCode,  but  they  do  sup- port  keyCode  when  the  onKeyPress  event  is  triggered.  For  tables  showing  which  brows- ers  support  these  properties  and  a  selection  of  other  tables  dealing  with  punctuation  keys,  special  keys,  and  so  on,  see  http:  www.quirksmode.org js keys.html.   Browser Incompatibilities.  Figures  13.40 and  13.41 were taken from a site where a test  can be run  from your browser  by performing keystrokes.  The  output shows what properties  are  supported  for  keydown,  keypress,  keyup,  and  so  on.  Go  to  http:  unixpapa.com js test- key.html  to  run  the  test.  Go  to  http:  www.JavaScriptkit.com jsref eventkeyboardmouse.shtml  for  an  excellent reference with  examples.    514   Chapter 13      Handling Events   Javascript Key  Event Tester  - Opera   L J í 1 Í ± 1 Í ± i í í L L 9 j l ^J  Home  Index  Contents  Search  Glossary  Help  First  Previous  Next  Last  Up  Copyright  Author   http:  unixpapa.com js testkey.htm  T   :  " oj   javascript onkeypress event with Opera   Javascript  Key  Event  Test  Script   Hit keys to  see the Javascript events triggered and the values returned.  Notes  on test results from the page  are  at http:     On most browsers,  suppressing the  default action on keypress  events prevents the browser from processing the keystr<  action on key down prevents keypress  or keyup  events from triggering.   Your browser:  0pera 9.80   Windows NT 5.1;  U;  en  Presto 2.2.15  Version 10.00   Suppress  default handling  of  D  key down  Q  keypress  keydown   Q  keyup   Q  textinput   keyCode=83   S   keyIdentif ier=undef ined  keyLocat ion=undef ined  shiftKey=faise  ctrlKey=faise  altKey=false  metaKey=faise   charCode=undef ined   which=83   S    keypress  keyCode=115   s    which=115   s    charCode=undefined   shiftKey=faise  ctrlKey=faise  altKey=false  metaKey=faise  keyCode=83   S   keyIdent if ier=undef ined  keyLocat ion=undef ined  shiftKey=faise  ctrlKey=faise  altKey=false  metaKey=faise   charCode=undefined   which=83   S    keyup   Figure  13.40   Checking  Opera  key  events  at http:  unixpapa.com js testkey.html.   0 [     [ > <]   -  *  *   Ö Javascript  Key Event Tester  - Mozilla  Firefox  1  File  Edit  View  History  Bookmarks  Tools  Help   O   ^   El  http:  unixpapa.com js testkey.html   T   T  y event javascrit^'   -1  nd tr...   Javascript -...  Q  Key Events   Q  file:  ...y.html   navigator a...   key event j...   fl   Javas...  yj   Javascript  Key  Event  Test  Script   Hit keys to  see the Javascript events triggered and the values returned.  Notes  on test results from the page  are  at  http :  unixp ap a. c omI \ s key. html.   On most browsers,  suppressing the  default action on keypress  events prevents the browser from processing the  keystroke.  On some browsers,  suppressing the  default action on key down prevents keypress  or keyup  events  from  triggering.   Your browser:  Mozffla 5.0   Windows;  U;  Windows  NT  5.1;  en-US;  rv: 1.9.1.3   Gecko 20090824  Firefox 3.5.3   .NET  C LR   3.5.30729    Suppress  default handling  of     key down  D  keypress  keydown   O  keyup   EH  textinput   keyCode=75   K   charCode=0  kevldent if ier=undef ined  kevLocat ion=undef ined   which=75   K     13.7  The event Object   EXAMPLE   13.25       515         keypress  event      <body onKeyPress="   if browserName  ==1Firefox" {   alert 'The key pressed:'+ event.which +  1 ASCII=  '+ String.fromCharCode event.which  ;   }  else if browserName ==  "Microsoft Internet Explorer'     browserName==1 Opera1  {   alert 'The key pressed:'+ event.keyCode +   '  ASCII='+ String.fromCharCode event.keyCode  ;   }   "  >           Press any key on your keyboard and see what happens!            EXPLANATION   1  An  external  file  is  loaded  here.  It  contains  the  code  to  determine  what  browser  is   for   source  code.   See  http:  wwwJavaScnpter.net faq browsern.htm   being  used.  The  body  tag  is  assigned  an  onKeyPress  event  handler.  If  the  user  presses  a  key  anywhere  in  the  body  of  the  document,  the  event  is  triggered,  causing  an  alert  method  to  appear  and  display  the  value  of the  key.  First we  check to see if the browser being used is Firefox.  Firefox and Internet Ex- plorer  use  different  properties  to  describe  the  numeric  value  of  the  key  being  pressed.  The  which  property  of  the  event  object  describes  the  numeric  ASCII  value  for  the  key  that was  pressed.   See  more  of the  event  object  on  page  499.   The  String  method  fromCharCodeQ  converts  the  ASCII  value  of  the  key  to  the  character  value  that  is  shown  on  the  key   e.g.,  ASCII  65  is  character  "A" .  If the  browser isn't Firefox,  the  alternative  for  this  example  is Internet Explorer  or  Opera.  They  use  the  keyCode  property  to  represent  the  numeric  value  of  the  key  being  pressed.  The fromCharCodeQ  String  method  converts  the  number  to  a  char- acter.  The  output  is  displayed  for  both  browsers  in  Figures  13.42  and  13.43.   1  2  3  4  5  6   2   3   4   5   6    516   Chapter 13      Handling Events   keypress  event  -  Mozilla Firefox  File  Edit  View  History  Bookmarks   Tools  Help   O   >   t il    l~*1  file  :   C: wamp www presskeybrowser. html   fy   w     j ^T  y event javascrit j   A  jents   1  Q  file:  ...y.html  I   navigator a...  1  ^  key event j...  I   key event j...  1  Q  keypress ev...  I  Q]  keypr...  Q  I   I  +  I  »   Browser name  = Firefox  Full version =  3.5.3  Major version =  3  navigator. appName  = Netscape  navigator.userAgent = Mozilla 5.0   Windows;  U;  Windows  NT  5.1;  en-US;  rv: 1.9.1.3   Gecko 20090824  Firefox 3.5.3   .NET  CLE.  3.5.30729   Press  any  key  on  y o ur   keyboard  and  see  w h at   happens!   [JavaScript  Application]   Figure  13.42  The  'a'  key was pressed   Firefox .    13.8  The Scripting  Model for Handling Events   517   13.8  The Scripting  Model for Handling  Events   We  have  been  using  event  handlers  like  onClick,  onSubmit,  and  onMouseOver,  through- out this  text.  So  far,  this  chapter has  described in  detail  all  of the  different event handlers  and  how  to  use  them  as  inline  HTML  attributes.  Inline  event  handling  is  the  oldest  and  simplest  way  to  handle  events  and  is  browser  compatible.  The  following  example  uses  the  onClick  handler  as  an  attribute  of  the  button  element.  When  the  user  clicks  the  but- ton,  the  function  movePositionO  will  be  called.   <input  type="button"  value="move text"   onClick="movePosition  "   >   But  using  this  type  of handler  violates  the  principle  of  separation  of  the  layers;  that  is,  the  separation  of markup presentation  from  behavior  JavaScript.  To  solve  this  prob- lem,  we  can  handle  events  within  the JavaScript  code  itself.  All  of  the  HTML  attributes  used as event handlers can  also be used as DOM  properties.  These properties  can be used  in JavaScript  to  simulate  the  event  that  they  are  named  for.  If,  for  example,  you  want  to  trigger  a window  event, JavaScript views  the  window  as  an  object  and  any  event  associ- ated  with  it  as  a  property.  If you  want  to  use  the  onload  event  with  the  window  object,  you would  say window, onload.  The  main  difference  is  that unlike  using HTML  attributes,  which  take  a string value,  a  function  reference  is  assigned  to  an  event handler.  All Java- Script  event  properties  must  be  in  lowercase,  such  as  window,  onload  or  window.ununload.   The  event  handlers,  used  as  HTML  attributes,  are  not  case  sensitive,  so  ONUNLOAD,  onUnLoad,  and  onunload  are  all  acceptable.   Here's  an  example:   window.unload=some_function;   13.8.1  Getting a Reference to the Object  To  assign  an  event  property  to  an  object, JavaScript will  need  a  reference  to  the  object.  For example, if the  click event is  to be  triggered when  the user clicks a button,  then Java- Script will need  to  use  a reference  to  the  button.  By assigning  an  id  to  the  HTML button,  JavaScript  can  use  the  DOM's  getElementByldQ  method  to  get  the  reference  it  needs.   In  the  HTML  part  of  the  document:  input  type button id="buttonl">   In  the JavaScript  script:  var  bl=document.getElementByld "buttonl" ;   V il    in   tT-i c*   ic  n  r &f    r-c*   " k n t t A nl   "  f r r ^ n -i    tT-i c*  U T A   IT    f l r t i - i i tn  c* T-I t    518   Chapter  13      Handling Events   The  next step  is  to  assign  a value  to  the  event property.  The  value will  be  a reference  to  either  a  named  function  or  an  anonymous  function.  Note:  When  used  as  a  reference,  the  function  name  is  not  enclosed  in  quotes  and  does  not  have  parentheses!   bl.click=greetings;  function  greetings  {  alert "Welcome!" ;   or an anonymous  function   bl.click=function  {alert "Welcome!" ;}   }   }   Now  when  the  user  clicks  "buttonl"  in  the  document,  the JavaScript  event  handler   will  be  triggered  and  the  greeting  displayed  in  an  alert  box.   Another  example  of  using  JavaScript  event  handling  is  with  the  onload  event.  This  event  is  used  to  guarantee  that  the  entire  page  has  been  loaded  before  an  event  is  fired.  When  a  function  is  assigned  to  onload,  the  function  will  not  be  executed  until  the  page  has  loaded:   window.onload =  init;  function init    {   do_something   You  can  also  assign  an  anonymous  function  to  the  onload  property  as  follows:  window.onload = function  { do something;  }   See Example  13.26.  When  the page has loaded,  the  function  that was registered to  the  event will  be  called.  If you want  to  assign  more  than  one  function  to  the  event,  there  are  several  ways  to  do  this.  One  method  is  to  place  several  function  calls  in  a  chain,  using  one  onload  event  handler.  function start    {   fund    ;  func2  ;   }  window.onload = start;   Like  the  inline  model,  each  event  can  only  have  one  event  handler  registered.  To  remove  an  event  handler,  simply  set  the  property  to  null.  Object  event  properties  are  shown  in  Table  13.11.   For  a  more  elegant  examples  of  how   to  use  onload  go   to  http:  www.site-  voint.com bloss 2004 05 26 closures-and-executins-JavaScrivt-on-vase-load .    13.8  The Scripting  Model for Handling Events   519   Table  13.11  Object  Event  Properties   Event Handler Property   onblur   onfocus   onchange   onmouseover   onmousemove   onmousedown   onmouseup   onclick   ondblclick   onkeydown   onkeyup   onkeypress   onsubmit   onload   onunload   Event   blur   focus   change   mouseover   mousemove   mousedown   mouseup   click   dblclick   keydown   keyup   keypress   submit   load   unload   EXAMPLE   13.26       1  2  3   4    Event  Handling  and Forms        var bl,b2,b3;  window.onload=£unction  {   bl=document.getElementByld "buttonl" ;  b2=document.getElementById "button2" ;  b3=document.getElementByld "button3" ;  bl.onclick=morning;  b2.onclick=noon;  b3.onclick=night;    520   EXAMPLE   Chapter  13      Handling Events   13.26   CONTINUED   function morning  {   alert   "Good Morning" ;   }  function noon  {   alert "Let's have  lunch." ;   }  function night  {   alert "Good-night!" ;   }                           Greetings Message   <input type="button"  id="buttonl"  <input type="button"  id="button2"  <input type="button"  id="button3"   value="Morning"  >  value="Noon"  >  value="Night"  >               EXPLANATION   3   1  2   Some  global  variables  are  defined  to  be  used  later  in  the  script.  The  onload  event  property  of  the  window  object  mimics  the  behavior  of the  HTML  onLoad  event  handler  of  the  body  element.  The  function  defined  will  be  called  when  a  document  or  frameset  is  completely  loaded  into  its  window  or  frame.  The  document.getElementByldO  method  takes  the  id  of  each  of  the  HTML  buttons  and returns  a reference  to  each  of them.  Now JavaScript has  access  to  the  buttons.  4  Using  the  onclick  property  with  the  button  reference  allows JavaScript  to  react  to  the  click  event when  the  user  clicks  one  of the  buttons.  The  function  called  morn- ing is  assigned  to  this  property and will  be  called when  "buttonl"  is  clicked.  Note  that this is  a reference  to  the  function  and  there  are  no  quotes  or parentheses.  The  actual  function  it  references  is  on  line  5.  This  is  the  actual  function  that will  be  called  when  the  user  clicks  the  "Morning"  button.  Three HTML buttons  are  defined in  the  document.  Each is given  a unique  id  to  be  used  in  tbe  TavaScrint  nroaram  as  an  aranment  to  tbe  document  petFlementRvIdi    5   6    13.8  The Scripting Model for Handling Events   521   Figure  13.44  The  HTML page before clicking  one of fhree  buttons.   0  Event  Handling  and  Forms  -  Windows  Internet  Exp   »   C:\wamp\www\DOMeventmi  ~j   f x]    [j   File   Edit   View   Favorites   Tools   Help   Favorites   Jg Event  Handling  and  Forms   S}   Greetings  Message   I  M o r n i ng   "    N n nn       N i g ht       ^Event  Handling and  Forms  - Windows  Internet  Ex    g]   C:\wamp\www\DOMeventmi  v   a.   File   Edit   View   Favorites   Tools   Help   Favorites   Event  Handling  and  Forms   St   Greetings  Message   [ M o r n i ng        N o on       N i g ht      Good  Morning   I   OK      Figure  13.45  The user clicked  fhe firsf button.   In Example  13.27, an image is assigned to the HTML   tag. When the user rolls the  mouse  over  the initial image,  the image is replaced with  a new image.  Rather than have  .-1   T T T X   IT   . . .H    n . .t    ^  1   .-1   J1   H   n   J   J   -   „    522   Chapter  13      Handling Events   EXAMPLE   13.27        Preloading  Images        window.onload=preLoad;  function preLoad  {   var  linkId=document.getElementByld "linkl" ;  baby = new Array  ;     global variable  baby[0]=new Image  ;     Preload an image  baby[0].src="babysmile.jpg";  baby[1]=new  Image  ;  baby[l].src="babygoo.jpg";   linkId.onmouseover=firstBaby;     Event property on a. link  linkId.onmouseout=secondBaby;   }  function  firstBaby  {   }  function  secondBaby  {   document.images["willy"].src=baby[l].src;   document.images["willy"].src=baby[0].src;   }                         EXPLANATION    This  is Baby William    <img name="willy"  src="babygoo.jpg"   width="22 0" height="250">   The  onload  property  of  the  window  object  simulates  the  HTML  onLoad  event  han- dler  of  the  body  element.  The  function  preLoadQ  will  be  called  when  a  document  or  frameset  is  completely loaded  into  its  window  or  frame.  This  function  will  be  called  as  soon  as  the  document  has  loaded.  It  will  preload  the  images  and  set  up  the  event  handling.  To  apply  a  property  to  a  link,  we  need  to  get  a  reference.  The  getElementByldO  method  returns  a  reference,  linkID,  to  the  link  object  identified  on  line  8  with  a  unique  id.  The  mouseover  event  handler  property  is  assigned  to  Unhid.  Its  value  is  a  reference  to  a  function,  calledJirstBabyO,   and  defined  on line  6.  The  function will  be  called   1  2  3   4  5   6   7   8   1   2   3   4    13.9  What You Should  Know   523   EXPLANATION    CONTINUED    6,  7  8   These  are  the  functions  that are  called when  the mouse  events  are  triggered.  The HTML   tag is given an id of "linkl"  and assigned an initial image. The out- put is  shown  in  Figure  13.46.   This  Is  Baby William   Figure  13.46  Mouse rolls over firsf baby.  Image is replaced wifh second  baby.   13.9  What You Should  Know   The  day  the  music  died  ...  the  day  events  died,  is  when JavaScript  ceased  to  exist.  It  would  be  a  challenge  to  find  a JavaScript  program  that  doesn't  have  an  event  handler.  Events are the basis for interactivity and without them, a Web page is dead. This chapter  focused  on  all  the  major  event handlers you  can  use  in JavaScript, what  triggers  them,  and how to register them. We saw that event handlers can be assigned to objects such as  buttons, links, windows, and forms and that when a user rolls the mouse over an object,  clicks  a button,  presses  a key,  resizes  the  window,  submits  a  form,  or  changes  a  value,  JavaScript  can  react  and  do  something based  on  those  actions.  The  simplest way  to  use  the handlers is as attributes of HTML tags, but in doing so, JavaScript is made part of the  HTML markup.  To keep the structure   markup   and the behavior   JavaScript   separate,  the  event handlers can be used  as properties of objects.  In  Chapter  15, we will  take  this  to  the next level, working with  event handlers  and  the DOM.  So  far, you should know:   1.  How to  create  an inline  event handler.  2.  Wbat it means  to  register  an  event.    524   Chapter  13      Handling Events   7.  How  to  use  mouse  events.  8.  How mouse  events  are  used with  a rollover.  9.  What  event  handlers  are  used  with  links.  10.  How  a button  input  device  differs  from  a submit input  device.  11.  What  events  are  used  with  forms.  12.  How  to  prevent  a  form's  submission.  13.  What  the  event  object  is.  14.  The  difference  between  capturing  and  bubbling.  15.  How you  can  tell  what element  fired  the  event:  Internet Explorer?  Firefox?  16.  How  to  pass  an  event  to  a JavaScript  function.  17.  How  to  get  the  coordinate  positions  of a  mouse within  an  element.  18.  How  to  handle  key  events.  19.  How  to  use  the  scripting model  for  handling  events.    Exercises   525   Exercises   1.  Create  three  buttons,  labeled  Shoot  movies,  Shoot  guns,  and  Shoot  basketballs.  When  the  user  clicks  any  button,  use  the  onClick  event  handler  to  call  a  func- tion  that will  send  a  message  based  on  which  button  was  pressed.   2.  Create  a  form  that  contains  two  text  fields  to  receive  the  user's  name  and   address.  When  the  user  leaves  each  text  field,  use  the  onBlur  event  handler  to  check if the  user  entered  anything in  the respective  field.  If the user  didn't,  send  an  alert  telling  him  or  her  so,  and  use  the focus     method  to  return  focus  back  to  the  text  field  the  user just  left.   3.  Make  a  link  that  changes  the  background  color  to  light  blue  when  the  mouse   pointer  is  rolled  over  it.   4.  Create  a  form  that will  contain  a  textbox.  After  the  user  enters  text,  all  the  let- ters will  be  converted  to  lowercase  as  soon  as  he  or  she  clicks  anywhere  else  in  the  form.   Use  the  onChange  event  handler.    5.  Write  a  script  that will  detect what  event  occurred  and  the  pixel  positions  of a   mouse  when  it rolls  over  a  hotspot  in  an  image  map.   6.  Create  a  text  field  in  a  form.  When  the  user  clicks  on  a  button,  a  function  will  be  called  to  make  sure  the  field  is  not  empty.  In  a JavaScript  program  use  the  document.getElementByldlO  method  to  get  a  reference  to  the  button  object.  Use  the  onclick  event  property.   7.  Write  the  HTML  part  of this  script  to  test  capturing  and  bubbling  for  your   browser.  Explain  the  order  of event  handling.   document.onclick =  function  {  alert "Document  clicked!" ;   } ;  function buttonClick  {   alert "Button  clicked!" ;   }  function  formClick  {   alert "Form clicked!" ;   }    526   Chapter  13      Handling Events   The  onunload  event  handler  will  also  be  made  part  of  the JavaScript  code.  After  you have  tested your  program,  put the JavaScript program  in  an  external  .js  file.  In  the  HTML  file,  use  the  src  attribute  of the  script  tag  to  include  the  .js  file  and  run  your  program.  All JavaScript  is  now  separated  from  the  HTML  markup.    chapter   Introduction to CSS   Cascading  Style  Sheets  with JavaScript   14.1  What Is CSS?   Cascading  Style  Sheets   CSS   was  a  standard  introduced  by  the  World  Wide  Web  Con- sortium   W3C   in  1995  to  help  designers  get  more  control  over  their  Web  pages  by  enhancing what HTML  can  do—it is  used  to  stylize  the  content  of a Web  page.  Whereas  HTML  is  concerned  with  the  structure  and  organization  of  a  document,  CSS  is  con- cerned  with  its  layout  and  presentation,  or  formatting  the  document.  In  the  old  days,  HTML  tags were  used  to  set up  the  structure  and  style  of a page.  If you wanted  to  create  an  HI  tag  with  an  Arial  blue  font,  point  size  22,  you  would  have  to  set  the  same  attri- butes  for  each  H1  tag  in  the  entire  document,  To  apply  these  changes  to  an  entire  Web  site  could  be  a daunting task.  With  CSS you  can set the  style  once  for  all HI  tags  and  put  that  style  definition  in  its  own  .ess  file.  When  the  page  is  loaded  the  CSS  style  will  be  applied  to  all  HI  tags  in  the  page  in  one  sweeping  change.   Because  the  initial  style  of  the  content  of  a  page  is  done  with  CSS,  we'll  start  there.  The  goal  is  to  use  CSS  with  the  DOM  and JavaScript   Chapter  15   together  to  dynami- cally  change  the  style  of  the  page,  often  called  Dynamic  HTML   DHTML .  For  a  com- plete  discussion  of  CSS   both  CSS1  and  CSS2 ,  see  http:  www.w3org Style CSS.  If  you  are  a  designer  and  already  have  a  good  CSS  foundation,  you  can  skip  this  chapter  and  go  directly  to  Chapter  15,  "The  W 3C   DOM  and JavaScript."   14.2  What Is a Style Sheet?   Webster's  Dictionary  defines  "style"  as  a  manner  of  doing  something  very  grandly;  ele- gant,  fashionable.  Style  sheets  make  HTML  pages  elegant  by  allowing  the  designer  to  create  definitions  to  describe  the  layout and  appearance  of the page.  This is  done  by ere-   528   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   to  each HI  element as it occurs within  the  document, which  could prove  quite  time  con- suming.  With  style  sheets  you  can  create  the  style  once  and  have  that  definition  apply  to  all  HI  elements  in  the  document.  If you  don't have  a lot of time  to  learn how to  create  style  sheets,  an  excellent  alternative  is  Macromedia's  Dreamweaver  MX.  For  more  on  authoring   http:  www.w3.0rg Style CSS edit0rs.   tools,   see   Style  sheets  are  called  cascading because  the  effects  of a  style  can  be  inherited  or  cas- caded  down  to  other  tags.  This gets back to  the  parent child  relationship we  have  talked  about  since  Chapter  1,  the  DOM.  If  a  style  has  been  defined  for  a  parent  tag,  any  tags  defined  within  that  style  may  inherit  that  style.  Suppose  a  style  has  been  defined  for  a     tag.  The  text within  these  tags  has  been  set  to  blue  and  the  font  is  set  to  a  sans  serif  font.  If within  the     tag,  another  set  of  tags  is  embedded,  such  as     or   ,  then  those  tags  will  inherit  the  blue  color  and  the  "sans  serif"  font.  The  style  has  cascaded  down  from  the  parent  to  the  child.  But  this  is  a  simplistic  definition  of  cascading.  The  rules  can  be  very  complex  and  involve  multiple  style  sheets  coming  from  external  sources  as  well  as  internal  sources.  And  even  though  a  browser  might  support  style  sheets, it might render  the  CSS information  differently.  For  example,  the DOCTYPE  dec- laration  used  at  the  start  of the  document  might  allow  a  document  to  be  displayed  with  nonstandard  rendering  rules   Quirks  mode   or  follow  the  W 3C   strict  standard,  and  older  browsers  may  have  a  limited  or  a  buggy  implementation  of the  CSS  standard.  For  more   https:  developer.mozilla.org en Common_CSS_Questions.   topic,   this   see   on   The  good  news  is  that  all  modern  browsers  support  CSS.   14.2.1  What Is a CSS-Enhanced Browser?  A  CSS-enhanced  browser  supports  CSS  and will  recognize  the  style  tag    as  a  con- tainer  for  a  style  sheet,  and  based  on  the  definition  of  the  style,  will  produce  the  docu- ment  accordingly.  Modern  browsers,  such  as  Internet  Explorer,  Mozilla  Firefox,  Netscape,  Opera,  and  Safari  support  CSS,  and  the  majority  of Web  users  are  running  a  CSS-enhanced  browser.  However, just because  a  browser  is  CSS  enhanced  doesn't mean  that  it  is  flawless  or  without  limitations.  And  just  because  a  browser  is  not  CSS  enhanced,  doesn't  mean  that  it  can't  see  the  content  of a  page.1   Traditionally,  browsers  have  silently ignored  unknown  tags,  so  if a  browser  does  not  support  CSS,  when  it  encounters  a     tag,  its  content will  be  treated  simply  as  part  of  the  document.  To  hide  the     tag  content,  one  method  is  to  enclose  it  within  HTML  comments  as  shown  here:    <!-- -->    p.largetext * *  { font-size: 200% ;  }   Example  from:  http:  www. thesitewizard.com css excludecss.shtml    14.2  What Is a Style Sheet?   529    See  the  section  "CSS  Program  Structure"  on  page  530  for  more  on  this.   If you  are  contending  with  an  older  version  of  your  browser,  it  might  just  be  a  good  time  to  upgrade  to  a  newer  model!   14.2.2  How Does a Style Sheet Work?  A  style  sheet  consists  of  the  style  rules  that  tell  your  browser  how  to  present  a  docu- ment.  The  rules  consist  of two  parts:  a  selector—the  HTML  element you  are  trying  to  stylize—and  the  declaration  block—the   properties  and  values  that  describe  the  style  for  the  selector.   FORMAT   selector { property: value }  declaration  block   J   EXAMPLE   HI { color : blue }   This  rule  sets  the  color  of the  H2  element  to  blue:   H2 { color: blue }   A  rule,  then,  consists  of  two  main  parts:  the  selector   e.g.,  H2   and  the  declaration   block   e.g.,  color:  blue .  Example  14.1  demonstrates  this  simple  rule.   EXAMPLE   14.1        First  Style  Sheet        hi { color: saddlebrown }  * rule *   h2 { color: darkblue  >               Welcome to my Stylin1  Page    What do you think?    1  2   3  4            530   Chapter 14       Introduction to CSS  Cascading Style Sheets  with JavaScript   Figure  14.1  Style sheet output in Firefox.   14.3  CSS Program Structure   14.3.1  Comments  CSS  comments,  like  C  language  comments,  are  enclosed  in  *  * .  They  are  the  textual  comments  that are ignored  by the  CSS parser when your style  is being interpreted,  and  are used  to  clarify what you  are  trying to  do.  They cannot be nested.    14.3  CSS Program Structure   531   14.3.2  Grouping  Grouping is used  to reduce  the  size  of style sheets.  For  example, you  can group selectors  in  comma-separated  lists,  if you  want  the  same  rule  to  apply  to  all  of  the  elements:  HI, H2, H3 { font-family: arial; color: blue }   Now  all  three  heading levels  will  contain  blue  text  in  an  Arial  font.   You  can  also  group  a  set  of  declarations  to  create  the  style  for  a  selector s .  The  fol- lowing rule  combines  a  number  of declarations  describing  the  font properties  for  an  HI  element:  HI {   font-weight: bold;  font-size:  12pt;  line-height:  14pt;  font-family: verdana;   And  you  can  group  the  values  for  a  particular  property  as  follows:   h2  {font:  bold 24pt arial}   EXAMPLE   14.2         Grouping  Properties        hl,h2,h3 { color: blue }  hi  {   font-weight: bold;  font-size: 30pt;  font-family: verdana;    * grouping selectors *    * grouping declarations *    font: bold 24pt arial    * grouping a property's values *    }  h2  {   }               Welcome to my Stylin1  Page    What do you think?    Groovy!            }   1  2   3   4  5  6    532   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   EXPLANATION   1   2   3   Three  selectors,  hi,  h2,  and  h3,  are  grouped  together.  The  declaration  block  en- closed  in  curly  braces  sets  the  color  property  to  blue.  Whenever  any  one  of the  hi,  h2,  or  h3  elements  is  used  in  the  document,  its  text will  be  blue.  The  declaration  block for  the  hi  selector  consists  of a group  of properties  and  val- ues  to  further  define  the  font  style  for  this  heading.  The font property,  in  this  example,  groups  the  font values  as  a list,  rather  than  cre- ating  individual  property value  pairs  as  done  on  line  2.   4  Now  the  hi  tag  is  tested  to  see  if the  style  was  applied,  and  it  is!  5  6   The  style  for  the  h2  tag  is  tested  and  it  has  been  applied.  The  only  style  set  for  the  h3  tag  is  a  blue  font,  and  that's  all  we  get,  as  shown  in  Figure  14.2.   3  Grouping  Properties  -  Microsoft  Internet  Explorer  provided  by  America  Online   J  File  Edit  View   Favorites   Tools  Help   J   Back  ^  4      f 2H   ®Search   [^Favorites   ^ H i s t o ry         Q   J Address   C:\sambar50\docs\ch 14\group.html   Welcome to  my Stylin'  Page  What  do  you  think?   Groovy!   Figure  14.2  Grouping  selectors a nd   declarations for h 7, h2,  a nd h3 HTML elements.   14.4  Common Style Sheet Properties   In  the  previous  examples, font-family  and  color  are  properties   also  called  attributes ,  and  assigning values  to  them  defines  the  style  of the  document.  Listed  in  Table  14.1  are  some  of the properties  commonly used in style sheets.  Many of these properties  are used  in  the  style  sheets  defined  throughout  this  chapter  and  later  as  properties  of  the  style  object  used  with JavaScript.  The  Web  Design  Group  provides  a  complete  listing  of  this  information   http:  www.htmlhelp.com reference css properties.html.   at    14.4  Common Style Sheet Properties   Table  14.1  Style Sheet Properties   533   Value Example   Tags  Affected   Property   Fonts   font   font-family   font-size   font-size-adjust   font-stretch   font-style   font-variant   font-weight   12pt 14pt sans-serif, 80% sans-serif,  x-large 110% arial, normal small-caps   serif, sans-serif, cursive, fantasy, monospace; or  All  any specific font typeface name may be used   12pt, larger,  150%,  1.5em   xx-small, x-small, small, medium, large, x-large,  All  xx-large, smaller, larger,  12pt, 25%   normal, wider, narrower, ultra-condensed,  extra-condensed,  condensed, semi-condensed,  semi-expanded, expanded, extra-expanded,  ultra-expanded   normal, italic,  oblique   normal, small-caps   normal, bold, bolder, lighter, 100, 200.. .900   Colors and Background   background-attachment   scroll, fixed   background-color   red, blue, F00,  transparent   background-image   URL  bay.gif , none   background-position   background-repeat   color   Text Alignment   letter-spacing   line-height   repeat, repeat-x  horizontally , repeat-y   vertically , no-repeat   red, green, F00,rgb 255,0,0    normal, O.lem   normal,  1.2,  1.2em,  120%   right top, top center, center, bottom, 100% 100%,  0% 0%, 50% 50%   Block-level and  replaced elements   All   All   All   All   All   All   All   All   All   All   All   All   All    534   Chapter 14       Introduction to CSS  Cascading Style Sheets  with JavaScript   Table  14.1  Style Sheet Properties  continued    Property   Value Example   Tags  Affected   Text Alignment  Continued    text-align   text-indent   vertical-align   left, right, center, justify   3em,  15%   baseline, sub, super, top, text-top, middle,  bottom,  text-bottom,  50%   Block-level elements   Inline elements   word-spacing   normal, 2em   Margins and Borders   border-bottom   border-bottom-width   thin, medium, thick, 2em     or   or      red, green, 0C0     or   or     border-left-width   thin, medium, thick, 3em     or   or      border-right-width   thin, medium, thick,  1cm   [none], dotted, dashed, solid, double, groove,  ridge [inset,outset] {1,4     border-top     or   or    border-top-width   thin, medium, thick, 3em   border-width   thin, medium, thick, ,5cm   border-color   border-left   border-right   border-style   clear   float   height   none, left, right, both  allows or disallows  floating elements on its sides    left, right, or none  wraps text around an  element, such as an image    12em, auto   Block-level and  replaced element   All   All   All   All   All   All   All   All   All   All   All   All   All   All   All    14.4  Common Style Sheet Properties   535   Table  14.1  Style Sheet Properties  continued    Property   Value Example   Tags  Affected   Margins and Borders  Continued    2em, 4em, 6em  right, bottom, left    margin-right   margin-top   padding   padding-bottom   padding-left   padding-right   padding-top   width   20em,45%   1cm,  20%   2em,  20%   ,25in,  20%   ,5cm, 35%   20px,  10%   All   All   All   All   All   All   All   12em, 30%, auto  initial width value    Block-level and  replaced element3   a.  A  replaced  element  has  set  or  calculated  dimensions,  such  as  img,  select,  textarea.   14.4.1  Units of Measurement  You can express the size of a given property in different units of measurement; for exam- ple,  a font size can be expressed in pixels or ems or points  the default is pixels .  Colors  can also be expressed in combinations of red, green,  and blue,  either by the name  of the  color,  or  its  hexadecimal  value.   Measurement is used in three categories:  absolute units, relative units, and proportional  units. For example, a point size measurement  e.g., 14pt  would be the actual size  absolute   of a particular font; a value  e.g., 5em   could be relative to the size of the current font; and a  color  e.g., 50%80%100%   could represent red, green, and blue as a percentage value of the  original color. Relative sizes larger and smaller  relative to the parent font  can be used when  defining a font.  These sizes  are  determined by browsers or  other user  agents.2 Tables  14.2  and  14.3 introduce the types of measurements that are often used in style sheets.   Table  14.2  Font Size Units   Absolute  Font Size  Unit   inches   in    centimeters  cm     536   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   Table  14.2  Font Size  Units  continued    millimeters   mm    points   pt   l 72th of an inch   picas  pc   12 points   Table  14.3  User Agent  Determined  Font  Sizes   CSS Absolute Sizes   HTML Font Size   xx-small   x-small   small   medium   large   x-large   xx-large   1   2   3   4   5   6   7   Here  are  some  examples:     font-size:  lOpt     top: 2Opx     margin: lern     margin-right:  20%     font-size:  xx-large     font-size:  150%   14.4.2  Working with Colors  What is  style  without  color?  Tables  14.4  and  14.5  give  information  for  managing  color.  You  can  use  these  properties  to  create  color  for  the  document's  background  and  fonts,  margins,  borders,  and  more.  The  colors  can  be  expressed with  real  names   e.g.,  red,  blue,  yellow,  magenta   or   e.g.,  FF0000,  0000Ff,  =111100. =11001 I .   their  corresponding  hexadecimal  values   Table  14.4  Color  Properties    14.4  Common  Style Sheet Properties   537   Table  14.5  C o m m on   Color  Names  a nd   Hexadecimal  Values  Color  Names   As  m e n t i o n e d,   t h e re   are  16  color  n a m e s.   The  chart  below  shows  these  n a m es   and  their  corresponding  h e x a d e c i m al   value.   C o l or    C o l or   N a me   H e x a d e c i m al   V a l ue    C o l or    C o l or   N a me   H e x a d e c i m al   V a l ue   H  H  H   H   H  H   Black   Silver   Gray   White   Maroon   Red   Purple   Fushia    0 0 0 0 00    c 0 c 0 c0    8 0 8 0 80  rrrrrr    8 0 0 0 00  ffoooo    8 0 0 0 80  ffooff   Example  of  Color  Usage   H  H   H   H  H   Green   Lime   Olive   Yellow   Navy   Blue   Teal   Aqua    0 0 8 0 00  ooffoo    8 0 8 0 00  ffffoo    0 0 0 0 80    0 0 0 0 ff    0 0 8 0 80    0 0 f f ff        i i i i ai   Ht  t  Kit  t   : : : ":    :       :   Color Depth.  Sometimes  colors  don't  look  as  crisp  and  bright  as  you  would  expect;  pink  might  look  like  red,  or  some  of  the  colors  in  a  field  of  flowers  might  be  pale.  In  Chapter  10,  "It's  the  BOM!  Browser  Objects,"  we  discussed  the  screen  object.  It  has  a  property  called  colorDepth  that  will  tell  you  how  many  distinct  colors   bits  per  pixel   a  computer  can  handle.  For  example,  a  color-bit  depth  of  4  will  display  16  colors  and  a  color-bit  depth  of 24,  represented  as  2  to  the  24th  power,  will  provide  16.7  million  col- ors.  How many  colors  can  your  computer  display?   There  are  a number  of color  charts  available  on  the Web  that provide Web-safe  color   palettes.3   See  www.lynda.com,www.paletteman.com,   or  www.visibone.com   Hexadecimal Codes.  These  are  the  codes  that  define  colors.  They  are  groups  of  three  hexadecimal   base  16   numbers.  The  first  number  is  red,  the  second  green,  and  the  third  blue.  Each  hexadecimal  number  is  an  RGB  triplet.  00  is  the  lowest hue,  and  FF  is  the  highest.  For  example,  red  is  ffOOOO,  blue  is  OOOOff,  green  is  OOffOO,  and  purple  is  990099.  For  a  complete  list  of  CSS  colors,  their  names,  hex  values,  shades,  and  color  mixer,  go  sup- ported  by  all  major  browsers.   http:  www.w3schools.com css css_colornames.asp.  These   colors   are   to    538   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   EXAMPLE   14.3        Colors       body {   font-family:cursive;  background-color: blue; }   hi {color: FFFF33;}   * yellow *   p { color: white ;  }              l   2  3   4  5  6       Welcome to my Stylin1  Page    This paragraph is all white text on a blue background.    Do you like it? I think it has potential.              EXPLANATION   l  A  style  is  defined  for  the  background  of the  document.  It will  be  blue.  2  The  text  for  all     tags  will  be  yellow   FFFF33  is  yellow .  3  4  5  6  Any  text  enclosed  in        will  be white  against a  blue  body.  The  font was  also   Paragraphs  will  have  white  text.  The  body  color  of the  page  was  defined  in  the  CSS  style  sheet  to  be  blue.  The  heading  level     is  displayed  in  its  yellow  style.   set  by  CSS.  See  Figure  14.3  for  output.    14.4  Common Style Sheet Properties   539   14.4.3  Working with Fonts  The  presentation  of a  document would  be  quite  boring if you  only had  one  font  face  and  size available.  CSS lets you specify a style for the fonts in a document in a variety of ways—  by family, size, color, and others  see Table  14.6 . There are a huge number of fonts to pick  from,  although it's  a good  idea to specify fonts  that users  are likely to have installed.  Like  the HTML   tag, CSS lets you specify several font families  see Table  14.7 , and will go  from left to right, selecting the one available on your computer.  See Figure  14.5  to sample  different font styles  for your  operating system.   Table  14.6  Font Properties   Value Example   12pt 14pt sans-serif, 80% sans-serif, x-large 110% arial,  normal small-caps   serif, sans-serif, cursive, fantasy, monospace; or any  specific font family typeface name may be used   12pt, larger,  150%,  1.5em   normal, italic, oblique   normal, small-caps   normal, bold, bolder, lighter,  100, 200...900   Elements  Affected   All   All   All   All   All   All   Table  14.7  Font Families   Family  Names   Specific  Family  Typeface  Names   Times,  Palatino,  B o o k m an   Arial,  Helvetica,  GillSans   C o u r i e r,   0 C R B,  WALLSTREET   ZapfCfiancery,  uWuitöS  Sculpt,  Q&memte  Celtic,   iilarriaje   lmD3Ct,   Property   font   font-fami ly   font-size   font-style   font-variant   font-weight   Serif   Sans serif   Monospace   Cursive   Fantasy    540   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE    14.4        Fonts       lucida,  verdana,  h e l v e t i c a;    }   font-family:   body { background-color: darkblue;  }  hi { color: yellow;  font-size:x-large;  h2  { color:lightgreen;  f o n t - s i z e : l a r g e;  h3  { color:lightblue;  font-size:medium;  p {  color:white;  f o n t - s i z e: 22pt;   f o n t - f a m i l y : h e l v e t i c a;    f o n t - f a m i l y : c o u r i e r;    }   }   f o n t - s t y l e:   i t a l i c;  f o n t - f a m i l y:   a r i a l;  f o n t - v a r i a n t : s m a l l - c a p s;    }                  My name is Papa Bear    My name is Mama Bear    and I'm the Baby Bear    0nce upon a time,  yaddy yaddy yadda...            E X P L A N A T I ON   The  hi  element will  have yellow  text  and  an  extra-large  font  size  from  the  Lucida  family  of fonts.  If that  font  is  not  available  in  this  browser,  Verdana will  be  used,  and  if  not  Verdana,  then  Helvetica.  The  h2  element will  have  a  light  green,  large,  Courier  font.  The  h3  element will  have  a  light  blue,  medium,  Helvetica  font.  Paragraphs  will  have  white  text,  with  an  italic,  Arial  font  size  of  22  points,  all  in  small  caps.  The     tag  is  displayed  in  its  big  style.  See  Figure  14.4.   l   2  3   4   5   l   2  3  4   5    14.4  Common Style Sheet Properties   541      Fonts  - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help   Figure  14.4  Changing fonts.   C  !  p ! '  '  ' '.cüdestyle.a'gi'  _"i".      -i.-i il,ù ¡1h,-...-, ,    File  Ectt  Vcw  Favortcs  Tools  Hdp   j[[i§B[g >>   W  Fontes      Code ïvle : C55 font xnHer wnd ïurver of the most...    I  *   A OL   ^ r a d io     * j W    Art:!  Station    «S?  LlïtenHiw   Fresh  40   ®SAdJtcÜt.   ^  clseac  Rock.   ^  Rade   code style   Vital  source stnee 2 0 ÛG   CSS font  stacks,  media  style  sheets  &  web  standards   CSS font sampler and survey   Home  page     Bookmark & Share   ¿{Google   "  ^ R e d d il   0  News vine  s lash dot  B  Facebook   '  O  More...  171    Get Ihe AddTf is Tcolbi  HIS  d i Ö f r ..   The  c o de   s t y le   f o nt   s a m p l er   is   a  g u i de   to   t he   m o st   c o m m on   f o n ts   on  W i n d o w s,   Mac  and  Linux,  Select  y o ur   p l a t f o rm   to   c o n t r i b u te   to   t he   f o nt  s u r v e y,   or  see  I he  r e s u l ts   pages  for  CSS  f o nt   samples  and  images.  Use  t he  f" * it   s a m p l er   to   p i ck   t he   r i g ht   f o nt   s t y le   codes  f or   y o ur   s i t e.   ode Style   Delicious  Tectwoiati  DIQO  SlumhieUpan  F  ark  Favorites   fonts are  specified  using  a  comma  arated  font  family  list.  If tlie  first  named  t  is  not  installed,  the  font  style  rule  checks  next  in  line. Windows  fonts,  Mac  and  Linux  it  lists  vary,  so  font  styles  need  to  be  nbined  in  order  of preference.       ^ i.   start  galIEry  oF care Web  Font  Family  declarations  for the  Fcrnt  stack  buildei  W i n d o ws   Font  survey  and  font  survey  lesuits  *  Mac  Font  survey  and  font  survey  re suits  ^  Linux  font  survey  and  font  survey  results  Ö  Combined  survey  results  for  all  p l a t f o r ms  classification  of the  most  common  fonts  by  generic  f o nt   f a m i l y:  *  Serif  fonts-  survey  results    542   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   14.4.4  Working with Text   If you  want  to  make  a  business  card,  how  do  you  put  extra  space  between  each  of the  letters  of your  company name?  If you're  writing  a  science  term  paper,  how  do  you  deal  with  exponents,  equations,  or  subscripts?  And  how  do  you  make  it  double-spaced?  If  you're  writing  a  cool  poem  and  want your  text  in  the  shape  of an  hourglass  or  a  circle  to  give  it  visual  appeal,  or  you  just  want  to  emphasize  certain  words  to  make  your  point  for  a  presentation,  then  what  to  do?  The  CSS  controls  listed  in  Table  14.8  could  be  your  answer.   Table  14.8  Text Alignment  Properties   Property   Value Example   letter-spacing   normal,  O.lem   line-height   text-align   normal,  1.2,  1.2em,  120%   left, right,  center, justify   text-decoration   underline,  overline,  line-through, blink   text-indent   3em,  15%   text-transform   capitalize, uppercase, lowercase,  none   vertical-align   baseline, sub, super,  top, text-top, middle,  bottom,  text-bottom,  50%   Inline  elements   word-spacing   normal,  2em   Elements  Affected   All   All   All   All   All   All   Block-level  elements   E X A M P LE    1 4 .5        First  Style  Sheet        1  2   title{   word-spacing: lOpx;  letter-spacing: 4px;  text-decoration: underline;  text-align: center;  font-size: 22pt ;  font-family:arial;    14.4  Common  Style Sheet Properties   543   E X A M P LE    p   {   14.5   CONTINUED   line-height: 2;  text-indent:  6%;  font-family:arial;  font-size:18; }   }              4  5   6   1   2   4    The Color Palette    The world is a colorful place. Web browsers display  millions of those colors every day to make the pages seem  real and interesting.  Browser colors are displayed in  combinations of red,  green,  and blue,  called RGB. This is a  system of indexing colors by assigning values of 0 to 255 in  each of the three colors,  ranging from no saturation   0   to  full saturation   255 .  Black has a saturation of 0 and  white has a saturation of 255.  In HTML documents these  colors are represented as six hexadecimal values,  preceded  by a  sign.  White is FFFFFF and black is 000000.      Although there are millions of different combinations of color,  it is best when working with Web pages to use what are  called Web-safe  colors.            E X P L A N A T I ON   title is  called  an ID  selector,  a way in the style sheet that we  can allow any selector  to  use  a style.  In  this  example,  the  title  of the  page  is  going  to  be  distinct  from  the  text in  the rest of the  page.  For  example,  if the     tag is used,  it can  identify itself  with  this  ID  selector  to  produce  the  text  style  described  in  the  declaration  block   see  line  4 .  If  the  ID  is  not  used,  the  rest  of  the  paragraphs  will  display  text  as  defined  by  the  rule  in  line  3.  More  discussion  on  ID  selectors  is  presented  in  the  section  "The  ID  Selector  and  the  ID  Attribute"  on  page  564.  Text  controls  are  defined  in  the  rule.  The  text  will  be  centered,  underlined,  with  a  22-point,  bold  Arial  font.  The  spacing between  each  letter  and  each  word  is  de- fined  in  pixels.   3  When  the     tag is used,  a line  height  of 2 will produce  double-spaced  lines.  The   first line  of each  paragraph  will  be  indented  by  6%  from  the  left  margin.  This  paragraph  is  identifying itself with  the  title  ID.  This  means  that  for  this  para- graph,  the  style  will  follow  the  rule  defined  after  line  1.    544   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   Fiist  Style  Sheet  -  Microsoft  Internet  Explorer   File   Edit   View   Favorites   Jools   Help   Links  "  Address   '  &  ®   t£J   _ *j   Favorites  C:\A-work\Quiglev\originals\15.5. html   a Search   ¿J History   J   S   -   si   7   Wm   The  Color  Palette   The world is a colorful place. Web browsers display millions of those colors every day to   make the pages seem real and Interesting. Browser colors are displayed In combinations of red,  green, and blue, called RGB. This Is a system of indexing colors by assigning values of 0 to  255 in each of the three colors, ranging from no saturation  0  to full saturation  255 . Black has  a saturation of 0 and white has a saturation of 255. In HTML documents these colors are  represented as six hexadecimal values, preceded by a  sign. White is FFFFFF and black is   000000.   Although there are millions of different combinations of color, It is best when working with   Web pages to use what are called Web-safe colors.   ®  Doi  Figure  14.6  A report with a  centered  title,  double-spaced  lines,  a nd   indented  paragraphs.   y  My  Computer   14.4.5  Working with Backgrounds and Images  The same way that wallpaper in  a guest room  can create a sense of warmth or  calm, back- ground  images  can  add  decoration  and  design  to  an  otherwise  blah  page.  CSS  gives you  a  number  of ways  to  control  the  appearance  of background  images.  Refer  to  Table  14.9.   Table  14.9   Image  a nd   Background  Properties   Property   Value Example   background-attachment   scroll,  fixed   background-image   URL   bay.gif ,  none   Elements  Affected   All   All   background-position   right top, top center, center, bottom, 100%  i n n oi    n o    n o     « ; n oi    i n oz   Block-level and    14.4  Common  Style Sheet Properties   545   E X A M P LE    14.6        Backgrounds        1   body {   background-image:  url 1 Moonbeams.jpeg1 ;  background-repeat:  no-repeat;  background-attachment:  fixed  background-color: ttccccff;  background-position:center  80px;   color:white;  font-family:cursive;  font-variant:small-caps;    Looking at Mooribeams     2   }  h2 {   }       3  4                 E X P L A N A T I ON   1   2  3  4   CSS  rules  are  defined  for  an  HTML  selector,  the  body  element.  The  declarations  define  the  background  style  of an  image  called  Moonbeams.jpg.  The HTML selector is an h2  element styled to have a white, cursive, font in small caps.  The  body  of the  document  reflects  the  CSS  rules  laid  out  on  line  1.  The  h2  tag  reflects  the  font style  set  by  CSS.  See  Figure  14.7.    546   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE    14.7        Backgrounds        body {background-color:"pink"  ;  background-image:  url greenballoon.gif ;  repeat-x };  hi  {font-size:  42pt;text-indent:  25%;   color:red; margin-top:  14%;  font-family:fantasy;}               Happy  Birthday!!    Happy  Birthday!!            E X P L A N A T I ON   1  2   3  4   5  6   The  rule  for  the  body  element  is  to  give  it  a  pink background  color.  The  background  image  will  come  from  a  file  called  greenballoon.gif,  in  the  current  directory.  The  URL  specifies  the  location  of the  image.  The  image  will  repeat  itself horizontally  across  the  screen.  The  rule  for  the  hi  element is  a  red  42-point  fantasy  font,  indented  25%  from  the  left  of the  block,  where  the  margin  is  14%  from  the  top.  The  body  of the  document  reflects  the  style  that was  set  for  it  in  line  1.  The     tag  reflects  the  rule  set  for  it  in  line  4.  The  result  shown  in  Figure  14.8.   j A P PY   E f l f l T f l P A V"   H A P PY    B i r t w i p a v !!    14.4  Common Style Sheet Properties   547   14.4.6  Working with Margins and Borders   Containers.  When you  look at your  document,  it  is  composed  of a  number  of con- tainers.  The   tag is a container and it may contain a heading, a paragraph, a table,  or  other  elements.  Each  of  these  elements  also  can  be  thought  of  as  a  container.  The     tag  is  another  special  type  of  container  used  to  define  logical  divisions  with  the  content  of a  page.  You  can  use  the     tag  to  center  a  block of content  or  position  a  content block in  a specific place  on  the page.   Margins,  Padding,  a nd   Borders.  Each  container  has  an  outer  margin,  and  the  margin  can  have  some  padding   space  between  it  and  the next container .  The  padding  is like the  CELLPADDING attribute of a table cell.  On the inside of the padding is a bor- der that separates the container from its contents.  The border is normally invisible.  You  can  change  the  margin,  create  colorful  borders,  or  increase  or  decrease  the  padding,  to  give  the page  more  style.  See Figure  14.9  for  a graphic representation,  and Table  14.10  for  a list  of margin  and border properties.  Different browsers  might handle  the  borders  differently.  Margins  and  borders will behave better if enclosed within     tags.   margin   p a d d i ng   border   content   Figure  14.9  How an element is contained.   Table  14.10  Margin and  Border  Properties   Property   Value Example   border-bottom     or   or     border-bottom-width   thin, medium,  thick,  2em   Elements  Affected   All   All    548   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   Table  14.10  Margin  a nd   Border  Properties   continued    Property   Value Example   border-left-width   thin, medium,  thick,  3em   border-right      or    or     border-right-width   thin, medium,  thick,  1cm   border-style   [none], dotted, dashed,  solid, double,  groove,  ridge  [  inset,outset  ]{1,4    border-top      or    or     border-top-width   thin, medium,  thick,  3em   thin, medium,  thick,  ,5cm   5em,  3em,  2em,  lem   top,  right, bottom, left    margin-bottom   lOOpx,  50%   border-width   margin   margin-left   margin-right   margin-top   padding   padding-bottom   padding-left   padding-right   padding-top   ,5in,  40%   20em,  45%   1cm,  20%   2em,  20%   ,25in,  20%   ,5cm,  35%   20px,  10%   2em, 4em,  6em   right, bottom, left    Elements  Affected   All   All   All   All   All   All   All   All   All   All   All   All   All   All   All   All   All   E X A M P LE    14.8        Margins  and Borders        body { margin-top: 1cm; margin-left: 2cm ;   margin-bottom: 1cm; margin-right: 2cm;   b o r d e r - w i d th   s   t h i c ks   1  2   3    14.4  Common  Style Sheet Properties   549   E X A M P LE    14.8   CONTINUED   hl{   * grouping properties *    font-weight: bold;  font-size: 30pt;  font-family: verdana;   4   }  h2  {   * grouping a property's values *    border-style:dotted;  border-color:purple;  font:  bold 24pt arial   }               Crossing the Border!    Welcome!    Nice  country.            E X P L A N A T I ON   1  2   The  margins  and  borders  are  defined  for  the  body  of this  document.  The margin bottom is  1  centimeter up  from  the bottom  of the  document and  2  cen- timeters  in  from  the left.  There will  be  more whitespace  around  the  headings,  para- graphs,  and  other  elements within  the  body because  of the  increased  margin  sizes.   3  A  thick,  multicolored  border  is  placed  on  the  inside  of the  margin.  The  border  style  for  h2  elements  is  purple  dots.  See  Figure  14.10.  4   J  Margins  and  Borders  -  Opera     File   Edit   View   Bookmarks   Widgets   Tools   Help   j j ^ ^ J ^P   Q  Margins  and  Borders   +   Q          0   file :  localhost C: war       Home   Index     Contents  Search  Glossary  Help  First  Previous  Next  Last  Up  Copyright  Author   K F W,    its?   Crossing  the  Border!   jWelcome!    550   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   14.5  Types of Style Sheets   There  are  several  ways  to  define  style  sheets  within  a  document:   1.  Embedded—The   style  is  defined  within  the     tags  for  the  HTML  docu-  ment.   2.  Inline—The   style  is  defined  for  a  specific  HTML  element.  3.  External—The   style  is  defined  in  an  external  file.   14.5.1  The Embedded Style Sheet and the   Tag  A  style  sheet  that  is  created  with  the  HTML     tags  right  in  the  current  doc- ument  is  called  an  embedded  style  sheet.   The    Tag.  The      tags  were  introduced  into  HTML  to  allow  the  style  sheets  to  be  inserted  right  into  an  HTML  document.  They  are  used  to  create  a  set  of  rules  to  define  the  style  of  an  HTML  element s .  The     tags  are  placed  between  the     tags  in  the  document,  as  shown  here:   CSS  Example                 hi { color: blue ; }   The type Attribute.   Because  it  is  possible  to  have  more  than  one  style  sheet  lan- guage,  you  can  tell  the  browser what  type  of style  sheet you  are  using with  the  type  attri- bute  of the  HTML     tag.  When  the  browser  loads  the  page,  it will  ignore  the  style  sheet  if it  doesn't  recognize  the  language;  otherwise  it will  read  the  style  sheet.   The  following  example  specifies  that  the  type  is  text ess;  that  is,  text  and  CSS.   F O R M AT       Example:        14.5  Types of Style Sheets   E X A M P LE    14.9       551    Cascading  Style  Sheets        <  !  --  body { background-color:  lightblue;  }  p { background:yellow;  text-indent:5%;  margin-left:  20%;  margin-right: 2 0%;  border-width:lOpx;  border-style:groove;  padding:  15px;  font-family:  times,arial;  font-size:150%;  font-weight:900 }   text-align:  center;  background:blue;  border-width:5px;  border-style:solid;  border-color:black;  margin-left:2 0%;margin-right:2 0%;  font-family:courier,  arial;  font-weight:900;  color: white; }   h2,h3 { font-size:24;  }  em { color: green;font-weight: bold }   4   hi, h2, h3 {   -->              1  2  3   5  6  7   8  9   10  11    Stylin1  Web  Page    HTML by itself doesn't give you much other than structure in  a page and there's no guarantee that every browser out there  will render the tags in  the same way.  So along came style  sheets.  Style sheets enhance HTML as a word processor enhances  plain text.   But...  no guarantees what a browser might do  with a style sheet,  any more than what a stylist might do to  your hair,  but we can hope for the best.   An H2  Element    An H3  Element    This is not a  designer's dream style ,  but it  illustrates the power.         552   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X P L A N A T I ON   1   The  HTML     tag  belongs  within  the     tags.  The  is  the  start  of  an  embedded  CSS.   2  A  rule  is  defined  for  the  HTML  body  element.  The  background  color  of the  docu-  ment will  be  light  blue.   3  A rule is  defined  for  the HTML p   paragraph   element.  The left and right margins  are set at 20%, meaning that they will be moved inward  20%  from  their respective  edges. They will be surrounded by a grooved border, with the text given a  15-pixel  size  padding.  The  font  is  Times  or  Arial   whichever  works  on  your  browser ,  point size  150%  bigger  than its  default,  and weight  900  is  the  boldest of the  bold.  4  A rule  is  defined  for  a group  of selectors   heading levels  hi,  h2,  and  h3 .  They will  be  centered  on  the  page,  and  the  text will  be white  against  a  blue  bordered  back- ground  in  a  Courier  or Arial  font.  The  rule  for  the     and     tags  sets  the  font size  to  24 points.   5  6  A  rule  is  defined  for  an  em  element.  Text will  be  green  and  bold.  7  8  As shown in  the  output   see Figure  14.11 ,  the  heading level  is  displayed  accord-  This  marks  the  end  of the  HTML  header  that  encloses  the  style  sheet.   9   ing  to  the  style  defined  in  the  style  sheet,  line  4.  This paragraph is  displayed  according to  the rule set in  the style sheet,  line 3.  No- tice  how both  the  left and  right margins  have  moved  toward  the  center.   10  The  heading level  is  displayed  according  to  the  rule  set in  the  style  sheet,  lines  4   and  5,  and  the  first paragraph  is  indented.   11  The     tag is  embedded within  the     tag.  It inherits  from  the     tag  every- thing but  the  font  color  and weight.  These  paragraph properties were  overridden  in  the  style  sheet  defined  on  line  6  for  the  em  element.    14.5  Types of Style Sheets   553   1   Indent   ^^   3 t y l  i n'   W eb   P a ge   ^^  HTML  by itself doesn't give you  much  other thiiii structure in a page ami  there's no  guarantee  that  every browser out there will   '  render  the  L : i gs  in   he same  way.  So  along   came  style sheets.  Style sheets  enhance  HTML as <i word processor enhances plain  te^t.   Left  Margin   ^^   Right  Right  Margin  Margin   Bui...  no guarantees what a browser   might do with a  style sheet,  any more than  what a stylist might  ilo lo your hair,  but we  can  hope for  the  best.   An    E l e m e nt   An   h:-;  K  1  <;rri !ii   1.   1   This  is  not  a  designer's dream style,  but  it   illustrates  the power.   Figure  14.11  HTM L a nd   CSS—An e m b e d d ed   style sheet.   14.5.2  The Inline Style and the   Attribute  Inline  style  sheets  are  also  embedded  within  an  HTML  document,  but  are  assigned  as  an  attribute  of the     tag  in  the  body  of  the  document  and  are  useful  for  overriding  an  already  existing style  for  a particular  element in  a linked style sheet.  On  the  negative  side,  they have  to be redefined  for  any element that requires  that style,  element by element.  For  example, if the  hi  element has been  defined  to be blue  and you want to  temporarily change  it to  red, you  can  define  the  style  as  an  attribute  of the style  tag for  that element:    This is red text    E X A M P LE    14.10        Inline  Style  Sheets     554   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE     CONTINUED    1 4 . 10              3   4   5   <hl  style="color:darkred;   text-alignreenter;  text-decoration:underline;">Inline  Stylin1   <p  style="color:black;  background:white;  font-family:sans-serif;font-size:large">   This paragraph uses an inline style.  As soon as another  paragraph is started,  the style will revert back to its  default.    This paragraph has reverted back to its default style,  and so has the following heading.     Default  heading            E X P L A N A T I ON   l  A  CSS  starts  here  in  the  head  of the  document.  2  3   The  background  color  is set to  orange  and  the  color  of the  font is  set  to  dark blue.  This  hi  uses  an  inline  style,  an  attribute  of the     tag  and  effective  for  this head- ing  only.  The  color  will  be  red,  the  text  centered  and  underlined.  This  is  an  inline  style  for  the  paragraph  tag.  It  is  an  attribute  of the     tag  and  is  only  good  for  this  paragraph.  The  text  of  the  paragraph  will  be  black,  the  back- ground  color  of the  paragraph will  be  white,  and  the  font  family,  sans  serif,  large.  The  next  time  a     tag is  used,  the  style  will  revert  to  its  former  style.  This  paragraph  has  reverted  to  its  former  style.  See  Figure  14.12.   5   4   Inline  StyliiT   This paragraph  uses an Inline style. As soon as another paragraph is started,  the style will revert back to its default.   Tins paragrzqoh haf reverted back, to its default style, and so Kas the tvLowirgheadr-g   Default  heading    14.6  The External Type with a  Link   555   14.6  The External Type with a  Link   14.6.1  The   Tag   In  Chapter  1,  we  talked  about  the  three  layers  of a Web  page:  HTML XHTML,  CSS,  and  JavaScript.  The  CSS  layer  can  be  separated  from  the  HTML  document  by  placing  style  sheets  in  external  files.  In  fact,  external  style  sheets  are  the  most  powerful  type  if you  want  the  style  to  affect more  than  one  page;  in  fact,  you  can  use  the  same  style  for  hun- dreds,  thousands,  or  millions  of  pages.  The  file  name  for  the  external  style  sheet  has  a  .ess  extension,  just  as  the  HTML  file  has  an  .html  or  .htm  extension,  and  a JavaScript  external  file  has  a  Js  extension.   To  link  the  external  file  to  the  existing  HTML  file,  a  link is  created  as  shown  here:       The  following  examples  demonstrate  the  use  of external  style  sheets.  Example  14.11  is  the  HTML  file  containing  a  link  to  the  external  file  and  Example  14.12  is  the  .ess  file.  It  contains  the  style  sheet,  but  notice  it  does  not  contain     tags.   E X A M P LE    1 4 . 11       I   2  3                  E X P L A N A T I ON    External  Style  Sheets    <link rel=stylesheet  type="text ess"  hre£="extern.ess"  media="all">        External Stylin 1     Paragraph Style Below    The style defined for this paragraph is  found in an external   CSS document.  The filename ends with  .css .  Now  we can apply this style to as many pages as we want to.     An H2  Element    An H3  Element    This is not a  designer1s dream style ,  but it   illustrates the power.  Don't you think so?    l  The  link  tag  is  opened  within  the     tags  of your  HTML  document.  The  link  tag has  a  rel  attribute  that is  assigned  stylesheet.  This  tells  the  browser  that  the  link    556   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X P L A N A T I ON    CONTINUED    2  3   The     tag  ends  here.  In  the  body  of the  document,  each  of the  HTML  tags  will  be  affected  by  the  style  defined  in  the  external  CSS  file.  See  Figure  14.13  for  output.   E X A M P LE    14.12    The external extern.ess file   1  body { background-color: pink;  }  2  p {   margin-left:2 0% ;  margin-right:2 0% ;  font-family:  sans-serif;  font-size: 14   hi, h2, h3 { text-align: center;   font-family:  sans-serif;  color: darkblue   4  em { color: green;   font-weight: bold   3  }   }   }   E X P L A N A T I ON   1   2   3   4   This  is  the  external  CSS  file  that will  be  linked  to  the  file  in Example  14.12.  Using  an  external  CSS  file  keeps  the  main  file  size  smaller  and  allows  the  style  sheet  to  be  shared  by multiple  files.  First use  the     tag,  then  the  rel  attribute  tells  the  browser  that this is  a link to  a style  sheet,  the  h ref specifies  the  location  of the  CSS  file,  and  type  specifies  the  type  of information  that will  be  linked   i.e.,  text  in  this  example .  You  may  also  specify  a  media  type.  If you  add  media="all"  then  all  me- dia  types  will  be  included.  The  paragraph     style is  set  to  have  a margin  in  20%  from  the  left  and  right,  the  text  in  size  14,  and  font  family  sans  serif.  The  heading  levels  1 , 2,   and  3  styles  are  set  to  be  centered  with  a  dark  blue  font,  from  the  sans  serif family.  The     style  will  be  a  bold,  green  font.    14.6  The External Type with a  Link   557   >  External Style Sheets  - Mozilla  Firefox  Tools   Bookniarks   History   Vie*'.1   Edit   I  File   Help   C   u Lf    iZl   file :   C: Documents  and  Settings    f   -        oogle   interna! Style Sheets   U l  i®   , P   r   External  Stvlin'  Paragraph  Style  Below   The  style  defined  for this  paragraph  is  fGund  In  an  external  CSS  document  Tne  filename  ends  with  .ess.  Now we  can  apply this  style  to  as  many  pages-as  we  want  to   An  H2  Element   An  H3  Element   This  is  not  a  designer's dream style,  but  it  illustrates  the  power.  Don't you  think  so?   Done   Figure  14.13  External  style sheets.   Importing with @import   14.6.2  You  can  also  import  CSS  files with  the @import rule.  This  rule  allows you  to  import  one  external  CSS  file  into  another  by  adding  the  @import  rule  in  other  external  CSS  files.  The  format  for  doing  this  is:   F O R M AT   E X A M P LE   @import url  externalfile.ess ;       @import  url http:  www.mystyles.com style.ess ;  @import  url  stylesheets .ess ;  hi { color: blue }        558   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   Cascading Order.  You  can  import as many files  as you want,  but keep  in mind  that  when  multiple  style  sheets  are  used,  the  style  sheets  may  conflict  over  which  selector  has  control.  There  must  be  rules  that  determine  what  style  sheet's  rule  has  precedence.  The  order  that  determines  the  outcome  of  the  type  of  conflict  is  called  the  cascading  order.  A  full  discussion  can  be  found  at  http:  www.w3.org TR CSS2 cascade.htmlcascad- ing-order.   14.7  Creating  a Style Class   Rather  than  globally  defining  a  style  for  an  element,  you  can  customize  the  style  by  defining a class.  The  class  style  can be  applied  to  individual  tags when needed.  The  class  name,  called  the  class  selector,  is  preceded  by  a  period  and  followed  by  the  declaration  enclosed  in  curly  braces.   F O R M AT   E X A M P LE   .classname { style rules;  }   .header { font-family: verdana, helvetica ;  }   Once  you  have  defined  a  class,  it  can  be  used  on  any  of  the  HTML  elements  in  the  body of the  document  as  long  as  that  element understands  the  style you  have  applied  to  it.  To  apply the class, you use  the  class attribute.  The  class  attribute is  assigned the name  of  the  class;  for  example,  for  the     tag,  you  would  stipulate     where  name  is  the  name  of  the  class.   E X A M P LE    14.13   1  2  3   4  5            CSS Class Name    p { margin-right:  30%;font-family: arial;   font-size:  16pt;  color:forestgreen; }   .bigfont { font-size: x-large; color:darkblue;  font-style:bold;}  .teenyfont { font-size:small;   font-style:  italic;color:black;}        14.7  Creating a  Style Class   559   E X A M P LE   14.13   CONTINUED        6   7  8   9  10    The text in this paragraph is green and the point size  is 16.  The font family is  arial .   <p class^'bigfont1^ This paragraph has a bigger font and is  dark blue in color.    The font style is specified as a class called   .bigfont .    Testing the Class on an HI Element    Is this a small  font?"    Let1s start a new paragraph.  This is green with a font  size of 16. What style is in effect here?            E X P L A N A T I ON   The  style  is  defined  in  the     of  the  document.  The  CSS  starts  here.   L  2  3  A  rule  is  defined  for  the  paragraph   p  selector .  All  paragraphs  will  have  a  right  margin,  30%  in  from  both  left  and  right.  The Arial  font will  be  12  point and  forest  green.   4  A  class  selector  called  .bigfont  is  defined.  Class  names  start  with  a  period.  When   5   used  on  an  HTML  element,  the  font will  be  extra  large,  dark blue,  and  bold.  The  class  selector  called  .teenyfont  is  defined.  All  HTML  elements  that  use  this  class  will  have  a  small,  italic,  black  font.   6  The  paragraph  is  styled  according  to  the  rule  on  line  3.  7   This  paragraph  is  assigned  the  bigfont  class.  The  text  will  be  in  the  style  defined  for  this  class  on  line  4.   8  This  paragraph  reverts  to  the  style  rule  on  line  3.  9  10  The     tag  is  using  the  teenyfont  class  defined  on  line  5.  See  Figure  14.14.   The     tag  is  using  the  bigfont  class  defined  on  line  4.    560   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   CSS Class  Name  - Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   ^   [ Ei    file:   C: Documents%20and%205etting:    T     >        Windows  Marketplace   ^  AOL  Mail   1629       estingth...   _j  Testingth...      HTML  Lati...   Q  Testing  th...   _i  C55  Class  ..   The  text  in  this  paragraph  is  green  and  the  point  size  is  16.  The  font  family  is arial.   This  paragraph  has  a  bigger font and  is dark blue in color.   The  previous  font  style  is  specified  as  a  class  called  .bigfont.   Testing  the  Class  on  an  HI  Element   Is  this  a  small  font?"   Let's  start  a  new  paragraph.  This  is  green  with  a  font  size  of  16.  What  style  is  in  effect  here?   Figure  14.14  Testing the  CSS classes.   14.7.1  Styling a Simple Table with Class  A  class  can be  applied  to  tables  as with  any other  element.  By default the  browser  deter- mines  the size  of the  table  cells based  on the  elements  and  text they contain  and expands  the  cells  accordingly.  With images,  the  edge  of the image will be  the  edge  of the  cell.  The  browser will  not shrink the  image  to  fit the  text,  but will stretch  the  text to  fit the  image.  Text is  stretched  out until  the  first line  break or  until  a paragraph  ends.  You  can  specify  table width with  the  CSS width property.  Example  14.14 uses  both  a  table  and  an  image  width  class.   E X A M P LE  14.14         Bengaluru,  India        table, td{ border:groove darkgreen; >  .size{ width:20Opx; }   * class *   -cantion   font-size:  .8em:font-stvle:italic: 1   1  2  3  4    14.7  Creating a  Style Class   561   E X A M P LE   14.14   CONTINUED            5  6  7   <trxtdximg src=" indiacows . jpg" width="200"  <trxtd class^'caption'^Some cows  take a  leisurly stroll  down the Jayanagar Block after a morning rain in  Bengaluru,  India.     height="150"  alt="Cows  Rule"x tdx tr>               E X P L A N A T I ON   The  CSS  style  sheet  starts  here.   l  2  The  table  and  the  td  elements  are  given  a  grooved  dark  green  border.  3  4   This  is  a  class  to  define  the  width  of an  HTML  element.  This  style  defines  a  class  called  .caption  defining  font  size  and  style  of  an  HTML  element.  The  class  attribute  of the  HTML  table  defines  the  width  of the  table.   5  6  The  first  row  and  cell  of the  table  is  the  image.  Its  border  was  defined  as  grooved   7   and  dark green  in  the  CSS  on  line  2.  The  second  row  of the  table  contains  a  class  called  "caption"  to  style  the  text  font  in  the  cell.  This  cell  also  uses  the  style  for  a  grooved,  green  border.  The  output  is  shown  in  Figure  14.15.   Bengaluru,  India  -  Windows  Internet  Explorer   g]   C:\wamp\www\example 14.14.html   Edit   View   Favorites   Tools   Help   B   w a r a n Tl   File  «  P   ^   Favorites   ^  Bengaluru,   India    562   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   14.7.2  Using a Specific Class Selector  In  previous  examples  we  have  defined  a  class  style  that  can  be  used  by  all  HTML  ele- ments.  The  following  class  can  be  applied  to  all  HTML  elements:   .center {text-align:  center;}   With  a  class  selector you  can  define  different styles  for  a specific HTML  element.  For  example,  if you want  different styles  for just the     tag,  you  can  specify  a  class  descrip- tion  by  appending  a  dot  to  the  element  followed  by  the  class  name:   p.right  {text-align:  right}  p.center {text-align:  center     * These classes apply only to the paragraph element *    When  the  class  selector  is  applied  to  a  style,  then  you  use  the  class  attribute  in  your   HTML  document  as  follows:             This paragraph will be right-aligned.   This paragraph will be center-aligned.       Note:  To  apply  more  than  one  class  per  given  element,  the  syntax  is:   This  paragraph  will  be  styled  by  a  class  called  "center"  and  a  class  "bold".      This is a paragraph.       E X A M P LE    14.15               p.normal-cursive {   font-variant:  normal;  font-family:  cursive   }  p.small { font-variant: small-caps }             i   _ 1        -   J       .  m^   ^   ^   _   1   2   t    14.7  Creating a  Style Class   563   Figure  14.16  Using  the class selector  to  style  a  paragraph.   E X A M P LE    14.16               ul.disc  {list-style-type:  disc   ul.circle  {list-style-type: circle}  ul.square  {list-style-type:  square   ul.none  {list-style-type: none               1   2       Coffee    Tea    Beer            red     564   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE    14.16   CONTINUED         circle    square    triangle           Thanks    Tack    Gracias               E X P L A N A T I ON      Coffee     Tea     Beer   a  red     blue  o  yellow         I i -1            square     triangle   Thanks  Tad;  Gratias   1  A  CSS  class  is  defined  for  a  list with  different  styles.  2   This  is  an  HTML  list  item  using  the  "disc"  class.  The  output  shown  in  Figure  14.17.   Figure  14.17  Using  a  CSS class to  create  different styles for  lists.   14.8  The ID Selector and the ID Attribute   The ID Selector.  The  ID  selector  is  another way to  create  a style  that is independent  of a specific HTML  tag.  By using the ID  selector, you  can choose  the style  for  the  element  bv  assisnins  it  a  unique  ID.  The  name  of  the  ID  selector  is  always  preceded  bv  a  hash    14.8  The ID Selector and the ID Attribute   565   F O R M AT   E X A M P LE   IDselector { declaration ;  }   menul { font-family: arial;   font-size: big;  color: blue; }   To  apply an ID  to  an  HTML  tag,  use  the  id  attribute.  The  attribute will be  assigned  the  same  name  given  to  the  ID  selector;  so,  to  apply  an  ID  selector  to  a     tag,  you  would  stipulate     where  name  is  the  name  of  the  ID  selector   see  Example  14.17 .   The id Attribute.   When JavaScript enters  the  picture,  the  id  attribute is used  to  iden- tify  each  element  as  a  unique  object  so  that  it  can  be  manipulated  in  a JavaScript  pro- gram.  The  id  should  be  unique  for  an  element  and  not  used  more  than  once  on  a  page.  If you  need  to  use  the  style  more  than  once  for  multiple  elements,  it would  be  better  to  use  the  class  selector  instead.  The  ID  selector  can  be  used  with  a  class  selector  of  the  same  name,  as  big,  .big  {}.    ID 1 s       p{  font-family:arial,sans-serif,helvetica;   font-style:bold;  font-size:18   }  block {  * The ID selector *   color: red;  text-decoration:under1ine;   E X A M P LE    14.17       1  2   3   4  5  6   }                      what I say!!     When making my point,  I will get quite red and underline   This text  is red and underlined!!    and now I am somewhat appeased.    566   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X P L A N A T I ON    CONTINUED    The  style  of the  paragraph  element is  defined.  This style will  take  effect anywhere  in  the  document where  the     tag is  used.  Note  that point  sizes  may be  different  on  different  browsers.  Pixels  will  give  you  more  accuracy.  The  ID  selector  is  called  block  and  must  be  preceded  by  a  hash  mark.  It  can  be  used  by  any  HTML  element  to  produce  red,  underlined  text.  ID  selectors  should  only be  used  once  on  a  page  to  serve  as  a  unique  ID  for  the  element.   4  A paragraph  containing text will  be  displayed  according to  the  style  defined in  the   style  sheet  on  line  2.  By  adding  the  ID  called  block,  the  style  for  this  paragraph  will  be  changed  to  red,  underlined  text.  The     tag will  revert  to  the  style  defined  on  line  2.  See  Figure  14.18.   2   3   5   6   When making my point, I will get quite red and underline what I say!!   This text is red and underlined!!   and now I am somewhat appeased.   Figure  14.18  Using  the  ID selector in  style sheets.   14.9  Overriding  or Adding  a Style with the      Tag   The     tags  are  used  if  you  want  to  change  or  add  styles  to  only  a  selected  portion  of text   see  Table  14.11 .  By  doing so,  you  can  create  an  inline  style  that will  be  embedded within  another  element  and  apply  only  to  that portion  of the  content.  In  this  way  you  can  add  or  override  a  style  to  an  element  for  which  a  style  has  already  been  defined.  Carriage  returns  and  breaks  in  the  text will  not  occur  with  these  tags.   Table  14.11  Attributes  of  the  HTML span  Tag   Attribute   Definition   class   id   style   Sets a  class for a specific element or elements.   Used to apply settings to specific HTML elements.   Used to apply style settings for the specific element included in the span tags.    14.9  Overriding or Adding a  Style with  the   Tag   567   14.9.1  The   Tag and the style Attribute  In  Example  14.18,  the  paragraph  style  has  been  defined  in  a  CSS.  But  later  in  the  body  of the  document,  the     tag  is  used  to  override  the  font  size  and  to  add  margins  to  the  text.   E X A M P LE  14.18       I   2   3   4     Margins        body { margin:10%;   border-width:  lOpx;  border-style:solid;  border-color: white; padding:5px;}   p { color=black;   font-size: 22pt;  margin-left:10;  margin-right:10;  padding:5px;  border-style:groove;  border-color:white;  background-color:cyan;}                      The  Three   Little  Bears    Once upon a time there were three little bears,  Mama bear,  Papa bear,  and Baby bear.  They lived very happily in the deep woods.       And then there was Goldilocks!           E X P L A N A T I ON   l  The  style  rule  for  the  body  element  is  defined.  It  will  have  a  margin  distance  in- creased  by  10%  on  all  sides  and  a  solid,  white  border  with  a  padding  of  5  pixels  between  the  margin  and  the  border.  Margin  borders  will  differ  in  appearance  de- pending  on  your  browser.  The  style  rule  for  the  paragraph  defines  black  text  of  a  22-point  font,  with  both  right  and  left  margins  of  10  pixels,  contained  within  a  grooved,  white  border,   2    568   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X P L A N A T I ON   3   4   The     tag  defines  a  left  margin  increased  by  10%  relative  to  this  paragraph,  and  changes  the  font size  to  26 points.  The  only part of the  document  to be  affect- ed  is  the  paragraph  in  which  the      tags  are  enclosed.  The  text  The  Three  Little  Bears  will  be  displayed  according  to  this  style.  The     tags  have  no  effect  on  this  paragraph.  The  style  reverts  to  the  rule  in  the  style  sheet.  See  Figure  14.19.   The  Three  Little  Bears   Once upon a time  there were  three  little  bears,  Mama bear,  Papa bear,  and Baby bear.  They  lived very  happily  in the  deep woods.   And  then  there  was  Goldilocks!   Figure  14.19  The   t ag   only affects  a  specific  portion  of the  text.   14.9.2  The   Tag  and  the class Attribute   The     tag provides no visual  change  by itself.  It allows you  to  change  or  modify the  appearance  of a selected portion of a document within  the  tags based  on a  CSS class rule.  Example  14.19  highlights  specific  portions  of  text  between  the     tags.   E X A M P LE    14.19           1       span.highlight  { background-colorsyellow }    14.9  Overriding or Adding a  Style with  the   Tag   569   E X A M P LE   14.19   CONTINUED     This  is a text.  Highlighting  text  is a nice idea. Whenever you apply a span style  to this paragraph, you'll see what happens.   This  is the highlighted text.                   E X P L A N A T I ON   2   3   L   2   3   This  is  a  dependent  class  selector  rule.  The  class  highlight  can  only  be  applied  to        tags.  The  class attribute is  assigned  the name  of a class  called  "highlight".  The  class will  be  in  effect  for  only  the  portion  of  text  between  the     tags.  The  back- ground  color  of the  text  is  changed  to  yellow  as  shown  in  Figure  14.20.  The  text  between  the     tags  will  be  highlighted  based  on  the  class  rule.   Mozilla  Firefox   File   Edit   Vie1.-.1   History   Bookmarks   Tools   Help   U  Windows  Martetplace   AOL  Mail   1629 ;;   ^         file:   C: Documents%20and%205ettings Qwner My%20Do[:uments   *   ]  >         ito...   i  TryitEdito...   33  Tryit  Edito...    8  Tr.yit  Edito...   AOL  Mail   ...   Q  file: .... html   Q  file: .... html   This is  a text.  Highlighting text is  a nice idea.  "Whenever you  apply  a  span  style to  this  paragraph,  you'll  see  what happens.Tins  is  the  highlighted  text.   Figure  14.20   Highlighting  text  between   tags  using  the class attribute.   Inheritance and Contextual Selectors   14.9.3  Virtually  all  selectors  that  are  nested  within  selectors  will  inherit  the  property  values  assigned  to  the  outer  selector  unless  otherwise  modified.  For  example,  a  color  defined  for  the  "body"  will  also  be  applied  to  text  in  a  paragraph.  Contextual  selectors  have  an  inheritance  basis.  For  example,  if  a     tag  is  nested  within  a     tag,  then  the     tag  takes  on  the  characteristics  assigned  to  its  parent.  If the     is  green,  then  the  bold  text    570   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE    14.20        Contextual  Selector        l   table td { color: blue;  * Table cells will take this style *    font-size:  18pt;  font-family: verdana;  }    The Three  Bears                     2   3   4    Mama Bear     Papa Bear     Baby Bear                                       E X P L A N A T I ON   l  A  rule  is  defined  for  a  table  cell.  The  table's  data  will  be  blue,  the  font  size  18  points, and the font family, Verdana. Whenever you create a table, each of the table  cells,  defined  by the    tag, will have  this style.  The  table  data  in  these  cells  will  take  on  the  style  described  in  line  1.  The  output  is  shown  in  Figure  14.21.   2 -4    14.9  Overriding or Adding a  Style with  the   Tag   571   The  Three  Bears   Mama  Bear   Papa  Bear   Baby  Bear   Figure  14.21  A table with  stylized  cells.   When you  create a contextual selector,  the last element in the selector list is the  one  that  is  affected by the style when it is used in context of the  elements preceding it.  For  example,  if you  have  a  selector  list:  table  td  em  {color:  blue;},  then  the  em  element,  the  last  in  the  list,  will  be  affected  by  the  style  only when  it is  inside  a  table  cell  at which  point  the  table  cell  will  be  contain  blue  italic  text.  This  doesn't  define  the  style  for  the     tag,  only  the     tag  if it  is  used  in  the  context  of  ;  as  in   .  See  Example  14.21        Contextual  Selector        table td em { color: blue;   * Table cells take this style *    font-size:  18pt;  font-family: verdana;  }                   The  Three  Bears               Mama  Bear    1   2   3    572   Chapter 14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE   14.21   C O N T I N U E D     Baby  Bear                       E X P L A N A T I ON   5   2   3   4   5   L  When  a  table  is  defined,  the  data  cells will  take  on  this  style  only if the     tag   is used within  the  cell.  See line 3.  The     tag used  within  this     tag  is  not  affected  by  the  contextual  selector  because it is not within  a table  cell;  that is, it is  out of context.  The    tag is embedded within a    tag.  The table's  data will  follow the style  defined  on line  1;  it is in  context.  This  table  cell  is  not using  the     tag,  so will  not be  affected  by  the  style  rule  on line  1.  It can  only be  affected if in  context.  This  table  cell  will  not  be  affected  by  the  style  rule  either  because  it  doesn't  use  the     tag.  See Figure  14.22.   The  Three  Bears   Mama  Bear   Papa Bear   Baby Bear   Figure  14.22  A table cell  is defined  by the contextual selector.    14.10  Positioning Elements and  Layers   573   move objects to  different sections of a page, move text and images,  create  animation,  cre- ate  tooltips,  scrolling  text,  and  more.  Normally when you  place  tags  in  an  HTML  docu- ment,  the  flow is  from  top  to  bottom.  Now,  with  style  sheets, you  can  set the  position  of  an  element,  even  layering  one  on  top  of the  other   see  Table  14.12 .   A  note  about  Netscape  layers.  Netscape  4  introduced  layer        tags,  a  prototype  of CSS positioning,  to  control  the position  and  visibility of elements  on  a page,  and  then  with  Netscape  6  abandoned  the  whole  thing.  This  book  does  not  address  the  Netscape  layer  technology  because  it  is  really  a  thing  of  the  past.  However,  the  term  "layer"  is  still  in  use,  and  is  used  to  refer  to  objects  using  the  id  attribute.   clip   display   overflow   position   top,  left   visibility   Table  14.12  Positioning Styles   Property   What  It  Specifies   bottom,  right   The placement of the bottom, right edges  of an element.   A specified region of the  element that will be seen.   Whether an element is displayed.   What to do if there is an overflow; that is,  there isn't enough space for the  element.   How to position the element on the page.   The placement of the top, left edges  of an element.   Whether an element can be seen.   width,  height   The size in width and height of an element's content, not additional padding,  margins, borders, and so forth.   Z-index   The  third dimension in a  stack  of objects.   14.10.1  Absolute Positioning  Absolute  positioning  places  an  element  in  a  specific  location  on  the  page  and  can  be  used  to  achieve  full  animation;  for  instance,  moving an image  across  a page.  It is  used  to  specify  the  absolute  coordinates   x,y   of  the  element  in  terms  of  the  browser  window  itself.  The   see  Figure  14.23 .  If not specified,  the  browser will  assume  the  top left  corner  of the browser  window,  where  x  is  0  and y  is  0.  The  top  left  corner  of  the  window  is  position  0,0  and  the  bottom  right  corner  depends  on  the  resolution  of the  screen.  If the  screen  resolution  is  set  to  800  pixels  in  width  and  600  pixels  in  height,  the  bottom  right  corner  is  posi-  left  properties  are  used   the  coordinates   to  determine   top  and    574   Chapter 14     Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE    14.22           1   2   3    layers       first i   background-color:  red;  border-style:  solid;  font-weight:bold;  top: 20;  position: absolute;  left: 20;  height:  100;  width:  100;   }  second{   background-color:  blue;  border-style:  solid;  font-weight:bold;  top: 3 0 ;  position: absolute;  left: 60;  height:  100;  width:  100;    14.10  Positioning Elements and  Layers   575   4   5  6   7   8   E X A M P LE    14.22   CONTINUED   third{   background-color:  orange;  border-style:  solid;  font-weight:bold;  top: 40 ;  position: absolute;  left: 100;  height:  100;  width:  100;   }            First position     <p id="second"»   Second position                Third position       E X P L A N A T I ON   1  An  ID  selector  called  first  sets  the  pixel  positions  for  a  red  block that will  be  ab- solutely  positioned  20  pixels  from  the  top  of  the  window,  20  pixels  from  the  left  side,  and  have  a  size  of  100  x  100  pixels   width  x  height .  The  position  attribute  is  specified  as  absolute.  It  is  independent  of  all  other  ele- ments  in  the  body  of this  document.   2   3  An  ID  selector  called  Usecond  sets  the  pixel  positions  for  a  blue  block  that will  be  absolutely positioned  30  pixels  from  the  top  of the window,  60 pixels  from  the left  side,  and  have  a  size  of  100  x  100  pixels   width  x  height .  The  blue  box  will  ap- pear  to  be  layered  over  the  red  one.   4  An  ID  selector  called  third  sets  the  pixel  positions  for  an  orange  block  that  will  be  absolutely  positioned  40  pixels  from  the  top  of  the  window,  100  pixels  from  the  left side,  and  have  a size  of  100  x  100  pixels   width  x  height .  The  orange  box  will  appear  to  be  layered  over  the  blue  one.  The     serves  as  the  container  for  three  objects.  The  red,  blue,  and  orange  boxes  will  appear  in  the window  at  the  absolute  positions  assigned  to  them  in  re- l a t i on   c h in    r l n r n m p nt   r n n t d i n pr    t T i i*   h r t r Kr    t V i i ^ ir    t T i i*    5   r tf    tn     576   Chapter 14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X P L A N A T I ON      C O N T I N U E D    6   7   8   The  paragraph  element is  positioned  and  styled  according to  the  rule  for  the first  ID  selector.  The  paragraph  element  is  positioned  and  styled  according  to  the  rule  for  the  sec- ond  ID  selector.  The paragraph  element is positioned and styled  according to  the rule  for  the  third  ID  selector.  See  Figure  14.24.   l a y e rs   First    0 S l t l 0 1l   First   1   positi Third position   Figure  14.24  Three layers based on absolute positioning  Internet Explorer 8,  Firefox .   Top, Left, Bottom, Right— Absolute  Positions.  As  shown  in  Example  14.22,  once  the  position has been set,  the  left,  top,  right,  and bottom  attributes  can be  used  to specify  exactly where  on  the  page  the  element should be  located.  Although we used  left and  top  to  define  the position of the  element within the body of the document,  right and  left bot- tom  can  also  position  the  element  on  the  page.  In  the  following  example,  four  elements  are placed in different fixed positions in the document.  If you change the size of the win- dow,  the boxes will appear to be located in different places  than shown in  the  output of  this example, Figure  14.25. That is because the fixed positions are relative to the dimen- sions  of  the  document's  window.  For  example,  if you  shrink  the  window  horizontally,  and the boxes are positioned  10 pixels from the bottom, they are still  10 pixels from the  bottom  of the document,  and the boxes at the top are still  10 pixels from  the top, giving  the  appearance  that  they  have  moved  much  closer  together.  If  the  window  is  shrunk  enough  either  vertically or  horizontally,  the  boxes might even  overlap  to  maintain  their  absolute  positions,  as  shown  in  Figure  14.26.   E X A M P LE    14.23            14.10 Positioning Elements and Layers 593   l   2   first{   background-color:  red;  border-style:  solid;  font-weight:bold;  position: absolute;  top: 10;  right: 100;  height: 100;  width: 100;   second{   background-color:  blue;  border-style:  solid;  font-weight:bold;  position: absolute;  top:10;  left:400;  height: 100;  width: 100;   background-color:  orange  border-style:  solid;  font-weight:bold;  position: absolute;  top: 10;  left: 200;  height: 100;  width: 100;   background color:  yellow  border-style:  solid;  font-weight:bold;  position: absolute;  bottom: 10 ;  right: 40;  height: 100;  width: 100;   3   third{   4   fourth{                  5  6    578   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE    14.23    CONTINUED    7   8   9   Second position   <p id="second"»        Third position     <p id="fourth"»         Fourth position       E X P L A N A T I ON   1  An  ID  selector  called  first  sets  the  pixel  positions  for  a  red  block that will  be  ab- solutely positioned  10 pixels  from  the  top  of the  current window,  100  pixels  from  the  right  side,  and  have  a  size  of  100  x  100  pixels   width  x  height .   2  An  ID  selector  called  Usecond  sets  the  pixel  positions  for  a  blue  block  that will  be  absolutely  positioned  10  pixels  from  the  top  of  the  window,  400  pixels  from  the  left  side,  and  have  a  size  of  100  x  100  pixels   width  x  height .   3  An  ID  selector  called  third  sets  the  pixel  positions  for  an  orange  block  that  will  be  absolutely  positioned  10  pixels  from  the  top  of  the  window,  200  pixels  from  the  left  side,  and  have  a  size  of  100  x  100  pixels   width  x  height .   5   4  An  ID  selector  called  ^fourth  sets  the  pixel  positions  for  a  yellow  block  that  will  be  absolutely positioned  10  pixels  from  the  bottom  of the window,  40  pixels  from  the  right  side,  and  have  a  size  of  100  x  100  pixels   width  x  height .  The  body is  called  the  container  for  the  elements within  it.  The  red,  blue,  orange,  and  yellow boxes will  appear  in  the  window  at  the  absolute  positions  assigned  to  them  in  relationship  to  their  container,  the  body  of  the  document.  If you  change  the  size  of  the  window,  the  boxes  are  fixed  to  the  absolute  positions,  making  it  seem  as  though  the  boxes  have  moved.  They  are  aligned  to  the  fixed  pixel  posi- tions  from  the  top,  bottom,  right,  and  left  sides  of the  current  sized  window.  The  paragraph  element  is  positioned  and  styled  according  to  the  rule  for  the first  ID  selector,  the  top,  right  corner.  The  paragraph  element  is  positioned  and  styled  according  to  the  rule  for  the  sec- ond  ID  selector,  the  left,  bottom  corner.  The  paragraph  element is  positioned  and  styled  according  to  the  rule  for  the  third  ID  selector,  the  top,  left  corner.  The  paragraph  element is  positioned  and  styled  according  to  the  rule  for  the fourth   7   8   6   9    14.10  Positioning Elements and Layers   579   layers  -  W i n ^ ^S  Inter net Explorer   ^  ^w      g]   C:\wamp\www\exampl   [~X~    ^ > AO   ÊJ0H  -  P   File   Edit   View   Favorites   Tools   Help   Favorites   Jg layers   a *  a  *  s   T  Page   *   Safety   *    First  position   Second  position   Fourth  position   Figure  14.25  Blocks are absolutely positioned  based  on  pixels from top,  bottom,  left,  and  right.   ¿  My  Computer   .   -   \ 1 Ü Ü%    -  * layers - Mozilla Firefox  File   History   View   Edit   Bookmarks   Tools   Help   UM   -   Q¡   lBj   Û   file : 11 jC :  wamp www example 14   23   html   Google   I   layers   I   layers   I  ^  layers   I   layers       l a y e rs    u   Fn st position   Third  position  ond  tion   Fomtli  position   Figure  14.26  Firefox: Absolute positions with four blocks. Window height is changed  and  boxes  overlap.   _L   14.10.2  The    Container   On  o   r ^f    m  n et    i m m r t o nt     r n n t o i n p rc    ic    t in  o  ^   Tt   ct>-r\Tt>c  oc   a   r r on    n   P A T I _    580   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   bars,  content,  and  a  footer.  Each  of these  sections  could be  placed  in its  own  div  container  and  all  of those  divs  enclosed  in  one  main  div.   CSS Class Declaration   .bigblue {   border-style:  solid;  border-width:lpx;  color: blue;  font-family:arial,  times,  serif;  font-size:32pt;color:  blue;   }   The HTML   tags          This is the text in a container.   14.10.3  Absolute Positioning  The  div  container  is  not  only  used  to  change  colors,  borders,  fonts,  and  so  on,  but  it  is  used  for  absolute  or  relative  positioning  of a block of text.  For  example,  it  allows you  to  create  a  paragraph  style  independent  of  the     tag.  Within  the  block,  the     tags  can  be  used  to  introduce  other  styles.   In  the  following example,  the     tag is  used  to  create  a block.  It is  absolutely posi- tioned  in  the  window  at position  0,0,  which  is  the  top,  left  corner.  Absolute  positioning  allows  you  to  place  an  element  anywhere  on  the  page  separate  from  the  rest  of the  doc- ument.  The  top  left  corner  of the  document  or  the  elements'  parent  originate  at  coordi- nates  0,0.   E X A M P LE    14.24       1  2  3    Positioning        .divStyle  {background-color:blue;   position: absolute;  width: 250px; height: 150px;   }  p { color: white;   font-size:18pt;  position:  absolute;  left:lOpx;  height:5px;   }        14.10  Positioning Elements and Layers   581   E X A M P LE   14.24   CONTINUED    This is a paragraph.                  E X P L A N A T I ON   The  style  sheet starts  here with  the     tag.   L  2  A  class  called  divStyle  is  defined.  3   This style will produce  a blue box, 250 pixels wide  and  150 pixels high.  It will be  positioned  at  the  top,  left  corner  of  the  window   0,0   because  the  top  and  left  properties  are  undefined.  The  div  element will  use  the  style  defined  by  the  divStyle  class.  The  paragraph  element  is  embedded  within  the     tags.  The  div  box  is  like  a  mini window.  It will placed  at the  top,  left corner  of the window,  because its po- sition  has  not been  defined.  See  Figure  14.27.   4  5     Positioning  - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help       C   A         f i l e :       C :   D o^   A      Positioning      Positioning      Positionir   This is a paragraph.   Figure  14.27  The div block is absolutely positioned  in the window.   14.10.4  Relative Positioning  Relative  positioning  places  the  element  in  a  position  relative  to  the  element where  it is    582  Chapter  14  E X A M P LE  14.25       Introduction to CSS  Cascading Style Sheets  with JavaScript        Positioning          divStyle { background-color :lightblue;  position:  absolute;  width: 250px; height:  150px;  border-style:  solid;  border-color:  darkblue;   } .paraStyle { color :darkblue;  position:  relative;  font-size :18pt;   }                              This is a paragraph.       E X P L A N A T I ON   The  style  sheet  starts  here.   1  2  A  style  class  called  divStyle  is  defined  for  the  div  element.  3  4   The  div  box  will  be  absolutely  positioned  in  terms  of  the  browser  window.  The  dimensions  of width  and  height  of the  div box  are  set.  The  border  around  the  div  container  is  a  solid,  dark  blue  border.   5  A  style  class  called  paraStyle  is  defined  for  the  paragraph   p   element.  The  color   6   of the  text will  be  dark  blue.  The  position  will  be  relative  to  the  div  box  where  the  paragraph  is  contained.  If  top  and  left  properties  are  not  defined,  the  paragraph  will  be  in  the  top,  left  corner  of the  box,  position  0,0  relative  to  the  div  container  where  it  is  placed.   7  An  inline  style  is  set  for  the  div  element,  placing  the  box  50  pixels  from  both  the   top  and  the  left  side  of the  browser  window.   8  An  inline  style  is  set  for  the  p  element,  placing  the  paragraph  at  a  percentage  of  15%  from  the  left  and  30%  from  the  top  based  on  the  dimensions  of  the  div  box.    14.10  Positioning Elements and  Layers   583     Positioning - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help   *   C   f Mi    G   file :   C: Documents  and  Settings Owner i   f *    Positioning   Q  Positioning      Positioning      Positioning   Tins is a paragraph.   Figure  14.28  The  paragraph  is  positioned  relative  to  the div style.   14.10.5  The z-index and Three Dimensions  The  last  type  of  position  sets  the  precedence  of  a  stack  of  overlapping  elements.  The  absolute position properties include  three  coordinates: x, y,  and  where x is the left side  of  an  object,  y  is  the  right  side,  and  z  is  the  value  of  the  stacking  position.  If you  have  three  containers  layered  on  top  of each  other,  the  z position  of the  bottom  layer  is  0;  the  next layer,  1;  and  the  top  layer  in  the  stack is  layer  2.  In  the  next section, JavaScript will  allow  us  to  move  these  objects  around,  rearranging  the  stacking  order  dynamically,  by  manipulating  the  ^-position.   E X A M P LE   14.26       1   2   3     layers       <span style="position:  absolute;  z-index:0;   background-color: red; width: 2 00;height:250;  top:  50px;  left:160px;">    <span style="position:  absolute;  z-index:l;   background-color:yellow;  width:  90;height:300;  top: 2 Opx; left:210px; ">    <span style="position:  absolute;  z-index:2;   background-color: blue; width: 250;height:100;  top:  125px;  left:134px;">     584   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE   14.26   CONTINUED    4   <span style="position:  absolute;  z-index:3;   background-color: white; width: 50;height: 50;  top: 14Opx; left : 23Opx;">            E X P L A N A T I ON   1  A  span  style  is  used  to  create  a  red  rectangle,  size  200  pixels  x  250  pixels,  in  the  top,  left  corner  of  the  screen.  A  z-index  of  0  means  that  this  rectangle  will  be  the  bottom  layer  in  a  stack.   2  A  span  style  is  used  to  create  a  yellow  rectangle,  size  90  pixels  x  300  pixels,  posi- tioned  above  the  red  rectangle,  z-index  of  1,  or  on  top  of it  in  the  stacking  order.  3  A  span  style  is  used  to  create  a  blue  rectangle,  size  250  pixels  x  100  pixels,  posi- tioned  above  the yellow rectangle,  z-index of 2,  or  on  top  of it in  the  stacking order.  4  A  span  style  is  used  to  create  a white  square,  size  50  pixels  x  50  pixels,  positioned  above  the  blue  rectangle,  z-index of 3,  or  on  top  of it in  the  stacking order.  See  Fig- ure  14.29.    indows  Internet  Explorer   L : \ ',",' a m p \ w w w \ e x a mp  v  ¿f 11 X      AOL search   'iew   Favorites   Tools   Help   I a -s    s  a  -   14.11  Where Does JavaScript Fit In?   585   14.11  Where Does JavaScript Fit In?   14.11.1  What Is DHTML?  DHTML  stands  for  Dynamic  HTML.  It is  not  a  programming  language,  but  a  technique  used when  HTML XHTML,  CSS,  and JavaScript   and Ajax   work  together  to  make  up  a  dynamic  interactive  Web  page.  With  CSS  we  were  able  to  control  the  style   i.e.,  color,  font,  margins,  etc.   of the  HTML  elements  and  store  the style  sheets in separate  files.  All  by itself,  CSS is presenting a style  for your  page,  but now we  need JavaScript to bring the  Web  page  to  life,  to  make  it  dynamic.  Throughout  this  text  we  have  been  using  event  handlers  and  functions  with JavaScript  to  create  rollovers,  slideshows,  animation,  sub- mit  forms,  and  so  on.  In  the  next  chapter  we  discuss  how  to  access  every  element  on  a  Web page with  the DOM.  Then you  can  apply  CSS styles  and JavaScript to  the  DOM  ele- ments  to  create  what  will  effectively  make  it  possible  to  manipulate,  create,  and  delete  any  part  of your  page  on  the  fly.   14.11.2  How JavaScript Views Style Sheets  Sometimes  a  page  consists  of  more  that  one  style  sheet.  When  the  page  is  loaded,  all  external  and  embedded  style  sheets  are  stored  in  an  array in  the  order  in which  they are  placed  within  the  document,  just  as  are  images,  forms,  and  links.  The  array  is  called  styleSheets,  a  property  of  the  document  object,  so  document.styleSheets[0]  is  the  first  style  sheet,  normally  the  general  style  sheet  for  the  entire  page.  The  next  style  sheet,  maybe  one  that  uses  the  @import  rule,  would  be  document.styleSheets[1],  and  if  you  embedded  another  style  within  the  document,  that  would  be  document.styleSheets[2],  Because  each  of the  elements  of the  styleSheets  array  has  a  disabled  property  that  can  be  turned  on  and  off,  you  can  dynamically  toggle  between  styles,  allowing  a  user  to  select  a style  suited  to  his  or  her  own  taste.  It is  also  possible  to  access  a specific rule within  a  style  sheet  by  using  the  W 3C   cssRules  array  or  the  Microsoft  rules  array.  Both  arrays  work  with  index  numbers.  The  first  rule  is  cssRules[0],  the  second  one  cssRulse[l],  and  so  on.  Example  14.27  contains  two  style  sheets,  one  that  is  imported  and  one  that  is  embedded.  By  using JavaScript  the  user  can  toggle  between  two  styles.  When  reverting  to  the  first  style,  one  of  the  rules  is  changed;  that  is,  the  rule  for  the  hi  selector  is  changed  to  purple.   E X A M P LE    14.27        Stylesheets   @import  url "Dstvle.css" ;       1    586   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE    14.27   CONTINUED        function changeStyle  {       alert document.stylesheets.length ;  document.stylesheets[0].disabled=false;  document.stylesheets[1].disabled=true;   }  function  enableOldStyle  {       now visible   document.stylesheets[0].disabled=true;  if document.stylesheets[1].cssRules {      W3C   document.stylesheets[1].cssRules[1].style.color="purple";   }  else{    Microsoft Internet Explorer   document.stylesheets[1].rules[1].style.color="purple";  document.stylesheets[1].disabled=false;   } document.stylesheets[1].disabled=false;      now visible   }          p { background-color:darkblue;   font-weight:bold ;  font-size: 12pt;  font-family:arial;  color:yellow; }   hl{color:red;}               Hello       <input  type="radio"  <input  type="radio"   onclick="JavaScript:changeStyle  ">new style   onclick="JavaScript:enableOldStyle  ">old style    This is the changing style sheet. Notice when we click on  the radio button,how the style for the whole page changes.  That1s because we disabled one stylesheet and replaced it  with another.          10       Goodbye            14.11  Where Does JavaScript Fit In?   587   E X P L A N A T I ON   1   2  3   4  5   6   7   8  9   The  first style  sheet is  imported.  This will  be  styleSheets [0]  in  the JavaScript  array.  The  second  style  sheet is  defined  on  line  8.  This user-defined function will be called when the user clicks the first radio button.  By  setting  the  disabled  property  of  the  stylesheet  object  to false,  styleSheets  [0]  will  become  visible.  In  this  example  the  style  for  the  whole  page  will  be  changed  ac- cording  to  the  rules  in  the  first style  sheet that was  imported.  Setting the second style sheet, styleSheets [1 j  to  true, makes  this style sheet invisible.  This  function  sets  styleSheets [1 j  to false,  making it visible.  This  style  is  defined  on  line  8.  The  cssRules[]  array  contains  all  the  rules  set  for  the  style  sheet.  In  the  style  sheet  defined  on  line  8,  the  second  rule,  cssRules[lj,  defines  a  rule  for  an  hi  element.  For  this  rule,  the  rule  is  changed  to  a  different  color  using  the  document's  styleSheet array and  the  cssRules  array with  the  style property,  and  the  color is reset  to  purple.  To  change  the rule  of a style sheet with Microsoft, use  the  rules []  array as shown  here.  This  is  an  embedded  style  sheet  that styles  the  p  and  hi  selectors.  The  form  gives  the user  two  radio  buttons,  one  to  make  the  first style  visible,  and  one  to  make  the  second  style  visible  and  change  one  of the  rules.   10  This is  the  paragraph  that will  be  given  a new style if the  "change style"  option in   the  radio  button  is  selected  by  the  user.  See  Figures  14.30,  14.31,  and  14.32.    588   Chapter 14       Introduction to CSS  Cascading Style Sheets  with JavaScript   ® Stylesheets  - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help   [ _ J [ n J [ X   C   W   j   file:   C: wamp w™™ tp 13738b. html       r ' l*    :>   Q  5tylesheets   J  5tylesheets   j  5tylesheets   J  5tylesheets   Q  S t y l e s . .^   >  '   -      Hello     n ew   style      o ld   style   Hello     n ew   style      o ld   style   Goodbye   This  is the changing  style sheet.  Notice when we  click on the  radio  button,  how the style for the  whole  page  changes.  That's  because we  disabled  one stylesheet and  replaced  it with  another.   Goodbye V  Figure  14.31  After the user clicks the  "new style"  radio button, a new style is made  visible.   Stylesheets  - Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   T   C   ÎÈ   Û   file:   C: wamp www stylesheets.html   Û   T   2 1T   Google   1  ^   Q  Stylesheets   Q  Stylesheets   [3  Stylesheets   Q  Stylesheets   Q  Styles...  @   y -1   *   -  This is the changing style sheet. Notice when we click on the radio button,  how the  style for the whole  page  changes. That's  because we  disabled  one  stylesheet and  replaced  it with  another.   Figure  14.32  After the user clicks the  "old  style"  button,  the first stylesheet  becomes visible.  HI  text is now purple.    14.11  Where Does JavaScript Fit In?   589   14.11.3  The style Object  The  style  object  contains  a  set  of  properties  corresponding  to  the  CSS  attributes  sup- ported  by your  browser.  Each  HTML  object  has  a  style  property  used  to  access  the  CSS  style  attributes  assigned  to  it;  for  example,  an  hi  element  might  have  been  defined with  a  CSS font-style,  color,  and  padding.  The  style  object  has  properties  to  reflect  each  of  the  CSS  attributes.  See  Table  14.13.   Many  of  the  CSS  style  attributes,  such  as  background-color, font-size,  and  word-spacing,  contain hyphens in  their names.  Like  all  objects we have seen in JavaScript,  there  is  a con- vention  for  spelling  the  name  of  the  object.  The  name  would  not  contain  a  hyphen,  and  multiple words after  the  first word are usually capitalized.  Therefore, the  CSS naming con- vention is  different with  the properties  of the style  object.  The  hyphen is removed  and  the  first letter  of each word  after  the  hyphen  is  capitalized.  For  example,  the  CSS  attribute,  background-color,  when  used  as  a  style  property,  is  spelled  backgroundColor, font-size  is  fontSize,   and  border-right-width   is  borderRightWidth.   F O R M AT   E X A M P LE   elementname.style.property="value"   div2 . style.fontFamily = "arial";   Table  14.13  style Object  Properties   Example CSS Value   HTML Tags   Affected   Property   Fonts   font   fontFamily   fontSize   fontStyle   fontVariant   12pt 14pt sans-serif, 80% sans-serif, x-large 110%  arial, normal small-caps   serif, sans-serif, cursive, fantasy, monospace   12pt, larger,  150%,  1.5em   normal, italic,  oblique   normal, small-caps   All   All   All   All   All    590   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   Table  14.13  style Object  Properties   continued    Example CSS Value   HTML Tags  Affected   bachgroundColor   red, blue, F00   red,  green, F00,  rgb 255,0,0    bachgroundAttachment   scroll,  fixed   bachgroundlmage   URL   bay.gif ,  none   right top, top center, center, bottom,  100%  100%,  0% 0%,  50% 50%   Block-level and  replaced  elements   repeat, repeat-x  horizontally , repeat-y  vertically ,  no-repeat   All   normal, 0.1 em   normal,  1.2,  1.2em,  120%   left, right,  center, justify   underline,  overline,  line-through, blink   3em,  15%   Block-level elements   capitalize,  uppercase, lowercase,  none   baseline,  sub, super,  top,  text-top,  middle, bottom,  text-bottom,  50%   Inline  elements   Property   Colors   color   Images   bachgroundPosition   backgroundRcpeat   Text  Alignment   letterSpacing   lineHeight   textAlign   textDecoration   textlndent   textTransform   verticalAlign   wordSpacing   normal,  2em   Margins and Borders   align   borderStyle   borderWidth   none, solid, 3D   thin, medium,  thick,  2em   All   All   All   All   All   All   All   All   All   All   All   All   All    14.11  Where Does JavaScript Fit In?   591   Table  14.13  style Object  Properties   continued    Property   Example CSS Value   Margins  and Borders   Continued    2em, 4em,  6em  right, bottom, left    marginRight   marginTop   padding   paddingBottom   paddingLeft   paddingRight   paddingTop   length   20em, 45%   1cm,  20%   2em,  20%   ,25in, 20%   ,5cm,  35%   20px,  10%   E X A M P LE  14.28       width  For a complete list of properties, see http:  www.w3.org TR REC-CSS2 propidx.html.   12em, 30%, auto   initial width value    HTML Tags  Affected   All   All   All   All   All   All   All   Block-level elements   Block-level  element   1  2  3  4  5   6   7  8    Changing  Background Color  Dynamically        function bodyColor  {   var i = document.forml.body.selectedlndex;  bodycolor = document.forml.body.options[i].value;  document.getElementById "bdy" .style.backgroundColor=   bodycolor;   }                  Pick a background color for this page.      <form name^'forml"»     Color         pink     592   Chapter 14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE   14.28   C O N T I N U E D     yellow    green                  This   is  a  t e s t.              E X P L A N A T I ON   4  5   The JavaScript  program  starts  here.   l  2  A JavaScript  user-defined  function  called  bodyColorQ  is  defined.  3   The  number,  selectedlndex,  of  the  option  chosen  from  a  select  list  is  assigned  to  variable  i.  The value of the selected option is one of the colors listed in the select list on line 8.  The  getElementByldQ  method  returns  a  reference  to  the  body  tag,  whose  id  is  bdy.  By using  the  style  property with  the  reference  to  the  body,  the  background  color  of the  document is  changed with  this  statement.  The  body  tag is  given  an  id  attribute  by which  to  identify it.   6  7  An  HTML  form  called form 1  starts  here.  8  A select menu is defined  to give the user  options to  change  the background  color  of the  document  on  the  fly.  The  onChange  event is  triggered when  one  of the  op- tions is selected,  and is handled by invoking the  function bodyColorQ   The  output  is  shown  in  Figure  14.33.   Pick  a background  color  for this  page.   Pick  a background  color  for this  page.   Color   [ y e H o w jj   This  is  a test.   Color   green  »   This  is  a test.   Fiaure  14.33  Chancrina  the  baokaround  color dvnamicallv fleftV  now the color is areen    14.11  Where Does JavaScript Fit In?   593   E X A M P LE    14.29        The onload    method        window.onload=setBorder;  function  setBorder  {   document.getElementById "bdy" .style.border=   }   * window.onload=function  {      Anonymous function   document.getElementById "bdy" .style.backgroundColor=  "lightgreen";   "2px solid blue";   1  2  3   4   5   6   7   }   *   function getToday  {  var d=new Date   ;  var weekday=new Array 7  ;  weekday[0]="Sunday";  weekday[1]="Monday";  weekday[2]="Tuesday";  weekday[3]="Wednesday";  weekday[4]="Thursday";  weekday[5]="Friday";  weekday[6]="Saturday";  return   weekday[d.getDay  ] ;   }                         document.write " Today it is  "  + getTodayO  +"! " ;               E X P L A N A T I ON   1  When  the  page  has  completely  loaded,  JavaScript  will  execute  the  user-defined  function  called  setBorder.  Notice  that  there  are  no  parentheses  or  quotes when  set- Border  is  assigned  to  the  event  handler.  That  is  because  setBorder  is  being  assigned  as  a  reference  to  the  function  defined  on  line  2.  The  function  setBorderQ  will  be  called  when  the  onload  event  is  fired  on  line  1.   2    594   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X P L A N A T I ON    CONTINUED    4   5  6   7   This  is  another  way  to  use  the  onload  property  to  call  a  function.  An  anonymous  function is  assigned  to  onload  and will  be  called  after  the  page  has  loaded  and  the  onload  event  has  been  fired.  The  user-defined  function  getTodayO  returns  the  current  day  of  the  week.  This  is  the  HTML body tag with  the  id  attribute.  The  id will be  used  on line  2  with  the  getElementById    method  to  get  a  reference  to  this  body  element.  You  can  see  in  the  display   see  Figure  14.34   that  the  blue  border  was  created  for  the  document  once  the  page  was  loaded.   O The onload   method  - Mozilla  Firefox  Tools  File   Bookmarks   History   View   Edit   Help   Q fn    ®   -   C   A      Q   file:   C: wamp www onloaJ.html   fa   -        -  AC   ^  JayaScript  Date  0...     ^  Tryit  Editor  y 1.4     Q  The  onloadQ  method]  Q  The  onloaJQ  method    Q  T he   o n l o a d   . ..   Q      +      Todav it is Thursday!   Figure  14.34  Styling  the  border.   Positioning Text with the style Property.  By assigning a position to the style prop- erty it is possible  to place  an  element in  different sections  of the page.  In Example  14.30,  by  assigning  positions,  the  text  is  moved  after  the  document  has  been  loaded.   E X A M P LE  14.30        Positioning        body { background-color:  aliceblue;}  div {  font-size:larger;   color: white;  border:  solid;  border-color:aqua;   }  .posl  {position:absolute;  top:50px;left:lOpx;   background-color:blue;    14.11  Where Does JavaScript Fit In?   595   E X A M P LE   14.30   CONTINUED    .pos2  {position:absolute;  top:lOOpx;left:lOpx;   background-color:teal;   }  .pos3  {position:absolute;  top:150px;left:lOpx;   background-color:darkblue;   }          var divl,div2,div3;  window.onload=funct ion  {   divl=document.getElementByld "first" ;  div2=document.getElementByld "second" ;  div3=document.getElementByld "third" ;   }  function startPosition   {   divl.style.top = 50;  divl.style.left=10;  div2.style.top = 100;  div2.style.left=10 ;  div3.style.top = 150;  div3.style.left=10 ;   }  function movePosition  {  divl.style.left = 50;  divl.style.top = 150;  div2.style.left = 100;  div2.style.top = 100;  div3.style.left = 150;  div3.style.top = 50;   }                           one    two    three      <input  type="button"  value="move text"  <input type="button" value="put it back"   onClick="movePosition  ">  onClick="startPosition  ">   2  3  4   5   6  7  8  9   10   11    596   Chapter 14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X P L A N A T I ON   1   The  CSS style sheet creates  classes  that will  be  used  to position  the  first three  div  elements.  These  variables will  be  used  by the  functions  in  the JavaScript code.   2  3  After  the  document has  been  loaded,  the window's  onload  event will  be  triggered   and  the  anonymous  function  called.  The  getElementById    method  returns  references  to  three  div  block  objects.   4  5  A  function  called  startPosition    is  defined.  It  will  put  the  div  elements  back  in   their  original  positions  after  they have  been  moved.   6  A  function  called  movePosition    is  defined.  It  is  responsible  for  moving  the  text   7   8   9   to  different positions  on  the  screen.  The  first  block  of  text  will  be  positioned  at  50  pixels  from  the  left  side  of  the  screen  and  150  pixels  from  the  top.  The  second  block of text will  be  positioned  at  100  pixels  from  the  left side  of the  screen  and  100  pixels  from  the  top.  The third block of text will be positioned  150 pixels from the leftside of the screen  and  50  pixels  from  the  top.   10  The  div  containers  are  given  an  id  and  a  class  that will  assign  absolute  positions   on  the  page.  Each  div  block will  contain  a string  of text.   11  When  the  user  clicks  the  button  labeled  "move  text",  the  onClick  event  will  be  triggered,  causing  the  text  to  be  moved  to  a  different  location  on  the  page.  See  Figure  14.35.   1  Positioning - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help   1  Positioning - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help   C   ffl   J   file:   C: ™amp    C   ffl   J   file :    !: warn   Y  InhjrmlT  Scalar  Data  and  ...   Positioning   Y  InhjrmlT  Scalar  Data  and  ...   Positioning   I  m o ve   text       put  it  b a ck       m o ve   text       put  it  b a ck       IBM   3S   IBM   Figure  14.35  After the  user clicks the  "move  text"  button,  the div containers  are  moved.    14.11  Where Does JavaScript Fit In?  E X A M P LE  14.31        layers        function moveUp id {   597   var box=  document.getElementByld id ;  if box.style.zlndex == 100 {  IICan't stack higher than 100   1  2  3  4   9   10   box.style.zlndex=2;   }  else  if box.style.zlndex  box.style.zlndex=100;   != 3  {   box.style.zlndex=0;   }  else{   }   }              <span id="red"  style="position:  absolute;z-index:0;  background-color:red; width:200;  height:250;  top:50px;  left:160px;"  onClick="moveUp id ;">    <span id="yellow"  style="position: absolute;z-index:l;   background-color:yellow;  width:90;  height:300;  top:2 Opx; left:210px; "  onClick="moveUp id ;">    <span id="blue"  style="position:  absolute;z-index:2;  background-color:blue; width:250;  height:100;  top:125px;  left:134px;"  onClick="moveUp id ;">    11   <span id="white"  style="position:  absolute;z-index:3;   background-color:white; width:50;  height:50;  top:140px;  left:230px;"  onClick="moveUp id ;">            E X P L A N A T I ON   1   The JavaScript  user-defined  function  called  moveUpO  is  defined.  It  has  one  pa- ra  m ¿>t   w h e re   n't  w oe   t he    t on    t  li    \A     598   Chapter 14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X P L A N A T I ON   3   4   5   6  7   If the  zlndex of the  object  evaluates  to  100,  it must be  at  the  top  of the  stack,  be- cause  that is  as high  as  the stack gets.  This sets the stack level of the zlndex to 2, causing it to move toward the bottom of the  stack.  If the zlndex for  the  object is not 3, it is not at the top.  Its zlndex will be set to  100,  moving it to  the  top  of the stack.  The  object is  moved  to  the  bottom  of the  stack with  a  zlndex of 0.  The   tag is used to create a rectangular red box on the screen.  With a zlndex  of 0,  it will  be  positioned  at  the  bottom  of the  stack.   8  When  the  user  clicks  the  button,  the  onClick  event  is  triggered,  and  the  handler   function,  moveUpOd ,  is  called.   9  A yellow rectangular box is  created with  the     tag.  With a zlndex of  1,  it will   be  positioned  above  the  last block in  the  stack.   10  A blue square  box is  created with  the     tag.  With  a zlndex of 2,  it will be po-  sitioned  above  the  last block in  the  stack.   11  A  small  white  rectangular  box  is  created  with  the     tag.  With  a  zlndex of 3,   it will be positioned  at the  top  of the stack.  See Figure  14.36.   Figure  14.36  The original  configuration of the four rectangles  left ;  after manipulating the  rectangles  by  reassigning  the z-index  right .   14.11.4  The className Property  The  className  property  is  used  to  reference  a  CSS  class.  The  className  property  is    14.11  Where Does JavaScript Fit In?  E X A M P LE  14.32        Coloring  Text        body { background-color: yellow;   599    * Defining classes  *    font-size: 22pt;  font-weight: bold;  red { color:rgb 255,0,0 ;  font-style: verdana;  font-size: 32;   blue { color:blue;   font-style: verdana;  font-size:  36;  green { color: green;  font-style: verdana;  font-size: 40;   }          window.onload=init;  function init  {   } function colorText  {  divl.style.left = 50;  divl.style.top = 50;  divl.className="red";  div2.style.left = 100;  div2.style.top = 100;  div2.className="blue";  div3.style.left = 150;  div3.style.top = 150;  div3.className="green";   }              divl=document.getElementByld "first" ;  div2=document.getElementByld "second" ;  div3=document.getElementByld "third" ;    It1s a   and a   one,     600   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE   14.32   CONTINUED    <div id="third"  three!        <input   10               E X P L A N A T I ON   s t y l e = " p o s i t i o n : a b s o l u t e;    top:150px">and   type="button"  value="move  and  c o l or   t e x t"  onClick="colorText   >   L  A  CSS  class  for  a  style  is  defined.  Text  will  be  a  red,  Verdana  font,  point  size  32.  The rgb   red,  green,  blue   color is used here  for  demonstration.  It would  be  easier  to  just  assign  red  to  the  color  property.   2  A  CSS class for another style is defined.  The  text will be  a blue, Verdana font, point   size  36.   3  A  CSS class for  a third style is defined.  The  text will be  a green, Verdana font, point  size  40.  Notice  that each  class not only changes the  color  of the  font, but increases  its  point  size.   4  When  the  onload  event  handler  is  triggered,  just  after  the  document  has  been  loaded,  the  user-defined  init    function  is  called.  The  getElementByldO  method  re- turns  references  to  three  div  objects.   5  A  function  called  colorTextQ  is  defined.  It  sets  the  position  of  the  div  containers   7   6   and  defines  the  color  for  the  text  in  each  container.  The  className  property  is  used  to  reference  the  CSS  class  named  red,  defined  in  the  document.  The  className  property  is  used  to  reference  the  CSS  class  named  blue,  defined  in  the  document.  The  className  property is  used  to  reference  the  CSS  class  named  green,  defined  in  the  document.  The  positions  for  each  of  the  div  containers  are  defined.   9  10  When  the  user  clicks  this  button,  the  onClick  event  is  triggered.  It  invokes  the  col- orTextQ  function, which will  move  and  change  the  text in  each  of the  div  contain- ers.  The  output  is  displayed  in  Figures  14.37  and  14.38.   8    14.11  Where Does JavaScript Fit In?   601   "  Coloring Text  - Mozilla  Firefox  Bookmarks  File   History   View   Edit   Tools   Help   File   Edit   View   History   Bookmarks   Tools   Help   Coloring Text  - Mozilla  Firefox   T   C   A   {B   file :   C: Document:   "  @   L1J   ^   file:   r:  Documents% 2 0 and%20Se11   <        Positioning   Positioning      Positioning      Windows  Marketplace   AOL  Mail   1629    y  m o ve   ^d   co  j or   t e xt   11   It's  a  one,   and a two,   and three!   Figure  14.37  The initial  appearance of the document  left ;  after clicking  the  button,  the  color,  position,  and size of the text is changed   right .   0  Coloring Text  -  Windows  Internet  Explorer   File   Edit   View   Favorites   Tools   Help   ,   C: \ wamp \ w w w\example 14   32  html   , vj     \    X        AOL  Search     \ P \W\   Favorites   j  ¡g& Coloring Text         A   T  Q   ^      T   P age   T   5afety  ^   Tools  ^   i  To  help  protect  your  security,  Internet  Explorer  has  restricted  this  webpage  from  running  scripts  or  ActiveX  controls  that  could  access  your  computer.  Click   X   <      [  m o ve   a nd   c o l or  t e xt    ]   It's a one,  and a two,  and  three!   here  for  options...   move  and  color text   It's a one,  and a two,  and  three!  Figure  14.38  the x and  turn  it off.   If text will not move in Internet Explorer and you see the security warning, click   14.11.5  Drop-Down Menus and Tooltips  Drop-down  menus  are  commonly  used  in  Web  pages  to  create  submenus  that  appear  anA  t Vi A  i c a n n i ^ c ir  \xi\ic*ri  nn   1  r tn  crc*r r\ * *A *A A  t r t r t l t in   ic   a  c m - a ll   h r tv   r tf   t V i dt   a r ^ T ^ i ^ c i rc    602   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   The visibility  Property.  The visibility  property lets  you  hide  an  object  and  then  bring  it back into view.  You can  also use  the visibility property to determine the state:  Is it  "vis- ible"  or  "hidden"?  This  property  is  useful  when  creating  interfaces  such  as  drop-down  menus,  slideshows,  and  popups  or  tooltips.4  In  Example  14.34,  when  the  user  clicks  on  one  of  the  links  in  the  main  menu,  a  drop-down  menu  will  appear.  If the  user  rolls  the  mouse  over  the  drop-down  menu,  it  will  be  hidden  from  view.  Each  of  the  drop-down  menus  is  defined  within  a     container.   E X A M P LE    14.33    * this style sheet is in a file called dropdown.ess *   a {  font-family: verdana, arial;   text-decoration:  none;  font-weight: bold;  margin-left:  4px;  }   *link style for main menu*    .linkstyle { color: f33;}   menu,  .menu { font-stye: verdana;   font-size:lOpt;  color:black; }   * link style for drop-down menu *    1   2   3   4  5   menu { position:absolute;   text-decoration:underline;  top:40px;  border-style:solid;  border-width:lpx;  padding:  5px;  background-color:yellow;  width: 75px;  color: black;  font-size:  12pt;  visibility:hidden; >  menu2 { position:absolute;  text-decoration:underline;  top:40px;  left :3.2cm;  border-style:solid;  border-width:lpx;  padding:  5px;  background-color:orange;  width:80px;  color: black;  font-size:  12pt;  vi s ibi1ity:hidden;   }    14.11  Where Does JavaScript Fit In?   603   E X A M P LE   14.33   CONTINUED    menu3 {  position:absolute;   text-decoration:underline;  top:40px;  left:6.2cm;  border-style:solid;  border-width:lpx;  padding:  5px;  background-color:pink;  width:80px;  color: black;  font-size:  12pt;  visibility:hidden;}   * End of style sheet *    E X A M P LE  14.34         Drop-Down Menu           function showMenu   id  {   var ref = document.getElementByld id ;  ref.style.visibility = "visible";     Make the drop-down      menu visible   var ref = document.getElementByld id ;  ref.style.visibility = "hidden";    Hide the drop-down menu   }  function hideMenu id {   }              <table width="350"  border="2"  bgcolor="lightgreen"   cellspacing="1"  cellpadding="2">               US    World    Local         News        6   7   8  9  10   11  12  13   14   15  16   17    604   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E X A M P LE   14.34   CONTINUED           Basketball    Football    ">Soccer        Sports               href = "http:    www. imdb. com  " >Movies    <a class="menu"   Plays    ">DVD 1 s       <a href=""   onMouseOver="showMenu 'menu31 ;">Entertainment    18   19   20                      E X P L A N A T I ON   1   The  a  selector  is  followed  by  the  style  definition  for  the  links  that  appear  in  the  main  menu.   2  An ID  selector  and  a class  are  defined.  This  style will  be used  on links in  the  drop-  3   4  5   down  menus.  This  ID  selector  defines  the  style  of  the  first  drop-down  menu.  When  the  user  clicks  the  News  link,  this  yellow  drop-down  menu will  appear  directly under  the  table  cell  containing  the  News  link.  Initially,  the  first  drop-down  menu  is  hidden  from  view.  This ID selector  defines  the style  of the  second  drop-down menu.  It will  be  orange  and  drop  down  directly under  the  Sports  link.  This ID selector  defines  the style  of the  third  drop-down menu.  It will be  pink and  drop  down  directly  under  the  Entertainment  link.  The  CSS  ends  here,  and  the JavaScript  program  begins  on  the  next  line.   7  8  A  function  called  showMenu  is  defined.  Its  only  parameter  is  the  id  attribute  of  a   6   div  object,  that  is,  the  ID  of  one  of the  three  drop-down  menus.    14.11  Where Does JavaScript Fit In?   605   EXPLANATION    CONTINUED    the  drop-down  menu.   from  view.   row  and  three  data  cells.   9   The  getElementByldO  method  returns  a  reference  to  the  div  object  that  contains  the  drop-down  menu.   10  The  visibility  property  is  set  to  visible.  The  drop-down  object  comes  into  view,   right  below  the  main  menu  item  where  the  user  clicked  the  link.   11  A  function  called  hideMenuQ  is  defined.  Its  only  parameter  is  the  id  attribute  of  a  div  object.  When  this  function  is  invoked,  the  drop-down  menu  being  referenced  will  be  hidden  from  view.   12  The  getElementById    method  returns  a  reference  to  the  div  object  that  contains   13  The  visibility  property  is  set  to  hidden.  The  object  being  referenced  disappears   14  An  HTML  table  is  defined.  It will  be  light green,  350  pixels wide,  and  contain  one   15  The  first  cell  of  the  table  contains  a     container  that  is  positioned  and  styled  by the  CSS menu  ID  selector.  If the user  clicks  from within  this  tag,  it will  be  hid- den  from  view.  If he  or  she  clicks  a  link in  the  drop-down  menu,  the  user  will  be  directed  to  a Web  site.   16  The  links  within  the     container  are  described  by  the  CSS  .menu  class.  The   links  are  deactivated  for  this  example.   17  When  the  user  rolls  the  mouse  onto  this  link  called  News,  the  onMouseOver  event  will  be  triggered.  A  function  called  showMenu  will  be  invoked,  causing  the  drop- down  menu  to  appear.   18  The  second  drop-down  menu  is  created  and  will  be  made  visible  when  the  user   rolls  the  mouse  over  the  Sports  link.   19  Like  the  other  two  links,  the  Entertainment  link  also  has  a  drop-down  menu  as- sociated with it,  which will  be  made  visible when  the  user  rolls  the  mouse  over  it,  and  made  invisible  when  the  user  clicks  on  the  drop-down  list.   20  The  table  row  and  table  are  closed.  See  Figure  14.39.    606   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   1  D r o p - D o wn   M e nu   -  M o z i l la   F i r e f ox   1  File   Edit   View   History   Bookmarks   Tools   Help   I   O   e  Drop-Down  Menu   iL,   [  1   file:   C: wamp www dropdown   Drop-Down Menu   Drop-Di    News   1 Sports     Entertainment   O  D r o p - D o wn   M e nu    -  M o z i l la   F i r e f ox   File   Edit   View   History   Bookmarks   Tools   Help   k  D r o p - D o wn   M e nu   -  M o z i l la   F i r e f ox   File   Edit   View   History   Bookmarks   Tools   Help       C?   ULI   Li   file:   C: wamp www dropdownn      C?   ijli   l]  file:   C: wamp www dropdowr   J  Drop-Down Menu   J  Drop-Down Menu   ]  Drop-Do<   Drop-Down Menu   J  Drop-Down Menu   J  Drop-D   Sports   Entertainment   Sports   Entertainment   News  us  us  W o r ld  W o r ld  L o c al  L o c al   B a s k e t b a ll  F o o t b a ll  S o c c er   M o v i es  P l a ys  D V D 's   News  us  W o r ld  L o c al   Figure  14.39  A  drop-down  menu  controlled  by  mouse actions.   Tooltips.  tooltip  until  the  user  rolls  the  mouse  over  the  image.   The  following  example  uses  the  visibility  property  to  hide  the  text  in  the   E X A M P LE    14.35        A tool  tip        1   2   3   body { background-color:black;}  divclass { font-size:12pt;  font-family:  arial;  font-weight: bold;  background-color:aqua;  border:thin  solid;  width: 210px;  height:40px;  visibility: hidden;  * Can't see the container *   position:absolute;  top: 50px;  left: 17 5px;  z-index: 1;   * Put the div container on top *     14.11  Where Does JavaScript Fit In?   607   4   5   6   7  8   9   EXAMPLE  14.35   CONTINUED    a { font-family: cursive;   font-size:  18pt;  font-weight: bold;  color:white;  position:  absolute;  left: 6 Opx;   }  img { position:absolute; top: 50px; z-index:0; >          var divl;  function init  {   divl=document.getElementByld "divelass" ;   }  function showHideTip e   {   if  e.type ==  "mouseover" {   divl.style.visibility^"visible";   }  else if  e.type ==  "mouseout" {   divl.style.visibility="hidden";   }   }           <a  href="http:  www.servant-xxx"   10     11  12  13   onMouseover="showHideTip event ;"  onHouseout="showHideTip event ;"  >At Your Service!             Always tip me at least 20%!    14  15           EXPLANATION   1  A  CSS  style  is  defined  for  the  ID  selector,  Udivclass  to  create  a  tooltip.  The  visibility  property  for  this  style  is  set  to  hidden;  it  will  not  be  seen.  2  The  z-index property is  set to  1,  putting it  above  the  image  that is set to  z-index 0.  Re- 3  member, the higher the z-index number,  the higher the element is placed on the stack.    608   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   1  EXPLANATION    CONTINUED    1   6   7   8   9   The  init    function  is  defined  to  get  the  ID  of  a  div  element.  In  this  example,  this  will  be  the  ID  for  the  tooltip.  The  showHideTipO  function  is  defined.  It  takes  one  parameter,  a  reference  to  an  event  object.  It  contains  information  about  the  event  that  caused  this  function  to  be  called.  If the  event was  caused  by  the  mouse  going  over  the  link,  a  mouseOver  event,  then  the  tooltip  will  be  made  visible.  If  the  event  was  caused  by  the  mouse  moving  away  from  the  link,  a  mouseOut  event,  then  the  tooltip  will  be  hidden  from  view.   10  As  soon  as  the  document  has  finished  loading,  the  onLoad  event  is  triggered,  and   11  This  is  the  link that  displays  as  "At Your  Service!".  Rolling  the  mouse  over  it will   12  The  onMouseOver  event  is  triggered  when  the  user  puts  the  mouse  on  the  link.   the  init    function  invoked.   cause  the  tooltip  to  appear.   The  tooltip  will  be  shown.   13  When  the  user  moves  the  mouse  away  from  the  link,  the  tooltip  disappears.  14  The  image  for  the  waiter  is  below  the  tooltip,  because  its  z-index is  0,  whereas  the   tooltip's  z-index  is  1.   15  The     container  is  used  to  hold  the  tooltip  text  and  style  defined  by  the  CSS   ID  selector  called  divclass.  The  output  is  shown  in  Figure  14.40.    14.12  What You Should  Know   609   14.12  What You Should  Know   Adding  a  touch  of style  to  your  site,  such  as  colors,  fonts,  borders,  and  so  on,  is  what  CSS  is  all  about.  This  chapter was  designed  to  introduce  the way style  sheets work,  how  to  define  different  styles  for  HTML  elements,  and  how  to  store  these  styles  in  a  file  so  that  they  can  be  applied  to  all  the  pages  in  a Web  site  at  once. JavaScript  enters  the  pic- ture  to  allow  for  dynamic  enhancement  of  pages,  changing  styles  on  the  fly  based  on  some  user  interaction.  In  the  next  chapter,  we  will  use  the  W3C  DOM  to  access  every  element  in  a  page.  With  CSS, JavaScript,  and  the  DOM,  all  of these  technologies  will  be  used  together  to  create  DHTML.  By  now you  should  know:   1.  What  cascading  means  to  a  style.  2.  What  a  CSS-enhanced  browser  means.  3.  The  meaning  of a  selector  and  a  declaration  block.  4.  How  to  group  selectors.  5.  The  syntax  for  style  sheet  properties.  6.  What  units  of measurement  can  be  used  for  fonts  and  margins.  7.  How  colors  are  represented.  8.  How  to  designate  one  or  more  fonts.  9.  How  to  align  text.  10.  What  kinds  of  text  decorations  are  available.  11.  How  to  create  a  repeating  background  image.  12.  Types  of containers  and  how  to  set  borders  and  padding.  13.  Three  types  of style  sheets.  14.  How  to  use  the  style  attribute.  15.  How  to  store  CSS  styles  in  an  external  file.  16.  How  to  create  a  class.  17.  How  to  create  an  id selector.  18.  How  to  override  a  style.  19.  The  difference  between  absolute  and  relative  positioning.  20.  What  z-index  is.  21.  What  DHTML  is.  22.  How  style  sheets  are  stored  in JavaScript.  23.  How  the  style  object  is  used.  24.  How  to  use  the  className  property.  25.  How  to  create  a  tooltip.  26.  How  to  create  a  drop-down  menu.    610   Chapter  14       Introduction to CSS  Cascading Style Sheets  with JavaScript   E x e r c i s es   1.  Create  a  CSS  style  sheet  that  makes  all  hi  elements  italic  and  blue.   2.  Define  a  class  called  title  that  can  be  used  on  an  element  to  make  the  font Arial,   extra  large,  and  bold.   3.  Create  a style  for  a paragraph with  a unique ID  that will  define  a style  for  a  font   family,  font  size,  and  font  color.   4.  Create  a  style  that will  affect  all  the  cells  in  an  HTML  table.   5.  Create  a  style  that  be  used  with  a     tag  to  produce  a  light  green  box,  posi-  tioned in  the  left corner  of the screen, with  a solid,  dark green border.  The     container  will  contain  a  paragraph  of italic  text.   6.  Create  a  colored  div.  Each  time  the  user  clicks  the  div  it will  grow  longer  by  10   pixels.   7.  Create  two  paragraphs  in  a  div  container.  When  the  user  clicks  the  div,  change   the  background  color  of  the  div  with JavaScript.   8.  Create  an  animation  of a stick man  running.  You will  need  to  draw several  stick  men  of the  same  size  in  different  running positions.  Your  program  will  give  the  illusion  of  the  stick  man  running.   9.  Find  a picture  of a ghost.  When  the user  rolls  the  mouse  over  the  ghost,  make  it   invisible.  When  the  user  moves  it  back,  the  ghost will  reappear.   10.  Find  an  image  of our  planetary  system.  Create  an  image  map.  When  the  user  rolls  the  mouse  over  a  planet,  a  tooltip  will  appear  with  the  name  of the  planet  and  a  brief description  of it.   11.  Use  CSS  to  create  a page  consisting of div  containers:  one  for  a header  at the  top  of the  page,  another  with  a  navigation  bar  at  the  left side  of the  page,  the  body  content,  and  a  footer  at  the  bottom  of the  page.    chapter 15   The W3C DOM  and JavaScript   15.1  The W3C DOM   The  W 3C   DOM  provides  JavaScript  applications  a  standard  way  to  access  all  the  ele- ments  of  the  document.  Although  the  DOM  was  designed  to  help  developers  navigate  an  XML  document,  HTML  documents  can  be  navigated  in  the  same way.  For JavaScript  to  change  the  style  of a  document dynamically,  the  HTML  elements must be  represented  as  objects.  We  have  already discussed  the way JavaScript views  the hierarchical  tree-like  structure  of the  document  object  model   DOM  Level  0   in  Chapter  11,  'Working with  Forms  and  Input  Devices."  The  W3C  DOM,  starting  with  DOM  1,  expanded  the  DOM  to  include  every  XML HTML  element  of the  page.  With  this  DOM   see  Figure  15.1 ,  all  HTML  elements,  attributes,  and  text  become  objects  and  the  DOM  provides  methods  and  properties  allowing not  only  access  to  all  these  objects,  but  the  ability  to  use  CSS  to  style them on the fly. With the W3C DOM, a Web page can be restructured by creating, add- ing, modifying, and deleting any item  on the page.  An excellent source describing the DOM  objects   http:  www.howtocreate.co.uk tutoriaIs JavaScript domstructure.   and  methods   is   Today  the  term  unobtrusive JavaScript  shows  up  in  tutorials,  blogs,  books,  and  dis- cussion  groups  when  discussing  Web  development  techniques.  The  goal  is  to  com- pletely,  if  possible,  separate JavaScript  code  from  the  other  two  layers  of  a  Web  page  by  putting  all  the  JavaScript  functionality  in  separate  .js  files  independent  of  the  markup  and  CSS.  This  allows  the  programmer  to  make  updates  in  one  place,  and  to  avoid  interfering  with  those  using  unsupported  browsers  or  those  who  have  disabled  JavaScript.  The  DOM  Level  1  provided  a  way  to  do  this  by  turning  every  element  of  a  Web  page  into  an  object.    612   Chapter  15      The W3C DOM and JavaScript   File  Edit  View  History  Bookmarks  Tools  Help   ^       C   f fr       Q  http:  www.w3.org DOM    Q  W3C  Document  Object  Model   W3C   B 1Û   H   I«   Google   P   About  DOM  .  DOM Activity  statement  Technical  Reports  .  Technical  Materials  Test  Suites  .  FAQ  .  Mailing  List  Members  only  resource:  DOM  Interest  Group   Document  Object  Model   DOM    Table of contents   1.  W h a t 's   n e w?  2.  W h at   is  the  D o c u m e nt   Object  M o d e l?  3.  W hy   the  D o c u m e nt   Object  M o d e l?  4.   W 3C   Activity  S t a t e m e nt   on   the  D o c u m e nt   Object  M o d el  5.  Public  R e l e a se   of  S p é c i f i c a t i o ns  6.   Questions,  c o m m e n t s,   and  s u g g e s t i o ns   about  the  D OM  7.   D OM   C o n f o r m a n ce   T e st   Suites  8.  R e l a t ed   R e s o u r c es   What's  new?           20090106  The  W e b A p ps   WG   Drives  D OM   S p e c i f i c a t i o n s.   The  W 3 C W eb   A p p l i c a t i o ns  W o r k i ng   G r o up   has  t a k en   over  responsibility  for  the  D o c u m e nt   Object  M o d el   specifications,  including  a  n ew   revision  of  D OM   Level  3  Events,  a  n ew   D OM   C o re   specification,  and  potentially  any  errata  on  older  D OM   specifications.  D i s c u s s i on   can  be  d i r e c t ed   to  either  the  p u b l i c - w e b a p p s @ w 3 . o rg   or  the  w w w - d o m @ w 3 . o rg   mailing  lists.  20080122  The  D o c u m e nt   Object  M o d el   Activity  is  closed.  The  D o c u m e nt   Object  M o d el  W o r k i ng   G r o up   w as   c l o s ed   in  the  S p r i ng   of  2 0 0 4,   after the  c o m p l e t i on   of the  D OM   Level  3  R e c o m m e n d a t i o n s.   Several  W 3C   W o r k i ng   G r o u ps   have  since  t a k en   the  lead  in   maintaining  and  continuing  to  d e v e l op   s t a n d a rd   APIs  for  the  W eb   since  then;  H T M L,   S V G,   C S S,   or  W e b A PI   b e i ng   a m o ng   them.  W 3C   will  continue  to   d e v e l op   APIs  in   various  W o r k i ng   Groups.  I  earn  m o re   a h n i i t t he   a c h i e v e m e n ts   f r om   the  n OM   Activity  n a ne   Ont  an  i d ea   nn  h n w tn   use   v   Figure  15.1   See  http:  www.w3.DOMfor  all  the  details.   15.2  How the DOM Works with  Nodes   Just  as  we  used  the  DOM  to  access  forms,  images,  links,  and  events  as  objects,  we  can  use  the  DOM  to  access  every  element in  an  HTML  document.  The  standard W 3C   DOM  currently  consists  of  three  parts:  the  DOM  core,  the  XML  DOM,  and  the  HTML  DOM   see  speci- fies  a  standard  way  to  manipulate  document  structures,  elements,  and  attributes;  the   http:  www.w3.org TR REC-DOM-Level-l introductwn.html .   The  DOM   core    15.3  Nodes   613   document   1             I                                          Figure  15.2  An  HTML d o c u m e nt  as a  tree.   The  purpose  of the  hierarchal  tree  is  to  provide  a logical  structure  to  represent  a  doc- ument  and  a  way  to  navigate  that  structure,  and  to  add,  modify,  or  delete  elements  and  content  from  it.  Starting  with  the  document  at  the  top  of  the  tree,  called  the  root,  you  can  traverse  down  the  tree  to  every  element  until  you  reach  the  element,  attribute,  or  text you  are  seeking.  The  core  DOM  identifies  each  element in  the  tree  as  a  node  object.  There  are  parent  and  child  nodes,  sibling  nodes,  and  more   see  Table  15.1 .   Table  15.1  Some  DOM  Objects   Definition   The primary data  type that represents an HTML  element.   The root of the document tree.   An element within an HTML document.   Attributes  of an HTML  tag.   The text between markup tags, such as the text between    and  .   Object   Node   Document   Element   Attribute   Text   15.3  Nodes    614   Chapter  15      The W3C DOM and JavaScript   node  is  the     tag,  called  the  root  node  of  the  document.  Below  it  are  the     and     tags,  which  are  called  child  nodes  of the  HTML  element.  In  the     is  the  text  My  Title,  which  is  also  a  node,  called  a  text  node.  Because  it  is  the  last  node,  the  tree-like structure  terminates  at that node,  also  called  a leaf node.  The  nodes  are  divided  into  three  types  of  nodes:  the  element  node,  attribute  node,  and  the  text  node.  These  types  are numbered  1,2,  and 3,  for  element,  attribute,  and  text node, respectively.  In  the  example,  the     and     tags  are  element  nodes,  title="paral"  is  an  attribute  node,  and  the  text between  the     tags, My  Title,  is  an  example  of a  text node.  An  attribute node  is  represented  as  a  property  of the  HTML  element  to  which  it  is  assigned;  for  example,  the     tag  has  an  href  attribute.  In  the  example,   ,  a  is  an  element  node,  href is  an  attribute  node  and  the  URL  is  called  its  nodeValue.   The  text  nodes  are  not  supported  on  all  browsers.    Refer  to  Tables  15.2  and  15.3  for  a  list  of node  properties  and  node  methods.   d o c u m e nt   1           first Child        last child    1      "My  Title"               sibling  nodes   "heading  1"   "paragraph text"           root  node   child  nodes       "celll "       "cell2"       "celll"      "cell2"   leaf nodes   Figure  15.3  A  tree  of  nodes.   Table  15.2  Node  Properties   Property   firstChild   lastChild   What It Does   Returns the first child node  of an element.   Returns the last child node of an element.    615   Table  15.2  Node  Properties   continued    What It Does   Returns the name  of the node.   15.3  Nodes   Property   nodeName   nodeType   nodeValue   Returns the type of the node as a number:  1  for element,  2 for attribute, 3  for text.   Sets  the value of the node in plain text.   ownerDocument   Returns the root node of the document that contains the node.   parentNode   Returns the element that contains the current node.   previousSibling   Returns the previous child node of an element at the same level as the current child  node.   Table  15.3  Node  Methods   Method   appendChild new  node    cloneNode  child  option    hasChildNodesQ   What It Does   Appends a new node onto the end of the list of child nodes.   Makes a clone of a node.   Returns true if the node has  children.   insertBefore new  node,  current  node    Inserts a new node in the list of children.   removeChild child  node    Removes a child node from a list of children.   replaceChild new  child,  old  child    Replaces an old child node with a new one.   15.3.1  Parents and Children  When looking at the structure  of the  tree hierarchy, some nodes are  above  others.  A node  above  another  node  is  a  parent  node,  and  the  ones  below  the  parent  node  are  its  chil- dren.  See  Figure  15.4.  Any  HTML  tags  that  have  both  an  opening  and  a  closing  tag  are  always  parent  nodes,  for  example,     and   .   Attributes  of  an  element  are  considered  to  be  separate  nodes  in  their  own  right.  For  example,  the  href attribute  of the     tag  is  an  attribute  node,  not  a  child  of the     tag,  and  the  title  attribute  of the     tag  is  also  an  attribute  node.  The  other  type  of node  is  a  text  node,  which  represents  the  text  of  an  element  or  an  attribute,  such  as  <a    616   Chapter  15      The W3C DOM and JavaScript   d o c u m e nt   1       documentchildNodes   [0]      rootnode    documentchildNodes  [0]  .childNodes  [0]          1      "My  Title"           "heading  1"    documentchildNodes  [0]  .childNodes  [0]  .childNodes  [0]  .childNodes  [0]     Figure  15.4  Tree  hierarchy of nodes.   15.3.2  Siblings  A  sibling,  like  a  brother  or  sister,  is  a  node  on  the  same  level  as  another  node.  In  the  example,            this  is  some  text    the  parent  node  is     and  has  two  children,  the     node  and  the     node.  Because  the     and     tags  are  at  the  same  level  within  the  text,  they  are  called  siblings,  brother  or  sister  nodes.   15.3.3  The nodeName and nodeType  Properties  When walking  down  the  DOM  tree,  you  can  find  out  the  name  of a  node  and  the  type  of  the  node  with  the  nodeName  and  nodeType  properties.  Table  15.4  gives  the  value  for  each  of  the  properties.  Dealing  with  all  these  nodes  can  be  confusing  to  say  the  least,  so  the  DOM  provides  methods  for  quick  retrieval  of  elements:  getElementByldO  and  getElements- ByTag  Name  ,  discussed  in  the  next  section.   Table  15.4   The nodeName  a nd   Its  Type   Node   nodeName   Property   nodeType  Property    15.3  Nodes   617   15.3.4  The Whitespace Bug  When  testing  a  document's  nodes,  be  careful  of the  whitespace  bug!  If you  break lines,  for  example,  between  the     and     tags,  the  whitespace  is  considered  a  text  node  and your  output might not be  consistent.  There are  a number  of Web sites that deal  with  the  whitespace  bug  and  offer  programmatical ways  to  solve  the  problem  when  tra- versing   see  Figure  15.5 .   https:  developer.mozilla.org en Whitespace_in_the_DOM   the  DOM   tree.   See   Mozilla  D e v e l o p er   C e n t er    W h i t e s p a ce   in   t he   D OM   Print  page   c  History   .^i  Edit  page   C  Talk  page   More  options  T   Languages  *   Whitespace in the DOM   The  issue   The  presence  of whitespace  in  the  DOM  can  make  manipulation  of the   content  tree  difficult  in  unforeseen  ways.  In  Mozilla,  all  whitespace  in   the  text  content  of the  original  document  is  represented  in  the  DOM    this  does  not  include  whitespace  within  tags .   This  is  needed   ^  Page  Notifications  Off   Table  of  contents  The  issue  Making things  easier  Example   Original  Document Information   Discuss  in  IRC   JS   internally  so  that  the  editor  can  preserve  formatting  of  documents   Tags   El  Files   and  so  that white-space:  pre  in  CSS  will  work.   This  means  that:      there  will  be  some  text  nodes  that  contain  only  whitespace,  and      some  text  nodes  will  have  whitespace  at  the  beginning  or  end.   In  other  words,  the  DOM  tree  for  the  following  document  will  look  like  the  image  below   using  "\n"  to   represent  newlines :             Figure  15.5  Mozilla  explains the  whitespace  bug.    618   Chapter  15      The W3C DOM and JavaScript   15.4  Walking with the  DOM   In  Example  15.1,  we  will  take  a walk  down  the  DOM  tree,  one  step  at  a  time,  using  the  parent child sibling  nodes  to  represent  each  element  in  the  document.  The  simple  lay- out  of  the  HTML  page  is  drawn  in  Figure  15.6.  You  can  quickly  see  that  using  DOM  properties  to  navigate  the  tree  can  get  confusing,  and  if in  any way  the  structure  of the  document  changes,  then  all  the  nodes  properties  will  have  to  be  reset.  We  discuss  a  quicker  more  efficient way  to  get  around  in  the  next section.   Because  every  element in  the  tree  has  a  parent   other  than  the  root node ,  a  relation- ship  can  be  established  going  up  or  down  the  tree  as  long  as  you  know which  node  and  which  children will  lead you  to  the  target element you want.  The  five properties  for  each  node  in  the  tree  are  parentNode,   lastChild,  previousSibling,  and  next  Sibling.   firstChild,   d o c u m e nt   1      root node       1      "The  Nodes"       1       "Walking  with  the  Nodes"   Figure  15.6  The  DOM  tree  for  Example  15.1.   EXAMPLE  15.1   1       The  Nodes        p{font-size : x-large; color :darkblue;   font-style : bold;   }               Walking with Nodes     15.4  Walking with the DOM   619   EXAMPLE    1 5 .1     CONTINUED    2  3   4   5  6   7   8   9  10   11   13       var  Parent=document.childNodes[0];  var  Child=Parent.childNodes[0];       First  child node is HTML       Parent's first child is HEAD       Get  the name parent node   document.write "The parent node is:  " ;  document.write Parent.nodeName+" " ;  document.write "The first child of the parent node is:  " ;  document.write Child.nodeName+" " ;  document.write "The node below the child is:  " ;  document.write Child.childNodes[0].nodeName+" " ;  document.write "The text node below title is:  " ;  document.write Child.childNodes[0].childNodes[0].nodeName  +  document.write "The value of the text node is:  " +  document.write "The first child of the parent is:  " ;  document.write Parent.firstChild.nodeName+" " ;  document.write "The last child of the parent is:  " ;  document.write Parent.lastChild.nodeName+" " ;  document.write "The node below the body is:  " ;  document.write Parent.lastChild.childNodes[0].nodeName+  document.write "The next sibling of the hi element is:  " ;   " " ;  Child.childNodes[0].childNodes[0].nodeValue+" " ;   " " ;   12  document.write Parent.lastChild.childNodes[0].nextSibling.nodeName+   document.write "It1 s value is " +   " " ;  "Parent.lastChild.childNodes[0].nextSibling.nodeValue ;   document.write " The last child's type is:  " ;  document.write Parent.lastChild.nodeType ;                 EXPLANATION   1   The  JavaScript  program  will  access  the  HTML  elements  through  the  DOM  where  each  element  is  viewed  as  a  node.  This  line  cannot be  broken  for  format- ting  due  to  the whitespace bug.  If you break up  this  line,  the whitespace  created  will  be  considered  a  text  node,  and  the  rest  of  the  script  will  not  display  the    620   Chapter  15      The W3C DOM and JavaScript   EXPLANATION    CONTINUED    2   3   4   The  first  node,  childNodes [0],  is  the  first  node  in  the  HTML  hierarchy,  the  parent  node.  This  node  is  assigned  to  a  variable,  Parent.  The  only  reason  to  create  the  variable  is  to  cut  down  on  the  amount  of  typing  and  propensity  for  errors  when  we  go  further  down  the  document tree.  Note:  Watch your  spelling when working  with  the  DOM  in JavaScript.  The  parent  node's  tion  of  the  tree  is  assigned  to  the  variable  Child.  The  name  of a  node  is  found  in  the  nodeName  property.  The  parent node  is  HTML,  the  highest  element  in  the  HTML  hierarchy.   is  document.childNodes  [0],childNodes[0].  This  por-  first  child   The  nodeName  of  the  first  child  of  the  parent  node  is  HEAD.   5  6  The  next  node  in  the  hierarchy  is  the  child  of  the  HEAD  element.  It  is  the  title   element:               of  the  node.              7   Continuing  the  walk  down  the  DOM  tree,  we  come  to  the  text  node.  It  contains  the  text  between  the        tags.  The  name  of the  text  node  is  preceded  by  a    mark.   8  The  actual  text  between  the     tags  is  found  in  the  nodeValue  property   9  Using  the JirstChild  property  to  simplify  things,  the  first  child  of  the  parent  again   shows  to  be  the  HEAD  element.   10  The  last  child  of  the  HTML  parent  is  the  BODY element:   11  The  node  directly  below  the  body  is  the  hi  element:    Walking with  the Nodes    12  The  node  below  the  body   i.e.,  the  last  child  of  the  body  element ,  document.child-  Nodes^].lastChild.nodeName,   is   the  hi   element.   13  The parent's last child node's type is  1.  An element node  type is  type  1,  an attribute   type  is  type  2,  and  a  text node  is  type  3.  See  Figure  15.7.    15.5  DOM  Inspectors   621   Ö  The  Nodes  -  Mozilla  Firefox  File   History   Viei-j   Edit   Bookmarks  B ^ gB    Help   i k t e a N s . ..    J  Create  a  Ne...   J  Delete  an  El   J  Create  a  N   J  The  Nodes   J  CSS'O   file :   C: Documents  and  Settings Owner My  Documents nbode   Walking with  Nodes   Who knows what node?   The parent node is:  HTML  The  first eliild of the parent node is: HEAD  The node below the  child is  TITLE  The text node below  title is:  text  The value  of the text node is:  The Nodes  The first elirld of the parent is: HEAD  The last child of the parent is:  BODY  The node below the body is:  text  The next  sibling of the 111  element is:  HI  It's value is null  The last cliild's type is:  1  Figure  15.7  The  node  properties.   15.5  DOM  Inspectors   A  DOM  inspector  is  a browser  tool  that lets you  dynamically traverse  the  DOM  tree  and  check  CSS  styles,  in  a  two-paned  window  as  shown  in  Figure  15.8.  Now  you  can  view  the  markup  in  your  Web  page  and  all  the  nodes  and  their  types  for  those  parts  of  the  page  that  are  of interest  to  you.   Firefox:  Internet  Explorer   For  For  For  Opera  go  to  the  menu:  Tools—»Advanced—»Developer  Tools.   https:  developer.mozilla.org en dom_inspector.   http:  www.ieinspector.com dominspector .   see:   see    622   Chapter  15      The W3C DOM and JavaScript   The Nodes  - DOM  Inspector  Help   Search   View   Edit   File   CB1   ¡14   I Pile:    C:  wamp www nbodes. html   1=1=1  "  Document - DOM Nodes   m  T  Object  -  JavaScript  Object   id   class   ES   Property   E 0B   Inspect   ES   nodeName  -  document   -  HTML   +  HEAD  -  BODY   +  FONT  +   HI    t e xt   I IP    t e xt   -  SCRIPT   -  FONT    text    t e xt   !  appendChild     attributes  I  baseURI    blur  i  childElementCount     childNodes     children  i  dassName  !  dientHeight  !  dientLeft  i  dientTop  i  dientWidth  i  doneNode  i  color  j  compareDocumentPosi.  i  contentEditable  i-dir  i  dispatchEvent   draggable   Value  function appendChild    {  ..  [object  NamedNodeMap]  "file: I He:  wamp www nb...  function  blur    {  [native.  0  [object  NodeList]  [object  HTMLCollection]   0  0  0  0  function doneNode    {   .  function  compareDocume...   "inherit"   function  dispatchEvent  ...  false   Figure  15.8  The  Firefox  DOM  Inspector.   15.6  Methods to Shorten the  DOM  Walk   In  the  previous  example,  walking with  the  nodes  was  like  walking  through  a  maze  in  a  palace  garden.  Although  the  DOM  is  represented  as  a hierarchal  tree  of elements, where  each  element  is  represented  as  a  node,  walking  with  the  nodes  can  be  daunting,  so  the  W 3C   provides  additional  methods  and  properties  to  help  make  the  walk  easier.   The  DOM  provides   to  directly  access  the  target  element you  are  trying  to  reach.  It  also  provides  properties  to  represent  attributes  of an  element  listed  in  Table  15.5.   two  methods,  getElementByldO   and  getElementsByTagO,   15.6.1   The  document.getElementByld    Method   Using  the  id  attribute  is  not  a  new idea.  We  have  been  using it  throughout  this  text.  All  browsers  that  comply  with  the  W3C's  DOM1+  should  implement  the  id  attribute  for  accessing  the  elements  in  a  document.  It  uniquely  identifies  any  HTML  element  in  a  Web  document.  Note:  This  is  not  the  same  as  the  name  attribute  discussed  in  Chapters  11  and  12.  If  you  recall,  the  name  attribute  is  used  with  forms,  images,  links,  and  anchors.  The  name  attribute  does  not  have  to  be  unique  and  is  used  by  the  browser  to    15.6  Methods to Shorten the DOM Walk   623   program.  In  Chapter  11  when  working with  forms,  we  used  both  the  name  and  id  attri- butes.  When  working with  DOM  nodes,  the  id  attribute  allows  you  to  specify  a  specific  node  and  retrieve  a  reference  to  it  with  the  document.getElementByID     method,  a  DOM1  method.   Although  all  major  browsers  are  DOM1  compliant,  here  is  a  little  test  code  you  can   run  to  check your  browser:   if   document.getElementById {   alert "DOM  compliant!" ;   }   Go   to   http:  www.webreference.com tooIs browser JavaScript.htmI   to   see   examples  of   "browser  sniffer"  programs—programs  that  can  tell  what  browser  is  being  used.   All  that node  stuff can  be  really  tricky,  but  by  combining  the  HTML  id  attribute with  the  getElementByldO  method  of  the  document  object,  it  is  much  easier  to  get  a  handle  on  any  HTML  object.  The  getElementByldO  method  takes  the  id  of  an  HTML  element  as  its  argument  and  returns  a  reference  to  that  element.   Remember  that  getElementByldO  is  a  method  of  the  document  object  and  must  be  written  as  document.getElementByldO .  With  the  reference  you  can  manipulate  the  element  in  your  JavaScript  code.  Suppose  you  have  a  paragraph  tag  defined  with  an  id  attribute,  as:   This  is the paragraph.    Now  in JavaScript you  can  get  a  reference  to  the  p  element  with  the  getElementByldO   method  as  follows:  p_element  = document.getElementByld "paral" ;   Rather  than  descending  the  entire  DOM  tree,  p_element  is  a  reference  to  the p  element   identified  as  "paral"  and  can  be  used  with  the  DOM  properties:   alert p_element.nodeName ;     Name of the element  alert p_element.childNodes[0].nodeValue ;      Text between  tags   Example  15.2  demonstrates  the  use  of  the  id  attribute  on  several  HTML  elements.  After  getting  a  reference  to  the  element,  the  DOM  node  properties  can  be  applied  to  the  reference.   EXAMPLE   15.2        The Dom and Id 1 s        Shortening the DOM Walk    1  2    624   Chapter  15      The W3C DOM and JavaScript   EXAMPLE  15.2   CONTINUED        var  hltag=document.getElementById "headl" ;  var  bodytag=document.getElementByld "bodyl" ;  var paratag = document.getElementById "paral" ;  hltag.style.fontFamily="verdana";  hltag.style.fontSize="32";  hltag.style.color="darkgreen";  paratag.style.fontSize="125%" ;  paratag.style.color="blue";  bodytag.style.backgroundColor="silver" ;   document.write hltag  +" " ;  document.write paratag+" "  ;  document .write  bodytag+" " ;     Let's get  the text between the tags  document.write " This is the text within  document.write hltag.childNodes[0].nodeValue+" " ;  document.write paratag.childNodes[0].nodeValue+" " ;   the tags: " ;                      EXPLANATION   The     tag  is  given  an  id  called  "bodyl".  The     tag  is  given  an  id  called  "headl".  The     tag  is  given  an  id  called  "paral".  In  the JavaScript  program,  the  getElementByldO  method  returns  a  reference  to  an  hi  element,  and  assigns  that  value  to  the  variable  called  hltag.  The  getElementByldO  method  returns  a  reference  to  a  BODY  element,  and  assigns  that  value  to  the  variable  called  bodytag.  The  getElementByldO  method  returns  a  reference  to  a  p  element,  and  assigns  that  value  to  the  variable  called  paratag.   7  Now, by using the style property,  the  elements  are assigned new values for  font size   and  color,  causing  them  to  change  dynamically.  The  value  returned  by  the  getElementByldO  method  is  displayed  for  each  of  the  elements.  As  shown  in  the  output,  each  one  of these  HTML  elements is  an  object.   4  5  6  7   8   9   L  2  3  4   5   6   8    15.6  Methods to Shorten the DOM Walk   625   EXPLANATION    CONTINUED    9   Rather  than  starting  at  the  top  of  the  DOM  tree  to  obtain  the  text  between  the  HTML  tags,  it  is  easier  to  get  a  reference  to  the  tag  and  then  add  the  DOM  prop- erties  to  the  reference  as  shown  here.  An  even  easier  way  to  fetch  the  text  value  between  the  tags  is  to  use  the  innerHTML  property  described  later  in  this  chapter.   1 The Dom and  Id's  MoziLla Firefox   I  File   Edit   View  History   Bookmarks   lools  Help    I]   1   *   C   X   t il    1  Q   file:   C: wamp www example 15.2C   fy   -   ¿ J-  Q  The  Dom  and  Id's  The  Dom  and  Id's  j    The  Dom  and  Id's  Q  The  D om   a.. .0  Shortening  the  DOM  Walk        Tliiy  is  the  paragraph!   [object  HTMLHe a dingElement]  [ obj e pt HTMLP ara graphElement]  [object I IT VII.BodyKlenicnt    This is the text within the tags:   Shortening  the  DOM Walk  Tins  is the paragraph!   Figure  15.9  HTML elements are objects.   15.6.2   The  document.getElementsByTagNameO  Method   To  reference  a  collection  of elements  in  a  document,  such  all  the     tags,     tags,  or     tags  in  your  document,  you  can  use  the  getElementsByTagNameO  method.  This  method  takes  the  name  of the  element  as  its  argument  and  returns  a  list  of all  the  nodes  of that  name  in  the  document.  If you  need  to  collectively  change  the  values  of a  partic- ular  element,  such  as  all  the  links  in  an     tag,  do  this  by  manipulating  the  reference  returned  by  the  getElementsByTagNameO.  Use  the  DOM  nodes  to  continue  walking  down  the  tree  from  the  point  of  reference  retrieved  from  document.getElementsByTag- NameO  method  as  shown  in  Example  15.3.    626   Chapter  15      The W3C DOM and JavaScript   EXAMPLE   15.3        Working with Tags        body {background-color :aliceblue;color : green;  hi{color :darkblue; }   font-size : larger;}                First     Second     Third       var  headingl=document.getElementsByTagName "hi" ;  document.write headingl +  " " ;  document.write "There are  "+  headingl.length+  " HI tags. " ;  for i=0;  i< headingl.length;  i++ {   document.write  headingl[i].nodeName+":   "+   headingl[i].childNodes[0].nodeValue+" " ;   }               EXPLANATION   method.   Three     tags  are  used  in  this  document.  Because  of  the  top-down  processing  by  the  HTML  renderer,  be  sure  to  put  the  JavaScript  program  at  the  end  of  the  document.  This  way,  the  tags  will  already  have  been  identified  before  they  are  put into  the  HTML  collection  returned  by  the  getElementsByNameO  The  HTML  collection  of  hi  tags  is  stored  as  an  array  of  nodes  in  the  variable,  headingl.  The  length  of  the  array  is  3  in  this  example  because  there  are  three  HI  elements  in  the  document.  See  Figure  15.10.  The or loop  will  iterate  through  each  of the  headingl  tag  objects  in  the  HTML  col- lection.  The  nodeName  property  contains  the  name  of  the  HTML  element.  The  child  of the  hi  element,  childNodes [i],   where  i  is  the  index  value   is  the  text  between  the     tags.  The  nodeValue  property  contains  the  actual  text.   1   2  3   4  5  6  7   1  2   3   4   5   6  7    15.6  Methods to Shorten the DOM Walk   627   O  Working with  Tags  -  Mozilla  F i r e f oH   File   Edit   View  I  c   History  :  W o r k i ng   w i th   Tags   Bookmarks  a  f a T*   I  C  Working with  Tags  -  Windows  Inter    ,       g   C:\wamp\www\examplel5   File   Edit   View   Favorites   Tools   Help   Favorites   ;jjû Working with Tags   F i r st   Second  Third  [object HTMLCollection]  There are 3 HI tags  HI  First  HI  Second  HI  Third   First   Second   Third  [object]  There are 3 HI tags.  HI: First  HI: Second  HI: Third   Figure  15.10  Getting elements by tag  name:  Mozilla  Firefox  left ,  Internet Explorer  right .   15.6.3  JavaScript Properties to Represent HTML Attributes  The attributes of an HTML  element are  accessible  as properties in JavaScript.  Table  15.5  lists  the properties  available  to JavaScript to  test an  attribute.   Table  15.5  Properties to  Represent HTML Attributes   Property   className   Description   Example   Represents the class of a CSS element   d i v 2 . c l a s s N a m e = " b l u e ";  div2 refers to an HTML element.  It is being assigned the CSS class  called blue  see Example  15.17    e l e m e n t  . d i r = " l  t r ";   dir   id   Specifies the text direction for a document;  for example, read left to right  English , or  right to left  Hebrew ; ltr  left to right  or rtl   right to left    Value of the unique id of the current element    see Section 15.6.1     Chapter  15      The W3C DOM and JavaScript   628   style   title   Table  15.5  Properties to  Represent  HTML Attributes   continued    Property   Description   Value of the CSS inline style attribute  CSS2    Returns the title of the document found  between the   and   tags   Example  div.style.color="green";   see Section  14.5.2   My Book   strTitle = document.title  strTitle  contains  "My  Book"       i   2   3   4  5   6   E X A M P LE    1 5 .4                      Properties      color { color :darkblue; background:aqua;}   <p id="paraidl" dir="ltr" class=color   style="font-s1ze:x-large">  This is an English style.      <p id="paraid2" dir="rtl" class="color"  style="font-  family:curs ive">  This is Hebrew style.              pl=document.getElementById 'paraidl' ;  document.write "The text direction is  "+ pl.dir +   "and the font size is  "+ pi.style.fontSize ;   p2=document.getElementById 'paraid21 ;  document.write " The text direction is  "+p2.dir+  " and the class name is  "+ p2.className ;              E X P L A N A T I ON       1   A  CSS  style  contains  a  class  called  .color to  be  used  by  elements within  the  HTML  pase.    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    629   EXPLANATION    CONTINUED    3   4   5   6   This p  element is  also  assigned  attributes.  The  dir attribute with  rtl  means  the  text  will be  displayed  from  the right side  of the screen to the left,  as would be used with  Arabic  or  Hebrew.  The  getElementByldO  method  uses  the  id  of  the  first  paragraph  and  returns  a  ref- erence  to  it.  The  first  paragraph  has  a  dir  and  style  attribute.  Using  dir  and  style.fontSize,  Java- Script  can  get  access  to  these  attributes.  The  second  paragraph  has  also  been  assigned  attributes.  Using  the  dir  and  class- Name  properties, JavaScript  can  find  the  direction  of the  text,  right  to  left,  and  the  name  of  the  class  that is  used  to  style  this  paragraph.  The  className  property  can  also  be  assigned  the  name  of a different class  to  change  the style  of the  object.  The  output  is  shown  in  Figure  15.11.   Ö Properties  - Mozilla  Firefox  File   History   View   Edit   Bookmarks   Tools   Help   [ - _ ] [     [ k]   *   C       £¿1'   Q   file:   C: wamp www example 15.4   fy   -   ¿ J-   cookie  d o r ß >\   -1  Making Coo...   j j~   L.L.Bean:  G...   ^  See my Coo...   ]  See my Coo...   Prope...   +   -  Ulis is  an English style..   .This  is  H e b r ew   s t y le   The  test  direction is  ltrand the  font  size  is  5-large  The  test  direction is  ltl  and the  class  name  is  color   Figure  15.11  Displaying  HTML attributes with JavaScript  properties.   15.7  Modifying the DOM   Appending,  Copying,   and  Removing  Nodes    You  can  create  new  nodes,  make  a  clone  of  an  existing  node,  insert  a  new  node  before  an  existing  node,  remove  a  node,  or  replace  a  node.  All  of  this  is  possible  because  the  W 3C  DOM  introduced methods  to  modify the  DOM.  Table  15.6 lists  the  DOM  methods.  For  a  complete  list  of DOM  methods  and  an  excellent resource,  go  to  the JavaScript  Kit  page  great  to  http:  www.howtocreate.co.uk tutorials Java- resource  on  how  to  modify  the  DOM,  go  \rrin tlA rttvi fancirc   http:  wwwJavaScriptkit.com domref elementmethods.shtml.   another   For   at    630   Chapter  15      The W3C DOM and JavaScript   Table 15.6  The DOM Methods   Method   appmdChild new  node    cioneNode chiid  option    hasChildNodesO   What It Does   Appends a new node onto  the end of the list of child nodes.   Makes a clone of a node.   Returns  true if the node has children.   getAttribute attributeName    Returns  the value of the attribute of the  current node.   hasAtrributesO   hasChildNodesO   Returns a Boolean value if the node has defined attributes.   Returns a Boolean value if the node has defined child nodes.   insertBefore new  node,  current  node    Inserts a new node in the list of children.   removeChild child  node    Removes a child node from a list of children.   setAttributeNode attributereference    Sets or creates an attribute for the current node.   replaceChild new  child,  old  child    Replaces an old child node with a new one.   15.7.1  The innerHTML Property and the Element's Content  The  easiest  way  to  get  or  modify  the  content  of  an  element  is  by  using  the  innerHTML  property.  Although  the  innerHTML  is  not  a  part  of the  W3C  DOM  specification,  it  is  sup- ported  by  all  major  browsers.  The  innerHTML property  is  useful  for  inserting  or  replacing  the  content  of HTML  elements;  that  is,  the  code  and  text  between  the  element's  opening  and  closing tag.  It can  also be used  to  view the source  of a page  that has been  dynamically  modified   including     and    .  Interactive  pages  are  created  by simply  changing  the  value  of  the  element's  innerHTML  property.  Because  it  is  a  property,  not  a  method,  innerHTML  doesn't return  a reference  to  the  content it inserts.  If you need  to  do more  than  simply get  or  set  content,  then you  can  use  specific  DOM  methods  instead.   In  Example  15.5  the  innerHTML property is  used  to  retrieve  the  contents  of two  para- graphs.  First we will  give  the  paragraphs  an  id  so  that we  can  easily  identify  a  particular  paragraph.  Next,  with  the  id  of  the  element,  the  getElementByld  method  returns  a Java- Script  reference  to  the  specified  paragraph,  and  finally  the  innerHTML  property  contains  the  text  between  the     tags.  With  this  property  we  can  easily  modify  the  para- graph's  text  and  style  on  the  fly.   E X A M P LE    15.5    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    631   EXAMPLE  15.5   CONTINUED        body{  background-color:blue;}  p { background: white;  font-style: bold;  font-family:  courier,arial;  text-indent:  5%;  margin-left:2 0%;  margin-right:20%       }  < head       Today is Sunday and there is a sailing festival  going on in the Ferry Park.  The tall ships are docked in the  bay for tourists to visit.  The fog is rolling in.     1 m trying to figure out how to grab the text  from this paragraph with JavaScript using the innerHTML  property.  I may take a break now and go to the park.        document.write " JavaScript1 s  innerHTML property " ;  ptxtl=document.getElementByld "paral" .innerHTML;  ptxt2=document.getElementByld  ,,para2" .innerHTML;  document.write " " +  ptxtl.toUpperCase  +  " " ;  document.write " "  +  ptxt2.toUpperCase  +  " " ;               EXPLANATION   This  is  the  CSS  code  to  style  paragraphs  in  this  document.  The  first  HTML  paragraph  element  is  given  an  id  with  the  id  attribute.  The  second  HTML  paragraph  element  is  also  given  an  id.  The  getElementById    uses  the  id  of  the  paragraph  to  get  a  reference  to  the  para- graph.  By  applying  the  innerHTML  property  to  this  reference,  all  the  text between     tags  is  assigned  to  the  variable,  ptextl.  By  applying  the  innerHTML  property  to  this  reference,  all  the  text  between     taes  is  assigned  to  the  variable.  vtext2.   1   2   3   4  5  6  7   1  2  3  4   5    6 32   C h a p t er   15       The  W3C  D OM   a nd   JavaScript   Today is Sunday and there is a sailing festival  Igoing on in the Ferry Park. The tall ships are docked  lin the bay for tourists to visit. The fog is rolling  in .   I'm trying to figure out how to grab the text   Ifrom this paragraph with JavaScript using the  linnerHTML property.  I may take a break now and go to  the park .  I   Javascript' s innerHTML property  TODAY IS SUNDAY AMD THERE IS A SAILING FESTIVAL  IGOING OH IN THE FERRY PARK. THE TALL SHIPS ARE DOCKED  llN THE BAY FOR TOURISTS TO VISIT. THE FOG IS ROLLING  ¡IN.   I'M TRYING TO FIGURE OUT HOW TO GRAB THE TEXT   IFROM THIS PARAGRAPH WITH JAVASCRIPT USING THE  llNNERHTML PROPERTY.  I MAY TAKE A BREAK NOW AND GO TO   THE PARK.   Figure  15.12  displays  t h em   at   t he   b o t t o m.   J a v a S c r i pt   g r a bs   t he   t wo   p a r a g r a p hs   at   t he   t op   of   t he   p a ge   a nd   15.7.2  Modifying the Content of an Element   By  c h a n g i ng   an  element's  c h a n ge   the  text  that  o c c u rs   b e t w e en   that  element's  o p e n i ng   and  closing  tag.   innerHTML  property,  after  s o me   user   interaction,  y ou   can   EXAMPLE      15.6    Modify  Text        body{background-color:aliceblue;}  .divStyle  {   background-color:green;  margin-left:20%  margin-right:2 0%  border-style:solid;  color:white;  font-size:150%   }        15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    633   EXAMPLE  15.6   CONTINUED        window.onload=function  {   var divObj  = document.getElementById "divtest" ;  alert divObj ;  divObj.innerHTML="Inserting new text in the   div container.";   }                 Original text in div container.             EXPLANATION   1  When  the  page  has  finished  loading  the  statements in  the  anonymous  function  are   executed.  The  variable,  divObj,  is  assigned  a  reference  to  the  div  element  identified  by  its  id,  divtest.  By adding this  alert, you will be  able  to see what was in the  original  div  container be- fore it is  overwritten by  the  new  text.  After  the  user  clicks  the  alert's  OK button,  the  new  text will  be  displayed.  If the  alert box is removed,  the  original  text will be  over- written  before you  can  see  it.  The  only  output will  be what you  see  in  Figure  15.13.  The  innerHTML  property  is  used  to  change  the  text  within  the     tags.  The  id  and  class  attributes  are  assigned  to  the     tag.  This  is  the  original  text  that  is  modified  by JavaScript  on  line  4.  See  Figure  15.14.   1  2  3  4   5  6   2   3   4  5  6    634   Chapter  15      The W3C DOM and JavaScript   Inserting new text in the  div container.   Figure  15.14  Original  text is  modified  using  the innerHTML property.   15.7.3  Creating New Elements with the DOM  To  create  new  elements  on  the  fly,  the  DOM  provides  the  createElement    method,  and  for  new  text,  the  createTextNode    method.  Once  you  get  a  reference  to  the  new  element,  you  must  insert  or  append  it  to  the  document.  If,  for  example,  you  have  created  a p  ele- ment  as  follows:   var pref  = document.body.createElement "p" ;   you  can  now  append  the  new  element  to  the  body  as  follows:   document.body.appendChild pref ;   Now we  can  add  text  to  the  new  paragraph  by  using  the  createTextNode    method  and   the  appendChildQ  method  as  follows:   txt =  document.createTextNode "Hello,  new paragraph!" ;   And  finally,  we  will  append  this  text  to  the  new  paragraph  as:   new_pref.appendChild txt ;   EXAMPLE   15.7        Creating a New Element        .divStyle { background-color:blue;   border-style:solid;  color:white;   }  p{ color:yellow;  font-size:150%;}             Create a new p element and append it to a div    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    635   divObj.appendChild para ;  var txt = document.createTextNode "Wow! Hope this works!" ;  para.appendChild txt ;           Original text  in div container.    EXAMPLE   15.7   4  5  6   7   }                      EXPLANATION   1  After  the  page  has  completely  loaded  this  anonymous  function  will  be  called.  2  A  new  paragraph  is  created  with  the  DOM's  createElement    method.  3  Now we  get  a  reference  to  the  div  element  defined  on  line  7.  4   The  paragraph  is  appended  to  the  div  element  with  the  DOM's  appendChildQ  method   see  Figure  15.15 .  The  DOM's  createTextNode    method  will  return  a  reference  to  the  text  that will  be  placed  within  the  new  paragraph  node.  The  text  created  on  line  5  is  appended  to  the  paragraph.   6  7  A  div  container  is  created with  an  id  attribute,  divtest,  to  be  used  on  line  3  to  get  a   5   reference  to  the  div  element.   1  Creating a New  Element  - Mozilla  Firefox  File   Bookmarks   History   Tools   View   Edit   Help   -   C   &           file:   C: wamp www Ji   '     ...2.html   [3   file:  ...2.html   [J   innerHTML   [J   Working   Original text in div container.   Wow!  Hope this works!    636   Chapter  15      The W3C DOM and JavaScript   Inserting Before a Node   15.7.4  The  insertBefore    method  allows  you  to  insert  a  child  node  before  the  specified  node,  called  the  reference  node,  and  if  the  reference  node  is  null,  this  will  insert  the  node  at  the  end  of a  list  of  child  nodes.   FORMAT   EXAMPLE   insertBefore newElement,  targetElement    document.body.insertBefore newPara,  firstPara ;   Example  15.8  demonstrates  how  to  insert  a  new  paragraph  node  into  a  DOM  before  another  node.   EXAMPLE   15.8        Inserting  Before       p { font-style :arial;   color :darkblue;  font-size : 18 ;   }          function insertMessage    {   1  2  3   4  5  6   7   var newPara = document.createElement "p" ;  var newText = document.createTextNode "I am inserting   myself above you!" ;       If you copy this,  don't break the lines.   newPara.appendChiId newText ;  var firstPara = document.getElementByld "firstp" ;  document.body.InsertBefore newPara,  firstPara ;   }                  I was supposed to be first.         15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    637   EXPLANATION   method.   3  Now we  are  going  to  insert  some  text  into  the  paragraph  with  the  createTextNodeQ   4  After  creating a reference  to  the  new text, it is  appended  to  the paragraph with  the   5   appendChildO  method.  The  document.getElementByldO  returns  a  reference  to  the  first  paragraph.  This  will  be  the  reference  node,  or  the  node  in which  the  second  paragraph  will  be  in- serted.  The  new paragraph  is  inserted  above  the  first  paragraph   see  Figure  15.16 .   6  7  When  the  page  is  loaded,  this  function  will  be  called.  It  will  cause  a  new  para- graph  to  be  inserted  above  the  paragraph  identified  below  this  line,  with  the  id,  firstp.   G  Inserting Before  -  Mozilla  Firefox  File   Bookmarks   History   View   Edit   Tools   Help   C   Qj    file:   C: ™amp   Loading...     I ns   I  am  inserting  myself above  you!   I was  supposed to  be  first.   Figure  15.16   The  DOM insertBeforeO  method.   15.7.5  Creating Attributes for Nodes  The  setAttributeO  method  creates  a new  attribute  for  an  element.  If an  attribute  with  that  name   nodeName    already  exists  in  the  element,  it  is  replaced  by  the  new  one.  See  the  section  "Cloning  Nodes"  later  in  this  chapter  for  more  examples.   FORMAT   reference_to_element.setAttribute attributeName,  value ;  reference_to_element.setAttribute attributeName,  value,  boolean ;     boolean 0  turns off case-sensitivity,  1 is on  the default     Internet  Explorer only    638   Chapter  15      The W3C DOM and JavaScript   EXAMPLE   15.9        Create Elements and Attributes with the DOM       p {  font-style:arial;   color:darkblue;  font-size:18   }                  window.onload=function  {       Create  three paragraphs with  text  for var i=l;  i <= 3;  i++ {   var  aPara=document.createElement "p" ;  var aBR = document.createElement "br" ;  var theTXTl=document.createTextNode "Hello,  world.  " ;  var theTXT2=document.createTextNode "I hope you're   enjoying this DOM stuff!  " ;  var theTXT3=document.createTextNode "I am paragraph "  +   i +"." ;   aPara.setAttribute "id","aPara"  + i ;     set  id attribute  for the p element   document.body.appendChild aPara ;  aPara.appendChild theTXTl ;  aPara.appendChild aBR ;  aPara.appendChild theTXT2 ;  aPara.appendChild aBR ;  aPara.appendChild theTXT3 ;   } alert document.getElementById "aParal"  ;   }               EXPLANATION   1  When  the  page  has  completely  been  loaded,  this  anonymous  function  will  be  called.  Its  function is  to  create  three paragraphs with unique  ids  and  text   see Fig-   15.7  Modifying the DOM  Appending, Copying, and Removing Nodes    639   E X P L A N A T I ON   4  A reference  to  a new br element is  created.  5  A new text node is  created  to  be  placed in  each paragraph.  6  A unique  id  attribute is set for  each paragraph.  7   The  getElementById    method  returns  a  reference  to  the  paragraph  identified  as  "aParal".  The  alert method  displays  the  value  of the  reference.   [ C r e a te   Elements  and  Attributes with  the  DOM  -  Mozilla  Firefox  File   Bookmarks   History   Tools   lie!-,'   Help   Edit   '   C   X   ffl   file:   C: wamp ™™™ setAttributesDOM.htr:.   ^  Loading...   I     Inserting Before     ^  Create  Elements  and  Attrib...   Hello, world.  I hope you're  enjoying this  DOM  stuff!  I  am paragraph  1   Hello, world.  I hope  you're  enjoying tins  DOM  stuff!  I  am  paragraph  2.   Hello, world.  I hope  you're  enjoying tliis  DOM  stuff!  I  am  paragraph 3.   [JavaScript Application]    X    1   [object HTMLPc aragraphElem ent]   Figure  15.17  Creating  new elements and  attributes with the  DOM.   15.7.6  DOM Review: Creating a Blog  The  next  example,  Example  15.10,  is  a  program  demonstrating  how  to  use  the  DOM  methods  and  properties  we  have  covered  thus  far.  The  idea is  to  dynamically  add  new  text  entries,  called  blogs,  into  a  Web  page.  The  user  will  be  presented  with  an  area  in  which  to write his  or her  blog.  After  the  user  clicks  the  'Add  a blog"  button, JavaScript  will  create  a blog object and use DOM  methods  to  define  the structure  of the new entry  in  the  document.1  Each blog entry will be  appended  to  the  previous  one with  the blog- eer's name,  the  date  the bloe was posted,  and  the bloe message.    640   Chapter  15      The W3C DOM and JavaScript   EXAMPLE   15.10        Creating  a  Blog        1   body{  background-color:7fffd4;}  divdivl{ background: white;  border-width:lpx;  margin-left:2 0%;  margin-right:2 0%;   }  p  { margin-left:1%;   font-family:  arial;}          2   function BlogEntry  {  IICreate a blog class   3      Get the current date   11 Properties      Methods   var date;  var message;  var name;  this.setDate=setDate;  this.setBlogger=setBlogger;  this.setMessage=setMessage;  this.showBlog=showBlog;  function setDate  {  var d=new Date  ;  var year=d.getFullYear  ;  var month=d.getMonth    + 1;  var day=d.getDate  ;  date=month + " "  + day + " "  + year;   function  setBlogger nameVal {   name=nameVal;   function  setMessage messageVal {   me s sage =me s s ageVa1;   } function  showBlog  {       Create HTML elements  var para = document.createElement "p" ;  var  count=document.getElementsByTagName "p" .length;      Get number of paragraphs  para.setAttribute "id","para" + count ;    Set id for P  II alert  "There are " + count+ " paragraphs so far. "   ;  var aBR = document.createElement "br" ;    10  11   12  13   14   15  16  17  18   19   15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    641   EXAMPLE   15.10   CONTINUED    divObj.appendChild para ;      Append a paragraph      Create nodes  var txtl=document.createTextNode "Posted by  "+ name  + " on "   var  txt2=document.createTextNode date ;  var  txt3=document.createTextNode message ;  para.appendChild txtl ;  para.appendChild txt2 ;  aBold.appendChild aBR ;  para.appendChild aBold ;  aBold.appendChild txt3 ;  para.appendChild aBold ;     alert document.getElementById "para"   +count .InnerHTML ;   }   }    End class  function addBlog  {   * Add a blog entry using the DOM   and get form data *    message=document.getElementByld "text" .value;  bloggername=document.getElementByld "name" .value;  var blog = new BlogEntryO;      Create a new blog object  blog.setMessage message ;  blog.setBlogger bloggername ;  blog.setDate  ;  blog.showBlog  ;      Call  object's methods   }                                      MoodyWedderBlog                    Enter your name   optional           642   Chapter  15      The W3C DOM and JavaScript   EXAMPLE   15.10   CONTINUED    21   <input  type="button"  value="Add a blog"   onclick="addBlog   ; " >                   EXPLANATION   1  2   3   4   5   This  is  the  CSS  style  sheet  for  the  page.  The  function  BlogEntry     defines  a  class  consisting  of the  properties  and  methods  for  each  new  blog  object  that  is  created.  This  method  will  get  and  format  the  current  date  with  JavaScript's  Date    con- structor.  It will  be  assigned  to  the  date  property  of the  object.  These  next  two  methods  will  set  the  properties  for  the  name  of  the  blogger  and  the  message  the  blogger  typed  into  the  form.  The  showBlogO  method  is  where  we  make  good  use  of  the  DOM  by  creating  ele- ments  and  text nodes.  Each  blog message will  be  placed  in  a paragraph  appended  to  a  div  container.  It  will  contain  the  blogger  name  and  date  on  one  line  and  the  blogger's  message  in  bold  text  on  the  next lines.  Every  time  a new blog is  entered  it will  be  appended  in  a  paragraph  to  the  previous  paragraph.   6  A  new  paragraph  element  is  created  and  a  reference  to  it  is  assigned  to  para.  7  A  unique  id  attribute  is  set  for  each paragraph  after  it is  created.  Every  time  a new  paragraph  is  added  the  document.getElementsByTagName "p"   method  returns  the  number  of p  elements  in  the  document,  causing  the  count  to  go  up  by  one.  This  count  value  is  concatenated  to  the  string  "para"  producing  a  new  id  for  each  new  paragraph  created  on  line  6.   8  A  reference  to  an  HTML  br   break  line   element  is  created  and  assigned  to  aBR.   9   On  the  next  line,  a  reference  to  an  HTML  b   bold   element  is  created.  The  document.getElementByldO  method  returns  a  reference  to  a  div  object  identi- fied  as  divl  on  line  19.  This  is  where  the  paragraphs  will  be  added  and  the  blog  messages  displayed.   10  Now  a  p  element   paragraph   is  appended  to  the  div  object.  11  Three  text  nodes  are  created  with  values  that will  be  inserted  into  the  paragraph.  The  properties  of the  blog  object,  name,  date,  and  message,  contain  the  text  values  that will  be  assigned  to  the  text  nodes.   12  The  text  for  the  paragraph  is  now  appended  as  a  child  node.  13  The  next  line  of  text  is  appended  followed  by  the  br element  and  the  b  element.    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    643   EXPLANATION    CONTINUED    16  The  function  addBlogO  is  a  user-defined  function,  not  part  of  the  class.  Its  func-  tion  is  to  create  a  new  blog  object  and  assign  it  properties.   17  The  form  data   the  blogger's  name  and  blog  message   is  retrieved  with  the   document.getElementByldO   method.   18  An  instance  of  a  new  BlogEntry  object  is  created  and  a  reference  to  it  is  assigned  to  the  variable,  blog.  The methods  for  the  object  are  called  to  set  the properties  for  the  blog  object.   19  After  setting  up  all  the  weather  images,  this  is  the  div  container  where  the  blog   messages  will  be  stored  and  displayed.   20  The user will write  his  or her blog in  a  textarea input device.  After writing the mes- sage,  if  the  user  leaves  the  text  area  and  then  clicks  in  the  box,  the  onfocus  event  handler will be triggered  and  the box will be  cleared by setting its value to  an emp- ty  string.   21  When  the  user  clicks  this  button,  the  onclick  event  hander  will  call  the  addBlogO  function  to  create  a  new  blog  object  and  set  its  properties  with  the  form  data  re- trieved  on  line  17.  The  results  are  shown  in  Figures  15.18  and  15.19.   ^la  Firefox  Bookmarks   Tools   Help   YB^   I  Q   file:   C: wamp www blog5.html   ""      3  splitQ  Me...   Q  The  splitQ  Me...    Q  The  splitQ  Me...   Regular  Expr...   Q  Creating  a  Blog   MoodyWedderBlog   Enter your name   optional    I  Add a blog      644   Chapter  15      The W3C DOM and JavaScript   >ry  Bookmarks  Tools  Help   file:   C: wamp www blog5.html   The split   Me...   [^3 The splitQ Me...  Q The splitQ Me...   *+$ Regular Expr...  Q Creating a Blog   MoodyWedderBlog   Posted by Diana Bridges on 3 20 2010  Today is the first day of spring!  It is snowing  in Tulsa. That is a  real  hummer.   Posted by Gloomy Guss on 3 20 2010  "Contradicting  conventional  wisdom,  researchers found that daily  temperature,  wind,  sunlight,  precipitation,  air  pressure,  and  how  long  the  days were  had  no  significant effect on  positive  mood." Check  http :  www. we h m d. co m b a I a n ce n e ws 20081016 h o w-th e -we ath e r- affe cts-o u r-m o o ds   Posted by Sunny M.  Feeling on 3 20 2010  According to  another study  and the  University  of Michigan, 72  degrees  Far is ideal for a  good  mood  and you should  go  outside for at least 30  minutes when  it's sunny.  I  plan to  do that right now.  Beautiful spring  day  in  March!  happy mood   Enter your name   optional   [Sunny M. Feeling     According to another study and the  University of Michigan,  72 degrees Far is  ideal for a good mood and you should go  outside for at  least 30 minutes when it's  sunny.  I plan to do that right now.  Beautiful spring day in March!  happy mood   I  Ij^d a jbjjogi] ]   Figure  15.19  The  blog  entries are a p p e n d ed   as they are  a d d e d.   15.7.7  Creating a Table with the DOM  Creating a  table with  the  DOM  can  be  a little  confusing to  say  the  least. Just as we  have  seen in previous examples,  the DOM requires two steps:  first,  to  create an empty element  with  the  createElementO  method,  and  then  to  insert  the  element  into  the  document  tree  with  the  appendChildQ  or  insertChild    method.  That  means  for  the  table  element,  the  table  heading,  captions,  rows  and  table  data,  and  so  on.  you  must  create  an  empty  ele- ment  and  then  place  it  in  the  tree.  Forgetting  a  step  will  lead  to  a  partial  table  or  an    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    645   Explorer  does  not  create  the  tBody,  which  is  automatically  implied  when  using  HTML.  See   http:  msdn.microsoft.com en-usAibrary ms532998 VS.85 .aspxTOM_Struct.   Example  15.11  demonstrates  the  steps  needed  to  create  a  table  dynamically with  the  DOM.  The  CSS  and JavaScript could  now be  placed in  their  own respective  files,  leaving  the  HTML  document  unobstructed.  This  is  unobtrusive JavaScript  at  play!   File   Edit   Search   View   Help   M   file :   C: wamp w™™ tableDOMIEFF2. html   1=1=1  "  Document - DOM Nodes   WSi "  Object - DOM Node   id   class   m   l U BI   Ins   Local Name:  Namespace  URI:  Node Type:   Document   nodeName   nodeValue   -  HTML   +  HEAD  -  BODY   j--text  -  DIV   -  TABLE   THEAD  -  TR   DTH  DTH  DTH   -  TBODY  TR  TR  TR  TR  TR   Figure  15.20  Looking  at  a  table  with  the  Firefox  DOM  Inspector.   E X A M P LE    15.11        Creating  a DOM Table       table { width:380px;   1   border:  2px solid darkgreen;  background-color:8fbc8f;  }   th { font-size:  larger;  font-family:arial}  td { border:  lpx solid 888878;  padding: 5px;  background-color:fff8dc;    646   Chapter  15      The W3C DOM and JavaScript   EXAMPLE  15.11   CONTINUED       window.onload =  function  {   2  3   4  5   9  10  11   12  13  14  15  16   17       Create the table elements  var Table = document.createElement "table" ;  Table.setAttribute "id","myTable" ;     Create id  var THead = document.createElement "thead" ;  var TBody = document.createElement "tbody" ;  var Row,  Cell;  var i,  j;      Declare  two-dimensional  array of table data  var header=new Array   "State","Capital","Abbr" ;  var state =[  ["Arizona","Phoenix","AZ"],   ["California","Sacramento","CA"],  ["Maine","Augusta","ME"],  ["Montana","Helena","MT"],  ["New York","Albany","NY"]       Insert  the created elements into Table  Table.appendChiId THead ;  Table.appendChiId TBody ;      Insert a row into the header  Row = document.createElement "tr" ;  THead.appendChild Row ;      Create and insert  table cells into  the header row.  for  i=0;  i<header.length;  i++ {   Cell = document.createElement "th"   ;  Cell.innerHTML = header[i];  Row.appendChild Cell  ;   }      Insert rows and cells into bodies.  for  i=0;  i<state.length;  i++ {  Row = document.createElement "tr"  ;  TBody.appendChild Row ;  for  j=0;  j<state[i].length;  j++ {   Cell = document.createElement "td" ;  Cell.innerHTML = state[i][j];  Row.appendChild Cell ;   }       Insert the table into the document tree  Tcontainer=document.getElementByld "TableContainer" ;  Tcontainer.appendChild Table ;   }        15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    647   EXAMPLE   15.11    CONTINUED                   EXPLANATION   18       1   The  CSS style sheet will  create  the style  for  the  table we  are  creating, including the  table  itself,  its  heading,  and  cells.   2  When  the  page  loads,  the  startUp   unction  will  be  called.  3  4  5  6  Now that  the  table  node  has  been  created, we  insert  the  table  nodes  into  the  main   The  next  statements  create  the  table,  its  header,  and  body  for  the  DOM  tree.  This  array will  contain  the  header  values  for  the  table.  This  two-dimensional  array  contains  the  values  that will  go  into  the  table  cells.   DOM  tree,  at which  point  the  browser  can  display  it.   The  row  is  inserted  into  the  DOM  tree  for  the  header  of  the  table.  This for  loop  will  iterate  for  each  cell  needed  to  create  the  header  of  the  table.   7  Next  a  row  is  created  for  the  header  in  the  table  and  a  reference  returned.  8  9  10  The  cell  for  the  header  data  is  created.  11  From  the  array  of  data  for  the  header   "State',  "Capital",  and  "Abbr" ,  the  in- nerHTML  property will  be  assigned  the  data  for  a  cell  each  time  through  the  loop.  Next  the  data  is  appended  to  each  of the  cells.   12  This for loop  will  iterate  until  all  the  rows  and  cells  have  been  filled  for  the  table.  13  The  table  rows  are  created,  one  by  one,  and  appended  to  the  DOM  tree.  14  This  nested or loop  will  iterate  through  each  of  the  cells  in  a  row  so  that we  can  access  the  data  in  the  two-dimensional  array  created  on  line  5  and  put  it  in  the  table  cells.   15  First we  need  to  create  a  table  cell  for  each  row.  16  Once  the  table  cell  is  created,  the  actual  data  from  the  two-dimensional  array,  called  states,  must  be  inserted  in  each  table  cell  and  appended  to  the  DOM  struc- ture.   17  A  reference  to  the  div  container   line  18   is  returned  by  the  getElementID    meth-  od,  and  the  entire  completed  table  is  appended  to  the  div.   18  The  HTML  portion  of  this  page  is  very  small.  It  consists  of     tags  that  will  hold  the  table  built with  the  DOM  methods  and JavaScript.  See  Figure  15.21  the  result.    648   Chapter  15      The W3C DOM and JavaScript   Creating a DOM Tab  e  - Mozilla  Firefox  Tools   Bookmarks   History   View   Edit   File   Help     im   C   M   iZl   file:   C: Docum        i f-    3  Most  Visited   j  Getting  Started   Latest  Headlines   j  EzEdit—SF  reports    >   »   [J  Creating  a  DOM  Table   State   Capital   Abbr   Arizona   Phoenix   California   Sacramento   AZ   CA   ME   MT   NY   Maine   Montana   New  York   1  1  Done   Augusta   Helena   Albany   Figure  15.21  Creating  a  table with  the  DOM  from  Example  15.11.   1   15.7.8  Cloning Nodes  To  make  a  copy  of a  node  you  can  use  the  cloneNodeQ  method.2  The  cloneNodeQ  method  returns  a  duplicate  of the  current node  with  all  of its  attributes.  It  does  not become  part  of the  document;  that is,  it  does  not  have  a  parent node,  until  it  is  appended  to  another  node.  This  method  takes  only  one  argument  of Boolean  type,  true  or  false,  which  is  not  mandatory.  If  the  value  is false,  then  only  the  node  and  its  attributes  are  cloned  but  not  any  child  nodes   which  means  any  of  its  text  is  not  cloned .  If set  to  true   deep  copy   then  the  cloning  will  include  all  of its  child  nodes  as  well.  Caveat:  If you  clone  an  ele- ment and it has  an  id  attribute, you will  have  to  give  the  cloned  node  its  own  id,  because  ids  must  be  unique.  See  Example  15.14.   FORMAT   EXAMPLE   cloneNode boolean     *true:  recursive or deep copy;  false:  copy   current node and attributes,  not child  nodes. *    newPara=oldPara.cloneNode true ;    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    649   EXAMPLE   15.12            Cloning  Nodes    p { font-family: cursive ;   background-color:  yellow;  border-style:solid;  border-width:2px;  border-color:blue ;   }          function addPara mode {   1  2  3  4  5   6   7   var pi  = document.getElementByld "paral" ;  var  oldPara=pl.firstChild;  newPara=oldPara.cloneNode mode ;  pl.appendChild newPara ;       }             The news is so fabulous,  I need to shout it out again! You  won the lottery!       <input  type="button"  onClick="addPara true ;"   value="Clone me"   >           EXPLANATION   The  purpose  of  the  addPara    function  is  to  clone  the  text  in  a  paragraph.   1  2  We  get  a  reference  to  the  paragraph  that will  be  cloned.  3  4  Now  a  new  paragraph  is  created,  an  exact  replica  of  the  old  paragraph.  It  is  a  re-  The  firstChild  contains  the  contents  or  text  of the  paragraph.   5   6   cursive  copy,  so  all  child  nodes  will  be  copied  as  well.  To  make  the  clone  a  real  part  of  the  document,  it  is  appended  to  the  first  para- graph.  This  is  the  paragraph  that  will  be  cloned.  It  is  given  an  id  to  reference  it  in  the  function  on  line  2.   7  When  the  button  is  clicked,  the  addPara    function  is  called  with  the  Boolean  val- ue  true,  which will be used  to  make  a  deep  copy of the  first paragraph.  See  Figures    650   Chapter  15      The W3C DOM and JavaScript   The news  is so  fabulous  I need to shout  it out 090 in I You won the lottery I   I  Clone  me      Figure  15.22  Before  the cloning  takes  place.   The news  is so  fabulous  I need to shout  it out againl  You won the  lottery!  The nevjs  is so  fabulous  I need to shout  it out 090ml  You won the  lotteryl     i Clone me i     Figure  15.23  The  user clicks the  button  a nd   the  first paragraph  has  been  cloned.   Cloning a  Node Attribute.  The next example uses cloning to set an attribute for an  element,  in  this  case  the  style  attribute.  If the  same  attribute  already  exists  for  that  node,  it will  be  replaced  with  the  new  attribute.   F O R M AT   E X A M P LE   setAttributeNode referenceToAttribute    var  plStyle=pl.getAttributeNode "style" ;  var  clonePlStyle=plStyle.cloneNode mode ;  p2.setAttributeNode clonePlStyle ;   E X A M P LE    15.13        Attributes  and Nodes        function  stylePara mode {   var pi  = document.getElementByld "paral" ;  var p2  = document.getElementByld "para2" ;  var  plStyle=pl.getAttributeNode "style" ;   l  2   3    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    651   EXAMPLE     C O N T I N U E D    15.13             6   <p id="paral" style="font-family:  cursive ;   background-color: yellow;  border-style:solid;  border-width:2px;  border-color:blue;">   The news is so fabulous,  I need to shout it out again! You  won the lottery!        1 like your style,  not what you say.     <input  type="button"  onClick="JavaScript:stylePara false ;"   value="Clone me"   >   7           EXPLANATION   1   The  purpose  of  the  stylePara    function  is  to  copy  the  style  of  a  paragraph  where  style  is  an  attribute  of the  first  paragraph.   To  set  the  class  attribute  use  the  class- Name  property.    2  First we  need  to  get  a reference  to  both  paragraphs,  the  one with  the  style  attribute   set,  and  the  one  without  it.   3  Next  we  use  the  getAttributeNodeO  method  to  get  a  reference  to  the  style  attribute   4  5  6   for  the  first  paragraph.  The  returned  reference  is  assigned  to  pi Style.  This  cloning  step  creates  a  replica  of  the  style  attribute  of  the  first  paragraph.  The  setAttributeNodeO  method  sets  the  style  attribute  for  the  second  paragraph.  The  style  for  the  first  paragraph  is  assigned  to  the  style  attribute.  This  is  the  attri- bute  that will  be  cloned  and  set  for  the  second  paragraph.   7  When  the  user  clicks  this  button,  the  function  styleParaQ  will  be  called  with  an  argument  of false.  In  this  example  the  program  works  the  same  way whether  you  send  true  or  false  as  the  mode.  Figures  15.24  and  15.25  show  the  results.   The news  is so  fabulous  I need to shout  it out 090 in I You won the lottery I   I  like  your  style,  not  what  you  say.     Clone  me      652   Chapter  15      The W3C DOM and JavaScript   The news  is so  fabulous  I need to shout  it out 090 in I You won the lottery I   I  like  your  style  not  what  you  soy   I  i Clone me i     Figure  15.25  After clone,  style  is applied  to  the  text in  the  second  paragraph.   Cloning a Table with a Unique id.  In  the next example we  clone  a table,  the same  table  created  in  Example  15.13.  Rather  than  copying  all  the  code,  this  example  shows  the  steps  necessary  to  clone  the  table  and  then  give  the  new  table  a  unique  id.   EXAMPLE  15.14   -«Continued from Example 15.11 at line 17.>       Insert  the table into the document  tree—line 17      in Example 15.11  Tcontainer=document.getElementByld "TableContainer" ;  Tcontainer.appendChild Table ;      Let's make a copy of the  table  var tableCopy = document.getElementByld "myTable" ;  var newTable = tableCopy.cloneNode true ;  newTable. id = ,,newtable_id" ;  newDiv  =  document.getElementByld "NewTableContainer" ;  newDiv.appendChild newTable ;   }                                  EXPLANATION   The  id  attribute  for  the  table  created  in  Example  15.11  is  myTable.  The  document.getElementByldO  method  returns  a  reference  to  that  table.  The  original  table  created  in  Example  15.11  is  cloned  with  the  cloneNode     meth- od.  It  is  a  replica  of the  original  table  including  all  of its  attributes.   1  2  3  4  5   6   1   2    15.7  Modifying the DOM  Appending, Copying, and Removing Nodes    653   EXPLANATION      C O N T I N U E D    4  A reference  to  a new div  is returned.  5  6   The cloned table is appended to the div just below the original table  see Figure 15.26 .  This is  the  div  container  for  the  cloned  table.   O  Creating a  DOM  Tab e  - Mozilla  Firefox  Tools  File   Bookmarks   History   View   Edit   Help   E 0H       C   X    à     D    file :   C: Document:   fa     ä i"   Gc   [ ¿t   Most  Visited  J  Getting  5tarted   Latest  Headlines   j  EzEdit—SF  reports   [J  Creating  a  DOM  Table   1   State   Capital   Abbr   »  1       Arizona   Phoenix   California   Sacramento   Maine   Montana   New  York   1   Augusta   Helena   Albany   Arizona   Phoenix   California   Sacramento   Maine   Montana   New  York   Augusta   Helena   Albany   AZ   CA   ME   MT   NY   AZ   CA   ME   MT   NY   State   Capital   Abbr   1  Done  Figure  15.26  Cloning a  table with a  unique id.   1   15.7.9  Removing a Node  If you want  to  dynamically  remove  a post  from  a blog  or  an  ingredient  from  an  online  recipe, it can be done with the DOM.  To  delete  an  element or node from  the DOM  tree,  we  use  the  removeChildQ  method.  This  method  must  be  called  from  the  parent  node    Chapter 15     The W3C DOM  and  JavaScript   654   FORMAT   EXAMPLE   removeChild referenceToChild    parentDivl.removeChild div2  ;   EXAMPLE  15.15       }               this is divl    this is div2    this is div3            EXPLANATION    Removing a Child with the DOM        function removeDivO  {   var divMid = document.body.getElementsByTagName "div" [1];  divMid.parentNode.removeChild divMid ;      Remove  the middle div      alert  document.body.getElementsByTagName "div"  .length       + " divs left" ;  prints 2   1  2   The  function  called  removeDivO  will  remove  a  div  element  from  the  DOM  tree.  The  getElementsByTagName0  method  returns  a  reference  to  the  second  div  tag  in  the  document.  The  [1 j  index  is  applied  to  the     reference  returned  by getEle- mentsByTagName 0,  and  retrieves  the  second  div.  [0]  would  be  the  first  div  in  the  list  of     tags.   3  Using  the  reference  to  the  second   ,  we  go  to  the  parent     and  remove  its   child,  the  second  div   see  Figure  15.27 .  Three  divs  are  defined  in  this  document.   4    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes    655   O Removing a Child with the DOM  - Bookmarks  File   History   View   Edit   *  c  x  a>  or   <  [tioning      Positioning      Positi   this is  divl  this is  div3   Figure  15.27  A divcontainer  is  removed.   EXAMPLE  15.16        Delete an Element with the DO       p {  font-style:arial;   color:darkblue;  font-size:18   }          function remove f {   1  2  3  4  5   6   7   for var i=0;  i<f.choice.length;  i++ {     Find  the paragraph  that  was checked   i f f.choice[i].checked {  var  p_element=document.getElementById f.choice[i].value ;  document.body.removeChild pelement   }   }   }                     Create three paragraphs with text  for var i=l;  i <= 3;  i++ {   var  aPara=document.createElement "p" ;  var aBR = document.createElement "br" ;  var aTXTl=document.createTextNode "Hello,  world.  " ;  var aTXT2=document.createTextNode "I  really don't   want to be deleted!  " ;  var aTXT3=document.createTextNode "I am paragraph "  + i ;  aPara.setAttribute "id","aPara"  + i ;   d o c u m e nt    .  b o dv   .  a t i T i e n i i C hi   Id    I  a P a ra   ^        656   Chapter  15      The W3C DOM and JavaScript   EXAMPLE   15.16     C O N T I N U E D    aPara.appendChild aTXT2 ;  aPara.appendChild aBR ;  aPara.appendChild aTXT3 ;   }          value=" aParal" >Paragraph 1  xbr  >   Which paragraph do you want to remove?    <input  type="radio"  name="choice"  <input  type="radio"  name="choice"  <input  type="radio"  name="choice"   value=" aPara2 " >Paragraph 2  xbr  >  value=" aPara3 " >Paragraph 3  xbr  >   <input  type=button value="click for paragraph to remove"   onClick="remove this.form ;"   >               EXPLANATION   1   5   2  3  4   This  user-defined  function  is  responsible  for  removing  a  paragraph  based  on  the  user's  choice.  The  parameter, ,  is  a  reference  to  the  form  object passed  when  the  button  was  clicked  on  line  9.  The or loop  will  iterate  three  times,  one  for  each  radio  button.  The  radio  button's  property,  checked,  returns  true  for  the  button  if it was  selected.  Based  on  the  choice  of  the  user   i.e.,  the  radio  button  that  was  checked ,  the  ge- tElementByldO  method  will  return  a  reference  to  the  value  attribute  of  the  radio  button  that  happens  to  be  the  unique  id  of the  paragraph.  The  paragraphs  are  children  of the  body  element.  Now  that we  have  a  reference  to  the  paragraph,  it  can  be  removed  from  the  body  of  the  document  with  the  rem- oveChildO  DOM  method.  This for loop  cycles  three  times.  For  each  iteration  of the  loop  a  new  paragraph  is  dynamically  created  using  the  DOM.  Each  paragraph  is  assigned  a  unique  id  attribute  to  be  used  by JavaScript  to  get  a  reference  to  the  paragraph  to  be  removed.  The  user  can  click  a  radio  button  to  remove  one  of the  paragraphs.   8  9  When  the  user  clicks  this  button,  a  reference  to  this  form,  this form,  is  sent  to  the  function  called  remove  .  This  process  is  shown  in  Figures  15.28,  15.29,  and  i  c  Q  n   6   7    15.7  Modifying the DOM  Appending, Copying, and Removing Nodes    657   '-'> Delete an Element with the DOM - Mozilla Firefox  File   Bookmarks   History   Tools   View   Help   Edit   C   iß    lJ    file:   C: wamp www deleteDOM.html   Create  a  New7~   ^  Create  a  New  ...     ^  Create  a  New  ...     ^  Create  EU   Hello,  world.  I  really  don't  want  to  be  deleted!  I  am  paragraph  1   Hello,  world.  I  really  don't  want  to  be  deleted!  I  am  paragraph  2   Hello,  world.  I  really  don't  want  to  be  deleted!  I  am  paragraph  3   "Which paragraph do you want to remove?  OParagraph 1  OParagraph 2  OParagraph  3    click for paragraph to remove     Figure  15.28  Three  paragraphs have  been created.   '-'> Delete an Element with the DOM - Mozilla Firefox  File   Bookmarks   History   Tools   View   Help   Edit   C   iß    lJ    file:   C: wamp www deleteD   Create  a  New7~   l"1^  Create  a  New  ...    l"1^  Create  a  New  ...     ^  1   Hello,  world.  I  really  don't  want  to  be  deleted!  I  am  paragraph  1   Hello,  world.  I  really  don't  want  to  be  deleted!  I  am  paragraph  2   Hello,  world.  I  really  don't  want  to  be  deleted!  I  am  paragraph  3   "Which paragraph do you want to remove?  OParagraph 1  ii Paragraph  2  OParagraph  3    click for paragraph to remove     Figure  15.29  The user clicks on paragraph 2 for removal.    658   Chapter  15      The W3C DOM and JavaScript   File   Edit   View   History   Bookmarks   Tools   Help   C   ÎÈ    LJ    file:   C: wamp www deleteDO   ^  Create  a  New  ...     ^  Create  a  New  ...     ^  Create  a  New  ...     ^  Cr   Hello,  world.  I  really  don't  want  to  be  deleted!  I  am  paragraph  1   Hello,  world.  I  really  don't  want  to  be  deleted!  I  am  paragraph  3   "Which paragraph do you want to remove?  OParagraph 1   Paragraph  2  OParagraph  3    i click for paragraph to  remove i     Figure  15.30  Paragraph 2  has been  removed.   15.7.10  Scrolling with the Nodes  In  the  following  example,  all  three  layers  of a  a  Web  page  are  represented:  the  HTML  content  layer,  the  CSS  presentation  layer,  and  the JavaScript behavioral  layer.  By  using  the getElementByldO  method  and  a little node knowledge,  a scrolling marquee is  created  in Example  15.17. In Chapter  10, Example  10.11 we saw scrolling in the window's status  and title bar.  Now we  can scroll within  the body of the document.  The program  creates  a message  that will  continuously scroll  across the screen.  The  original message is placed  within  a     container.  By  first  identifying  the  HTML  div  element—getElement- Byld  —JavaScript  can  then  reference  its  child  node,  which  is  the  text  of  the  message   firstChild .  This  is  depicted  in  Figure  15.31.   parent  node   child  node   Figure  15.31  Referencing  a  child  node  requires first identifying  the div element.    15.7  Modifying the DOM   Appending,  Copying,  and  Removing  Nodes   EXAMPLE  15.17   659        Scrolling  Text        divl { background-color:darkgreen;   1   color: white;  font-family:courier;  font-weight: bold;  position:absolute;  border-style:groove;  border-color:white;  padding-left:lOpx;  top:2 0px;  left:1Opx;  width: 595px; height:  6%;  overflow: hidden;   2  3  4   5   6   7   8  9  10  11   12   13   }  img { position: absolute; top: 10px;left:60px;  body { background-color :669966;}   border-style:solid;border-color:"darkgreen";}          Windows Magazine *     *Modification of text box marquee by Dave Methvin,  var scroll_speed = 200;  var chars = 1;  var divElement;  window.onload=function    {       200 milliseconds   divElement=document.getElementById "divl" ;   }  function scroller    {   window.setTimeout 1 scroller  1,scroll_speed ;  var  msg=divElement.firstChild.nodeValue;  divElement.firstChild.nodeValue  = msg.substring chars    + msg.substring 0,chars ;   }  scroller  ;                     The latest news from Baghdad is not good tonight.  Sand and  rain are hindering our troops.  The number of refugees  continues to increase in the north...    660   Chapter  15      The W3C DOM and JavaScript   EXPLANATION   4   5   1  An  ID  selector  is  defined  with  a  style  for  the  div  element  on  line  13.  2  3   The  size  of the  div  container  is  defined.  If  the  text  within  the  div  container  will  not  fit within  the  dimensions  of  the  box,  the  overflow  property  will  adjust  it  to  fit.  The  image  is  fixed  at  this  absolute  position  on  the  screen  and  has  a  dark  green,  solid  border.  The  scrollerO  routine   line  8 ,  modified  from  the  original,  was  found  at  the Java  Planet  Web  site  and  submitted  by  Dave  Methvin.   Thank  you  Dave,  wherever  you  are!   The  initial  values  used  for  the  scrollerO  function  are  assigned  values.  One  is  the  speed  for  the  timer,  the  other  the  value  of  an  argument  to  the  substrO  method.  This  anonymous  function  is  called  after  the  document  has  been  loaded.  Its  pur- pose  is  to  get  a  reference  to  the  div  element.  The  getElementByldQ  method  returns  a  reference  to  the  div  element.  The  function  called  scrollerO  is  defined.  Its  function  is  to  cause  the  text  found  in  the     container  to  scroll  continuously  from  the  right  side  of  the  container.  The  window's  setTimeoutO  method  is  used  to  call  the  scrollerO  function  every  200  milliseconds   .2  seconds .  It's  the  timer  that  creates  the  action  of  actually  scrolling.   8   7   6   9   10  The  div  element  is  a  parent  node.  It  has  a  child  node.  The  value  of its  first  child,  divElementfirstChild.nodeValue,  is  the  textual  content  of  the  message;  that  is,  the  text  found  between  the     tags.  The  variable  msg  gets  the  value  of  the  child  node.   substring  method  will   11  The  value  returned  by  msg.substr l   is  "he  latest  news from  Baghdad  is  not  good  to- night.  Sand  and  rain  are  hindering  our  troops.  The  number  of  refugees  continues  to  in- crease  in  the  north..."  Notice  that  the  first  character  in  the  message  has  been  re- moved.  The  next  character—  substring 0,l —and  append  it  to  the  first  value  resulting  in  "he  latest  news  from  Baghdad  is  not  good  tonight.  Sand  and  rain  are  hindering  our  troops.  The  number  of  refugees  continues  to  increase  in  the  north. ..T".  All  of this  is  assigned  back  to  the  val- ue  of  the  child  node.  In  200  milliseconds,  the  scrollerO  function  is  called  again,  and  the  message  becomes  "e  latest  news from  Baghdad  is  not  good  tonight.  Sand  and  rain  are  hindering  our  troops.  The  number  of  refugees  continues  the  north...Th",  and  so  on.   increase   return   first   the   in   to   12  The  scrollerO  function  is  called  for  the  first  time  here.  13  The     tags  contain  the  text  of  the  message  that  will  be  scrolled.  Its  id,  "divl",  defines  the  CSS  style  that  will  be  used,  and  is  the  unique  identifier  that  will  be    15.8  Event  Handling and  the DOM   661   Figure  15.32  A  scrolling  marquee  continues  to  print  news  across  the  image.   15.8  Event Handling  and the DOM   15.8.1  The HTML Inline Way  We  have  been  using  event  handlers  like  onClick,  onSubmit,  onMouseOver,  throughout  this  text.  In  fact,  Chapter  13,  "Handling  Events,"  described  in  detail  all  of  the  different  event  handlers  and  how  to  use  them.  They  are  the  oldest  and  simplest  way  that  is  browser  compatible.  The  following  example  uses  the  onClick  handler  as  an  attribute  of  the  button  element.  When  the  user  clicks  the  button,  the  function  movePosition    will  be  called.   <input type="button"  value="move text"  onClick="movePosition  "   >   But  using  this  type  of handler  violates  the  principle  of  separation  of  the  layers;  that   is,  the  separation  of  markup  from JavaScript.   15.8.2  The Scripting Way  To  keep  the  markup  and  the JavaScript  separate,  the JavaScript  provided  a way  for  pro- grammers  to  apply properties  to  any object in  the  HTML  tree.  In  the  following example,  the  onLoad  event  property  is  applied  to  the  window  object  so  that  when  the  document    662   Chapter  15      The W3C DOM and JavaScript   window.onload=function  {   document.getElementById "bdy" .style.backgroundColor="lightgreen";   }   15.8.3  The DOM Way  The  W 3C   Dom  Level  2  standardized  the  event  model  to  solve  compatibility  problems  between  browsers.  Most  modern  browsers   Mozilla,  Opera,  Safari,  Chrome  and  Kon- queror   are  W 3C   compliant,  except  Microsoft  Internet  Explorer  which  has  its  own  model.   DOM  objects  can  be  registered  as  event  listeners.  This  feature  can  be  used  to  assign  multiple  handlers  for  a  given  event  which  is  the  main  difference  from  the  traditional  model.  To achieve this,  event listeners are no longer stored as HTML attribute values but  are  registered  with  an  event  listener  method.   The  W 3C   supports  event  bubbling  described  below,  but  has  a  useCapture  option  can   be  used  to  specify  that  the  handler  should  be  called  in  the  capture  phase.  Browser .   15.8.4  Bubbling and Capturing  When  we  discussed  events  in  Chapter  13  we  introduced  capturing  and  bubbling  to  describe  the  flow  of events  in  a  program.  The  way  that  the  events  are  captured  differs  in  different  browsers.  In  Mozilla  Firefox,  for  example,  the  event  comes  to  life  at  the  window  level  and  is  sent  down  the  tree  of  nodes  until  it  finally  reaches  the  target  object  for  which  it  was  intended,  whereas  with  Internet  Explorer  the  event  springs  to  life  for  the  target it was  intended  to  affect,  and  then  sends  information  about  the  event  bubbling  back  up  the  chain  of  nodes.  Handling  the  way  events  propagate  has  been  another  browser  compatibility  issue.  The  W 3C   DOM  Level  2  allows  the  DOM  nodes  to  handle  events  with  a  combination  of  these  methods,  but  defaults  to  the  bubble  up  propagation  model.                       15.8  Event  Handling and  the DOM   663   HOW Bubbling Works.  In  Figure  15.33,  the  document  contains  a     that  con- tains  a     that contains  a    that contains  an     tag.  Now assume  that a  click event  handler  has  been  assigned  to  all  four  of  them.  When  a  user  clicks  the  link,  the  events  bubble up.  The  click's  original  target,  the   ,  gets  to  see  the  event first,  and  then passes  it upward  to  the     for  further  processing, which  passes  it  on  to  the   , which  finally  passes it up  to  the  body  of the  document.  This  program was  executed  in  three  browsers,  Firefox,  Opera,  and  Internet  Explorer.  All  of them  use  bubbling   HOW  C a p t u r i ng   Works.  With  capturing,  when  the  user  clicks  the  link,  the  link  doesn't get  the  event first.  Instead,  the  event listener  attached  to  the  document grabs  the  event  first  and  processes  it.   That  is,  it  captures  the  event  before  it  gets  to  its  intended  target.   The  event is  then passed  down  to  the   's  event handler.  The  event then  goes  to  the   ,  and finally to the  .  That is,  all  of the  clicked-on object's  "ancestors"  higher  up  in  the  document  capture  the  event  for  processing  before  sending  it  down  the  chain  to  its  intended  target.   See  event  listeners  for  setting  event  capturing.   EXAMPLE  15.18        Bubbling         * This program behaves the same way in both Firefox and   Internet Explorer and Opera.  The W3C states bubbling as  the default.  *    1  2  3   4   5   var dl,pl,p2 al;  window.onload=£unction  {   bl=document.getElementByld 1bdyl1  ;  dl=document.getElementByld 1divl1 ;  pl=document.getElementByld  paral     p2=document.getElementByld 'para21   al=document.getElementByld 'linkl'   bl.onclick=iam;  dl.onclick=iam;  pi.onclick=iam;  p2.onclick=iam;  al.onclick=iam;   }  function  iam  {   alert this.id ;   }            Chapter  15      The W3C DOM and JavaScript     C O N T I N U E D    15.18      Another paragraph element with text.          link    664   EXAMPLE           EXPLANATION   Global  variables  are  declared  for  the  script.   l  2  Once  the  page has  loaded,  the  onload  event is  triggered  and  the  anonymous  func-  tion  is  called.  The  getElementById    method  is  used  to  get  a  reference  to  on  the  elements  in  the  page:  the  body,  the  div,  the  paragraph,  and  the  link.  For  each  element  an  onclick  event  is  registered.  The  iam    function  will  be  called  when  the  event happens.  When  the user  clicks  the link,  the  function will be  called  and  then  bubble  up  to  the  parent  of  the  link,  its  grandparent,  and  so  on.  If you  start at say "paral"  and  click on  that paragraph,  the bubbling starts from  there  and  ignores  those  events  for  "para2"  and  "linkl".  This  function  will  be  called  when  the  click  event  happens  on  each  of the  elements  listed  above.  See  the  output  to  see  when  this  function  is  called.  The  body  of the  page  is  given  a  unique  id.  In  this  example,  the user  clicked  the link, which started  a chain  of events bubbling  up  from  there,  as  shown  in  Figures  15.34  and  15.35.   7   3   4   5   6  7   O  register  events  -  Windows  Internet  Explorer   ;      §   file:   C: wamp www aJJEv~y]   *t   A.   File   Edit   View   Favorites   Tools   Help   Favorites     g register  events      S   Bubble bubble...   Some text in a paragraph element.   Another paragraph  element with text,  link    15.8  Event  Handling and  the DOM   665   Message  from web page   Message  from web page   Message  from web page   para?   b d yl   Figure  15.35  The  user clicked  on  the  link first,  a nd   it  bubbled  up  from  there  for e a ch  element.  The  b o dy   element  was  last  a nd   at  the  top  of  the  bubbling  chain.   Stopping or Cancelling the Event Flow.  The  W 3C   event  model  allows  you  to  cancel  or  stop  the  flow  of a  set  of events  from  happening.  In  the  last  example,  once you  clicked  on  the  link,  the  next click event happened,  and  so  on,  until  the  last element,  the  body,  was  reached.  In  the  next  example,  the  bubbling  is  stopped  with  the  stopPropaga- tion    event  method,  a  method  provided  to  stop  bubbling  in  W 3C   compliant  browsers.  Some  event  methods  are  given  in  Table  15.7.   Table  15.7  Event  Methods   stopPropagationO   Prevent further propagation of an event during event flow.   prevmtDefaultQ   Cancels the event if it is cancelable, meaning that any default  action normally taken when the  event happens, will not occur.   initEvmt eventType,  isBubble,  isCancelable    Event type such as click, mousedown, and so on. Boolean true or  false  to  determine  event's  default  event  flow, bubble  or cancel.   The cancelBubble Property  Internet Explorer ,  if  using  internet  Explorer,  this  is  how you  would  cancel  the  bubbling  in  Example  15.19  with  the  cancelBubble  property.  If set  to  true  this  property  disables  bubbling  for  this  event,  preventing  the  next  event  in  the  hierarchy  from  receiving  the  event.   event.cancelBubble = true;   EXAMPLE  15.19        Bubbling  Cancelled        var dl,pl,p2 al;  window.onload=function  {   b1 ^document. cret.F.l ement.RvTd I 1 bdvl 1       l  2  3    666   Chapter  15      The W3C DOM and JavaScript   EXAMPLE   15.19     C O N T I N U E D    dl=document.getElementByld 1divl1  ;  pl=document.getElementByld  paral   ;  p2=document.getElementByld 'para21 ;  al=document.getElementByld 'linkl' ;  bl.onclick=iam;  dl.onclick=iam;  pi.onclick=iam;  p2.onclick=iam;  al.onclick=iam;   }  function  iam event {   if   !e {   }  else{   e = window.event;  e.cancelBubble = true;   * Microsoft IE*      e.stopPropagation  ;   *  W3C  *    }      stop all other targets with event listeners from     triggering this event   }               Bubble bubble...        Some text  in a paragraph element.    Another paragraph element with text.    link    4   5   6   7   8   9   10                  EXPLANATION   1  Global  variables  are  declared  that will  be  used  in  the  function  that  follows.  2  Once  the page  has loaded  the  onload  event handler is  triggered,  causing the  anon-  ymous  function  to  be  executed.  The  document.getElementByldO  method  returns  references  to  all  of  the  HTML  el- ements  with  id  attributes.  Each  of the  element references  is  assigned  the  onclick  event property and  its value,   3   4    15.8  Event  Handling  a nd   the  D OM   667   E X P L A N A T I ON     CONTINUED    6   7   5  W h en   the  click  event  is  triggered,  the  function  called  iam    is  sent  to  the  event  object  and  is  received  as  a  parameter.  It  contains  data  about  the  event,  in  this  case  the  click  event  and  the  object  that  was  clicked.   See  Chapter  13.   T he   cancelBubble  property   Internet  Explorer   returns  or  sets  a  Boolean  that  rep- resents  whether  the  current  event  should  bubble  up  the  hierarchy  of  event  han- dlers.  If set  to  true,  event  bubbling  is  canceled,  preventing  the  next  event  handler  in  the  hierarchy  from  receiving  the  event.  The  stopPropagationQ  method  is  used  to  prevent  further  propagation  of  an  event  during event  flow.  If this  method  is  called  by  any  event listener  or  handler,  the  event  will  stop  bubbling  up  the  D OM   tree.  The  event  will  complete  dispatch  to  all  listen- ers  on  the  current  EventTarget  before  event  flow  stops.  This  method  may  be  used  during  any  stage  of  event  flow  so  if you  click  the  link,  the  bubbling  will  stop  there  or  if  you  click  on  the  div  element,  it  will  stop  at  that  point  and  go  no  further.  See  http:  www.w3.Org TR DOM-Level-2-Events events.htmlEvents-flow-cancelation.  An  id  attribute  is  assigned  to  the  body  element.  T wo   paragraphs  within  the  div  container  are  also  given  ids.   8  9  10  W i t h in   the  second  paragraph,  an  id  is  assigned  to  the     tag.  If bubbling  starts  at  the  link,  it  will  propagate  upward  through  its  ancestor  tree  to  the  all  of  those  ele- ments  that  are  waiting  for  a  click  event  to  happen,  but  in  this  example  the  bub- bling  will  stop  right  away  because  it  is  being  canceled  when  the  iam    function  is  called.  See  the  results  in  Figures  1 5 . 36   and  15.37.   B u b b l i ng   -  M o z i l la   F i r e f ox   File   Edit   View   History   Bookmarks   Tools   Help   ^   -   C   Hb          file:   C: wamp v   A  [ling     Q  Bubbling     Q  Bubbling     Q  BL   Bubble  bubble...   Some text in a paragraph element.   Another paragraph element with text,  link   Figure  15.36   The  initial  p a ge   b e f o re   c l i c k i ng   on  t he   link.    668   Chapter  15      The W3C DOM  a nd   JavaScript   K g u b b l i ng   -  Mozilla   F i r e f ox   File  Edit  View  History   Bookmarks   Tools   ttelp   T   C   ^   1.  Ü   file : HIC :  wamp www bubbleup 15.16.H   A  »ling   Q  Bubbling   Q  Bubbling   Li  Bubbling  Tc   BLj   Bubble bubble...   Some text in a paragraph element.   Another paragraph element with text, link   [ J a v a S c r i pt   A p p l i c a t i o n]      X     Iinkl   !   OK   Figure  15.37   Further  b u b b l i ng   stops  after  a  user  clicks  the  link.   15.9  Event Listeners with the W3C  Model   15.9.1  Adding an Event  The  addEventListener Method.  the  addEventLis- tener    method,  which  registers  a  single  event  listener  on  a  document,  a window,  a  DOM  node  or  X   H T M L  ,   or  an  Ajax  XMLHttpRequest   see  Chapter  18,  "An  Introduction  to  Ajax   with J S O N   "  .   This  method  takes  three  arguments:   The  W 3C   event  model  adds   1.  The  event  type  to  listen  for   mouseover,  click,  etc. .  2.  A  function  to  be  executed  when  the  event  is  fired.  3.  A  Boolean   called  useCapture   of  true  or  false  to  specify  the  event  propagation  type:  true  to  turn  on  event  capturing  and false  to  turn  on  event  bubbling   the  most  cross-browser-compliant  way  is  false .   FORMAT   E X A M P LE   target.addEventListener type,  listener,  useCapture ;    15.9  Event  Listeners  with  the W3C  Model   669   You  can  register  more  than  one  event  for  a  target  if  the  events  or  capture  parameters   are  different.  Now  we  register  another  event  listener  to  the  same  element  as  follows:   var  divl  =  document.getElementByld "mydiv" ;  divl.addEventListener "click",bigFont,false ;  divl.addEventListener "click",smallFont,  true ;   So  which  event  takes  place  first?  The  W 3C   model  does  not  state  which  event  handler  is  fired  first  so  we  will  check  in  Example  15.21.  However,  if multiple  identical  event  lis- teners  are  registered  on  the  same  target with  the  same  parameters,  the  event  listener  will  only  be  called  once  and  the  duplicate  instances  discarded.   Using  this within the Handler.  As  we  have  seen  in  many  examples  throughout  this  text,  the  this  keyword  normally  represents  a  reference  to  an  object  passed  to  a  function,  but  the  this  keyword,  when  used  with  W 3C   event  handlers,  is  a  reference  to  the  HTML  element  from  which  the  event  handler  was  fired,  giving  you  easy  access  to  the  element.   function changeStyle    {   this.style.backgroundColor  =  "ttccOOOO";   }   E X A M P LE    15.20               window.onload=function  {   1  2  3   var paraHandle  =  document.getElementByld "mypara" ;  paraHandle.addEventListener "click",alterText,  false ;  function  alterText  {   this, style.backgroundColor =""tan";  this.style.fontFamily  ="fantasy";  this, style. fontWeight =""bold";   }   }              4       There was  an old  lady who  lived  in a shoe.   She had so many children,  she  didn't  know what  to do.            670   Chapter  15      The W3C DOM and JavaScript   E X P L A N A T I ON   1   2   T he   getElementByldO  method  returns  a  reference  to  the  paragraph  identified  on  line  4.  T he   addEventListenerO  method  takes  three  arguments,  the  event  that  will  be  reg- istered  for  the  paragraph,  the  name  of  a  function  that  will  be  called  when  the  click  event  is  triggered,  and  a  Boolean  value  of  false,  indicating  the  bubbling  is  the  method  of  event  propagation.   3  W h en   the  user  clicks  on  the  paragraph,  the  paragraph  will  be  styled  using  the  style  property  of  the  current  object,  this.  Because  this  refers  to  whatever  object  was  af- fected  by  the  click,  it  could  be  used  by  more  than  one  event  listener.  T he  p  element is  assigned  an  id  attribute  that will  be  used  to  identify  the  paragraph  in  line  1.  See  the  results  in  Figures  1 5 . 38   and  15.39.   4   6   Mozilla  Firefox  File   View   Edit   History   Bookmarks   Tools   Help   C       A   0   file: l i f e:   wamp www eventListen.  html   A pt   Listen...]  Q  Event  Listen...]  Q  file:  ...n, html    Q  file:  . ..n, html     Q  file:   There was  an old lady who lived in a shoe.  She had so many children,  she  didn't know what to  do.   Figure  15.38  Before clicking on the paragraph.   6   Mozilla  Firefox  File   View   Edit   History   Bookmarks   Tools   Help   C   il,   [   I   file:   C: wamp www eventListen.html   -1  nt  Listen...  I  J  Event  Listen...    J  file:  ...n.html     J  file:  ...n.html     J  file:  ...n.html   There was  an  old  lady who  lived  in  a shoe.  She  had  so  many  children,  she  didn't  know what to  do.   Figure  15.39  After clicking on the  paragraph.   15.9.2  Registering More Than One Event    15.9  Event  Listeners  with  the W3C  Model   671   E X A M P LE    15.21        Register  Multiple  Events        window.onload=£unction  {   var paraHandle  =  document.getElementByld "paral" ;  var paraHandle2  =  document.getElementByld "para2" ;  paraHandle.addEventListener "mouseover",highLight,  false ;  paraHandle2.addEventListener "click",  function  {  paraHandle2.addEventListener "mouseover",  highLight,false ;  function  highLight  {   this.style.fontSize="x-large"},false ;   this.style.backgroundColor  ="tan";  this.style.fontFamily  ="fantasy";  this.style.fontWeight  ="bold";   1  2  3  4  5  6  7  8   9   10   }   }                             E X P L A N A T I ON   There was  an old  lady who  lived  in a  shoe.   She had so many children,  she didn't  know what  to do.< p    She gave  them some broth,    without  any bread,   Whipped them all  soundly    and sent  them to bed.   3   1  W h en   the  page  has  loaded  the  inline  anonymous  function  will  be  called.  2   In  the  next  two  lines,  JavaScript's  getElementByldO  method  will  return  references  to  two  paragraphs  in  the  HTML  document.  The  addEventListener    method  takes  three  arguments,  the  event  that  will  be  reg- istered  for  the  paragraph,  the  name  of  a  function,  highLight,  that  will  be  called  when  the  mouseover  event  is  triggered,  and  a  Boolean  value  of  false,  indicating  the  bubbling  is  the  method  of  event  propagation.  Another  addEventListenerQ  method  registers  the  click  event  for  the  second  para- graph,  the  inline  function,  that  when  called  will  dynamically  change  the  font  in  the  paragraph  to  extra  large.  The  this  keyword  when  used  with  event  handlers  references  the  object  on  which  the   t f,    t f,    nfi   5   4    672   Chapter  15      The W3C DOM and JavaScript   E X P L A N A T I ON    CONTINUED    7   6   A  second  event  listener  registers  another  event,  mouseover,  to  the  second  para- graph.  Now  if  the  user  clicks  the  mouse  on  the  second  paragraph  or  rolls  the  mouse  over,  two  events  will  be  fired  and  their  respective  functions  called,  one  to  highlight  the  text  and  the  other  to  make  the  font  larger.  The  function  highLight  is  called  when  the  mouseover  event  is  triggered  on  the  first  paragraph.  This  function  is  nested  within  the  anonymous  function  defined  on  line  1  that  was  called  when  the  onload  event  was  triggered  on  line  1.  The  function  has  access  to  the  object  through  the  this  keyword.   A  function  de- fined  within  another  function  is  called  a  closure.  See  Chapter  7,  "Functions."  This  is  the  first paragraph  that will  be  changed  when  the  mouseover  event  is  triggered.  9  10  This  is  the  paragraph  for  which  two  events  are  registered,  both  the  click  and  the  mouseover  events,  and  demonstrates  that  more  than  one  event  can  be  registered  for  the  same  object.  This  process  is  shown  in  Figures  15.40,  15.41,  and  15.42.   8   *  Register Multiple  Events  - Mozilla  Firefox  File   Bookmarks   History   Tools   View   Edit   Help   r  C   f fc    I  Q   file: IffC:   wamp www eventListen2.   ~4~]>Down  ...    Q  Drop-Down  ...    Q  Style  5 h e e ~   gc  C55  How  to   [   There was  an old lady who lived in a shoe.  She had so many children,  she  didn't know what to  do.   She gave them some broth,  without  any bread,  "Whipped them all soundly  and sent them to bed.   Figure  15.40  Before an event occurs.   Register  Multiple  Events  - Mozilla Firefox   File   Edit   View   History   Bookmarks   Tools   Help   C   tlLi      !   file:   C: wamp www tp42bb9d.htrnl   f]   j-Du'.ori  ...  ]  Q  Drop-Down  ...    Q  Drop-Down  ...  ]  Q  Style  Sheet...     ^  CSS  How  to   ]   There was  an  old  lady who  lived in  a shoe.  She  had  so  many  children,  she  didn't  know what to  do.   She  gave  them  some  broth,  without  any  bread.  Whipped  them  all  soundly    15.9  Event  Listeners  with  the W3C  Model   673   '  Register  Multiple  Events  - Mozilla  Firefox  File   Bookmarks   History   -View   Tools   Edit   Help   C   l ii    l _j    file:   C: wamp www eventListen2.html   <1  [i-Down  ...]  Q  stylesheet...  There was  an  old  lady who  lived  in  a shoe  She  had  so  many children,  she  didn't know what to  do.   JavaScript  a...   CSS  How  to      file:  ...2. html   She  gave  them  some  broth,  without  any  bread,  Whipped  them  all  soundly  and  sent them  to  bed.   Figure  15.42   After  t he mouse  e v e nt   is  fired  on  t he   s e c o nd   p a r a g r a p h.   15.9.3  Removing an EventListener  To  remove  an  event  handler,  the  W 3C   provides  the  removeEventListenerO  method.  With  this  function  you  can  choose  which  event  listeners  to  remove.  The  method  takes  three  arguments:  the  name  of  the  event,  the  function  that  will  handle  the  event,  and  the  Bool- ean  flag,  useCapture,  which  specifies  the  event  flow:  true  for  event  capturing  and false  for  event  bubbling,  the  default.  Note:  The  keyword  "on"  is  not  used  with  the  event  type,  whereas  with  the  Internet  Explorer  model  it  is  required.   F O R M AT   E X A M P LE   element.removeEventListener eventType,  function,  useCapture ;   element.addEventListener "mouseover",  highlight,  false ;  element.removeEventListener "mouseover",  highlight,  false ;   Note  that  you  must  specify  the  same  useCapture  value  when  removing  a  listener  exactly  as  you  used  it when  adding  the  event  listener.  To  remove  the  event  handler,  sim- ply  make  the  onclick  method  empty.  The  results  is  shown  in  Figure  15.43.   Another  way  to  remove  the  event  handler  is  to  set  its  value  to  null  as:    674   Chapter  15      The W3C DOM  a nd   JavaScript   1  Remove an  Event Listener  - Mozilla Firefox  Help  File   Bookmarks   History   Tools   View   Edit   Yn  ,    file:   C: wamp www removeeventListen2.html   R e m o ve   ao   E v e nt   l.istener   There was  an old lady who lived in a shoe  She  had  s^many  children,  she  didn't know what to  do.   She  gave them  some  broth,  without  any  bread.  Whipped them  all  soundly  and  sent them  to  bed.   Figure  15.43  When the mouse is moved over the first paragraph,  nothing  happens.  The event listener was removed.   E X A M P LE   15.22        Register  Multiple  Events        window.onload=£unction  {   1  2  3  4  5  6  7  8   var paraHandlel  =  document.getElementByld "paral" ;  var paraHandle2  =  document.getElementByld "para2" ;  paraHandlel.addEventListener 'mouseover1,highLight,  false ;  paraHandle2.addEventListener 'click',  function  {  paraHandle2.addEventListener 'mouseover',  highLight,false ;  paraHandlel.removeEventListener 'mouseover',  function highLight  {   this.style.fontSize="x-large">,false ;   highLight,false ;     Closure   this.style.backgroundColor  ="tan";  this.style.fontFamily  ="fantasy";  this.style.fontWeight  ="bold";   }   }              9       There was  an old  lady who  lived  in a shoe.     15.9  Event  Listeners  with  the W3C  Model   675   E X A M P LE    10    She gave  them some broth,     CONTINUED    15.22   She had so many children,  she  didn't  know what  to do.< p   without  any bread,   Whipped  them all  soundly    and sent  them to bed.              E X P L A N A T I ON   1  W h en   the  page  loads,  this  anonymous  function  is  activated.  It  will  be  used  to   2   3   4   5   6   7   8   9   change  the  style  of  two  paragraphs.  The  document.getElementByldO  method  returns  a  reference  to  the  first  paragraph,  and  in  the  next  line  it  returns  a  reference  to  the  second  paragraph.  The  addEventListenerO  method  is  waiting  for  a  mouseover  event  to  occur  on  the  first  paragraph,  at  which  time  it  will  call  the  highLight    function.  The  Boolean  false  flag  indicates  that  event  bubbling  is  turned  on.  The  addEventListenerO  method  is  waiting  for  a  click  event  to  occur  on  the  second  paragraph,  at  which  time  it  will  call  the  inline  anonymous  function  that  will  en- large  the  font.  The  Boolean  false  flag  indicates  that  event  bubbling  is  turned  on.  The  addEventListenerO  method  is  waiting  for  a  mouseover  event  to  occur  on  the  second  paragraph,  at  which  time  it  will  call  the  highLightO  function  that  will  cause  the  text  in  the  paragraph  to  be  highlighted  in  a  tan  color.  The  Boolean  false  flag  indicates  that  event  bubbling  is  turned  on.  The  event  listener  that  was  added  on  line  3  is  now  removed  with  the  removeEvent- ListenerQ  method.  When  the  user  moves  the  mouse  over  the  first paragraph,  it will  no  longer  be  highlighted   see  Figure  15.44 .  This  is  a  function  defined  within  a  function.  This  function  is  on  standby  waiting  for  an  event  to  be  fired.  The JavaScript  this  keyword  refers  to  the  HTML  element  on  which  the  event  was  fired.  If it  was  fired  on  reference  to  a  p  element,  then  it  refers  to  a  paragraph.  The  style  property  will  be  used  with  CSS  properties  to  highlight  the  text  when  the  event  occurs.  The  first  paragraph  has  a  unique  id,  paral,  with  which  to  identify  it  in  the  Java- Script  program.   10  The  second  paragraph  has  a  unique  id,  paral,  with  which  to  identify  it  in  the Java-  Script  program.    676   Chapter  15      The W3C DOM  a nd   JavaScript   1  Remove an  Event Listener  - Mozilla Firefox  Help  File   Bookmarks   History   Tools   View   Edit   C   Vb,'   file :   C: wamp www removeeventListen2. html   I  R e m o ve   on  E v e nt   l.istener   There was  an old lady who lived in a shoe  She  had  so  many  children,  she  didn't know what to  do.   She  gave them  some  broth,  without  any  bread.  Whipped them  all  soundly  and  sent  them  to  bed.   Figure  15.44   The  e v e nt   listener  w as   r e m o v e d.   The  m o u se   e v e nt   d o e s n 't   o c c u r.   15.9.4  Event Listeners with Microsoft Internet Explorer   Microsoft,  too,  has  developed  an  event  registration  model.  It  looks  similar  to  W3C's,  but  has  some  important  differences.  To  write  cross-platform  compatible  code,  you  can  test  for  both.  See  Example  15.23.   The  attachEventO Method.  IE5+  proprietary  equivalent  of  addEventListenerO    The  method  is  attached  to  the  object  for  which  the  event  is  intended.  The  parameters  include  the  event  type  and  a  function.  Unlike  the  W 3C   model,  the  event  type  parameter  must  include  the  on  prefix   i.g.,  onload,  onclick  etc. .  If you  forget  this  little,  but  important  point,  the  method  will  not  work!   The  attachEventO  method   is  an   FORMAT   E X A M P LE   object.attachEvent eventType,  function    if   window.attachEvent {   myDiv=document.getElementByld "divl" ;  myDiv.attachEvent "onclick",  changeColor ;   }    15.9  Event  Listeners  with  the W3C  Model   677   The detachEvent    Method.  The  detachEventO  method  removes  an  event  handler  and  its  function  and  is  the  IE5+  proprietary  equivalent  of  the  DOM's  removeEventListenerQ    F O R M AT   E X A M P LE   object. detachEvent eventType,  function ;   if   window.detachEvent    object.detachEvent "onload",  init    There  are  differences  you  should  be  aware  of  when  comparing  the  W 3C   model  and   the  Internet  Explorer  model:   1.  Events  always  bubble.  There  is  no  capturing  feature.  2.  The  this  keyword  cannot  be  used  to  represent  the  event  handling  function.  The   this  keyword  refers  to  the  global  window  object.   See  Example  15.23  for  examples  of  Internet  Explorer  handling.   E X A M P LE    15.23        Internet  Explorer  Event  Handling        function  greetings  {   alert   "Hello World"   ;   }      Add  an  event  handler  window.attachEvent   "onload",  greetings   ;       Add  another  event  handler  document.attachEvent   "onclick",  greetings   ;       Add  another  event  handler  document.attachEvent   "onmouseover",  greetings ;       Remove  an  event  handler  just  added  document.detachEvent   "onmouseover",  greetings   ;                   IE has  its  own way of  listening.     678   Chapter  15      The W3C  D OM   a nd   JavaScript   E X P L A N A T I ON   1  2   3   4   5   This  function  will  be  called  when  a  series  of  events  are  fired.  T he   attachEvent    method   IE   causes  the  onload  event  to  fire  when  the  page  has  loaded.  T he   onload  event  is  a  window  event,  and  the  function  defined  on  line  1,  called  greetings    will  be  called  when  that  event  is  fired.  This  method  requires  that  you  use  the  on  prefix  with  the  event  handler   see  Figure  15.45 .  T he   attachEvent    method   IE   causes  the  click  event  to  fire  when  the  user  clicks  anywhere  on  the  document   i.e.,  W eb   page .  W h en   that  happens  the  greetings    function  will  be  called.  T he   attachEvent    method  the  user  moves  the  mouse  in  the  document.  T wo   different  events  are  tied  to  the  document.  T he   detachEventO  method   IE   causes  the  mouse  event  created  on  line  4  to  be  re- moved.    IE   causes  a  mouseover  event  to   fire  when   i Q^    V  *   Ê  C:\wamp\www\eventHandlingMicrosoft.html   File   Edit   View   Favorites   Tools   Help   Favorites   $$ IE  Event  Handling   IE has its  own way  of Estening.   Message  from web page   [ x]   J^    Hello  World   !  1=   !   Figure  15.45  W h en   t he   p a ge   loads  an   e v e nt   is   fired  a nd   w h en   t he   user  clicks  a n y w h e re   on   t he   d o c u m e nt   a n o t h er   e v e nt   is   fired.   15.9.5  Event Properties Revisited   In  Chapter  13  we  discussed  the  event  object.  There  are  a  number  of  event  types  defined  by  the  D OM   H T ML   Events  module,  as  shown  in  Table  15.8.   In  Example  15.24,  event  listeners  for  both  the  D OM   and  Internet  Explorer  model  are  listening  for  mouseOver  and  mouseOut  events.  The  function  parameter  of  the  event  lis-   15.9  Event Listeners with the W3C  Model   679   event  occurred  can  be  found  in  the  currentTarget  property   Firefox   or  the  srcElement  property   Internet  Explorer .   Table  15.8  Event  Properties:  DOM  a nd   Internet  Explorer   What  It  Describes   Name   bubbles   canceleable   currentTarget   evmtPhase   fromElement   srcElement   target   timeStamp   type   Boolean  to  test whether  an  event  can bubble  up  the  document  tree.   Boolean  to  test whether  the  event  can be  cancelled.   The  node  currently being  processed by  a  handler   Internet  Explorer  doesn't  support  this .   A  number  specifying  the  phase  of the  event propagation.   Refers  to  the  object where  the  mouse was pointing before  the  mouseover  event  was  triggered   Internet  Explorer .   Refers  to  the  object  of the  tag that caused  the  event to  fire   Internet  Explorer .   The  node  on which  the  event  occurred,  not  necessarily  the  same  as  currentTarget.   When  the  event  occurred   a  Date  object .   The  type  of  the  event  that  occurred,  such  as  click  or  mouseOat.   E X A M P LE   15.24    * File: externstyle.ess *    body {  background-color:  silver;   font-size:  22pt;  font-weight:  bold;   }  .red {  color:rgb 255,0,0 ;  font-style:  verdana;  font-size:  32;   }  .blue  {  color:blue;   font-style:  verdana;  font-size:  36;   }  .green {  color:  green;    * Defining classes  *     680   Chapter  15      The W3C DOM  a nd   JavaScript   E X A M P LE    15.24   CONTINUED         Positioning            var  divl,div2,div3;  window.onload=function    {   divl=document.getElementByld "first" ;  div2=document.getElementByld "second" ;  div3=document.getElementByld "third" ;  if divl.addEventListener!=  undefined {     W3C  Firefox  Opera  divl.addEventListener 1 mouseover 1,unColorText,false  ;  divl.addEventListener 'mouseout',  colorText,false ;  div2.addEventListener 1 mouseover 1,unColorText,false ;  div2.addEventListener 'mouseout',  colorText,false ;  div3.addEventListener 'mouseover',unColorText,false ;  div3.addEventListener 'mouseout',  colorText,false ;   }  else{      Internet  Explorer   divl.attachEvent 1onmouseover1»unColorText ;  divl.attachEvent 'onmouseout',  colorText ;  div2.attachEvent 'onmouseover',unColorText ;  div2.attachEvent 'onmouseout',  colorText ;  div3.attachEvent 'onmouseover',unColorText ;  div3.attachEvent 'onmouseout',  colorText    }   }  function  colorText e {   var evt = e    window.event;  IIBrowser  differences  var evtTarget= evt.target    evt.srcElement;  if evtTarget.id=="first" {   divl.className="red";   }  else  if evtTarget.id ==  "second" {   div2.className="blue";   }  else{  div3.className="green";}   }  function  unColorText e {   var evt = e    window.event;    use  e.srcElement.id   IE   var evtTarget= evt.currentTarget    evt.srcElement;  if evtTarget.id  ==  "first" {   divl.className="black";   1   2  3   4   5   6   7  8  9  10   11    15.9  Event  Listeners  with  the W3C  Model   681   E X A M P LE    15.24   CONTINUED    else{   div3.className="black";   }              12   <div  id="first"   style="position:absolute;  top:50px">Roll  over me!      <div  id="second"   <div  id="third"   style="position:absolute;  top:100px">and  then me,    style="position:absolute;  top:150px">and me  too.            E X P L A N A T I ON   1   The  style  for  this  document  is  coming  from  an  external  style  sheet.  It's  the  same  style  used  in  the  previous  example.   2  W h en   the  onload  event  is  fired   when  the  page  has  been  fully  loaded   this  anony-  mous  function  will  be  called,  its  purpose  to  color  the  text.   3  Now  we  get  a  reference  to  all  three  of  the  divs  by  their  unique  ids,  assigned  in  the   HTML  document  on  line  12.  If  using  Internet  Explorer,  the  addEventListenerQ  method  is  undefined.  If  it's  not  undefined   i.e.,  the  browser  supports  the  DOM  method ,  then  this  block  of  text  will  be  entered.  The  event  listeners  are  waiting  for  a  mouseover  or  a  mouseout  event  to  occur  on  each  of  the  divs  in  the  document.  W h en   the  mouse  rolls  over  a  div,  the  unColor- TextQ  function  will  be  called,  and  when  the  mouse  moves  out  of  a  div,  the  Color- TextQ  function  is  called.  Internet  Explorer  has  its  own  method  for  event  listening,  called  the  attachEventO  method.  The  event  listed  as  an  argument,  onmouseover  or  onmouseout,  must  have  the  prefix  on  or  an  error  will  occur.  T he   function  colorTextQ  takes  one  argument,  a  reference  to  the  object  where  the  event  occurred.  It  is  called  when  the  user  rolls  the  mouse  away  from  the  text  in  the  div.  The  type  of  the  event  is  either  passed  to  the  function  as  a  parameter,  e,    W 3 C    or  is  a  property  of  the  global  window  object,  window.event   Internet  Explorer .  The  target  refers  to  the  HTML  element  for  which  the  event  occurred.  W 3C   uses   4   5   6   7   8   9    682   Chapter  15      The W3C DOM and JavaScript   E X P L A N A T I ON    CONTINUED    10  By  using  the  id  of  the  target,  we  get  the  value  of  the  unique  id  that  was  assigned  to  the  object  where  the  event  occurred.  The  first  div  container  is  defined  with  an  id  name  "first".  The  className  property  defines  the  class  for  this  object.  W h en   the  mouse  rolls  over  this  div,  it  will  turn  "red".   11  The  function,  unColorTextQ,  is  triggered  when  the  mouse  moves  over  the  text  in  one  of  the  divs.  This  function  works  like  the  ColorTextQ  function,  but  turns  the  text  black  when  the  mouse  moves  over  the  text,  rather  than  coloring  it.   It  also  changes  the  font  size.   The  results  are  shown  in  Figure  15.46.   12  The  three  div  containers  are  set  up  and  positioned  for  the  document.   iy^ Positioning  -  Windows  Internet  Explorer        gj   C:\wamp\www\examplel5.2    v   ^t     X   File   Edit   View   Favorites   Tools   Help    jfr  Favorites     g  Positioning   Roll over me!  and  then  me,  and me too.   Roll over me!  and then  me,  and me too.   Figure  15.46  Before the mouse  rolls over the first   block  top  left ;  after the  mouse has left all three containers  right . The font has changed in size and color for  each div.   15.10  Unobtrusive JavaScript   In  Chapter  1  we  started  talking  about  the  three  layers  that  make  up  a  complete  W eb   page:   1.  The  content  or  structural  layer  consisting  of  the  HTML XML  markup.  2.  The  style  or  presentation  layer  consisting  of  the  CSS  style  sheets.  3.  The  behavior  layer  consisting  of JavaScript.    15.10  Unobtrusive JavaScript   683   Although  there  is  often  a  blurred  line  among  these  layers,  the  concept  of  separating  content  structure  and  style  from  behavior  has  b e c o me   the  goal  for  many  developers  building  accessible  and  yet  easy-to-maintain  W eb   sites.  T he   idea  of  keeping JavaScript  completely  separate  from  the  other  two  layers  is  c o m m o n ly   called  unobtrusive  Java- Script.  Developers  have  been  keeping  the  structure  and  style  of  the  document  separate  by placing  the  HTML XML  in  one  file  and  the  CSS  styles  in  a  separate  file,  making it  easy  to  change  the  layout  throughout  a  W eb   page  simply  by  changing  the  style  sheet.  Next  comes  JavaScript.  Because  JavaScript  functions  can  be  placed  in  separate  files,  the  goal  is  to  remove  the  inline  JavaScript  code,  such  as  event  handlers,  from  the  H T ML   page,  leaving  the  markup  clean  and  yet  still  keeping  the  JavaScript  accessible.  Another  func- tion  of  the  separation  is  for  better  practices  such  as  adhering  to  the  W 3C   standards  and  D OM   scripting  to  avoid  problems  with  nonstandard  browser  extensions  and  inconsis- tencies.  Finally  comes  another  important  aspect  of  unobtrusive  JavaScript,  a  strategy  called  "progressive  enhancement"  coined  by  Steve  Champeon  in  2 0 0 3.   T he   idea was  that  the  content  of  the  page  would  be  made  available  to  the  browsers  with  the  least  capabil- ities,  even  those  without  JavaScript  support.  Aaron  Gustafson  describes  in  his  article  "Progressive  E n h a n c e m e n t"   the  three  layers  of a W eb   page  by  using  the  analogy  of a  pea- nut  M &M   where  the  content  layer  is  the  peanut,  the  presentation  layer  is  the  chocolate  layer  surrounding  the  peanut,  and  the  client-side  scripting layer  is  the  hard  candy  on  the  outside.  He  explains,  " T h en   there  are  folks  w ho   can't  handle  the  chocolate  and  candy  layers  on  top  of  the  peanut   diabetics,  for  example .  Like  them,  people  on  mobile  devices  or  older  browsers  may  not  be  able  to  see  your  pretty  design  or  interact with  your  slick  Ajax-driven  interface."  T he   idea  is  to  make  the  content  as  rich  as  possible  so  that  everyone  gets  the  best  possible  experience,  no  matter  what  browser  they  are  using,  rather  than  being  forced  to  upgrade  or  just  go  without  any  experience  at  all.   See  http:  www.alistapart.com articles understandingprogressiveenhancement   this  subject.   There  are  a  number  of  articles  and  forums  on  the  W eb   offering  guidelines  on  h ow   to  accomplish  this  "unobtrusiveness"  both  for  and  against  it   see  Figure  15.47 .  It  is  definitely  a  topic  worth  investigating  if  you  are  planning  a  serious  W eb   project  that  will  affect  many  users.   more   for   on   Now  that we  have  discussed  h ow   to  use  the  D OM   to  manipulate  the  H T ML   elements,  to  handle  events  without  using  H T ML   tags,  and  h ow   to  use  CSS  styles,  it  is  time  to  put  all  the  pieces  together  to  illustrate  the  separation  of the  layers.  Example  15.25  is  an  .html  file  that  describes  the  H T ML   content  layer,  Example  15.26  is  a  .ess  file  representing  the  CSS  layer,  and  Example  15.27  is  the  .js  file,  the  JavaScript  program  that  provides  inter- activity  and behavior.  Together,  these  three  files  make  up  a simple W eb   page with  a slide- show  of images.  T he   H T ML   markup  is  defined  in  the  .html  file;  the  colors,  borders,  and  div  positions  are  defined  in  the  .ess  file;  and  the JavaScript  program  provides  the  behav- ior  and  interactivity  with  functions  that  respond  to  user-initiated  events   see  Figure  15.48 .  These  files  are  intentionally  kept  small  for  demonstration  purposes  so  that  you  „ „„    t t ; „„   1 „ „t    f „ >-   t U„    „ „ fl    t U„    —„    rU„  1       684   Chapter  15      The W3C DOM and JavaScript   1  The  seven  rules  of  unobtrusive  JavaScript  -  Mozilla  Firefox   I  File   Edit   View   History   Bookmarks   Tools   Help      @   «¿¡¿^    J   http:  icant.co.uk artides seven-rules-of-unobtrusive-javascript    .  Index of file:   C: wamp w...   Q  Vietnam Slide Show   Q  Vietnam Slide Show      Vietnam Slide Show   The seven rules of Unobtrusive JavaScr   I've  found  the  following  rules  over the  years  developing,  teaching  and  implementing  JavaScript  in  an  unobtrusive  manner.  They  have  specifically  been  the  outline  of  a  workshop  on  unobtrusive  JavaScript  unobtrusive  manner.  They  have  specifically  been  the  outline  of  a  workshop  on  unobtrusive  JavaScript  for the  Paris  Web  conference  2007  in  Paris,  France.  for the  Paris  Web  conference  2007  in  Paris,  France.  1  hope  that they  help  you  understand  a  bit why  it  is  a  good  idea  to  plan  and  execute  your JavaScript  in  1  hope  that they  help  you  understand  a  bit why  it  is  a  good  idea  to  plan  and  execute  your JavaScript  in  this  way.  It  has  helped  me  deliver  products  faster,  with  much  higher  quality  and  a  lot  easier  maintenance.  this  way.  It  has  helped  me  deliver  products  faster,  with  much  higher  quality  and  a  lot  easier  maintenance.   l  Do  not  make  any  assumptions  l  Do  not  make  any  assumptions    JavaScript,  the  unreliable  helper    JavaScript,  the  unreliable  helper    Probably the  most  important feature  of  unobtrusive  JavaScript  is  that you  stop  making  assumptions:      You  don't  expect JavaScript to  be  available  but  make  it  a  nice-to-have  rather than  a  dependency     You  don't  expect  browsers  to  support  certain  methods  and  have  the  correct  properties  but you  test   for them  before  you  access  them   not  available      You  don't  expect the  correct  HTML to  be  at your  disposal,  but  check for  it  and  do  nothing  when  it  is      You  keep  your  functionality  independent  of  input  device     You  expect  other  scripts  to  try to  interfere  with  your functionality  and  keep  the  scope  of your  scripts   as  secure  as  possible.   Figure  15.47  A Web site explaining the philosophy.   û   s    ¡ Th.      Chinese  ver:   Quick  Navig          Do   not  ma   Find  your  1  relationship      L e a ve   trav   experts      Understani   users      Understani      Play  well  w      W o rk   f o r th   Provide  feed     c i n p ut    " t e x t"   =  " e m a i l"   t y pe   id   =  o n C h a n g e = " c h e c k E m a i l     ">   b o dy   p . f h i,    {  i r st    h 2,    b a c k g r o u n d - c o l o r : s i  l v e r;    }   {  h3    f o n t - f a m i c o l o r:    {   l y : " s a ns    s e r i f ";    }   d a r k b l u e;    }                    H T ML    P a g e       H e l l o     w o r l d i      15.10  Unobtrusive JavaScript   685   Step  1:  The  HTML  File—Structure  and  Content    Vietnam  Slide  Show        < script»   E X A M P LE   15.25              l  2   3   4   5                   E X P L A N A T I ON    Vietnam Trip  Gallery   <img  class="mainpic"  id="vietnam_pic"  src='file:   C: wamp www images DSCN1232.jpg1  alt="vietnam  travelog"  width=14921   height=13701 >      Tour boats  in the Mekong Delta               <input  type=button  id="startButton"   value="Start  Slideshow" >   <input  type=button  id="stopButton"   value="Stop  Slideshow" >   l  The  external  CSS  style  sheet  is  linked  to  the  HTML  document.  2  The  external JavaScript  program  is  included  in  this  document.  3  This  is  the  image  that  is  initially  displayed  on  the  page.  4  The     uses  a  class  defined  in  the  external  CSS  file  to  display  a  caption  under   the  image.   5  Two  buttons  are  defined  to  start  and  stop  the  slideshow.  Their  positions  on  the  page  are  defined  by  the  divbuttons  class  in  the  external  style  sheet.  Figure 15.49  shows  the  result.    686   Chapter  15      The W3C DOM  a nd   JavaScript   f-   V i e t n am   S l i de   S h ow   -  W i n d o ws    I n t e r n et   E x p l o r er   ^^  .,   ..  »   j  C:\wamp\www\addeventslideshow2.html   File   Edit   View   Favorites   I ools   Help   Favorites   -¿S Vietnam  Slide  5how   Vietnam  Trip  ôallery   Tour  boats  in  the Mekong  Delta   Start  S l i d e s h nw         S t op   S l i d e s h nw    j   Figure  15.49  The Web page.   Step  2:  The  CSS  File:  Presentation  and  Style   E X A M P LE   15.26    *Style  for the Vietnam Trip Gallery  *    1   2   3  4   .mainpic  {  position:absolute;  top:  50px;left:60px;   border-style:solid;border-color:darkgreen;}   .title { position:  absolute;  left:165px;  top:  8px;font-size:160%;   color:darkgreen;font-family:cursive;}   .divbuttons  { position:relative;  top:  465px;left:60px;}  .caption  { position:absolute;  top:  430px;left:60px;   font-familv:cursive;font-stvle:bold;    15.10  Unobtrusive JavaScript   E X P L A N A T I ON   687   A  class  defines  the  style  of  the  first  picture  that  appears  in  the  document.   l  2  A  class  defines  the  style  for  the  title  at  the  top  of  each  image  in  the  slideshow.  3  4   A  class  defines  the  div  position  containing  the  start  and  stop  buttons.  A  class  defines  the  title  attribute  of  the  img  object  that  will  serve  as  a  caption  un- der  each  image  as  it  is  displayed.  The  body  selector  sets  the  background  color  of  the  window.   5   Step  3:  The JavaScript  File:  Behavior  and  Interactivity   E X A M P LE    15.27   var  i=0;  var  timeout;  var  hochimin;  window.onload=function  {   start=document.getElementByld "startButton" ;  stop=document.getElementByld "stopButton" ;  hochimin=new  Array  ;  var  jpegs=["DSCN1211.jpg",  "DSCN1212.jpg"  "DSCN1257.jpg",  "DSCN12 02.jpg"  "DSCN1218.jpg",  "DSCN1266.jpg"  "DSCN1232.jpg"];   var  picfile="file:   C: wamp www images ";  var title =  [   "DSCN123 9.jpg",  "DSCN1264.jpg"  "DSCN1200.jpg",   "Sidewalk food of noodles,  chicken,  fish,  etc.  "Balloon  lady  in Hochiminh City",  "Water buffalo pops  his head up  from the mud.",  "Sundown along  the Mekong Delta",  "Some very colorful  and hairy  fruit",  "Meat vendor  in Ben Hanh market",  "Single proprietor  selling  goods",  "Preparing  food at  dawn",  "No thanks.  No Moped.  We're walking",  "Tour boats  in the Mekong Delta"   for var  i=0;  i<jpegs.length;i++ {    Preload  images   hochimin[i]=new  Image  ;  hochimin[i].src=picfile  +  jpegs[i];  hochimin[i].title=title[i];     Assign title  to each image   }  if window.attachEvent {    Is  this  Microsoft  IE?   start.attachEvent "onclick",  startSlideShow ;  stop.attachEvent "onclick",  stopSlideShow ;    688   Chapter  15      The W3C DOM  a nd   JavaScript   E X A M P LE    15.27    CONTINUED    else{    W3C  standard   10   start.addEventListener "click",  startSlideShow,  false ;  stop.addEventListener "click",  stopSlideShow,  false ;   }   }   11  function  startSlideShow  {  12  13   picture=document.getElementsByTagName "img" .item 0 ;  divCaption=document.getElementByld "description" ;  if i  <  hochimin.length {   picture.src=hochimin[i].src;    Image  replacement  divCaption.innerHTML=hochimin[i].title   14   i + +;   }  else{i=0;}  timeout = setTimeout 1startSlideShow    1 , 5000  ;   15   }   }   16  function  stopSlideShow  {  clearTimeout timeout  ;   E X P L A N A T I ON   Global  variables  will  be  used  by  the  functions.   1  2  W h en   the  page  has  finished  loading  the  onload  event  handler  is  triggered,  causing   the  anonymous  function  to  be  activated.  The  next  two  lines  get  a  reference  to  each  of  the  buttons  in  the  HTML  page,  one  to  start  the  slideshow  and  one  to  stop  it.  This  array  will  be  used  to  preload  all  the  images  and  to  assign  the  location  and  title  to  each  image   see  Figure  15.50 .   5  All  of  the J P EG   images  used  in  the  Web  page  are  assigned  to  the  literal  array  called   jpess- The  variable,  picfile,  is  assigned  the  directory  path  to  the  image  files.  The  literal  array,  title,  is  a  list  of  all  the  captions  that  will  appear  under  the  pic- tures.  They  will  be  assigned  as  attributes  of  the  image  object.  The or  loop  is  used  to  preload  each  image  in  the  list  of J P E GS   and  to  assign  both  an  src  attribute  with  the  path  and  name  of  the  image,  and  a  title  for  the  image.  If  using  Microsoft's  event  model,  then  we  go  into  the  block  and  attach  an  onclick  handler  to  the  object  called  start.  W h en   the  user  clicks  the  button,  the  startSlide- Show     function  will  be  called.  Then  we  do  the  same  for  the  stop  object.  If  using  the  DOM  event  model,  the  addEventListener 0  method  will  be  attached  to  tbe  obiects  called  <itart and  <iton  Wben  tbe  user  clicks  one  of tbe  buttons  tbe  event   3   4   6  7   8   9   10    15.10  Unobtrusive  JavaScript   1  E X P L A N A T I ON    CONTINUED    689   1   12  T he   getElementsByTagNameO  method  returns  a  reference   to  the  first   img  element   in  the  document  and  assigns  the  reference  to  picture.   13  T he   getElementByldO  method  returns  a  reference  to  the  div  element  that  will  hold   14  Every  5  seconds,  an  image  replacement  takes  place  by  changing  the  value  assigned   the  caption  for  an  image.   to  the  src  attribute  of  the  image.   15  Every  5  seconds,  the  timer  will  call  the  startSlideShowO  function.  16  T he   stopSlideShowO   function  turns  off  the  timer,  allowing  the  user  to  stop  the   slideshow  at  any  time.   Figure  15.50   A  s a m p le   of  t he   slideshow  thumbnails.   15.10.1  JavaScript Libraries   Although  the  code  used  in  this  b o ok   has  been  written  from  scratch,  beginning  with  the  very  basic JavaScript,  once  you  get  going  you  might  want  to  download  some  of  the  use- ful  and  free  unobtrusive  JavaScript  code  found  in  libraries  on  the  W e b.   See  http:  ]ava-   690   Chapter  15      The W3C DOM and JavaScript   3.  script.aculo.us  4.  M o o T o o ls  5.  ExtJS  6.  Q o o x d oo  7.  Yahoo!  UI  Library   YUI   8.  MochiKit  9.  Midori  10.  T he   Dojo  Toolkit   T he   libraries  are  compared  for  different  features  such  as  purpose,  speed,  event  han-  dling,  animation,  Ajax  support,  documentation,  and  more.   15.11  What You Should  Know   One's  first  time  looking  at  a JavaScript  program  that  uses  the  D O M,   a  person  could  get  very  turned  off with  the  upside-down  tree,  its  parent  and  child  nodes,  the  children  of the  child  node,  siblings,  first  node,  last  node,  and  the  different  event  propagation  models,  and  just  let  someone  else  deal  with  it.  This  chapter  introduced  that  " D OM   D O M"   and  we  stepped  through  the  W 3C   standard  D OM   methods  used  to  manipulate  the  tree  so  that JavaScript  could  get  a  handle  on  very  element  of  a W eb   page.  We  also  discussed  h ow  to  use  the  D OM   for  event  handling  and  the  differences  between  the  standard  W 3C  model  and  Microsoft's  model.  We  talked  about  unobtrusive  JavaScript,  the  strategy  of  separating JavaScript  code  from  the  H T ML   content  and  CSS  presentation  when  develop- ing W eb   pages.  Now  that you  have  reached  the  end  of this  chapter,  the  D OM   should  not  be  such  a  mystery,  and  you  should  be  able  to:   1.  Traverse  the  document  tree  from  node  to  node.  2.  Understand  the  parent child sibling  relationship.  3.  Manipulate  the  tree  using  the  D OM   methods.  4.  Create  a  new  element  and  insert  it  into  the  D OM   tree.  5.  Delete  an  item  from  a  list  using  the  D O M.  6.  Change  the  text  in  a  paragraph  using  the  D O M.  7.  Create  a  list  and  table  on  the  fly.  8.  Clone  an  attribute.  9.  Use  event  listeners.  10.  Register  more  than  one  event  for  an  object.  11.  Turn  on  and  off  bubbling  and  capturing.  12.  How  Microsoft  differs  from  the  W 3C   implementation  of  handling  events.  13.  Use  events  to  change  the  style  of  a  document.  14.  Cancel  an  event.  T£T   T A   ~ \ A if    A 1 71    11"   <-..   <-1   ..1   ..1   "1   1           T  T TA  A T    Exercises   691   Exercises   1.  Looking  at  the  following  markup,  draw  a  model  demonstrating  the  element  and   text  nodes  as  a  tree.    This  is  the   content   of my paragraph.    2.  Create  an  HTML  document  based  on  the  following  DOM  tree.  Check  your   DOM  tree  with  a  DOM  inspector.   3.  Using  the  DOM  properties  and  methods,  and  using  the  markup  in  Exercise  1,  create  a JavaScript  function  that  will  be  called  when  the  document  is  loaded.  The  function  should  be  set  up  as  follows:   to  para.   a.  Create  an  element  node  p  assigned  to  a  variable  called  para.  b.  Create  a  text  node  assigned  to  a  variable  called  txtl.  c.  Append  txtl  d.  Create  an  element  node  em  assigned  to  a  variable  called  emphasis.  e.  Create  a  text  node  assigned  to  a  variable  called  txt2.  f.  Append  g.  Append  h.  Create  a  text  node  assigned  to  a  variable  called  txt3.  i.  Append  txt3  to  para.  j.   Append  para  to  the  element  testdiv  in  the  document.   to  emphasis.  to  para.   txt2  emphasis   Start  with  an  HTML  document  containing     tags  with  an  id  attribute  called  testdiv.    692   Chapter  15      The W3C DOM  a nd   JavaScript   5.  Use  the  following JavaScript  function  in  a  .js  file  and  create  an  HTML  document   to  produce  the  output  shown  here:   function get_fortune    {   today  =  new Date  ;  sayings  = new Array    "Carpe  Diem.",  "Silence  is golden but  duck tape  is  silver.",  "An apple  a day keeps  the  doctor away.",  "To each his  own.",  "If at  first you don't  succeed,  try again.",  "Never  settle  for mediocrity,  strive  for success",  "Live  and  let  live."     ;  n=sayings.length;  number  =  Math.floor Math.random  *n ;  fortune  =  "Today  is  "+today+  ". Today's  fortune:     "  +sayings [number]  +" ";   document.getElementByld 'divsaying' .innerHTML  =  fortune;   }   -J   M o z i ua   n r e t ox   File   Edit   View   History   Bookmarks   Tools   Help   *   L lj    [D   F'le :     c  : DQCumentso o20ando o2Ci5ettings Owner My  o20DQCur      Windows  Marketplace   ^  AOL  Mail   1629        ...   Qj   layers   j   layers   [j    file: ....html   [j    file: ....html   [j    file: ....hti   Show text on same page using div and innerHTML.     ICIick  h e re   for  y o ur   f o r t u n e ! "]   Today is  Fri Aug 08  2008  16:0":42  GMT-0700   Pacific  Daylight  Time .   Today's  fortune:   If at  first  you  don  jt  succeed,  try  again.   6.  Create  a  document  that  contains  a  table  with  at  least  two  rows  and  columns.   Put  text  in  the  table  cells  using  the  DOM.   7.  Write  a  function  that  can  be  used  to  add  and  remove  an  event  listener.  The   function  will  be  cross-browser  compliant.  It  will  take  three  arguments:  a  refer- ence  to  the  object,  the  event   click,  onclick ,  and  the  function  that  will  handle  the  event.  The  W 3C   Boolean  value  will  be  set  to  false.  You  can  rewrite  Example    Exercises   693   8.  Write  a JavaScript  program  that  will  use  an  event  listener  to  modify  a  table  as   shown  here.  W h en   the  user  clicks  the  first  table  cell  the  second  one  is  changed.   dog  racoon  bird   9.  Use  the  D OM   to  dynamically  create  a  link  and  set  its  attributes.  Use  the  D OM   to  get  the  attribute  and  display  its  value  in  an  alert  box.   10.  How would  you  remove  one  of  the  blogs  in  Example  15.10?  Write  a  function  to   demonstrate.    chapter   16   Cookies   16.1  What Are Cookies?   T he   W eb   protocol,  H T T P,   was  designed  to  be  stateless  to  keep  transactions  between  a  browser  and  server  brief  and  cut  down  on  the  overhead  of  keeping  connections  open.  Stateless  means  that  after  a  transaction  takes  place  between  the  browser  and  server,  the  connection  is  lost  and  neither  the  browser  nor  server  have  any  recollection  of  what  transpired  between  one  session  and  the  next.  But  as  the  Internet  grew  and  people  started  filling  up  shopping  carts  with  all  kinds  of  goodies,  ordering  everything  from  groceries  to  music,  books,  prescription  drugs,  and  even  cars  and  homes,  it  became  necessary  for  merchants  to  remember  what  their  customers  purchased,  their  preferences,  registration  numbers,  user  IDs,  and  so  on.  Enter  Netscape  way  back  in  1 9 94   with  the  cookie.  A  cookie  is  a local  file  used  to  store  information,  and  it is  persistent;  that  is,  it is  maintained  between  browser  sessions  and  remains  even  when  the  user  shuts  down  his  or  her  com- puter.  The  cookie  idea became  very popular  and  is  n ow  supported  by  all  major  browsers.  T he   term  "cookie"  comes  from  an  old  programming  trick  for  debugging  and  testing  routines  in  a  program.  A  text  file  called  a  "magic  cookie"  was  created.  It  contained  text  that  was  shared  by  two  routines  so  that  they  could  communicate  with  each  other.  T he  cookie  feature  started  by  Netscape1  is  also  just  a  little  piece  of  textual  data  that  is  stored  in  a  file   often  called  the  cookie jar   on  the  hard  drive  of the  client   browser .  It  contains  information  about  the  viewer  as  he  or  she  navigates  different  pages  on  a  W eb   site  or  returns  to  the  W eb   site  at  a  later  time.  T he   information  might  be  as  simple  as  to  welcome  the  viewer  to  your  site,  and  based  on  past  visits,  show  him  or  her  a  new  b o ok  by  a  favor- ite  author,  display  the  latest  stock  quotes,  or  take  the  user  to  CNN  Europe  when  he  or  she  wants  to  view  the  news.  It  could  save  billing  and  shipping  information  to  be  retrieved  at  a  later  time  to  save  retyping  it  over  again.   There  are  two  kinds  of  cookies:  session  cookies  and  persistent  cookies.  The  session    696   Chapter 17   Regular Expressions and Pattern Matching   cookie  file  on  the  client.  We  will  be  talking  about  persistent  cookies  in  this  chapter.  T he  H T TP   server  sends  the  cookie  to  the  browser  when  the  browser  connects  for  the  first  time  and  from  then  on,  the  browser  returns  a  copy  of  the  cookie  to  the  server  each  time  it  connects.  T he   information  is  passed  b a ck   and  forth  between  the  server  and  browser  via  H T TP   headers.  Figure  16.1  demonstrates  how  the  Firefox  add-on,  called  Live  H T TP  Headers,  displays  the  back-and-forth  transaction  between  a  browser  and  server  with  cookies   server  site  is  Amazon.com .   u i nj   m   I  Live  HTTP  headers   Headers  Generator  Config [About]   HTTP  Headers   GET   HTTP 1.1  Host:  www.amazon.com  User-Agent:  Mozilla 5.0  Windows;  U;  Windows NT 5.1;  en-US;  rv:1.9.2  Gecko 20100115 Firefox 3.6  .NET CLR 3.5.30729   Accept:  text htmlj application xhtml+xmlj application xml; q=0.9, *   *;  q=0.8  Accept-Language:  en-uSjen;q=0.5  Accept-Encoding:  gzip, deflate  Accept-Charset:  ISO-8859-1, utf-8; q=0.7, *; q=0.7  Keep-Alive:  115  Connection:  keep-alive  Cootie:  ubid-main= 179-8350268-2807442;  x-main=GyZTysaFERvLVOGpjyQ813yAfsUiaWeL;  apn-user-id= 1 f6f 16f0-080c-4f72-bacc-54ee25d4ed40   HTTP 1.1 200 OK  Date:  Tue,  16 Mar 2010  17:30:19 GMT  Server:  Server  Set-Cookie:  skin=noskin;  path=i;  domain=.amazon.com;  expires=Tue,  16-Mar-2010  17:30:19  GMT  Set-Cookie:  ubid-main= 179-8350268-2807442;  path= ;  domain=.amazon.com;  expires=Tue  Jan  01  08:00:01  2036  GMT  Set-Cookie:  session-id-time= 12693276001;  path= ;  domain=.amazon.com;  expires=Tue  Mar  23  07:00:00  2010  GMT  Set-Cookie:  session-id= 184-2637326-7386656;  path= ;  domain=.amazon.com;  expires=Tue  Mar  23  07:00:00  2010  GMT  x-amz-id-1:  12EV94E5QAPRK9VVCD75  P3P:  policyref="http:   www. amazon. com w3c p3p. xml", CP="AMZN "   Replay...   0  Capture   Figure  16.1  Watching cookies with  Firefox Live HTTP Headers add-on.   Cookies  can  make  a  W eb   page  personal  and  friendly,  and  store  important  information  about  the  user's  language,  reading,  or  music preferences,  and  how many times  he  or  she  has  visited  your  site;  track  items  in  a  shopping  cart;  and  more.  However,  some  companies  use  cookies  to  track  you  across  various  W eb   sites,  even  if you  aren't  aware  of  the  company  or  didn't  give  them  permission  to  do  so.  Modern  browsers  take  care  of this  by giving you  con- trol  over what sites  are  allowed  or  not  allowed  to  set  cookies.  Cookies  can  also  be  annoying,  and  some  question  the  security  of  putting  unknown  data  on  their  hard  drive.2  Love  'em  or  hate  'em,  they're  an  intrinsic  part  of the  Web.  But you  do  have  a  say  about whether  or  not  to    16.1  What Are Cookies?   697   use  them.  If you  don't like  cookies, you  can  turn  them  off,  and remove  all  of them  from your  hard  drive.  For  example, if using Firefox, go  to  the Tools—»Options—»Privacy and from  there  you  can  block  all  cookies  for  this  site   see  Figure  16.2 .   ^¿Enabling and  disabling cookies  -  Mozilla  Firefox   File   Edit   View   History   Bookmarks   Tools   Help   d+disabling+c   ffi   T   -  Google   r   Tabs   Content   Applications   Privacy   Securi   Ai   Ö  Cookies   ö   0   History   Firefox will:    Use custom settings for history   The following cookies are stored on your computer:   Cookie  Name   I   I  Automatically start Firefox in a private browsing session   0  Remember  my  browsing  history  for  at  least   90   0  Remember  download  history   1   I  Remember search and form history   0  Accept  cookies  from  sites   0  Accent  third-party  cookies  Keep until:    they expire   I   I  Clear history when Firefox closes   Location Bar  When using the location bar.,  suggest:  History and Bookmarks   Figure  16.2  Firefox and cookies options.   Site  El  i  El  I  El  I  E   El  p a ol  .com   ,amgdgt.com  ¡ampsoft.net  ¡analytics.spongecell.com  j animals. nationalgeographic. com   Name :  Content:  Host:  Path:  Send For :  Expires:   no cookie selected ;=    no cookie selected >   no cookie selected ;=    Remove Cookie   Remove All Cookies   -   E»   3  — -r   B @E   3   Y   B?  Windows  Internet  Explorer   Back   Forward   EF  m  Options  Web Help   E 0H   Contents   Index     Search   Favorites    Type in the keyword to find:   cookies   command  keys   shortcut  keys   compact  policies  complete  webpages,  saving  completing web information automatically  conferencing  connecting to secure websites  connecting to the Internet  Content Advisors  controls,  unsigned  controls, Web  page   changing  settings  customizing cookie settings for individual  deleting  cookies  deleting  cookies  automatically  FAQ  Internet  security  zones   winoows-  Internet   Or   Explorers   Getting  started  with  Internet  Explorer   With  an  Internet  connection  and  Internet  Explorer,  you  can  find  and  view  information  about  anything  on  the  web.  Just  click  the  topics  below  to  get  started.      Introducing  Internet  Explorer      Learn  about  security  and  privacy   features  in  Internet  Explorer      Help  protect  yourself  from  fraudulent  websites  by  using  SmartScreen  Filter  I   k m»    , „ ak   4-k   .    698   Chapter 17   Regular Expressions and Pattern Matching   If you  are  using  Internet  Explorer   see  Figure  16.3 ,  you  can  restrict  cookies  by  going   to  the  Tools  m e nu   and  then  to  Internet  Options—»Privacy   see  Figure  16.4 .   Internet  Options   General  Security  Privacy  j  Content:  Connections  Programs  Advanced     Settings   f t _1    Select  a  setting  for  the  Internet  zone.   M e d i um   -  Blocks  third-party  cookies  that  do  not  have  a  compact  privacy  policy  -  Blocks  third-party  cookies  that  save  information  that  can  be  used  to  contact  you  without  your  explicit  consent  -  Restricts  first-party  cookies  that  save  information  that  can  be  used  to  contact  you  without  your  implicit  consent   Import   Pop-up  Blocker   Prevent  most  pop-up  windows  from  appearing.   Settings   Turn  on  Pop-up  Blocker   I   I Do not collect data for use by InPrivate Filtering   s   Disable  toolbars  and  extensions  when  InPrivate  Browsing  starts   Apply   Figure  16.4   Internet Explorer:  Move slider to select what cookie types are restricted.   If you  are  using  Opera,  it  supports  cookies  in  the  same  format  as  Firefox  and  Internet  Explorer.  Go  to  Tools—»Advanced—»Cookies  to  manage  cookies.  And  if  Safari  is  your  browser,  choose  Safari—»Preferences  and  click  Security.  In  the  Accept  cookies  section,  specify  if  and  when  Safari  should  accept  cookies  from  W eb   sites.  To  see  an  explanation  of  the  options,  click  the  Help  button   it  looks  like  a  question  mark .   Unlike  Grandma's  old-fashioned  cookie jar  that  could  be  packed  full  of sugar  cookies,  W eb   browser  cookies  occupy  a  limited  amount  of  space.  Browsers  usually  can't  store  more  than  3 00   cookies  and  servers  not  more  than  20.  Storage  is  usually  limited  to  only  4  kilobytes  per  cookie,  so  you  can't  store  a  lot  of  information.  T he   actual  file  name  that  holds  the  cookie  data  varies  on  different  platforms.  Mozilla  Firefox  stores  cookies  in  a  file  named  cookies.txt  in  the  system  directory;  Internet  Explorer  stores  them  in  the  W i n- dow\Cookies  directory,  and  for  the  M ac   in   Users YourUserName Library Cookies.    16.1  What Are Cookies?   699   cookies  on  the  local  browser,  eliminating  the  need  for  the  server-side  program  to  handle  them,  and  thereby  cutting  down  on  server  activity.  The  cookie's  default  lifetime  is  the  length  of  the  current  session;  then  they  are  destroyed.  See  the  expiration  attribute  dis- cussed  later.   Cookies  are  composed  of  text  in  the  form  of  name value  pairs,  often  nicknamed  "crumbs,"  and  up  to  20  pairs  can  be  stored  in  a  single  cookie  string.  The  browser  stores  only  one  cookie  per  page.   W h en   making  cookies,  the  crumbs  consist  of  name=value  pairs,  called  attributes,  that  must  be  terminated  with  a  semicolon.  Within  the  string,  semicolons,  commas,  or  whitespace  characters  are  not  allowed.  The  HTTP  Set-Cookie  header  has  the  following  format:   F O R M AT   E X A M P LE   Set-Cookie:  name=value;  [expires=date};[path=path];  [domain=domainname];  [secure];   Set-Cookie:  id="Bob"; expires=Monday,  21-0ct-05  12:00:00  GMT;domain="bbb.com";  path=" ";  secure;   16.1.2  The Attributes of a Cookie   W h en   setting  the  cookie,  it  is  important  to  understand  the  components  of  a  cookie.  It  has  a  name  and  a  value  and  another  set  of optional  attributes  to  determine  the  expiration  date,  the  domain,  path,  and  whether  the  cookie  must  be  sent  over  a  secure  communica- tions  channel   HTTPS .  All  of  these  attributes  are  assigned  as  strings.   Name.  there.  It  can  be  a  session  ID,  a  user  name,  or  whatever  you  like.   The  actual  cookie  text  consists  of the  name  of the  cookie  and  the  value  stored   F O R M AT   nameofcookie=value;   E X A M P LE  id=456;  email=joe@abc.com;  name=Bob;    700   Chapter 17   Regular Expressions and Pattern Matching   method,  which  returns  URL  encoding  for  a  string,  acceptable  to  the  browser.   See  the  section  "Assigning  Cookie  Attributes"  on  page  702.    Expiration Date.  The  cookie  normally  expires  when  the  current  browser  session  ends,  which  gives  it  little  value,  but  you  can  specify  an  expiration  date  that  will  let  it  persist,  by  using  the  following  format:   F O R M AT   E X A M P LE   ;expires=Weekday,  DD-MON-YY  HH:MM::SS GMT   ;expires= Friday,  15-Mar-04  12:00:00 GMT   The  day  of  the  week  is  specified  by  Weekday,  the  day  of  the  month  by  DD,  the  first  three  letters  of  the  month  by  MON,  and  the  last  two  numbers  of  the  year  by  YY   e.g.,  03  or  04 .  The  hour,  minutes,  and  seconds  are  specified  in  HH:MM:SS  and  the  GMT  time  zone  is  always  used.  Some  cookies  last  for  days,  but it's  possible  for  them  to  even  last  for  years.  It's  up  to  the  designer  to  decide  how  long  a  cookie  should  live.  If sensitive  infor- mation  is  contained  in  a  cookie,  setting  the  expiration  date  also  can  limit  a  potential  attacker  from  intercepting  the  cookie  as  it  is  transported  back  and  forth  across  the  net- work   http:  en.wikipedia.0rg wiki HTTP_c00kieC00kie_hijacking .    see   Once  the  cookie  has  expired  it  is  called  stale  and  is  automatically  destroyed.   Domain  Name.  The  domain  name,  not  commonly  used,  specifies  a  general  domain  name  to  which  the  cookie  should  apply.  Each  cookie  has  a  domain  and  a  path,  if not  set,  the  page  that  set  the  cookie.  The  domain  tells  the  browser  to  which  domain  the  cookie  should  be  sent.  The  purpose  of  setting  the  domain  is  to  allow  cookies  to  cross  sub- domains;  it  allows  the  cookie  to  be  shared  among  multiple  servers  instead  of just  the  one  you're  on.  If you  don't  use  the  full  http:lldoma.in  syntax,  then  a  leading  dot  must  precede  the  domain  name.   F O R M AT   E X A M P LE   ;  domain=.domain_name  ;  domain=http:  somedomain.com    16.2  Creating a  Cookie with JavaScript   701   Path.  The  path  is  used  to  specify where  the  cookie  is  valid  for  a  particular  server.  Set- ting  a  path  for  the  cookie  allows  other  pages  from  the  same  domain  to  share  a  cookie.   F O R M AT   ;  path=pathname   E X A M P LE   ;  path= home   Secure.   HTTPS  server .   F O R M AT   ;  secure   If  a  cookie  is  secure,  it  must  be  sent  over  a  secure  communication  channel   16.2  Creating  a  Cookie with JavaScript   In  the  following  examples,  we  will  create  a  cookie,  view  the  cookie,  and  then  destroy  it.  It  is  important  to  note  when  you  are  setting  cookies  that  they  are  stored  in  the  browser's  memory  and  not  written  to  the  hard  drive  until  you  exit  the  browser.   16.2.1  The Cookie Object   The  cookie  is  stored  by  JavaScript  as  a  document  object  for  both  reading  and  writing  cookie  data.  Cookies  are  made  by  assigning  attributes  to  the  cookie  property.  W h en   you  start  your  browser,  if  there  are  cookies,  they  pertain  to  the  current  document.  The  doc- ument.cookie  property  contains  a  string  of  name=value  pairs  representing  the  names  of  all  the  cookies  and  their  corresponding values,  such  as  a session  ID  number  or  a user  ID.  All  the  other  attributes  set  for  the  cookie,  such  as  expiration  date,  path,  and  secure,  are  not  visible.  In  a JavaScript  program,  if you  execute  the  statement  shown  in  Figure  16.5,  you  will  see  all  the  cookies  set  for  this  page.   M i c r o s o ft    I n t e r n et   Explorer    tgKVUst;  name=Ellie%20Miin;  tgKVUsi=SkipUserDataByUser:Q   A    702   Chapter 17   Regular Expressions and Pattern Matching   F O R M AT   E X A M P LE   W h en   you  reload  the  page,  the  document.cookie  property  will  contain  all  the  cookie   text  saved  for  that  page.   16.2.2  Assigning Cookie Attributes   To  create  a  cookie,  assign  the  name=value  pairs  to  the  document.cookie  property.  Be  care- ful  with  quotes,  making  sure  the  variables  you  use  are  not  quoted,  but  the  text  that  the  cookie  needs,  such  as  the  word  "name",  and  "="  are  quoted.  Also,  this  will  be  a  big string  where  the  different  parts  are  concatenated  together  with  the  +  operator.  The  following  format  sets  a  cookie  using  all  possible  attributes.  Those  attributes  enclosed  in  square  brackets  are  optional:   name=value;[expires=date];[path=path];[domain=somewhere.com];  [secure]   document.cookie="id="  +  forml.cookie.value  ";expires="  +  expirâtion_date+";path= ";   The  escapeO and  unescapeO  Built-in  Functions,  it  is  important  to  know  that  when  assigning  string  name=value  attributes  to  a  cookie,  you  cannot  use  whitespace,  semicolons,  or  commas.  The  escapeO  function  will  encode  the  string  object  by  convert- ing  all  nonalphanumeric  characters  to  their  hexadecimal  equivalent,  preceded  by  a  per- cent  sign;  for  example,  %20  represents  a  space  and  %26  represents  an  ampersand.  To  send  information  back  and  forth  between  browser  and  server,  the  browser  encodes  the  data  in what is  called  URI  encoding.  You  can  see  this  encoding in  the  location  bar  of your  browser;  when  you  go  to  Google  and  search  for  something,  you  will  see  the  search  string  in  the  location  bar  of the  browser  all  encoded.  Because  the  browser  handles  cookies,  the  cookie  strings  can  be  encoded  with JavaScript's  built-in  escapeO  function  to  ensure  that  the  cookie  values  are  valid.   The  unescapeO  function  converts  the  URI-encoded  string  back  into  its  original  for- functions  are  a  more   mat  and  returns  recent  version  of  escapeO  and  unescapeO  and  do  not  encode  as  many  characters.   it.  The  encodeURlO  and  decodeURlQ  built-in   E X A M P LE    16.1            The  escapeO  Method     16.2  Creating  a  Cookie  with  JavaScript   703   E X A M P LE     CONTINUED    16.1  function  seeEncoding form {  var myString  =  form.input.value;  alert escape myString  ;  }  function  seeDecoding form {  var myString  =  form.input.value;  alert unescape myString  ;   }               URL  Encoding              Type  in a  string of  text:          <input  type="button"       <input  type="button"   value="See  encoding"  onClick="seeEncoding this.form ;"   >   value="See  decoding"  onClick="seeDecoding this.form ;"   >   1   2  3   4   5   6                      E X P L A N A T I ON   1  A  function  called  seeEncodingO  is  defined.  It  takes  a  reference  to  a  form  as  its  only   2   3   4   parameter.  The  built-in  escape    function  is  used  to  URI  encode  the  string  that  was  entered  as  input  by  the  user.  A  function  called  seeDecodingO  is  defined.  It  takes  a  reference  to  a  form  as  its  only  parameter.  The  built-in  unescape    function  is  used  to  convert  the  URI  encoded  string  back  into  its  original  ASCII  format.   5  W h en   the  user  clicks  this  button,  the  onClick  event  is  triggered  and  the  encoded   string  will  appear  in  an  alert  dialog  box.    704   Chapter 17   Regular Expressions and Pattern Matching   URL  Encoding   Type in a string of text:    Oh  my toe!!!",  he  cried  "ARGGH!!@@!"   See encoding   See decoding         Figure  16.6   Using  t he  escapeQ  a nd   unescapeQ  functions.   [ J a v a S c r i pt   A p p l i c a t i o n]   Figure  16.7  t he   "See  d e c o d i n g"   b u t t on     b o t t o m  .   The  user  pressed  t he   "See  e n c o d i n g"   b u t t on    top ;  t he   user  pressed   16.2.3  Let's Make Cookies!   following  example  creates   Now  that  we  have  all  the  ingredients,  let's  put  them  together  and  make  a  cookie,  then  pull  it  out  of  the  oven   your  program   and  enjoy  a  delicious  cookie  for  your  browser.  two  cookies  called  "visitor"  and  "color".  T he   value  T he   assigned  to  it  will  be  the  visitor's  name  and  his  or  her  favorite  color.  You  will  see  this  name=value  pair  the  cookie  values  are  saved  on  the  browser  in  a  cookie  file.  T he   next  time  a  user  views  a  page  on  this  site,  the  cookie  values  are  available.  In  Example  16.2  we  will  retrieve  the  cookies  on  a  different  page  and  use  the  user  preferences  gleaned  from  a  cookie  to  change  the  background  color  of  the  page.   the  document.cookie  property.  O n ce    this  page  has  been  viewed,   in    16.2  Creating a  Cookie with  JavaScript   705   E X A M P LE    16.2         Making  Cookies        function makeCookie form {   1  2   3   4   5  6   7  8   9   var when = new Date  ;  when.setTime when.getTime    + 24 * 60 * 60 * 1000 ;   II  24 hours from now       One year from now   when.setFullYear when.getFullYear    + 1 ;  yname=form.yourname.value ;  favcolor=form.yourcolor.value;  document.cookie=escape "visitor" +"="+escape yname +  document.cookie=escape "color" +"="+escape favcolor +  alert document.cookie  ;  }  function welcome myForm {   ";expires="+when.toGMTString  ;  ";expires="+when.toGMTString  ;   you=myForm.yourname.value ;  var  position=document.cookie.indexOf "name=" ;  if   position != -1 {   var begin = position + 5;  var end=document.cookie.indexOf ";",  begin ;  if end == -1 { end=document.cookie.length; }  you= unescape document.cookie.substring begin,  end  ;  alert "Welcome " + you ;   }  else{  alert "No cookies today" ;}   }                    Got milk?       What is your name?           What is your favorite color?                706   Chapter 17   Regular Expressions and Pattern Matching   E X A M P LE    16.2    CONTINUED    11       <input  type="button"   value="Get Cookie" onClick="welcome this.form ;"   >                      E X P L A N A T I ON   1  A  function  called  makeCookie    is  defined.  It  takes  a  reference  to  a  form  as  its  only   2  3   4   parameter.  This  is  the  function  that  creates  the  cookie.  A  new  Date  object  is  created  and  assigned  to  the  variable  called  when.  The  Date  object  creates  a  date  a year  from  now.  This  will  be  the  expiration  date  for  the  cookie.  Two  cookies  are  created.  The  first  cookie's  name  is  "visitor"  and  its  value  is  the  us- er's  name,  stored  in  yname.  The  second  cookie's  name  is  "color"  and  its  value  stored  in favcolor.  Both  values  came  from  the  form  input.  The  attributes  are  es- caped  just  in  case  the  user  added  unwanted  characters,  such  as  spaces,  commas,  or  semicolons.  The  expiration  date  is  set  to  a  year  from  now  and  is  converted  to  GMT  time,  the  required  format  for  the  "expires"  attribute.  Notice  the  quotes.  If  the  text  is  literal  for  the  attribute  it  must  be  quoted;  if  it  is  a  variable  value,  then  it  is  not  quoted  or JavaScript  can't  interpret  it—very  tricky  getting  these  right.   5  A  function  called  welcome    is  created.  It  takes  a  reference  to  a  form  as  its  only   7   6   parameter.  Its  purpose  is  to  greet  the  user  based  on  the  cookie  value.  The  following  statements  are  used  to  parse  out  the  value  attribute  of  the  cookie.  The  beginning  index  position  is  set  to  where  the  "name="  string  starts  in  the  cook- ie  string.  It  will  be  at  position  5  in  this  example.  Starting  at  index  position  0,  po- sition  5  takes  us  to  the  character  directly  after  the  =  sign.  The  end  position  is  ei- ther  at  the  first  semicolon  or  at  the  end  of  the  string,  whichever  applies.  After  getting  the  substring,  the  value  part  of  the  cookie,  the  unescapeQ  function,  will  convert  the  URI-encoded  string  back  into  its  original  ASCII  format.  The  user  is  welcomed,  all  based  on  the  value  extracted  from  the  cookie.  The  cook- ie  lets  this  W eb   site  know  who  you  are  so  that  you  can  get  a  personal  greeting  when  you  return  to  the  site.  The  user  will  enter  his  or  her  name  in  a  textbox  field.  See  Figure  16.8.   9  10  W h en   the  user  clicks  this  button,  the  onClich  event  is  triggered,  and  the  cookie   8   will  be  made.  See  Figure  16.9.    16.2  Creating a Cookie with JavaScript   707   ijftrefox  ïi&foMfte   Tools   Help   a}   Q   file:   C: wamp www tp le9415.html   f *    See my Coo...   f1    Making a Co...   Making a Co...   ûl   1  1 ^  Making  a  Co   Got  milk?   What is your name?   What is your favorite  color?   [  Make cookie  ]   [  Get Cookie  ]   Figure  16.8  Creating a  cookie with  user preferences.    708   Chapter 17   Regular Expressions and Pattern Matching   Got  milk?   "What  is   y o ur   n a m e?   E l i z a b e th   S t a c h e l in   "What  is  y o ur   favorite   c o l o r?   violet     M a ke   c o o k i e " "]   I  G et   C o o k i e " "]   [ J a v a S c r i pt   A p p l i c a t i o n]      X     j   Welcome Elizab eth  Stachelin   OK   Figure  16.10  Retrieve  t he   c o o k ie   a nd   w e l c o me   t he   user.   16.2.4  Retrieving Cookies from a Server   W h en   retrieving  cookies,  you  can  only  get  those  that were  written  for  the  server  you  are  on  and  written  by  you.  You  cannot  read  and  write  cookies  that  belong  to  someone  else  or  reside  on  a  different  server.  In  the  last  example,  we  got  one  cookie;  in  Example  16.3  all  the  cookies  for  this  page  are  displayed.   EXAMPLE  16.3        See  my  Cookies        function  seeCookie  {   if document.cookie  ==  "" {   document.write "No  cookies" ;   }  else{   1   2  3   4  5   var cookiestr="" ;  var myCookie = document.cookie.split ";  " ;  for var  i=0;i<myCookie.length;  i++ {   * document.write " Cookie:  "  +  cookiestr+=myCookie[i]  + "  ";  var  cookieData=myCookie[i].split "=" ;   myCookie[i].split "=" [1]  +" " ;  *     16.2  Creating  a  Cookie  with  JavaScript   709   EXAMPLE   16.3    CONTINUED    }   }  alert cookiestr ;   }       8   9             Got  milk?        Click  to  see  document.cookie property      10   <input  type="button"  value="See  Cookie"   o n C l  i c k = " s e e C o o k i e     ;"     >                      EXPLANATION   3   2   4  5   is  reached.   1  A  function  called  seeCookie    is  defined.  It  will  list  out  all  the  cookies  that  have  been  set.  First,  we  check  to  see  if  there  are  any  cookies  at  all.  If not,  the  alert  box  will  say  so.  The  split  function  splits  up  the  cookie  string  by  semicolons  and  returns  an  array  called  myCookie.  The or  loop  iterates  through  each  element  of  the  myCookie  array  until  the  end  of  the  array,  myCookie.length,  Each  time  we  get  a  cookie  it  is  appended  to  this  string,  called  cookiestr.  The  name value  pairs  of  the  cookie  string  are  split  by  "="  signs.  An  array  is  re- turned.  If  the  name  assigned  to  the  cookie  is  "color",  that  name  is  stored  in  cookieData[0]  and  the  color  choice  of  the  user  is  stored  in  cookieData[l  ].  Based  on  the  user's  preference  of  color,  the  background  color  of  the  page  is  changed.  The  alert  box  displays  all  the  cookies  that  were  retrieved.   8  9  W h en   the  document  is  loaded  and  every  time  the  user  refreshes  the  page,  the  on- Load  event  is  triggered  and  the  values  in  the  form  are  cleared  with  the  reset    method.   7   6   10  W h en   the  user  clicks  the  button,  the  onClick  event  is  triggered,  and  the  seeCook-   710   Chapter  16      Cookies   F i r e f ox   jokmarks   Tools   Help   j£j>   file:   C: wamp www seecookie.html   T      Making a Co...  Q  Making a Co...     Making a Co...     Making Coo...   C l i ck   to   s ee   d o c u m e n t,   c o o k ie   p r o p e r ty   Got  milk?   [~~See  C o o k i e " "]   Got  milk?   C l i ck   to   s ee   d o c u m e n t,   c o o k ie   p r o p e r ty   [ J a v a S c r i pt   A p p l i c a t i o n]     X     1   visitor=Elizabeth%20Triplett color=violet   1   ÖK   j   Figure  16.11  W h en   the  user clicks the  "See  Cookie"  button,  all  cookies are  retrieved.   Figure  16.12  After  the  user  clicks  t he   button,  t he   color  of t he   p a ge   c h a n g es   b a s ed  on   the  c o o k ie   t h at   w as   sent.   16.2.5  Deleting a Cookie   If you  want  to  delete  a  cookie  for  the  current  page,  set  the  expiration  date  of  the  cookie  to  a  date  earlier  than  the  current  date.  This  will  cause  the  cookie  to  be  deleted  when  the  session  ends.   EXAMPLE  16.4        Delete  Cookie       var i = 0;  function delCookie   cookieName {   document.cookie  = cookieName  +  "="   l  2   + ";  expires =Thu,  01-Jan-1970 00:00:01 GMT";    16.2  Creating  a  Cookie  with  JavaScript   711   EXAMPLE   16.4   CONTINUED   function  seeCookie  {   if document.cookie  ==  "" {   alert "No  cookies" ;  return  false;   }  else{   var myCookie  = document.cookie.split ";  " ;  if    i < myCookie.length  {   document.forml.cookietype.value  =   myCookie[i].split  =  [0];   i++;       Increase  the  index value      to  see  the next  cookie   }  else{alert "No  more  cookies" ;}   }   }                     Got  milk?       Is  this  the cookie you want  to delete?            <input  type="radio"  name="radio"  value="choice"  onClick=   "delCookie document.forml.cookietype.value ;"   >Yes   <input  type="radio"  name="radio"  value="choice"  onClick="seeCookie  ;"   >No   3   4   5   6   7   8   9   10                      EXPLANATION   1   The  function  called  delCookieQ  will  remove  a  requested  cookie.  The  name  of  the    712   Chapter  16      Cookies   EXPLANATION    CONTINUED    2   3   4   5   7  8  9   T he   expiration  date  of  the  cookie  is  set  to  the  beginning  of U N IX   time,  also  called  epoch  time—-January  1,  1970.  Certainly  this  date  has  passed  and  the  cookie  will  be  deleted.  After  the  cookie  has  been  deleted,  the  seeCookie    function  will  be  called,  and  the  user  will  be  presented  with  another  cookie.  If  he  or  she  clicks  the  Yes  radio  button,  that  cookie  will  be  removed.  T he   function  called  SeeCookie    will  c h e ck   to  see  if  there  are  any  cookies  remain- ing  in  the  document.cookie  property.  If  not,  the  program  is  over.  To  actually  see  if  the  cookies  were  deleted,  close  this  session,  and  then  reopen  it.  By  splitting  up  consisting  of  a  name  and  value  attribute  of  the  cookie.  T he   first  element  of  the  array,  the  name  of  the  cookie,  is  assigned  to  the  textbox  represented  as  document.forml.cookietype.value.  for  the  user  to  see.  Each  time  the  function  is  called,  the  next  cookie  will  be  assigned  to  the  textbox,  giving  the  user  the  option  to  delete  that  cookie.   the  document.cookie  property  by  semicolons,  an  array  is  created   It  will  appear   textbox   the   in   6  W h en   the  document  has  finished  loading,  the  onLoad  event  is  triggered,  and  calls   the  seeCookieO  function.  T he   first  cookie  name  will  appear  in  the  textbox.  T he   H T ML   form  starts  here.  T he   textbox  input  type  will  be  used  to  hold  the  cookie  name.  This  radio  button,  when  clicked,  will  called  the  delCookieQ  wants  to  remove  this  cookie.  See  Figures  16.13  and  16.14.   function.  T he   user   10  This  radio  button,  when  clicked,  means  the  user  doesn't want  to  delete  this  cookie  but  would  like  to  see  the  next  cookie.  W h en   the  user  clicks  No,  the  seeCookieO  function  will  be  called.  After  all  the  cookies  have  been  shown,  the  alert  message  will  say  "No  more  cookies."   ;   Tools   Help   file:    C:  wamp www deletecookie. html   iking  a Co...     Making a Co...   Making Coo...   1   See  m^   Got  milk?   Is this the  cookie you want to  delete?    visitor   O Yes  O No    16.2  Creating a Cookie with JavaScript   713   Got  milk?   Is  this  the  cookie  you want to  delete?   [JavaScript Application]    X    1   Cookie was deli eted!   OK   Figure  16.14  The cookie  has been deleted  after user clicked  the  "Yes"  button.   16.2.6  Using the Browser to Remove Cookies   Another  way  to  delete  cookies  is  to  go  in  your  browser  and  select  Help  and  search  for  Delete  cookies.  In  Internet  Explorer  go  to  the  Tools  m e nu   and  Internet  Options   see  Figure  16.15 .  T h en   you  can  remove  all  or  some  cookies  from  the  hard  drive.   I n t e r n et   O p t i o ns   J j xj   General  j  Security j  Privacy   Content ]  Connections ]  Programs   Advanced   Home  page   You  can  change  which  page  to  use  for your  home  page.   Address:   http:   yahoo, sbo. com ds   Use Current   Use Default   Use Blank   Temporary  Internet  files   l ^j     Pages you  view  on  the  Internet  are  stored  in  a  special  folder  for  quick  viewing  later.   Delete Cookies...   Delete Files...   Settings...   History   The  History  folder  contains  links  to  pages you've  visited,  for  quick  access  to  recently  viewed  pages.   Days to keep pages in history:   20  ¿j   Clear History   Languages...   Accessibility...   Apply   Figure  16.15   Internet Options in  Internet Explorer.    714   Chapter  16      Cookies   16.3  What You Should  Know   Now you  k n ow   what  cookies  are  and  why  commercial  sites  like  to  use  them.  You  should  know:   1.  A  little  about  the  history  of  the  cookie.  2.  How  to  make  a  cookie.  3.  How  to  use  a  cookie.  4.  W h at   escaping  a  cookie  value  means.  5.  W h en   the  cookie  normally  expires  if  an  expiration  date  is  not  set.  6.  How  to  delete  a  cookie.  7.  How  to  delete  cookies  using  your  browser.  8.  How  to  enable  or  disable  cookies  on  your  browser.  9.  How JavaScript  views  a  cookie.    Exercises   715   Exercises   1.  Create  a  form  that  contains  a  set  of  checkboxes  with  different  types  of  c o f f e e s—   espresso,  cappuccino,  mocha,  and  so  on.  Ask  the  user  for  his  or  her  name  and  room  number  and  to  select  a  type  of coffee.  Tell  the  user  you  will  be  sending  the  coffee  to  that  room  number.  Create  a  cookie  to  remember  the  user's  preference.  T he   next  time  the  user  brings  up  the  page,  tell  him  or  her  there  is  a  special  rate  for  his  or  her   use  the  cookie  value   favorite  coffee.   2.  Create  a  form  that  asks  for  the  user's  shipping  address.  The  next  time  the  user   brings  up  the  page,  fill  in  the  address  using  a  cookie  value.    chapter 17   Regular  Expressions  and  Pattern  Matching   17.1  What Is a  Regular Expression?   A  user  is  asked  to  fill  out  an  H T ML   form  and  provide  his  or  her  name,  address,  and  birth  date.  Before  sending  the  form  off to  a  server  for  further  processing,  a JavaScript  program  checks  the  form  to  make  sure  the  user  actually  entered  something,  and  that  the  infor- mation  is  in  the  requested  format.  We  saw  in  Chapter  11,  " W o r k i ng   with  F o r ms   and  Input  Devices,"  some  basic  ways  that JavaScript  can  check  form  information,  but  n ow  with  the  addition  of  regular  expressions,  form  validation  can  be  m u ch   more  sophisti- cated  and  precise.  Regular  expressions  are  also  useful  for  searching  for  patterns  in  input  data,  and  replacing  the  data  with  something  else  or  splitting  it  up  into  substrings.  This  chapter  is  divided  into  two  main  parts:    1 .    h ow   to  create  regular  expressions  and  regu- lar  expression  metacharacters,  and    2 .    how  to  validate  form  input  data  with  regular  expressions.  If  you  are  savvy  with  Perl  regular  expressions   or  the  U N IX   utilities,  grep,  sed,  and  awk ,  you  can  move  rapidly  through  the  first  section,  because JavaScript  regular  expressions,  for  the  most  part,  are  identical  to  those  found  in  Perl.   A  regular  expression  is  really just  a  sequence  of  characters  that  specify  a  pattern  to  be  matched  against  a  string  of  text  when  performing  searches  and  replacements.  A  simple  regular  expression  consists  of  a  character  or  set  of  characters  that  matches  itself.  T he  regular  expression  is  normally  delimited  by  forward  slashes;  for  example,  label.   Like  Perl, JavaScript1  provides  a  large  variety  of regular  expression  metacharacters  to  control  the  way  a  pattern  is  found.  A  metacharacter  is  a  special  character  that  represents  something  other  than  itself,  such  a  a  A,  $ , *,   and  so  on.  They   are  placed  within  in  the  reg- ular  expression  to  control  the  search  pattern;  for  example,  Aabc   means  look  for  the  pat- tern  abc  at  the  beginning  of  the  line.  W i th   the  help  of  metacharacters,  you  can  look  for  strings  containing  only  digits,  only  alphas,  a  digit  at  the  beginning  of  the  line  followed  by  any  number  of  alphas,  a  line  ending  with  a  digit,  and  so  on.  W h en   searching  for  a    718   Chapter  17      Regular Expressions and Pattern  Matching   Again,  JavaScript  regular  expressions  are  used  primarily  to  verify  data  input  on  the  client  side.  W h en   a  user  fills  out  a  form  and  presses  the  submit  button,  the  form  is  sent  to  a  server,  and  then  often  to  a  server  script  such  as  PHP,  ASP.NET  or  a JavaServlet  for  further  processing.  Although  forms  can  be  validated  by  a  server  program,  it  is  more  effi- cient  to  take  care  of  the  validation  before  sending  the  script  to  the  server.  This  is  an  important  function  of JavaScript.  T he   user  fills  out  the  form  and JavaScript  checks  to  see  if  all  the  boxes  have  been  filled  out  correctly,  and  if  not,  the  user  is  told  to  reenter  the  data  before  the  form  is  submitted  to  the  server.  Checking  the  form  on  the  client  side  allows  for  instant  feedback,  and  less  traveling  back  and  forth  between  the  browser  and  server.  It  might  be  that  the  server-side  program  does  its  own  validation  anyway,  but  if  JavaScript  has  already  done  the j o b,   it will  still  save  time  and  inconvenience  for  the  user.  W i th   the  power  provided  by  regular  expressions,  the  ability  to  check  for  any  type  of  input,  such  as  e-mail  addresses,  passwords,  Social  Security  numbers,  and  birthdates  is  greatly  simplified.  This  chapter  will  teach  you  how  regular  expressions  and  their  metacharacters  are  used  so  that you  will  be  able  to  read  expressions  even  as  complicated  as  the  one  shown  in  Figure  17.1.  There  are  a  number  of  regular  expression  validators  and  libraries  on  the  W e b.   An  excellent  source  is  at  http:  www.regexlib.com.   File   Edit   View   History   Bookmarks   Tools   Help   *   C   X   M   http:  regexlib.com        * -  Regular  Expression  Library   '-5  R e g u l ar   E x p r e s s i on   L i b r a ry   Firefox  prevented  this  site  from  opening  a  pop-up  window.   H o me    S e a r ch    R e g ex   T e s t er    B r o w se   E x p r e s s i o ns    A dd   R e g ex    L o g in   O n nQ     Z U U7  Use  the  tool  "—  that  Sprints      1  Use   as   fast  as  your  team.   GE33   S u b s c r i be   I  Recent  Expressions     238  readers    E: Y FEEDE: U F: N E F:   S i te   L i n ks   ii   Regex  Cheat  Sheet     Search     Regex  Tester     Browse  Expressions   t   +   t   ^ ^r    Welcome  to  R e g E x L i b . c o m,   the  Internet's first Regular  Expressi^on^Library.  Currently  we  have  indexed  2 7 32   expressions  from  1 6 09   contributors  around  the  world.  We  hope  you'll  find  this  site  useful  and  come  back  whenever  y ou   need  help  writing  an  expression^  you're  looking  for  an  expression  for  a  particular  task;  or  are  ready  to  contribute  new  expressions  you've  just  figured  out.  Thanks!       A dd   R e g ex   F i nd   E x p r e s s i o ns   Enter  Keywords   e.g.  email        A d v a n c ed  S e a r ch    17.2  Creating a  Regular Expression   719   ubscribe   A d v a n c ed   Search   Keywords   email   Category   Minimum  Rating  I  The Best  Results  per  Page   3  Recent  Expressions  238  readers        i te   L i n ks   f  Regex  Cheat  Sheet  3  Search  3  Regex Tester  3  Browse Expressions  3  Add Regex  J  Manage My Expressions  3  Contributors  3  Regex Resources  3  Web Services  3  Advertise  3  Contact Us  3  Register  3  Recent  Expressions  3  Recent  Comments   o m m u n i ty   3  Regex Forums  3  Regex Blogs  3  Regex Mailing List    p  C o n t r i b u t o rs   UUlJil  ]JJ i íjJJU  JIIVÉJ  []ililJJilJJJ  ij   i j í i ^ i í j1   mn   j eu    íjí rjjJ   j j j j i j i i j j j í j il   Flexible   T W BB   Magram   TRY  IT  NOW!  FREE TRIAL  V»ITM  FULL SUPPORT!   [ D i a g r am    Componentt  J   Search  Results:  1  ri   expressions  f o u n d.   Displaying page  1  of  1  pages;  Items  1  to  1   P a t t e rn   Title   Q  Expression    A  [a-zA-Z0-9_H   ]+ @ [a-zA-Z0-9_H  ]+ \   [a-zA-ZHZ,S} { 1 ,25} + [;.]  [a- z A-Z0-9_H. ]+ @ [a-z A-Z0-9_H. ]+ \.  [a-z A-Z]{2j 5} -{ 1,25} + *$   Description   Matches   Non-Matches   this will accept multiple email ids separated only by semi-colons  anyway u can  change  it .  te_s-t@ts. co. in; te_s-t@ts. co. in; te_s-t@ts. co. in  nospace@between.mailids.in;  only@semi.colons.com   3  Michael Ash  54   3  Steven Smith  42   J  Ted Cambron  24   3  Matt Brooke  22   Figure  17.2  The result of searching  for the email  regular expression considered  to  be  the  best.   Displaying page  1  of  1  pages;  Items  1  to  1   narendiran  dorairaj   Rating:  I   17.2  Creating  a  Regular  Expression   A  regular  expression  is  a  pattern  of  characters.  It  shouldn't  be  any  surprise  by  now.  Java- Script  regular  expressions  are  objects.  W h en   you  create  a  regular  expression,  you  test  the  regular  expression  against  a  string.  F or   example,  the  regular  expression   green  might  be  matched  against  the  string  "The  green  grass  grows".  If  green  is  contained  in  the  string,  then  there  is  a  successful  match.   Building  a  regular  expression  is  like  building  a JavaScript  string.  If you  recall,  you  can  create  a  String  object  the  literal  way  or  you  can  use  the  StringO  constructor  method.  To  build  a  regular  expression  object,  you  can  assign  a  literal  regular  expression  to  a variable,  or  you  can  use  the  RegExp  constructor  to  create  and  return  a  regular  expression  object.    720   Chapter  17      Regular  Expressions a nd   Pattern  Matching   forward  slashes.  After  the  closing  forward  slash,  options  may  be  provided  to  modify  the  search  pattern.  The  options  are  i,  g,  and  m.  See  Table  17.1.   Table  17.1  Options  Used  for  Modifying  Search  Patterns   Option   Purpose   Used  to  ignore  case.   i   g   m   Used  to  match  for  all  occurrences  of the  pattern in  the  string.   Used  to  match  over multiple  lines.   var variable_name  =   regular  expression options;   FORMAT   EXAMPLE   var myreg  =   love ;  var reobj  =   san jose ig;   If you  are  not going  to  change  the  regular  expression,  say,  if it is  hard-coded  right  into  your  script,  then  this  literal  notation  is  faster,  because  the  regular  expression  is  evaluated  at  runtime.   17.2.2  The Constructor Method   The  constructor  method,  called  RegExpO,  creates  a  RegExp  object.  The  RegExpO  con- structor  takes  one  or  two  arguments.  The  first  argument  is  the  regular  expression;  it  is  a  string  representing  the  regular  expression,  for  example,  "green"  represents  the  literal  regular  expression   green .  The  second  optional  argument  is  called  a  flag  such  as  i  for  case  insensitivity  or  g  for  global.  The  constructor  method  is  used  when  the  regular  expression  is  being  provided  from  some  other  place,  such  as  from  user  input,  and  can  change  throughout  the  run  of  the  program.  This  method  is  handled  at  runtime.   FORMAT   FY   A M PI   F   var variable_name  = new RegExp "regular expression",  "options" ;    17.2  Creating  a  Regular  Expression   721   17.2.3  Testing the Expression   The  RegExp  object  has  two  methods  that  can  be  used  to  test  for  a  match  in  a  string,  the  test    method  and  the  execQ  method,  which  are  quite  similar.  The  test    method  searches  for  a  regular  expression  in  a  string  and  returns  true  if  it  matched  and false  if  it  didn't.  T he   execQ  method  also  searches  for  a  regular  expression  in  a  string.  If  the  execQ  method  succeeds,  it  returns  an  array  of  information  including  the  search  string,  and  the  parts  of  the  string  that  matched.  If it  fails,  it  returns  null.  This  is  similar  to  the  match    method  of  the  String  object.  Table  17.2  summarizes  the  methods  of  the  Reg- Exp  object.   Table  17.2  M e t h o ds   of  t he RegExp  O b j e ct   Method   What It Does   exec   test   Executes  a  search  for a  match in a  string and returns an array.   Tests  for  a  match  in  a  string  and  returns  either  true  or false.   The  test   Method.  T he   RegExp  object's  test    method  is  used  to  see  if  a  string  con- tains  the  pattern  represented  in  the  regular  expression.  It  returns  a  true  or false  Bool- ean  value.  After  the  search,  the  lastlndex  property  of  the  RegExp  object  contains  the  position  in  the  string  where  the  next  search  would  start.   A  string  starts  at  character  position  0.   If  a  global  search  is  done,  then  the  lastlndex  property  contains  the  starting  position  after  the  last  pattern  was  matched.   See  Example  17.4  to  see  how  the  lastlndex  property  is  used.    Steps  to  test  for  a  match:   1.  Assign  a  regular  expression  to  a  variable.  2.  Use  the  regular  expression  test    method  to  see  if  there  is  a  match.  If  there  is  a  match,  the  test    method  returns  true;  otherwise,  it  returns alse.  There  are  also  four  string  methods  that  can  be  used  with  regular  expressions.   See  section  "String  Methods  Using  Regular  Expressions"  on  page  727.    FORMAT   or   var  string="String  to  be  tested goes  here";  var regex =   regular expression ;  var  regex=new RegExp "regular  expression" ;  regex.test string ;       Literal  way       Constructor  way      Returns  either  true  or  false    722   Chapter  17      Regular  Expressions a nd   Pattern  Matching   EXAMPLE   var myString="She  wants  attention now!";  var regex  =   ten   var  regex=new RegExp "ten" ;  regex.test myString ;       Literal  way       Constructor  way       Looking  for  "ten"  in  myString    ten .test "She  wants  attention  now!" ;   EXAMPLE  17.1        Regular  Expression  Objects  the  Literal  Way        var myString="My gloves  are worn  for wear.";  var  regex  =   love ;  if   regex.test myString  {  alert "Found  pattern!" ;  }  else{  }   alert "No  match." ;       Create  a  regular  expression  object   "My  gloves  are  worn  for  wear."  is  assigned  to  a  variable  called  myString.  The  regular  expression  Hovel  is  assigned  to  the  variable  called  regex.  This  is  the  literal  way  of  creating  a  regular  expression  object.  The  test    method  for  the  regular  expression  object  tests  to  see  if  myString  contains  the  pattern,  love.  If  love  is  found  within  gloves,  the  test    method  will  return  true.  The  alert  dialog  box  will  display  Found  pattern!  if  the  test    method  returned  true.  If  the  pattern  Hovel  is  not  found  in  myString,  the  test    method  returns false,  and  the  alert  dialog  box  will  display  its  message,  No  match.   1  2  3  4   5   1  2   3   4  5                   EXPLANATION   EXAMPLE  17.2    17.2  Creating  a  Regular  Expression   723       Creating  a  regular      expression  object   EXAMPLE    2  3  4   5    CONTINUED    1 7 .2   var regex = new RegExp "love" ;  if    regex.test myString  {  }  else{  }   alert "Found pattern  love!" ;   alert "No  match." ;                   EXPLANATION   1  2   3   The  variable  called  myString  is  assigned  "My  gloves  are  worn  for  wear."  The  RegExpO  constructor  creates  a  new  regular  expression  object,  called  regex.  This  is  the  constructor  way  of  creating  a  regular  expression  object.  It  is  assigned  the  string  "love",  the  regular  expression.  The  test    method  for  the  regular  expression  object  tests  to  see  if  myString  con- tains  the  pattern,  love.  If  it  finds  love  within  gloves,  it  will  return  true.   4,  5   The  alert  dialog  box  will  display  Found  pattern!  if  the  test    method  returned  true,   or  No  match,  if  it  returns false.  See  Figure  17.3.   M i c r o s o ft   I n t e r n et   Explorer   Found  pattern  love!   OK   Figure  17.3  My gloves are  worn  for wear."  contains  the  p a t t e rn  love.   The  exec   Method.  The  execQ  method  executes  a  search  to  find  a match  for  a  spec- ified  pattern  in  a  string.  If it  doesn't  find  a match,  execQ  returns  null;  otherwise  it returns  an  array  containing  the  string  that  matched  the  regular  expression.   FORMAT   arrav = regular expression, exec  strincj  ;    724   Chapter  17      Regular  Expressions a nd   Pattern  Matching   EXAMPLE  17.3        The exec     method        1  2  3  4   var myString="MY  lovely gloves  are worn  for wear,  Love.";  var  regex  =   love i;  var  array=regex.exec myString ;  if   regex.exec myString  {       Create  a  regular  expression  object   alert "Matched!  "  + array ;   }  else{   alert "No  match." ;   }                   EXPLANATION   1  2  3  4   The  string  "My  gloves  are  worn for  wear."  is  assigned  to  myString.  The  regular  expression  Hovel  is  assigned  to  the  variable  regex.  The  execQ  method  returns  an  array  of  values  that  were  found.  If  the  execQ  method  doesn't  return  null,  then  there  was  a  match.  See  Figure  17.4.   Matched!  love   OK   Figure  17.4   The  array  returned  by execO  contains love.   17.2.4  Properties of the RegExp Object   There  are  two  types  of properties  that  can  be  applied  to  a  RegExp  object.  The  first  type  is  called  a  class  property   see  Table  17.3   and  applies  to  the  RegExp  object  as  a  whole,  not  a  simple  instance  of  a  regular  expression  object.  The  input  property  is  an  example  of  a  class  property.  It  contains  the  last  string  that  was  matched,  and  is  applied  directly  to  the  RegExp  object  as  RegExp.input.   The  other  type  of property is  called  an  instance  property  and  is  applied  to  an  instance    17.2  Creating a  Regular Expression   725   Table  17.3   Class  Properties  of  t he RegExp  O b j e ct   What  It  Describes   Represents  the  input  string  being  matched.   Represents  the  last  matched  characters.   Represents  the  last  parenthesized  substring  pattern  match.   Represents  the  substring  preceding  the  most  recent  pattern  match.   Boolean  value  that  specifies  whether  strings  should be  searched  over  multiple  lines;  same  as  the  multiline  property.   Represents  the  last  matched  characters.   Represents  the  string  input  that is being matched.   Represents  the  substring preceding  the most recent pattern match   see  the   leftContext  property .   Represents  the  substring  following  the  most  recent pattern match   see  the   rightContextproperty .   Represents  the  last  parenthesized  substring  pattern  match   see  the  lastParen  property .   RegExp.$1,$2,$3...   Used  to  capture  substrings  of matches.   rightContext   Represents  the  substring  following  the  most  recent  pattern  match.   Table  17.4   Instance  Properties  of  t he RegExp  O b j e ct   What  It  Describes   Boolean  to  specify if the  g  option was  used  to  check  the  expression  against  all  possible  matches  in  the  string.   Boolean to specify if the i  option was used to ignore case during a string  search.   If the g  option was  used,  specifies  the  character position  immediately  following  the  last  match  found  by  execQ  or  test  .   Boolean to  test if the m  option was used to  search across multiple lines.   The  text  of  the  regular  expression.   Property   input   lastMatch   lastParen   leftContext   RegExp.  $*   RegExp.  $&   RegExp.  $_   RegExp.$1   RegExp.$'   RegExp.$+   Property   global   ignoreCase   lastlndex   multiline   source    726   Chapter  17      Regular  Expressions a nd   Pattern  Matching   EXAMPLE  17.4            The  test    method                  var myString="I  love my new gloves!";  var  regex  =   love g;  var booleanResult  =  regex.test myString ;  if    booleanResult  != false   {       Create  a  regular  expression  object   document.write "Tested  regular  expression   "+   document.write ". Starts searching again at position  "  +   regex.source  +  ".  The  result  is  "  + booleanResult  +  " " ;  regex.lastlndex +  "  in string   RegExp.input  +  "\" " ;  RegExp.lastMatch+" " ;  "+ RegExp.leftContext+" " ;  "+ RegExp.rightContext+" " ;   +   document.write "The  substring preceding the  last match is:   document.write "The  substring  following the  last match is:   document.write "The  last matched characters were:  " +   }  else{  alert "No match!" ;  }                  EXPLANATION   The  string  object  to  be  tested  is  created.  A  regular  expression  object,  called  regex,  is  created.  The  test    method  returns  true  or false  if  the  regular  expression  is  matched  in  the  string.  The  source  property  is  applied  to  regex,  an  instance  of  a  RegExp  object.  It  contains  the  text  of  the  regular  expression,  Hovel.  The  lastlndex  property  is  applied  to  an  instance  of  a  RegExp  object.  It  represents  the  character  position  right  after  the  last  matched  string.  The  input  class  property  represents  the  input  string  on  which  the  pattern  match- ing   regular  expression   is  performed.   1  2  3   4   5   6   7   8   9   1  2  3   4   5   6    17.3  String  Methods  Using  Regular  Expressions   727   EXPLANATION    CONTINUED    8   9   leftContext  is  a  class  property  that  represents  the  leftmost  substring  pattern  that  pre- cedes  the  last  pattern  that  was  matched;  here,  whatever  string  comes  before   love .  rightContext  is  a  class  property  that  represents  the  rightmost  substring  pattern  that  follows  the  last  pattern  that  was  matched;  here,  whatever  string  comes  after   love .  Output  is  shown  in  Figure  17.5.   T e s t ed   regular  expression  love.  T he   result  is  true.  Starts  searching  again  at  position  6  in  string  "I love my new gloves'"  The  last  matched  characters  were:  love  The  substring  preceding  the  last  match  is:  I  The  substring  following  the  last  match  is:  my  new  gloves!   Figure  17.5  Regular  expression  properties.   17.3  String  Methods  Using  Regular  Expressions   In  addition  to  the  RegExp  object's  test    and  execQ  methods,  the  String  object  provides  four  methods  that  also  w o rk   with  regular  expressions,  as  shown  in  Table  17.5.   Table  17.5  String  O b j e ct   Regular  Expression  M e t h o ds   Method   match regex    search  regex    split regex    What  It  Does   Returns  substring  in  regex  or  null.   Finds  the  starting  position  of  regex  in  string.   Removes  regex  from  string  for  each  occurrence.   replace regex,  replacemmt    Substitutes  regex  with  replacement  string.   17.3.1  The match   Method   T he   match     method,  like  the  exec Q  method,  is  used  to  search  for  a  pattern  of  characters  in  a  string  and  returns  an  array  where  each  element  of  the  array  contains  each  matched  pattern  that  was  found.  If  no  match  is  found,  returns  null.  W i th   the  g  flag,  match    c o o r r - l i i ^c   r rl    f nr   o 11   T n o t r - k i n rT   c n V i c t r i r»   r rc   t T io   c t r i n rr    t 1 i i " A i i r r ii     728   Chapter  17      Regular  Expressions a nd   Pattern  Matching   array  =  String.match regular_expression ;   matchList  =  "Too much,  too soon".match  too ig ,   FORMAT   EXAMPLE   EXAMPLE  17.5                   The match    Method    l  2  3  4  5          var matchArray  = new Array  ;  var string="I  love  the  smell of clover."  var regex =   love g;  matchArray=string.match regex ;  document.write "Found  "+ matchArray.length   +"  matches. " ;                  EXPLANATION   A  new  array  object  is  created.   l  2  The  variable  called  string  is  assigned  "I  love  the  smell  of  clover."  3   The  regular  expression  called  regex is  assigned  the  search  pattern  love.  The  g  mod- ifier  performs  a  global  search:  multiple  occurrences  of  the  pattern  will  be  re- turned.  The  match     method  is  applied  to  the  string.  The  regular  expression  is  passed  as  an  argument.  Each  time  the  pattern  Hovel is  found  in  the  string  it will  be  assigned  as  a  new  element  of  the  array  called  matchArray.  If  the  g  modifier  is  removed,  only  the  first  occurrence  of  the  match  will  be  returned,  and  only  one  element  will  be  assigned  to  the  array  matchArray.  The  length  of  the  array,  matchArray,  tells  us  how  many  times  the  matchQ  method  found  the  pattern   love .  See  Figure  17.6.   4   5    17.3  String  Methods Using  Regular Expressions   729   17.3.2  The search   Method  The  searchQ  method  is  used  to  search  for  a  pattern  of  characters  within  a  string,  and  returns  the index position  of where  the  pattern was  found  in  the  string.  The  index starts  at  zero.  If  the  pattern  is  not  found,  -1  is  returned.  For  basic  searches,  the  String  object's  indexO 0  method  works  fine,  but  if  you  want  more  complex  pattern  matches,  the  searchQ  method  is  used,  allowing  you  to  use  regular  expression  metacharacters  to  fur- ther  control  the  expression.   See  the  section  "Getting  Control—The  Metacharacters"  on  page  733.    F O R M AT   var index_value  =  String.search regular_expression ;   var position =  "A needle in a haystack".search  needle  ;   E X A M P LE    17.6            The search    Method                    l  2  3   var myString="I love the smell of clover."  var regex =  love ;  var  index=myString.search regex ;  document.write "Found the pattern "+ regex+  1 1 at position "  +index+" " ;                  E X P L A N A T I ON   1  2   The  variable  called  my String  is  assigned  the  string,  "I  love  the  smell  of clover."  The  variable  called  regex  is  assigned  the  regular  expression   love .  With  the  searchQ  method,  using  the  g  modifier  is  irrelevant.  The  index  position  of  the  pat- tern  where  it  is  first  found  in  the  string,  is  returned.    730   Chapter  17      Regular Expressions and  Pattern  Matching   Found the  pattern  love   at position 2   Figure  17.7  2,  where 0 is the  beginning character.   The searchQ  m e t h od   found  the  pattern  starting  at  character  position   17.3.3  The replaceO Method  The  replaceO  method  is  used  to  search  for  a  string  and  replace  the  string  with  another  string.  The  i  modifier  is  used  to  turn  off  case  sensitivity  and  the  g  modifier  makes  the  replacement  global;  that  is,  all  occurrences  of  the  found  pattern  are  replaced  with  the  new  string.  The  replaceO  method  is  also  used  with  the  grouping  metacharacters.   See  the  section  "Grouping  or  Clustering"  on  page  761.    string = oldstring.replace regular_expression,  replacement_value    var strl = "I am feeling blue".replace  blue ,  "upbeat" ;     strl  is assigned:  "I am feeling upbeat."    F O R M AT   E X A M P LE   E X A M P LE    17.7                   E X P L A N A T I ON    The  replaceO  Method              1  2  3       var myString="Tommy has a stomach ache."  var regex =  tom i;      Turn off case sensitivity  var newString=myString.replace regex,  "Mom" ;  document.write newString  +" " ;   1   The  variable  called  my String  is  assigned  the  string  "Tommy  has  a  stomach  ache.    17.3  String  Methods Using  Regular Expressions   731   E X P L A N A T I ON      C O N T I N U E D    3   The  String  object's  replace    method  will  search  for  the  pattern,  regex,  in  the  string  and  if it  finds  the  pattern will  replace  it with Mom.  If the g modifier were  used,  all  occurrences  of the  pattern would  be  replaced with Mom   see  Figure  17.8 .  For  ex- ample,   tom ig  would  result  in  "Mommy  has  a  sMomach  ache."   Mommy has a stomach ache.   Figure  17.8  The first occurrence  of Tom,  uppercase  or  lowercase,  is replaced  with  Mom.   17.3.4  The split   Method  The  String  object's  split    method  splits  a  single  text  string  into  an  array  of  substrings.  In  a  real-world  scenario,  it  would  be  like  putting  little  crayon  marks  at  intervals  on  a  piece  of string  and  then  cutting  the  string  everywhere  a  mark  appeared,  thus  ending up  with  a bunch  of little  strings.  In  the JavaScript world,  the  crayon  mark is  called  a  delim- iter,  which  is  a  character  or  pattern  of  characters  that  marks  where  the  string  is  to  be  split  up.  When  using  the  String  object's  split    method,  if the  words  in  a  string  are  sepa- rated by commas,  then  the  comma would be  the  delimiter  and if the words  are  separated  by colons,  then  the  colon is  the  delimiter.  The  delimiter  can  contain more  complex  com- binations  of  characters  if regular  expression  metacharacters  are  used.   F O R M AT   E X A M P LE   array = String.split    delimiter    ;   splitArray =  "redgreenyellowblue".split    ;    splitArray is an array of colors.  splitArray[0]  is  "red"    E X A M P LE    17.8        The split    Method            732   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE      C O N T I N U E D    17.8  splitArray=string.split regex ;    Split the string by colons  splitArray=string.split regex ;    Split the string by colons  for i=0;  i < splitArray.length;  i++ {  for i=0;  i < splitArray.length;  i++ {   document.write splitArray[i]  +  " " ;  document.write splitArray[i]  +  " " ;   }  }                        E X P L A N A T I ON   A  new  array  object  is  created.  The  variable  called  string  is  assigned  a  colon-delimited  string  of  text.  The  variable  called  regex is  assigned  the  regular  expression 1:1.  The  String  object's  split    method  splits  the  string  using  colons  as  the  string  delim- iter   marks  the  separation  between  words ,  and  creates  an  array  called  splitArray.  Each  of the  array  elements  is  displayed  in  the  page.  See  Figure  17.9.   Figure  17.9  The string  is split on colons.   E X A M P LE    17.9               The split    Method        var splitArray = new ArrayO;  var myString="apples  var regex =  [\t:,] ;     Delimeter is a tab,  colon,  or comma  splitArray=myString.split regex ;  for i=0;  i < splitArray.length;  i++ {   pears,peaches:plums,oranges";   document.write splitArray[i]  +  " " ;   }   4  5   L  2  3  4   5   1  2  3  4   5   apples  pears  peaches  plums  oranges    17.4  Getting Control—The Metacharacters   733   E X P L A N A T I ON   1  A new array object is  created.  2   The  string  "apples  myString.  The  delimiters  are  a  tab,  comma,  and  colon.  The  regular  expression  [\t:,]  is  assigned  to  the  variable  called  regex.   pears,peaches:plums,oranges"  is  assigned  to  the  variable  called   The String object's split    method splits up the string using a tab,  colon,  or comma  as the  delimiter.  The  delimiting characters  are  enclosed in square brackets, which  in regular expression parlance is called a character class.   See the section  "Getting  Control—The  Metacharacters"  on  page  733.   In  simple  terms,  any  one  of  the  characters listed within the brackets is a delimiter in the string.  The split   method  will search for any one  of these  characters and split the string accordingly, return- ing  an  array  called  splitArray.  Each  of the  array elements is  displayed in the page.  See  Figure  17.10.   3   4   5   apples  pears  peaches  plums  oranges   Figure  17.10  The string  is split on tabs,  colons,  and commas.   17.4  Getting  Control—The  Metacharacters   Regular  expression  metacharacters  are  characters  that  do  not  represent  themselves.  They are endowed with special powers to allow you to control the search pattern in some  way  e.g.,  find  the pattern  only at the beginning of line,  or  at the  end  of the line,  or if it  starts  with  an  upper-  or  lowercase  letter,  etc. .  Metacharacters  will  lose  their  special  meaning  if  preceded  with  a  backslash.  For  example,  the  dot  metacharacter  represents  any single  character,  but when preceded with  a backslash it is just a dot or period.   If you see  a backslash preceding a metacharacter,  the backslash turns off the meaning  of the metacharacter,  but if you see  a backslash preceding an  alphanumeric character in  a regular  expression,  then  the backslash is  used  to  create  a metasymbol.  A metasymbol  provides  a  simpler  form  to  represent  some  of the  regular  expression  metachacters.  For  example,  [0-9]  represents numbers in  the range  between  0  and  9,  and \d,  the metasym- bol,  represents  the  same  thing.  [0-9]  uses  the  bracketed  character  class, whereas \d is  a  metasymbol   see  Table  17.6 .    734   Chapter  17      Regular Expressions and  Pattern  Matching   E X P L A N A T I ON   This  regular  expression  contains  metacharacters   see  Table  17.6 .  The  first  one  is  a  caret   A .   The  caret  metacharacter  matches  for  a  string  only if it  is  at  the  beginning  of  the  line.  The  period   .   is  used  to  match  for  any  single  character,  including  a  whitespace.  This  expression  contains  three  periods,  representing  any  three  characters.  To  find  a  literal  period  or  any  other  character  that  does  not  represent  itself,  the  char- acter  must  be  preceded  by  a  backslash  to  prevent  interpretation.   The  expression reads:  Search  at the  beginning of the  line  for  an  a,  followed by any  c,   three  single  characters,  followed  by  a  c.  It will  match,  for  example,  abbbc,  al23c,  a  aAx3c,  and  so  on,  but  only  if  those  patterns  were  found  at  the  beginning  of  the  line.   Table  17.6  Metacharacters a nd   Metasymbols   Metacharacter Met  asymbol   What It Matches   Character Class:  Single  Characters and Digits   Matches any character except newline   Matches any single  character in set   Matches any single  character not in set   Matches  one digit   Matches  a  nondigit,  same  as  [A0-9]   Matches an alphanumeric   word   character   Matches a nonalphanumeric   nonword   character   [a-zO-9J   [Aa-z0-9J   Vi   \D   \w   \W   \0   \b   Y   \JI   \r   \s   Character Class:  Whitespace  Characters   Matches a null character   Matches a backspace   Matches a formfeed   Matches a newline   Matches a return   Matches whitespace  character,  spaces,  tabs, and newlines   MntrViPQ nnnwViitPQnnrp rbnrnrtpr    17.4  Getting Control—The Metacharacters   735   Table  17.6  Metacharacters and  Metasymbols  continued    Metacharacter Met  asymbol   What It Matches   Character Class: Anchored Characters   A   $   \A   \b   \B   \G   \Z   x?   x*   x+   Matches to beginning of line   Matches to end of line   Matches the beginning of the string only   Matches a word boundary  when not inside  [ J    Matches a nonword boundary   Matches where previous m  g left off   Matches the end of the string or line   Matches the end of string only   Character Class:  Repeated Characters   Matches 0 or 1 of x   Matches 0 or more of x   Matches 1 or more of x    xyc +   x{m,nj   Matches one or more patterns of xy;   Matches at least m of x and no more than n of x   Character Class: Alternative Characters   waslwerelwill   Matches one of was, were, or will   Character Class:  Remembered Characters    string    \1  or $1   \2  or $2   \3 or $3   Used for backreferencing  see the section "Remembering or  Capturing" on page 762    Matches first set of parentheses   Matches second set of parentheses   Matches third set of parentheses   Continues    736   Chapter 17      Regular Expressions and Pattern Matching   Table  17.6  Metacharacters and  Metasymbols  continued    Metacharacter Met  asymbol   New with JavaScript 1.5   What It Matches    ?:x    x ?=y    x ?!y    Matches x but does not remember the match. These are called  noncapturing parentheses. The matched substring cannot be recalled  from the resulting array's elements [ 1 ],..., [nJ or from the predefined  RegExp object's properties $1, ..., $9.  Matches x only if x is followed by y. For example,  Jack ?=Sprat    matches Jack only if it is followed by Sprat.  Jach ?=Sprat\Frost    matches Jack only if it is followed by Sprat or Frost. However, neither  Sprat nor Frost are part of the match results.   Matches x only if x is not followed by y. For example,  Vi+  ? \.    matches a number only if it is not followed by a decimal point.  Ad+ ?!\.  .exec "3.141"  matches 141 but not 3.141.   If you are searching for a particular character within a regular expression, you can use  the  dot metacharacter  to represent a single  character,  or  a character  class  that matches  on one character from  a set of characters.  In addition to the dot and character class, Java- Script  has  added  some  backslashed  symbols   called  metasymbols   to  represent  single  characters.  See  Table  17.7  for  the  single-character  metacharacters,  and  Table  17.8  on  page  742  for  a list of metasymbols.   Table  17.7  Single-Character and  Single-Digit  Metacharacters   Metacharacter   What It Matches   [a-z0-9_]   [Aa-z0-9_]   Matches any character except newline.   Matches any single character in set.   Matches any single character not in set.   17.4.1  The Dot Metacharacter  The  dot metacharacter  matches  for  any single  character with  the  exception  of the  new- line  character.  For  example,  the regular  expression  a.b  is matched if the string contains    17.4  Getting Control—The  Metacharacters   737   E X A M P LE    17.11       }  else{  }               E X P L A N A T I ON   1  2  3   4   5   1  2   3   4   5    The  dot  Metacharacter          var textString="Norma Jean";  var reg_expression =  N..ma ;  var result=reg_expression.test textString ;      Returns  true  document.write result+" " ;  if    reg_expression.test textString  {       if  result        or false   document.write " The reg_ex   N..ma  matched the   string\""+  textString +"\". " ;   document.write "No Match!" ;   The  variable  textString  is  assigned  the  string  "Norma Jean".  The  regular  expression  IN..ma!  is  assigned  to  the  variable  reg_expression.  A  match  is  found  if  the  string  being  tested  contains  an  uppercase  N  followed  by  any  two  single  characters   each  dot represents  one  character ,  and  an  m  and  an  a.  It would  find  Norma,  No  man,  Normandy,  and  so  on.  The  test method  returns  true  if the  string  textString matches  the  regular  expression  and false  if  it  doesn't.  The  variable  result  contains  either  true  or false.  If  the  string  "Norma Jean"  contains  regular  expression  pattern   N..ma ,  the  return  from  the  test  method  is  true,  and  the  output  is  sent  to  the  screen  as  shown  in  Figure  17.11.  If  the  pattern  is  not  found,  No  Match!  is  displayed  on  the  page.   Address   C:\sambar50\docs\regex\dot.html   true  The reg_ex  N..ma  matched the string''Norma Jean".    738   Chapter  17      Regular Expressions and  Pattern  Matching   17.4.2  The Character Class  A  character  class  represents  one  character  from  a  set  of  characters.  For  example  [abc]  matches  either  an  a,  b,  or  c;  and  [a-z]  matches  one  character  from  a  set  of characters  in  the  range  from  a  to  z;  and  [0-9]  matches  one  character  in  the  range  of digits  between  0  to  9.  If the  character  class  contains  a  leading  caret,  A,  then  the  class  represents  any  one  character  not in  the  set;  thus,  [Aa-zA-Z]  matches  a single  character  not in  the  range  from  a  to  £  or  A  to  2,  and  [A0-9]  matches  a  single  digit  not  in  the  range  between  0  and  9.   JavaScript provides  additional  symbols,  called  metasymbols,  to  represent  a  character  class.  The  symbols \d  and \D  represent  a single  digit and  a single  nondigit,  respectively;  the  same  as  [0-9]  and  [A0-9j;  whereas \w  and \W represent  a  single  word  character  and  a  single  nonword  character,  respectively;  same  as  [A-Za-z_0-9]  and  [AA-Za-z_0-9].   E X A M P LE    17.12       1  2  3    The  Character Class           var reg_expression =   [A-Z][a-z]eve ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {   document.write " The  reg_ex   [A-Z][a-z]eve  matched the       or false   string\""+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2   3   The  variable  is  assigned  a  bracketed  regular  expression  containing  alphanumeric  characters.  This  regular  expression  matches  a string  that contains  at least  one  up- percase  character  ranging  between  A  and  Z,  followed  by  one  lowercase  character  ranging  between  a  and  z,  followed  by  eve.  The  variable  textString  is  assigned  user  input,  in  this  example  Steven  lives  in  Cleve- land  was  entered.  The  regular  expression  testO  method  will  return  true  because  Steven  contains  an    17.4  Getting Control—The  Metacharacters   739   Address   Ci\sambar50\docs\regex\chardass.html   true  The reg_ex  [A-Z] [a-z]eve   matched the  string"Steven lives  in  Cleveland.".   Figure  17.12  Z ,  followed  by  one  lowercase  letter  a-z ,  followed  by eve.  This  matches  both  Steven  a nd  Cleveland.   The  user  entered Steven lives in Cleveland,  one  uppercase  letter  A-     The  Character  Class  -  Microsoft  I n t e r n et   Explorer  p r o v i d ed   by  A m e r i ca   Online   I Explorer  User  P r o m pt   Script Prompt:  Script Prompt:  Script Prompt:   Type a string of text  Type a string of text  Type a string of text   1 Believe!  1 Believe!  1 Believe!   j  j  j    K   Cancel        -¿J The  Character  Class  -  Microsoft  Internet  Explorer  provided  II    J  File   Edit   View   Favorites   Tools   Help    ^Back   -   -   J   $]   £3   â S e a r ch    _ *j  Favorites   - ^ H i-  Address  @  C:\sambar50\docs\regex\chardass.html   false  false  false   Microsoft  Internet  Explorer   I   1   f\    No   Match!   OK   Figure  17.13  When  the  user  entered Believe!   top ,  it didn't  m a t ch    bottom .  Would  it  have  m a t c h ed   if  he  or  she  h ad   entered BeLieve.  Why?   E X A M P LE    17.13        The  Character Class           1      Character class  var regexpression =   [A-Za-zO-9_] ;    A single  alphanumeric       word character    740   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE      C O N T I N U E D    17.13  document.write result+" " ;  if   result {   document.write " The  reg_ex   [A-Za-z0-9_]  matched the   string\""+ textString +"\". " ;   }  else{   alert "No Match!" ;   1  A regular  expression  object,  an  alphanumeric  character  in  the  bracketed  character  class  [A-Za-z0-9_]  is  assigned  to  the  variable  called  reg_expression.  This  regular  expression  matches  a  string  that  contains  at  least  one  character  in  the  character  0  and  9,  and  the  underscore  character,  _.  class  ranging  between A  and  2,  a  and  2  User  input  is  entered  in  the  prompt  dialog  box  and  assigned  to  the  variable  text-  3   String.  In  this  example  the  user  entered  Take  5.  The  regular  expression  test method  will  return  true  because  this  string  Take  5  con- tains  at  least  one  alphanumeric  character   see  Figure  17.14 .   }               E X P L A N A T I ON   E x p l o r er   U s er   P r o m pt   Script  Prompt:   T y pe   a  string  of  tent    T a k e5   E X A M P LE    17.14       true  The reg_ex  [A-Za-zO-9]  matched the string"Take 5".   Figure  17.14  User entered Take 5  top .  The  string  contained  at least one  alphanumeric  character   bottom .    17.4  Getting Control—The  Metacharacters   741   E X A M P LE    17.14     C O N T I N U E D    1  2  3          Negation within a Character Class  var regexpression =   [A0-9] ;  var textString=prompt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns  true  document.write result+" " ;  if   result {       or false   document.write " The  reg_ex   [A0-9]  matched the   string\""+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   The  caret  inside  a  character  class,  when  it  is  the  first  character  after  the  opening  bracket,  creates  a  negation,  meaning  any  character  not in  this  range.  This  regular  expression  matches  a  string  that  does  not  contain  a  number  between  0  and  9.   2  User  input  is  assigned  to  the  variable  textString.  In  this  example,  abc  was  entered.  The  regular  expression  test    method  will  return  true  because  the  string  abc  does  3  not  contain  a  character  ranging  from  0  to  9   see  Figure  17.15 .   true  The reg_ex  [  0-9].'  matched the string"abc".   Figure  17.15  The  user entered abc.  It contains a  character that is  not  in  the  range  b e t w e en   0  a nd   9.   17.4.3  Metasymbols  Metasymbols offer an alternative way to represent a character class.  For example, instead  of representing a number  as  [0-9j,  it  can be  represented  as \d,  and  the  alternative  for  rep-   742   Chapter  17      Regular Expressions and  Pattern  Matching   Symbol   What It Matches   Character  Class   Table  17.8  Metasymbols   \d   \D   \s   \S   \w   \W   One digit   One  nondigit   One  nonspace  character   One word character   One nonword character   One whitespace  character  tab, space, newline,  carriage return,  formfeed, vertical tab    [0-9]   [A0-9]   [A-Za-z0-9_]   [AA-Za-zO-9]   E X A M P LE    17.15       1  2  3    The Digit Meta  Symbol          var regexpression =   6\d\d ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {   document.write " The regular expression  6\\d\\d  matched       or false   the string\""+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2   The  variable  is  assigned  a  regular  expression  containing  the  number  6,  followed  by  two  single  digits.  The  metasymbol \d  represents  the  character  class  [0-9],  The  variable  textString  is  assigned  user  input;  in  this  example,  126553  was  en- tered.    17.4  Getting Control—The  Metacharacters   743   Address   C:\sambar50\docs\regex\metasymbol.html   trae  The regular expression  6\d\d  matched the string"126553".   Figure  17.16  The  user  entered  126553.  It contains  a  6  followed  by  any  two  digits.   E X A M P LE    17.16       1  2  3    The Digit Meta Symbol Negated           var regexpression =   [a-z]\D\D ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {   document.write " The  regular expression   [a-z]\\D\\D        or false   matched the stringV"  + textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2  3   The  variable  is  assigned  a  regular  expression  containing  a  letter,  followed  by  two  single  nondigits.  The  metasymbol \D  represents  the  character  class  [A0-9j.  The  variable  textString  is  assigned  user  input;  in  this  example,  Hello!  was  entered.  The  regular  expression  test    method  will  return  true  because  this  string  Hello!!  matches a lowercase letter,  followed by two nondigit characters.  See Figure  17.17.   Address   C:\sambar50\docs\regex\metasymbolnegation.html   true  The regular expression  [a-z]'.! '.!   matched the string"Hello!!".   Figure  17.17  The  user  entered  a  lowercase  letter followed  by  two  nondigits.    744   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE    17.17       1  2  3    Word and  Space  Metasymbols           var regexpression =   \w\s\w\W ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {   document.write " The  regular expression   \\w\\s\\w\\W        or false   matched the string\""+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2   3   [AA-Za-zO-9_],  and   The  variable  is  assigned  a  regular  expression  containing  an  alphanumeric  word  character \w,  followed by a space \s,  followed by another alphanumeric word char- acter, followed by a nonalphanumeric word character \W.  The metasymbol \w rep- resents  the  character  class  [A-Za-z0-9_].  The  metasymbol  \W represents  the  char- acter  class  the  metasymbol  \s  represents  a  whitespace  character   tab,  space,  newline,  carriage  return,  formfeed .  The  variable  textString  is  assigned  user  input;  in  this  example,  ABC  D%  was  en- tered  first.  The  regular  expression  test    method  will  return  true  because  the  string  ABC  D%  matches  an  alphanumeric  character   C ,  followed  by  a  space,  another  alphanu- meric  character   D   and  a nonalphanumeric  character   %    see  Figure  17.18 .  An  example  of  output where  the  pattern  failed  is  shown  in  Figure  17.19.   true  The regular expression Aw\s\w\W  matched the strmg"ABC D%".   Figure  17.18  The user entered ABC D%.  It contained  a word  character,  followed  by  a  whitesDace,  another  word  character,  a nd   a  nonwhitesDace.    17.4  Getting Control—The Metacharacters   745   2<l  2<l   f\    No   Match!   OK   Figure  17.19  The user entered ABCD.  To  match,  the string  needs a  space  between the  C and  D.   17.4.4  Metacharacters to Repeat Pattern Matches  In the previous  examples,  the metacharacter matched on  a single  character.  What if you  want to match on more than one character?  For  example, let's say you are looking for  all  lines  containing  names  and  the  first  letter  must  be  in  uppercase,  which  can  be  repre- sented  as [A-Zj,  but  the  following letters  are  lowercase  and  the  number  of letters  varies  in  each  name,  [a-z]  matches  on  a single  lowercase  letter.  How  can you  match  on  one  or  more  lowercase  letters,  or  zero  or  more  lowercase  letters?  To  do  this you  can use what  are called quantifiers. To match on one or more lowercase letters, the regular expression  can be written  [a-z]+  where  the  +  sign means  "one  or more  of the previous  characters";  in  this  case,  one  or  more  lowercase  letters. JavaScript provides  a number  of quantifiers  as shown in  the  Table  17.9.   Table  17.9  Quantifiers:  The Greedy  Metacharacters   Metacharacter   What It Matches   x?   x*    xyz  ?    xyz  *   X+   x{m,nj   Matches 0 or 1 of x.   Matches zero or one pattern of xyc.   Matches 0 or more of x.   Matches zero or more patterns of xyc.   Matches 1 or more of x.   Matches one or more patterns of xy;.   Matches at least m of x and no more than n of x.   The Greed Factor.  Normally  quantifiers  are  "greedy";  that  is,  they  match  on  the  largest  possible  set  of  characters  starting  at  the  left  of  the  string  and  searching  to  the  risbt.  looking  for  tbe last nossible  character  tbat would  satisfv tbe  condition.  For  exam-   746   Chapter  17      Regular Expressions and  Pattern  Matching   and  the  regular  expression:   ab[0-9]*    the  resulting  string  would  be:  "XAB"   If  the  replace    method  were  to  substitute  what  is  matched  with  an  "X":  string=string.relace  ab[0-9] ,  "X" ;   The  asterisk  is  a  greedy  metacharacter.  It  matches  for  zero  or  more  of  the  preceding  characters.  In  other  words,  it  attaches  itself to  the  character  preceding it;  in  the  preced- ing  example,  the  asterisk  attaches  itself to  the  character  class  [0-9],  The  matching  starts  on  the  left,  searching  for  ab  followed  by  zero  or  more  numbers  in  the  range  between  0  and  9.  It is  called greedy because  the  matching continues until  the  last number  is  found;  in  this  example,  the  number  7.  The  pattern  ab  and  all  of  the  numbers  in  the  range  between  0  and  9  are  replaced  with  a  single  X.   Greediness  can  be  turned  off so  that  instead  of  matching  on  the  maximum  number  of  characters,  the  match  is  made  on  the  minimal  number  of  characters  found.  This  is  done  by appending  a  question  mark after  the  greedy metacharacter.  See  Example  17.18.   E X A M P LE    17.18                   1  2  3   var regexpression =  \d\.?\d ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns  true  document.write result+" " ;  if   result {       or false   document.write " The  regular expression   \\d\\.?\\d    matched the string\""+textString +"\". " ;   }  else{   alert "No Match!" ;   }                17.4  Getting Control—The Metacharacters   747   E X P L A N A T I ON   1   2  3   The  variable  is  assigned  a  regular  expression  containing  a  decimal  character  \d,  and followed by either one or zero literal periods, \. ?.  The question mark  zero or  one   controls  the  character preceding it, in  this  case  a period.  There is  either one  period  or  no period  at all  in  the  string being matched.  The  variable  textString  is  assigned  user  input;  in  this  example,  3.7 was  entered.  The regular  expression  test method will return  true because  the string 3.7 matches  a  decimal  number,  3,  followed  by  a period   or  not one   and  followed by another  decimal  number,  7.  See  the  examples in Figure  17.20.   true  The regular expression Ad\.?\d  matched the string''3.7".   true  The regular expression Ad\.?\d  matched the string''456".   Figure  17.20  The user entered  3.7,  or number,  period,  number  top ;  the user  entered  456,  or number,  no  period,  number  middle ;  the  user entered  5A6,  but  there  must be  at least two  consecutive  digits for a  match   bottom .   E X A M P LE   17.19                      Greediness    748   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE    1  2  3    CONTINUED    1 7 . 19   var regexpression =   [A-Z][a-z]*\s ;  var textString=prompt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns  true  document.write result+" " ;  if   result {       or false   document.write " The  regular expression   [A-Z][a-z]*\\s   matched the string"+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2   3   The  variable  is  assigned  a  regular  expression  containing  an  uppercase  letter,  [A- Z],  followed  by  zero  or  more  lowercase  letters,  [a-z]*,  and  a  space,  \s.  There  are  either  zero  or  more  lowercase  letters.  The  variable  textString  is  assigned  user  input;  in  this  example,  Danny  boy  was  en- tered.  The  regular  expression  test  method  will  return  true  because  the  string  Danny  boy  matches  an  uppercase  letter  D,  followed  by  zero  or  more  lowercase  letters  anny,  and  a  space.  See  Figure  17.21.   true  The regular expression  [A-Z][a-z]*\s  matched the string"Danny boy".   true  The regular expression  [A-Z][a-z]*\s  matched the string"! ANNY BOY".   The  user  entered Danny boy  consisting  of  one  uppercase  letter,  zero   Figure  17.21  or  more  lowercase  letters,  a nd   a  space   top ;  the  user  entered DANNY BOY,  consisting  one  uppercase  letter,  zero  lowercase  letters,  a nd   a  space   bottom .  Note:  the  "Y"  is followed  by a  space.    17.4  Getting Control—The  Metacharacters   749   E X A M P LE    17.20                   1  2  3   var regexpression =   [A-Z][a-z]+\s ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {       or false   document.write " The  regular expression   [A-Z][a-z]+\\s   matched the string\""+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2  3   The  regular  expression  reads:  Search  for  an  uppercase  letter,  followed  by  one  or  more  lowercase  letters,  followed  by  a  space.  The  user  is  prompted  for  input.  The  regular  expression  test    method  checks  that  the  string  textString  entered  by  the  user  matches  the  regular  expression  and  returns  true  or false   see  Figure  17.22 .   true  The regular expression  [A-Z] [a-z]+\s  matched the string"Danny Boy".   false    750   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE   1 7 . 17                   1  2  3   var regexpression =   abc\d{l,3}\.\d ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {       or false   document.write " The  regular expression    abc\\d{l,3}\\.\\d  matched the  string\""+  textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2  3   The  variable  is  assigned  a  regular  expression  containing the  pattern  abc\d {1,3}\\d,  where  abc  is  followed by at least one  digit, repeated  by up  to  three  digits,  followed  by a  literal  period,  and  another  digit, \d.  The  variable  textString  is  assigned  user  input;  here,  abc456.5xyz  was  entered.  The  regular  expression  contains  the  curly  brace  {}  metacharacters,  representing  the  number  of  times  the  preceding  expression  will  be  repeated.  The  expression  reads:  Find  at least one occurrence of the pattern \d and as many as three in a row.  See  Figure  17.23.    [JavaScript  Application]   Type a string of text   abc456.5xi>z   OK   Cancel      trae  The regular expression  abc\dfl,3i\.\d  matched the string" abc456.5xyz".    17.4  Getting Control—The  Metacharacters   751   E X A M P LE    17.22                   1  2  3     Repeating patterns  var regexpression =   \d{5}\.\d ;  var textString=prornpt  "Type a string of text","" ;  var result=reg_expression.test textString ;      Returns  true  document.write result+" " ;  if   result {   document.write " The  regular expression   \\d{5}\\.\\d   matched the string  ""+ textString +"\". " ;      or false   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2  3   The variable  is  assigned  a regular  expression  that reads:  Find  a  sign,  followed by  exactly  five  repeating  digits \d{5j,  a  period,  and  another  digit \d.  The  user  is  prompted  for  input.  The  test    method  returns  true  if  the  regular  expression  pattern  was  found  in  the  input  string.  See  Figure  17.24.   true  The regular expression  \d{5}\.\d  matched the string''34234.6".   true  The regular expression  \d{5}\.\d  matched the string"abac12345.56789".    false   H  B  E  I  fl     * i   f\    No   Match!   If  ™   ¡1    752   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE  17.17                   1  2     Repeating patterns  var regexpression =   5{l,}\.\d ;  var textString=prornpt  "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {   document.write " The  regular expression \\5{1,}\\.\\d        or false   matched the stringV  "  + textString +  "\". " ;   alert "No Match!" ;   }  else{   }               E X P L A N A T I ON   1   2   The  variable,  called  reg_expression,  is  assigned  a  regular  expression.  The  regular  expression  reads:  Search  for  the  number  5,  followed  by  at least  1  or  more  of them   the  curly  braces  determine  how  many  consecutive  5s  to  look  for ,  followed  by  a  literal  period  and  a  digit.  The  test    method  returns  true  if  the  regular  expression  pattern  was  found  in  the  input  string.  See  Figure  17.25.   true  The  regular  expression \5{1,}\ \tl matched the  string"  abc5555555.2".   true  The  regular  expression \5{1,}\ \d  matched the  string"  5.6".   Figure  17.25  The  user  entered abc5555555.2,  or  the  number  5  at  least  1  time,  followed  by  a  literal  period,  a nd   any  digit,  entered 5.6  bottom .  This  also  returns true.   \ d   t o p  .   This  returns true;  the  user    17.4  Getting Control—The  Metacharacters   753     Greed           1  2  3   var  myString="abcdefghijklmnopqrstuvwxyz";  document.write " 01d  string: "+myString+" " ;  myString=myString.replace  [a-z]+ ,  "XXX" ;  document.write " New string:   "+   myString+" " ;   E X A M P LE    17.24                   E X P L A N A T I ON   1  2   3   The  variable,  called  myString,  is  assigned  a  string  of lowercase  letters.  The  regular  expression  reads:  Search  for  one  or  more  lowercase  letters,  and  re- place  them  with  XXX.  The  +  metacharacter  is  greedy.  It  takes  as  many  characters  as  match  the  expression;  that is,  it starts  on  the  left side  of the  string,  grabbing  as  many lowercase  letters  as  it  can  find  until  the  end  of the  string.  The  value  of  myString  is  printed  after  the  substitution,  as  shown  in  Figure  17.26.   Old string: abcdefghijklmnopqrstuvwxyz  New  string:  X XX   Figure  17.26  The  + sign  is greedy.  One or more lowercase  letters are  replaced  with  XXX;  that  is,  the  whole  string.   E X A M P LE    17.25                   1   2   var  myString="abcdefghijklmnopqrstuvwxyz";  document.write " 01d  string:   "  myString=myString.replace  [a-z]+? ,  "XXX" ;  document.write " New string:   "+myString+" " ;   +myString+" " ;        754   Chapter 17     Regular Expressions and  Pattern  Matching   1   2   The  variable  called  myString  is  assigned  a  string  of lowercase  letters, just  exactly  like  the  last  example.  The  regular  expression  reads:  Search  for  one  or  more  lowercase  letters,  but  after  the +  sign, there is a question mark.  The question mark turns off the greed factor.  Now instead  of taking as many lowercase letters  as it can,  this regular  expression  search stops after it finds the first lowercase character, and then replaces that char- acter with XXX.  See  Figure  17.27.   Old stiuig  abcdefgh^jklmiiopqrstiivwxyz  New 1111 : _ \ \ \ 1m   11 s tu \ ^ 7   Figure  17.27  This is not greedy:  Output from  Example  17.25.   17.4.5  Anchoring Metacharacters  Often it is necessary  to  anchor  a metacharacter  down,  so  that it matches  only if the pat- tern is found at the beginning or end of a line, word, or string.  These metacharacters are  based on a position just to  the left or  to  the right of the  character  that is being matched.  Anchors  are  technically  called  zero-width  assertions  because  they  correspond  to  posi- tions,  not  actual  characters  in  a  string;  for  example,  Isabel  will  search  for  abc  at  the  beginning  of  the  line,  where  the  A  represents  a  position,  not  an  actual  character.  See  Table  17.10  for  a list  of anchoring metacharacters.   Table  17.10  Anchors  Assertions    Metacharacter   What It Matches   A   $   XB   Matches to beginning of line or beginning of a string.   Matches to end of line or end of a string.   Matches a word boundary  when not inside [ J .   Matches a nonword boundary.   E X A M P LE    17.26    17.4  Getting Control—The  Metacharacters   755   E X A M P LE    17.26     C O N T I N U E D    1  2  3       var regexpression =  AWill ;      Beginning of line anchor  var textString=prompt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns  true  document.write result+" " ;  if   result {       or false   document.write " The regular expression   AWill  matched  the string\""+ textString +"\". " ;   }  else{   alert "No Match!1     ;   }               E X P L A N A T I ON   1   2   3   The  variable  is  assigned  a regular  expression  containing  the  beginning  of line  an- chor  metacharacter,  the  caret,  followed  by  Will.  The  variable  textString  is  assigned  user  input;  in  this  example,  Willie  Wonker  was  entered.  The  regular  expression  test    method  will  return  true  because  the  string  Willie  Wonker  begins  with  Will.  See  Figure  17.28.   Figure  17.28  The  user entered Willie Wonker. Will is at the  beginning  of the  line,  so    756   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE    17.17       1  2  3    Beginning of Line Anchor          var regexpression =  A[JK] ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {       or false   document.write " The regular expression   A[JK]  matched  the string\""+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1  A  regular  expression  contains  a  beginning  of  line  anchor,  the  caret.  The  regular  expression  reads:  Find  either  an  uppercase J  or  uppercase  K  at  the  beginning  of  the  line  or  string.  The  variable  textString  is  assigned  user  input;  in  this  example, Jack  and Jill.  The  regular  expression  test    method  will  return  true  because  the  string  Jack  matches  an  uppercase  letter  J  and  is  found  at  the  beginning  of  the  string.  See  Figure  17.29.   2  3   true  The regular expression  A[JK]  matched the string"Jack and Jill".   true  The regular  expression  A[JK]  matched the  string"Karen Evich".   Figure  17.29  The  string  must  begin  with  either  a J or K.  The  user entered Jack and  Jill  top   a nd   this  returns true;  the  user  entered Karen Evich   bottom   a nd   this  also    17.4  Getting Control—The  Metacharacters   757   E X A M P LE    17.28       1  2  3    End of Line Anchor          var reg_expression =  50$ ;  var textString=prornpt "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {       or false   document.write " The  regular expression   50$  matched  the string\""+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2  3   The  regular  expression   50$  is  assigned  to  the  variable.  The  pattern  contains  the  dollar  sign   $   metacharacter,  representing  the  end  of line  anchor  only when  the  $  is  the  last  character  in  the  pattern.  The  expression  reads:  Find  a  5  and  a  0  fol- lowed  by  a  newline.  The  user  is  prompted  for  a  string  of text.  If  the  string  ends  in  50,  the  regex  test  method  returns  true;  otherwise false.   E X A M P LE    17.29         Anchors           var reg_expression =  A[A-Z][a-z]+\s\d$ ;      At  the beginning of the string,  find one uppercase      letter,  followed by one or more lowercase letters,  II a space,  and one digit.   var string=prompt "Enter a name and a number","" ;  if   reg_expression.test string  {   1   2  3    758   Chapter 17      Regular Expressions and Pattern Matching   E X A M P LE      C O N T I N U E D    alert "No Match!" ;   1 7 . 19   else{   }               E X P L A N A T I ON   l   2  3   The regular expression reads:  Look at the beginning of the line,  A,  find an upper- case  letter,  [A-Z],  followed  by  one  or  more  lowercase  letters,  [a-z]+,  a  single  whitespace, \s,  and  a digit at the end of the line, \d$.  The  user  is  prompted  for  input.  The regular  expression  test    method  tests  to  see  if there was  a match  and  returns  true  if so,  and false  if not.  See  Figures  17.30  and  17.31.   Figure  17.30  The string  begins with a  capital  letter,  followed  by one or more  lowercase  letters,  a  space,  and  ends with  one digit  left ;  the  input sequence matched,  so this  message is displayed  right .   localhost  -  [JavaScript   Enter a name and a number   Dan 456   *J   OK   Cancel   Fiqure  17.31  The regular expression does not match because the string ends in more than    17.4  Getting Control—The  Metacharacters   759   E X A M P LE    17.30        The  Word  Boundary           1  2      Anchoring a word with  \b  var regexpression =   \blove\b ;  var textString=prornpt  "Type a string of text" , " "  ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {       or false   document.write " The  regular expression   \blove\b    matched the string \""+ textString +"\". " ;   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2   The regular  expression contains the Xb metacharacter, representing a word bound- ary,  not  a  specific  character.  The  expression  reads:  Find  a  word  beginning  and  ending with  love.  This means  that gloves,  lover,  clover,  and  so  on, will  not be  found.  The  regular  expression  test    method  will  return  true  because  the  string  love  is  within  word  boundary  anchors Xb.  See  Figure  17.32.   true  The regular expression Ablove\b  matched the string "I love you!".   Figure  17.32  The  user  entered I love you!.  The  word love  is  b e t w e en   word  boundaries   \b .  The  m a t ch   was  successful.   17.4.6  Alternation   Alternation  allows  the  regular  expression  to  contain  alternative  patterns  to  be  matched;  for  example,  the  regular  expression   John\Karen\SteveJ will  match  a  line  containing John    760   Chapter  17      Regular Expressions and  Pattern  Matching   be  represented  as  [abde].  The  pattern   abide   is  either  ab  or  de,  whereas  the  class  [abed]  represents  only  one  character  in  the  set  a,  b,  c,  or  d.   E X A M P LE    17.31        Alternation           1  2      Alternation:  this or that or whatever...  var reg_expression =  SteveDanTom ;  var textString=prornpt  "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {   document.write " The  regular expression   SteveDanTom   matched the string\""+ textString +"\". " ;       or false   }  else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   2   The  pipe  symbol,  ,  is used  in  the  regular  expression  to  match  on  a set  of alterna- tive  patterns.  If  any  of  the  patterns,  Steve,  Dan,  or  Tom,  are  found,  the  match  is  successful.  The  test    method  will  return  true  if  the  user  enters  either  Steve,  Dan,  or  Tom.  See  Figure  17.33.   true  The regular expression  SteveDanTom  matched the string"Do you know Tommy?".   true  The regular expression  SteveDanTom  matched the string"Dan is my son.".   n    17.4  Getting Control—The  Metacharacters   761   Grouping or Clustering.  Grouping  occurs when  a  set  of characters  are  enclosed  in  parentheses,  such  as    ma    or    JohnlJoe   Brown.  If  the  regular  expression  pattern  is  enclosed  in  parentheses,  a  group  or  subpattern  is  created.  Then  instead  of  the  greedy  metacharacters  matching  on  zero,  one,  or  more  of  the  previous  single  characters,  they  can  match  on  the  previous  subpattern.  For  example,    ma +  means  search  for  "ma"  or  "mama"  or  "mamama,"  and so  forth;  one  or more  occurrences  of the pattern  "ma".  If the  parentheses  are removed  and  the regular  expression is  mat , we would be  searching for  an  "m"  followed  by  one  or  more  occurrences  of  an  "a,"  such  a  "ma,"  "maaaaaa."  Alter- nation  can  also  be  controlled if the  patterns  are  enclosed  in parentheses.  In  the  example,    JohnlJoe   Brown ,  the  regular  expression  reads:  search  for  "John  Brown"  or  "Joe  Brown".  The grouping creates  a subpattern  of either  "John"  or  "Joe"  followed by the pat- tern  "Brown".  Without grouping   i.e.,  JohnlJohn Brown  ,  the  regular  expression reads:  search  for  "John"  or  "Joe  Brown".  This  process  of  grouping  characters  together  is  also  called  clustering.   E X A M P LE    17.32       1  2  3    Grouping  or  Clustering             Grouping with parentheses  var regexpression =  A SamDanTom   Robbins ;  var textString=prornpt  "Type a string of text","" ;  var result=reg_expression.test textString ;     Returns true  document.write result+" " ;  if   result {       or false   document.write " The  regular expression   A SamDanTom   Robbins  matched the string\""+ textString +"\". " ;   } else{   alert "No Match!" ;   }               E X P L A N A T I ON   1   By  enclosing  Sam,  Dan,  and  Tom  in  parentheses,  the  alternative  now  becomes  ei- ther  Sam  Robbins,  Dan  Robbins,  or  Tom  Robbins.  Without  the  parentheses,  the  reg- ular  expression  matches  Sam,  or  Dan,  or  Tom  Robbins.  The  caret  metacharacter  A  anchors  all  of  the  patterns  to  the  beginning  of the  line.    762   Chapter  17      Regular Expressions and  Pattern  Matching   The regular expression  brother.".   Figure  17.34  Robbins  would  also  be  okay.    SaiiiDaiiTom  Robbins  matched the string"Dan Robbins is my   The  user  entered Dan Robbins as  one  of the  alternatives. Sam Robbins or Tom   Remembering or Capturing.  Besides grouping, when the regular expression pattern  is  enclosed  in  parentheses,  the  subpattern  created  is  being  captured,  meaning  the  subpat- tern is saved in special  numbered  class properties, starting with  $1,  then  $2,  and so  on.  For  example, in the grouping example where we created a regular expression:   ma  , capturing  will  assign  "ma"  to  $1  if "ma"  if matched.  We  can say that  "ma"  is remembered in  $1.  If we  have  the  expression   John    Doe  ,  "John"  will  be  captured  in  $1  and  "Doe"  in  $2  if the  pattern  "John  Doe"  is  matched.  For  each  subpattern  in  the  expression,  the  number  of the  property will  be  incremented  by one:  $1,  $2,  $3,  and  so  on.  The  dollar  sign  properties  can  be  applied  to  the  RegExp  object,  not  an  instance  of  the  object,  and  then  used  later  in  the  program  as  shown  in  Example  17.33.They  will  persist  until  another  successful  pattern  match occurs,  at which time they will  all be cleared.  Even if the intention was to control the  greedy  metacharacter  or  the  behavior  of  alternation  as  shown  in  the  previous  grouping  examples,  the subpatterns  are  automatically captured  and  saved  as  a side  effect.2  For  more  http:  deveIoper.netscape.com docs manuaIs communicator   information  on  jsguide reobjud.hmtl   this  007373.   go   to   E X A M P LE    17.33        Capturing             1  2  3  4  5   textString =  "Everyone likes William Rogers and his friends."  var reg_expression =   William \s Rogers  ;  myArray=textString.match reg_expression ;  document.write myArray ;      Three element array  document.write " "+RegExp.$1 + "  "+RegExp.$2 +" " ;   * alert myArray[1] + "  "+ myArray[2] ;  match and exec create an array consisting of the string,  and  the captured patterns.  myArray[0]  is  "William Rogers"  myArray[1]  is  "William"  myArray[2]  is  "Rogers".*         17.4  Getting Control—The  Metacharacters   763   E X A M P LE    17.33     C O N T I N U E D               E X P L A N A T I ON   l  2   The  string  called  textString  is  created.  The  regular  expression  contains  two  subpatterns,  William  and  Rogers,  both  en- closed  in  parentheses.   3  When  either  the  String  object's  match    method  or  the  RegExp  object's  execQ  method  are  applied  to  the  regular  expression  containing  subpatterns,  an  array  is  returned, where  the  first  element of the  array is  the  regular  expression  string,  and  the  next  elements  are  the  values  of the  subpatterns.  The  array  elements  are  displayed,  separated  by  commas.  The  subpatterns  are  class  properties  of  the  RegExp  object.  $1  represents  the  first  captured  subpattern,  William,  and  $2  represents  the  second  captured  subpattern,  Rogers.  See  Figure  17.35.   4  5   ?  C a p t u r i ng   -  M o z i l la   F i r e f ox   File   Edit   View   History   Bookmarks   Tools   Help   C   M   J   file:   C: ™amp ™™™,   Regular Expression Library   ]~      Regular  Exp   William  Rogers, William,Ro gers  William  Rogers   Figure  17.35  Capturing  portions  of a  regular expression  using  the RegExp object.   E X A M P LE    17.34        Capture  and  Replace              1  2  3   var string="Tommy Savage:203-123-4444:12 Main St."  var newString=string.replace   Tommy    Savage  ,  "$2,  $1" ;  document.write newString +" " ;           764   Chapter  17      Regular Expressions and  Pattern  Matching   E X P L A N A T I ON   1  A  string  is  assigned  to  the  variable,  called  string.  2   The  replace    method  will  search  for  the  pattern  Tommy  Savage.  Because  the  search  side  of the  replace    method  contains  the  pattern  Tommy  enclosed  in  paren- theses  and  the  pattern  Savage  enclosed  in  parentheses,  each  of  these  subpatterns  will be stored in $1  and  $2, respectively.  A  third pattern would be stored in $3  and  a  fourth  pattern  in  $4,  and  so  on.  On  the  replacement side  of the  replace    method,  $2  and  $1  are  replaced in  the  string,  so  that Savage  is  first,  then  a  comma,  and  then  Tommy.  The  first  and  last  names  have  been  reversed.  The  new string  is  displayed.  See  Figure  17.36.   3  Capture  and  Replace  -  Microsoft  Internet  Explorer  provided  b   J  File  Edit  View   Favorites   Tools  Help   Back  -   -   g]   fSJl  @Search   [^Favorites   0 H is   Address   f^   Savage,  Tommy:203-123 -4444:12  Main  St.   Figure  17.36  Output from  Example  17.34.   3   J   J   l  2  3    Capture  and  Replace               var string="Tommy Savage:203-123-4444:12 Main St."  var newString=string.replace   \w+ \s \w+  ,  "$2,  $1" ;  document.write newString  +" " ;   E X A M P LE    17.35                       E X P L A N A T I ON   l  A  string  is  created  to  be  used  by  the  replace     method  in  line  2.  2   The  replace    method  searches  for  one  or  more  alphanumeric  word  characters,  followed  by  a single  space,  and  another  set  of alphanumeric word  characters.  The  word  characters  are  enclosed  in  parentheses,  and  thus  captured.  $1  will  contain    17.5  Form Validation with Regular Expressions   765   Figure  17.37  Subpatterns are  used  in  string  replacement.   17.5  Form Validation with  Regular  Expressions   When  you  fill  out  a  form  on  the  Web,  you  are  typically  asked  for  your  name,  phone  number,  address   a  popup  menu  of all  the  states  is  usually provided ,  and  then  all  sorts  of credit card information.  Sometimes it takes  four  or  five  tries to get it right because you  didn't complete  the  form  exactly the way you were  asked.  A message will  appear  and you  won't be  allowed  to submit the  form until you get it right.  Behind  the  scenes  a JavaScript  program  is  validating  the  form.   17.5.1  Checking for Empty Fields  There's a form waiting to be  filled out.  Some of the  fields are  optional,  and some are man- datory.  The  question is  this:  Did  the  user  fill  in  the  mandatory fields?  If he  or  she  didn't,  the  form  can't be  processed properly.  Checking for  empty or null  fields is  one  of the  first  things  you  might want  to  do.   E X A M P LE    17.36        Checking  for Empty Fields        function validate_text forml   {   if   forml.username.value == ""    forml.username.value == null {   alert "You must enter your name." ;  return false;   }  if   forml.user_phone.value == ""    forml.user_phone.value == null {   1  2   3    766   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE    1 7 . 19      C O N T I N U E D    else {   return true;   }   }                   Checking for Empty fields    <form name="formtest"  action=" cgi-bin forml.cgi"  method^'get"   onSubmit="return  validate_text formtest ">  Please enter your name:                Please enter your phone number:                              E X P L A N A T I ON   2   3   4   5   1  A  user-defined  function  called  validate_text    is  defined.  It  takes  one  parameter,  a   reference  to  a  form.  If  the  value  in  the  first  text  field  is  an  empty  string   represents  a  string  with  no  text   or  null   represents  no  value ,  the  user  is  sent  an  alert  asking  him  or  her  to  fill  in  his  or  her  name.  If  a false  value  is  returned,  the  form  is  not  submitted.  If  the  value  in  the  second  text  field  is  an  empty  string  or  null,  the  user  is  sent  an  alert  asking  him  or  her  to  fill  in  a  phone  number.  If  a false  value  is  returned,  the  form  is  not  submitted.   If  both  text  boxes  were  filled  out,  a  true  value  is  returned,  and  the  form  will  be  submitted  to  the  server's  CGI  program  whose  URL  is  listed  in  the  action  attribute  of  the  form.  The  onSubmit  event  is  triggered  when  the  user  clicks  the  submit button.  The  han- dler  function,  validate_text  ,  will  be  called  with  a  reference  to  this  form.  The  input  type  for  this  form  is  a  text  box  that will  get  the  name  of the  user.   is  created  to  hold  the  phone  number  of  the  user.  See   6  7  Another  text  box    17.5  Form Validation with Regular Expressions   767    Recking  for  Empty fields   Please enter your name:  Ellie   Please enter your phone number:  1   Submit Form     Clear     M i c r o s o ft   I n t e r n et   Explorer    3]   YOU must enter your phone.  YOU must enter your phone.   OK   Figure  17.38  The user left the phone  number field  empty,  so the form was not  submitted.   17.5.2  Checking for Numeric Zip Codes  If you  ask the  user  for  a  five-digit zip  code,  it is  easy to  check using a  regular  expression  by matching  for  exactly  five  digits:     A\d{5}$    Here  is  another  way  to  say  the  same  thing:    A[0-9][0-9][0-9][0-9][0-9]$    format  could  be  represented  as:    A\d{5}-?\d{4}$    Some  longer  zip  codes  contain  a  dash  followed  by  four  numbers.  This  long zip  code   The  beginning  and  end  of line  anchors  prevent  the  matched  string  from  containing  any  extraneous  characters  at  either  end  of the  string.  See  Example  17.37.   E X A M P LE    17.37       1  2  3    Testing  for a Valid Zip Code        function ok_Zip zip {   var regex= A\d{5}$ ;     Match for 5 numbers  if   regex.test zip.value  == false   {   alert "Zip code must contain exactly five numbers!" ;  zip.focus  ;  return fa 1se:    768   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE    17.37   4     C O N T I N U E D    if    zip.value == "" {   alert "You must enter a zip code" ;  zip.focus  ;  return false;   }  return true;   }                     Enter your zip code:  <input  type="text"   name="z ipcode"  size=5  >  <input  type="button"   value="Check  zip"  onClick="if  okZip ZipTest.zipcode    {   alert  Zip is valid.1 }"  >                       E X P L A N A T I ON   5   1  2   3   4   5   The function,  called  ok_Zip  , is  defined to validate  the zip  code entered by the user.  The  regular  expression  reads:  Look  for  exactly  five  digits.  The  beginning  of  line  and  end  of  line  anchors  ensure  that  there  will  not  be  any  extraneous  characters  before  or  after  the  five  digits.  The  regular  expression  test    method  checks  that  the  value  entered  by  the  user  is  a valid  zip  code.  If not,  an  alert dialog box will  tell  the  user,  focus will  be returned  to  the  text  box,  and false  will  be  returned.  If the user  doesn't  enter  anything,  an  alert dialog box will  appear,  focus will  be re- turned  to  the  text  box,  and false  will  be  returned.  The  onClick  event  is  triggered  when  the  user  clicks  the  Check  zip  button.  A Java- Script statement to  call  the  ok_Zip    function is  assigned  to  the  event.  If the  user  en- tered a valid zip code,  the alert dialog box will pop up  and say so.  See Figure  17.39.    17.5  Form Validation with Regular Expressions   769   Enter your zip  code:  94105   Check zip   Reset   ^^ ^^       I  JavaScript Application I  jESil  I   Zip is valid.   OK   r'i>  =<11-   [Document: Dora   Enter your zip  code:  T  Reset     Check  zip   Itmi-ffMIMWffBfflW   ,x   f\   You must enter  a zip code   OK   :j   Back   Form aid   Reload   Home   Si  I JavaScript  Application]   Enter your zip  code:  5672A  Reset   1 \  1 \   Zip code  must  contain exactly  five  numbers!  Zip code  must  contain exactly  five  numbers!   '   1   OK      Figure  17.39  The user enters a  five-digit zip code   top ;  the  user enters nothing   middle ;  the  user enters four digits and  one  letter  bottom .   17.5.3  Checking for Alphabetic Data  To  test for  entries that must consist strictly of alphabetic input, such as  a name, state,  or  country  field,  the  regular  expression  character  set  can  be  used;  for  example,  [a-zA-z]+   is  a regular  expression that matches  a string containing one  or more uppercase  or low- ercase  letters,  and  A[a-zA-Z]+$  matches  a  string  containing  only  one  or  more  upper- case  or  lowercase  letters,  because  the  character  set  is  enclosed  within  the  beginning  and  ending  anchor  metacharacters.  To  represent  one  or  more  alphanumeric  word  characters,  [A-Za-z0-9_],  you  can use  the \w  metasymbol;  for  example, Aw+  represents  one  or  more  alphanumeric word  characters.    770   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE  17.17       1  2   3    Testing  for Alphabetic  Characters        function okAlpha form {  var  regex= A[a-zA-Z]+$ ;     Match  for  upper-  or  lowercase  letters  if   regex.test form.fname.value  == false   {   alert "First name must contain alphabetic characters!1  form.fname.focus  ;  return false;     ;   }  if    form.fname.value == "" {   alert "You must enter your first name." ;  form.fname.focus  ;  return false;   }  return true;   }                 <form name="alphaTest"   method="post"  action=" cgi-bin testing.pi"  onSubmit="return okAlpha this "   >   Enter your first name:  <input  type="text"  name="fname"  size=20  >      <input  type="submit  <input  type="reset"   1 value="Submit"   >    >                   E X P L A N A T I ON   1  A  function  called  okAlpha    is  defined.  It  takes  one  parameter,  a  reference  to  a  form.  Its purpose  is  to  make sure  the  user  entered  only  alphabetic  characters  in  the  form.  2  A  regular  expression  is  created.  It reads:  Starting  at the  beginning  of the  line,  find  one  or  more  uppercase  or  lowercase  letters  in  the  character  class  [A-Za-z]  fol-   17.5  Form Validation with Regular Expressions   771   E X P L A N A T I ON      C O N T I N U E D    4   3   If the  user  didn't  enter  anything  at  all  and  the  field  is  empty,  another  alert will  be  sent  to  the  user,  and false  will  be  returned.  The  form  will  not  be  submitted.  If  the  user  entered  only  alphabetic  characters  in  his  or  her  name,  true  will  be  re- turned,  and  the  form  will  be  submitted.  This  is  where  the  HTML  form  starts.  The  onSubmit  handler  will  be  triggered  when  the  user  clicks  the  Submit  button,  and  the  okAlpha    function  will  be  called,  passing  a  reference  to  the  form  called  alphaTest.  The  user  enters  his  or  her  name  in  the  text  field  called fname.   7  8  After  filling out the  form,  the  user will  click the  Submit button,  thereby triggering   5  6   the  onSubmit  handler  on  line  6.  See  Figure  17.40.   Enter  your  first  name:  Elliek9   Submit   Reset   [JavaScript  Application]   First name must cortan alphabetic characters!   Figure  17.40  The  user  has a  digit in  her  name.  She  c an   only enter alphabetic  characters,  or she  will  see  the  warning.   17.5.4  Removing Extraneous Characters  Removing Spaces and Dashes.  To  remove  any  unwanted  spaces  or  dashes  from  user  input,  the  String  object's  replaceQ  method  can  be  used  to  find  the  characters  and  replace  them  with  nothing,  as  shown  in  Example  17.39.   E X A M P LE   17.39        Removing  Spaces  and Dashes           Removing Spaces  and Hyphens      var string="444- 33 - 12 34"   1    772   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE      C O N T I N U E D    17.39  document.write " The new string:  "+ newString +" " ;                  E X P L A N A T I ON   L  2   3   The  string  contains  numbers,  spaces,  and  dashes.  The variable  called  regex is  assigned  a regular  expression, which means:  Search  for  one  or  more  spaces  or  dashes,  globally   multiple  occurrences  within  the  string .  The  replace     method searches in  the string for spaces and  dashes,  and if it finds any,  replaces  them  with  the  empty string,  "",  returning  the  resulting string  to  newString.  To  change  the  original  string,  the  return  value  of  the  replace     method  can  be  re- turned  back  to  the  original  string:  var  string=string.replace regex,  "" .  See  Figure  17.41.   Removing  Spaces and  Dashes   The  original  string:  444-  33  -  12  34  The  new  string:  444331234   Figure  17.41   The replaceQ  m e t h od   is  used  to  remove  any  spaces  or  dashes.   Removing Unwanted Parentheses.  You  might  also  want  to  remove  parentheses  surrounding area codes  or  telephone numbers.  This is  a relatively simple regular  expres- sion  used  in  the  replaceQ  method,  as  shown  in  the  last  example.   E X A M P LE    17.40         Removing  Parens              Removing Unwanted Parentheses,  Spaces,  and Dashes        17.5  Form Validation with Regular Expressions   773   E X A M P LE      C O N T I N U E D    17.40  document.write "The original string:  "+string ;  document.write " The new string:  "+ newString +" " ;                  E X P L A N A T I ON   l  2   3   The  string  contains  numbers,  parentheses,  spaces,  and  dashes.  The variable  called  regex is  assigned  a regular  expression, which means:  Search  for  one or more parentheses   open or closed , spaces  or  dashes, globally   multiple  oc- currences  within  the  string .  The  replace    method  searches  in  the  string  for  parentheses,  spaces,  and  dashes,  and if it finds  any, replaces  them with  the  empty string,  "",  returning the resulting  string  to  newString.  To  change  the  original  string,  the  return  value  of the  replace    method  can  be  returned  back  to  the  original  string:  var  string=string.  replace regex,  "" .  See  Figure  17.42.   Removing  Unwanted  Parentheses,  Spaces,  and  Dashes   The  original  string:   408 -332-1234  The  new  string:  4083321234   Figure  17.42  Parentheses,  as well  as spaces a nd   dashes,  are  removed.  Numbers or letters  will  remain.   Removing any Nondigits.  A  character  that is  not  a  digit  can  be  represented  as  [A0- 9]  or  as \D in a regular  expression.  You might want to  remove  any characters  that are not  digits in  the user's input such as zip  codes or phone numbers.  This  can also be  done sim- ply  with  a  regular  expression  and  the  replace    method,  as  shown  in  Example  17.41.   E X A M P LE    17.41        774   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE   1 7 . 19      C O N T I N U E D     If it's not a number,  remove it!       var string="phone is  408 -  [332]-1234@!! !"  var newString=string.replace  \D g,  "" ;  document.write "The orginal string:  "+string ;  document.write " The new string:  "+ newString +" " ;                  E X P L A N A T I ON   1  2   3   1  2   3   The  string  contains  all  kinds  of  characters,  many  of which  are  not  numbers.  The  replace    method  searches  in  the  string  for  all  nondigit characters, AD g,   and  if  it  finds  any,  replaces  them with  the  empty string,  "",  returning  the  resulting string  to  newString.  To  change  the  original  string,  the  return  value  of the  replace    method  can  be  returned  back  to  the  original  string:  var  string=string.replace regex,  "" ;  The  new  string  is  displayed  after  all  the  nondigit  characters  were  replaced  with  nothing   i.e.,  they were  removed .  See  Figure  17.43.   If it's not a number, remove it!   The  original  siring:  phone  is    4 0 8   - y y [ 3 3 2 ] - 1 2 3 4 @  M!  The  new  string:  4 0 8 3 3 2 1 2 34   Figure  17.43  Only numbers will  remain  in  the  string.  All  other characters are  removed.   Removing any Nonalphanumeric Characters.  A nonalphanumeric word  char- acter  [A0-9a-zA-Z_j,  any  character  that  is  not  a  letter,  number,  or  the  underscore,  can  be  represented  as  \W.  Again  we  can  use  the  replace     method  to  remove  those  characters  from  a  string.   E X A M P LE    17.42        Removing  Nonalphanumeric  Characters     17.5  Form Validation with Regular Expressions   775   E X A M P LE    17.42     C O N T I N U E D    l  2  3       var string=" 408 -  [332]-1234@!! !"  var newString=string.replace  \W g,  "" ;  document.write "The original string:  "+string ;  document.write " The new string:  "+ newString +" " ;                  E X P L A N A T I ON   L   The  string  contains  all  kinds  of  characters,  many  of  which  are  not  letters  or  numbers.   2  The  regular  expression,  AW g,  means:  Search  globally  for  any  nonalphanumeric  characters   \W .  The  replace    method  searches  for  nonalphanumeric  characters  and  replaces  them  with  the  empty string,  "",  returning  the  resulting string  to  new- String.  To  change  the  original  string,  the  return  value  of  the  replace    method  can  be  returned  back  to  the  original  string:  var  string=string.replace regex,  "" ;  The  new string is  displayed  after  all  nonalphanumeric  characters  are  removed.  See  Figure  17.44.   3   If it's riot a number or a letter, remove It!   The  original  string:   408 -  [332]-1234@!H  The  new  string:  4083321234   Figure  17.44  Any  nonalphanumeric  characters  are  removed.   17.5.5  Checking for Valid Social Security Numbers  A  Social  Security number  contains  exactly nine  numbers.  There  might be  dashes  to  sep- arate  the  first  three  numbers  and  the  last  four  numbers.  The  dashes  should  be  optional.  Example  17.43  demonstrates  a regular  expression  that tests  for  three  digits,  followed  by  an  optional  dash,  followed  by  two  more  digits,  an  optional  dash,  and  finally  four  digits.  The  beginning  and  end  of  line  anchors  ensure  that  the  user  does  not  enter  extraneous    1  2  3   4   5   6   7   776   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE  17.17        Testing for a Social Security Nurriber        function  okSocial sform {   var  regex= A\d{3}-?\d\d-?\d{4}$ ;  if   regex.test sform.ssn.value  == false   {  alert "Social  Security number  invalid!" ;  sform.ssn.focus  ;  return false;   }  if    sform.ssn.value == "" {   alert "Please enter your Social  Security number." ;  sform.ssn.focus  ;  return false;   }  return true;   }                 <form name="snnTest"      method=post  action=" cgi-bin testing"  onSubmit="return okSocial this "   >   Enter your Social Security number:  xxx-xx-xxxx     <input  type="text"  name="ssn"  size=ll  >                                 E X P L A N A T I ON   1   The  function  okSocial    is  defined.  Its  purpose  is  to  validate  a  Social  Security  number.    17.5  Form Validation with Regular Expressions   777   E X P L A N A T I ON      C O N T I N U E D    4   3   5   The  regular  expression  test    method  will  return  true  if  a  valid  Social  Security  number  was  entered  and false  if  not.  If nothing was  entered  in  the  text box,  the user will be  alerted,  focus will go  to  the  text  field,  and  the  form  will  not  be  submitted.  The  onSubmit  event  handler  will  be  triggered  when  the  user  clicks  the  submit  but- ton  of line  7.  The  input  type  is  a  text  field  that will  hold  up  to  11  characters.   6  7  When  the  user  clicks  the  submit  button,  the  onSubmit  event  handler  will  be  trig- gered.  It  will  call  the  okSocial    function  to  validate  the  Social  Security  number.  See  Figure  17.45.   Enter  your Social  Security  number:  xxx-xx-xxxx   533-22-3344   Submit   Reset   Figure  17.45  The  user enters a  valid  Social  Security number.   17.5.6  Checking for Valid Phone Numbers  A  valid  U.S.  phone  number  has  ten  digits:  an  area  code  of  three  digits,  followed  by  the  subscriber  number  of  seven  digits.  There  might  be  parentheses  surrounding  the  area  code,  and  dashes  or  spaces  separating  the  numbers  in  the  subscriber  number.  With  reg- ular  expressions  you  can  test  for  any  or  all  of  these  conditions  and  then,  if  necessary,  remove  the  extraneous  characters,  leaving just  numbers.  Example  17.44  demonstrates  how  to  validate  a  simple  U.S.  phone  number.   E X A M P LE    17.44        Validating  Phone Numbers        function ok_Phone phform {   1  2   var regex =   A\ ?\d{3}\ ?-?\s*\d{3}\s*-?\d{4}$ ;  if regex.test phform.user_phone.value  {    778   Chapter  17      Regular Expressions and  Pattern  Matching   E X A M P LE    1 7 . 19      C O N T I N U E D    else{   alert "Enter a valid phone number" ;  return false;   }   }                  Checking for a Valid Phone Number    <form name="formtest"   action="http:  localhost cgi-bin environ.pi"  method="post"  onSubmit="return  ok_Phone this ;">      Please enter your phone:                              E X P L A N A T I ON   is  matched,  phform.user_phone.value,   The regular expression reads:  Start at the beginning of the string, look for an option- al literal  opening parenthesis,  followed by exactly three  digits,  and an optional  clos- ing parenthesis   the  area  code ,  followed  by  an  optional  dash,  zero  or  more  spaces,  exactly  three  digits,  zero  or  more  spaces,  an  optional  dash,  and  ending  in  exactly  four  digits,  such  as   222 -l 11-2345  or  222-111-2345  or  2221112345.  test    method  The  regular  expression  will return  true,  and  the  form will  be submitted;  otherwise,  the user will be  alerted  to  enter  a  valid  phone  number.  The  HTML  form  starts  here  and  is  named formtest.  The  onSubmit  event  handler  is  assigned  as  an  attribute  of the     tag.  It will  be  activated  when  the  user  clicks  the  submit  button.  The  handler,  ok_Phone,  passes  the  form  as  an  argument.  The  this  keyword  refers  to  the  form  named formtest  and  returns  a  true  or false  value.  If  true,  the  form  will  be  submitted.  The  user  will  enter  his  or  her  phone  number  in  a  text  field.  See  Figure  17.46.   the   3   4   5   1   2   3  4   5    17.5  Form Validation with Regular Expressions   779   Checking for  a  Valid  Phone  Number   Please  enter your phone:    456   111-1111   S u b m it      Clear     Checking for  a  Valid  Phone  Number   Please  enter your phone:      4 5 6        4 5 6     4 4 4 - 4 4 4 33  4 4 4 - 4 4 4 33   Submit  I  Clear     [JavaScript Application]  [JavaScript Application]   I  I   Enter a valid phone number  Enter a valid phone number  Enter a valid phone number   OK   Figure  17.46  The user enters a valid phone number  top .  Parentheses and the dash  are optional;  the  user enters a  number with too  many digits,  and  an alert box  appears   bottom .   Go  to http:  www.wtng.info,  the World Wide Telephone  Guide,  to get a listing of phone   formats  for  the  world,  country by  country   see  Figure  17.47 .   I  Search       ^  FTD.COM Flowers            Messenger   Yahoo! Mail       Bookmarks   Address    ö]  http:  www. wtng.info wtng-uu.htmlttUnited%20States   United  States   Number Format  Area Code:  Subscriber Number:  Trunk Prefix:  International Prefix:  Oil   01 for special calls    3  digits  7  digits  1   0 for special calls    Figure  17.47   Go  to http:  www.wtng.info to  look  up  phone  formats  around  the  world.    780   Chapter 17      Regular Expressions and Pattern Matching   For international phone numbers, the following formats are accepted  see Figure  17.48 :      +1   123   456  7888     +1123456  7888     +44   123   456  7888     +44 123   456  7888  ext  123     +44  20  7893  2567     02345  444  5555  66   if  Regex  Cheat  Sheet  Q  Search  Q  Regex Tester  Q  Browse Expressions  Q  Add Regex  Q  Manage My Expressions  Q  Contributors  Q  Regex Resources  Q  Web Services  Q  Advertise     Contact Us  Q  Register     Recent Expressions  SI  Recent Comments   Q  Regex Forums  Q  Regex Blogs  Q  Regex Mailing List   Top  Contributors   Q  Michael Ash  54   Q  Steven Smith  42   Q  Ted Cambron  24   Q  Matt Brooke  22   Q  Juraj Hajdüch  SK   21   B  Vassilis  Petroulias  2Ü  j   Premiere Project  Management«.   tMmmim  0nïime2009   a x o s o ft   Search  Results:  8  regular  expressions  found.   Displaying page 1 of 1 pages; Items 1 to 8      Title  Q  EKpression   Pattern  Title   1 -9][0-9]* \ [0-9]*\   -[0-9]*-  ?[0]?[ 1 -9][0-9\- ]*$   Description   International phone number check - optional country code followed by area  code surrounded with'-' or' ' and ' 'j or just an area code optionally starting  with 0j followed by phone numder. The number itself may contain spaces and   Matches  Non-Matches   + 123 45 678-910  123 45 678 91011     +123-045-67 89 10     12 345-678     +0 12 345-6789     01-234-56-78   Dmitry  Kandiner   Rating:  CZ   Pattern  Title   Figure  17.48  Searching  for an  international  phone  Regex at regexlib.com.    17.5  Form Validation with Regular Expressions   781   17.5.7  Checking for Valid E-Mail Addresses  When validating an  e-mail  address,  you  are  looking for  the  typical  format  found  in  such  addresses.  There  might be  some  domain  names  that  are  more  than  three  characters,  but  it  isn't  typical.  Also,  just  because  the  user  types  what  looks  like  a  valid  e-mail  address,  that  does  not  mean  that  it  is;  for  example,  the  e-mail  address  santa@northpole.org  uses  a  valid  syntax,  but  that  fact  does  not  prove  that  santa  is  a  real  user.   E-mail  addresses  usually  have  the  following  format:      An  @  sign  between  the  username  and  address   lequig@aol.com .     At  least  one  dot  between  the  address  and  domain  name     .com,  .mil,  .edu,  .se .     At  least  six  characters   a@b.se .3   Examples  of valid  e-mail  addresses:   username@mailserver.info  username@mailserver.org.se      username@mailserver.com           username.  moretext@mailser\er.  mil        user-name.moretext.sometext@mailserver.se   username@mailserver.co.uk   To  break  down  a  simple  e-mail  regular  expression    "  [\-\w]+ \.? +@  [\-\w]+ \.? +\.[a-zA-Z]{2,4}$ ;   use  the  following  steps:   Step 2:    [\-\w]+ \. ?   Step  1:   A   Go  to  the  beginning  of the  line.   The  username  consists  of one  or  more  dashes  or  word  characters  grouped  by  parentheses,  followed  by  one   or  not  one   literal  period.  Because  the  dot  is  outside  the  parentheses,  there  will  be  either  one  or  zero  dots  for  the  list  of word  characters,  not  two  or  three  dots in   Step  3:     [\.\w]+ \. ? +   The  username  can  consist  of  more  than  one  set  of  word  characters  separated  by  a  single  dots,  as  in  Joe.  Shmoe.  somebody.   Step  4:   @   A  literal  @  symbol  is  required  in  the  e-mail  address.   _\i*7 1  I   I   T li  ¿> m o il   coj-iTiiy'c r-1 o m ¿> i c 1 i 1 ^   tl-i ¿> 11   ri o m ¿>  n   l va    782   Chapter  17      Regular Expressions and  Pattern  Matching   Step  6:   [a-zA-Z] {2,4}   Step  7:   $   The domain name follows the mail server's name. A single  dot  separates  the  server  from  the  domain.  The  domain  name consists of between two and four  alphabetic charac- for  example,  savageman@imefdm.usmc.mil  or  patri- ters;  cia.person@sweden.sun.com.   The  end  of the  line  anchor  assures  that no  extra  char- acters  can be  added  onto  the  end  of the  e-mail  address.   Example  17.45  uses  a  regular  expression  to  check  for  a  valid  e-mail  address.   E X A M P LE    17.45        Validating  E-Mail  Addresses        function ok_Email eform {   var regex =   A  [a-zA-ZO-9_\-\.]+ @ [a-zA-ZO-9_\-  1  2  \.]+ \. [a-zA-Z]{2,5} {1,25} + [;.]  [a-zA-Z0-9_\-\.]+ @ [a-zA-Z0-9_\- \.]+ \. [a-zA-Z]{2,5} {1,25} + *$ ;  3  4     this got  the highest rating at regexlib.com!!  if regex.test eform.user_email.value  {   return true;   alert "Enter a valid email address" ;  return false;   }  else{   }   }              5   6  7  8        Checking for Valid Email Address    <form name="formtest"   action="http:  localhost cgi-bin environ.pi"  method="post"  onSubmit="return  ok_Email this ;">  Please enter your email address:                         17.5  Form Validation with Regular Expressions   783   E X P L A N A T I ON   1  A  function  called  ok_Email  is  defined.  It  takes  one  parameter,  a  reference  to  the   2   3   4   5   6  7   8   form  started  on  line  6.  This  got  the  highest  score  at  http:  www. regexlib.com.  When  you  are  looking  for  a  regular  expression  that  covers  all  possibilities,  you  might  spend  a  week  and  still  not  have  caught  everything.  This  is  where  the  libraries  come  in  handy.  Somebody has  already  done  the  hard  work.  The  regular  expression  test    method  takes  the  value  of  the  user  input,  user_email.value,  and  returns  true  if the  pattern  in  the  regular  expression  matched  the  user's  input.  The  e-mail  address  entered  is  tested  to  be  valid.  A  true  value  is  returned  and  the  form will be submitted  to  the server.  A valid  e-mail address does not mean  that if  mail  is  sent  to  that  address  it  will  necessarily  be  delivered;  for  example,  san- ta@northpole.org is  syntactically valid,  but  there  is  no  guarantee  that santa  is  a  real  user   unless you  still  believe! .  If an  invalid  e-mail  address was  entered,  the  alert box will  appear with  this mes- sage.  The  oh_Email    function  will  return false,  and  the  form  will  not  be  submit- ted.  The  form  named formtest  starts  here.  This  is  the  URL  of the  CGI  script  that will  be  called  on  the  server  side when  the  form  is  submitted.  The  onSubmit  event  handler  is  triggered when  the  user  clicks  the  submit button.  The  value  assigned  to  the  event is  a  function  called  oh_Email  that will  return  true  if the  e-mail  address  is  valid  and false,  if not.  The  form  will  be  sent  to  the  server  only if the  return  value  is  true.  See  Figure  17.49.   Checking for  Valid  Email  Address   Please  enter your  email  address:  peterw@sun.com.se   S e nd    I  Clear     Figure  17.49  The user enters a valid e-mail address.   17.5.8  Credit Card Validation    784   Chapter  17      Regular Expressions and  Pattern  Matching   is  used  by  a particular  card  type, whether  the  entire  number  fits  a  certain  formula,  and  valid  expiration  dates.  For  preliminary  checking,  you  can  test,  for  example,  to  see  if a  person  enters  valid  digits  for  a  Visa  card  and  that  the  expiration  date  is  later  than  the  current date,  but you  can't really tell if the  user's  card  has  gone  over  the limit, was  can- celled  or  stolen,  or  that  he  or  she  even  owns  it.  Checking  whether  the  card  is  active  and has  a sufficient balance  to  cover  a sale is performed by the banking system  backing  the  card.   The Expiration Date of the Card.  A valid expiration date is a month and year that  haven't gone  by.  The  month  and  year  are  represented  as  two  digits:  01  for January,  11  for  November,  and  03  for  the  year  2003.  The  following  example  defines  a  function  to  test  for  a  valid  expiration  date  based  on  a  one-  to  two-digit  month  and  a  two-digit  or  four-digit  year.   E X A M P LE    17.46        Testing  Expiration  Dates       function validExpire form   {   var now = new Date  ;  var thismonth =   now.getMonth    + 1 ;  var thisyear = now.getFullYear    ;  var expireYear = parselnt form.expireYear.value  ;  var yearLength =  form.expireYear.value.length;  var expireMonth = parselnt form.expireMonth.value ;  if  yearLength == 2  {  expireYear += 2 000;   }  if    expireMonth < thismonth && expireYear == thisyear    1  2  3  4  5   6   7    expireMonth > 12 {  alert "Invalid month" ;  return false;   }  else if   expireYear < thisyear   {   alert "Invalid year" ;  return false;   }  else {   return true;   }   }            17.5  Form Validation with Regular Expressions   785   EXAMPLE   17.46     C O N T I N U E D        <form name="myForm"   8  9       action="http:  127.0.o.1 cgi-bin env.cgi"  onSubmit="return  validExpire this ">  Enter the month   02 or 2 :     Enter the year   2003 or 03 :                               EXPLANATION   1  A  function  called  validExpireQ  is  defined.  It  takes  one  parameter,  a  reference  to  a   form.  Its  purpose  is  to  validate  the  expiration  date  of a  credit  card.   6   2  A  new  Date  object  is  created  and  assigned  to  the  variable  called  now.  3  Using  the getMonthQ  method, we  get this  month   months  start  at zero   and  add  1.  4  Using  the  getFullYear    method,  we  get  the  current  year,  as  2003.  5   The parselntO  function  converts  the  expiration year,  as  typed  in  by  the  user,  to  an  integer.  Then we get the length  of the year,  and  convert the month into  an integer.  If  the  number  of  characters  in  the  year, yearLength,  is  2,  then  2000  is  added  to  the  expireYear  value.  If  the  user  typed  02,  then  the  new  value  is  2002.  If  the  value  of  expireMonth  is  less  than  the  value  of  thisMonth  and  the  value  of  ex- pi re Year is  equal  to  the  value  of thisyear,  or  the  value  of expireMonth  is  greater  than  12,  the  number  entered  is  invalid.  So  a  card  is  invalid  if  it  has  a  month  prior  to  this  month  and  the  card  expires  this year,  or  the  month  is  over  12,  because  there  are  only  12  months  in  a year.  If the  expiration  year  is  prior  to  this  year,  it  is  also  invalid.  The  form  starts  here.  The  onSubmit  event  handler  is  triggered  after  the  user  fills  out  the  form  and  clicks  the  submit  button.  When  he  or  she  does,  the  function  called  validExpireQ  is  called.  It  will  return  true  if the  expiration  date  is  valid,  and  the  form  will  be  sent  to  the  URL  assigned  to  the  action  attribute  of  the  form.  See  Figure  17.50.   7  8  9    786   Chapter  17      Regular Expressions and  Pattern  Matching   Validating  Expiration  Dates   Enter the month  02 or 2 : i   Validating  Expiration  Dates   Enter the year  2003 or 03 : Ö3   Enter the month  02 or 2 :     Enter the year  2003  or 03 :   s u b m it    c l e ar   submit    clear     Microsoft  Internet  Explorer   EÏ   Invalid month   OK   Figure  17.50  The form  before  the  user enters anything   left ;  the  user enters a  month  a nd  year,  but the  month  has  already  gone  by   right .   Checking for Valid Type,  Prefix, and Length,  in  Figure  17  51  the  major  credit  cards  are  listed  along with  the  identifying  characteristics  of account  numbers  for  each.  All  the  characters  must  be  numbers.  Each  type  of card  has  a  prefix  value;  for  example,  MasterCard's  prefix  is  a  number  between  51  and  56,  and  Visa's  is  the  number  4.  Vali- dation  routines  to  check  for  a  prefix  and  the  correct  number  of  characters  are  shown  in  Example  17.47.   These  are  steps  for  credit  card  validation:   1.  Remove  any spaces  or  dashes,  then  test  that  the  result is  a  numeric  value.  2.  Check to  see  if the  user  has  selected  a valid  credit  card  type  such  as  MasterCard   or  Visa,  the  correct  prefix  for  the  card,  and  a  valid  length  for  the  number  of  characters  in  the  card.   3.  Apply  the  Lunh  formula  for  further  validation.   EXAMPLE  17.47       1   2    Checking  for Valid CC Type and Length        function checkCC myForm {   var cc_type;  var cc_length;  if   myForm.selectl.selectedlndex==0 {   cc_type="Visa";   }  else  if   myForm.selectl.selectedlndex==l {    17.5  Form Validation with Regular Expressions   787   EXAMPLE   17.47     C O N T I N U E D    else  if   myForm.selectl.selectedlndex==2 {   cc_type="Discover";   }  else {   alert "You didn't  select a card type." ;   }  cc_length=myForm.text.value.length;  switch cc_type {  case "Visa"  :   if    cc_length ==13    cc_length == 16 {   return true;   3  4  5  6   7   8   }  else{   }  break;   }  else{   alert "Invalid  length" ;  return false;   case  "MasterCard":  return true;   if    cc_length == 16 {   alert "Invalid  length" ;  return false;   }  break;  if    cc_length == 16 {   case  "Discover":  return true;   }  else{   alert "Invalid  length" ;  return false;   }  break;  default:  alert "Invalid  type" ;  return false;  break;   }   }               788   Chapter  17      Regular Expressions and  Pattern  Matching   EXAMPLE    1 7 . 19      C O N T I N U E D    9   10   11  12       Please select a credit card from the menu:          Visa    MasterCard    Discover               Please enter your card number:                               EXPLANATION   4   3   1  A  function  called  checkCC    is  defined.  It  takes  one  parameter,  a reference  to  a  form.  If the  value  of selectedlndex  is  0,  the  first  option  in  the  select  list was  chosen,  a  Visa  2  card.  The rest of the statements in  this  i block check to see which  card was select- ed  if it wasn't  this  one.  The  variable  cc_length  is  assigned  the  number  of  characters  that  were  typed  into  the  text  box;  that  is,  the  number  of characters  in  the  credit  card  number.  The  switch  statement  will  be  used  to  check  for  valid  card  number  lengths  for  whichever  card  the  user  selected  from  the  select  menu.  The  variable  cc_type  con- tains  the  card  type:  Visa,  MasterCard,  or  Discover.  If  the  card  is  a  Visa  card,  the  case  statements  will  be  used  to  check  for  a  valid  length.  The  valid  length  for  the  Visa  credit  card  number  is  between  13  and  16  characters   as  shown  in  Figure  17.51 .  If the  card  number  length  is  between  these  numbers,  true  is  returned.   6   5   7  MasterCard  is  checked  here.  Its  number  must  consist  of  16  characters.  8  Discover  is  checked  here.  Its  number  must  consist  of  16  characters.  9   The  form  starts  here.  The  onSubmit  handler  will  be  triggered  when  the  user  clicks  the  submit button.  At  that time  the  credit card will  be  checked  for  a valid  number    17.5  Form Validation with Regular Expressions   789   EXPLANATION      C O N T I N U E D    10  The select menu starts here with  three  options,  each a  credit card  type.  11  This is  the  text box where  the user  enters  the  card number.  12  When  the  user  clicks  the  submit  button,  the  onSubmit  handler  is  invoked,  and  if  the credit card number passes the validity test, off goes the form!  See Figure  17.52.   Length  16  13,  16   Check  digit  algorithm  mod  10  mod  10   CARD TYPE  MASTERCARD  VISA   AMEX   Diners  Club   Carte  Blanche   Discover   eiiRoute   JCB   JCB   Prefix  51-55  4  34  37  300-305  36  38  6011  2014  2149  3  2131  1800   15   14   16   15   16   15   mod  10   mod  10   mod  10   any   mod  10   mod  10   Please  select  a  credit  card  from  the  menu:   I V i sa  I  M a s t e r C a rd   Please  enter your  card  number:   Microsoft  Internet  Explorer   E 3   ¡123   Check card   j  Reset  j   Invalid length  Invalid length   OK   Figure  17.51  Some valid credit cards, their prefix, length, and whether they pass the  Lunh test based on  modulus 10, shown  later. Source:  http:  www.  beachnet.  com ~hstiles cardtype.  html.   Figure  17.52  The number of characters in the credit card  number should  be  16 for  Discover  Card.    790   Chapter  17      Regular Expressions and  Pattern  Matching   The Lunh Formula.  The  credit card  number  can  be  subjected  to  an  additional  math- ematical  test,  called  the  Lunh  formula,  which  it  must  pass  to  be  valid.  The  following  steps  are  required  to  validate  the  primary  account  number:   Step  1:  Double  the  value  of  every  other  digit  starting  with  the  next-to-rightmost   Step  2:   digit.  If  any  of  the  resulting  values  has  more  than  two  digits,  then  its  digits  must  be  added  together  to  produce  a  single  digit.   Step  3:  Add  the  sum  of all  the  digits  not  doubled  in  Step  1  to  the  sum  of the  digits   Step  4:   transformed  from  Steps  1  and  2.  If the  result is  exactly divisible  by  10   i.e.,  if the  result  ends in  a zero,  30,  40,  50,  etc. ,  then  the  number  is  valid—providing  of  course  that  it's  of  the  cor- rect  length  and  bears  a  correct  prefix  for  that  type  of card.   For  example,  to  validate  the  primary  account  number  49927398716:   Step  1:  Starting  from  the  next  to  the  right-most  digit,  multiply  every  other  number   by  2   the  number  in  bold  text .   4  9 9 9x2  18   2 7 2x2  4   3 9 3x2  6   8 7 8x2  16   16  1x2  2   Step  2:   If  any  numbers  resulting  from  Step  1  have  more  than  one  digit,  add  those  numbers  together.     1 + 8       1 + 6    9   7   Step  3:  Add  up  the  top  row  of numbers  that  were  not  doubled   not  in  bold   to  the  bottom  row  of  numbers  after  Step  2  was  finished.  Bottom  numbers  are  in  parentheses.   4 +  9  + 9 +  4  + 7 +  6  + 9 +  7  + 7 +  2  + 6   Step  4:   If  the  result  of  Step  3  is  divisible  exactly  by  10   i.e.,  leaves  no  remainder ,  the  card  is  valid.  The  result  of Step  3  is  70.  The  card  number  is  valid  if  the  card  type  is  valid,  as  long  as  the  length  of numbers  entered  is  valid,  and  it  has  the  correct  prefix  for  that  type  of card.    17.5  Form  Validation  with  Regular  Expressions   791   17.5.9  Putting It All Together   After  writing  the  functions  that  validate  each  field  of the  form,  they will  be  put  together  in  a single  script  to  check all  form  entries.  Example  17.48  combines just  two  of the  functions,  to  keep  the  example  from  being  too  large.  One  function,  oh_Form  ,  calls  the  functions  that  check  individual  entries;  for  example,  ok_Email    checks  for  valid  e-mail  and  returns  either  true  or false,  and  ok_Phone    checks  for  a  valid  phone  number.  After  all  of  the  entries  have  been  checked,  the  ok_Form    function  returns  either  true  or  false  to  the  onSubmit  event  handler.  If  ok_Form     returns  true,  the  form  will  be  submitted  to  the  server;  if not,  it  is  stopped.  If we  add  in  all  the  credit  card  validation  functions,  this  program will  get really  large.  W hy   don't  you  try  it?   E X A M P LE    17.48        Validating  a  Form        function  ok_Email emform {   var  regex=    "  [\-\w]+ \.? +@  [\-\w]+ \.? +\.[a-zA-Z]{2,4}$ ;   if regex.test eform.user_email.value  {   1  2   3   4  5  6   7  8  9  10  11  12   return  true;   }  else{   return  true;   }  else{   return  false;   }   }   }   alert "Enter  a valid email  address" ;  return  false;   }  function  ok_Phone phform {   var  regex  =    ?\d{3}\ ?-?\s*\d{3}\s*-?\d{4}$ ;  if regex.test phform.value  {   }  function  ok_Form myform {   if   ok_Email myform.useremail ==  false {   alert   "Invalid email  address" ;  myform.user_email.focus  ;  myform.user_email.select  ;  return  false;    792   Chapter  17      Regular  Expressions a nd   Pattern  Matching   E X A M P LE   17.19    CONTINUED    13   14   15   if   ok Phone mvform.user phone   == false {   alert   "Invalid phone  number" ;  myform.user_phone.focus  ;  myform.user_phone.select   ;  return  false;   return  true;   }                       Checking  Form  Input   <form  name="myform"   action="http:  localhost cgi-bin environ.pi"  method="post"  onSubmit="return  ok_Form this ;">  Please enter your email  address:                 Please enter your phone number:                                E X P L A N A T I ON   1   2   3   4   5  ^   The  function  to  validate  an  e-mail  address  is  defined.  It  is  called  by  the  ok_Form    function  on  line  7.  The  local  variable  called  regex  is  assigned  a  regular  expression,  explained  in  Ex- ample  17.45.  The  e-mail  address  entered  by  the  user,  eform.user_email.value,  is  tested  against  the  regular  expression  for  validity.  The  regular  expression  test    method  returns  true  or false  to  the  ok_Form  function,  line  7.  The  function  to  validate  a  phone  number  is  defined.  It  is  called  by  the  ok_Phone    function  on  line  13.  The  local  variable  called  regex  is  assigned  regular  expression.  .  -T-1   . . i . r.    . r.    1   1   .1  1       1  1  .      17.5  Form  Validation  with  Regular  Expressions   793   E X P L A N A T I ON   7   8   This  is  the  big  function  that  returns  the  final  verdict.  Did  the  user  provide  a  valid  e-mail  address  and  phone  number?  If so,  the  function  returns  true,  line  14.  The  ok_Email    function  is  called  with  the  user's  e-mail  input.  If  the  ok_Email    function  returns false,  the  user  entered  an  invalid  address,  and  will  be  alerted.  The  alert  dialog  box  sends  this  message  if  the  e-mail  address  is  not  valid.   9  10  T he f o c u s      method  puts  the  cursor  in  the  text  box,  so  that  the  user  can  start  typ-  ing  there.   11  The  selectO  method  highlights  the  text  in  a  field.  12   If false  is  returned  to  the  onSubmit  handler  on  line  15,  the  form  will  not  be  sub- mitted.  If  an  invalid  phone  number  was  entered,  false  will  be  returned  to  the  onSubmit  handler  on  line  15.  If  both  the  e-mail  address  and  the  phone  number  are  valid,  the  ok_Form    func- tion  returns  true  to  the  event  handler  on  line  15,  and  the  form  will  be  submitted  to  the  server's  URL  assigned  to  the  form's  action  attribute.   13   14   15  The  onSubmit  event  is  triggered  when  the  user  clicks  the  submit  button.  The  han- dler  is  a  function  called  ok_Form  .  It  is  the  main  validation  function  for  this  form.  If  true  is  returned,  the  form  will  be  submitted;  otherwise,  not.  See  Figures  17.53,  17.54  and  17.55.   U  Validating  a  Form  -  Microsoft  Internet   Explorer  provided  by  America  Online   IJ  File   Edit   View   Favorites   Tools  Help   J    Back  -  ={>   -   iQ   tSJl  Q Search  S Favorites   ^ H i s t o ry    . lr    J   J Address   C:\sambar50\docs\regex\all.html   Checking  Form  Input   Please  enter your  email  address:  taker_one@greedfactor.sel.me   Please  enter your  phone  number:  ¡ZZZ-333-4444   S e nd      Figure  17.53  The user enters a valid e-mail address.    794   Chapter 17      Regular Expressions and Pattern Matching   3  Validating  a  Form  -  Microsoft  I n t e r n et   Explorer  provided  by  Ai   File  Edit  View   Favorites   Tools  Help   Back  ^   ^   i  gI   fSJ   I  ®Search   Favorites   0 H is   Address   C:\sambar50\docs\regex\all.html   Checking  Form  Input   Please  enter your  email  address:  joker@blah.s   Please  enter your  phone  number:  222-333-1234   Microsoft  I n t e r n et   *I   Invalid email address   Checking  Form  Input   Please  enter your  email  address:   Please  enter your  phone  number:  222-333-1234   S e nd   Figure  17.54  The user entered an invalid e-mail address because there is only one  letter in  the domain  name.   Figure  17.55  The focusQ and selectQ methods focus on  and  highlight the  invalid  entry.    17.6  What You Should  Know   795   17.6  What You Should  Know   Regular  expressions  are  huge  and  they  seem  to  be  everywhere.  Programming  languages  are  all jumping  on  the  bandwagon  to  support  them.  They  are  particularly  useful  in Java- Script  for  validating  input  data  and  with  regular  expression  metacharacters  give  you  endless  ways  to  match  patterns.  After  learning  how  to  use  regular  expressions  and  pat- tern  matching  you  should  be  able  to:   1.  Define  a  literal  regular  expression  with JavaScript.  2.  Define  a  regular  expression  object  and  use  its  properties.  3.  Use  the  test    and  exec    methods.  4.  Use  the  regular  expression  metacharacters  to  control  searches.  5.  Perform  search  and  replacements  with  regular  expressions.  6.  Validate  an  e-mail  address,  phone  number,  and  credit  card.  7.  Use  the  match    and  search    methods.  8.  Remove  extraneous  characters  from  a  string.  9.  Split  up  a  string  by  a  regular  expression  delimiter.  10.  Use  a  regular  expression  library.    796   Chapter  17      Regular Expressions and Pattern  Matching   E x e r c i s es   1.  Write  a  regular  expression  that  will:   a.  Return  true  if  a  string  begins  with  letters  between  a  and ,  either  upper-  or   lowercase.   b.  Return  true  if  a  string  contains  a  number.  c.  In  the  string  My friend  is  Betsy  Ann  Savage,  capture  the  first  and  last  name   and  display  them  in  reverse,  as  Savage,  Betsy.   d.  Replace  Betsy  with  Elizabeth  in  the  previous  string.  e.  In  the  string  123abcdefg584,  replace  all  the  letters  with  XXX.  f.  Prompt  the  user  for  a  string  of  text,  then  print  true  if  the  string  ends  in  three   or  more  numbers.   the  string.   g.  Prompt  the  user  for  a  string  of  text,  then  display  the  first  three  characters  in   h.  Prompt  the  user  for  a  string  of  text  that  includes  letters  and  numbers,  then  print  true  if  the  string  does  not  contain  the  number  4  or  the  letter  a,  or  print  false   if  not.   i.  Prompt  the  user  for  his  or  her  first  and  last  name.  Display  true  if  the  name  starts  with  an  uppercase  letter  followed  by  lowercase  letters.  The  last  name  would  be  similar  to  the  following:  Jones,  Smith,  McFadden,  O'Reilly,  and  Jones-Smith.   2.  Validate  an  international  phone  number  that  is  represented  as  follows:   011  49  762  899  20   3.  Start  with  a  one-  or  two-character  code  for  a  United  Kingdom  postal  district,  such  as  B  for  Birmingham  or  RH  for  Red  Hill,  followed  by  a  one-  or  two-digit  number  to  represent  a  sector  within  that  district.  For  example,  RH1  is  Red  Hill  district,  sector  1;  C M 23   is  the  Chelmsford  district,  sector  23;  and  B1  is  Birming- ham  district,  sector  1.  Following  the  district  and  sector  is  a  space,  followed  by  a  digit  and  two  characters,  such  as  4GJ.   For  example:  CM23  2QP   where:  CM  =  Chelmsford  district  23  =  sector  23  2QP  =  a  particular  road.   Create  a  regular  expression  to  validate  a  UK  postal  code  as just  described.    chapter  18  An  Introduction to  Ajax  with JSON    18.1  Why Ajax?   JavaScript  has  gone  through  kind  of  a  Renaissance  of  its  own  since  this  b o ok   was  first  published  in  2 0 02   largely  due  to  the  hype  and  promises  it  offers.  Traditionally  W eb  applications  have  been  somewhat  clumsy  and  slow,  and  the  level  of  interactivity  and  usability  inferior  to  their  counterpart  desktop  applications,  yet  the  number  of  W eb  applications  available  continues  to  grow  at  an  amazing  rate.  Part  of that  growth  has  been  spurred  on  by  AJAX,  "Asynchronous  JavaScript  and  X M L , "1   not  a  new  programming  language,  but  a  methodology  for  creating  fast,  rich,  user-friendly,  and  interactive  W eb  applications  by  allowing  a  W eb   page  to  request  small  fragments  of information  from  the  server  instead  of  an  entire  page.  In  this  approach,  asynchronous  means  that  when  a  request  is  initiated  by  the  occurrence  of  a  client  event,  JavaScript  functions  using  Ajax  allow  the  browser  to  interact  in  the  background  directly with  the  server,  and  rather  than  waiting  for  the  server  to  respond,  continue  processing  the  page.  The  server  will  then  send  its  response  to  Ajax  containing  only  the  data  that  needs  changing.  A j ax   in  turn  will  update  that  portion  of  the  W eb   page.  F or   example,  if you  are  filling  out  a  form,  instead  of  waiting  until  all  the  fields  have  been  filled  and  the  page  submitted,  n ow   with  Ajax,  the  fields  can  be  validated  as  they  are  filled  and  the  user  does  not  have  to  sit  by  waiting  for  the  page  to  reload  before  continuing what he  or  she  was  doing.  This  process  is  shown  in  Figure  18.1.   As  discussed  in  Chapter  1,  "Introduction  to  JavaScript,"  Google  offers  great  exam- ples  of A j ax   with  Google  Maps  and  Google  Suggests,  an  application  shared  n ow   by  all  m a j or   browsers.   In  fact,  A j ax   was  made  popular  in  2 0 05   with  Google  Suggest.   W h en  the  you  start  searching  in  the  Google  search  b o x,   each  time  you  press  a  key,  Google  lists  items  that  fit  that  sequence  of  letters.  In  a  drop-down  list,  as  if  by  magic,  words  appear  that  contain  those  letters,  and  after  each  subsequent  key  press,  the  list  changes,    798   Chapter 18      An Introduction to Ajax  with JSON    Non-Ajax  Way   Ajax  Way   User requests a page via  URL   User requests a  page   Server gets the  page,  sends it to the browser   Server sends  back  page   User fills out a form and  submits it, then waits   HTTP request   User starts filling out form, triggers  an  event by changing  a value  or moving  a  key   Server works, validates form,  open database, etc.   Ajax  makes  incremental  function  calls to the server in  the  background   Figure  18.1  The request response loop with and without Ajax.   Page  not  reloaded, user  not  interrupted   reflecting  a  m o re   refined  s e a r c h.   T h is   d y n a m ic   and  i m m e d i a te   u p d a te   of  the  list  is  an  e x a m p le   of  A j ax   in  action.  In  F i g u re   1 8 . 2,   t he   letters  j,  a,  and  v  have  b e en   typed  in  t he  s e a r ch   b o x.   A  list  of  w o r ds   appears  starting  w i th   t h o se   letters.  T he   user  c an   select  a ny  of  the  suggested  i t e ms   and  s e a r ch   for  that  item  w i t h o ut   typing  any  m o re   if  he  or  s he  sees  a  w o rd   that  m a t c h es   his  or  h er   s e a r ch   criteria.  T h e re   is  no  delay,  no  w a i t i ng   w i th  an  A j ax   application.   18.2  Why Is Ajax Covered  Last?    18.3  The Steps for Creating Ajax Communication   799   0 ^ 1-     *        «9   S   -   —   —   1   11   o   *   1   -n   m  javascript  images  Jam  j j vj   download  javascript  jjva  update  ¡ava ap  javascript  download  jjva  t j t o f i ii  javter  bardem  javascript  array   JavaScript         X ML     HTML     CSS     DOM   Figure  18.2  Google Suggests.   2010 Google.   Ajax  is  based  on  already  existing  standards.  If you  have  a  strong  foundation  in  the  fol- lowing  topics,  there  is  very  little  new  to  learn:   We  have  not  covered  XML  in  this  book,  but  it  has  been  a  standard  format  since  1998  for  sharing  structured  text-based  information  between  computers.  XML  is  not  a  require- ment  for  writing  Ajax  applications,  but  we  will  examine  an  X ML   document  and  how  Ajax  processes  its  data.   18.3  The Steps for Creating Ajax   Communication   We  will  now  go  through  the  steps  to  create  and  send  requests  to  the  server.  We  examine  each  of  these  steps  and  then  put  all  of  them  together  in  several  examples.   1.  First  and  foremost  we  must  create  an  XMLHttpRequest  object,  a JavaScript   object with  properties  and  methods  used  to  handle  communication  between  the  browser  and  server.  A f t ^r   mo    r o r t n o ct   ^ U i ^ ^t    f t.  o  ^ U i ^ ^ t ' c-    i T - . i t i . - i 1_   i - r o   i to    m  t^      800   Chapter  18      An  Introduction  to Ajax  with  JSON    3.  The  request  is  sent  to  the  server  with  the  send    method.  4.  After  the  request  is  sent  to  the  server,  the  object's  readyState  property  keeps   track  of  the  state  of  the  request  object;  for  example,  if  a  request  has  been  made,  the  state  changes.  With  an  event  handler,  a  callback  function  can  be  executed  based  on  the  state  of  the  object.  If,  for  example,  the  request  has  been  answered  and  all  the  information  has  been  sent  by  the  server,  the  state  of  the  object  can  be  checked  and  a  function  called  to  retrieve  and  handle  the  data.   Now  we  will  take  a  closer  look  at  each  of  the  steps  to  create  Ajax  communication   between  the  browser  and  the  server.   18.3.1  Step 1: Create the XMLHttpRequest Object   With  the  HTTP  request response  cycle  we  discussed  at  the  beginning  of  the  book,  when  the  user  clicks  a  link,  submits  a  form,  or  types  an  address  in  the  URL,  an  HTTP  connec- tion  is  made  between  the  browser  and  the  server.  The  server's  response  is  to  send  back  a  new  or  updated  page  while  the  user  waits.  With  applications  that  make  asynchronous  calls  to  the  server,  there  has  to  be  a  way  to  do  this  without  refreshing  the  page  for  each  HTTP  request.  This  is  done  with  the  XMLHttpRequest  object.  This  object  allows  Java- Script  to  set  up  a  communication  channel  with  the  server,  exchange  data,  and  update  the  page  without reloading it.  Meanwhile  the  user  continues  scrolling,  typing,  and  push- ing  buttons just  as  he  or  she  would  on  a  desktop  application,  while  Ajax  is  working with  the  server  in  the  background.   The  XMLHttpRequest  object  is  supported  by  all  major  browsers    Firefox,  Chrome,  Opera,  and  Safari   and  is  fundamental  to  all  Ajax  applications.  Internet  Explorer  7  comes  with  the  XMLHttpRequest,  but  other  versions  of  Internet  Explorer  support  the  ActiveX  object,  which  is  not  cross-browser  compliant.  Therefore,  when  creating  a  new XMLHttpRe- quest  object,  most JavaScript  programs  use  catch  and  try  statements  to  make  sure  the  object  they  get  back  is  compatible  with  their  browser.   See  Chapter  7,  "Functions,"  for  a  review  of  catch  and  try.   Example  18.1  demonstrates  how  to  create  the  XMLHttpRequest  object  for  most  major   https:  developer.mozilla.org en AJAX Getting_Started.   browsers.   See   E X A M P LE    18.1    *  Check  browser  type  and  create  ajaxRequest  object   Put  this  function  in  an  external  .js  file  and  use  it  for your  Ajax programs   *    function  CreateRequestObject  {       The  variable  that  makes  Ajax possible!   var  ajaxRequest;  try{      Opera 8.0+,  Firefox,  Safari  ajaxRequest  = new XMLHttpRequest  ;      Create  the  object   1  2  3  4    18.3  The Steps for Creating  Ajax C o m m u n i c a t i on   801   E X A M P LE    18.1     C O N T I N U E D    catch   e {       Internet  Explorer Browsers   5   ajaxRequest  =  new ActiveXObject "Msxml2.XMLHTTP" ;   ajaxRequest  =  new ActiveXObject "Microsoft.XMLHTTP" ;   t r y{   }  catch   e   {   t r y{   }  catch   e {   return  false;   }   }   6   }  return  ajaxRequest;   }    End  function   E X P L A N A T I ON   1   2   3   4   5   6   to   for  Ajax   function  creates   the  XMLHttpRequest  object   The  CreateRequestObject  set  up  communication  between JavaScript  and  the  server.  This  variable  will  be  used  to  hold  a  reference  to  a  new  Ajax  XMLHttpRequest  object  created  in  this  function.  If  the  try  block  has  no  errors,  its  statements  will  be  executed;  otherwise,  the  catch  block  will  be  executed.  try  will  succeed.  Here  the  XMLHttpRequestQ  For  most  modern  browsers,  method  will  create  a  new  object  called  ajaxRequest.   The  object  name  is  named  any  valid  variable  name.   The  catch  blocks  are  executed  if  the  browser  is  Microsoft  Internet  Explorer.  Inter- net  Explorer  uses  the  ActiveXObjectQ  method  to  create  the  Ajax  object  rather  than  the  XMLHttpRequestQ  method.  If  successful,  an  Ajax  request  object  will  be  returned  from  this  function.   this   Properties and  Methods.  The  XMLHttpRequest  object  has  several  important  prop- erties  and  methods  that  will  give  you  information  about  the  status  of  the  request  response,  the  data  that  was  returned  from  the  server,  when  the  state  of  the  server  changes,  and  so  on.  There  are  methods  to  initialize  the  XMLHttpRequest  object,  send  a  request,  inform  you  about  what  is  in  the  response  headers,  how  to  cancel  a  request,  and  so  on.  You  will  see  the  properties  and  methods  in  Tables  18.1  and  18.2  used  in  the  Ajax  examples  that  follow.    802   Chapter  18      An  Introduction  to Ajax  with JSON    Table  18.1  XMLHttpRequest  Properties a nd   Event  Handlers   XMLHttpRequest  Property   Value   status   statusText   readyState   responseText   responseXML   onreadystatechange   onprogress   onload   The HTTP status code of the request response;  for example,  200  or 404.   Returns  the HTTP  status  code  from server response as a  string us as  OK  or  Not  Found.   A  number  representing  the  current state  of the  object   see  Table  18.3 .   Returns a  string value  of unparsed  text as a  response  from  the  server.   Returns response  parsed into  a  DOM  if Content-type is  text xml.  Used to  get multiple values.   The  event  handler  that  is  called  when  the  readyState  changes.   Mozilla  event handler  that is  called when an  error happens  during a  request.   Mozilla  event handler  called as  content is  loaded.   Mozilla  event handler called when the document is finished  loading.   Table  18.2  XMLHttpRequest  M e t h o ds   XMLHttpRequest  Method   What It Does   abort  0   Cancels  the  request.   getAUResponseHeaders        Returns a  string  of all  the HTTP  headers separated by a  newline.   getResponseHeader    "server"    Returns  the value  of a  specific  HTTP  header;  for example,  "Server"  or  "Last-Modified".   open     send     Initializes  the  XMLHttpRequest  object  with  GET  or  POST,  URL,  and so  on.   Sends  the  request.    18.3  The Steps for Creating Ajax Communication   803   18.3.2  Step 2: Initializing the Object   Whether  retrieving  a  simple  text  file,  X ML   file,  sending  form  data,  or  retrieving  infor- mation  from  a  database,  a  request  will  ask  for  a  resource  from  the  server.  To  get  this  information  the  request  object  needs  to  know  how  the  request  will  be  submitted   i.e.,  GET  or  POST;  use  capital  letters   and  the  URL  defining  the  location  of  the  file  or  server- side  script.   When  creating  HTML  forms,  this  information  was  normally  stored  in  the  ACTION  and  M E T H OD   attributes  of  the     tag.   Once  the  object  has  this  informa- tion,  the  request  can  be  made.   The  Open   Method.  The  open    method  prepares  or  initializes  the  object  for  com- munication  with  the  server,  whereas  the  send    method  actually  makes  the  request.  The  open    method  takes  three  arguments:   1.  The  request  type;  that  is,  how  the  data  is  submitted,  either  GET  or  POST.2  2.  The  URL  of the  file  or  server-side  program  and  parameters  representing  the  data   being  sent  as  key value  pairs.   3.  An  optional  third  parameter  of Boolean  true   asynchronous   or  false   synchro- nous .  W h en   set  to  true,  the  default,  the  processing  will  continue  without  wait- ing  for  the  server  to  respond,  whereas  with  a false  setting,  the  processing  will  stop  until  the  server  responds.   Except  for  simple  file  retrieval  or  searches,  the  POST  method  is  used,  but  this  requires  an  additional  request  header  method,  and  the  data  represented  as  name value  pairs  is  sent  to  the  server  as  an  argument  to  the  send    method.   It  is  important  to  note  that  for  security  reasons,  the  URL  must  be  within  the  same  domain  as  the  request  object;  for  example, JavaScript  is  not  permitted  to  open  an  XML- HttpRequest  to  any  server  other  than  the  same  W eb   server  currently  being  visited  by  the  user.   E X A M P LE     SAMPLE   C O D E    objectRequest.open "GET",  "myfile.txt",  true ;  objectRequest.open "POST",  "http:  localhost hello.php?name=George" ;   GET OF POST.  The  way  data  is  sent  to  a  server  with  the  HTTP  protocol  depends  on  whether  the  method  being  used  is  GET  or  POST.   To  review  these  two  methods,  go  to  Chapter  11,  section  "About  HTML  Forms"  on  page  3 3 4 .    In  either  case,  the  data  being  sent  is  in  a  URL-encoded  query  string  consisting  of  name value  pairs.  With  the  GET  method,  the  browser  sends  data  in  the  URL   see  Figure  18.3 ,  whereas  with  the  POST  J   . J J : ,:    ; f t „J    ] .   „„    „  Ul    A.    1.    J„    1   1   J   J    804   HTTP  Headers   Chapter 18      An Introduction to Ajax  with JSON    GET   cgi-bin printenv.pl?color=yellow  HTTP 1.1  Host:  localhost  User-Agent:  Mozilla 5.0  Windows;  U;  Windows NT 5.1;  en-US;  rv: 1.9.1.3  Gecko 20090824 Firefox 3.5.3  .NET CLR 3.5.30729   Accept:  text html, application xhtml+xmlj application xml; q=0.9, *   *;  q=0.8  Accept-Language:  en-uSjen;q=0.5  Accept-Encoding:  gzip, deflate  Accept-Charset:  ISO-8859-1, utf-8; q=0.7,  *; q=0.7  Keep-Alive:  300  Connection:  keep-alive   HTTP 1.x 200 OK  Date:  Mon,  21  Sep 2009  17:01:29 GMT  Server:  Apache 2.2.11   Win32  PHP 5.2.8  Keep-Alive:  timeout=5j  max=100  Connection:  Keep-Alive  Transfer-Encoding:  chunked  Content-Type:  text plain;  charset=iso-8859-l   Replay...   E  Capture   Figure  18.3  Firefox Live  Headers shows how the GET  method sends data  in a query string  appended to a the  URL and a  question mark  shown  in  highlighted  bar .   I  Live  HTTP  headers   Headers   Generator  Config  About    HTTP  Headers   http:   localhost cgi-bin printenv. pi   B BM   POST   cgi-bin printenv.pl  HTTP 1.1  Host:  localhost  User-Agent:  Mozilla 5.0  Windows;  U;  Windows NT 5.1;  en-US;  rv: 1.9.1.3  Gecko 20090824 Firefox 3.5.3  .NET CLR 3.5.30729   Accept:  text html, application xhtml+xmlj application xml; q=0.9, *   *;  q=0.8  Accept-Language:  en-uSjen;q=0.5  Accept-Encoding:  gzipjdeflate  Accept-Charset:  ISO-8859-1, utf-8; q=0.7, *; q=0.7  Keep-Alive:  300  Connection:  keep-alive  Content-Type:  application x-www-form-urlencoded  Content-Length:  11   HTTP 1.x 200 OK  Date:  Won,  21  Sep 2009  16:53:12 GMT  Server:  Apache 2.2.11   Win32  PHP 5.2.£  Kftftn-Alivft:  himftni ih=Fi.  mflx=inn   xi    j   Save  All...   Replay...   0  Capture    18.3  The Steps for Creating  Ajax C o m m u n i c a t i on   805   W h en   the  first  parameter  to  the  Ajax  open    method  is  GET,  the  second  argument  is  the  URL  of  the  page  that  is  being  requested.  If  the  URL  is  a  server-side  script,  such  as  PHP  or  ASP.NET,  any  input  data   name value  pairs ,  is  sent  as  a  URL-encoded  query  string.  A  question  mark,  followed  by  the  query  string,  is  appended  to  the  URL.  As  you  might  remember  in  traditional  form  processing,  if the  GET  method  is  used,  the  data will  be  attached  to  the  URL  in  the  location  box  of  the  browser,  visible  to  all.  With  Ajax  the  URL  is  an  argument  to  the  open    method  and  is  not  visible  in  the  browser  window  because  it  is  being  sent  directly  from  Ajax  to  the  server.  For  the  GET  method:   E X A M P LE     SAMPLE   C O D E    ajaxRequestObject. open  "GET", "http:   localhost ajaxform.php?username="+   namevalue+"&userphone="+phonevalue,  true ;   ajaxRequestObject.send null ;   With  the  POST  method,  additional  data  is  sent  to  the  server.  The  first  argument  to  the  open    method  will  be  POST,  the  second  argument,  the  URL  of the  server  script,  and  the  third  true  for  asynchronous.  Instead  of  attaching  the  query  string  to  the  URL  it  will  be  sent  as  an  argument  to  the  send    method.   The  setRequestHeader    method  is  added  to  specify  the  Content-type,  set  to  "appli- cation x-www-form-urlencoded".  This  is  needed  for  any  POST  request  made  via  Ajax.  Finally,  the  send    method  is  called,  passing  in  the  parameters  that  will  be  sent  to  the  server-side  program   without  the  "?"  prefix .  This  data  is  formatted  as  a  query  string   e.g.,  "name=value&foo=bar" ,  and  not  visible  in  the  browser.   E X A M P LE     SAMPLE   C O D E    ajaxRequestObject.open "POST",  "http:  localhost ajaxform.php",  true ;  ajaxRequestObject.setRequestHeader "Content-type",  ajaxRequestObject.send username="+namevalue+"&userphone="+phonevalue,   "application x-www-form-urlencoded" ;  true ;   18.3.3  Sending the Request to the Server   Once  the  object  has  been  initialized,  the  browser  can  send  a  request  to  the  server  with  the  send    method.  This  method  takes  one  argument  of  "null"  if  you  use  the  GET  method  for  sending  the  data.  As  discussed  in  the  previous  section,  with  the  POST  method,  an  additional  step  is  required.  The  setRequestHeader    method  tells  the  server  the  "Content-type",  and  the  send    method  sends  the  query  string  as  name value  pairs    806   Chapter  18      An  Introduction  to Ajax  with  JSON    E X A M P LE     SAMPLE   C O D E    objectRequest.open "GET",  "http:  localhost test.php?name=George",  true ;   objectRequest.send null ;   E X A M P LE     SAMPLE   C O D E    objectRequest.open "POST",  "http:  localhost hello.php" ;  objectRequest.setRequestHeader "Content-Type",  "application x-www-form-urlencoded" ;  objectRequest.send "first=Joe&last=Blow" ;   18.3.4  Step 3: Monitoring the State of the Server Response  Monitoring the State of the Server.  After  sending  a request  to  the  server,  we  need  to  know  when  the  request  has  completed  and  what  to  do  with  the  information  when  it  comes  back.  The  onreadystatechange  event  handler  of  is  assigned  a  function  that  will  be  called  automatically  when  the  onreadystatechange  event  handler  is  triggered;  that  is,  when  the  state  of  the  server  changes.   the  XMLHttpRequest  object   E X A M P LE     SAMPLE   C O D E    ajaxRequest.onreadystatechange  =  function  {       The  function will  defined later   W h at   does  readyState  mean?  The  XMLHttpRequest  object  keeps  track  of  the  status  of  the  server's  response  in  another  property  called  readyState.  This  property  has  one  of  the  values  shown  in  Table  18.3.   Table  18.3   The  readyState  properly  of  fhe XMLHttpRequest  Object   Status   Value   0   1   2   3   Object,  has been  created,  not  initialized   Loading,  send  method  not yet  called   Loaded,  send  method  called,  headers  not  available   Interactive,  some  data  has been received,  status  and  response  headers  not    18.3  The Steps for Creating  Ajax C o m m u n i c a t i on   807   Each  time  the  readyState  value  changes,  then  the  onreadystatechange  handler  is  trig-  gered  and  the  function  assigned  to  it  called.   When Is the Request Complete?  W h en   the  server's  response  is  complete,  the  readyState  value  will  be  4.  The  next  step  is  to  check  this  value,  and  if  it  is  4,  retrieve  the  data  from  the  server's  response.   To  watch  the  server  response  change  state,  the  following  code  can  be  added  to  your  program  once  the  Ajax  request  object  has  been  created.  Assuming  that  the  object  is  named  ajaxRequest,  the  following  example  tests  the  readyState  values  and  sends  an  alert  stating  what  each  value  represents.   E X A M P LE     SAMPLE   C O D E    if ajaxRequest.readyState  ==  0 {   alert "There  is  no connection" ;   }  if ajaxRequest.readyState  ==  1 {   alert "The  connection  is  loading" ;   }  if ajaxRequest.readyState  ==  2 {  alert "The  data was  loaded"    }  if ajaxRequest.readyState  ==  3 {   alert "Some  data has  been  retrieved.   The connection  is  interactive" ;   if ajaxRequest.readyState  ==  4 {   alert "Complete!  All of  the data has been received" ;   }   Checking the HTTP Status.  We   might  also  want to  check the  HTTP  status  returned  by  the  server  to  the  client  to  determine  the  outcome  of  a  request.  A  status  returned  by  the  HTTP  server  of  2 00   means  that  the  response  was  successful.   In  some  of  the  follow- ing  examples  using  a  PHP  script,  Firefox  seems  to  return  a  status  of 0.   An  HTTP  status  of 4 04   means  that  the  URL  cannot  be  found.  There  are  a  number  of  HTTP  status  values  that  can  be  checked.  Some  common  HTTP  status  codes  are  given  in  Table  18.4.   Table 18.4  Some HTTP Status Codes   HTTP Status  Code    808   Chapter  18      An  Introduction  to Ajax  with  JSON    Table 18.4  Some HTTP Status Codes  continued    HTTP Status  Code   401  Unauthorized   The  request  requires  user  authentication.   404  Not  found   The  server  found  nothing  matching  the  URI  given.   500  Internal  Server  Error   The server encountered an unexpected error and couldn't fulfill  the  request.   503  Service  Unavailable   The server is  currently unable  to  handle  the request due  to  temporary  overloading  or  maintenance.   For  a  descriptive  table  of  all  the  HTTP  status  codes,  go  to  com support webmasters bin answer.   http:  www.   google,   and  for  complete  technical  definitions  of  these  codes,  go  to   http:  www.w3.org Protocols rfc2616 rfc2616-secl0.html.   py?hl=en&answer=40132   E X A M P LE     SAMPLE   C O D E    ajaxRequest.onreadystatéchangé = function    {   if   objectRequest.status == 200   {      OK   }  else{   }   }  else  if ajaxRequest.status  == 404 {       Resource not  found   alert "Error :"  + ajaxRequest.statusText ;   18.3.5  Handling the Response with a Callback Function   The  function  that  will  check  for  the  status  of  a  request  and  handle  the  information  returned  from  the  server  is  called  a  callback  function  or  an  inline  function.  The  object's  onreadystatechange  event  handler  is  assigned  a  reference  to  the  callback  function.   The  data  sent  back  from  a  server  can  be  retrieved  with  two  other  properties  of  the  responseXML  property.   responseText  property  and   XMLHttpRequest  object  called   the   the    18.3  The Steps for Creating  Ajax C o m m u n i c a t i on   809   E X A M P LE     SAMPLE  C O D E      Callback  function  ajaxRequest.onreadystatéchangé = function    {   var  textObj;  textObj =document.getElementByld "message" ;  if ajaxRequest.readyState  ==  4 {     alert ajaxRequest.status ;  if ajaxRequest.status==200 {   textObj.irnierHTML=ajaxRequest.responseText;   *  Get  text   in a string returned by the server.  *    }   }  else{   }   else  if ajaxRequest.status  ==  404 {    Bad URL   textObj.innerHTML="Resource  unavailable";   alert "Error :" +   ajaxRequest.statusText  ;   The responseXML property.  The  'x'  in  Ajax  stands  for  XML,  and  although  you  don't  have  to  use  XML  to  create  Ajax  applications,  data  from  more  complex  and  struc- tured  X ML   documents  can  be  returned  by  an  HTTP  request  and  assigned  to  the  object's  responseXML  property.  This  property  contains  an  X ML   document  object,  which  can  be  examined  and  parsed  using  the  DOM,  in  the  same  way we  used  the  DOM  in  Chapter  15,  "The  W 3C   D OM   and JavaScript."  The  following  example  demonstrates  how  to  create  a  simple  XML  file  and  how  to  use  Ajax  to  retrieve  the  file  data  and  use  the  DOM  to  access  the  information   see  Figure  18.5 .   E X A M P LE     SAMPLE  C O D E    var xml  =  ajaxRequest.responseXML;    Get  an XML object  alert xml ;    810   Chapter  18      An  Introduction  to Ajax  with  JSON    Checking HTTP Response Headers.  HTTP  response  headers  define  various  char- acteristics  of  the  data  that  has  been  requested,  providing  information  such  as  the  server  type,  the  last  date  when  the  page  was  modified,  the  Content-type,  and  so  forth.  Java- Script  can  retrieve  this  HTTP  header  information  with  two  methods,  the  getAURespon- seHeadersO  method  The  getAllResponseHeadersQ  method  returns  a  complete  list  of all  the  response  headers  as  name value  pairs,  each  sep- arated  by  a  newline   see  Figure  18.5 .  The  getResponseHeader    method  returns  a  string  containing  a  specific  response  header  of  the  XMLHttpRequest  object.   getResponseHeader    method.   and   the   The  following  piece  of  code  highlights  how  to  get  all  the  HTTP  response  headers,  the  getResponseHeader     if  you  want  only  one  header  value  you  could  use   whereas  method  as:   alert ajaxRequest.getResponseHeader "Content-type" ;   ajaxRequest.onreadystatechange = function    {   if   ajaxRequest.readyState == 4   {  if   ajaxRequest.status == 200   {   headers=ajaxRequest.getAHResponseHeaders    ;  alert headers ;   }   Figure  18.6  HTTP response headers.   18.3.6  The Browser Cache Issue   Normally the  browser  caches  banners,  advertising,  graphs,  photos,  and  entire  W eb   pages  in  a  folder  so  that  you  can  hit  the  back  button  or  click  a  link  to  a  page  you just  visited,  and  the  image  or  page  will  be  pulled  from  the  cache.  If you  request  a  page  with  the  same    18.3  The Steps for Creating  Ajax C o m m u n i c a t i on   811   request  for  a  cached  page,  the  speed  of  the  page  load  is  greatly  improved.  W h en   using  Ajax,  on  the  other  hand,  which  is  all  based  on  making  HTTP  requests  to  a  server,  this  can  be  a  problem.  For  example,  if you  are  using Ajax  to  update  a  table  containing  stock  data,  and  the  table  is  to  be  refreshed  every  4  or  5  minutes  in  real  time,  the  Ajax  request  will  grab  the  cached  page  from  the  previous  request,  not  what  is  wanted.  The  page  will  not reflect  the  changes  because  the  browser will  load  from  the  cache  rather  than  by  mak- ing  another  request  to  the  same  URL.   The  HTTP  specification  states  that  the  response  to  a  GET  request  is  cacheable  but  any  responses  to  the  POST  method  are  not  cacheable,  unless  the  response  includes  appro- priate  Cache-Control  or  Expires  header  fields,  meaning  that  a  query  using  the  POST  method  will  normally  be  resubmitted  and  reprocessed  for  every  request.  If  using  the  GET  method,  there  are  a  number  of  techniques  to  ensure  that  a  new  HTTP  request  is  made  every  time  a  request  is  made.  The  simplest  solution  is  to  change  the  URL  in  the  Ajax  open    method  to  trick  the  browser  into  reloading  the  document  for  what  appears  to  be  a  new  page.  By  adding  a  parameter  that  is  constantly  changing  in  the  URL,  each  request  will  be  unique  and  therefore,  not  cached.  This  can  be  accomplished  by  adding  a  timestamp  or  a  random  number  value  as  a  parameter  to  the  URL.  The  value  should  be  different  each  time,  and  although  it  will  have  no  effect  on  the  requested  page,  it  makes  the  browser  see  this  as  a  URL  that  has  never  been  visited  before.   E X A M P LE     SAMPLE  C O D E    var url  =  "http:   rnydomain?myParams=" +"&pseudoParam= " +   new  Date  .getTime  ;   var url  =  "http:   rnydomain?myParams="  +  "&pseudoParam="  +   Math.random  ;   By  adding  a  new  value  to  the  URL,  the  browser  will  refresh  the  page  each  time  there   is  a  request  for  that  page.   You  can  also  add  headers  to  the  request  object  with  the  setRequestHeader    method.  Setting  the  "If-Modified-Since"  value  to  a  date  earlier  than  now  causes  the  browser  to  check  to  see  if  the  data  has  changed  since  that  date  and  send  a  new  request.  As  long  as  the  date  is  a  past  date,  it  doesn't  matter  what  date  you  use.  If these  headers  fail  on  a  par- ticular  browser,  use  the  random  number  or  date  options  shown  above.   E X A M P LE     SAMPLE  C O D E    ajaxRequest.setRequestHeader 1 If-Modified-Since1,  'Sat,  03 Jan   ajaxRequest.setRequestHeader "Cache-Control",  "no-cache" ;   2010 00 : 00 : 00GMT 1  ;    812   Chapter  18      An  Introduction to Ajax  with JSON    18.4  Putting  It All Together   The  steps  we  have  covered  are  summarized  in  the  following  Ajax  examples  to  demon- strate  how  to  communicate  with  the  server.  The  first  example  demonstrates  how  to  use  Ajax  to  get  the  server's  time  and  respond  to  key  events,  the  next  two  examples  work with  a  text  file  and  an  XML  file,  and  demonstrate  how  to  retrieve  display  the  content  of both  types  of  files,  and  the  last  example  uses  Ajax  with  forms  using  both  the  GET  and  POST  methods.  All  of  the  programs  go  through  the  following  steps:   1.  The  user  clicks  a  button  or  presses  a  key  to  initiate  a  function  that  will  start  the   process  of Ajax  communicating  with  the  server.   2.  Most  important,  JavaScript  uses  the  XMLHttpRequest  constructor  method  to   create  a  new  object  that will  serve  as  the  Ajax  communication  layer  between  the  browser  and  the  server.   If not  this,  IFrames  or  cookies  can  be  used,  but will  not  be  covered  in  this  text.    3.  Once  the  XMLHttpRequest  object  is  created,  it  is  initialized  with  the  object's  openQ  method  to  set  up  the  type  of  HTTP  request    G ET   or  POST ,  the  URL   where  the  request  is  going ,  and  whether  the  request  will  be  asynchronous   true  and  the  default ,  or  synchronous   false .   4.  The  request  is  then  sent  to  the  server  with  the  object's  send    method.  5.  The  server  processes  the  request  and  sends  a  response  to  the  browser  in  either  X ML   or  text  format.  It  contains  the  data  only  of  the  page  elements  that  need  to  be  changed.  In  most  cases  this  data  will  include  of just  a  fraction  of  the  total  page  markup.   6.  JavaScript  processes  the  server  response,  updates  the  relevant  page  content,  or   performs  another  operation  with  the  new  data  received  from  the  server.   test   these  examples,  go   Connecting to a Server Program.  If you  are  ready  to  start  using  PHP  and  Apache  to  http:  sourceforge.net projects xampp XAMPP  and  download  to  XAMPP.  It  is  a  very  easy  to  install  Apache  Distribution  for  Linux,  Solaris,  Windows  and  Mac  OS  X.  The  package  includes  the  Apache  W eb   server,  MySQL,  PHP,  Perl,  an  FTP  server,  and  phpMyAdmin.  Once  you  have  installed  XAMPP,  you  will  be  able  to  start  up  the  services  with  the  XAMPP  control  panel  by  clicking  on  the  XAMPP  icon   see  Figure  18.7   or  going  to  the  Start  menu   Windows   or  Application  menu   MacOS .  W h en   you  get  to  the  XAMPP  control  panel   see  Figure  18.8 ,  just  click  to  start  Apache  to  get  your  Apache  HTTP  server  running.  PHP  scripts  will  be  stored  in  the  same  place  as  HTML  files,  under  the  server's  root,  and  should  be  given  a  .php  extension.  There  are  many  tuto- rials  and  books  on  PHP.  Of  course  we  recommend  PHP  and  MySQL  by  Example  by  Ellie  Quigley  and  Marko  Gargenta   Prentice  Hall,  ISBN  0 - 1 3 - 1 8 7 5 0 8 - 6  .    18.4  Putting  It All Together   813   CO   XAMPP  Control   ^  O  ^   XAMPP  Controls   Starting   ll   Apache   MySQL   FTP   I  ' M T fc   1   Start   Stop   Start   Figure  18.8  Starting the Apache server with XAMPP.   An Ajax Example with PHP.  Example  18.2  demonstrates  an  asynchronous  interac- tion  between  the  browser  and  server  using  Ajax.  The  PHP  server-side  script,  executing  in  the  background,  will  be  called  every  time  the  user  types  in  a  letter  and  releases  the  key.  W h en   a  key  is  released,  a  request  is  sent  to  the  server,  the  PHP  script  is  executed,  and  the  response  is  returned  back  from  the  server  as  text  that  can  be  inserted  in  an  HTML  div  container  along  with  the  current  time  as  hour minute second.  If  the  delete  key  is  pressed  and  released  the  letter  will  be  removed  in  the  text  box  as  well  as  in  the  div  container.  You  can  see  how,  with  some  more  extensive  programming  on  the  PHP  side,  you  could  make  your  "search  suggest"  application,  by  creating  an  array  of search  strings.  If  the  user  typed  a  letter  or  letters  in  a  search  box  on  the  browser,  Ajax  would  send  each  letter  to  the  server.  The  server  script  would  then  match  each  letter  against  the  strings  in  its  array,  and  if there  was  a  match,  return  the  response  in  a  string  to  the  browser.  Because  this  text  cannot  assume  you  are  already  savvy  in  PHP,  it  won't  be  attempted  here,  but  there  are  many  tutorials  on  the  W eb   to  demonstrate  how  this  is  done.  For  some  good  l_290_312.html  examples,  or   see:  http:  www.w3schools.com php php_ajax_suggest.asp.   namicajax.com fr AJAX_Suggest_Tutorial-27   http:  www.dy   Example  18.2  contains  the Ajax  code where  communication  between browser  and  server  takes  place.  The  CSS  style  sheet  for  Example  18.2  is  located  in  an  external  file   Example  18.3 .  Another  file  called  ajaxCreateRequestjs   Example  18.4   contains  the  code  for  cross- browser  checking  and  most  important  creating  a  new  a  XMLHttpRequest  object.   The  Client  Side  script—"ajaxGetText.html"   E X A M P LE    18.2        814   Chapter  18      An  Introduction  to Ajax  with  JSON    E X A M P LE    18.2     C O N T I N U E D    3  4   5  6  7  8   9  10   11   12   13       function  goAjax  {   var  ajaxRequest=createRequest  ;    *  Cross-browser  check;  Get  a  new XMLHttpRequest  object  *    if   ajaxRequest  !=  false {   *  If we got back a request   object  create  callback  function  to  check  state  of  the  request*   if ajaxRequest.readyState  ==  4 {   ajaxRequest.onreadystatechange  =  function  {   if ajaxRequest.status==200 {   document.getElementByld "message" .innerHTML=  ajaxRequest.responseText;   }   }   }      End callback  function  yourname=document.getElementByld "username" .value;  ajaxRequest.open "GET",   "http:  localhost serverTime.php?name="  + yourname  +   "&random="  + Math.random        ;  ajaxRequest.send null ;   }    End if  else{  alert "Browser problem was  encountered!" ;}   }      End ajaxFunction         Your name:  <input  type="text"  onKeyUp="goAjax  ;"   name="username"  id="username"   >                                           < html   E X P L A N A T I ON   1   The  CSS style  sheet is  loaded  from  a  file  called  "ajaxintro.css".  It  defines  the  back- ground  color  as  aliceblue  and  the  style  of the     contents  that will  be  displayed  in  the  browser,  a  dark  green  container  with  white  letters.  See  Example  18.3.    18.4  Putting  It All Together   815   E X P L A N A T I ON    CONTINUED    3   4   5   6  7   8   9   This  function  is  where  the  Ajax  communication  between  the  browser  and  server  will  happen.  It  is  called  when  the  onKeyUp  event  handler  is  triggered;  that  is,  when  the  user  presses  a  key  and  releases  it     line  12 .  This  function  will  be  called  every  time  the  user  releases  a  key.  It is  responsible  for  all  the  Ajax  activity,  once  an  XMLHttpRequest  object  has  been  created.  The  callback function   also  called  inline  function   monitors  the  state  of the  server.  W h en   the  onreadystate  event  handler  sees  that  the  server  has  changed  state,  the  callback  function  is  executed.  If  the  readyState  property  is  4,  the  HTTP  request  has  completed.  If  the  HTTP  server  status  is  2 00   OK,  then  the  server  was  successful  and  we  are  ready  to  view  the  response.  The  getElementById    method  will  return  a  reference  to  the  div  container  name  message   line  13 .  The  ajaxRequest.  responseText  property  contains  the  ASCII  text  that  was  returned.  The  value  of  the  innerHTML  property  contains  that  returned  text  that  will  be  displayed  in  the     container.  The  getElementByldO  method  will  get  the  name  that  the  user  typed  in  the  text  field  and  assign  it  to  a  variable  called  yourname.   10  The  request  object's  open    method  initializes  the  XMLHttpRequest  object.  The  request  will be sent as an HTTP  GET request to start a server-side PHP  program  on  the localhost   see  Example  18.5 .  The  parameters  are  two  URL  encoded  key value  pairs:  The  first is  the  name  of the  user   name=yourname   and  the second  is  a random  number value.   11  The  send    method  is  responsible  for  sending  the  request  to  the  server.  W h en   us-  ing  the  GET  method,  the  argument  is  set  to  null.   12  The  HTML  form  has  one  input  device,  a  textbox.  After  the  user  types  a  character  in  the  box  and  releases  the  key,  the  onKeyUp  event  handler  will  be  triggered  and  call  the  goAjax     function.   13  W h en   the  server  responds,  it  will  send  back  text  that  will  be  displayed  in  this  div  container.  The  div  container  will  be  styled  by  the  class  divStyle  defined  in  the  ex- ternal  .ess  file  shown  next.   The  CSS  File—"ajaxStyle.css"   E X A M P LE    18.3   body{background-color:aliceblue;}  .divStyle  {   * class  for the   container   background-color:aliceblue;  margin-left:20%    816   Chapter  18      An  Introduction to Ajax  with JSON    Creating  the  Request  Object—"ajaxCreateRequest.js"   E X A M P LE    18.4    * Check browser  type and create ajax request  object   Put  this function in an external  .js file and use it for your  Ajax programs  *    function  CreateRequestObject  {   var ajaxRequest;      The variable  that makes Ajax possible!  try{      Opera 8.0+, Firefox,  Safari  ajaxRequest = new XHLHttpRequest  ;     Create  the object       Internet Explorer Browsers   ajaxRequest  = new ActiveXObject "Msxml2.XMLHTTP" ;   ajaxRequest  = new ActiveXObject "Microsoft.XMLHTTP" ;   }  catch   e {   t r y{   }  catch  e   {   t r y{   }  catch   e {   return false;   }   }   } return ajaxRequest;   }    End function   The  Server-Side  PHP  Script—"serverTime.php"   18.5   E X A M P LE   1  <?php  2  3  4   ?>   E X P L A N A T I ON     Server side script to handle request  extract $_REQUEST ;  echo "Welcome,  $name!";  echo " Time now is  ",  date "h:i:s A " ,".";   1   The  PHP  server-side  file,  called  serverTime.php  is  located  in  the  server's  root  di- rectory   e.g.,  htdocs,  www,  etc.   and  will  be  executed  by  the  server.  Its  output will    18.4  Putting It All Together   817   Figure  18.9  The page as it is initially displayed.   f'-'  First  A j ax   S c r i pt   -  W i n d o ws   I n t e r n et   Explore   y0  \  C:\wamp\www\ajaxintro.html   File  Edit  View   Favorites   Tools  Help   Favorites   First Ajax Script   Y o ur   n a m e:   El   EE elcome,  El!  Time  now is  12:13:51  PM  .   Figure  18.10  Once the user starts typing,  the div box appears with the letters and    818   Chapter 18      An Introduction to Ajax  with JSON    First Ajax Script  -  Windows  Internet  Explorer   y0  \  C:\wamp\www\ajaxintro.html   File   Edit   View   Favorites   Tools   Help   Favorites   First  Ajax  Script   Your name:  Ellie   elcome,  Ellie!   Time  now  is  12:15:04  PM  .   f-  First Ajax Script  - Windows  Internet  Explorer   £   C:\wamp\www\ajaxintro.html   File   Edit   View   Favorites   Tools   Help   Favorites   ^ First  Ajax  Script   Y o ur   n a m e:   E l l i e Q u i g l ey   PS  elcome,  Ellie  Quigley!  Time  now  is  12:16:32  P M.   Figure  18.11  Each time a letter is typed, it is added to the name in the div box  while time is changing.   Figure  18.12  User types more letters, div box and server time are updated.    18.4  Putting  It All Together   819   18.4.1  Using Ajax to Retrieve Text From a File   In  Example  18.6,  we  use  Ajax  to  request  and  return  ASCII  text  from  a  file  and  display  the  response  results  in  a  div  container.  For  a  more  sophisticated  example  of  an  Ajax  pro- http:  www.dynamicdrive.com dynamicindex2 ajaxticker.htm.  gram  This  Ajax  ticker  program  adds  the  ability  to  periodically refetch  the  contents  of an  exter- nal  file.  All  source  code  is  provided.   using   text   file,   see   a   At   http:  wwwJavaScriptkit.com dhtmItutors ajaxticker index.shtmI   you   can   find   another   excellent  tutorial  on  how  to  combine  RSS,  Ajax,  and JavaScript  to  create  a  live  RSS  ticker.   Example  18.6  provides  an  Ajax  program  to  get  text  from  a  file.  The  CSS  file   Example  18.9   and  the JavaScript  file   Example  18.8   to  create  the  request  object  are  external  file.  The  text  file  is  shown  in  Example  18.7.   The  Ajax  Program—"ajaxGetText.htm"   E X A M P LE    18.6        Reading  From a  Text  File  with Ajax                 function  getText url {   var  ajaxRequest=createRequest  ;    *  Cross-browser  check;  Get  a  new XMLHttpRequest  object  *    if   ajaxRequest  !=  false {   *  If we  got  back a  request   object  create  callback  function  to  check  state  of  the  request*    ajaxRequest.onreadystatechange = function    {   if   ajaxRequest.readyState == 4   {  if   ajaxRequest.status == 200      document.getElementByld 1 data' .innerHTML=   ajaxRequest.status==0  {  ajaxRequest.responseText;   }  else {   }   }   alert 'There was  a problem with  the  request.' ;   }      End callback function   }  ajaxRequest.open "GET", url,  true ;      Initialize  the   aiaxRecruest. setRecruestHeader   ' If-Modif ied-Since ' ,       object   1   2  3   4   5    820   Chapter  18      An  Introduction  to Ajax  with  JSON    E X A M P LE      C O N T I N U E D    18.6  }    End getText    function   <span style="cursor:  pointer;  text-decoration:  underline"   onclick="getText 'ajaxtext.txt' ">   Fetch  text  from a  file                     7   8                     E X P L A N A T I ON   L  A  new  XMLHttpRequest  object,  called  ajaxRequest,  is  created   code  is  in  "ajaxRe-  2   quest.js",  Example  18.8 .  The  callback  function  handler  used  to  monitor  the  state  of  the  server.   is  defined  and  assigned   to   the  onreadystatechange  event   3  W h en   the  ready State  of  the  server  is  4,  the  request  is  complete.  If  the  HTTP  status   4   5   the  ASCII   line  8.  The  ajaxRequest.responseText  property  contains   is  OK    2 0 0  ,   the  program  proceeds.  The  getElementById    method  will  return  a  reference  to  the  div  container  named  "data"  on  text  that  was  returned.  The  innerHTML  property  will  put  that  text  in  the     con- tainer.  The  XMLHttpRequest  object's  open    method  initializes  the  object.  The  request  will  be  sent  as  an  HTTP  GET  request  to  get  data  from  a  file  called  "ajaxtext.txt".  http:  localhostJajaxtext.txt  with   When  using  Firefox  just  the  name  of  the  file  was  given.   The  request  is  sent  to  the  server.   6  7  W h en   the  user  clicks  the  underlined  text  defined  by  the  span  tag,  the  getText    function will  be  launched.  Its  argument is  the  name  of the  text  file  that will  be  pro- cessed,  shown  in  Example  18.7.  This  is  the     container  where  the  results  of  the  HTTP  request  will  be  dis- played.  See  Figure  18.14.   Internet  Explorer   the  URL  was   8   The  Text  File—"ajaxText.txt"    18.4 Putting It All Together 837   The  Ajax  Request  File—"AjaxRequest.js"   E X A M P LE    18.8    * Check browser  type and create ajax request  object   Put  this function in an external  .js file and use it for your  Ajax programs.  Fully explained in Example 18.1.  *   function  CreateRequestObject  {   var ajaxRequest;     The variable that makes Ajax possible!  try{      Opera 8.0+, Firefox,  Safari  ajaxRequest = new XHLHttpRequest  ;     Create  the object   }  catch   e {       Internet Explorer Browsers   ajaxRequest  = new ActiveXObject "Msxml2.XMLHTTP" ;   ajaxRequest  = new ActiveXObject "Microsoft.XMLHTTP" ;   t r y{   }  catch  e   {  try{  }  catch   e {  }   return false;   }   }  return ajaxRequest;   }    End function   1  2  3  4   5   6   7   8   The  CSS  File—"ajaxTextFile.css"   E X A M P LE    18.9   body{background-color:aliceblue;}  .divStyle {   margin-left:5px;  margin-right:200px;  border-style:solid;  border-color:blue;  font-size:150%;    822   Chapter  18      An  Introduction to Ajax  with JSON    '  Trying Ajax - Windows  Internet  Explorer   f  w    g   C:\wamp\www\ajaxTextl8.5.html   File   Edit   -View   Favorites   Tools   Help   Fayofites   g Trying  Ajafc'   Fetch text from a file   Once  upon  a  time  there  were  three  little  bears.   Figure  18.14  A text file is retrieved and  it contents displayed  in a div container.   18.4.2  Using Ajax to Retrieve XML from a File   XML  is  the  Extensible  Markup  Language.  Although  similar  in  structure  to  HTML,  XML  was  designed  to  transport  and  store  data, whereas  HTML was  designed  to  describe  the  lay- out  and  looks  of the  data.  With  XML you  create  markup  that  defines  the  structure  of a  doc- ument,  but  instead  of  having  predefined  tags  as  with  HTML,  you  make  your  own.  The  XML  tree  looks  similar  to  the  HTML  upside-down  document  tree,  starting with  a  root  ele- ment  at  the  top  and  branching  down  to  parents,  attributes,  children,  and  so  on.  XML  has  rules,  very XML-specific syntax rules  on  how to  create  a  "well-formed"  document.  It is not  hard  to  learn,  but  if you  are  unfamiliar  with  XML,  go  to  the  W 3C   schools  W eb   site  where  you  will   tutorial  at  http:  www.w3schools.com xml xml_tree.asp.   find  an  excellent   XML  data is  often  stored  in  external  files  as  plain  text.  The  data  in  the  XML  files  can  be  easily  exchanged  between  different programs,  applications,  and  computers.  In  this  chapter  we  are  using  Ajax  to  exchange  data  between  a  client  and  server.  In  the  previous  example  the  server  returned  a string of text  from  a simple  text  file.  In  this  example we will  use Ajax  to  get  data  from  an  XML  file  as  an  object  and  use  the  XML  DOM  to  parse  and  display  the  data.  And  finally,  at  the  end  of this  chapter,  we will  use  an  easier  technology,  called JSON,  to  make  exchanging  and  parsing  data  a  little  simpler.  In  fact JSON  is  said  to  be  rapidly  replacing  XML  because  of its  easy  lightweight  data-interchange  format.   The  XML  file  for  the  following  example,  called  "bookstore.xml",  is  found  in  Example  18.10.3  If you  are  not  familiar  with  XML,  this  file  is  a  good  example  of how  the  markup  is  structured.  The  Ajax  program   Example  18.11   makes  a  request  to  the  server  to  get  the  X ML   file.  The  server  returns  an  X ML   object,  and  the  rest  of  the  program  uses  DOM  methods  and  properties  to  parse  out  the  data  from  the  X ML   object  and  to  create  the  ele- ments  and  text  nodes  that  will  be  placed  in  an  HTML  div  container.    18.4  Putting  It All Together   823   The  XML  File   bookstore.xml    E X A M P LE    18.10            The Art of Simple Food    Alice  Waters    2 007    35.00            Moments of Being    Virginia  Woolf    19 85    14.00            Plain  Truth    Judy  Picoult    2 0 0 0    15.00            Ajax  Program   E X A M P LE    18.11        Reading  from an XML  file              1   function makeRequest url {   var httpRequest=createRequest  ;   *  Cross-browser check;  Get a new XMLHttpRequest  object  *   if  httpRequest  != false {      If we got back a request     object   httpRequest.open 1 GET 1, url,  true ;  httpRequest.setRequestHeader 1If-Modified-Since1,   'Sat,  03 Jan 2010 00:00:00GMT' ;   httpRequest.send null ;  httpRequest.onreadystatechange = function    {   getXMLContents httpRequest ;  };   2    824   Chapter  18      An  Introduction to Ajax  with JSON    E X A M P LE    18.11     C O N T I N U E D    3  function getXMLContents httpRequest   {  if   httpRequest.readyState ==4   {  if   httpRequest.status == 200   {   4  5  6   7  8   9   10   11   12   var xml = httpRequest.responseXML;  var booklist = xml.getElementsByTagName "book" ;  for  j=0; j < booklist.length; j++ {   var book=booklist[j];  var  category=book.getAttribute "category" ;  for 1=0;i<book.childNodes.length;  i++ {  switch book.childNodes[i].nodeName {   case  "title":  case  "author":  case  "price":   title=book.childNodes[i].firstChild.nodeValue;  author=book.childNodes[i].firstChild.nodeValue;   case  "published":   price=book.childNodes[i].firstChild.nodeValue;  published=book.childNodes[i].firstChild.nodeValue;   }   }    End inner for loop  var  para=document.createElement "p" ;  var  brtagl=document.createElement "br" ;  var  brtag2=document.createElement "br"   var  brtag3=document.createElement "br"   var  categoryTxt=document.createTextNode "Category:   var titleTxt=document.createTextNode "Title:  "  + title ;  var authorTxt=document.createTextNode "Author:  "+author ;  var priceTxt=document.createTextNode "Price:  "+ price ;   "+category ;   para.appendChild categoryTxt ;  para.appendChild brtagl ;  para.appendChild titleTxt ;  para.appendChild brtag2 ;  para.appendChild authorTxt  ;  para.appendChild brtag3 ;  para.appendChild priceTxt  ;  document.getElementByld 'data' .appendChild para ;  }else  {  alert 'There was a problem with the request.' ;}   }   }        18.4  Putting  It All Together   825   <span style="cursor:  pointer;  text-decoration:  underline"   onclick="makeRequest 1 http:  localhost bookstore.xml1 ">   E X A M P LE    18.11   CONTINUED        13   14   Get  book  details                    E X P L A N A T I ON   1   2   3   4   5   6   7   8   9   is  notified   that  the  server's   This  function  creates  the  XMLHttpRequest  object,  initializes  it  with  the  GET  meth- od  and  the  XML  file,  called  "bookstore.xml",  sends  the  request  to  the  server,  and  calls  the  getXMLContents    function  when  the  state  of  the  server  changes  to  4   complete .  This  function  takes  the  XMLHttpRequest  object  as  its  argument.  It  is  called  when  the  onreadystatechange  event  handler  ready State  has  changed.  This  function  checks  when  the  server  has  completed  the  request  and  fetches  the  contents  of  the  XML  file.  The  httpRequest.responseXML  property  contains  the  data  returned  from  the  XML  file  as  an  XML  document  object.  The  getElementsByTagNameO  method  gets  a  reference  to  all  the     tags  stored  as  an  array  in  the  XML  object.  Look  at  "bookstore.xml"  to  see  the  structure.  The  outer  for  loop  will  iterate  through  each  book  in  the  array  of  books,  called  booklist.  The  X ML   DOM  getAttribute    method  returns  the  value  of  an  attribute  by  its  name,  which  is  "category".  For  the  name  of  each  book,  childNodes  [i]  .nodeName,  the  switch  statement  will  use  the  nodeValue  property  to  get  the  text  for  the  title,  author,  and  so  on.  Using  the  DOM,  elements  are  created  that  will  be  inserted  in  the  div  container  on  line  14.  A  paragraph   p   and  break   br    elements  are  created  to  hold  the book values.   10  Next,  the  textNodes  are  created  that  will  be  appended  to  the  paragraph.  11  Once  all  the  text  nodes  are  created,  they  are  appended  to  the  paragraph with  break   tags  after  each  line  of  text.   12  Now,  the  new  paragraph,  built  entirely  with  DOM  methods,  is  inserted  into  the   div  container  defined  on  line  14.  X A   f i ^n  the liQi^r  r l i r f^Q  the  n n r l ^ r l i r i ^ rl  te^vt AefineA  f ur  the ^in itis tnil the  A i c iv   n r n-  1 ^    826   Chapter 18      An Introduction to Ajax  with JSON    Reading from an XML file  - Windows Interne   ,  ^   £  C:\wamp\www\ajaxtestDOM.html   File   Edit   View   Favorites   Tools   Help   Favorites   ^ Reading  from  an  XML  file   Get book  details   Category:  COOKING  Title: The Art of Simple Food  Author: Alice Waters  Price:  35.00   Category:  AUTOBIOGRAPHY  Title:  Moments  of Being  Author: Virginia Woolf  Price:  14.00   Category:  FICTION  Title: Plain Truth  Author: Judy Picouh  Price:  15.00   Figure  18.15  XML file has been  read  and  processed  by Ajax and  the  DOM.   18.4.3  Ajax and Forms   There  are  several  reasons why you  might  choose  to  use Ajax  for  forms  in your W eb   page.   1.  Faster  validation.  2.  Auto-completing  the  form  fields.  3.  Spell  checking  in  real  time.  4.  Updating  content   weather  updates,  auctions,  stock  tickers .  5.  Dynamically  updating  a  list  based  on  user  input.   W h en   creating  non-Ajax  HTML  forms,  the     tag  takes  an  ACTION  attribute  and  a  M E T H OD   attribute.  The  ACTION  attribute  is  used  to  specify  the  URL  of a  server-side  program  that  will  deal  with  form  input  after  the  submit  button  is  clicked,  and  the  M E T H OD   attribute  determines  how  the  input  will  be  sent,  either  with  the  HTTP  GET  or  POST  methods.  In  the  traditional  HTML  form,  the  form  will  have  a  submit  button  that,  when  clicked,  causes  the  browser  to  bundle  up  the  input  data  into  a  URI  encoded  query  string  consisting  of name value  pairs.  This  encoded  data will  be  sent  to  the  server- side  program  named  in  the  ACTION  attribute  of  the  form.  If  the  method  is  GET,  the    18.4  Putting  It All Together   827   message  body  in  an  HTTP  header  to  the  server.  This  POST  data  will  not  be  visible  in  the  location  box  and  is  not  limited  in  size  so  this  method  is  normally  used  to  send  data  from  a  form.  The  server-side  program   e.g.,  PHP,  ASP.NET,  CGI ,  will  then  process  the  data  and  send  back  its  response  in  a  brand  new  page  while  the  user  waits.  Example  18.12  is  a  traditional  HTML  form.   A  Traditional  HTML  Form   E X A M P LE  18.12        An  HTML  Form               Your  name:     Your phone:               l   2   3           W h en   creating  HTML  forms  with  AJAX,  the     tag  will  not  be  given  an  ACTION  or  a  M E T H OD   attribute  and  the  submit  button  will  not  be  used  to  submit  the  form  data.  Instead,  an  event  handler  will  trigger  off  the  chain  of  events  that  deal  with  the  commu- nication  between  the  browser  and  server.  Whether  using  GET  or  POST,  because  Ajax  is  making  server  requests,  the  user  will  not  have  to  wait  for  an  entire  page  to  be  returned  before  continuing  to  work  on  the  page.  The  next  examples  will  demonstrate  how  to  cre- ate  and  process  forms  with  Ajax.   The GET Method.  Example  18.13  demonstrates how to  create  an Ajax  form  using the  GET  method.  The  example  can  be  divided  into  four  parts.  First  the  program  checks  for  the  type  of browser  being  used  and  creates  the  Ajax  request  object.  The  second  part  cre- ates  the  Ajax  functions  that  will  send  a  request  to  the  server,  check  for  the  state  of  the  server,  and  when  the  server  completes  a  request,  will  handle  the  data  that  comes  back.  In  the  next  part,  the  HTML  form  is  created  with  a  div  container  to  hold  the  data  that will  come  back  from  the  server.  Finally  the  server-side  PHP  program  on  the  server  side  receives  the  form  data  from  the  server,  handles  it,  and  sends  it  back  to  the  server.  The  PHP  program  might  be  responsible  for  validating logins,  sending  database  queries,  read-   828   Chapter  18      An  Introduction to Ajax  with JSON    The  Ajax  Program  18.13   E X A M P LE        1   2  3   4    Get method Ajax  form                 function goAjax  {   var  ajaxRequest=createRequest  ;  if  ajaxRequest  != false {   ajaxRequest.onreadystatechange  =  function  {   var  textObj=document.getElementByld "message" ;  if ajaxRequest.readyState == 4 {    alert ajaxRequest.status ;  if ajaxRequest.status==200  {   textObj.innerHTML=ajaxRequest.responseText;   }  else if ajaxRequest.status == 404 {   textObj.innerHTML="Resource  unavailable";   }   }  else{   textObj.innerHTML="Error! ! " ;   }  var namevalue=  var phonevalue=   }   5   6  ajaxRequest.open "GET","http:  localhost ajaxform.php?username="+   encodeURIComponent document.getElementById "username" .value   encodeURIComponent document.getElementById "userphone" .value   namevalue+"&userphone="+phonevalue,  true ;  ajaxRequest.setRequestHeader 1If-Modified-Since1,  'Sat,  03 Jan 2010 00:00:00GMT' ;   7  ajaxRequest.send null ;   }  else{alert "Browser encountered a problem!" ;}   }     End goAjax  function              8       Your name:  <input type="text"  size=50 id=username   name='username'   >      18.4  Putting  It All Together   829   E X A M P LE    18.13    CONTINUED                     9   10           1   function   is  returned  an  XMLHttpRequest  object  from   E X P L A N A T I ON  The  goAjaxQ  the  createRe- quest    function  found  in  the  external  .js  file  called  "ajaxCreateRequest.js"  shown  in  Example  18.14.  The  CSS  style  sheet  is  in  Example  18.15.  The  onreadystate  event  handler  will  start  the  callback  function  when  the  state  of  the  server  request  changes.  The  getElementById    method  will  return  a  reference  to  the  div  container  using  its  id  called  "message".   2   3   4  W h en   the  server  has  completed  successfully,  its  response  will  be  returned  as  text.  The  innerHTML  property  contains  the  response  text  that  is  assigned  to  the  div  container  on  line  10  and  will  be  displayed  in  the  browser.   5   6   7  8   9   10   To  avoid  unexpected  requests  to  the  server,  the  encodeURIComponent  encodes  any  user-entered  parameters  that  will  be  passed  as  part  of  a  URL  The  value  typed  by  the  user  into  the  form  for  the  username  will  be  assigned  to  the  variable  namevalue.  The  XMLHttpRequest  object  is  initialized.  It  will  use  the  GET  method.  The  URL  is  a  server-side  PHP  program   Example  18.16   that  will  be  passed  parameters,  ap- pended  to  a  ?,  consisting  of  the  user's  name  and  phone  number.  An  XMLHttpRequest  is  sent  to  the  server.  The  HTML  form  starts  here.  Notice  the  ACTION  and  M E T H OD   attributes  are  NOT  specified  as  they  are  in  non-Ajax  forms.  Even  though  this  button  looks  like  a  "submit"  button,  it  is  really  an  ordinary  but- ton  with  an  onClick  event  handler  that  when  clicked,  will  start  the  goAjaxQ  func- tion.  In  non-Ajax  form  submission,  the  submit  button  normally  causes  the  con- tents  of  the  form  to  be  sent  to  the  URL  assigned  to  the  form's  ACTION  attribute.  The  div  container  will  display  the  results  that  were  returned  to  the  server  from  the  PHP  program  listed  as  a  parameter  in  the  open    method  on  line  6.    830   Chapter  18      An  Introduction to Ajax  with JSON    The  File  to  Create  an  Ajax  Request  Object   E X A M P LE    18.14    * Check browser type and create ajax request object *    function  createRequest  {   var ajaxRequest;     The variable that makes Ajax possible!   t r y{      Opera 8.0+, Firefox,  Safari  ajaxRequest = new XMLHttpRequest  ;   }  catch   e {       Internet Explorer Browsers   ajaxRequest  = new ActiveXObject "Msxml2.XMLHTTP" ;   ajaxRequest  = new ActiveXObject "Microsoft.XMLHTTP" ;   t r y{   }  catch  e   {   t r y{   }  catch   e {   return false;   }   }   return ajaxRequest;   The  CSS  Style  Sheet  File   E X A M P LE    18.15   body{background-color:blue;color:white;font-size:12 0%}  .divStyle {   background-color:lightblue;  margin-left:50px;  margin-right:lOOpx;  border-style:solid;  color:darkblue;  font-size:120%    18.4  Putting  It All Together   831   The  Server-Side  PHP  Script   E X A M P LE   <?php   18.16   extract $_REQUEST ;  if   empty $username  {   1  2  3   4   5   echo  " Please  enter your name.   ";  exit;   }  if   empty $userphone  {   echo  " Please enter your phone number.   ";  exit;   6   }  echo  "Welcome   $username .  Your phone number is    $userphone .";   ?>   E X P L A N A T I ON   1   function  extracts   This  PHP  the  data  from  a  global  associative  array  called  $_REQUEST.  It  contains  any  name value  pairs  submitted  from  the  HTML  form  and  sent  with  either  GET  or  POST  requests;  in  this  example,  the  array  contains  two  sets  of  name value  pairs:   username  =>  "Ebenezer  Scrooge"  userphone  =>  " 0 2 07   6 26   4 3 8 8"   PHP's  extract  function  creates  a  variable,  $username,  for  the  name  and  assigns  it  the  value  "Ebenezer  Scrooge"  and  another  variable  called  Suserphone  with  a  value  of  " 0 2 07   6 26   4 3 8 8 ".    This  information  was  sent  in  the  server  request  in  a  param- eter:  ?username="namevalue+"&userphone="+phonevalue.  Figure  18.16  shows  a  completed  form.  If  the  variable  is  empty   i.e.,  null ,  tell  the  user.  If the  user  didn't  enter  anything in  the  textfield,  he  or  she  will  be  sent  this  message  in  red  letters  defined  by  the     tag   see  Figure  18.17 .  The  PHP  program  exits  here.  If  the  user  doesn't  type  anything  in  the  phone  field,  he  will  get  a  message  in  red  telling  him  or  her  to  enter  his  or  her  phone  number   see  Figure  18.18 .  The  PHP  program  echo's  a  string  of  text  to  the  server.  The  server  will  respond  by  sending  the  text  to  the  Ajax  program  where  it  will  be  received   line  3  in  the  Ajax  program   and  displayed   line  4  in  the  Ajax  program .   2  3   4  5   6    832   Chapter 18      An Introduction to Ajax  with JSON    f.  Get method  Ajax form  -  Windows  Internet  Explorer   Figure  18.16  Ajax and form submission with the GET method.   C  Get method Ajax form  - Windows  Internet  Explorer   Figure  18.17  The user didn't enter his name.  PHP responded with the message in  red text.   C  Get method  Ajax form  - Windows  Internet  Explorer   lc Idlhost   Fïe  Edit  View   Favorites   Tools  Help   Favorites   g Get method Ajax form   f   intranet settings are now turned off by defaiJt.  intranet settings are less secure than internet settings.   Jck    18.4  Putting  It All Together   833   The POST Method.  In  Example  18.17,  rather  than  repeating  the  previous  example  in  its  entirety,  only  the  code  where  changes  are  made  for  the  POST  method  is  highlighted.  The  setRequestHeader  for  the  Content-type  has  been  added  and  the  sendQ  method  con- tains  the  query  string  data  that  will  be  sent  to  the  server.  The  line  controlling  caching  has  been  removed,  because  with  the  POST  method  caching  is  not  an  issue.  The  output  is  identical  to  what  is  shown  in  Figures  18.16,  18.17,  and  18.18.   E X A M P LE    18.17   request  *     *  Section of  the Ajax  Program highlighting changes  to make  a POST   ajaxRequest.onreadystatechange  =  function  {   var  textObj;  textObj =document.getElementByld "message" ;  if ajaxRequest.readyState  ==  4 {   if ajaxRequest.status==200 {   textObj.innerHTML=ajaxRequest.responseText;   else  if ajaxRequest.status  ==  404 {   textObj.innerHTML="Resource  unavailable";   }   }  else{   }   1  2  3   4   }                  textObj.innerHTML="Error!!  Firefox  request  aborted.   Status:  "+ajaxRequest.status;   var  namevalue=   var  phonevalue=   encodeURIComponent document.getElementByld "username" .value    encodeURIComponent document.getElementByld "userphone" .value    * This  is where  the code changes  for the POST method *   ajaxRequest.open "POST",  "http:  localhost ajaxform.php"   ajaxRequest.setRequestHeader "Content-type",  ajaxRequest.send "username="+namevalue+   "application x-www-form-urlencoded" ;  "&userphone="+phonevalue ;   Your name:  <input  type="text"  size=50  id=username   name=1username1    >      834   Chapter  18      An  Introduction  to Ajax  with  JSON    E X A M P LE     CONTINUED    18.17      <input  type="button"  value="submit"  onClick="ajaxFunction  ";   >                        E X P L A N A T I ON   l  W h en   the  XMLHttpRequest  object  is  initialized,  the  open    method  takes  two  pa- rameters  in  this  example:  the  HTTP  method  is  POST,  and  the  URL  is  the  name  of  the  server-side  PHP  script  that  will  process  form  input  sent  by  the  server.  The  de- fault  is  asynchronous,  true,  specified  as  a  third  parameter.   2  With  the  POST  method  another  header  is  sent  to  the  server  specifying  the  "Con-  tent-type".  Instead  of  sending  the  query  string  as  a  set  of  parameters  to  the  open    method,  they  are  sent  to  the  server  by  the  send    method.  This  is  where  the  HTML  form  starts.  There  are  no  attributes.   3   4   18.5  Ajax and JSON   W h at   is JSON?  JSON, JavaScript  Object  Notation,  like  Ajax,  is  not  a  programming  lan- guage,  but  a  subset  of JavaScript.  It  is  a  text-based  format  that  provides  an  easy  way  to  exchange  and  parse  data  over  a  network.  Although  JSON  was  originally  tied  to  Java- Script,  it is language  independent and  is  now used  by Ruby,  PHP,  C++,  Python, Java,  Perl,  and  so  on.  The  JSON  format  is  often  used  for  serialization  and  transmitting  structured  data  with  Ajax.   If you  recall,  in  Example  18.11  when  using  Ajax  and  XML,  there  was  a  lot  involved.  First,  you  had  to  understand  how  X ML   structures  its  data,  and  next  how  to  create  the  X ML   D OM   object when  the  server  returns  the  contents  of  the  XML  file,  and  finally  how  to  use  the  DOM  to  parse  the  data.  JSON  offers  a  nice  alternative  to  using  XML.  Instead  JSON  represents  data  as  an  array  or  associative  array   JavaScript  object   and  any  lan- guage  that  supports  this  representation  of  data  can  use  it.   Most  modern  browsers  are  providing  an  implementation  of  native JSON  so  that  you  can  use  parse  and  string  methods  provided  by  the  browser  to  handle  JSON  data.  For    18.5  Ajax and JSON   L i b r a r y,   j Q u e r y,   D o j o,   a nd   m o o t o o ls   t h at   s u p p o rt   J S O N.   T he   J S ON   W eb   s i te   p r o v i d es   a  s h o rt   a nd   s u c c i n ct   d i s c u s s i on   on   t he   J S ON    t e c h n o l o gy     s ee   F i g u re   1 8 . 1 9  .   G> JSON  - Mozilla  Firefox  File  Edit  View  History  Bookmarks   Tools  Help       C    O  http:  json.org    &   speical  for  in  loop  J   A  j..   Reading fro...    Q  Reading fro...    Q  Reading fro...  Q  Reading fro...   JSON   j  Q  Reading fro...   Q  Readir   835   H 0S   Introducing  JSON   Arabic Bulgarian Chinese Czech Dutch English French German Greek Hebrew Hungarian Indonesian  Italian Japanese Korean Persian Polish Portuguese Russian Slovenian Spanish Turkish Vietnamese   J S ON    JavaScript  Object Notation   is  a lightweight  data-interchange  format.  It is  easy for humans to read and write.  It is  easy for machines to parse  and generate.  It  is  based  on  a  subset  of the JavaScript Programming Language,  Standard  ECMA-262  3rd Edition  -  December  1999.  J S ON  is  a text format that is  completely language independent but uses  conventions that are familiar to  programmers  of the  C-family  of languages, including C,  C++,  C, Java,  JavaScript, Perl, Python,  and many others.  These properties make J S ON  an ideal  data-interchange  language.   J S ON  is built on two  structures:      A collection of name value pairs.  In various languages, this is realized as  an   object,  record,  struct,  dictionary,  hash table,  keyed list,  or  associative  array.      An  ordered list  of values.  In most languages,  this  is  realized  as  an array,   vector, list,  or sequence.   These  are universal data structures.  Virtually all modern programming languages  support them in one form or another.  It makes  sense that a data format that is  interchangable with programming languages  also be based on these  structures.  Figure  18.19  The JSON Web site.   object   members   pair  pair   pair   array   U  {  members  }   ,  members   string   :  value   []  [  elements  ]   ,  elements   elements   value   value  value   string  number  object   18.5.1  JSON Data Structures   1 S ON   is   b a s ed   on   t wo   d a ta   s t r u c t u r es   we   d i s c u s s ed   in   C h a p t e rs   8  a nd   9:   a r r a ys   a nd   o b j e c t s.    836   Chapter  18      An  Introduction  to Ajax  with  JSON    E X A M P LE     SAMPLE  C O D E    Example:   JavaScript  array   var friends =  [ "John",  "Jane",  "Niveeta",  "Su"  ];   Example:   JavaScript  object  literal   var soldier =  {   name:  unde f ined,  rank:  "captain",  picture:  "keeweeboy.jpg",  salary:  50000,  enlisted:  true   Table 18.5  JSON's Basic Types   Data  Type   Example   Number   String   Boolean   Array   Object   null   5,  5.435   "John  Doe",  'red'   true  or  false   [  1,2,3,4.5  ]  [ "Bob","Jim" ,"Joe" ]   {  "Name":  "John",  "Age"  :  35,  "Status":  true,     null   18.5.2  Steps to Use JSON  Create a  .jSOn File.  To   use  JSON,  the  object  literal  or  array  will  be  placed  in  a  file  named  with  a  .json  extension   see  Chapter  8  to  review  object  literals .  The  object  or  array  will  not  be  named  in  the  file.  It  would  look  like  this:    18.5  Ajax a nd   JSON   837   Create the Ajax Program.  The  Ajax  program  will  make  a  request  to  the  server  to  get  text  in  the  .json  file.  The  server  will  return  the  text  in  the  requestResponseText  prop- erty  of  the  Ajax  request  object.  Next  Ajax  must  convert  the  JSON  text  into  a JavaScript  object   or  array .  To  accomplish  this,  we  can  use  the  JavaScript  built-in  eval    function,  as  long  as  security  is  not  an  issue.  For  our  demo  it  is  not,  because  Ajax  communication  is  permitted within  this  domain where  the  page  originated,  and  therefore,  trusted.   Later  we  will  download  the  JSON  library, json2,  to  accomplish  the  same  task.    The  evalQ  function  evaluates  the  text  and  creates  aJavaScript  data  structure,  consist-  ing  of key value  pairs,  either  an  array  or  object.   var myObject = eval 1 1  + myJSONtext + '   '   ;   Now with  the  dot  notation,  we  can  get  the  values  associated  with  the  keys;  for  exam-  name  = myObject.name      object notation  color = myObject[0]      array notation   After  the  data has  been  parsed  and  stored  in  variable,  it  is  ready  to  be  displayed  in  the   browser.   Steps  for  Using  Ajax  and  a JSON  Array   E X A M P LE    18.18   1.  The JSON text  file,  "colors.json"  contains  the following array:   [  "red",  "blue",  "green",  "yellow"  ]   2.  The Ajax program requests  the  file  and evals  the  response.       Segment  from the Ajax program  function getXMLContents httpRequest   {   if   httpRequest.readyState = = 4    {  if   httpRequest.status == 200   {   var colors  = eval 1 1+httpRequest.responseText   +1 1    ;  alert colors ;      alert "I  like  "+ colors[3]    Prints  "yellow"   alert 'There was  a problem with  the  request.' ;   }  else {   }   }    838   Chapter  18      An  Introduction to Ajax  with JSON    E X A M P LE    18.18     C O N T I N U E D    3. After the eval    evaluates the string returned from the server,  it   is converted into an array and displayed below:   Steps  for  Using  Ajax  and  a JSON  Object   E X A M P LE    18.19   1.  The JSON text file,  "person.json"  contains an object literal:  { "Name":  "Joe Shmoe",  "Salary": 100000.50,  "Age": 35,  "Married": true   2.  The Ajax program requests the file and evals the response:     Segment from the Ajax program  function getXMLContents httpRequest   {  if   httpRequest.readyState ==4   {  if   httpRequest.status == 200   {   var person = eval 1 1+httpRequest.responseText +1 1    ;  var name=person.Name;  var  salary=person.Salary;  var age=person.Age;  var married=person.Married;  alert "Name:  "+name +   "\nSalary: " + salary +  "\nAge: " + age +  "\nMarried:  "+ married      ;   }  else {   }   }   alert 'There was a problem with the request.' ;    18.5  Ajax a nd  JSON   839   E X A M P LE    18.19    CONTINUED    3.  Output  after the eval  .   Name: Joe Shmoe  Salary:  100000.5  Age: 35  Married:  true   18.5.3  Putting It All Together with JSON   In  the  next  set  of  examples,  we  will  create  a JSON  text  file,  with  the  structure  of  a Java- Script  object   in  fact,  any  program  employing  hashes  or  associative  arrays  could  read  this  file ,  use  an  Ajax  program  to  request  the  file  and,  after  getting  a  response  from  the  server,  read  and  parse  the  JSON  data  with  JavaScript's  eval    function,  then  place  the  parsed  data  in  a  div  container  and  display  it   shown  in  Figure  18.20 .   The  JSON  File   ajaxCar.json    E X A M P LE    18.20   l   {  "make":"Honda Civic",   "year":2006,  "price":18000,  "owner":{   }   },  "dealer":  "SF Honda"   E X P L A N A T I ON   2   3   4   l  2   "name":"Henry  Lee",  "cellphone":  "222-222-2222",  "address":{"street":  "10 Main",   "city":  "San Francisco",  "state":  "CA"   This  is  a JSON  object  consisting  of  properties  and  their  values   key value  pairs .  The  owner  property  has  nested  properties.  If  the  object  is  named  "car",  then  to  get  the  cell  phone  number  for  the  owner,  the  dot  notation  is  used  to  separate  the  prop-   840   Chapter  18      An  Introduction  to Ajax  with  JSON    E X P L A N A T I ON      C O N T I N U E D    3   4   say   car.owner.address.state.   The  address  property  also  has  nested  property value  pairs.  To  get  the  value  of  the  state,  you  would  JSON  structure  must  be  syntactically  correct  or  the  JavaScript  eval    will  not  be  able  to  evaluate  properly,  all  strings  quoted,  curly  braces  lined  up.  It  appears  that  if  you  want  to  create  an  array  of  hashes,  the  syntax  requires  an  object  notation  rather  than  array  notation;  that  is,  use  curly  braces  on  the  outside  of  the  whole  structure,  not  [  ].   Ajax  Program  with  JSON  and  eval     E X A M P LE    18.21       Reading  from an  JSON  file        function makeRequest    {   var  httpRequest;  if   window.XMLHttpRequest   {     Mozilla,  Safari,  ...   httpRequest  =  new XMLHttpRequest  ;  if   httpRequest.overrideMimeType   {   httpRequest.overrideMimeType 1text xml1 ;   }  else if   window.ActiveXObject   {      IE   httpRequest  =  new ActiveXObject "Msxml2.XMLHTTP" ;   }   }   try {   }  catch   e   {   try {   }  catch   e   {}   }  if   !httpRequest   {   httpRequest  =  new ActiveXObject "Microsoft.XMLHTTP" ;   alert 1 Giving up  :   Cannot create an XMLHTTP instance1 ;  return  false;   }  httpRequest.onreadystatechange = function    {  httpRequest.open "GET",  "file:   C: wamp www ajaxCar.json",   getXMLContents httpRequest ;  };   true ;    *  Check  that  vou  use  the  correct  URL  for  your browser.  IE    18.5  Ajax and JSON   E X A M P LE    841     C O N T I N U E D    18.21  httpRequest.setRequestHeader 1If-Modified-Since1,  httpRequest.setRequestHeader "Content-type",   'Sat,  03 Jan 2010 00:00:00GMT1 ;   "application json" ;   httpRequest.send  ' '   ;  function getXMLContents httpRequest   {  var httpRequest;  if   httpRequest.readyState ==4   {  if   httpRequest.status == 200   {   textObj =document.getElementByld "data" ;  var carObject  = evalC '+ httpRequest.responseText     alert carObject.make ; Using the object's property  var details="";  for var property in carObject {   if   property ==  "owner" {     Nested associative   +1    1     ;      array   details += "owner name = " +  details +=  "owner cell phone =   carObject[property].name +  " ";  " carObject[property].cellphone +  " ";   }  else{   }   details += property + " = " +   carObject[property]  +  " ";   }  textObj.innerHTML=details;     Put data in document      Figure 18.20   alert 'There was a problem with the request.' ;   }  else {   }   }   }   }              Get car details          <span style="cursor: pointer;  text-decoration: underline"   onclick="makeRequest  ">   1   2  3   4   5   6   7    842   Chapter  18      An  Introduction  to Ajax  with  JSON    EXPLANATION   1   2  3   The  JavaScript  eval    function  evaluates  and or  executes  a  string  of  JavaScript  code.  First,  eval    determines  if the  argument is  a  valid  string,  i.e.,  the JSON  string  that  was  returned  from  the  server.  Then  eval     parses  the  string.  The  string  re- turned  from  the  eval    is  a JavaScript  object.  The  variable  details  will  hold  the  properties  and  values  of  the  JavaScript  object.  JavaScript's  special  for in   loop  provides  a  mechanism  for  stepping  through  all  the  properties  of  an  object.  It  iterates  through  the  carObject,  retrieving  both  properties  and  values  to  be  placed  in  the  div  container  on  line  8.   If  the  property  is  "owner",  it  has  a  nested  set  of key value  pairs  as  shown  here:   {  "make":"Honda Civic",   "year":2006,  "price":18000,  "owner":{   "name":"Henry  Lee",  "cellphone":  "222-222-2222",  "address":{"street":  "10 Main",   "city":  "San Francisco",  "state":  "CA"   }   },  "dealer":  "SF Honda"   }   as:   the  nested  property   The  special for in  loop  iterates  through  the  object's  properties.  To  get  the  value  of  a  property,  the  property is  placed  between  square  brackets   associative  array   pre- ceded  by  the  name  of  the  object.  In  a  nested  object,  the  dot  syntax  is  used  to  get  carObject  ["owner"],  ad- to  dress.street.  Each  time  through  the  loop,  a  property  and  its  value  will  be  added  to  the  details  variable  until  all  properties values  have  been  collected.  In  this  example,  the  ad- dress  was  not  included,  only  to  keep  the  program  size  smaller.  The  DOM's  innerHTML  property  will  be  assigned  all  of the  details  collected  for  the  carObject  and  placed  in  the  div  container  on  line  8,  Figure  18.20.   carObject  ["owner"],  name  or   6  W h en   the  user  clicks  this  button,  the  makeRequest    function  will  be  called  to  cre-  ate  an  Ajax  request  object  and  handle  the JSON  data   see  page  840 .  This  is  the  div  container  where  the  display  data  will  be  placed.  The  results  is  shown  in  Figure  18.20.   4   5   7    18.5  Ajax a nd   JSON   843   Reading from an JSON file  - Windows Inte   ,  ^   £  C:\wamp\www\ajaxtestJason.html   File   Edit   View   Favorites   Tools   Help   Favorites   Q Reading  from  an  J50N  file   Get  car  details  make  = Honda  Chic  year  =  2006  price  = I E 0 00  o",viler name  = Henry Lee  o",viler  cell phone  =  222-222-2222  dealer  =  SF  Honda   Figure  18.20  After reading and  parsing data from a JSON file.   18.5.4  Solving the eval   Security  Problem   Using  the JavaScript  eval    function  to  parse  Ajax  data  is  not  recommended  as  a  secure  approach  for  handling  data  coming  from  an  Ajax  request  as  it  makes  the  program  vul- nerable  to  cross-site  scripting   XSS .  There  are  a  number  of  sites  that  deal  specifically  with  supports  native  J S O N,   you  can  use  the  JSON  parseQ  method  to  take  the  place  of  eval  .  If  the  browser  doesn't support native J S O N,   there  are  public  domain  libraries  available  that  are  easy  to  download  and  use  with  no  fuss.   http:  www.blackhat.com presentations .   If  your  browser   issue4    see   this   Example  18.22  is  a  simple  test  to  see  if your  browser  supports JSON.  This  script was  executed  using  Firefox  3.5.7  and  Internet  Explorer  8.0.  Firefox  ran  the  script  without  a  problem   see  Figure  18.21 ,  whereas  Internet  Explorer  produced  an  error  that  it  didn't  recognize  "JSON"   see  Figure  18.22 .  The  problem  was  easy  to  solve  by  downloading  the json2  library  and  including  it  in  the  script,  see  Example  18.23  .   EXAMPLE  18.22           Testing native JSON support  Firefox  var jsonString =  1{"name":"Joe Shmoe",  "phone":"415-111-1111"}1;  var  employee=JSON.parse jsonString ;  alert "Name:  "  + employee.name +"\nPhone:  "+ employee.phone ;   i  2  3        844   Chapter  18      An  Introduction  to Ajax  with  JSON    EXPLANATION   1   2   3   The  string  called  jsonString  consists  of  what  will  represent  a  JavaScript  object  with  properties  and  values.  The  data  in  a  .json  file  would  not have  the  outer  single  quotes.  The JSON.parseQ  method  evaluates  the  string  and  converts  it  to  a  JavaScript  ob- ject,  the  same  way  the  JavaScript  evalQ  function  works  when  evaluating  an  ex- pression   discussed  in  "The  eval    Function"  on  page  118 .  Using  the  JavaScript  object,  we  can  get  the  name  and  phone  values  for  the  object  with  the  dot  syntax.   [ J a v a S c r i pt   A p p l i c a t i o n]     X         Name:  Joe Shir  :  »  \  Phone:415-11   ioe  1-1111   OK   Figure  18.21   JSON  support with  Firefox.   3  W i n d o ws    I n t e r n et   E x p l o r er   E r r o rs   on    t h is   w e b p a ge   m i g ht   c a u se   it   to   w o rk   i n c o r r e c t ly   To see  this message in the future,  double-dick the warning icon on the status bar.   'JSON'  Is  u n d e f i n ed  jasonparsetest. html  Code:0  URI:  file :   C i wamp www jasonparsetest. html      Always  show  this  message  for  webpage  errors   y*   Hide  details   Figure  18.22  m e t h o d.   Line:  6  Char:  1   Close   Internet  Explorer  8:  This  version  d o es   n ot   recognize  t he   JSON parse      18.5  Ajax a nd   JSON   845   Figure  18.23  After adding  the json2.js library,  Internet Explorer works fine.   into  a  JSON  string.  Go  to  http:  www.JSON.org JSON.js   Douglas  Crockford  atJSON.org  has  provided  a  set  of  routines  that  will  convert  any  JavaScript  data  type  for  a  free  download  of  the  most  current  library  for  parsing  and  stringifying JSON  objects, json2.js.  With  this  library you  can  read JSON  strings  and  write  them  to  the  server.  Example  18.24  demonstrates  how  to  use  the  json2.js  library  to  create  a  JavaScript  object  from  the  text  coming  from  the JSON  file.   The  steps  are:   1.  Make  sure  the  .json  file  is  in  the  correct  object  format.   The  MIME  type  is   "application json"  and  may  have  to  be  set  in  your  server  so  that  Firefox  does  not  read  the JSON  file  as  an  XML  file  resulting  in  a  "not  well-formed"  error.    2.  At  the  top  of your  Ajax  program  add  the     tag  src  attribute  to  the  name  of   the  JSON  library,  in  this  case  "json2.js":       ^   Tt-i  the  A lo   v  n r n f r r om   r&a A  tb  i>   in   ac   t i > v1    I  mm   the yAAT 1-fttnJ?¿>mi¿»cf  r V hi    846   Chapter  18      An  Introduction to Ajax  with JSON    Jason  and  Ajax  Using JSON  Library   EXAMPLE  18.24   1       * Add the src attribute to your Ajax program to include the   json2.js  libaray  Code for creating the XMLHttpRequest object is not included  here.  You can find it in Example 18.1.   *    2  function getXMLContents httpRequest   {  if   httpRequest.readyState ==4   {  if   httpRequest.status == 200   {   3  4  5   textObj =document.getElementByld "data" ;  var jasonString = httpRequest.responseText;  alert jasonString ;  var  carObject=JSON.parse jasonString ;  var details="";  for var property in carObject {      see Figure 18.24.   if   property ==  "owner" {   details += "owner name = " +  details += "owner cell phone = "  +   carObject[property].name +  " ";   carObject[property].cellphone +  " ";   }  else{   }   details += property + " = " +  carObject[property]  + " ";   } textObj.innerHTML=details;      see Figure 18.25.   alert 'There was a problem with the request.' ;   }  else {   }   }             6   7   Get car details             <span style="cursor: pointer;  text-decoration: underline"   onclick="makeRequest 1ajaxCar.json" ">    18.5  Ajax and JSON   847   Figure  18.24  The JSON string.    848   Chapter  18      An  Introduction to Ajax  with JSON    I2  Reading from  an JSON file  - Windows  Internet  Explorer   ,        ffi  c : \wamp\www\ajaxCarJasonLib. html   File  Edit  View   Favorites   Tools  Help   Favorites   Reading from an JSON file   Get  car  details  make  = Honda  Chic  year  =  2006  price  =  18000  owner name  = Henry Lee  owner  cell phone  = 222-222-2222  dealer  =  SF  Honda   Figure  18.25  After parsing the JSON string.   18.6  Debugging  Ajax with  Firebug   Firebug   see  Figure  18.26   is  a  Firefox  extension  that  lets  you  debug  and  profile  your  Ajax,  HTML,  CSS,  JavaScript,  and  D OM   applications  by  using  tabbed  browsing  and  a  console  for  errors  and  log  messages.  Firebug  appears  either  as  a  separate  window  or  as  a  small  panel  at  the  bottom  of  your  browser.  The  FireBug  console  can  log  all  Ajax  requests  live,  and  allows  you  to  inspect  the  responses  that  are  normally  invisible.  You  can  see  the  value  of  the  XMLHttpRequest  object,  the  server's  status,  the  readyState,  and  so  on.  and  with  the  Script  debugger  step  through  the  your  program  line  by  line  or  stop  at  specified  breakpoints  watching  the  changes  in  real  time.  Firebug's  inspectors  allow  you  to  see  the  CSS  rules  and  watch  DOM  nodes  as  they  are  being  created,  modified,  and  removed  by JavaScript  in  real  time.  Firebug's  Script  tab  contains  a  powerful  debugger  that  lets  you  pause JavaScript  execution  on  any  line.  You  can  then  step  forward  line-by- line  to  analyze  how  the  state  of  the  program  changes  in  real  time.  Firebug  also  lets  you  specify  the  circumstances  under  which  a  breakpoint  is  triggered  and  lets  you  browse  code  as  well  as  edit  it.    18.6  Debugging Ajax with Firebug   849   O  Firebug  -  Web  Development  Evolved  -  Mozilla  Firefox  I  File   Bookmarks   History   Tools   View   Help   Edit   e  x,     i  H  H  f  li   Û   "  1    ä JT    firebug      html   0  file:  ...st.html   j  file:  ...st.html   file:  ...st.html   file:  ...st.html  Q  file:  ...st.html   j  file:  ...St.html   Firebu..   " H]   H  +1   -  Firebug w eb   d e v e l o p m e nt   e v o l v ed   Inspect  1  window   Console   HTML   CSS   Script   DOM   Net   k   E   Comments  El  ImageBubble  El  Labeled In put  S  RoundedBox  B  Timeline   cu rren tBeg inTim e  cu rrentDirection  currentlnterval  currentParams  currentProgress  currentTimeline   B  dispatch FrameEvent   prototype   B  dumpError   Done   Obj ect com m entTem plate=Ofcj ect com m entReq u ests=Object  Object  Object  Object  Object currentDi recti on=1  currentlnterval=0  0  l  0   f u n c t i o n     Object  f u n c t i o n      n   Q   Q   Options  T   A   \1  \1   V   on    Click  the  tabs  above  to  see  Screenshots  of each.    Firebug  integrates with  Firefox to  put  a  wealth  of web  development  tools  at  your  fingertips  while  you  browse.  You  can  edit,  debug,  and  monitor  CSS,  HTML,  and  JavaScript  live  in  any web  page.  Figure  18.26  The Firebug Web site.   Install  Firebug  from  addons.mozilla.org   Firebug  Evolved:   Future  a wl   Past  Releases  f or   n e w er   ill'I  oliler  Firefox    850   Chapter  18      An  Introduction to Ajax  with JSON    If  you  want  to  test  your  pages  in  Internet  Explorer,  Opera,  and  Safari,  the  solution  is  Firebug  Lite,  a JavaScript  file  you  can  insert  into  your  pages  to  simulate  some  Firebug  features  in  browsers  that  are  not  named  Firefox.  Firebug  Lite  creates  the  variable  "fire- bug"  and  doesn't  affect  or  interfere  with  HTML  elements  that  aren't  created  by  itself.  Go  to  http:  getfirebug.com   for  more   information.   Figure  18.27  shows  Firebug  in  its  own  window  with  breakpoints.  The  yellow  arrow  on  the  left  is  the  line  that  is  currently  executing.  The  problem:  Firefox  returns  an  HTTP  status  of 0  instead  of 200.  By placing  the  cursor  on  the  status  variable,  Firebug will  show  that  the  value  is  0.  The  pane  at  the  bottom  of the  Firebug window  monitors  the  value  of  variables,  breakpoints  and  the  state  of  the  program's  stack.  The  little  blue  arrow  to  the  left  of the  Console  tab  lets you  step  through  the  program  one  line  at  a  time.  The  red  dots  to  the  left  of  the  program  are  breakpoints  obtained  simply  by  clicking  on  a  line  number.  Firebug  comes  with  full  documentation  and  there  are  a  number  of  tutorials  on  the  W eb  to  help  you  understand  how  to  use  it most  effectively.  For  an  excellent  video  demonstra- tion  on  using  this  debugger  with  Ajax,  see  "Introduction  to  Debugging  AJAX  Applica- tion  with  Firebug"  on  YouTube  at  http:  www.youtube.com watch?v=W4jXAaEMp2M   see  Figure  18.28 .   > Get method  Ajax form  - Mozilla  Firefox  Tools   Bookmarks   History   View   Edit   I  File   Help   ^ P     "   C       £¿1'   Q   file:   C: wamp www ajaxGETform.html   ü -  l  lä   A  [fro...     FirebugWiki           Reading Pro...    ma YouTube -1...     Help:Conte...     Ajax Form       file:  ...I.html   Q   file:  ...!.html   J   file:  ...I.I   T  Ü   Console   HTML   CSS      S c r i p t"   all  -   ajaxGETform.html  -    55   a j ax Re que s t.   o nr  e a d y st  at e c h a n ge   =   f une t- i on       {   t e x t O bj   ;   v ar   t e xt  Ob j = document-.  get-Element-Eyld    " m e s s a g e"     ;  a l e r t   " g ot    h e r e " + aj   a x R e q u e s t . r e a d y S t a t e  ;   i f   a j a x R e q u e s t . r e a d y S t a te   ==   4  {  a l e r t   aj   a x R e q u e s t . s t a t u s  ;   i  f   aj   a x R e q u e s t . s t a t u s = = 2 0 0  {   a l e r t   aj   a x R e q u e s t . s t a t u s T e x t  ;   in      > . & . [  ?   I   t e x t O b j . i n n e r H T H L = a j a x R e q u e s t . r e s p o n s e T e x t;   e l se    i f   a j a x R e q u e s t . s t a t us   ==   4 0 4  {    18.6  Debugging Ajax with Firebug   851   Y o u T u be   -  I n t r o d u c t i on   to  D e b u g g i ng   AJAX  A p p l i c a t i on   w i th   F i r e b ug   -  M o z i l la   F i r e f ox   File  Edit  View  History  Bookmarks   Tools  Help   fl^S      X   t ii    GE   http:  www.youtube.com watch7vMA 4jXAaEMp2M   A  Reading fro...  Q  Reading fro...  j   Reading fro...     Reading fro...  Q  Reading fro...  Q  Reading fro...     Reading fro...   You   m  YourselfTl   H o me    V i d e os    C h a n n e ls    S h o ws   Introduction to  Debugging AJAX Application with  Firebug       Figure  18.28  A video to teach you how to use Firebug.   18.6.1  Basic Instructions for Using Firefox   Step  1.   From  the  Firefox  browser  window  where  your  program  output  is  displayed,  Go  to  the  Tools  m e nu   in  your  browser  m e nu   bar.  Under  Add-ons,  click  on  Firebug  and  a  new  window  will  pop  up.  Click  Open  Firebug.   Step  2.  T he   Firebug  screen  will  be  split  in  two  parts:  the  upper  half will  be  the  web  page  you  are  displaying  and  the  lower  half  will  be  Firebug  displaying  the  code  behind  the  W eb   page  you  are  watching.  By  selecting  the  feature  of  the  program  you  want  to  c h e ck    i.e.,  H T M L,  JavaScript,  the  D O M,   and  the  N E T   you  can  scroll  through  the  program  code  looking  for  that.   Step  3.  Click  on  the  different  sections  of  the  site   always  on  the  bottom  half  of  the  screen   and  on  top  notice  h ow   the  area you  clicked  is  highlighted.  That  will    852   Chapter  18      An  Introduction to Ajax  with JSON    DOM  tree, and check to see what is happening on the network.  There are more  features  than  can  be  covered  in  this  text,  but  the  Firebug  documentation  and  online  help  are  excellent  if you  want  to  use  this  tool  to  help  you  identify  the  bugs  in  your  program.   18.6.2  What You Should Know  This  chapter  focused  on  Ajax,  making  asynchronous  server  requests  using JavaScript.  The  main  idea  was  that  the  browser  fetched  small  pieces  of  content  from  the  server  bypassing the  normal  request response  cycle.  Rather, Ajax represents  a communications  layer  allowing  a  page  to  be  updated  without interrupting  the  user's  interaction  with  the  page.  After  studying  this  chapter,  you  should  understand:   1.  What  Ajax  stands  for.  2.  Why  use  Ajax.  3.  What  asynchronous  means.  4.  How  to  create  an  XMLHttpRequest  object.  5.  How  to  handle  browser  differences.  6.  How  to  initialize  the  XMLHttpRequest  object.  7.  How  to  send  a  request  to  the  server.  8.  How  to  check  the  state  of  the  server  request.  9.  How  to  get  the  response  from  the  server.  10.  How  to  get  and  display  the  contents  of a  text  file.  11.  How  to  get  and  parse  the  contents  of an  XML  file.  12.  How  to  handle  GET  and  POST  requests.  13.  How  to  use  the  DOM  and  an  XML  object.  14.  The  advantages  of using JSON.  15.  How  to  get  and  parse JSON  data.  16.  How  to  get  and  install  the json2  library.  17.  What  Firebug  is  used  for.    Exercises   853   E x e r c i s es   1.  Create  an  Ajax  program  that  reads  text  from  a  simple  text  file  and  displays  the   output  in  an  alert  box.   2.  Using  the  Ajax  program  you  just  completed,  add  some  checks  to  monitor  the   state  of  the  server  by  displaying  the  readyState  values  as  they  change.   3.  Create  a  form  text  box  and  two  radio  buttons.  Ask  the  user  for  his  or  her  name  and  to  check  one  of  the  radio  buttons,  either  "male"  or  "female".  Use  the  POST  method  and  send  the  form  data  to  a  server-side  script  such  as  PHP  or  ASP.NET.  Return  the  information  and  display  it  in  a  yellow  div  container.   4.  Convert  the  "bookstore.xml"  file  into  a JSON  file.  Use  an  Ajax  program  to  read   from  the JSON  file  and  parse  its  data.  Download  the json2  library  and  use  it.   5.  Install  Firebug  or  Firebug  Lite  and  use  it  to  examine  one  of  the  Ajax  programs   you  have  just  completed.    Index   Symbols  &   ampersand    bitwise  AND    &    operator,  110,  1 1 1 - 12  logical  AND    & &    operator,  1 0 1 -3       angle  brackets    in  bitwise  shift  operators,  1 1 0 - 12  in  comparison  operators,  9 5 - 9 6,   9 8 - 1 00  greater-than   >   operator,  95,  98,  99  greater-than  or  equal-to   >=   operator,  96,   left  shift    «    operator,  1 1 0 - 12  less-than   <   operator,  96,  98,  99  less-than  or  equal-to   <=   operator,  96,  98,   98,  99   99   right  shift    »    operator,  1 1 0 - 12  zero-fill  right  shift   >>>   operator,  1 1 0 - 12   *   asterisk   as  multiplication  operator,  88  \   backslash   and  regular  expressions,  733,   A   bitwise  XOR  operator ,  110,  1 1 1 - 12  {}   curly  braces   in  function  statements,  144,   7 3 4 , 7 35   145   =   equal  sign    as  assignment  operator,  84,  9 0 - 91  in  comparison  operators,  9 5 - 98  equal-to   ==   operator,  41,  58,  9 6 - 97   t^    i   n^    i i7   A      forward  slash    as  division  operator,  88  in  regular  expressions,  717,  720   !   logical  NOT  operator ,  101,  1 0 5 -6  -   minus  sign    auto-decrement   —   operator,  9 1 - 94  bitwise  NOT   -   operator ,  110,  1 1 1 - 12  as  subtraction  operator,  88   I  OR  operator,  bitwise ,  110,  1 1 1 - 12  II   OR  operator,  logical ,  101,  1 0 3 -5       parentheses    following  method  names,  13,  38,  180,  333  in  function  statements,  144,  146,  156,  518  and  operator  precedence,  84,  85  and  regular  expressions,  736,  761,  762,   7 7 2 - 7 3,   7 7 7 - 8 0,   781,  790   +   plus  sign    as  addition  operator,  88  auto-increment   ++   operator,  9 1 - 94  as  concatenation  operator,  66,  94—95   "   quote  marks,  double ,  54  '   quote  marks,  single ,  54  []   square  brackets   for  notation,  213,  216,   2 2 2 - 2 3,   353    856   accessKey  property   checkbox  object,  396  password  object,  378  radio  object,  393  text  object,  373  textarea  object,  382   acos    method,  Math  object,  242  action  HTML     tag  attribute,  335,  356,   8 2 6 , 8 27   action  property, forms  object,  349  ActiveX,  280-82,  800  addEventListener    method,  event  model,  6 6 8 - 69   in  W 3C   DOM   Ajax   Asynchronous JavaScript  and  XML    defined,  5 - 6,   797  existing  application  examples,  6-7,  797-98  overview,  5-7,  797  PHP  server-side  script  example,  8 1 3 - 18  reasons  for  using  with  forms,  8 2 6 - 34  retrieving  text  from  file  example,  8 1 9 - 22  retrieving  XML  from  file  example,  8 2 2 - 26  role  in Web  page  cycle,  6  role  of  XMLHttpRequest  object,  8 0 0 - 8 10  steps  in  creating  communications,  799-811   alert    method,  window  object,  73-76,  286  alink  HTML     tag  attribute,  329  alinkColor  property,  document  object,  330  alt  property   checkbox  object,  396  password  object,  378  radio  object,  393  text  object,  373   altKey  property,  event  object,  501,  502  anchorO  method,  String  object,  251  AND  operators   bitwise   & ,  110,  111-12  logical    & &  ,   101-3   angle  brackets        in  comparison  operators,  95-96,  9 8 - 1 00  greater-than   >   operator,  95,  98,  99   Index   animation,  JavaScript,  4 4 9 - 52  appCodeName  property,  navigator  object,  273  appendChildQ  DOM  method,  615,  630,  644  apply    property,  Function  object,  265  appName  property,  navigator  object,  273  appVersion  property,  navigator  object,  273     tag,  414,  424  arguments,  passing  to  functions,  146-48  arithmetic  operators,  8 8 - 89  ArrayO  constructor,  177,  214-16,  218,  219,   220   array  literals,  2 1 6 - 17  arrays   associative,  213,  214,  2 2 1 - 23  creating  by  using  literal  notation,  2 1 6 - 17  creating  by  using  new  keyword,  2 1 4 - 16  length  property,  219,  220  methods,  2 2 7 - 33  nested,  2 2 3 - 27  numeric  compared  with  associative,  213—   14   overview,  2 1 3 - 14  populating,  2 1 7 - 19  properties,  2 1 9 - 21  style  sheets  in,  5 8 5 - 88  two-dimensional,  2 2 3 - 25  types,  213   asin    method,  Math  object,  242  assignment  operator   = ,  84,  9 0 - 91  assignment  statements,  84  associative  arrays,  213,  214,  2 2 1 - 23  associativity,  operator,  8 4 - 88  asterisk   *   as  multiplication  operator,  88  Asynchronous JavaScript  and  XML.  5ee  Ajax    Asynchronous JavaScript  and  XML    atan    method,  Math  object,  242  atanlQ  method,  Math  object,  242  Attribute  DOM  object,  defined,  613  attribute  nodes,  DOM,  defined,  614  attributes,  HTML     tag,  3 6 - 37    Index   857   availTop  property,  screen  object,  3 23  availWidth  property,  screen  object,  3 23   B  back    method,  history  object,  3 19  background  HTML     background-attachment  CSS  property,   tag  attribute,  3 29   533,   5 44   background-color  CSS  property,  533,  536  background-image  CSS  property,  533,  5 44  background-position  CSS  property,  533,  background-repeat  CSS  property,  533,  5 44  backgrounds,  in  CSS,  533,  5 4 4 - 46  backslash   \   and  regular  expressions,  733,   5 44   7 3 4 , 7 35   behavior,  role  in  W eb   page  design,  10  bgcolor  HTML     tag  attribute,  3 29  bgColor  property,  document  object,  3 30  big    method,  String  object,  2 51  binary  number  system,  109  bit,  defined,  109  bitwise  AND    &  ,   110,  1 1 1 - 12  bitwise  NOT   - ,  110,  1 1 1 - 12  bitwise  operators,  1 0 9 - 12  bitwise  OR    ,  110,  1 1 1 - 12  bitwise  X OR    A ,   110,  1 1 1 - 12  blink    method,  String  object,  2 51  blog  entries,  adding,  6 3 9 - 45  blur    event  method,  463,  4 7 0 - 71  blur    method   checkbox  object,  3 97  frame  object,  3 08  password  object,  3 79  radio  object,  3 93  select  object,  3 86  text  object,  3 74  textarea  object,  3 82  window  object,  2 86      tag,  HTML   attributes  defining  document  object,  3 29   bold    method,  String  object,  2 52  Boolean  data  type,  5 6 - 5 7,   63,  1 1 2 - 1 9.   See   also  comparison  operators   547   function,   image  object,  4 17   BooleanO  1 1 3 - 14  Boolean  object,  246,  2 6 3 - 64  border  property,  border-bottom  CSS  property,  534,  547  border-bottom-width  CSS  property,  534,  border-color  CSS  property,  534,  547  border-left  CSS  property,  534,  547  border-left-width  CSS  property,  534,  5 48  border-right  CSS  property,  534,  5 48  border-right-width  CSS  property,  534,  5 48  border-style  CSS  property,  534,  5 48  border-top  CSS  property,  534,  5 48  border-top-width  CSS  property,  534,  5 48  border-width  CSS  property,  534,  5 48  borders,  in  Cascading  Style  Sheets,  5 3 4 - 3 5,   5 4 7 - 49   573   bottom  property,  in  positioning  CSS  elements,   break  statement,  1 3 6 - 37  Browser  Object  Model   BOM    compared  with  Document  Object  Model    DOM ,  2 7 1 - 72   defined,  2 71  hierarchy,  2 71  window  object,  73,  179,  2 8 5 - 87   browser  sniffers,  1 5 - 1 6,   2 7 6 - 78  Browser  Wars,  12  BrowserDetect  browsers.  See  also  Firefox;  Internet  Explorer;   object,   111   Netscape;  Opera  browser;  Safari   cache  issue,  8 1 0 - 11  CSS-enhanced,  5 2 8 - 29  dividing  window  into  frames,  3 0 3 - 14  DOM  inspectors,  621,  6 22  executing  JavaScript  programs,  3 0 - 33  interpreters,  15  invoking  error  consoles,  41  in   1  c:   no    1   1    858   Index   browsers   Continued    passing  events  to  JavaScript  functions,   5 0 5 -8   sniffers  for,  1 5 - 1 6,   2 7 6 - 78  support  for  DOM  specification,  13  support  for  JavaScript  versions,  1 6 - 17   bubbles  property,  event  object,  502,  510,  511,   679   bubbling,  500,  6 6 2 - 68  button,  HTML     tag  element.  See  also   radio,  HTML     tag  element   attributes,  3 37  description,  3 3 7,   3 53  properties,  3 53   button  object.  See  also  radio  object   event  handlers,  4 83  and  this  keyword,  4 8 4 - 85  as  triggering  device,  3 6 7 - 68   button  property   event  object,  501,  5 02  forms  object,  3 4 8,   3 49   byte,  defined,  109  c  call    property,  Function  object,  2 65  callback  functions,  8 0 8 -9  Camino  browser,  13,  14  cancelable  property,  event  object,  502,  679  cancelBubble  property,   event  object,   5 0 1 , 6 6 5 - 68   capturing,  500,  6 6 2 - 68  Cascading  Style  Sheets   CSS    absolute  positioning  of  elements,  5 7 3 - 79  and  backgrounds,  533,  5 4 4 - 46  and  borders,  5 3 4 - 3 5,   5 4 7 - 49  and  colors,  533,  5 3 6 - 38  comments  in,  530  common  properties,  5 3 2 - 49  defining,  5 5 0 - 54  embedded,  5 5 0 - 53   TO   ID  selectors,  5 6 4 - 65  and  images,  5 4 4 - 46  inline,  550,  5 5 3 - 54  and  margins,  5 3 4 - 3 5,   5 4 7 - 49  multiple,  in  arrays,  5 8 5 - 88  order  of  precedence,  5 58  overview,  5 2 7 - 28  positioning  elements  and  layers,  5 7 2 - 84  program  structure,  5 3 0 - 32  role  of  grouping,  5 3 1 - 32  role  of JavaScript,  5 8 5 - 6 08  role  of     tag,  5 6 6 - 72  rules  for,  5 2 9 - 30  style  classes  for,  5 5 8 - 62  text  properties,  5 3 3 - 3 4,   5 4 2 - 44  types,  5 5 0 - 54  units  of  measurement,  5 3 5 - 36   case  sensitivity,  in JavaScript,  33,  177,  517  case  statements.  5ee  if  else  if statements  catch  statement,  800.  See  also  try catch   statements   ccsRules  array,  W 3 C,   585  ceil    method,  Math  object,  242,  2 44  Champeon,  Steve,  6 83  character  class,  in  regular  expressions,  7 3 8 - 41  characters.  5ee  metacharacters  charAt    method,  String  object,  253,  257,  2 58  charCode  property,  event  object,  502,  5 13  charset  property,  checkbox,  HTML      links  object,  4 19   tag  element   attributes,  3 37  description,  337,  3 53  properties,  3 53   checkbox   object   event  handlers,  4 83  JavaScript  code  example,  3 9 7 - 4 00  in  JavaScript  hierarchy,  3 96  methods,  3 97  overview,  3 95  properties,  3 96    Index   859   Chrome.  See  Google  Chrome  circle  shape,  image  map,  4 25  class  attributes,  5 5 8 - 5 9,   5 62  class  HTML     tag  attribute,  566,  5 6 8 - 69  class  properties,  RegExp  object,  724,  725  class  selectors,  558,  562,  563  classes   defined,  182  defining  for  styles,  5 5 8 - 60  functions  as,  182  in  object-oriented  languages,  196  simulated,  extending  with  prototypes,  196  className  property,  as  HTML  attribute,  5 9 8-  6 0 1 , 6 27   clear  CSS  property,  5 34  clear    method,  document  object,  3 33  clearlntervalO   method   frame  object,  3 08  window  object,  2 86  method   clearTimeoutO   frame  object,  3 08  window  object,  2 86   click  event.  See  onClick  event  handler  click    event  method,  4 63  click    method   checkbox  object,  3 97  radio  object,  3 93   client-side JavaScript,  defined,  2  clientX  property,  event  object,  501,  502,  5 08  clientY  property,  event  object,  501,  502,  5 08  clip  property,  in  positioning  CSS  elements,  573  cloneNodeO  D OM   method,  615,  630,  6 4 8 - 53  cloning  nodes,  6 4 8 - 53  close    method   document  object,  3 33  window  object,  2 86   closed  property,  window  object,  2 85  closing  windows,  287,  2 90  closures,  1 5 8 - 61  color  CSS  property,  533,  536   in  Cascading  Style  Sheets,  530  in  JavaScript,  3 5,   4 7 - 49   comparison  operators   equal-to   ==   operator,  41,  58,  9 6 - 97  greater-than   >   operator,  95,  98,  99  greater-than  or  equal-to   >=   operator,  96,   identical-to   ===   operator,  96,  97  less-than   <   operator,  96,  98,  99  less-than  or  equal-to   <=   operator,  96,  98,   98,  99   99   not-equal-to   !=   operator,  95  not-identical-to   !==   operator,  96,  97   compile-time  errors,  40  complete  property,  composite  data  types,  defined,  59  concat    method   image  object,  4 17   arrays,  111,  2 28  String  object,  2 53   concatenating   plus-sign   +   operator,  66,  9 4 - 95  strings,  37,  56  strings  and  variables  together,  6 6 - 67   conditional  constructs   if   1 2 4 - 27   if else,  if else  overview,  1 2 3 - 24  switch,   1 2 8 - 31   1 2 7 - 28   conditional  operator,  1 0 8 - 9,   1 2 6 - 27  confirmO  method,  window  object,  7 8 - 8 0,   2 86  const  keyword,  6 7 - 69  constants,  6 7 - 69  constructor   property   Array  object,  219,  2 20  defined,  196,  2 04   constructors   built-in,  177  creating  objects  with,  1 7 7 - 78  defined,  177  FunctionO   constructor,  2 64    860   Index   controls,  form,  programming,  3 7 2 - 4 01  converting  data  types,  62,  63,  6 4 - 6 5,   1 1 2 - 19  cookie  property,  document  object,  3 3 0,   7 0 1 -4  cookies   assigning  attributes,  7 0 2 -4  attribute  overview,  6 9 9 - 7 01  creating  with  JavaScript,  7 0 4 -8  defined,  6 95  deleting  by  setting  expiration  date,  7 1 0 - 13  deleting  by  using  browser  to  remove  from   hard  drive,  713  expiration  dates,  700  on  Firefox,  697  on  Internet  Explorer,  697,  6 98  limiting  to  local  browsers,  6 9 8 - 99  on  Opera,  6 98  origin,  6 95  overview,  6 9 5 - 98  retrieving  from  server,  7 0 8 - 10  session  compared  with  persistent,  6 9 5 - 96   core  objects   arrays  as,  2 1 3 - 33  Boolean  object,  246,  2 6 3 - 64  Date  object,  2 3 4 - 41  Function  object,  246,  2 6 5 - 66  Math  object,  2 4 1 - 46  Number  object,  246,  247,  2 5 9 - 63  overview,  2 13  String  object,  246,  2 4 7 - 59  wrapper  objects,  2 4 6 - 64   cos    method,  Math  object,  2 42  Crawford,  Douglas,  159  createElementQ  DOM  method,  6 3 4 - 3 5,   6 44  credit  card  numbers,  validating,  7 8 3 - 90  CSS.  5ee  Cascading  Style  Sheets   CSS   ctrlKey  property,  event  object,  501,  502  curly  braces    { }    in  function  statements,  144,   145   current  property,  history  object,  3 19  currentTarget  property,  event  object,  502,  679   composite,  59  converting,  62,  63,  6 4 - 6 5,   1 1 2 - 19  JavaScript  compared  with  Java,  2 -3  numeric,  5 3 - 54  overview,  53  primitive,  5 3 - 59  string,  5 4 - 56  constructor,   177   Date    Date  object   customizing  with  prototype  property,   2 4 0 - 41   manipulating  dates  and  times,  2 3 8 - 40  methods,  2 3 5 - 38  overview,  2 3 4 - 35   debugging   function  errors,  1 6 6 - 68  tools  for,  4 1 - 46  types  of  errors,  4 0 - 41  using  Firefox  tools,  4 1 - 44  using  Internet  Explorer  tools,  4 4 - 45  usingJavaScript:  URL  protocol,  using  try catch  and   46  throw  exception   handlers,  1 6 8 - 72   decimal  number  system,  109  declaration  blocks,  in  style  sheet  rules,   defaultStatus  property,  window  object,   5 2 9 - 3 0,   531,  532   declaring  variables,  6 0 - 62  default  shape,  image  map,  4 25  defaultChecked   property  checkbox  object,  3 96  radio  object,  3 93   2 85  defaultValue   property   password  object,  3 78  text  object,  3 73  textarea  object,  3 82   delete  operator,  120  derived  classes.  5ee  subclasses  description   property    Index   disabled   property   elements  object,  3 50  links  object,  4 19  select  object,  3 85  textarea  object,  3 82   display  property,  in  positioning  CSS   elements,  573      containers,  547,  5 7 9 - 8 0,   581,  5 9 6 - 9 8,   6 58   Document  DOM  object,  defined,  6 13  document   object  defined,  3 28  JavaScript  hierarchy,  3 2 8 - 32  list  of  HTML     tag  attributes,  3 29  methods,  3 3 3 - 34  overview,  3 29  properties,  3 30  properties  in JavaScript  examples,  3 3 1 - 33  as  property  of  window  object,  3 29  role  in  H T ML   documents,  3 2 9 - 34   Document  Object  Model   DOM .  See  also   Legacy  DOM,  defined;  W 3C   D OM   Document  Object  Model    browser  support  for,  13  compared  with  Browser  Object  Model    BOM ,  2 7 1 - 72   defined,  13,  6 13  and JavaScript  objects,  13  Level  1,  13,  14  Level  2,  13,  14  overview,  1 3 - 15  role  of W 3 C,   13  tree  structure,  1 3 - 1 4,   15   document   property   frame  object,  3 08  window  object,  2 85   DOM.  See  Document  Object  Model    D O M  ;   Legacy  DOM,  defined;  W 3C   D OM   Document  Object  Model    DOM  inspectors,  6 2 1 - 22   861   double  words,  defined,  109  do while  drop-down  menus   1 3 3 - 34   loop,   dynamics,  6 0 1 -6  programming,  3 8 5 - 92   dwords,  defined,  109  Dynamic  HTML   DHTML ,  585   E  E  property,  Math  object,  2 41  Eclipse  IDE,  29  ECMAScript,  1 2 - 1 3,   17  Eich,  Brendan,  1,  17,  18  Element  DOM  object,  defined,  6 13  element  nodes,  DOM,  defined,  6 14  elements,  form,  programming,  3 7 2 - 4 01  elements  property,  forms  object,  3 49  e-mail  addresses   preliminary  HTML  form  validation,  4 0 5 -7  using  regular  expressions  in  HTML  form   validation,  7 8 1 - 83   embedded  style  sheets,  5 5 0 - 53  enabledPlugin  property,  mimeType  object,  2 83  encoding  property,  forms  object,  3 49  equal  sign   =    as  assignment  operator,  84,  9 0 - 91  in  comparison  operators,  9 5 - 98  equal-to   ==   operator,  41,  58,  9 6 - 97  identical-to   ===   operator,  96,  97  not-equal-to   !=   operator,  95  not-identical-to   !==   operator,  96,  97  and  operator  precedence,  84,  85   equality  operators.  See  comparison  operators  errors,  types  of,  4 0 - 4 1.   See  also  debugging  escape    built-in  function,  6 9 9 - 7 0 0,   7 0 2 -4  escape  sequences,  for  strings,  5 4 - 56  European  Computer  Manufacturers   Association   ECMA ,  1 2 - 13   evalO  function,  1 1 8 - 1 9,   8 4 3 - 48  event  handlers   „„      X J T l k  n    „f  AC.fi.  ^Q   A    862   Index   event  handlers   Continued    creating  rollovers,  4 3 2,   4 7 6 - 78  for  form  events,  4 8 2 - 96  inline  model,  4 5 5 - 6 5,   6 61  for  link  events,  4 8 1 - 82  list,  with  uses,  4 5 8 - 59  overview,  4 55  registering  events,  4 5 6 - 5 7,   4 5 9,   460,  6 7 0-  return  values,  4 6 1 - 62  role  in  using JavaScript  to  submit  forms,   73   3 5 9 - 65   scripting  model,  4 5 5,   5 1 7 - 2 3,   6 6 1 - 62  setting  up,  4 5 9 - 61  syntax,  4 5 6 - 57  triggered  by  mouse,  4 7 4 - 81  W 3C   DOM  model,  6 6 2 - 81  event  handling,  defined,  4 56  event  listeners   adding,  6 6 8 - 70  Internet  Explorer  registration  model,   6 7 6 - 78   multiple,  adding,  6 7 0 - 73  removing,  6 7 3 - 76   event  methods,  compared  with  H T ML   event   handlers,  4 6 2 - 6 5,   4 9 6,   4 9 7 - 99   event  object   browser  differences,  5 0 0 - 5 03  overview,  4 9 9 - 5 00  properties,  Firefox,  5 0 2 -3  properties,  Internet  Explorer,  5 0 1 -2   eventPhase  property,  event  object,  502,  679  events   affecting  windows  and  frames,  4 6 5 - 74  bubbling  and  capturing,  500,  6 6 2 - 68  calling  functions  from,  1 4 9 - 51  defined,  3 5 9 - 60  DOM  event  properties,  6 7 8 - 82  Firefox  event  object  properties,  5 0 2 -3  Internet  Explorer  event  object  properties,   role  of JavaScript,  1 0 - 1 2,   4 55  simulating  by  applying  methods  to   objects,  4 6 2 - 65   timed,  creating,  2 9 2 - 3 03  exception  handling,  1 6 8 - 72  exec    method,  RegExp  object,  7 2 3 - 24  exp    method,  Math  object,  2 42  expressions,  defined,  83  external  files   importing  CSS  files,  5 5 7 - 58  linking  style  sheets,  550,  5 5 5 - 58  storing  scripts  in,  22,  144,  151   F  fgcolor  HTML     tag  attribute,  3 29  fgColor  property,  document  object,  3 30  file,  HTML     tag  element,  3 37  filename  property,  plugin  object,  279  files,  external   importing  CSS  files,  5 5 7 - 58  linking  style  sheets,  550,  5 5 5 - 58  storing  scripts  in,  22,  144,  151   tag  element,  3 53   FileUpLoad,  HTML     FileUpLoad  object,  event  handlers,  4 83  FileUpload  property,  forms  object,  3 49  finally  clause,  1 7 0 - 72  Firebug   browser  extension    debugging  Ajax  with,  8 4 8 - 52  overview,  4 3 - 44   Firefox   cookies,  697  debugging  tools,  4 1 - 4 4,   166  displaying  properties  of  navigator  object,   2 74   event  handling,  4 9 9 - 5 0 0,   501,  5 0 2 - 3,   504,   505,  506,  508,  510,  511,  514,  5 16   Firebug  extension,  4 3 - 4 4,   8 4 8 - 52  invoking  error  console,  4 1 - 42  JavaScript  in,  1 - 2,   18  Live  Headers  add  on,  8 04    Index   863   fixed    method,  String  object,  2 52  float  CSS  property,  5 34  floor0  method,  Math  object,  242,  2 44  focusQ  event  method,  4 6 3,   4 7 0 - 7 1,   4 96  focus      method   checkbox  object,  3 97  document  object,  3 34  frame  object,  3 08  password  object,  3 79  radio  object,  3 93  select  object,  3 86  text  object,  3 74  textarea  object,  3 82  window  object,  2 86   font  CSS  property,  533,  539  fontcolor0  method,  String  object,  2 52  font-family  CSS  property,  533,  539  fonts   list  of  common  CSS  properties,  533  specifying  in  Cascading  Style  Sheets,   5 3 9 - 41   units  of  measurement,  5 3 5 - 36   font-size  CSS  property,  533,  539  fontsize    method,  String  object,  2 52  font-size-adjust  CSS  property,  font-stretch  CSS  property,  5 33  font-style  CSS  property,  533,  539  font-variant  CSS  property,  533,  539  font-weight  CSS  property,  533,  539  for   533   loop  as  basic JavaScript  looping  construct,   1 3 4 - 35   populating  arrays  by  using,  2 1 7 - 18   for in  loop,  135,  1 9 4 - 96  form  events,  4 8 2 - 96  form  object,  informs   []  array,  3 4 5,   3 5 3,   4 8 2 - 8 3.   See  also  forms  object   form  property   checkbox  object,  3 96  elements  object,  3 50      tag,  HTML   associating  events  with,  4 5 6 - 57  attributes,  3 3 4 - 36  document  example,  3 3 8 - 41  elements  and  properties,  3 5 3 - 56  input  types,  3 3 7 - 38  and  onSubmit  event  handler,  3 6 2 - 63  overview,  3 34  relationship  of  JavaScript  forms  object   to,   3 4 1 - 42   forms.  5ee  also  validating  HTML  forms   as  HTML  documents,  3 3 4 - 41  in  JavaScript  hierarchy,  328,  3 4 1 - 42  list  of  event  handlers,  4 84  programming  of  controls,  3 7 2 - 4 01  relationship  between  JavaScript  and   HTML,  3 4 1 - 42   this  keyword  for,  4 8 4 - 85   forms  []  array,  3 4 5 - 4 6,   3 4 7,   3 4 8,   3 5 3,   4 8 2 - 83  forms   object   in  JavaScript  hierarchy,  328,  3 42  methods,  3 4 8,   3 4 9 - 50  overview,  3 42  properties,  3 4 8 - 49  as  property  of  document  object,  3 4 5 - 4 6,   relationship  to  HTML     tag,   3 48   3 4 1 - 42   forms  property,  as  element  of  document   object,  4 8 2 - 83   forwardO  method,  history  object,  3 19  forward  slash        as  division  operator,  88  in  regular  expressions,  717,  720   frame  object,  3 0 7 -8  frames   collapsing,  3 1 2 - 14  collapsing  menus  in,  3 1 2 - 14  creating  in  HTML,  3 0 4 -7  creating  menus  in,  3 0 8 - 1 0,   3 14    864   frames   property   frame  object,  3 08  window  object,  285,  3 07   Index   getDay  method,  Date  object,  2 36  getElementByldO  method,   document   object,   334,  3 5 0 - 5 2,   6 2 2 - 2 5,   6 58      tag,  HTML,  3 0 3,   3 04  fromCharCodeO  method,   String  object,   getElementByName    object,  3 34   method,   document   2 53   getElementByTagName     method,   document   fromElement  property,  event  object,  501,  503,   object,  3 3 4,   6 2 5 - 27   679  Function    constructor,  2 64  Function  object,  246,  2 6 4 - 66  function  operator,  120  functions   anonymous,  as  variables,  1 5 6 - 58  assigning  to  properties,  1 8 5 - 87  calling,  1 4 4 - 46  calling  from  events,  1 4 9 - 51  calling  from  JavaScript,  144—46,  151  calling  from  links,  1 4 8 - 49  as  closures,  1 5 8 - 61  compared  with  methods,  143,  180  curly  braces  in,  144,  145  debugging  techniques,  1 6 6 - 72  declaring,  144—46  defined,  143  inline,  as  methods,  1 8 5 - 87  inner  compared  with  outer,  1 5 8 - 61  invoking,  1 4 4 - 46  as JavaScript  classes,  182  as  objects,  1 8 5 - 87  overview,  143  parentheses  in,  144,  146,  156,  5 18  passing  arguments,  1 4 6 - 48  returning  values,  1 5 3 - 55  scope  of  variables,  1 5 1 - 53  storing  definitions,  151  syntax  rules,  166   G  Garrett,  Jesse James,  5  Gecko-based  browsers,  13,  14  r   c.  rT   m„  t U „J  l i e.    om       m   getFullYear  method,  Date  object,  2 36  getHours  method,  Date  object,  2 36  getMilliseconds  method,  Date  object,  2 36  getMinutes  method,  Date  object,  2 36  getMonth  method,  Date  object,  2 36  getResponseHeader     method,   XMLHttpRequest  object,  802,  8 10   getSeconds  method,  Date  object,  2 36  getTime  method,  Date  object,  2 36  getTimeZoneOffset  method,  Date  object,   getUTCDateO  method,  Date  object,  2 36  getUTCDayO  method,  Date  object,  2 36  getUTCFullYearO  method,  Date  object,  2 36  getUTCHoursQ  method,  Date  object,  2 36  getUTCMillisecondsO  method,  Date  object,   2 36   2 36   global  property,  RegExp  object,  725  global  variable  scope,  66  go    method,  history  object,  3 19  Google  Chrome,  15,  17,  8 34  Google  Maps,  6 - 7,   797  Google  Suggest,  6,  7 9 7 - 9 8,   799  grouping,  in  CSS  structure,  5 3 1 - 32  Gustafson,  Aaron,  6 83   H  handleEvent     method  checkbox  object,  3 97  password  object,  3 79  radio  object,  3 93  select  object,  3 86  text  object,  3 74   jqi    Index   865      tag,  HTML   declaring  functions  in,  144,  145  in  DOM  tree-structure,  613,  6 14  and  placement  of JavaScript  code,  35   height  CSS  property,  534,  573  height  property   event  object,  503  image  object,  4 17  screen  object,  3 23   hexadecimal  color  codes,  537  hexadecimal  number  system,  109  hidden,  HTML     tag  element   attributes,  3 37  description,  3 3 7,   3 53  properties,  3 53   hidden  object,  event  handlers,  4 83  hidden  property,  forms  object,  3 49  history  object   JavaScript  code  example,  3 1 9 - 22  methods,  3 19  properties,  3 19   history  property,  window  object,  285.  See  also   history  object   host  property   links  object,  4 19  location  object,  3 15   hostname   property  links  object,  4 19  location  object,  3 15   href  property   links  object,  4 19  location  object,  3 1 5,   3 16   links  object,  4 19   hreflang  property,  hsh  property,  links  object,  4 19  hspace  property,  HTML  documents.  See  also     tag,   image  object,  4 17   HTML;  HTML  forms   adding JavaScript  to  pages,  20,  21,  2 2 - 2 3,   2 9 - 30  creating,  29   validating  markup,  2 4 - 25   HTML  forms   checking  alphabetic  data  input,  4 0 3 - 5,   7 6 9 - 71   7 8 1 - 83   7 7 5 - 77   3 5 9 - 65   checking  credit  card  number  input,  7 8 3 - 90  checking  e-mail  address  input,  4 0 5 - 7,   checking  for  empty  fields,  4 0 1 - 3,   7 6 5 - 67  checking  for  extraneous  characters,  7 7 1 - 75  checking  password  entries,  4 0 7 -9  checking  phone  number  input,  7 7 7 - 80  checking  Social  Security  number  input,   checking  zip  code  input,  7 6 7 - 69  fillout,  submitting,  3 5 6 - 65  JavaScript  form  event  implementation,   list  of  controls,  3 3 7 - 38  naming,  3 4 2 - 4 5,   3 5 0 - 56  overview,  3 34  regular  expressions  in  validation,  7 6 5 - 94  relationship  of form>  tag  to  JavaScript   forms  object,  3 4 1 - 42   simple  example,  3 3 8 - 41  simple  validation,  4 0 1 -9      tag,  HTML   in  DOM  tree-structure,  613,  6 14   HTTP  response  headers,  8 10  HTTP  status  codes,  8 0 7 -8  hyphen   - .  5ee  minus  sign   -    I  id  attribute,  CSS,  5 6 5 - 66  id  attribute,  HTML  form  controls,  3 3 7 - 3 8,   342,  517,  6 27   id  property   checkbox  object,  3 96  links  object,  4 19  password  object,  3 78  radio  object,  3 93    866   Index   if statements,  101  if else  if  statements,  1 2 7 - 28  if else  statements,  108,  1 2 4 - 27  ignoreCase  property,  RegExp  object,  725  image,  HTML     tag  element,  338,  3 5 8 - 59  Image    image  maps   constructor,   4 3 2 - 34   caching  images,  4 3 2 - 34  creating,  4 3 6 - 38  displaying  images  randomly,  4 3 4 - 38  example,  4 2 5 - 28  overview,  4 2 3 - 25  shape  coordinates,  4 25  using  src  property  to  replace  images   dynamically,  4 2 8 - 31   image  object   JavaScript  hierarchy,  4 17  properties,  4 17  as  property  of  document  object,  4 1 6 - 17  using  src  property  to  replace  images   dynamically,  4 2 8 - 31   images   caching,  4 3 2 - 34  in  Cascading  Style  Sheets,  533,  5 4 4 - 46  changing  stick  figure  height  and  width  properties  in  animation,  4 5 1 - 52   creating  rollovers,  4 3 2,   4 7 6 - 78  creating  slideshows  by  using  controls,   4 4 2 - 45   creating  slideshows  by  using  mouse   events,  4 7 8 - 81   displaying  randomly,  434—38  HTML  tags,  4 14  making  clickable  in  slideshows,  4 4 5 - 48  overview,  4 13  preloading,  4 3 2 - 34  randomly  displaying,  434—36  resizing  to  fit  windows,  4 3 8 - 41  using  in  W eb   pages,  4 1 5 - 16      tag,  HTML,  4 1 4,   4 1 6,   4 17   rcc   cq   implementing  in  JavaScript  by  using   prototypes,  1 9 6 - 97   initEvent    event  method,  6 65  initializing  variables,  6 0 - 62  inline  functions,  as  methods,  1 8 5 - 87  inline  model,  event  handling,  4 55  inline  style  sheets,  550,  5 5 3 - 54  innerHTML  property,  6 3 0 - 34  input  devices,  form,  programming,  3 7 2 - 4 01  input  property,  RegExp  object,  725  insertBefore    DOM  method,  615,  630,  6 3 6-  37   insertChildO  DOM  method,  6 44  instance  properties,  RegExp  object,  724,  725  instanceof  operator,  120,  2 0 5 -6  integrated  development  environments    IDEs ,  2 9 , 30   Internet  Explorer   and  Browser  Wars,  12  cookies,  697,  6 98  debugging  tools,  4 4 - 4 6,   167  displaying  properties  of  navigator  object,   2 75   event  handling,  4 9 9 - 5 0 0,   5 0 1 - 2,   503,  504,   505,  508,  510,  511,  512,  513,  5 16   event  listener  registration  model,  6 7 6 - 78  JavaScript  in,  1 - 2,   18,  19  andJScript,  13  managing  plug-ins,  279  support  for  DOM  specification,  13,  14,   testing  whether  JavaScript  enabled,   621   18,  19   using  Developer  Tools,  44—45  W eb   site  for,  15   isPrototypeOf     object  method,  2 05  italics    method,  String  object,  2 52   J  Java,  compared  with  JavaScript,  2 -3    Index   867   compared  with  Java,  2 -3  current  state,  17,  18  debugging  tools,  4 1 - 46  defined,  1  as  dynamic,  2 , 10  embedding  code  in  HTML  documents,   enclosing  in  comment  tags,  4 7 - 49  enclosing  in     tags,  4 9 - 50  example  of  dynamic  W eb   page,  2  executing  scripts  in  browser  windows,   2 9 - 30   3 0 - 33   history,  1 6 - 17  latest  version,  3  as  loosely  typed  language,  6 2 - 65  overview,  1 -3  placement  in  HTML  documents,   2 0 - 21   relationship  to  ECMAScript,  1 2 - 13  relationship  to  HTML,  1 - 2,   10,  2 9 - 33  relationship  toJScript,  13  reserved  keywords,  34  role  in  W eb   page,  4 -5  role  of     tag,  3 5 - 37  statements  and  comments  in,  3 4 - 35  syntax  and  rules,  1,  3 3 - 37  testing  version  in  use,  1 7 - 18  testing  whether  enabled,  1 8 - 19  types  of  errors,  4 0 - 41  as  unobtrusive,  10,  6 8 2 - 89  versions,  3,  1 6 - 17  viewing  output  in  browser,  3 7 - 40  when  to  keep  separate  from  HTML   documents,  2 2 - 23  join    method,  arrays,  111  .js  files,  22,  144,  151  JScript   relationship  to JavaScript,  13  versions,  1 6 - 17   JSON   JavaScript  Object  Notation    Q IT A Q   K  key  events,  5 1 3 - 16  keyCode  property,  event  object,  501,  5 13  keys,  in  arrays,  221,  125—11  Komodo  Edit,  29  Konqueror  browser,  13,  14,  15   labels,  for  control  statements  in  loops,  1 3 9 - 40  lang  property,  as  HTML  attribute,  627  language  HTML     tag  attribute,  36  lastChild  DOM  property,  614,  6 18  lastlndex  property,  RegExp  object,  721,  725,   7 2 6 - 27   lastlndexOfO  method,  String  object,  253,  2 54  lastMatch  property,  RegExp  object,  725  lastModified  property,  document  object,  3 30  lastParen  property,  RegExp  object,  725  layers,  W eb   page,  6 8 2 - 89  layerX  property,  event  object,  502  layerY  property,  event  object,  502  leaf  nodes,  DOM,  defined,  6 14  left  property,  in  positioning  CSS  elements,   573,  5 74   left  shift    «    operator,  1 1 0 - 12  leftContext  property,  RegExp  object,  725  Legacy  DOM,  defined,  327,  342,  345.  5ee  also   document   object   length  property   arrays,  219,  2 20  forms  object,  3 49  frame  object,  3 08  Function  object,  2 64  history  object,  3 19  plugin  object,  279  select  object,  3 85  window  object,  2 85   letter-spacing  CSS  property,  533,  542  life  cycle,  W eb   page,  4 -5  line-height  CSS  property,  533,  542     1 Q1    QT    868   Index      tag,  HTML,  5 5 5 - 56  linkColor  property,  document  object,  3 30  links   assigning  slideshow  images  to,  4 4 6 - 48  associating  with  image  maps,  4 3 6 - 38  creating  rollovers,  4 7 6 - 78  overview,  4 1 7 - 18   links  object   example,  4 1 9 - 23  in  JavaScript  hierarchy,  4 18  overview,  4 18  properties,  4 20   LiveScript,  1  LN2  property,  Math  object,  2 41  LN10  property,  Math  object,  2 41  load-time  errors,  40  local  variable  scope,  66  location   object   example,  3 1 6 - 18  methods,  3 16  overview,  3 15  properties,  3 15  syntax,  3 15   location  property.  See  also   location  object   document  object,  3 30  window  object,  2 85   log    method,  Math  object,  242,  2 44  LOG2E  property,  Math  object,  2 42  LoglOE  property,  Math  object,  2 42  logical  AND  operator    & &  ,   1 0 1 -3  logical  errors,  4 0 - 41  logical  NOT  operator   ! ,  101,  1 0 5 -6  logical  operators,  1 0 1 -7  logical  OR  operator H ,  101,  1 0 3 -5  loops   breaking  out  of,  1 3 6 - 37  controlling,  1 3 6 - 37  defined,  131  do while  loop,  for in  loop,  135   1 3 3 - 34   nn      in   M     tag,  4 14  margin  CSS  property,  534,  5 48  margin-bottom  CSS  property,  534,  5 48  margin-left  CSS  property,  534,  5 48  margin-right  CSS  property,  535,  5 48  margin-top  CSS  property,  535,  5 48  margins,  in  Cascading  Style  Sheets,  5 3 4 - 3 5,   5 4 7 - 49   markup,  for  W eb   documents,  9,  2 4 - 25  match    method,  String  object,  258,  7 2 7 - 28  Math  object   examples,  243,  245,  2 46  generating  random  numbers,  2 4 5 - 46  methods,  2 4 2 - 43  overview,  2 41  properties,  2 4 1 - 42  rounding  numbers  up  or  down,  2 4 4 - 45   max    method,  Math  object,  2 42  maxLength  property,  password  object,  3 78  MAX_VALUE  property,  Number  object,  260,  261  media  property,  menus   links  object,  4 19   collapsing  in  frames,  3 1 2 - 14  creating  in  frames,  3 0 8 - 1 0,   3 14  d r o p - d o w n , 3 8 5 - 9 2,   6 0 1 -6   metacharacters.  See  also  regular  expressions   alternative  patterns,  7 5 9 - 65  anchoring,  754—59  and  character  class,  7 3 8 - 41  compared  with  metasymbols,  741  defined,  717,  7 33  dot  metacharacter,  7 3 6 - 37  "greed"  factor,  7 4 5 - 54  overview,  733  quantifiers,  7 4 5 - 54  table  of  characters,  7 3 4 - 36   metaKey  property,  event  object,  502  metasymbols   compared  with  metacharacters,  741   ~7H  1A 1    Index   869   method  property,  forms  object,  3 49  methods   adding  by  using  prototypes,  2 0 2 -4  applying  to  objects  to  simulate  events,   4 6 2 - 65   for  arrays,  2 2 7 - 33  checkboxes,  3 97  compared  with  functions,  143,  180  compared  with  properties,  3 33  Date  object,  2 3 5 - 38  defined,  176  document  object,  3 3 3 - 34  forms  object,  3 4 8,   3 4 9 - 50  history  object,  3 19  inline  functions  as,  1 8 5 - 87  location  object,  3 16  Math  object,  2 4 2 - 43  nodes,  6 15  Number  object,  2 60  overview,  1 8 0 - 82  password  object,  3 79  radio  object,  3 93  RegExp  object,  7 2 1 - 24  select  object,  3 86  String  object,  2 5 1 - 5 9,   7 2 7 - 33  text  object,  3 74  textarea  object,  3 82  window  object,  2 8 6 - 87  XMLHttpRequest  object,  801,  8 02   Microsoft  Internet  Explorer.  5ee  Internet   Explorer   MIME   Multipurpose  Internet  mail   extensions   types,  2 8 2 - 84   mimeType  object,  2 8 2 - 84  mimeTypes  property,  navigator  object,  273,   2 83   min    method,  Math  object,  2 42  minus  sign   -    auto-decrement   —   operator,  9 1 - 94  bitwise  NOT   -   operator ,  110,  1 1 1 - 12   creating  slideshows,  4 7 8 - 81  how  to  use,  4 7 5 - 76  list  of  event  handlers,  4 74   moveByO  method,  window  object,  2 91  moveTo    method,  window  object,  2 91  moving  windows,  2 9 1 - 92  Mozilla  Firefox.  5ee  Firefox  multiline  property,  RegExp  object,  725  multiple  property,  select  object,  3 85   N  name  attribute,  HTML  form  controls,  3 3 7 - 3 8,   3 4 2 , 3 5 0 , 3 58   name  property   checkbox  object,  3 96  elements  object,  3 50  forms  object,  3 49  frame  object,  3 08  image  object,  4 17  links  object,  4 19  password  object,  3 78  plugin  object,  279  radio  object,  3 93  select  object,  3 85  text  object,  3 73  textarea  object,  3 82  window  object,  2 85  naming  variables,  60  NaN  property,  Number  object,  260,  261-62  navigation  bars,  creating  in  frames,  3 0 8 - 10  navigator   object   detecting  browser,  2 7 6 - 78  detecting  plug-ins,  2 7 8 - 82  JavaScript  code  example,  2 7 3 - 75  properties,  2 73  NEGATIVEJNFINITY   property,   Number   object,  260,  261  nested  arrays,  2 2 3 - 27  nested  loops,  1 3 7 - 38  NetBeans,  29    870   Index   next  property,  history  object,  3 19  nextSibling  DOM  property,  614,  6 18  Node  DOM  object   defined,  6 13  overview,  6 1 3 - 17   nodeName  DOM  property,  615,  6 16  nodes   cloning,  6 4 8 - 53  list  of  methods,  6 15  list  of  properties,  6 1 4 - 15  overview,  6 1 3 - 14  parents  and  children,  6 1 5 - 16  removing,  6 5 3 - 58  siblings,  6 16   nodeType  DOM  property,  615,  6 16  nodeValue  DOM  property,  6 15     tag,  HTML,  4 9 - 50  NOT  operators   bitwise   - ,  110,  1 1 1 - 12  logical   ! ,  101,  1 0 5 -6   null  keyword,  5 8 - 59  Number    Number  object   function,  113,  2 61   JavaScript  code  examples,  2 6 1 - 63  methods,  2 60  overview,  2 5 9 - 60  properties,  2 60  as  wrapper  object,  246,  247   numeric  arrays,  2 13  numeric  data  type,  5 3 - 5 4,   63,  1 1 2 - 19  o  Object0  object  literals,  1 8 7 - 91  Object  object,  176,  178,  200,  2 04  objects.  See  also  Browser  Object  Model   constructor,   177-78   overview,  1 7 5 - 76  properties  overview,  175,  1 7 8 - 79  types,  176  user-defined  compared  with  built-in,  204—   5   2 85   offscreenBuffering  property,  window   object,   offsetX  property,  event  object,  501  offsetY  property,  event  object,  501  older  browsers,  and  JavaScript,  4 7 - 50  onAbort  event  handler,  12,  4 58  onBlur  event  handler,  12,  4 5 8,   4 6 5,   4 6 8 - 7 0,   484,  4 8 7 - 89   property,  519   90   onblur  scripting  model  event  handler   onChange  event  handler,  12,  4 5 8,   4 8 4,   4 8 9-  onchange  scripting  model  event  handler   property,  519   onClick  event  handler   associating  with  image  map  links,  4 3 6 - 38  as  attribute  of  HTML  tag,  3 6 0 - 6 1,   459,   defined,  4 5 8,   4 7 4,   4 81  example,  4 6 0 - 61  and  forms,  4 8 6 - 87  in  inline  model  for  handling  events,  4 5 5,   661   4 56   overview,  11,  12,  484,  4 96  randomly  displaying  images,  434—36  registering,  4 5 9 - 60  syntax  example,  4 5 6 - 57  uses  for,  4 58  in  wakeUpCallO  function  example,  4 5 7 - 58   onclick  scripting  model  event  handler   property,  517,  519    BOM ;  core  objects;  Document  Object  Model    D O M    onDblClick  event  handler,  4 5 8,   4 74  ondblclick  scripting  model  event  handler   creating  with  constructors,  1 7 7 - 78  extending  with  prototypes,  1 9 6 - 2 09   property,  519   onDragDrop  event  handler,  4 58  ™ i  t ™»   „ ™ „t    i ^Q    n        mo    C\C\    Index   871   onfocus  scripting  model  event  handler   onsubmit  scripting  model  event  handler   onKeyDown  event  handler,  458,  513  onkeydown  scripting  model  event  handler   onUnload  event  handler,  12,  4 5 9,   4 6 5 - 67  onunload  scripting  model  event  handler   property,  519   property,  519   property,  519   property,  519   open    method   onKeyPress  event  handler,  4 5 8,   513,  516  onkeypress  scripting  model  event  handler   property,  519   onKeyUp  event  handler,  4 5 8,   513  onkeyup  scripting  model  event  handler   onLoad  event  handler,  12,  4 3 8,   4 5 8,   4 6 5 - 6 7,   property,  519   4 96   onload  scripting  model  event  handler   property,  518,  519,  6 61   onload  XMLHttpRequest   event  handler   property,  8 02   onMouseDown  event  handler,  4 74  onmousedown  scripting  model  event  handler   onMouseMove  event  handler,  474,  4 75  onmousemove  scripting  model  event  handler   property,  519   property,  519   onMouseOut  event  handler,  12,  4 3 2 - 3 4,   4 5 8,   4 7 4 , 4 7 5 , 4 7 6 , 4 8 1,   521   4 7 4 , 4 7 5 , 4 7 6 , 4 8 1,   521   onmouseover  scripting  model  event  handler   property,  517,  519,  5 21   onMouseUp  event  handler,  4 74  onmouseup  scripting  model  event  handler   onMove  event  handler,  4 5 9,   4 65  onprogress  XMLHttpRequest   event  handler   property,  519   property,  8 02   onreadystatechange   XMLHttpRequest   event   handler  property,  802,  806,  8 08   onReset  event  handler,  3 6 3 - 6 5,   4 5 9,   4 84  onResize  event  handler,  4 5 9,   4 7 2 - 74  onSelect  event  handler,  4 5 9,   4 84   document  object,  3 34  window  object,  286,  287,  289  XMLHttpRequest  object,  802,  8 03  opener  property,  window  object,  2 86  opening  windows,  2 8 7 - 90  Opera  browser  cookies,  6 98  displaying  properties  of  navigator  object,   DOM  inspector,  6 21  event  handling,  501,  505,  507,  510,  513,   2 74   5 14   JavaScript  error  console,  168  JavaScript  in,  18  support  for  DOM  specification,  14  W eb   site  for,  15   operands   comparing,  9 5 - 1 00  defined,  83   arithmetic,  8 8 - 89  associativity,  8 4 - 88  auto-decrement,  9 1 - 94  auto-increment,  9 1 - 94  bitwise,  1 0 9 - 12  comparison,  9 5 - 1 00  conditional,  1 0 8 -9  defined,  83  logical,  1 0 1 -7  order  of  evaluation,  8 4 - 88  precedence,  8 4 - 88  shortcut  assignment,  9 0 - 91   options[]  property,  select  object,  3 85  OR  operators   m   t  to    i   i   i   n   onMouseOver  event  handler,  12,  4 3 2 - 3 4,   4 5 9,   operators    872   P  padding  CSS  property,  535,  5 48  padding-bottom  CSS  property,  535,  5 48  padding-left  CSS  property,  535,  5 48  padding-right  CSS  property,  535,  5 48  padding-top  CSS  property,  535,  5 48  pageX  property,  event  object,  502,  5 08  pageY  property,  event  object,  502,  5 08  parent  property   frame  object,  3 08  window  object,  2 86   parentheses       following  method  names,  13,  38,  180,  3 33  in  function  statements,  144,  146,  156,  5 18  and  operator  precedence,  84,  85  and  regular  expressions,  736,  761,  762,   7 7 2 - 7 3,   7 7 7 - 8 0,   781,  790   parentNode  DOM  property,  6 1 5 , 6 18  parse0  method,  Date  object,  2 36  parseFloatO  parselntO  password,  HTML      function,  114—16   tag  element   function,   1 1 6 - 18   attributes,  3 37  description,  3 3 7,   3 53  properties,  3 53   password   object   event  handlers,  4 83  JavaScript  code  example,  3 7 9 - 81  JavaScript  hierarchy,  3 78  methods,  3 79  overview,  3 77  properties,  3 78   password  property,  forms  object,  3 49  passwords,  HTML  form  validation,  4 0 7 -9  pathname   property  links  object,  4 19  location  object,  3 15   Perl,  similarity  to JavaScript,  1  phone  numbers,  validating,  7 7 7 - 80  PI  property,  Math  object,  242,  2 4 3 - 44   Index   as  addition  operator,  88  auto-increment   ++   operator,  9 1 - 94  as  concatenation  operator,  66,  94—95   poly  shape,  image  map,  4 25  pop    method,  arrays,  227,  229  popup  windows,  287,  288,  3 7 0 - 72  port  property   links  object,  4 19  location  object,  3 15   elements,  573   object,  260,  261   position  property,  in  positioning  CSS   POSITIVEJNFINITY   property,   Number   POST  method,  3 3 5,   336,  8 0 3 - 5,   8 3 3 - 34  pow    method,  Math  object,  242,  2 4 3 - 44  precedence,  operator,  8 4 - 88  preventDefaultO  previous  property,  history  object,  3 19  previousSibling  DOM  property,  615,  6 18  primitive  data  types   event  method,  6 65   boolean,  5 6 - 57  numeric,  5 3 - 54  overview,  53  string,  5 4 - 56   print    method,  frame  object,  3 08  progressive  enhancement,  6 83  prompt    method,  window  object,  7 6 - 7 8,   2 86  properties   applying  to  regular  expressions,  7 2 4 - 2 7,   7 2 4 - 27   arrays,  2 1 9 - 21  assigning  functions  to,  1 8 5 - 87  background,  1 7 8 - 79  buttons,  3 53  Cascading  Style  Sheets,  5 3 2 - 49  checkboxes,  3 5 3,   3 96  defined,  175  document  object,  3 30  DOM  events,  6 7 8 - 82  event  object,  5 0 1 -3    Index   873   links  object,  4 19  location  object,  3 15  lookup  chain,  1 9 9 - 2 02  Math  object,  2 4 1 - 42  navigator  object,  2 7 3 - 76  nodes,  6 1 4 - 15  Number  object,  2 60  passwords,  353,  3 78  plugin  object,  279  radio  buttons,  3 5 3,   3 93  RegExp  object,  7 2 4 - 27  screen  object,  3 2 2 - 23  select  object,  3 85  String  object,  2 4 9 - 50  text  object,  3 7 3 - 74  textarea  object,  3 82  window  object,  2 8 5 - 86  XMLHttpRequest  object,  801,  8 02   protocol   property   links  object,  4 20  location  object,  3 15   prototype  lookup  chain,  1 9 9 - 2 02  prototype  object,  prototype   property   1 9 6 - 97   Array  object,  219,  2 20  Boolean  object,  2 64  customizing  Date  objects,  2 4 0 - 41  defined,  196,  204,  2 40  Function  object,  2 64  image  object,  4 17  Number  object,  2 60  purpose,  196,  197  in  subclasses,  2 0 7 - 10  using  to  add  properties  to  classes,   1 9 8 - 99   prototypes   assigning  methods,  2 0 2 -4  assigning  properties,  1 9 8 - 99  for  extending  objects,  1 9 6 - 2 09  implementing  inheritance,  1 9 6 - 97  1   i  no    i nn   Q  quote  marks,  double   " ,  54  quote  marks,  single   ' ,  54   R  radio,  HTML     tag  element   attributes,  3 37  description,  337,  3 53  properties,  3 53   radio  object   event  handlers,  4 83  JavaScript  code  example,  3 9 4 - 95  in  JavaScript  hierarchy,  3 92  methods,  3 93  overview,  3 9 2 - 93  properties,  3 93   radio  property,  forms  object,  3 49  randomQ  method,  Math  object,  242,  2 4 5 - 4 6,   4 3 4 - 36   random  numbers,  2 4 5 - 46  readonly   property   password  object,  3 78  text  object,  3 74  textarea  object,  3 82   readyState  property,  XMLHttpRequest   object,   8 0 2 , 8 0 6 -7   reason  property,  event  object,  5 02  rect  shape,  image  map,  4 25  recursion,  JavaScript  support,  1 6 1 - 65  referrer  property,  document  object,  3 30  RegExpO  constructor,  177,  720.  See  also   regular  expressions   RegExp  object   methods,  7 2 1 - 24  overview,  720  properties,  7 2 4 - 27  syntax,  720   regular  expressions   alternative  patterns  in,  7 5 9 - 65  applying  properties,  7 2 4 - 27  U „ „ 1 „ .1  „„U  A "\   -11A   7 15     874   Index   regular  expressions   Continued    creating  object  with  literal  notation,  7 1 9-  20   defined,  717  forward  slash       and,  717,  720  grouping  characters,  7 6 1 - 62  metacharacters  in,  7 3 3 - 65  metasymbols  in,  733,  7 4 1 - 45  overview,  7 1 7 - 19  String  object  methods  for,  7 2 7 - 33  testing,  7 2 1 - 24  in  validating  forms,  7 6 5 - 94  rel  property,  links  object,  4 19  relatedTarget  property,  relative  positioning,  CSS  elements,  5 8 1 - 83  reload    method,  removeChildO  DOM  method,  615,  630,   location  object,  3 16   event  object,  502   6 5 3 - 58   removeEventListener    method,  replaceO  method   6 73   form  validation  examples,  7 7 1 - 75  location  object,  3 16  String  object,  253,  2 5 8 - 5 9,   7 3 0 - 3 1,   7 7 1 - 75   replaceChildO  DOM  method,  615,  6 30  reset,  HTML     tag  element   attributes,  3 38  description,  3 3 8,   3 53  properties,  3 53   reset    event  method,  4 63  reset    method, forms  object,  3 4 9,   3 6 8 - 70  reset  object,  event  handlers,  4 83  reset  property,  forms  object,  3 49  resizeByO  method,  window  object,  2 91  resizeTo    method,  window  object,  2 91  resizing  windows,  2 9 1 - 92  responseText   XMLHttpRequest   property,   right  shift   >>   operator,  1 1 0 - 12  rightContext  property,  RegExp  object,  725  rollovers   creating  with  mouse  events,  4 7 6 - 78  scripting  model  example,  5 2 1 - 23  simple  imagemap  example,  4 3 2 - 34   root  node,  DOM,  6 14  round    method,  Math  object,  242,  2 44  rounding  numbers  up  and  down,  2 4 4 - 45  rows  property,  textarea  object,  3 82  rules  array,  Microsoft,  5 85  runtime  errors,  40  s  Safari,  13,  14,  15,  18,  2 75  screen  object   JavaScript  code  example,  3 2 3 - 25  properties,  3 2 2 - 23   screen  property,  window  object,  286.  See  also   screen  object   screenX  property,  event  object,  5 02  screenY  property,  event  object,  502     tag,  HTML  attributes,  3 6 - 37  calling  functions  from,  1 4 4 - 4 5,   151  and  placement  of JavaScript  code,  3 5 - 37   scripting  model  for  event  handling,  4 5 5,   5 1 7-  23   scroll    method,  window  object,  2 87  scrolling  messages   in  body  of W eb   documents,  6 5 8 - 61  in  windows,  2 9 6 - 3 03   scrollToO  method,  window  object,  2 9 8 - 3 02  searchO  method,  String  object,  254,  2 5 8 - 5 9,   7 2 9 - 30   search  patterns,  in  regular  expressions,  717,   720,  733.  See  also  metacharacters   object,  802,  8 0 8 -9  property,   responseXML   object,  802,  809   return  statement,  1 5 3 - 55   XMLHttpRequest   search  property   history  object,  3 19  links  object,  4 20    Index   select    event  method,  4 63  selectQ  method   password  object,  3 79  text  object,  3 74  textarea  object,  3 82   select  object   event  handlers,  4 83  JavaScript  code  examples,  3 8 6 - 90  JavaScript  hierarchy,  3 86  methods,  3 86  multiple  selects,  3 9 0 - 92  overview,  3 85  properties,  3 85   select  property,  forms  object,  3 49  selectedlndex  property,  select  object,  3 8 5,   3 90  selectors,  in  style  sheet  rules   contextual,  5 6 9 - 72  defined,  529  examples,  5 2 9 - 3 0,   5 7 0 - 72  grouping,  5 3 1 - 32  and  inheritance,  5 6 9 - 72  nested,  5 6 9 - 72   self  property   frame  object,  3 08  window  object,  2 86   875   setTimeout     method  frame  object,  3 08  syntax,  4 49  window  object,  287,  2 9 3 - 94   setUTCdateO  method,  Date  object,  2 37  setUTCFullYearO  method,  Date  object,  237  setUTCHoursQ  method,  Date  object,  2 37  setUTCMillisecondsO  method,  Date  object,   237   setUTCMinutesO  method,  Date  object,  237  setUTCMonthO  method,  Date  object,  2 37  setUTCSecondsO  method,  Date  object,  2 37  setYear    method,  Date  object,  2 37  shift    method,  arrays,  227,  2 3 0 - 31  shift  operators,  bitwise,  1 1 0 - 12  shiftKey  property,  event  object,  501,  502  shortcut  assignment  operators,  9 0 - 91  sin    method,  Math  object,  2 42  single  quote  marks   ' ,  54  size  property   password  object,  3 78  select  object,  3 85  text  object,  3 74   expressions   slash     .  5ee  also  backslash   \   and  regular   semicolons,  in  JavaScript,  3 4 - 35  sendO  method,  XMLHttpRequest  object,  802,   as  division  operator,  88  in  regular  expressions,  717,  720   8 0 5 -6   6 30   server-side  JavaScript,  2  setAttributeO  DOM  method,  6 3 7 - 39  setAttributeNode    DOM  method,  setDate    method,  Date  object,  2 36  setFullYearO  method,  Date  object,  2 36  setHoursQ  method,  Date  object,  2 36  setlntervalO  method  frame  object,  3 08  syntax,  4 49  window  object,  287,  2 9 3 - 94   setMillisecondsO  method,  Date  object,  2 36  setMinutesO  method,  Date  object,  2 36   slice    method   arrays,  227,  2 3 1 - 3 2,   2 33  String  object,  2 54   slideshows   creating  with  mouse  events,  4 7 8 - 81  making  images  clickable,  4 4 5 - 48  overview,  4 4 1 - 42  simple,  creating,  4 4 2 - 45   small    method,  String  object,  2 52  sniffers,  browser,  1 5 - 1 6,   2 7 6 - 78  Social  Security  numbers,  validating,  7 7 5 - 77  sort    method,  arrays,  111  source  property,  RegExp  object,  725    876   Index   split    method,  String  object,  254,  257,  258,   overview,  589  properties,  5 8 9 - 91   sqrt    method,  Math  object,  242,  2 4 3 - 44  SQRT1_2  property,  Math  object,  2 42  SQRT2  property,  Math  object,  2 42  square  bracket  []  notation,  213,  216,  2 2 2 - 2 3,   627    CSS    style  property,  as  HTML  attribute,  594—96,   style  sheets.  See  also  Cascading  Style  Sheets   7 3 1 - 33   3 53   square  root,  2 43  src  HTML     tag  attribute,  36  src  property,  image  object,  4 1 7,   4 2 8 - 31  srcElement  property,  event  object,  501,  503,   5 0 4 , 6 79   srcFilter  property,  event  object,  502  statements,  in JavaScript,  34—35  status  property   window  object,  2 86  XMLHttpRequest  object,   8 02   statusText  property,  XMLHttpRequest  object,   8 02   event  method,  6 65   stick  figures,  in  animations,  4 4 9,   4 5 0 - 52  stopPropagationO  strike    method,  String  object,  2 52  String    String  object   function,  1 1 3 - 14   extending,  2 5 0 - 51  methods,  2 5 1 - 5 9,   7 2 7 - 33  overview,  2 47  properties,  2 4 9 - 50  and  regular  expressions,  7 2 7 - 33  as  wrapper  object,  246,  247   strings   as  array  index  values,  2 2 1 - 27  concatenation,  37,  56,  6 6 - 67  converting  data  type,  63,  1 1 2 - 19  defined,  37  enclosing  in  quotes,  5 4 - 5 6,   69  escape  sequences,  5 4 - 56   style,  role  in  W eb   page  design,  9 - 10  style  classes   applying  class  selectors,  5 6 2 - 64   en   defined,  527  how  they  work,  5 2 9 - 30  for  HTML  pages,  5 2 7 - 28     tag,  HTML,  5 5 0 - 53  stylesheets  array   object ,  5 8 5 - 87    property  of  document   sub    method,  String  object,  2 52  subclasses,  and  inheritance,  2 0 7 - 10  submit,  HTML     tag  element   attributes,  3 38  description,  338,  3 53  properties,  3 53   submit0  event  method,  4 63  submit0  method,  forms  object,  3 4 1,   349,   submit  object,  event  handlers,  4 83  submit  property,  forms  object,  3 49  substr    method,  String  object,  254,  257,   3 6 8 - 70   2 58   substringO  method,  String  object,  257  subtraction  operator   - ,  88  suffixes  property,  mimeType  object,  2 83  Sun  Microsystems,  2  sup    method,  String  object,  2 52  switch  statement,  1 2 8 - 31  symbols.  See  metasymbols   T  tablndex  property   checkbox  object,  3 96  password  object,  3 78  radio  object,  3 93  select  object,  3 85  text  object,  3 74   jqi    Index   877   target  property   event  object,  503,  504,  679  forms  object,  3 49  links  object,  4 20   telephone  numbers,  validating,  7 7 7 - 80  ternary  operator,  108  test    method,  RegExp  object,  7 2 1 - 23  text,  HTML     tag  element   attributes,  3 37  description,  3 3 7,   3 53  properties,  3 53   Text  DOM  object,  defined,  6 13  text  nodes,  DOM,  defined,  6 14  text  object   event  handlers,  4 83  JavaScript  code  examples,  3 7 4 - 77  JavaScript  hierarchy,  3 73  methods,  3 74  overview,  3 73  properties,  3 7 3 - 74   text  property, forms  object,  3 49  text-align  CSS  property,  534,  542  textarea,  HTML      tag  element   attributes,  3 37  description,  3 3 7,   3 53  properties,  3 53   textarea   object   event  handlers,  4 83  JavaScript  code  example,  3 8 3 - 84  JavaScript  hierarchy,  3 83  methods,  3 82  overview,  3 81  properties,  3 82   textarea  property,  forms  object,  3 49  text-decoration  CSS  property,  533,  542  text-indent  CSS  property,  534,  542  text-transform  CSS  property,  533,  5 42  this  keyword   for  buttons,  4 8 4 - 85  in  class  example,  1 8 2 - 85   NN    IQI   time,  basic  units,  2 3 9 - 4 0,   2 93  timed  events,  creating,  2 9 2 - 3 03  timer  methods,  2 9 2 - 93  timeStamp  property,  event  object,  503,  679  title  HTML     tag  attribute,  566  title  property   document  object,  3 30  as  HTML  attribute,  627      tag,  in  DOM  tree-structure,   613,  6 14   toElement  property,  event  object,  501,  503  toExponentialO  method,  Number  object,  260,   toFixedO  method,  Number  object,  260,  2 6 2-  toGMTStringO  method,  Date  object,  237  toLocaleLowerCase    method,   String   object,   method   toLocaleStringO  arrays,  1 11  Date  object,  237  Number  object,  2 60   toLocaleUpperCaseO  method,   String  object,   toLowerCaseO  method,  String  object,  2 54  tooltips,  601,  6 0 6 -8  top  property   frame  object,  308,  3 1 0 - 12  in  positioning  CSS  elements,  573,  5 74  window  object,  2 86   toPrecisionO  method,  Number  object,  2 60  toSourceO  method,  Date  object,  237  toStringO  method   262   63   2 54   2 54   arrays,  1 11  Boolean  object,  2 63  Date  object,  237  defined,  2 04  Math  object,  2 43  Number  object,  260,  2 61  String  object,  2 54    878   type  property   checkbox  object,  3 96  elements  object,  3 50  event  object,  502,  503,  504,  6 79  mimeType  object,  2 83  password  object,  3 78  radio  object,  3 93  select  object,  3 85  text  object,  3 74  textarea  object,  3 82   typeof  operator,  5 7 - 5 8,   144   U  undefined  keyword,  5 8 - 59  unescapeO  built-in  function,  7 0 2 -4  unobtrusive  JavaScript,  10,  6 8 2 - 89  unshifiO  method,  arrays,  227,  2 3 0 - 31  unwatchO  method   checkbox  object,  3 97  frame  object,  3 08  location  object,  3 16  password  object,  3 79  radio  object,  3 93  select  object,  3 86  text  object,  3 74  textarea  object,  3 82   URL  property,  document  object,  3 30  userAgent  property,  navigator  object,  2 73  UTC    method,  Date  object,  237   V  validating  HTML  forms   alphabetic  data  input,  4 0 3 - 5,   7 6 9 - 71  checking  for  empty  fields,  4 0 1 - 3,   7 6 5 - 67  credit  card  number  input,  7 8 3 - 90  e-mail  address  input,  4 0 5 - 7,   7 8 1 - 83  password  input,  4 0 7 -9  phone  number  input,  7 7 7 - 80  removing  extraneous  characters,  7 7 1 - 75  Social  Security  number  input,  7 7 5 - 77   „„A „   en   Index   value,  as  HTML  attribute,  3 58  value  property   checkbox  object,  3 96  elements  object,  3 50  password  object,  3 78  radio  object,  3 93  text  object,  3 74  textarea  object,  3 82   valueOfO  method   Date  object,  237  defined,  2 04  String  object,  2 54   values,  in  array  index  keys,  221,  2 2 5 - 27  var  keyword,  6 0 - 62  variables   as  anonymous  functions,  1 5 6 - 58  concatenating  with  strings,  6 6 - 67  converting  data  type,  62,  63,  64—65  declaring,  6 0 - 6 2,   69  initializing,  6 0 - 62  naming,  60  overview,  5 9 - 60  scope,  local  vs.  global,  66  scope  in  functions,  1 5 1 - 53   vertical-align  CSS  property,  534,  542  visibility  property,  in  positioning  CSS   elements,  573,  601,  602,  6 06   vlink  HTML     tag  attribute,  3 29  vlinkColor  property,  document  object,  3 30  void  operator,  120,  4 82  vspace  property,   image  object,  4 17   W  W 3C   DOM   Document  Object  Model    adding  blog  entries,  6 3 9 - 45  cloning  nodes,  6 4 8 - 53  creating  tables,  644—48  event  handling,  6 6 2 - 68  HTML  document  node  overview,   6 1 2 - 13   e~in   ei    Index   watch      method   checkbox  object,  3 97  frame  object,  3 08  location  object,  3 16  password  object,  3 79  radio  object,  3 93  select  object,  3 86  text  object,  3 74  textarea  object,  3 82   W eb   browsers.  5ee  browsers  W eb   pages.  5ee  also  HTML  documents;   validating  HTML  forms   basic JavaScript  program  example,  7 -8  examples  of Ajax  applications,  6 - 7,   7 9 7-  98   how  they  work,  4 -5  life  cycle  example,  4 -5  role  of JavaScript,  4 - 5,   8 - 10  validating  markup,  2 4 - 25   which  property,  event  object,  503,  510,  511  while  loop,  1 3 1 - 33  whitespace   in  DOM  tree,  617  and  metacharacters,  734,  742,  7 44  between  words,  3 3 - 34   width  property   CSS,  535,  5 6 0 - 6 1,   573  event  object,  503  image  object,  4 17  screen  object,  3 23   window  object.  5ee  also  windows   methods,  2 8 6 - 87  overview,  2 85  properties,  2 8 5 - 86  as  top-level  browser  object,  73,  179   window  property   frame  object,  3 08  window  object,  2 86   windows   changing  status  bar,  295,  2 96   879   resizing  images  to  fit,  4 3 8 - 41  role  of  history  object,  3 1 9 - 22  role  of  location  object,  3 1 5 - 18  scrolling  messages,  2 9 6 - 3 03   with  keyword   String  object  example,  2 6 6 - 67  and  user-defined  objects,  1 9 1 - 94  word-spacing  CSS  property,  534,  542  World  Wide  W eb   Consortium    W 3 C  .   See   also  W 3C   DOM   Document  Object  Model    browser  standards,  1 2 - 13  ccsRules  array,  585  validation  tool  for  W eb   documents,  24   wrapper  objects   Boolean  object,  246,  2 6 3 - 64  Number  object,  246,  247,  2 5 9 - 63  String  object,  246,  2 4 7 - 59   write    method,  document  object,  37,  3 8 - 3 9,   writelnO  method,  document  object,  37,  3 8-  4 0 , 3 3 1 , 3 3 3 , 3 34   3 9 , 4 0 , 3 3 3 , 3 34   X  x  property,  event  object,  502  XMLHttpRequest   object   checking  HTTP  response  headers,  8 10  creating,  8 0 0 - 8 02  handling  server  response  with  callback   function,  8 0 8 - 10   initializing,  8 0 3 -5  methods,  801,  8 02  monitoring  server  response,  8 0 6 -8  properties,  801,  8 02  sending  request  to  server,  8 0 5 -6   X OR   bitwise  operator   A ,   110,  1 1 1 - 12   Y  y  property,  event  object,  502

@highlight

The World’s Easiest Java Script Tutorial–Fully Updated!   JavaScript by Example, Second Edition, is the easiest, most hands-on way to learn JavaScript. Legendary programming instructor Ellie Quigley has thoroughly updated her classic book to deliver the skills and information today’s JavaScript users need most–including up-to-the-minute coverage of JavaScript programming constructs, CSS, Ajax, JSON, and the latest JavaScript libraries and best practices.   Quigley illuminates every technique with focused, classroom-tested code examples, detailed line-by-line explanations, and real program output. This exceptionally clear, easy-to-understand book takes you from your first script to advanced techniques. It’s the only JavaScript book you’ll ever need!   New in This Edition  End-of-chapter study tools, including classroom-tested labs Programming the DOM More Cascading Style Sheets Introduction to Ajax and JSON Explanation of how to develop interactive Web applications with dynamic, desktop-style interfaces Programmers’ preparation for HTML 5’s breakthrough capabilities  This edition has been completely updated and includes many new and completely rewritten code examples; contains fully revised and updated coverage of Cascading Style Sheets (CSS) and the Document Object Model (DOM); and fully covers modern JavaScript concepts, principles, and programming techniques.   Thousands of Web developers, administrators, and power users have relied on JavaScript by Example to become expert JavaScript programmers. With this new edition, you can, too–even if you’re completely new to JavaScript. After you’ve become an expert, you’ll turn to this book constantly as the best source for trustworthy answers, solutions, and code