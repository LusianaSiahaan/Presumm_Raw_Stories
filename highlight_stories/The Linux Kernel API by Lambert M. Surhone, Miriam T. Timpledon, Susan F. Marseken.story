The Linux Kernel API   The Linux Kernel API  This documentation is free software; you can redistribute it and or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or  at your option  any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA For more details see the ﬁle COPYING in the source distribution of Linux.   Table of Contents  1. Driver Basics...............................................................................................................1 1.1. Driver Entry and Exit points .............................................................................1 module_init ......................................................................................................1 module_exit......................................................................................................1 1.2. Atomic and pointer manipulation .....................................................................2 atomic_read......................................................................................................3 atomic_set ........................................................................................................3 atomic_add.......................................................................................................4 atomic_sub .......................................................................................................5 atomic_sub_and_test........................................................................................6 atomic_inc........................................................................................................7 atomic_dec .......................................................................................................8 atomic_dec_and_test........................................................................................9 atomic_inc_and_test ......................................................................................10 atomic_add_negative......................................................................................11 get_unaligned.................................................................................................12 put_unaligned.................................................................................................12 1.3. Delaying, scheduling, and timer routines .......................................................13 schedule_timeout ...........................................................................................14 2. Data Types ................................................................................................................16 2.1. Doubly Linked Lists .......................................................................................16 list_add...........................................................................................................16 list_add_tail....................................................................................................16 list_del............................................................................................................17 list_del_init ....................................................................................................18 list_empty.......................................................................................................19 list_splice .......................................................................................................19 list_entry ........................................................................................................20 list_for_each...................................................................................................21 list_for_each_safe ..........................................................................................22 3. Basic C Library Functions ......................................................................................24 3.1. String Conversions..........................................................................................24 simple_strtol...................................................................................................24 simple_strtoll .................................................................................................25 simple_strtoul.................................................................................................25 simple_strtoull ...............................................................................................26 vsnprintf .........................................................................................................27  i   snprintf ...........................................................................................................28 vsprintf ...........................................................................................................29 sprintf .............................................................................................................30 3.2. String Manipulation ........................................................................................31 strcpy..............................................................................................................31 strncpy............................................................................................................31 strcat...............................................................................................................32 strncat.............................................................................................................33 strcmp.............................................................................................................34 strncmp...........................................................................................................35 strchr ..............................................................................................................36 strrchr .............................................................................................................36 strlen...............................................................................................................37 strnlen.............................................................................................................38 strpbrk ............................................................................................................38 strtok ..............................................................................................................39 memset ...........................................................................................................40 bcopy..............................................................................................................41 memcpy..........................................................................................................42 memmove.......................................................................................................43 memcmp.........................................................................................................43 memscan ........................................................................................................44 strstr................................................................................................................45 memchr ..........................................................................................................46 3.3. Bit Operations .................................................................................................47 set_bit.............................................................................................................47 __set_bit.........................................................................................................48 clear_bit..........................................................................................................49 __change_bit ..................................................................................................49 change_bit ......................................................................................................50 test_and_set_bit..............................................................................................51 __test_and_set_bit..........................................................................................52 test_and_clear_bit ..........................................................................................53 __test_and_clear_bit ......................................................................................54 test_and_change_bit.......................................................................................55 test_bit............................................................................................................56 ﬁnd_ﬁrst_zero_bit..........................................................................................56 ﬁnd_next_zero_bit .........................................................................................57 ffz ...................................................................................................................58 ffs ...................................................................................................................59  ii   hweight32.......................................................................................................60 4. Memory Management in Linux..............................................................................61 4.1. The Slab Cache ...............................................................................................61 kmem_cache_create.......................................................................................61 kmem_cache_shrink ......................................................................................62 kmem_cache_destroy.....................................................................................63 kmem_cache_alloc.........................................................................................64 kmalloc...........................................................................................................65 kmem_cache_free ..........................................................................................66 kfree ...............................................................................................................67 5. The proc ﬁlesystem ..................................................................................................69 5.1. sysctl interface ................................................................................................69 register_sysctl_table.......................................................................................69 unregister_sysctl_table...................................................................................71 proc_dostring .................................................................................................71 proc_dointvec.................................................................................................73 proc_dointvec_minmax..................................................................................74 proc_doulongvec_minmax.............................................................................75 proc_doulongvec_ms_jifﬁes_minmax ...........................................................76 proc_dointvec_jifﬁes......................................................................................77 6. The Linux VFS .........................................................................................................80 6.1. The Directory Cache .......................................................................................80 d_invalidate ....................................................................................................80 d_ﬁnd_alias....................................................................................................80 prune_dcache .................................................................................................81 shrink_dcache_sb...........................................................................................82 have_submounts.............................................................................................83 shrink_dcache_parent ....................................................................................84 d_alloc............................................................................................................84 d_instantiate ...................................................................................................85 d_alloc_root ...................................................................................................86 d_lookup ........................................................................................................87 d_validate.......................................................................................................88 d_delete ..........................................................................................................89 d_rehash .........................................................................................................90 d_move...........................................................................................................91 __d_path.........................................................................................................91 is_subdir.........................................................................................................93 ﬁnd_inode_number ........................................................................................94  iii   d_drop ............................................................................................................94 d_add..............................................................................................................95 dget.................................................................................................................96 d_unhashed ....................................................................................................97 6.2. Inode Handling................................................................................................98 __mark_inode_dirty.......................................................................................98 write_inode_now............................................................................................99 clear_inode...................................................................................................100 invalidate_inodes..........................................................................................100 get_empty_inode..........................................................................................101 iunique..........................................................................................................102 insert_inode_hash ........................................................................................103 remove_inode_hash .....................................................................................104 iput ...............................................................................................................105 bmap.............................................................................................................105 update_atime ................................................................................................106 make_bad_inode ..........................................................................................107 is_bad_inode ................................................................................................108 6.3. Registration and Superblocks .......................................................................109 register_ﬁlesystem .......................................................................................109 unregister_ﬁlesystem ...................................................................................110 get_super ......................................................................................................111 6.4. File Locks......................................................................................................111 posix_lock_ﬁle.............................................................................................112 __get_lease...................................................................................................113 lease_get_mtime ..........................................................................................114 posix_block_lock .........................................................................................114 posix_unblock_lock .....................................................................................115 lock_may_read.............................................................................................116 lock_may_write............................................................................................117 fcntl_getlease ...............................................................................................118 fcntl_setlease................................................................................................119 sys_ﬂock ......................................................................................................120 get_locks_status ...........................................................................................121 7. Linux Networking ..................................................................................................123 7.1. Socket Buffer Functions................................................................................123 skb_queue_empty ........................................................................................123 skb_get .........................................................................................................123 kfree_skb......................................................................................................124 skb_cloned ...................................................................................................125  iv   skb_shared....................................................................................................126 skb_share_check ..........................................................................................127 skb_unshare..................................................................................................128 skb_peek ......................................................................................................129 skb_peek_tail ...............................................................................................129 skb_queue_len..............................................................................................130 __skb_queue_head.......................................................................................131 skb_queue_head...........................................................................................132 __skb_queue_tail .........................................................................................133 skb_queue_tail .............................................................................................134 __skb_dequeue.............................................................................................135 skb_dequeue.................................................................................................136 skb_insert .....................................................................................................137 skb_append ..................................................................................................138 skb_unlink....................................................................................................138 __skb_dequeue_tail......................................................................................139 skb_dequeue_tail..........................................................................................140 skb_put.........................................................................................................141 skb_push ......................................................................................................142 skb_pull........................................................................................................143 skb_headroom ..............................................................................................144 skb_tailroom ................................................................................................144 skb_reserve ..................................................................................................145 skb_trim .......................................................................................................146 skb_orphan...................................................................................................147 skb_queue_purge .........................................................................................148 __skb_queue_purge .....................................................................................148 __dev_alloc_skb ..........................................................................................149 dev_alloc_skb ..............................................................................................150 skb_cow .......................................................................................................151 skb_over_panic ............................................................................................152 skb_under_panic ..........................................................................................153 alloc_skb ......................................................................................................154 __kfree_skb..................................................................................................155 skb_clone .....................................................................................................156 skb_copy ......................................................................................................157 pskb_copy ....................................................................................................158 pskb_expand_head.......................................................................................159 skb_copy_expand.........................................................................................160 __pskb_pull_tail...........................................................................................161  v   7.2. Socket Filter ..................................................................................................162 sk_run_ﬁlter .................................................................................................162 sk_chk_ﬁlter.................................................................................................163 8. Network device support.........................................................................................165 8.1. Driver Support...............................................................................................165 init_etherdev ................................................................................................165 alloc_etherdev ..............................................................................................166 init_fddidev ..................................................................................................167 alloc_fddidev................................................................................................168 init_hippi_dev ..............................................................................................168 alloc_hippi_dev............................................................................................169 init_trdev ......................................................................................................170 alloc_trdev....................................................................................................171 init_fcdev .....................................................................................................172 alloc_fcdev...................................................................................................173 dev_add_pack ..............................................................................................174 dev_remove_pack ........................................................................................175 __dev_get_by_name ....................................................................................175 dev_get_by_name ........................................................................................176 dev_get.........................................................................................................177 __dev_get_by_index ....................................................................................178 dev_get_by_index ........................................................................................179 dev_alloc_name ...........................................................................................179 dev_alloc ......................................................................................................180 netdev_state_change ....................................................................................181 dev_load.......................................................................................................182 dev_open ......................................................................................................183 dev_close......................................................................................................184 register_netdevice_notiﬁer...........................................................................185 unregister_netdevice_notiﬁer.......................................................................185 dev_queue_xmit...........................................................................................186 netif_rx.........................................................................................................187 net_call_rx_atomic.......................................................................................188 register_gifconf ............................................................................................189 netdev_set_master........................................................................................190 dev_set_promiscuity ....................................................................................191 dev_set_allmulti...........................................................................................192 dev_ioctl.......................................................................................................192 dev_new_index ............................................................................................193 netdev_ﬁnish_unregister ..............................................................................194  vi   unregister_netdevice ....................................................................................195 8.2. 8390 Based Network Cards ..........................................................................196 ei_open.........................................................................................................196 ei_close ........................................................................................................197 ei_tx_timeout ...............................................................................................198 ei_interrupt...................................................................................................198 ethdev_init....................................................................................................199 NS8390_init .................................................................................................200 8.3. Synchronous PPP..........................................................................................201 sppp_input....................................................................................................201 sppp_close....................................................................................................202 sppp_open ....................................................................................................203 sppp_reopen .................................................................................................204 sppp_change_mtu ........................................................................................205 sppp_do_ioctl...............................................................................................206 sppp_attach ..................................................................................................207 sppp_detach..................................................................................................207 9. Module Support .....................................................................................................209 9.1. Module Loading............................................................................................209 request_module ............................................................................................209 call_usermodehelper ....................................................................................209 9.2. Inter Module support.....................................................................................210 inter_module_register ..................................................................................211 inter_module_unregister ..............................................................................211 inter_module_get .........................................................................................212 inter_module_get_request............................................................................213 inter_module_put .........................................................................................214 10. Hardware Interfaces ............................................................................................216 10.1. Interrupt Handling.......................................................................................216 disable_irq_nosync ......................................................................................216 disable_irq....................................................................................................216 enable_irq.....................................................................................................217 probe_irq_mask............................................................................................218 10.2. MTRR Handling .........................................................................................219 mtrr_add.......................................................................................................219 mtrr_del........................................................................................................221 10.3. PCI Support Library....................................................................................222 pci_ﬁnd_slot.................................................................................................222 pci_ﬁnd_subsys............................................................................................223  vii   pci_ﬁnd_device ............................................................................................224 pci_ﬁnd_class...............................................................................................225 pci_ﬁnd_capability.......................................................................................226 pci_ﬁnd_parent_resource.............................................................................227 pci_set_power_state.....................................................................................228 pci_save_state ..............................................................................................229 pci_restore_state ..........................................................................................230 pci_enable_device........................................................................................231 pci_disable_device.......................................................................................231 pci_enable_wake..........................................................................................232 pci_release_regions......................................................................................233 pci_request_regions .....................................................................................234 pci_match_device ........................................................................................235 pci_register_driver .......................................................................................236 pci_unregister_driver ...................................................................................237 pci_insert_device .........................................................................................237 pci_remove_device ......................................................................................238 pci_dev_driver..............................................................................................239 pci_set_master..............................................................................................240 pci_setup_device..........................................................................................241 pci_pool_create ............................................................................................241 pci_pool_destroy..........................................................................................243 pci_pool_alloc..............................................................................................244 pci_pool_free ...............................................................................................245 10.4. MCA Architecture ......................................................................................246 10.4.1. MCA Device Functions ...................................................................246 mca_ﬁnd_adapter.................................................................................246 mca_ﬁnd_unused_adapter....................................................................247 mca_read_stored_pos...........................................................................248 mca_read_pos ......................................................................................249 mca_write_pos .....................................................................................249 mca_set_adapter_name ........................................................................251 mca_set_adapter_procfn ......................................................................251 mca_is_adapter_used ...........................................................................253 mca_mark_as_used ..............................................................................253 mca_mark_as_unused ..........................................................................254 mca_get_adapter_name........................................................................255 mca_isadapter ......................................................................................256 mca_isenabled......................................................................................256 10.4.2. MCA Bus DMA...............................................................................257  viii   mca_enable_dma..................................................................................258 mca_disable_dma.................................................................................258 mca_set_dma_addr ..............................................................................259 mca_get_dma_addr ..............................................................................260 mca_set_dma_count.............................................................................261 mca_get_dma_residue..........................................................................262 mca_set_dma_io ..................................................................................262 mca_set_dma_mode.............................................................................263 11. The Device File System........................................................................................265 devfs_register .......................................................................................................265 devfs_unregister ...................................................................................................266 devfs_mk_symlink...............................................................................................267 devfs_mk_dir .......................................................................................................268 devfs_ﬁnd_handle ................................................................................................269 devfs_get_ﬂags ....................................................................................................270 devfs_get_maj_min..............................................................................................271 devfs_get_handle_from_inode.............................................................................272 devfs_generate_path.............................................................................................273 devfs_get_ops ......................................................................................................274 devfs_set_ﬁle_size ...............................................................................................275 devfs_get_info......................................................................................................275 devfs_set_info ......................................................................................................276 devfs_get_parent ..................................................................................................277 devfs_get_ﬁrst_child............................................................................................278 devfs_get_next_sibling ........................................................................................279 devfs_auto_unregister ..........................................................................................279 devfs_get_unregister_slave ..................................................................................280 devfs_get_name ...................................................................................................281 devfs_register_chrdev ..........................................................................................282 devfs_register_blkdev ..........................................................................................283 devfs_unregister_chrdev ......................................................................................284 devfs_unregister_blkdev ......................................................................................285 12. Power Management .............................................................................................286 pm_register ..........................................................................................................286 pm_unregister ......................................................................................................287 pm_unregister_all ................................................................................................287 pm_send ...............................................................................................................288 pm_send_all .........................................................................................................290 pm_ﬁnd ................................................................................................................291  ix   13. Block Devices........................................................................................................293 blk_cleanup_queue ..............................................................................................293 blk_queue_headactive..........................................................................................294 blk_queue_make_request.....................................................................................295 blk_init_queue......................................................................................................296 generic_make_request..........................................................................................297 submit_bh.............................................................................................................298 ll_rw_block ..........................................................................................................299 end_that_request_ﬁrst ..........................................................................................301 14. Miscellaneous Devices..........................................................................................303 misc_register ........................................................................................................303 misc_deregister ....................................................................................................303 15. Video4Linux .........................................................................................................305 video_unregister_device ......................................................................................305 16. Sound Devices.......................................................................................................306 register_sound_special.........................................................................................306 register_sound_mixer...........................................................................................306 register_sound_midi.............................................................................................307 register_sound_dsp ..............................................................................................308 register_sound_synth ...........................................................................................309 unregister_sound_special.....................................................................................310 unregister_sound_mixer.......................................................................................311 unregister_sound_midi.........................................................................................312 unregister_sound_dsp ..........................................................................................313 unregister_sound_synth .......................................................................................314 17. USB Devices..........................................................................................................315 usb_register ..........................................................................................................315 usb_scan_devices.................................................................................................315 usb_deregister ......................................................................................................316 usb_alloc_bus.......................................................................................................317 usb_free_bus ........................................................................................................318 usb_register_bus...................................................................................................319 usb_deregister_bus...............................................................................................319 usb_match_id .......................................................................................................320 usb_alloc_urb.......................................................................................................322 usb_free_urb ........................................................................................................323 usb_control_msg..................................................................................................324 usb_bulk_msg ......................................................................................................325  x   18. 16x50 UART Driver .............................................................................................328 register_serial.......................................................................................................328 unregister_serial...................................................................................................328 19. Z85230 Support Library .....................................................................................330 z8530_interrupt ....................................................................................................330 z8530_sync_open.................................................................................................331 z8530_sync_close ................................................................................................331 z8530_sync_dma_open........................................................................................332 z8530_sync_dma_close .......................................................................................333 z8530_sync_txdma_open.....................................................................................334 z8530_sync_txdma_close ....................................................................................335 z8530_describe ....................................................................................................336 z8530_init ............................................................................................................337 z8530_shutdown ..................................................................................................338 z8530_channel_load ............................................................................................339 z8530_null_rx ......................................................................................................339 z8530_queue_xmit...............................................................................................340 z8530_get_stats....................................................................................................341 20. Frame Buffer Library..........................................................................................343 20.1. Frame Buffer Memory ................................................................................343 register_framebuffer.....................................................................................343 unregister_framebuffer.................................................................................344 20.2. Frame Buffer Console.................................................................................345 fbcon_redraw_clear......................................................................................345 fbcon_redraw_bmove...................................................................................346 20.3. Frame Buffer Colormap..............................................................................347 fb_alloc_cmap..............................................................................................348 fb_copy_cmap..............................................................................................348 fb_get_cmap.................................................................................................350 fb_set_cmap .................................................................................................351 fb_default_cmap ..........................................................................................352 fb_invert_cmaps...........................................................................................353 20.4. Frame Buffer Generic Functions.................................................................353 fbgen_get_ﬁx ...............................................................................................354 fbgen_get_var ..............................................................................................355 fbgen_set_var...............................................................................................356 fbgen_get_cmap...........................................................................................356 fbgen_set_cmap ...........................................................................................357 fbgen_pan_display .......................................................................................358  xi   fbgen_do_set_var.........................................................................................359 fbgen_set_disp .............................................................................................360 fbgen_install_cmap ......................................................................................361 fbgen_update_var.........................................................................................362 fbgen_switch ................................................................................................363 fbgen_blank..................................................................................................364 20.5. Frame Buffer Video Mode Database ..........................................................365 fb_ﬁnd_mode ...............................................................................................365 __fb_try_mode.............................................................................................366 20.6. Frame Buffer Macintosh Video Mode Database.........................................368 console_getmode..........................................................................................368 console_setmode ..........................................................................................368 console_setcmap ..........................................................................................369 console_powermode ....................................................................................371 mac_vmode_to_var......................................................................................371 mac_var_to_vmode......................................................................................372 mac_map_monitor_sense.............................................................................373 mac_ﬁnd_mode............................................................................................374 20.7. Frame Buffer Fonts .....................................................................................375 fbcon_ﬁnd_font............................................................................................376 fbcon_get_default_font ................................................................................376  xii   Chapter 1. Driver Basics  1.1. Driver Entry and Exit points  module_init  Name module_init — driver initialization entry point  Synopsis  module_init   x ;  Arguments  x  function to be run at kernel boot time or module insertion  Description module_init will add the driver initialization routine in the “__initcall.int” code segment if the driver is checked as “y” or static, or else it will wrap the driver initialization routine with init_module which is used by insmod and modprobe when the driver is used as a module.  1   Chapter 1. Driver Basics  module_exit  Name module_exit — driver exit entry point  Synopsis  module_exit   x ;  Arguments  x  function to be run when driver is removed  Description module_exit will wrap the driver clean-up code with cleanup_module when used with rmmod when the driver is a module. If the driver is statically compiled into the kernel, module_exit has no effect.  2   1.2. Atomic and pointer manipulation  Chapter 1. Driver Basics  atomic_read  Name atomic_read — read atomic variable  Synopsis  atomic_read   v ;  Arguments  v  pointer of type atomic_t  Description Atomically reads the value of v. Note that the guaranteed useful range of an atomic_t is only 24 bits.  3   atomic_set  Chapter 1. Driver Basics  Name atomic_set — set atomic variable  Synopsis  atomic_set   v,  i ;  Arguments  v  i  pointer of type atomic_t  required value  Description Atomically sets the value of v to i. Note that the guaranteed useful range of an atomic_t is only 24 bits.  4   atomic_add  Chapter 1. Driver Basics  Name atomic_add — add integer to atomic variable  Synopsis  void atomic_add  int i, atomic_t * v ;  Arguments  i  v  integer value to add  pointer of type atomic_t  Description Atomically adds i to v. Note that the guaranteed useful range of an atomic_t is only 24 bits.  5   atomic_sub  Chapter 1. Driver Basics  Name atomic_sub — subtract the atomic variable  Synopsis  void atomic_sub  int i, atomic_t * v ;  Arguments  i  v  integer value to subtract  pointer of type atomic_t  Description Atomically subtracts i from v. Note that the guaranteed useful range of an atomic_t is only 24 bits.  6   atomic_sub_and_test  Chapter 1. Driver Basics  Name atomic_sub_and_test — subtract value from variable and test result  Synopsis  int atomic_sub_and_test  int i, atomic_t * v ;  Arguments  i  v  integer value to subtract  pointer of type atomic_t  Description Atomically subtracts i from v and returns true if the result is zero, or false for all other cases. Note that the guaranteed useful range of an atomic_t is only 24 bits.  7   atomic_inc  Chapter 1. Driver Basics  Name atomic_inc — increment atomic variable  Synopsis  void atomic_inc  atomic_t * v ;  Arguments  v  pointer of type atomic_t  Description Atomically increments v by 1. Note that the guaranteed useful range of an atomic_t is only 24 bits.  atomic_dec  Name atomic_dec — decrement atomic variable  8   Chapter 1. Driver Basics  Synopsis  void atomic_dec  atomic_t * v ;  Arguments  v  pointer of type atomic_t  Description Atomically decrements v by 1. Note that the guaranteed useful range of an atomic_t is only 24 bits.  atomic_dec_and_test  Name atomic_dec_and_test — decrement and test  Synopsis  int atomic_dec_and_test  atomic_t * v ;  9   Chapter 1. Driver Basics  Arguments  v  pointer of type atomic_t  Description Atomically decrements v by 1 and returns true if the result is 0, or false for all other cases. Note that the guaranteed useful range of an atomic_t is only 24 bits.  atomic_inc_and_test  Name atomic_inc_and_test — increment and test  Synopsis  int atomic_inc_and_test  atomic_t * v ;  Arguments  v  pointer of type atomic_t  10   Description Atomically increments v by 1 and returns true if the result is zero, or false for all other cases. Note that the guaranteed useful range of an atomic_t is only 24 bits.  Chapter 1. Driver Basics  atomic_add_negative  Name atomic_add_negative — add and test if negative  Synopsis  int atomic_add_negative  int i, atomic_t * v ;  Arguments  i  v  integer value to add  pointer of type atomic_t  Description Atomically adds i to v and returns true if the result is negative, or false when result is greater than or equal to zero. Note that the guaranteed useful range of an atomic_t is only 24 bits.  11   Chapter 1. Driver Basics  get_unaligned  Name get_unaligned — get value from possibly mis-aligned location  Synopsis  get_unaligned   ptr ;  Arguments  ptr  pointer to value  Description This macro should be used for accessing values larger in size than single bytes at locations that are expected to be improperly aligned, e.g. retrieving a u16 value from a location not u16-aligned.  Note that unaligned accesses can be very expensive on some architectures.  12   put_unaligned  Chapter 1. Driver Basics  Name put_unaligned — put value to a possibly mis-aligned location  Synopsis  put_unaligned   val, ptr ;  Arguments  val  ptr  value to place  pointer to location  Description This macro should be used for placing values larger in size than single bytes at locations that are expected to be improperly aligned, e.g. writing a u16 value to a location not u16-aligned.  Note that unaligned accesses can be very expensive on some architectures.  13   1.3. Delaying, scheduling, and timer routines  Chapter 1. Driver Basics  schedule_timeout  Name schedule_timeout — sleep until timeout  Synopsis  signed long schedule_timeout  signed long timeout ;  Arguments  timeout  timeout value in jifﬁes  Description Make the current task sleep until timeout jifﬁes have elapsed. The routine will return immediately unless the current task state has been set  see set_current_state .  You can set the task state as follows -  TASK_UNINTERRUPTIBLE - at least timeout jifﬁes are guaranteed to pass before the routine returns. The routine will return 0  TASK_INTERRUPTIBLE - the routine may return early if a signal is delivered to the current task. In this case the remaining time in jifﬁes will be returned, or 0 if the timer expired in time  The current task state is guaranteed to be TASK_RUNNING when this routine returns.  14   Specifying a timeout value of MAX_SCHEDULE_TIMEOUT will schedule the CPU away without a bound on the timeout. In this case the return value will be MAX_SCHEDULE_TIMEOUT.  In all cases the return value is guaranteed to be non-negative.  Chapter 1. Driver Basics  15   Chapter 2. Data Types  2.1. Doubly Linked Lists  list_add  Name list_add — add a new entry  Synopsis  Arguments  new  head  new entry to be added  list head to add it after  void list_add  struct list_head * new, struct list_head * head ;  Description Insert a new entry after the speciﬁed head. This is good for implementing stacks.  16   list_add_tail  Chapter 2. Data Types  void list_add_tail  struct list_head * new, struct list_head * head ;  Name list_add_tail — add a new entry  Synopsis  Arguments  new  head  new entry to be added  list head to add it before  Description Insert a new entry before the speciﬁed head. This is useful for implementing queues.  list_del  Name list_del — deletes entry from list.  17   Synopsis  void list_del  struct list_head * entry ;  Chapter 2. Data Types  Arguments  entry  the element to delete from the list.  Note list_empty on entry does not return true after this, the entry is in an undeﬁned state.  list_del_init  Name list_del_init — deletes entry from list and reinitialize it.  Synopsis  void list_del_init  struct list_head * entry ;  18   Arguments  entry  the element to delete from the list.  Chapter 2. Data Types  list_empty  Name list_empty — tests whether a list is empty  int list_empty  struct list_head * head ;  Synopsis  Arguments  head  the list to test.  19   void list_splice  struct list_head * list, struct list_head * head ;  list_splice  Name list_splice — join two lists  Synopsis  Arguments  list  head  the new list to add.  the place to add it in the ﬁrst list.  list_entry  Name list_entry — get the struct for this entry  Chapter 2. Data Types  20   Synopsis  list_entry   ptr, type, member ;  Arguments  ptr  type  member  the &struct list_head pointer.  the type of the struct this is embedded in.  the name of the list_struct within the struct.  list_for_each  Name list_for_each — iterate over a list  Synopsis  list_for_each   pos, head ;  Chapter 2. Data Types  21   Chapter 2. Data Types  Arguments  pos  head  the head for your list.  the &struct list_head to use as a loop counter.  list_for_each_safe  Name list_for_each_safe — iterate over a list safe against removal of list entry  list_for_each_safe   pos, n, head ;  Synopsis  Arguments  pos  n  head  the &struct list_head to use as a loop counter.  another &struct list_head to use as temporary storage  the head for your list.  22   Chapter 2. Data Types  23   Chapter 3. Basic C Library Functions  When writing drivers, you cannot in general use routines which are from the C Library. Some of the functions have been found generally useful and they are listed below. The behaviour of these functions may vary slightly from those deﬁned by ANSI, and these deviations are noted in the text.  3.1. String Conversions  simple_strtol  Name simple_strtol — convert a string to a signed long  Synopsis  long simple_strtol  const char * cp, char ** endp, unsigned int base ;  Arguments  The start of the string  cp  endp  base  The number base to use  A pointer to the end of the parsed string will be placed here  24   Chapter 3. Basic C Library Functions  simple_strtoll  Name simple_strtoll — convert a string to a signed long long  Synopsis  long long simple_strtoll  const char * cp, char ** endp, unsigned int base ;  Arguments  The start of the string  cp  endp  base  The number base to use  A pointer to the end of the parsed string will be placed here  25   simple_strtoul  Chapter 3. Basic C Library Functions  Name simple_strtoul — convert a string to an unsigned long  Synopsis  unsigned long simple_strtoul  const char * cp, char ** endp, unsigned int base ;  Arguments  The start of the string  cp  endp  base  The number base to use  A pointer to the end of the parsed string will be placed here  simple_strtoull  Name simple_strtoull — convert a string to an unsigned long long  26   Synopsis  Chapter 3. Basic C Library Functions  unsigned long long simple_strtoull  const char * cp, char ** endp, unsigned int base ;  A pointer to the end of the parsed string will be placed here  Arguments  The start of the string  cp  endp  base  The number base to use  vsnprintf  Name vsnprintf — Format a string and place it in a buffer  Synopsis  int vsnprintf  char * buf, size_t size, const char * fmt, va_list args ;  27   Chapter 3. Basic C Library Functions  Arguments  The buffer to place the result into  buf  size  fmt  args  The size of the buffer, including the trailing null space  The format string to use  Arguments for the format string  Description Call this function if you are already dealing with a va_list. You probably want snprintf instead.  snprintf  Name snprintf — Format a string and place it in a buffer  Synopsis  int snprintf  char * buf, size_t size, const char * fmt, ... ... ;  28   Chapter 3. Basic C Library Functions  Arguments  The buffer to place the result into  The size of the buffer, including the trailing null space  The format string to use @...: Arguments for the format string  variable arguments  buf  size  fmt  ...  vsprintf  Name vsprintf — Format a string and place it in a buffer  Synopsis  int vsprintf  char * buf, const char * fmt, va_list args ;  Arguments  buf  The buffer to place the result into  29   Chapter 3. Basic C Library Functions  fmt  args  The format string to use  Arguments for the format string  Description Call this function if you are already dealing with a va_list. You probably want sprintf instead.  sprintf  Name sprintf — Format a string and place it in a buffer  Synopsis  int sprintf  char * buf, const char * fmt, ... ... ;  Arguments  buf  fmt  The buffer to place the result into  The format string to use @...: Arguments for the format string  30   ...  variable arguments  Chapter 3. Basic C Library Functions  3.2. String Manipulation  strcpy  Name strcpy — Copy a NUL terminated string  Synopsis  char * strcpy  char * dest, const char * src ;  Arguments  dest  src  Where to copy the string to  Where to copy the string from  31   strncpy  Chapter 3. Basic C Library Functions  Name strncpy — Copy a length-limited, NUL-terminated string  Synopsis  char * strncpy  char * dest, const char * src, size_t count ;  Arguments  dest  src  count  Where to copy the string to  Where to copy the string from  The maximum number of bytes to copy  Description Note that unlike userspace strncpy, this does not NUL-pad the buffer. However, the result is not NUL-terminated if the source exceeds count bytes.  32   strcat  Chapter 3. Basic C Library Functions  Name strcat — Append one NUL-terminated string to another  Synopsis  char * strcat  char * dest, const char * src ;  Arguments  dest  src  The string to be appended to  The string to append to it  strncat  Name strncat — Append a length-limited, NUL-terminated string to another  Synopsis  char * strncat  char * dest, const char * src, size_t count ;  33   Chapter 3. Basic C Library Functions  Arguments  dest  src  count  The string to be appended to  The string to append to it  The maximum numbers of bytes to copy  Description Note that in contrast to strncpy, strncat ensures the result is terminated.  strcmp  Name strcmp — Compare two strings  Synopsis  int strcmp  const char * cs, const char * ct ;  34   Chapter 3. Basic C Library Functions  Arguments  cs  ct  One string  Another string  strncmp  Synopsis  Arguments  cs  ct  One string  Another string  count  Name strncmp — Compare two length-limited strings  int strncmp  const char * cs, const char * ct, size_t count ;  The maximum number of bytes to compare  35   Chapter 3. Basic C Library Functions  strchr  Name strchr — Find the ﬁrst occurrence of a character in a string  Synopsis  char * strchr  const char * s, int c ;  Arguments  s  c  The string to be searched  The character to search for  strrchr  Name strrchr — Find the last occurrence of a character in a string  36   Chapter 3. Basic C Library Functions  char * strrchr  const char * s, int c ;  Synopsis  Arguments  The string to be searched  The character to search for  strlen  s  c  s  Name strlen — Find the length of a string  Synopsis  size_t strlen  const char * s ;  Arguments  The string to be sized  37   Chapter 3. Basic C Library Functions  strnlen  Name strnlen — Find the length of a length-limited string  Synopsis  size_t strnlen  const char * s, size_t count ;  Arguments  s  count  The string to be sized  The maximum number of bytes to search  strpbrk  Name strpbrk — Find the ﬁrst occurrence of a set of characters  38   Synopsis  char * strpbrk  const char * cs, const char * ct ;  Chapter 3. Basic C Library Functions  Arguments  cs  ct  The string to be searched  The characters to search for  strtok  Name strtok — Split a string into tokens  Synopsis  char * strtok  char * s, const char * ct ;  Arguments  s  The string to be searched  39   Chapter 3. Basic C Library Functions  ct  The characters to search for  WARNING strtok is deprecated, use strsep instead.  memset  Name memset — Fill a region of memory with the given value  Synopsis  void * memset  void * s, int c, size_t count ;  Arguments  s  c  Pointer to the start of the area.  The byte to ﬁll the area with  count  The size of the area.  40   Description Do not use memset to access IO space, use memset_io instead.  Chapter 3. Basic C Library Functions  bcopy  Name bcopy — Copy one area of memory to another  Synopsis  char * bcopy  const char * src, char * dest, int count ;  Arguments  src  dest  count  Where to copy from  Where to copy to  The size of the area.  Description Note that this is the same as memcpy, with the arguments reversed. memcpy is the standard, bcopy is a legacy BSD function.  41   You should not use this function to access IO space, use memcpy_toio or memcpy_fromio instead.  Chapter 3. Basic C Library Functions  memcpy  Name memcpy — Copy one area of memory to another  Synopsis  void * memcpy  void * dest, const void * src, size_t count ;  Arguments  dest  src  count  Where to copy to  Where to copy from  The size of the area.  Description You should not use this function to access IO space, use memcpy_toio or memcpy_fromio instead.  42   Chapter 3. Basic C Library Functions  memmove  Name memmove — Copy one area of memory to another  Synopsis  void * memmove  void * dest, const void * src, size_t count ;  Arguments  dest  src  count  Where to copy to  Where to copy from  The size of the area.  Description Unlike memcpy, memmove copes with overlapping areas.  43   memcmp  Chapter 3. Basic C Library Functions  Name memcmp — Compare two areas of memory  Synopsis  int memcmp  const void * cs, const void * ct, size_t count ;  Arguments  cs  ct  One area of memory  Another area of memory  count  The size of the area.  memscan  Name memscan — Find a character in an area of memory.  44   Synopsis  void * memscan  void * addr, int c, size_t size ;  Chapter 3. Basic C Library Functions  Arguments  addr  c  size  The memory area  The byte to search for  The size of the area.  Description returns the address of the ﬁrst occurrence of c, or 1 byte past the area if c is not found  strstr  Name strstr — Find the ﬁrst substring in a NUL terminated string  Synopsis  char * strstr  const char * s1, const char * s2 ;  45   Chapter 3. Basic C Library Functions  Arguments  s1  s2  The string to be searched  The string to search for  memchr  Name memchr — Find a character in an area of memory.  Synopsis  void * memchr  const void * s, int c, size_t n ;  Arguments  s  c  The memory area  The byte to search for  46   n  The size of the area.  Chapter 3. Basic C Library Functions  Description returns the address of the ﬁrst occurrence of c, or NULL if c is not found  3.3. Bit Operations  set_bit  Name set_bit — Atomically set a bit in memory  void set_bit  int nr, volatile void * addr ;  Synopsis  Arguments  nr  addr  the bit to set  the address to start counting from  47   Chapter 3. Basic C Library Functions  Description This function is atomic and may not be reordered. See __set_bit if you do not require the atomic guarantees. Note that nr may be almost arbitrarily large; this function is not restricted to acting on a single-word quantity.  __set_bit  Name __set_bit — Set a bit in memory  Synopsis  void __set_bit  int nr, volatile void * addr ;  Arguments  nr  addr  the bit to set  the address to start counting from  Description Unlike set_bit, this function is non-atomic and may be reordered. If it’s called on the same region of memory simultaneously, the effect may be that only one operation succeeds.  48   Chapter 3. Basic C Library Functions  clear_bit  Name clear_bit — Clears a bit in memory  Synopsis  void clear_bit  int nr, volatile void * addr ;  Arguments  nr  addr  Bit to clear  Address to start counting from  Description clear_bit is atomic and may not be reordered. However, it does not contain a memory barrier, so if it is used for locking purposes, you should call smp_mb__before_clear_bit and or smp_mb__after_clear_bit in order to ensure changes are visible on other processors.  49   __change_bit  Chapter 3. Basic C Library Functions  Name __change_bit — Toggle a bit in memory  void __change_bit  int nr, volatile void * addr ;  Synopsis  Arguments  nr  addr  the bit to set  the address to start counting from  Description Unlike change_bit, this function is non-atomic and may be reordered. If it’s called on the same region of memory simultaneously, the effect may be that only one operation succeeds.  50   change_bit  Chapter 3. Basic C Library Functions  Name change_bit — Toggle a bit in memory  Synopsis  void change_bit  int nr, volatile void * addr ;  Arguments  nr  addr  Bit to clear  Address to start counting from  Description change_bit is atomic and may not be reordered. Note that nr may be almost arbitrarily large; this function is not restricted to acting on a single-word quantity.  51   test_and_set_bit  Chapter 3. Basic C Library Functions  Name test_and_set_bit — Set a bit and return its old value  Synopsis  int test_and_set_bit  int nr, volatile void * addr ;  Arguments  nr  addr  Bit to set  Address to count from  Description This operation is atomic and cannot be reordered. It also implies a memory barrier.  __test_and_set_bit  Name __test_and_set_bit — Set a bit and return its old value  52   Synopsis  Chapter 3. Basic C Library Functions  int __test_and_set_bit  int nr, volatile void * addr ;  Arguments  nr  addr  Bit to set  Address to count from  Description This operation is non-atomic and can be reordered. If two examples of this operation race, one can appear to succeed but actually fail. You must protect multiple accesses with a lock.  test_and_clear_bit  Name test_and_clear_bit — Clear a bit and return its old value  Synopsis  int test_and_clear_bit  int nr, volatile void * addr ;  53   Chapter 3. Basic C Library Functions  Arguments  nr  addr  Bit to set  Address to count from  Description This operation is atomic and cannot be reordered. It also implies a memory barrier.  __test_and_clear_bit  Name __test_and_clear_bit — Clear a bit and return its old value  int __test_and_clear_bit  int nr, volatile void * addr ;  Synopsis  Arguments  nr  Bit to set  54   addr  Address to count from  Chapter 3. Basic C Library Functions  Description This operation is non-atomic and can be reordered. If two examples of this operation race, one can appear to succeed but actually fail. You must protect multiple accesses with a lock.  test_and_change_bit  Name test_and_change_bit — Change a bit and return its new value  int test_and_change_bit  int nr, volatile void * addr ;  Synopsis  Arguments  nr  addr  Bit to set  Address to count from  55   Description This operation is atomic and cannot be reordered. It also implies a memory barrier.  Chapter 3. Basic C Library Functions  test_bit  Name test_bit — Determine whether a bit is set  Synopsis  int test_bit  int nr, const volatile void * addr ;  Arguments  nr  addr  bit number to test  Address to start counting from  56   ﬁnd_ﬁrst_zero_bit  Chapter 3. Basic C Library Functions  Name find_first_zero_bit — ﬁnd the ﬁrst zero bit in a memory region  Synopsis  int find_first_zero_bit  void * addr, unsigned size ;  Arguments  addr  size  The address to start the search at  The maximum size to search  Description Returns the bit-number of the ﬁrst zero bit, not the number of the byte containing a bit.  ﬁnd_next_zero_bit  Name find_next_zero_bit — ﬁnd the ﬁrst zero bit in a memory region  57   Synopsis  Chapter 3. Basic C Library Functions  int find_next_zero_bit  void * addr, int size, int offset ;  Arguments  addr  size  offset  The address to base the search on  The maximum size to search  The bitnumber to start searching at  ffz  Name ffz — ﬁnd ﬁrst zero in word.  Synopsis  unsigned long ffz  unsigned long word ;  58   Chapter 3. Basic C Library Functions  Arguments  word  The word to search  Description Undeﬁned if no zero exists, so code should check against ~0UL ﬁrst.  ffs  Name ffs — ﬁnd ﬁrst bit set  Synopsis  int ffs  int x ;  Arguments  x  the word to search  59   Chapter 3. Basic C Library Functions  Description This is deﬁned the same way as the libc and compiler builtin ffs routines, therefore differs in spirit from the above ffz  man ffs .  hweight32  Name hweight32 — returns the hamming weight of a N-bit word  Synopsis  hweight32   x ;  Arguments  x  the word to weigh  Description The Hamming Weight of a number is the total number of bits set in it.  60   Chapter 4. Memory Management in Linux  4.1. The Slab Cache  kmem_cache_create  Name kmem_cache_create — Create a cache.  Synopsis  kmem_cache_t * kmem_cache_create  const char * name, size_t size, size_t offset, unsigned long flags, void  *ctor   void*, kmem_cache_t *, unsigned long , void  *dtor   void*, kmem_cache_t *, unsigned long  ;  Arguments  name  size  offset  A string which is used in  proc slabinfo to identify this cache.  The size of objects to be created in this cache.  The offset to use within the page.  61   Chapter 4. Memory Management in Linux  flags  SLAB ﬂags  ctor  dtor  A constructor for the objects.  A destructor for the objects.  Description Returns a ptr to the cache on success, NULL on failure. Cannot be called within a int, but can be interrupted. The ctor is run when new pages are allocated by the cache and the dtor is run before the pages are handed back. The ﬂags are  SLAB_POISON - Poison the slab with a known test pattern  a5a5a5a5  to catch references to uninitialised memory.  SLAB_RED_ZONE - Insert ‘Red’ zones around the allocated memory to check for buffer overruns.  SLAB_NO_REAP - Don’t automatically reap this cache when we’re under memory pressure.  SLAB_HWCACHE_ALIGN - Align the objects in this cache to a hardware cacheline. This can be beneﬁcial if you’re counting cycles as closely as davem.  kmem_cache_shrink  Name kmem_cache_shrink — Shrink a cache.  62   Chapter 4. Memory Management in Linux  Synopsis  int kmem_cache_shrink  kmem_cache_t * cachep ;  Arguments  cachep  The cache to shrink.  Description Releases as many slabs as possible for a cache. To help debugging, a zero exit status indicates all slabs were released.  kmem_cache_destroy  Name kmem_cache_destroy — delete a cache  Synopsis  int kmem_cache_destroy  kmem_cache_t * cachep ;  63   Chapter 4. Memory Management in Linux  Arguments  cachep  the cache to destroy  Description Remove a kmem_cache_t object from the slab cache. Returns 0 on success.  It is expected this function will be called by a module when it is unloaded. This will remove the cache completely, and avoid a duplicate cache being allocated each time a module is loaded and unloaded, if the module doesn’t have persistent in-kernel storage across loads and unloads.  The caller must guarantee that noone will allocate memory from the cache during the kmem_cache_destroy.  kmem_cache_alloc  Name kmem_cache_alloc — Allocate an object  Synopsis  void * kmem_cache_alloc  kmem_cache_t * cachep, int flags ;  64   Chapter 4. Memory Management in Linux  Arguments  cachep  flags  See kmalloc.  The cache to allocate from.  Description Allocate an object from this cache. The ﬂags are only relevant if the cache has no available objects.  kmalloc  Name kmalloc — allocate memory  Synopsis  void * kmalloc  size_t size, int flags ;  Arguments  size  how many bytes of memory are required.  65   flags  the type of memory to allocate.  Chapter 4. Memory Management in Linux  Description kmalloc is the normal method of allocating memory in the kernel.  The flags argument may be one of:  GFP_USER - Allocate memory on behalf of user. May sleep.  GFP_KERNEL - Allocate normal kernel ram. May sleep.  GFP_ATOMIC - Allocation will not sleep. Use inside interrupt handlers.  Additionally, the GFP_DMA ﬂag may be set to indicate the memory must be suitable for DMA. This can mean different things on different platforms. For example, on i386, it means that the memory must come from the ﬁrst 16MB.  kmem_cache_free  Name kmem_cache_free — Deallocate an object  Synopsis  void kmem_cache_free  kmem_cache_t * cachep, void * objp ;  66   Chapter 4. Memory Management in Linux  Arguments  cachep  objp  The cache the allocation was from.  The previously allocated object.  Description Free an object which was previously allocated from this cache.  kfree  Name kfree — free previously allocated memory  Synopsis  void kfree  const void * objp ;  Arguments  objp  pointer returned by kmalloc.  67   Description Don’t free memory not originally allocated by kmalloc or you will run into trouble.  Chapter 4. Memory Management in Linux  68   Chapter 5. The proc ﬁlesystem  5.1. sysctl interface  register_sysctl_table  Name register_sysctl_table — register a sysctl heirarchy  Synopsis  struct ctl_table_header * register_sysctl_table  ctl_table * table, int insert_at_head ;  Arguments  table  the top-level table structure  insert_at_head  whether the entry should be inserted in front or at the end  Description Register a sysctl table heirarchy. table should be a ﬁlled in ctl_table array. An entry with a ctl_name of 0 terminates the table.  The members of the &ctl_table structure are used as follows:  69   Chapter 5. The proc ﬁlesystem  ctl_name - This is the numeric sysctl value used by sysctl 2 . The number must be unique within that level of sysctl  procname - the name of the sysctl ﬁle under  proc sys. Set to NULL to not enter a sysctl ﬁle  data - a pointer to data for use by proc_handler  maxlen - the maximum size in bytes of the data  mode - the ﬁle permissions for the  proc sys ﬁle, and for sysctl 2   child - a pointer to the child sysctl table if this entry is a directory, or NULL.  proc_handler - the text handler routine  described below   strategy - the strategy routine  described below   de - for internal use by the sysctl routines  extra1, extra2 - extra pointers usable by the proc handler routines  Leaf nodes in the sysctl tree will be represented by a single ﬁle under  proc; non-leaf nodes will be represented by directories.  sysctl 2  can automatically manage read and write requests through the sysctl table. The data and maxlen ﬁelds of the ctl_table struct enable minimal validation of the values being written to be performed, and the mode ﬁeld allows minimal authentication.  More sophisticated management can be enabled by the provision of a strategy routine with the table entry. This will be called before any automatic read or write of the data is performed.  The strategy routine may return  < 0 - Error occurred  error is passed to user process   0 - OK - proceed with automatic read or write.  > 0 - OK - read or write has been done by the strategy routine, so return immediately.  There must be a proc_handler routine for any terminal nodes mirrored under  proc sys  non-terminals are handled by a built-in directory handler . Several default handlers are available to cover common cases -  proc_dostring, proc_dointvec, proc_dointvec_jiffies, proc_dointvec_minmax, proc_doulongvec_ms_jiffies_minmax, proc_doulongvec_minmax  It is the handler’s job to read the input buffer from user memory and process it. The handler should return 0 on success.  70   This routine returns NULL on a failure to register, and a pointer to the table header on success.  Chapter 5. The proc ﬁlesystem  unregister_sysctl_table  Name unregister_sysctl_table — unregister a sysctl table heirarchy  void unregister_sysctl_table  struct ctl_table_header * header ;  Synopsis  Arguments  header  the header returned from register_sysctl_table  Description Unregisters the sysctl table and all children. proc entries may not actually be removed until they are no longer used by anyone.  71   proc_dostring  Chapter 5. The proc ﬁlesystem  int proc_dostring  ctl_table * table, int write, struct file * filp, void * buffer, size_t * lenp ;  Name proc_dostring — read a string sysctl  Synopsis  TRUE if this is a write to the sysctl ﬁle  Arguments  the sysctl table  table  write  filp  the ﬁle structure  buffer  lenp  the user buffer  the size of the user buffer  Description Reads writes a string from to the user buffer. If the kernel buffer provided is not large enough to hold the string, the string is truncated. The copied string is  72   NULL-terminated. If the string is being read by the user process, it is copied and a newline ’\n’ is added. It is truncated if the buffer is not large enough.  Returns 0 on success.  Chapter 5. The proc ﬁlesystem  proc_dointvec  Name proc_dointvec — read a vector of integers  Synopsis  int proc_dointvec  ctl_table * table, int write, struct file * filp, void * buffer, size_t * lenp ;  Arguments  the sysctl table  table  write  filp  the ﬁle structure  buffer  the user buffer  TRUE if this is a write to the sysctl ﬁle  73   lenp  the size of the user buffer  Chapter 5. The proc ﬁlesystem  Description Reads writes up to table->maxlen sizeof unsigned int  integer values from to the user buffer, treated as an ASCII string.  Returns 0 on success.  proc_dointvec_minmax  Name proc_dointvec_minmax — read a vector of integers with min max values  int proc_dointvec_minmax  ctl_table * table, int write, struct file * filp, void * buffer, size_t * lenp ;  Synopsis  Arguments  table  write  the sysctl table  TRUE if this is a write to the sysctl ﬁle  74   Chapter 5. The proc ﬁlesystem  filp  buffer  lenp  the ﬁle structure  the user buffer  the size of the user buffer  Description Reads writes up to table->maxlen sizeof unsigned int  integer values from to the user buffer, treated as an ASCII string.  This routine will ensure the values are within the range speciﬁed by table->extra1  min  and table->extra2  max .  Returns 0 on success.  proc_doulongvec_minmax  Name proc_doulongvec_minmax — read a vector of long integers with min max values  Synopsis  int proc_doulongvec_minmax  ctl_table * table, int write, struct file * filp, void * buffer, size_t * lenp ;  75   Chapter 5. The proc ﬁlesystem  TRUE if this is a write to the sysctl ﬁle  Arguments  the sysctl table  table  write  filp  the ﬁle structure  buffer  lenp  the user buffer  the size of the user buffer  Description Reads writes up to table->maxlen sizeof unsigned long  unsigned long values from to the user buffer, treated as an ASCII string.  This routine will ensure the values are within the range speciﬁed by table->extra1  min  and table->extra2  max .  Returns 0 on success.  proc_doulongvec_ms_jifﬁes_minmax  Name proc_doulongvec_ms_jiffies_minmax — read a vector of millisecond values with min max values  76   Chapter 5. The proc ﬁlesystem  int proc_doulongvec_ms_jiffies_minmax  ctl_table * table, int write, struct file * filp, void * buffer, size_t * lenp ;  Synopsis  Arguments  the sysctl table  table  write  filp  the ﬁle structure  buffer  lenp  the user buffer  the size of the user buffer  TRUE if this is a write to the sysctl ﬁle  Description Reads writes up to table->maxlen sizeof unsigned long  unsigned long values from to the user buffer, treated as an ASCII string. The values are treated as milliseconds, and converted to jifﬁes when they are stored.  This routine will ensure the values are within the range speciﬁed by table->extra1  min  and table->extra2  max .  Returns 0 on success.  77   proc_dointvec_jifﬁes  Chapter 5. The proc ﬁlesystem  Name proc_dointvec_jiffies — read a vector of integers as seconds  int proc_dointvec_jiffies  ctl_table * table, int write, struct file * filp, void * buffer, size_t * lenp ;  Synopsis  Arguments  the sysctl table  table  write  filp  the ﬁle structure  buffer  lenp  the user buffer  TRUE if this is a write to the sysctl ﬁle  the size of the user buffer  Description Reads writes up to table->maxlen sizeof unsigned int  integer values from to the user buffer, treated as an ASCII string. The values read are assumed to be in seconds, and  78   are converted into jifﬁes.  Returns 0 on success.  Chapter 5. The proc ﬁlesystem  79   Chapter 6. The Linux VFS  6.1. The Directory Cache  d_invalidate  Name d_invalidate — invalidate a dentry  Synopsis  int d_invalidate  struct dentry * dentry ;  Arguments  dentry  dentry to invalidate  Description Try to invalidate the dentry if it turns out to be possible. If there are other dentries that can be reached through this one we can’t delete it and we return -EBUSY. On success we return 0.  no dcache lock.  80   d_ﬁnd_alias  Chapter 6. The Linux VFS  Name d_find_alias — grab a hashed alias of inode  Synopsis  struct dentry * d_find_alias  struct inode * inode ;  Arguments  inode  inode in question  Description If inode has a hashed alias - acquire the reference to alias and return it. Otherwise return NULL. Notice that if inode is a directory there can be only one alias and it can be unhashed only if it has no children.  prune_dcache  Name prune_dcache — shrink the dcache  81   Chapter 6. The Linux VFS  Synopsis  void prune_dcache  int count ;  Arguments  count  number of entries to try and free  Description Shrink the dcache. This is done when we need more memory, or simply when we need to unmount something  at which point we need to unuse all dentries .  This function may fail to free any resources if all the dentries are in use.  shrink_dcache_sb  Name shrink_dcache_sb — shrink dcache for a superblock  Synopsis  void shrink_dcache_sb  struct super_block * sb ;  82   Chapter 6. The Linux VFS  Arguments  sb  superblock  Description Shrink the dcache for the speciﬁed super block. This is used to free the dcache before unmounting a ﬁle system  have_submounts  Name have_submounts — check for mounts over a dentry  int have_submounts  struct dentry * parent ;  Synopsis  Arguments  parent  dentry to check.  83   Description Return true if the parent or its subdirectories contain a mount point  Chapter 6. The Linux VFS  shrink_dcache_parent  Name shrink_dcache_parent — prune dcache  Synopsis  void shrink_dcache_parent  struct dentry * parent ;  Arguments  parent  parent of entries to prune  Description Prune the dcache to remove unused children of the parent dentry.  84   d_alloc  Chapter 6. The Linux VFS  struct dentry * d_alloc  struct dentry * parent, const struct qstr * name ;  Name d_alloc — allocate a dcache entry  Synopsis  Arguments  parent  name  parent of entry to allocate  qstr of the name  Description Allocates a dentry. It returns NULL if there is insufﬁcient memory available. On a success the dentry is returned. The name passed in is copied and the copy passed in may be reused after this call.  85   d_instantiate  Chapter 6. The Linux VFS  Name d_instantiate — ﬁll in inode information for a dentry  Synopsis  void d_instantiate  struct dentry * entry, struct inode * inode ;  Arguments  entry  inode  dentry to complete  inode to attach to this dentry  Description Fill in inode information in the entry.  This turns negative dentries into productive full members of society.  NOTE! This assumes that the inode count has been incremented  or otherwise set  by the caller to indicate that it is now in use by the dcache.  86   d_alloc_root  Chapter 6. The Linux VFS  struct dentry * d_alloc_root  struct inode * root_inode ;  Name d_alloc_root — allocate root dentry  Synopsis  Arguments  root_inode  inode to allocate the root for  Description Allocate a root  “ ”  dentry for the inode given. The inode is instantiated and returned. NULL is returned if there is insufﬁcient memory or the inode passed is NULL.  d_lookup  Name d_lookup — search for a dentry  87   Synopsis  Chapter 6. The Linux VFS  struct dentry * d_lookup  struct dentry * parent, struct qstr * name ;  Arguments  parent  parent dentry  name  qstr of name we wish to ﬁnd  Description Searches the children of the parent dentry for the name in question. If the dentry is found its reference count is incremented and the dentry is returned. The caller must use d_put to free the entry when it has ﬁnished using it. NULL is returned on failure.  d_validate  Name d_validate — verify dentry provided from insecure source  Synopsis  int d_validate  struct dentry * dentry, struct dentry * dparent ;  88   Chapter 6. The Linux VFS  Arguments  dentry  dparent  The dentry alleged to be valid child of dparent  The parent dentry  known to be valid   Description An insecure source has sent us a dentry, here we verify it and dget it. This is used by ncpfs in its readdir implementation. Zero is returned in the dentry is invalid.  d_delete  Name d_delete — delete a dentry  Synopsis  void d_delete  struct dentry * dentry ;  89   Chapter 6. The Linux VFS  Arguments  dentry  The dentry to delete  Description Turn the dentry into a negative dentry if possible, otherwise remove it from the hash queues so it can be deleted later  d_rehash  Name d_rehash — add an entry back to the hash  Synopsis  void d_rehash  struct dentry * entry ;  Arguments  entry  dentry to add to the hash  90   Description Adds a dentry to the hash according to its name.  Chapter 6. The Linux VFS  d_move  Name d_move — move a dentry  Synopsis  Arguments  dentry  entry to move  target  new dentry  void d_move  struct dentry * dentry, struct dentry * target ;  Description Update the dcache to reﬂect the move of a ﬁle name. Negative dcache entries should not be moved in this way.  91   __d_path  Chapter 6. The Linux VFS  char * __d_path  struct dentry * dentry, struct vfsmount * vfsmnt, struct dentry * root, struct vfsmount * rootmnt, char * buffer, int buflen ;  Name __d_path — return the path of a dentry  Synopsis  Arguments  dentry  vfsmnt  dentry to report  root  root dentry  rootmnt  vfsmnt to which the dentry belongs  vfsmnt to which the root dentry belongs  buffer to return value in  buffer  buflen  buffer length  92   Chapter 6. The Linux VFS  Description Convert a dentry into an ASCII path name. If the entry has been deleted the string “  deleted ” is appended. Note that this is ambiguous. Returns the buffer.  “buﬂen” should be PAGE_SIZE or more. Caller holds the dcache_lock.  is_subdir  Name is_subdir — is new dentry a subdirectory of old_dentry  int is_subdir  struct dentry * new_dentry, struct dentry * old_dentry ;  Synopsis  Arguments  new_dentry  new dentry  old_dentry  old dentry  Description Returns 1 if new_dentry is a subdirectory of the parent  at any depth . Returns 0 otherwise.  93   Chapter 6. The Linux VFS  ﬁnd_inode_number  Name find_inode_number — check for dentry with name  Synopsis  ino_t find_inode_number  struct dentry * dir, struct qstr * name ;  Arguments  dir  name  directory to check  Name to ﬁnd.  Description Check whether a dentry already exists for the given name, and return the inode number if it has an inode. Otherwise 0 is returned.  This routine is used to post-process directory listings for ﬁlesystems using synthetic inode numbers, and is necessary to keep getcwd working.  94   Chapter 6. The Linux VFS  d_drop  Name d_drop — drop a dentry  Synopsis  Arguments  dentry  dentry to drop  void d_drop  struct dentry * dentry ;  Description d_drop unhashes the entry from the parent dentry hashes, so that it won’t be found through a VFS lookup any more. Note that this is different from deleting the dentry - d_delete will try to mark the dentry negative if possible, giving a successful _negative_ lookup, while d_drop will just make the cache lookup fail.  d_drop is used mainly for stuff that wants to invalidate a dentry for some reason  NFS timeouts or autofs deletes .  95   d_add  Chapter 6. The Linux VFS  void d_add  struct dentry * entry, struct inode * inode ;  Name d_add — add dentry to hash queues  Synopsis  Arguments  entry  inode  dentry to add  The inode to attach to this dentry  Description This adds the entry to the hash queues and initializes inode. The entry was actually ﬁlled in earlier during d_alloc.  96   dget  Chapter 6. The Linux VFS  struct dentry * dget  struct dentry * dentry ;  Name dget — get a reference to a dentry  Synopsis  Arguments  dentry  dentry to get a reference to  Description Given a dentry or NULL pointer increment the reference count if appropriate and return the dentry. A dentry will not be destroyed when it has references. dget should never be called for dentries with zero reference counter. For these cases  preferably none, functions in dcache.c are sufﬁcient for normal needs and they take necessary precautions  you should hold dcache_lock and call dget_locked instead of dget.  d_unhashed  Name d_unhashed — is dentry hashed  97   Chapter 6. The Linux VFS  int d_unhashed  struct dentry * dentry ;  Synopsis  Arguments  dentry  entry to check  Description Returns true if the dentry passed is not currently hashed.  6.2. Inode Handling  __mark_inode_dirty  Name __mark_inode_dirty — internal function  Synopsis  void __mark_inode_dirty  struct inode * inode, int flags ;  98   Chapter 6. The Linux VFS  Arguments  inode  flags  inode to mark  what kind of dirty  i.e. I_DIRTY_SYNC  Mark an inode as dirty. Callers should use mark_inode_dirty or mark_inode_dirty_sync.  write_inode_now  Name write_inode_now — write an inode to disk  Synopsis  void write_inode_now  struct inode * inode, int sync ;  Arguments  inode  sync  inode to write to disk  whether the write should be synchronous or not  99   Description This function commits an inode to disk immediately if it is dirty. This is primarily needed by knfsd.  Chapter 6. The Linux VFS  clear_inode  Name clear_inode — clear an inode  Synopsis  void clear_inode  struct inode * inode ;  Arguments  inode  inode to clear  Description This is called by the ﬁlesystem to tell us that the inode is no longer useful. We just terminate it with extreme prejudice.  100   invalidate_inodes  Chapter 6. The Linux VFS  Name invalidate_inodes — discard the inodes on a device  int invalidate_inodes  struct super_block * sb ;  Synopsis  Arguments  sb  superblock  Description Discard all of the inodes for a given superblock. If the discard fails because there are busy inodes then a non zero value is returned. If the discard is successful all the inodes have been discarded.  get_empty_inode  Name get_empty_inode — obtain an inode  101   Chapter 6. The Linux VFS  struct inode * get_empty_inode   void ;  Synopsis  Arguments  void  no arguments  Description  This is called by things like the networking layer etc that want to get an inode without any inode number, or ﬁlesystems that allocate new inodes with no pre-existing information.  On a successful return the inode pointer is returned. On a failure a NULL pointer is returned. The returned inode is not on any superblock lists.  iunique  Name iunique — get a unique inode number  Synopsis  ino_t iunique  struct super_block * sb, ino_t max_reserved ;  102   Chapter 6. The Linux VFS  Arguments  sb  superblock  max_reserved  highest reserved inode number  Description Obtain an inode number that is unique on the system for a given superblock. This is used by ﬁle systems that have no natural permanent inode numbering system. An inode number is returned that is higher than the reserved limit but unique.  BUGS With a large number of inodes live on the ﬁle system this function currently becomes quite slow.  insert_inode_hash  Name insert_inode_hash — hash an inode  Synopsis  void insert_inode_hash  struct inode * inode ;  103   Chapter 6. The Linux VFS  Arguments  inode  unhashed inode  Description Add an inode to the inode hash for this superblock. If the inode has no superblock it is added to a separate anonymous chain.  remove_inode_hash  Name remove_inode_hash — remove an inode from the hash  void remove_inode_hash  struct inode * inode ;  Synopsis  Arguments  inode  inode to unhash  104   Description Remove an inode from the superblock or anonymous hash.  Chapter 6. The Linux VFS  iput  Name iput — put an inode  Synopsis  Arguments  inode  inode to put  void iput  struct inode * inode ;  Description Puts an inode, dropping its usage count. If the inode use count hits zero the inode is also then freed and may be destroyed.  105   bmap  Chapter 6. The Linux VFS  Name bmap — ﬁnd a block number in a ﬁle  Synopsis  int bmap  struct inode * inode, int block ;  Arguments  inode  block  inode of ﬁle  block to ﬁnd  Description Returns the block number on the device holding the inode that is the disk block number for the block of the ﬁle requested. That is, asked for block 4 of inode 1 the function will return the disk block relative to the disk start that holds that block of the ﬁle.  106   update_atime  Chapter 6. The Linux VFS  Name update_atime — update the access time  Synopsis  void update_atime  struct inode * inode ;  Arguments  inode  inode accessed  Description Update the accessed time on an inode and mark it for writeback. This function automatically handles read only ﬁle systems and media, as well as the “noatime” ﬂag and inode speciﬁc “noatime” markers.  make_bad_inode  Name make_bad_inode — mark an inode bad due to an I O error  107   Synopsis  void make_bad_inode  struct inode * inode ;  Chapter 6. The Linux VFS  Arguments  inode  Inode to mark bad  Description When an inode cannot be read due to a media or remote network failure this function makes the inode “bad” and causes I O operations on it to fail from this point on.  is_bad_inode  Name is_bad_inode — is an inode errored  Synopsis  int is_bad_inode  struct inode * inode ;  108   Chapter 6. The Linux VFS  Arguments  inode  inode to test  Description Returns true if the inode in question has been marked as bad.  6.3. Registration and Superblocks  register_ﬁlesystem  Name register_filesystem — register a new ﬁlesystem  Synopsis  int register_filesystem  struct file_system_type * fs ;  Arguments  fs  the ﬁle system structure  109   Chapter 6. The Linux VFS  Description Adds the ﬁle system passed to the list of ﬁle systems the kernel is aware of for mount and other syscalls. Returns 0 on success, or a negative errno code on an error.  The &struct ﬁle_system_type that is passed is linked into the kernel structures and must not be freed until the ﬁle system has been unregistered.  unregister_ﬁlesystem  Name unregister_filesystem — unregister a ﬁle system  Synopsis  int unregister_filesystem  struct file_system_type * fs ;  Arguments  fs  ﬁlesystem to unregister  Description Remove a ﬁle system that was previously successfully registered with the kernel. An error is returned if the ﬁle system is not found. Zero is returned on a success.  Once this function has returned the &struct ﬁle_system_type structure may be freed or reused.  110   Chapter 6. The Linux VFS  get_super  Name get_super — get the superblock of a device  Synopsis  struct super_block * get_super  kdev_t dev ;  Arguments  dev  device to get the superblock for  Description Scans the superblock list and ﬁnds the superblock of the ﬁle system mounted on the device given. NULL is returned if no match is found.  111   Chapter 6. The Linux VFS  6.4. File Locks  posix_lock_ﬁle  Name posix_lock_file —  Synopsis  int posix_lock_file  struct file * filp, struct file_lock * caller, unsigned int wait ;  Arguments  filp  caller  wait  The ﬁle to apply the lock to  The lock to be applied  1 to retry automatically, 0 to return -EAGAIN  Description Add a POSIX style lock to a ﬁle. We merge adjacent locks whenever possible. POSIX locks are sorted by owner task, then by starting address  112   Chapter 6. The Linux VFS  Kai Petzke writes To make freeing a lock much faster, we keep a pointer to the lock before the actual one. But the real gain of the new coding was, that lock_it and unlock_it became one function.  To all purists Yes, I use a few goto’s. Just pass on to the next function.  __get_lease  Name __get_lease — revoke all outstanding leases on ﬁle  Synopsis  int __get_lease  struct inode * inode, unsigned int mode ;  Arguments  inode  mode  the inode of the ﬁle to return  the open mode  read or write   113   Chapter 6. The Linux VFS  Description get_lease  inlined for speed  has checked there already is a lease on this ﬁle. Leases are broken on a call to open or truncate. This function can sleep unless you speciﬁed O_NONBLOCK to your open.  lease_get_mtime  Name lease_get_mtime —  Synopsis  Arguments  inode  the inode  time_t lease_get_mtime  struct inode * inode ;  Description This is to force NFS clients to ﬂush their caches for ﬁles with exclusive leases. The justiﬁcation is that if someone has an exclusive lease, then they could be modiﬁying it.  114   posix_block_lock  Chapter 6. The Linux VFS  Name posix_block_lock — blocks waiting for a ﬁle lock  Synopsis  void posix_block_lock  struct file_lock * blocker, struct file_lock * waiter ;  Arguments  blocker  waiter  the lock which is blocking  the lock which conﬂicts and has to wait  Description lockd needs to block waiting for locks.  posix_unblock_lock  Name posix_unblock_lock — stop waiting for a ﬁle lock  115   Synopsis  void posix_unblock_lock  struct file_lock * waiter ;  Chapter 6. The Linux VFS  Arguments  waiter  the lock which was waiting  Description lockd needs to block waiting for locks.  lock_may_read  Name lock_may_read — checks that the region is free of locks  Synopsis  int lock_may_read  struct inode * inode, loff_t start, unsigned long len ;  116   Chapter 6. The Linux VFS  Arguments  inode  start  len  the inode that is being read  the ﬁrst byte to read  the number of bytes to read  Description Emulates Windows locking requirements. Whole-ﬁle mandatory locks  share modes  can prohibit a read and byte-range POSIX locks can prohibit a read if they overlap.  N.B. this function is only ever called from knfsd and ownership of locks is never checked.  lock_may_write  Name lock_may_write — checks that the region is free of locks  Synopsis  int lock_may_write  struct inode * inode, loff_t start, unsigned long len ;  117   Chapter 6. The Linux VFS  Arguments  inode  start  len  the inode that is being written  the ﬁrst byte to write  the number of bytes to write  Description Emulates Windows locking requirements. Whole-ﬁle mandatory locks  share modes  can prohibit a write and byte-range POSIX locks can prohibit a write if they overlap.  N.B. this function is only ever called from knfsd and ownership of locks is never checked.  fcntl_getlease  Name fcntl_getlease — Enquire what lease is currently active  Synopsis  int fcntl_getlease  struct file * filp ;  118   Chapter 6. The Linux VFS  Arguments  filp  the ﬁle  Description The value returned by this function will be one of  F_RDLCK to indicate a read-only  type II  lease is held.  F_WRLCK to indicate an exclusive lease is held.  XXX sfr & i disagree over whether F_INPROGRESS should be returned to userspace.  fcntl_setlease  Name fcntl_setlease — sets a lease on an open ﬁle  Synopsis  int fcntl_setlease  unsigned int fd, struct file * filp, long arg ;  119   Chapter 6. The Linux VFS  Arguments  fd  filp  arg  open ﬁle descriptor  ﬁle pointer  type of lease to obtain  Description Call this fcntl to establish a lease on the ﬁle. Note that you also need to call F_SETSIG to receive a signal when the lease is broken.  sys_ﬂock  Name sys_flock — flock system call.  Synopsis  asmlinkage long sys_flock  unsigned int fd, unsigned int cmd ;  120   Chapter 6. The Linux VFS  Arguments  fd  cmd  the ﬁle descriptor to lock.  the type of lock to apply.  Description Apply a FL_FLOCK style lock to an open ﬁle descriptor. The cmd can be one of  LOCK_SH -- a shared lock.  LOCK_EX -- an exclusive lock.  LOCK_UN -- remove an existing lock.  LOCK_MAND -- a ‘mandatory’ ﬂock. This exists to emulate Windows Share Modes.  LOCK_MAND can be combined with LOCK_READ or LOCK_WRITE to allow other processes read and write access respectively.  get_locks_status  Name get_locks_status — reports lock usage in  proc locks  Synopsis  int get_locks_status  char * buffer, char ** start, off_t offset, int length ;  121   Chapter 6. The Linux VFS  Arguments  buffer  start  ?  offset  length  address in userspace to write into  how far we are through the buffer  how much to read  122   Chapter 7. Linux Networking  7.1. Socket Buffer Functions  skb_queue_empty  Name skb_queue_empty — check if a queue is empty  int skb_queue_empty  struct sk_buff_head * list ;  Synopsis  Arguments  list  queue head  Description Returns true if the queue is empty, false otherwise.  123   Chapter 7. Linux Networking  skb_get  Name skb_get — reference buffer  Synopsis  Arguments  skb  buffer to reference  kfree_skb  Name kfree_skb — free an sk_buff  struct sk_buff * skb_get  struct sk_buff * skb ;  Description Makes another reference to a socket buffer and returns a pointer to the buffer.  124   Chapter 7. Linux Networking  void kfree_skb  struct sk_buff * skb ;  Synopsis  Arguments  skb  buffer to free  Description Drop a reference to the buffer and free it if the usage count has hit zero.  skb_cloned  Name skb_cloned — is the buffer a clone  Synopsis  int skb_cloned  struct sk_buff * skb ;  125   Chapter 7. Linux Networking  Arguments  skb  buffer to check  Description Returns true if the buffer was generated with skb_clone and is one of multiple shared copies of the buffer. Cloned buffers are shared data so must not be written to under normal circumstances.  skb_shared  Name skb_shared — is the buffer shared  Synopsis  int skb_shared  struct sk_buff * skb ;  Arguments  skb  buffer to check  126   Description Returns true if more than one person has a reference to this buffer.  Chapter 7. Linux Networking  skb_share_check  Name skb_share_check — check if buffer is shared and if so clone it  Synopsis  struct sk_buff * skb_share_check  struct sk_buff * skb, int pri ;  Arguments  skb  pri  buffer to check  priority for memory allocation  Description If the buffer is shared the buffer is cloned and the old copy drops a reference. A new clone with a single reference is returned. If the buffer is not shared the original buffer is returned. When being called from interrupt status or with spinlocks held pri must be GFP_ATOMIC.  127   NULL is returned on a memory allocation failure.  Chapter 7. Linux Networking  skb_unshare  Name skb_unshare — make a copy of a shared buffer  Synopsis  Arguments  skb  pri  buffer to check  priority for memory allocation  struct sk_buff * skb_unshare  struct sk_buff * skb, int pri ;  Description If the socket buffer is a clone then this function creates a new copy of the data, drops a reference count on the old copy and returns the new copy with the reference count at 1. If the buffer is not a clone the original buffer is returned. When called with a spinlock held or from interrupt state pri must be GFP_ATOMIC  NULL is returned on a memory allocation failure.  128   skb_peek  Chapter 7. Linux Networking  struct sk_buff * skb_peek  struct sk_buff_head * list_ ;  Name skb_peek —  Synopsis  Arguments  list_  list to peek at  Description Peek an &sk_buff. Unlike most other operations you _MUST_ be careful with this one. A peek leaves the buffer on the list and someone else may run off with it. You must hold the appropriate locks or have a private queue to do this.  Returns NULL for an empty list or a pointer to the head element. The reference count is not incremented and the reference is therefore volatile. Use with caution.  129   Chapter 7. Linux Networking  skb_peek_tail  Name skb_peek_tail —  Synopsis  Arguments  list_  list to peek at  struct sk_buff * skb_peek_tail  struct sk_buff_head * list_ ;  Description Peek an &sk_buff. Unlike most other operations you _MUST_ be careful with this one. A peek leaves the buffer on the list and someone else may run off with it. You must hold the appropriate locks or have a private queue to do this.  Returns NULL for an empty list or a pointer to the tail element. The reference count is not incremented and the reference is therefore volatile. Use with caution.  130   skb_queue_len  Chapter 7. Linux Networking  __u32 skb_queue_len  struct sk_buff_head * list_ ;  Name skb_queue_len — get queue length  Synopsis  Arguments  list_  list to measure  Description Return the length of an &sk_buff queue.  __skb_queue_head  Name __skb_queue_head — queue a buffer at the list head  131   Chapter 7. Linux Networking  void __skb_queue_head  struct sk_buff_head * list, struct sk_buff * newsk ;  Synopsis  Arguments  list  newsk  list to use  buffer to queue  Description Queue a buffer at the start of a list. This function takes no locks and you must therefore hold required locks before calling it.  A buffer cannot be placed on two lists at the same time.  skb_queue_head  Name skb_queue_head — queue a buffer at the list head  132   Chapter 7. Linux Networking  void skb_queue_head  struct sk_buff_head * list, struct sk_buff * newsk ;  Synopsis  Arguments  list  newsk  list to use  buffer to queue  Description Queue a buffer at the start of the list. This function takes the list lock and can be used safely with other locking &sk_buff functions safely.  A buffer cannot be placed on two lists at the same time.  __skb_queue_tail  Name __skb_queue_tail — queue a buffer at the list tail  133   Chapter 7. Linux Networking  void __skb_queue_tail  struct sk_buff_head * list, struct sk_buff * newsk ;  Synopsis  Arguments  list  newsk  list to use  buffer to queue  Description Queue a buffer at the end of a list. This function takes no locks and you must therefore hold required locks before calling it.  A buffer cannot be placed on two lists at the same time.  skb_queue_tail  Name skb_queue_tail — queue a buffer at the list tail  134   Chapter 7. Linux Networking  void skb_queue_tail  struct sk_buff_head * list, struct sk_buff * newsk ;  Synopsis  Arguments  list  newsk  list to use  buffer to queue  Description Queue a buffer at the tail of the list. This function takes the list lock and can be used safely with other locking &sk_buff functions safely.  A buffer cannot be placed on two lists at the same time.  __skb_dequeue  Name __skb_dequeue — remove from the head of the queue  Synopsis  struct sk_buff * __skb_dequeue  struct sk_buff_head * list ;  135   Chapter 7. Linux Networking  Arguments  list  list to dequeue from  Description Remove the head of the list. This function does not take any locks so must be used with appropriate locks held only. The head item is returned or NULL if the list is empty.  skb_dequeue  Name skb_dequeue — remove from the head of the queue  Synopsis  struct sk_buff * skb_dequeue  struct sk_buff_head * list ;  Arguments  list  list to dequeue from  136   Description Remove the head of the list. The list lock is taken so the function may be used safely with other locking list functions. The head item is returned or NULL if the list is empty.  Chapter 7. Linux Networking  skb_insert  Name skb_insert — insert a buffer  Synopsis  Arguments  old  newsk  buffer to insert before  buffer to insert  void skb_insert  struct sk_buff * old, struct sk_buff * newsk ;  Description Place a packet before a given packet in a list. The list locks are taken and this function is atomic with respect to other list locked calls A buffer cannot be placed on two lists at the same time.  137   Chapter 7. Linux Networking  skb_append  Name skb_append — append a buffer  Synopsis  Arguments  old  newsk  buffer to insert after  buffer to insert  void skb_append  struct sk_buff * old, struct sk_buff * newsk ;  Description Place a packet after a given packet in a list. The list locks are taken and this function is atomic with respect to other list locked calls. A buffer cannot be placed on two lists at the same time.  138   skb_unlink  Chapter 7. Linux Networking  Name skb_unlink — remove a buffer from a list  Synopsis  void skb_unlink  struct sk_buff * skb ;  Arguments  skb  buffer to remove  Description Place a packet after a given packet in a list. The list locks are taken and this function is atomic with respect to other list locked calls  Works even without knowing the list it is sitting on, which can be handy at times. It also means that THE LIST MUST EXIST when you unlink. Thus a list must have its contents unlinked before it is destroyed.  139   __skb_dequeue_tail  Chapter 7. Linux Networking  Name __skb_dequeue_tail — remove from the tail of the queue  Synopsis  struct sk_buff * __skb_dequeue_tail  struct sk_buff_head * list ;  Arguments  list  list to dequeue from  Description Remove the tail of the list. This function does not take any locks so must be used with appropriate locks held only. The tail item is returned or NULL if the list is empty.  skb_dequeue_tail  Name skb_dequeue_tail — remove from the head of the queue  140   Chapter 7. Linux Networking  struct sk_buff * skb_dequeue_tail  struct sk_buff_head * list ;  Synopsis  Arguments  list  list to dequeue from  Description Remove the head of the list. The list lock is taken so the function may be used safely with other locking list functions. The tail item is returned or NULL if the list is empty.  skb_put  Name skb_put — add data to a buffer  Synopsis  unsigned char * skb_put  struct sk_buff * skb, unsigned int len ;  141   Chapter 7. Linux Networking  Arguments  skb  len  buffer to use  amount of data to add  Description This function extends the used data area of the buffer. If this would exceed the total buffer size the kernel will panic. A pointer to the ﬁrst byte of the extra data is returned.  skb_push  Name skb_push — add data to the start of a buffer  Synopsis  unsigned char * skb_push  struct sk_buff * skb, unsigned int len ;  Arguments  skb  buffer to use  142   len  amount of data to add  Chapter 7. Linux Networking  Description This function extends the used data area of the buffer at the buffer start. If this would exceed the total buffer headroom the kernel will panic. A pointer to the ﬁrst byte of the extra data is returned.  skb_pull  Name skb_pull — remove data from the start of a buffer  Synopsis  unsigned char * skb_pull  struct sk_buff * skb, unsigned int len ;  Arguments  skb  len  buffer to use  amount of data to remove  143   Chapter 7. Linux Networking  Description This function removes data from the start of a buffer, returning the memory to the headroom. A pointer to the next data in the buffer is returned. Once the data has been pulled future pushes will overwrite the old data.  skb_headroom  Name skb_headroom — bytes at buffer head  Synopsis  int skb_headroom  const struct sk_buff * skb ;  Arguments  skb  buffer to check  Description Return the number of bytes of free space at the head of an &sk_buff.  144   skb_tailroom  Chapter 7. Linux Networking  Name skb_tailroom — bytes at buffer end  Synopsis  int skb_tailroom  const struct sk_buff * skb ;  Arguments  skb  buffer to check  Description Return the number of bytes of free space at the tail of an sk_buff  skb_reserve  Name skb_reserve — adjust headroom  145   Chapter 7. Linux Networking  void skb_reserve  struct sk_buff * skb, unsigned int len ;  Synopsis  Arguments  skb  len  buffer to alter  bytes to move  Description Increase the headroom of an empty &sk_buff by reducing the tail room. This is only allowed for an empty buffer.  skb_trim  Name skb_trim — remove end from a buffer  Synopsis  void skb_trim  struct sk_buff * skb, unsigned int len ;  146   Chapter 7. Linux Networking  Arguments  skb  len  buffer to alter  new length  Description Cut the length of a buffer down by removing data from the tail. If the buffer is already under the length speciﬁed it is not modiﬁed.  skb_orphan  Name skb_orphan — orphan a buffer  Synopsis  void skb_orphan  struct sk_buff * skb ;  Arguments  skb  buffer to orphan  147   Chapter 7. Linux Networking  Description If a buffer currently has an owner then we call the owner’s destructor function and make the skb unowned. The buffer continues to exist but is no longer charged to its former owner.  skb_queue_purge  Name skb_queue_purge — empty a list  Synopsis  void skb_queue_purge  struct sk_buff_head * list ;  Arguments  list  list to empty  Description Delete all buffers on an &sk_buff list. Each buffer is removed from the list and one reference dropped. This function takes the list lock and is atomic with respect to other list locking functions.  148   __skb_queue_purge  Chapter 7. Linux Networking  Name __skb_queue_purge — empty a list  Synopsis  void __skb_queue_purge  struct sk_buff_head * list ;  Arguments  list  list to empty  Description Delete all buffers on an &sk_buff list. Each buffer is removed from the list and one reference dropped. This function does not take the list lock and the caller must hold the relevant locks to use it.  __dev_alloc_skb  Name __dev_alloc_skb — allocate an skbuff for sending  149   Chapter 7. Linux Networking  struct sk_buff * __dev_alloc_skb  unsigned int length, int gfp_mask ;  Synopsis  Arguments  length  length to allocate  gfp_mask  get_free_pages mask, passed to alloc_skb  Description Allocate a new &sk_buff and assign it a usage count of one. The buffer has unspeciﬁed headroom built in. Users should allocate the headroom they think they need without accounting for the built in space. The built in space is used for optimisations.  NULL is returned in there is no free memory.  dev_alloc_skb  Name dev_alloc_skb — allocate an skbuff for sending  150   Chapter 7. Linux Networking  struct sk_buff * dev_alloc_skb  unsigned int length ;  Synopsis  Arguments  length  length to allocate  Description Allocate a new &sk_buff and assign it a usage count of one. The buffer has unspeciﬁed headroom built in. Users should allocate the headroom they think they need without accounting for the built in space. The built in space is used for optimisations.  NULL is returned in there is no free memory. Although this function allocates memory it can be called from an interrupt.  skb_cow  Name skb_cow — copy header of skb when it is required  Synopsis  int skb_cow  struct sk_buff * skb, unsigned int headroom ;  151   Chapter 7. Linux Networking  Arguments  skb  buffer to cow  headroom  needed headroom  Description If the skb passed lacks sufﬁcient headroom or its data part is shared, data is reallocated. If reallocation fails, an error is returned and original skb is not changed.  The result is skb with writable area skb->head...skb->tail and at least headroom of space at head.  skb_over_panic  Name skb_over_panic — private function  Synopsis  void skb_over_panic  struct sk_buff * skb, int sz, void * here ;  152   Chapter 7. Linux Networking  Arguments  skb  sz  buffer  size  here  address  Description Out of line support code for skb_put. Not user callable.  skb_under_panic  Name skb_under_panic — private function  Synopsis  void skb_under_panic  struct sk_buff * skb, int sz, void * here ;  153   Chapter 7. Linux Networking  Arguments  skb  sz  buffer  size  here  address  Description Out of line support code for skb_push. Not user callable.  alloc_skb  Name alloc_skb — allocate a network buffer  Synopsis  struct sk_buff * alloc_skb  unsigned int size, int gfp_mask ;  154   Chapter 7. Linux Networking  Arguments  size  size to allocate  gfp_mask  allocation mask  Description Allocate a new &sk_buff. The returned buffer has no headroom and a tail room of size bytes. The object has a reference count of one. The return is the buffer. On a failure the return is NULL.  Buffers may only be allocated from interrupts using a gfp_mask of GFP_ATOMIC.  __kfree_skb  Name __kfree_skb — private function  Synopsis  void __kfree_skb  struct sk_buff * skb ;  155   Chapter 7. Linux Networking  Arguments  skb  buffer  Description Free an sk_buff. Release anything attached to the buffer. Clean the state. This is an internal helper function. Users should always call kfree_skb  skb_clone  Name skb_clone — duplicate an sk_buff  Synopsis  Arguments  skb  buffer to clone  gfp_mask  allocation priority  struct sk_buff * skb_clone  struct sk_buff * skb, int gfp_mask ;  156   Chapter 7. Linux Networking  Description Duplicate an &sk_buff. The new one is not owned by a socket. Both copies share the same packet data but not structure. The new buffer has a reference count of 1. If the allocation fails the function returns NULL otherwise the new buffer is returned.  If this function is called from an interrupt gfp_mask must be GFP_ATOMIC.  skb_copy  Name skb_copy — create private copy of an sk_buff  Synopsis  struct sk_buff * skb_copy  const struct sk_buff * skb, int gfp_mask ;  Arguments  skb  buffer to copy  gfp_mask  allocation priority  157   Chapter 7. Linux Networking  Description Make a copy of both an &sk_buff and its data. This is used when the caller wishes to modify the data and needs a private copy of the data to alter. Returns NULL on failure or the pointer to the buffer on success. The returned buffer has a reference count of 1.  As by-product this function converts non-linear &sk_buff to linear one, so that &sk_buff becomes completely private and caller is allowed to modify all the data of returned buffer. This means that this function is not recommended for use in circumstances when only header is going to be modiﬁed. Use pskb_copy instead.  pskb_copy  Name pskb_copy — create copy of an sk_buff with private head.  struct sk_buff * pskb_copy  struct sk_buff * skb, int gfp_mask ;  Synopsis  Arguments  skb  buffer to copy  gfp_mask  allocation priority  158   Chapter 7. Linux Networking  Description Make a copy of both an &sk_buff and part of its data, located in header. Fragmented data remain shared. This is used when the caller wishes to modify only header of &sk_buff and needs private copy of the header to alter. Returns NULL on failure or the pointer to the buffer on success. The returned buffer has a reference count of 1.  pskb_expand_head  Name pskb_expand_head — reallocate header of sk_buff  Synopsis  int pskb_expand_head  struct sk_buff * skb, int nhead, int ntail, int gfp_mask ;  Arguments  skb  nhead  ntail  buffer to reallocate  room to add at head  room to add at tail  159   gfp_mask  allocation priority  Chapter 7. Linux Networking  Description Expands  or creates identical copy, if &nhead and &ntail are zero  header of skb. &sk_buff itself is not changed. &sk_buff MUST have reference count of 1. Returns zero in the case of success or error, if expansion failed. In the last case, &sk_buff is not changed.  All the pointers pointing into skb header may change and must be reloaded after call to this function.  skb_copy_expand  Name skb_copy_expand — copy and expand sk_buff  struct sk_buff * skb_copy_expand  const struct sk_buff * skb, int newheadroom, int newtailroom, int gfp_mask ;  Synopsis  Arguments  skb  buffer to copy  160   Chapter 7. Linux Networking  newheadroom  new free bytes at head  newtailroom  new free bytes at tail  gfp_mask  allocation priority  Description Make a copy of both an &sk_buff and its data and while doing so allocate additional space.  This is used when the caller wishes to modify the data and needs a private copy of the data to alter as well as more space for new ﬁelds. Returns NULL on failure or the pointer to the buffer on success. The returned buffer has a reference count of 1.  You must pass GFP_ATOMIC as the allocation priority if this function is called from an interrupt.  __pskb_pull_tail  Name __pskb_pull_tail — advance tail of skb header  Synopsis  unsigned char * __pskb_pull_tail  struct sk_buff * skb, int delta ;  161   Chapter 7. Linux Networking  Arguments  skb  delta  buffer to reallocate  number of bytes to advance tail  Description The function makes a sense only on a fragmented &sk_buff, it expands header moving its tail forward and copying necessary data from fragmented part.  &sk_buff MUST have reference count of 1.  Returns NULL  and &sk_buff does not change  if pull failed or value of new tail of skb in the case of success.  All the pointers pointing into skb header may change and must be reloaded after call to this function.  7.2. Socket Filter  sk_run_ﬁlter  Name sk_run_filter — run a ﬁlter on a socket  162   Synopsis  Chapter 7. Linux Networking  int sk_run_filter  struct sk_buff * skb, struct sock_filter * filter, int flen ;  buffer to run the ﬁlter on  Arguments  skb  filter  ﬁlter to apply  flen  length of ﬁlter  Description Decode and apply ﬁlter instructions to the skb->data. Return length to keep, 0 for none. skb is the data we are ﬁltering, ﬁlter is the array of ﬁlter instructions, and len is the number of ﬁlter blocks in the array.  sk_chk_ﬁlter  Name sk_chk_filter — verify socket ﬁlter code  163   Chapter 7. Linux Networking  int sk_chk_filter  struct sock_filter * filter, int flen ;  Synopsis  Arguments  filter  flen  ﬁlter to verify  length of ﬁlter  Description Check the user’s ﬁlter code. If we let some ugly ﬁlter code slip through kaboom! The ﬁlter must contain no references or jumps that are out of range, no illegal instructions and no backward jumps. It must end with a RET instruction  Returns 0 if the rule set is legal or a negative errno code if not.  164   Chapter 8. Network device support  8.1. Driver Support  init_etherdev  Name init_etherdev — Register ethernet device  Synopsis  struct net_device * init_etherdev  struct net_device * dev, int sizeof_priv ;  Arguments  dev  sizeof_priv  An ethernet device structure to be ﬁlled in, or NULL if a new struct should be allocated.  Size of additional driver-private structure to be allocated for this ethernet device  Description Fill in the ﬁelds of the device structure with ethernet-generic values.  165   Chapter 8. Network device support  If no device structure is passed, a new one is constructed, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  If an empty string area is passed as dev->name, or a new structure is made, a new name string is constructed.  alloc_etherdev  Name alloc_etherdev — Allocates and sets up an ethernet device  struct net_device * alloc_etherdev  int sizeof_priv ;  Synopsis  Arguments  sizeof_priv  Size of additional driver-private structure to be allocated for this ethernet device  Description Fill in the ﬁelds of the device structure with ethernet-generic values. Basically does everything except registering the device.  Constructs a new net device, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  166   Chapter 8. Network device support  init_fddidev  Name init_fddidev — Register FDDI device  Synopsis  struct net_device * init_fddidev  struct net_device * dev, int sizeof_priv ;  Arguments  dev  sizeof_priv  A FDDI device structure to be ﬁlled in, or NULL if a new struct should be allocated.  Size of additional driver-private structure to be allocated for this ethernet device  Description Fill in the ﬁelds of the device structure with FDDI-generic values.  If no device structure is passed, a new one is constructed, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  If an empty string area is passed as dev->name, or a new structure is made, a new name string is constructed.  167   Chapter 8. Network device support  alloc_fddidev  Name alloc_fddidev — Register FDDI device  Synopsis  Arguments  sizeof_priv  struct net_device * alloc_fddidev  int sizeof_priv ;  Size of additional driver-private structure to be allocated for this FDDI device  Description Fill in the ﬁelds of the device structure with FDDI-generic values.  Constructs a new net device, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  168   init_hippi_dev  Chapter 8. Network device support  Name init_hippi_dev — Register HIPPI device  Synopsis  struct net_device * init_hippi_dev  struct net_device * dev, int sizeof_priv ;  Arguments  dev  sizeof_priv  A HIPPI device structure to be ﬁlled in, or NULL if a new struct should be allocated.  Size of additional driver-private structure to be allocated for this ethernet device  Description Fill in the ﬁelds of the device structure with HIPPI-generic values.  If no device structure is passed, a new one is constructed, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  If an empty string area is passed as dev->name, or a new structure is made, a new name string is constructed.  169   alloc_hippi_dev  Chapter 8. Network device support  Name alloc_hippi_dev — Register HIPPI device  struct net_device * alloc_hippi_dev  int sizeof_priv ;  Synopsis  Arguments  sizeof_priv  Size of additional driver-private structure to be allocated for this HIPPI device  Description Fill in the ﬁelds of the device structure with HIPPI-generic values.  Constructs a new net device, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  init_trdev  Name init_trdev — Register token ring device  170   Synopsis  Arguments  dev  sizeof_priv  Chapter 8. Network device support  struct net_device * init_trdev  struct net_device * dev, int sizeof_priv ;  A token ring device structure to be ﬁlled in, or NULL if a new struct should be allocated.  Size of additional driver-private structure to be allocated for this ethernet device  Description Fill in the ﬁelds of the device structure with token ring-generic values.  If no device structure is passed, a new one is constructed, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  If an empty string area is passed as dev->name, or a new structure is made, a new name string is constructed.  alloc_trdev  Name alloc_trdev — Register token ring device  171   Chapter 8. Network device support  struct net_device * alloc_trdev  int sizeof_priv ;  Synopsis  Arguments  sizeof_priv  Size of additional driver-private structure to be allocated for this token ring device  Description Fill in the ﬁelds of the device structure with token ring-generic values.  Constructs a new net device, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  init_fcdev  Name init_fcdev — Register ﬁbre channel device  Synopsis  struct net_device * init_fcdev  struct net_device * dev, int sizeof_priv ;  172   Chapter 8. Network device support  Arguments  dev  sizeof_priv  A ﬁbre channel device structure to be ﬁlled in, or NULL if a new struct should be allocated.  Size of additional driver-private structure to be allocated for this ethernet device  Description Fill in the ﬁelds of the device structure with ﬁbre channel-generic values.  If no device structure is passed, a new one is constructed, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  If an empty string area is passed as dev->name, or a new structure is made, a new name string is constructed.  alloc_fcdev  Name alloc_fcdev — Register ﬁbre channel device  Synopsis  struct net_device * alloc_fcdev  int sizeof_priv ;  173   Chapter 8. Network device support  Arguments  sizeof_priv  Size of additional driver-private structure to be allocated for this ﬁbre channel device  Description Fill in the ﬁelds of the device structure with ﬁbre channel-generic values.  Constructs a new net device, complete with a private data area of size sizeof_priv. A 32-byte  not bit  alignment is enforced for this private data area.  dev_add_pack  Name dev_add_pack — add packet handler  Synopsis  void dev_add_pack  struct packet_type * pt ;  Arguments  pt  packet type declaration  174   Description Add a protocol handler to the networking stack. The passed &packet_type is linked into kernel lists and may not be freed until it has been removed from the kernel lists.  Chapter 8. Network device support  dev_remove_pack  Name dev_remove_pack — remove packet handler  Synopsis  void dev_remove_pack  struct packet_type * pt ;  Arguments  pt  packet type declaration  Description Remove a protocol handler that was previously added to the kernel protocol handlers by dev_add_pack. The passed &packet_type is removed from the kernel lists and can be freed or reused once this function returns.  175   __dev_get_by_name  Chapter 8. Network device support  Name __dev_get_by_name — ﬁnd a device by its name  struct net_device * __dev_get_by_name  const char * name ;  Synopsis  Arguments  name  name to ﬁnd  Description Find an interface by name. Must be called under RTNL semaphore or dev_base_lock. If the name is found a pointer to the device is returned. If the name is not found then NULL is returned. The reference counters are not incremented so the caller must be careful with locks.  dev_get_by_name  Name dev_get_by_name — ﬁnd a device by its name  176   Chapter 8. Network device support  struct net_device * dev_get_by_name  const char * name ;  Synopsis  Arguments  name  name to ﬁnd  Description Find an interface by name. This can be called from any context and does its own locking. The returned handle has the usage count incremented and the caller must use dev_put to release it when it is no longer needed. NULL is returned if no matching device is found.  dev_get  Name dev_get — test if a device exists  Synopsis  int dev_get  const char * name ;  177   Chapter 8. Network device support  Arguments  name  name to test for  Description Test if a name exists. Returns true if the name is found. In order to be sure the name is not allocated or removed during the test the caller must hold the rtnl semaphore.  This function primarily exists for back compatibility with older drivers.  __dev_get_by_index  Name __dev_get_by_index — ﬁnd a device by its iﬁndex  struct net_device * __dev_get_by_index  int ifindex ;  Synopsis  Arguments  ifindex  index of device  178   Chapter 8. Network device support  Description Search for an interface by index. Returns NULL if the device is not found or a pointer to the device. The device has not had its reference counter increased so the caller must be careful about locking. The caller must hold either the RTNL semaphore or dev_base_lock.  dev_get_by_index  Name dev_get_by_index — ﬁnd a device by its iﬁndex  struct net_device * dev_get_by_index  int ifindex ;  Synopsis  Arguments  ifindex  index of device  Description Search for an interface by index. Returns NULL if the device is not found or a pointer to the device. The device returned has had a reference added and the pointer is safe until the user calls dev_put to indicate they have ﬁnished with it.  179   dev_alloc_name  Chapter 8. Network device support  Name dev_alloc_name — allocate a name for a device  Synopsis  int dev_alloc_name  struct net_device * dev, const char * name ;  Arguments  dev  name  device  name format string  Description Passed a format string - eg "ltd" it will try and ﬁnd a suitable id. Not efﬁcient for many devices, not called a lot. The caller must hold the dev_base or rtnl lock while allocating the name and adding the device in order to avoid duplicates. Returns the number of the unit assigned or a negative errno code.  180   dev_alloc  Chapter 8. Network device support  Name dev_alloc — allocate a network device and name  Synopsis  struct net_device * dev_alloc  const char * name, int * err ;  Arguments  name  err  name format string  error return pointer  Description Passed a format string, eg. "ltd", it will allocate a network device and space for the name. NULL is returned if no memory is available. If the allocation succeeds then the name is assigned and the device pointer returned. NULL is returned if the name allocation failed. The cause of an error is returned as a negative errno code in the variable err points to.  The caller must hold the dev_base or RTNL locks when doing this in order to avoid duplicate name allocations.  181   netdev_state_change  Chapter 8. Network device support  Name netdev_state_change — device changes state  Synopsis  void netdev_state_change  struct net_device * dev ;  Arguments  dev  device to cause notiﬁcation  Description Called to indicate a device has changed state. This function calls the notiﬁer chains for netdev_chain and sends a NEWLINK message to the routing socket.  dev_load  Name dev_load — load a network module  182   Synopsis  void dev_load  const char * name ;  Chapter 8. Network device support  Arguments  name  name of interface  Description If a network interface is not present and the process has suitable privileges this function loads the module. If module loading is not available in this kernel then it becomes a nop.  dev_open  Name dev_open — prepare an interface for use.  Synopsis  int dev_open  struct net_device * dev ;  183   Chapter 8. Network device support  Arguments  dev  device to open  Description Takes a device from down to up state. The device’s private open function is invoked and then the multicast lists are loaded. Finally the device is moved into the up state and a NETDEV_UP message is sent to the netdev notiﬁer chain.  Calling this function on an active interface is a nop. On a failure a negative errno code is returned.  dev_close  Name dev_close — shutdown an interface.  Synopsis  int dev_close  struct net_device * dev ;  Arguments  dev  device to shutdown  184   Chapter 8. Network device support  Description This function moves an active device into down state. A NETDEV_GOING_DOWN is sent to the netdev notiﬁer chain. The device is then deactivated and ﬁnally a NETDEV_DOWN is sent to the notiﬁer chain.  register_netdevice_notiﬁer  Name register_netdevice_notifier — register a network notiﬁer block  int register_netdevice_notifier  struct notifier_block * nb ;  Synopsis  Arguments  nb  notiﬁer  Description Register a notiﬁer to be called when network device events occur. The notiﬁer passed is linked into the kernel structures and must not be reused until it has been unregistered. A negative errno code is returned on a failure.  185   unregister_netdevice_notiﬁer  Chapter 8. Network device support  Name unregister_netdevice_notifier — unregister a network notiﬁer block  int unregister_netdevice_notifier  struct notifier_block * nb ;  Synopsis  Arguments  nb  notiﬁer  Description Unregister a notiﬁer previously registered by register_netdevice_notifier. The notiﬁer is unlinked into the kernel structures and may then be reused. A negative errno code is returned on a failure.  dev_queue_xmit  Name dev_queue_xmit — transmit a buffer  186   Synopsis  int dev_queue_xmit  struct sk_buff * skb ;  Chapter 8. Network device support  Arguments  skb  buffer to transmit  Description Queue a buffer for transmission to a network device. The caller must have set the device and priority and built the buffer before calling this function. The function can be called from an interrupt.  A negative errno code is returned on a failure. A success does not guarantee the frame will be transmitted as it may be dropped due to congestion or trafﬁc shaping.  netif_rx  Name netif_rx — post buffer to the network code  Synopsis  int netif_rx  struct sk_buff * skb ;  187   Chapter 8. Network device support  Arguments  skb  buffer to post  Description This function receives a packet from a device driver and queues it for the upper  protocol  levels to process. It always succeeds. The buffer may be dropped during processing for congestion control or by the protocol layers.  return values NET_RX_SUCCESS  no congestion  NET_RX_CN_LOW  low congestion  NET_RX_CN_MOD  moderate congestion  NET_RX_CN_HIGH  high congestion  NET_RX_DROP  packet was dropped   net_call_rx_atomic  Name net_call_rx_atomic —  Synopsis  void net_call_rx_atomic  void  *fn   void  ;  188   Chapter 8. Network device support  Arguments  fn  function to call  register_gifconf  Description Make a function call that is atomic with respect to the protocol layers.  Name register_gifconf — register a SIOCGIF handler  Synopsis  int register_gifconf  unsigned int family, gifconf_func_t * gifconf ;  Arguments  family  gifconf  Address family  Function handler  189   Description Register protocol dependent address dumping routines. The handler that is passed must not be freed or reused until it has been replaced by another handler.  Chapter 8. Network device support  netdev_set_master  Name netdev_set_master — set up master slave pair  Synopsis  int netdev_set_master  struct net_device * slave, struct net_device * master ;  Arguments  slave  master  slave device  new master device  Description Changes the master device of the slave. Pass NULL to break the bonding. The caller must hold the RTNL semaphore. On a failure a negative errno code is returned. On  190   success the reference counts are adjusted, RTM_NEWLINK is sent to the routing socket and the function returns zero.  Chapter 8. Network device support  dev_set_promiscuity  Name dev_set_promiscuity — update promiscuity count on a device  void dev_set_promiscuity  struct net_device * dev, int inc ;  Synopsis  Arguments  dev  inc  device  modiﬁer  Description Add or remove promsicuity from a device. While the count in the device remains above zero the interface remains promiscuous. Once it hits zero the device reverts back to normal ﬁltering operation. A negative inc value is used to drop promiscuity on the device.  191   dev_set_allmulti  Chapter 8. Network device support  Name dev_set_allmulti — update allmulti count on a device  void dev_set_allmulti  struct net_device * dev, int inc ;  Synopsis  Arguments  dev  inc  device  modiﬁer  Description Add or remove reception of all multicast frames to a device. While the count in the device remains above zero the interface remains listening to all interfaces. Once it hits zero the device reverts back to normal ﬁltering operation. A negative inc value is used to drop the counter when releasing a resource needing all multicasts.  192   dev_ioctl  Chapter 8. Network device support  Name dev_ioctl — network device ioctl  Synopsis  int dev_ioctl  unsigned int cmd, void * arg ;  Arguments  cmd  arg  command to issue  pointer to a struct ifreq in user space  Description Issue ioctl functions to devices. This is normally called by the user space syscall interfaces but can sometimes be useful for other purposes. The return value is the return from the syscall if positive or a negative errno code on error.  193   dev_new_index  Chapter 8. Network device support  Name dev_new_index — allocate an iﬁndex  Synopsis  int dev_new_index   void ;  Arguments  void  no arguments  Description  Returns a suitable unique value for a new device interface number. The caller must hold the rtnl semaphore or the dev_base_lock to be sure it remains unique.  netdev_ﬁnish_unregister  Name netdev_finish_unregister — complete unregistration  194   Chapter 8. Network device support  int netdev_finish_unregister  struct net_device * dev ;  Synopsis  Arguments  dev  device  Description Destroy and free a dead device. A value of zero is returned on success.  unregister_netdevice  Name unregister_netdevice — remove device from the kernel  Synopsis  int unregister_netdevice  struct net_device * dev ;  195   Chapter 8. Network device support  Arguments  dev  device  Description This function shuts down a device interface and removes it from the kernel tables. On success 0 is returned, on a failure a negative errno code is returned.  Callers must hold the rtnl semaphore. See the comment at the end of Space.c for details about the locking. You may want unregister_netdev instead of this.  8.2. 8390 Based Network Cards  ei_open  Name ei_open — Open initialize the board.  Synopsis  int ei_open  struct net_device * dev ;  196   Chapter 8. Network device support  Arguments  dev  network device to initialize  Description This routine goes all-out, setting everything up anew at each open, even though many of these registers should only need to be set once at boot.  ei_close  Name ei_close — shut down network device  Synopsis  int ei_close  struct net_device * dev ;  Arguments  dev  network device to close  197   Description Opposite of ei_open. Only used when “ifconﬁg   down” is done.  Chapter 8. Network device support  ei_tx_timeout  Name ei_tx_timeout — handle transmit time out condition  void ei_tx_timeout  struct net_device * dev ;  Synopsis  Arguments  dev  network device which has apparently fallen asleep  Description Called by kernel when device never acknowledges a transmit has completed  or failed  - i.e. never posted a Tx related interrupt.  198   ei_interrupt  Chapter 8. Network device support  Name ei_interrupt — handle the interrupts from an 8390  Synopsis  void ei_interrupt  int irq, void * dev_id, struct pt_regs * regs ;  Arguments  irq  dev_id  interrupt number  regs  unused  a pointer to the net_device  Description Handle the ether interface interrupts. We pull packets from the 8390 via the card speciﬁc functions and ﬁre them at the networking stack. We also handle transmit completions and wake the transmit path if neccessary. We also update the counters and do other housekeeping as needed.  199   ethdev_init  Chapter 8. Network device support  Name ethdev_init — init rest of 8390 device struct  Synopsis  int ethdev_init  struct net_device * dev ;  Arguments  dev  network device structure to init  Description Initialize the rest of the 8390 device structure. Do NOT __init this, as it is used by 8390 based modular drivers too.  NS8390_init  Name NS8390_init — initialize 8390 hardware  200   Synopsis  Chapter 8. Network device support  void NS8390_init  struct net_device * dev, int startp ;  Arguments  dev  startp  network device to initialize  Description Must be called with lock held.  boolean. non-zero value to initiate chip processing  8.3. Synchronous PPP  sppp_input  Name sppp_input — receive and process a WAN PPP frame  201   Synopsis  Chapter 8. Network device support  void sppp_input  struct net_device * dev, struct sk_buff * skb ;  Arguments  dev  skb  The device it arrived on  The buffer to process  Description This can be called directly by cards that do not have timing constraints but is normally called from the network layer after interrupt servicing to process frames queued via netif_rx.  We process the options in the card. If the frame is destined for the protocol stacks then it requeues the frame for the upper level protocol. If it is a control from it is processed and discarded here.  sppp_close  Name sppp_close — close down a synchronous PPP or Cisco HDLC link  202   Chapter 8. Network device support  int sppp_close  struct net_device * dev ;  Synopsis  Arguments  dev  The network device to drop the link of  Description This drops the logical interface to the channel. It is not done politely as we assume we will also be dropping DTR. Any timeouts are killed.  sppp_open  Name sppp_open — open a synchronous PPP or Cisco HDLC link  Synopsis  int sppp_open  struct net_device * dev ;  203   Chapter 8. Network device support  Arguments  dev  Network device to activate  Description Close down any existing synchronous session and commence from scratch. In the PPP case this means negotiating LCP IPCP and friends, while for Cisco HDLC we simply need to start sending keepalives  sppp_reopen  Name sppp_reopen — notify of physical link loss  Synopsis  int sppp_reopen  struct net_device * dev ;  Arguments  dev  Device that lost the link  204   Chapter 8. Network device support  Description This function informs the synchronous protocol code that the underlying link died  for example a carrier drop on X.21   We increment the magic numbers to ensure that if the other end failed to notice we will correctly start a new session. It happens do to the nature of telco circuits is that you can lose carrier on one endonly.  Having done this we go back to negotiating. This function may be called from an interrupt context.  sppp_change_mtu  Name sppp_change_mtu — Change the link MTU  Synopsis  int sppp_change_mtu  struct net_device * dev, int new_mtu ;  Arguments  dev  new_mtu  New MTU  Device to change MTU on  205   Description Change the MTU on the link. This can only be called with the link down. It returns an error if the link is up or the mtu is out of range.  Chapter 8. Network device support  sppp_do_ioctl  Name sppp_do_ioctl — Ioctl handler for ppp hdlc  Synopsis  int sppp_do_ioctl  struct net_device * dev, struct ifreq * ifr, int cmd ;  Arguments  Device subject to ioctl  dev  ifr  cmd  Interface request block from the user  Command that is being issued  206   Chapter 8. Network device support  Description This function handles the ioctls that may be issued by the user to control the settings of a PPP HDLC link. It does both busy and security checks. This function is intended to be wrapped by callers who wish to add additional ioctl calls of their own.  sppp_attach  Name sppp_attach — attach synchronous PPP HDLC to a device  Synopsis  void sppp_attach  struct ppp_device * pd ;  Arguments  pd  PPP device to initialise  Description This initialises the PPP HDLC support on an interface. At the time of calling the dev element must point to the network device that this interface is attached to. The interface should not yet be registered.  207   sppp_detach  Chapter 8. Network device support  Name sppp_detach — release PPP resources from a device  Synopsis  void sppp_detach  struct net_device * dev ;  Arguments  dev  Network device to release  Description Stop and free up any PPP HDLC resources used by this interface. This must be called before the device is freed.  208   Chapter 9. Module Support  9.1. Module Loading  request_module  Name request_module — try to load a kernel module  int request_module  const char * module_name ;  Synopsis  Arguments  module_name  Name of module  Description Load a module using the user mode module loader. The function returns zero on success or a negative errno code on failure. Note that a successful module load does not mean the module did not then unload and exit on an error of its own. Callers must check that the service they requested is now available not blindly invoke it.  If module auto-loading support is disabled then this function becomes a no-operation.  209   call_usermodehelper  Chapter 9. Module Support  Name call_usermodehelper — start a usermode application  Synopsis  int call_usermodehelper  char * path, char ** argv, char ** envp ;  Arguments  path  argv  envp  pathname for the application  null-terminated argument list  null-terminated environment list  Description Runs a user-space application. The application is started asynchronously. It runs as a child of keventd. It runs with full root capabilities. keventd silently reaps the child when it exits.  Must be called from process context. Returns zero on success, else a negative error code.  210   9.2. Inter Module support  inter_module_register  Chapter 9. Module Support  Name inter_module_register — register a new set of inter module data.  void inter_module_register  const char * im_name, struct module * owner, const void * userdata ;  Synopsis  Arguments  im_name  owner  userdata  an arbitrary string to identify the data, must be unique  module that is registering the data, always use THIS_MODULE  pointer to arbitrary userdata to be registered  Description Check that the im_name has not already been registered, complain if it has. For new data, add it to the inter_module_entry list.  211   inter_module_unregister  Chapter 9. Module Support  Name inter_module_unregister — unregister a set of inter module data.  void inter_module_unregister  const char * im_name ;  Synopsis  Arguments  im_name  an arbitrary string to identify the data, must be unique  Description Check that the im_name has been registered, complain if it has not. For existing data, remove it from the inter_module_entry list.  inter_module_get  Name inter_module_get — return arbitrary userdata from another module.  212   Chapter 9. Module Support  const void * inter_module_get  const char * im_name ;  Synopsis  Arguments  im_name  an arbitrary string to identify the data, must be unique  Description If the im_name has not been registered, return NULL. Try to increment the use count on the owning module, if that fails then return NULL. Otherwise return the userdata.  inter_module_get_request  Name inter_module_get_request — im get with automatic request_module.  Synopsis  const void * inter_module_get_request  const char * im_name, const char * modname ;  213   Chapter 9. Module Support  Arguments  im_name  modname  an arbitrary string to identify the data, must be unique  module that is expected to register im_name  Description If inter_module_get fails, do request_module then retry.  inter_module_put  Name inter_module_put — release use of data from another module.  void inter_module_put  const char * im_name ;  Synopsis  Arguments  im_name  an arbitrary string to identify the data, must be unique  214   Description If the im_name has not been registered, complain, otherwise decrement the use count on the owning module.  Chapter 9. Module Support  215   Chapter 10. Hardware Interfaces  10.1. Interrupt Handling  disable_irq_nosync  Name disable_irq_nosync — disable an irq without waiting  Synopsis  void disable_irq_nosync  unsigned int irq ;  Arguments  irq  Interrupt to disable  Description Disable the selected interrupt line. Disables and Enables are nested. Unlike disable_irq, this function does not ensure existing instances of the IRQ handler have completed before returning.  This function may be called from IRQ context.  216   disable_irq  Chapter 10. Hardware Interfaces  Name disable_irq — disable an irq and wait for completion  Synopsis  void disable_irq  unsigned int irq ;  Arguments  irq  Interrupt to disable  Description Disable the selected interrupt line. Enables and Disables are nested. This function waits for any pending IRQ handlers for this interrupt to complete before returning. If you use this function while holding a resource the IRQ handler may need you will deadlock.  This function may be called - with care - from IRQ context.  enable_irq  Name enable_irq — enable handling of an irq  217   Synopsis  void enable_irq  unsigned int irq ;  Chapter 10. Hardware Interfaces  Arguments  irq  Interrupt to enable  Description Undoes the effect of one call to disable_irq. If this matches the last disable, processing of interrupts on this IRQ line is re-enabled.  This function may be called from IRQ context.  probe_irq_mask  Name probe_irq_mask — scan a bitmap of interrupt lines  Synopsis  unsigned int probe_irq_mask  unsigned long val ;  218   Chapter 10. Hardware Interfaces  Arguments  val  mask of interrupts to consider  Description Scan the ISA bus interrupt lines and return a bitmap of active interrupts. The interrupt probe logic state is then returned to its previous value.  Note we need to scan all the irq’s even though we will only return ISA irq numbers - just so that we reset them all to a known state.  10.2. MTRR Handling  mtrr_add  Name mtrr_add — Add a memory type region  Synopsis  int mtrr_add  unsigned long base, unsigned long size, unsigned int type, char increment ;  219   Chapter 10. Hardware Interfaces  Physical base address of region  Arguments  base  size  type  Physical size of region  Type of MTRR desired  increment  If this is true do usage counting on the region  Description Memory type region registers control the caching on newer Intel and non Intel processors. This function allows drivers to request an MTRR is added. The details and hardware speciﬁcs of each processor’s implementation are hidden from the caller, but nevertheless the caller should expect to need to provide a power of two size on an equivalent power of two boundary.  If the region cannot be added either because all regions are in use or the CPU cannot support it a negative value is returned. On success the register number for this entry is returned, but should be treated as a cookie only.  On a multiprocessor machine the changes are made to all processors. This is required on x86 by the Intel processors.  The available types are  MTRR_TYPE_UNCACHABLE - No caching  MTRR_TYPE_WRBACK - Write data back in bursts whenever  MTRR_TYPE_WRCOMB - Write data back soon but allow bursts  MTRR_TYPE_WRTHROUGH - Cache reads but not writes  220   BUGS Needs a quiet ﬂag for the cases where drivers do not mind failures and do not wish system log messages to be sent.  Chapter 10. Hardware Interfaces  int mtrr_del  int reg, unsigned long base, unsigned long size ;  mtrr_del  Name mtrr_del — delete a memory type region  Synopsis  Arguments  Register returned by mtrr_add  reg  base  size  Physical base address  Size of region  Description If register is supplied then base and size are ignored. This is how drivers should call it.  221   Releases an MTRR region. If the usage count drops to zero the register is freed and the region returns to default state. On success the register is returned, on failure a negative error code.  Chapter 10. Hardware Interfaces  10.3. PCI Support Library  pci_ﬁnd_slot  Name pci_find_slot — locate PCI device from a given PCI slot  struct pci_dev * pci_find_slot  unsigned int bus, unsigned int devfn ;  Synopsis  Arguments  bus  devfn  number of PCI bus on which desired PCI device resides  encodes number of PCI slot in which the desired PCI device resides and the logical device number within that slot in case of multi-function devices.  222   Chapter 10. Hardware Interfaces  Description Given a PCI bus and slot function number, the desired PCI device is located in system global list of PCI devices. If the device is found, a pointer to its data structure is returned. If no device is found, NULL is returned.  pci_ﬁnd_subsys  Name pci_find_subsys — begin or continue searching for a PCI device by vendor subvendor device subdevice id  struct pci_dev * pci_find_subsys  unsigned int vendor, unsigned int device, unsigned int ss_vendor, unsigned int ss_device, const struct pci_dev * from ;  Synopsis  Arguments  vendor  device  ss_vendor  PCI vendor id to match, or PCI_ANY_ID to match all vendor ids  PCI device id to match, or PCI_ANY_ID to match all device ids  PCI subsystem vendor id to match, or PCI_ANY_ID to match all vendor ids  223   Chapter 10. Hardware Interfaces  ss_device  from  PCI subsystem device id to match, or PCI_ANY_ID to match all device ids  Previous PCI device found in search, or NULL for new search.  Description Iterates through the list of known PCI devices. If a PCI device is found with a matching vendor, device, ss_vendor and ss_device, a pointer to its device structure is returned. Otherwise, NULL is returned. A new search is initiated by passing NULL to the from argument. Otherwise if from is not NULL, searches continue from next device on the global list.  pci_ﬁnd_device  Name pci_find_device — begin or continue searching for a PCI device by vendor device id  Synopsis  struct pci_dev * pci_find_device  unsigned int vendor, unsigned int device, const struct pci_dev * from ;  224   Chapter 10. Hardware Interfaces  Arguments  vendor  device  from  PCI vendor id to match, or PCI_ANY_ID to match all vendor ids  PCI device id to match, or PCI_ANY_ID to match all device ids  Previous PCI device found in search, or NULL for new search.  Description Iterates through the list of known PCI devices. If a PCI device is found with a matching vendor and device, a pointer to its device structure is returned. Otherwise, NULL is returned. A new search is initiated by passing NULL to the from argument. Otherwise if from is not NULL, searches continue from next device on the global list.  pci_ﬁnd_class  Name pci_find_class — begin or continue searching for a PCI device by class  Synopsis  struct pci_dev * pci_find_class  unsigned int class, const struct pci_dev * from ;  225   Chapter 10. Hardware Interfaces  Arguments  class  from  search for a PCI device with this class designation  Previous PCI device found in search, or NULL for new search.  Description Iterates through the list of known PCI devices. If a PCI device is found with a matching class, a pointer to its device structure is returned. Otherwise, NULL is returned. A new search is initiated by passing NULL to the from argument. Otherwise if from is not NULL, searches continue from next device on the global list.  pci_ﬁnd_capability  Name pci_find_capability — query for devices’ capabilities  Synopsis  int pci_find_capability  struct pci_dev * dev, int cap ;  226   Chapter 10. Hardware Interfaces  Arguments  dev  cap  PCI device to query  capability code  Description Tell if a device supports a given PCI capability. Returns the address of the requested capability structure within the device’s PCI conﬁguration space or 0 in case the device does not support it. Possible values for cap:  PCI_CAP_ID_PM Power Management  PCI_CAP_ID_AGP Accelerated Graphics Port  PCI_CAP_ID_VPD Vital Product Data  PCI_CAP_ID_SLOTID Slot Identiﬁcation  PCI_CAP_ID_MSI Message Signalled Interrupts  PCI_CAP_ID_CHSWP CompactPCI HotSwap  pci_ﬁnd_parent_resource  Name pci_find_parent_resource — return resource region of parent bus of given region  227   Chapter 10. Hardware Interfaces  struct resource * pci_find_parent_resource  const struct pci_dev * dev, struct resource * res ;  Synopsis  Arguments  dev  res  PCI device structure contains resources to be searched  child resource record for which parent is sought  Description For given resource region of given device, return the resource region of parent bus the given region is contained in or where it should be allocated from.  pci_set_power_state  Name pci_set_power_state — Set the power state of a PCI device  Synopsis  int pci_set_power_state  struct pci_dev * dev, int state ;  228   Chapter 10. Hardware Interfaces  Arguments  dev  state  PCI device to be suspended  Power state we’re entering  Description Transition a device to a new power state, using the Power Management Capabilities in the device’s conﬁg space.  RETURN VALUE -EINVAL if trying to enter a lower state than we’re already in. 0 if we’re already in the requested state. -EIO if device does not support PCI PM. 0 if we can successfully change the power state.  pci_save_state  Name pci_save_state — save the PCI conﬁguration space of a device before suspending  Synopsis  int pci_save_state  struct pci_dev * dev, u32 * buffer ;  229   Chapter 10. Hardware Interfaces  Arguments  dev  buffer  - PCI device that we’re dealing with  - buffer to hold conﬁg space context  Description buffer must be large enough to hold the entire PCI 2.2 conﬁg space  >= 64 bytes .  pci_restore_state  Name pci_restore_state — Restore the saved state of a PCI device  Synopsis  int pci_restore_state  struct pci_dev * dev, u32 * buffer ;  Arguments  dev  - PCI device that we’re dealing with  230   Chapter 10. Hardware Interfaces  buffer  - saved PCI conﬁg space  pci_enable_device  Name pci_enable_device — Initialize device before it’s used by a driver.  Synopsis  int pci_enable_device  struct pci_dev * dev ;  Arguments  dev  PCI device to be initialized  Description Initialize device before it’s used by a driver. Ask low-level code to enable I O and memory. Wake up the device if it was suspended. Beware, this function can fail.  231   pci_disable_device  Chapter 10. Hardware Interfaces  Name pci_disable_device — Disable PCI device after use  Synopsis  void pci_disable_device  struct pci_dev * dev ;  Arguments  dev  PCI device to be disabled  Description Signal to the system that the PCI device is not in use by the system anymore. This only involves disabling PCI bus-mastering, if active.  pci_enable_wake  Name pci_enable_wake — enable device to generate PME when suspended  232   Synopsis  Chapter 10. Hardware Interfaces  int pci_enable_wake  struct pci_dev * dev, u32 state, int enable ;  Arguments  dev  state  enable  - PCI device to operate on  - Current state of device.  - Flag to enable or disable generation  Description Set the bits in the device’s PM Capabilities to generate PME when the system is suspended.  -EIO is returned if device doesn’t have PM Capabilities. -EINVAL is returned if device supports it, but can’t generate wake events. 0 if operation is successful.  pci_release_regions  Name pci_release_regions — Release reserved PCI I O and memory resources  233   Chapter 10. Hardware Interfaces  void pci_release_regions  struct pci_dev * pdev ;  Synopsis  Arguments  pdev  PCI device whose resources were previously reserved by pci_request_regions  Description Releases all PCI I O and memory resources previously reserved by a successful call to pci_request_regions. Call this function only after all use of the PCI regions has ceased.  pci_request_regions  Name pci_request_regions — Reserved PCI I O and memory resources  Synopsis  int pci_request_regions  struct pci_dev * pdev, char * res_name ;  234   Chapter 10. Hardware Interfaces  Arguments  pdev  res_name  PCI device whose resources are to be reserved  Name to be associated with resource.  Description Mark all PCI regions associated with PCI device pdev as being reserved by owner res_name. Do not access any address inside the PCI regions unless this call returns successfully.  Returns 0 on success, or EBUSY on error. A warning message is also printed on failure.  pci_match_device  Name pci_match_device — Tell if a PCI device structure has a matching PCI device id structure  Synopsis  const struct pci_device_id * pci_match_device  const struct pci_device_id * ids, const struct pci_dev * dev ;  235   Chapter 10. Hardware Interfaces  Arguments  ids  dev  array of PCI device id structures to search in  the PCI device structure to match against  Description Used by a driver to check whether a PCI device present in the system is in its list of supported devices.Returns the matching pci_device_id structure or NULL if there is no match.  pci_register_driver  Name pci_register_driver — register a new pci driver  Synopsis  int pci_register_driver  struct pci_driver * drv ;  Arguments  drv  the driver structure to register  236   Chapter 10. Hardware Interfaces  Description Adds the driver structure to the list of registered drivers Returns the number of pci devices which were claimed by the driver during registration. The driver remains registered even if the return value is zero.  pci_unregister_driver  Name pci_unregister_driver — unregister a pci driver  Synopsis  void pci_unregister_driver  struct pci_driver * drv ;  Arguments  drv  the driver structure to unregister  Description Deletes the driver structure from the list of registered PCI drivers, gives it a chance to clean up by calling its remove function for each device it was responsible for, and marks those devices as driverless.  237   pci_insert_device  Chapter 10. Hardware Interfaces  Name pci_insert_device — insert a hotplug device  Synopsis  void pci_insert_device  struct pci_dev * dev, struct pci_bus * bus ;  Arguments  dev  bus  the device to insert  where to insert it  Description Add a new device to the device lists and notify userspace   sbin hotplug .  pci_remove_device  Name pci_remove_device — remove a hotplug device  238   Synopsis  void pci_remove_device  struct pci_dev * dev ;  Chapter 10. Hardware Interfaces  Arguments  dev  the device to remove  Description Delete the device structure from the device lists and notify userspace   sbin hotplug .  pci_dev_driver  Name pci_dev_driver — get the pci_driver of a device  Synopsis  struct pci_driver * pci_dev_driver  const struct pci_dev * dev ;  239   Chapter 10. Hardware Interfaces  Arguments  dev  the device to query  Description Returns the appropriate pci_driver structure or NULL if there is no registered driver for the device.  pci_set_master  Name pci_set_master — enables bus-mastering for device dev  Synopsis  void pci_set_master  struct pci_dev * dev ;  Arguments  dev  the PCI device to enable  240   Description Enables bus-mastering on the device and calls pcibios_set_master to do the needed arch speciﬁc settings.  Chapter 10. Hardware Interfaces  pci_setup_device  Name pci_setup_device — ﬁll in class and map information of a device  Synopsis  int pci_setup_device  struct pci_dev * dev ;  Arguments  dev  the device structure to ﬁll  Description Initialize the device structure with information about the device’s vendor,class,memory and IO-space addresses,IRQ lines etc. Called at initialisation of the PCI subsystem and by CardBus services. Returns 0 on success and -1 if unknown type of device  not normal, bridge or CardBus .  241   pci_pool_create  Chapter 10. Hardware Interfaces  Name pci_pool_create — Creates a pool of pci consistent memory blocks, for dma.  Synopsis  struct pci_pool * pci_pool_create  const char * name, struct pci_dev * pdev, size_t size, size_t align, size_t allocation, int flags ;  Arguments  name  pdev  size  align  name of pool, for diagnostics  pci device that will be doing the DMA  size of the blocks in this pool.  alignment requirement for blocks; must be a power of two  allocation  flags  returned blocks won’t cross this boundary  or zero   SLAB_* ﬂags  not all are supported .  242   Chapter 10. Hardware Interfaces  Description Returns a pci allocation pool with the requested characteristics, or null if one can’t be created. Given one of these pools, pci_pool_alloc may be used to allocate memory. Such memory will all have “consistent” DMA mappings, accessible by the device and its driver without using cache ﬂushing primitives. The actual size of blocks allocated may be larger than requested because of alignment.  If allocation is nonzero, objects returned from pci_pool_alloc won’t cross that size boundary. This is useful for devices which have addressing restrictions on individual DMA transfers, such as not crossing boundaries of 4KBytes.  pci_pool_destroy  Name pci_pool_destroy — destroys a pool of pci memory blocks.  Synopsis  void pci_pool_destroy  struct pci_pool * pool ;  Arguments  pool  pci pool that will be destroyed  243   Description Caller guarantees that no more memory from the pool is in use, and that nothing will try to use the pool after this call.  Chapter 10. Hardware Interfaces  pci_pool_alloc  Name pci_pool_alloc — get a block of consistent memory  Synopsis  void * pci_pool_alloc  struct pci_pool * pool, int mem_flags, dma_addr_t * handle ;  Arguments  pool  mem_flags  handle  pci pool that will produce the block  SLAB_KERNEL or SLAB_ATOMIC  pointer to dma address of block  244   Description This returns the kernel virtual address of a currently unused block, and reports its dma address through the handle. If such a memory block can’t be allocated, null is returned.  Chapter 10. Hardware Interfaces  pci_pool_free  Name pci_pool_free — put block back into pci pool  Synopsis  void pci_pool_free  struct pci_pool * pool, void * vaddr, dma_addr_t dma ;  Arguments  pool  vaddr  dma  the pci pool holding the block  virtual address of block  dma address of block  245   Description Caller promises neither device nor driver will again touch this block unless it is ﬁrst re-allocated.  Chapter 10. Hardware Interfaces  10.4. MCA Architecture  10.4.1. MCA Device Functions  mca_ﬁnd_adapter  Name mca_find_adapter — scan for adapters  int mca_find_adapter  int id, int start ;  Synopsis  Arguments  id  start  starting slot  MCA identiﬁcation to search for  246   Chapter 10. Hardware Interfaces  Description Search the MCA conﬁguration for adapters matching the 16bit ID given. The ﬁrst time it should be called with start as zero and then further calls made passing the return value of the previous call until MCA_NOTFOUND is returned.  Disabled adapters are not reported.  mca_ﬁnd_unused_adapter  Name mca_find_unused_adapter — scan for unused adapters  int mca_find_unused_adapter  int id, int start ;  Synopsis  Arguments  id  start  starting slot  MCA identiﬁcation to search for  Description Search the MCA conﬁguration for adapters matching the 16bit ID given. The ﬁrst time it should be called with start as zero and then further calls made passing the return  247   Chapter 10. Hardware Interfaces  value of the previous call until MCA_NOTFOUND is returned.  Adapters that have been claimed by drivers and those that are disabled are not reported. This function thus allows a driver to scan for further cards when some may already be driven.  mca_read_stored_pos  Name mca_read_stored_pos — read POS register from boot data  Synopsis  unsigned char mca_read_stored_pos  int slot, int reg ;  Arguments  slot  reg  slot number to read from  register to read from  Description Fetch a POS value that was stored at boot time by the kernel when it scanned the MCA space. The register value is returned. Missing or invalid registers report 0.  248   mca_read_pos  Chapter 10. Hardware Interfaces  Name mca_read_pos — read POS register from card  Synopsis  unsigned char mca_read_pos  int slot, int reg ;  Arguments  slot  reg  slot number to read from  register to read from  Description Fetch a POS value directly from the hardware to obtain the current value. This is much slower than mca_read_stored_pos and may not be invoked from interrupt context. It handles the deep magic required for onboard devices transparently.  249   mca_write_pos  Chapter 10. Hardware Interfaces  Name mca_write_pos — read POS register from card  Synopsis  void mca_write_pos  int slot, int reg, unsigned char byte ;  Arguments  slot  reg  byte  slot number to read from  register to read from  byte to write to the POS registers  Description Store a POS value directly from the hardware. You should not normally need to use this function and should have a very good knowledge of MCA bus before you do so. Doing this wrongly can damage the hardware.  This function may not be used from interrupt context.  Note that this a technically a Bad Thing, as IBM tech stuff says you should only set POS values through their utilities. However, some devices such as the 3c523 recommend that you write back some data to make sure the conﬁguration is consistent. I’d say that IBM is right, but I like my drivers to work.  250   This function can’t do checks to see if multiple devices end up with the same resources, so you might see magic smoke if someone screws up.  Chapter 10. Hardware Interfaces  mca_set_adapter_name  Name mca_set_adapter_name — Set the description of the card  Synopsis  void mca_set_adapter_name  int slot, char* name ;  Arguments  slot  name  slot to name  text string for the namen  Description This function sets the name reported via  proc for this adapter slot. This is for user information only. Setting a name deletes any previous name.  251   mca_set_adapter_procfn  Chapter 10. Hardware Interfaces  Name mca_set_adapter_procfn — Set the  proc callback  Synopsis  void mca_set_adapter_procfn  int slot, MCA_ProcFn procfn, void* dev ;  Arguments  slot to conﬁgure  slot  procfn  dev  callback function to call for  proc  device information passed to the callback  Description This sets up an information callback for  proc mca slot?. The function is called with the buffer, slot, and device pointer  or some equally informative context information, or nothing, if you prefer , and is expected to put useful information into the buffer. The adapter name, ID, and POS registers get printed before this is called though, so don’t do it again.  This should be called with a NULL procfn when a module unregisters, thus preventing kernel crashes and other such nastiness.  252   Chapter 10. Hardware Interfaces  mca_is_adapter_used  Name mca_is_adapter_used — check if claimed by driver  Synopsis  int mca_is_adapter_used  int slot ;  Arguments  slot  slot to check  Description Returns 1 if the slot has been claimed by a driver  mca_mark_as_used  Name mca_mark_as_used — claim an MCA device  253   Synopsis  int mca_mark_as_used  int slot ;  Chapter 10. Hardware Interfaces  Arguments  slot  slot to claim  FIXME should we make this threadsafe  Claim an MCA slot for a device driver. If the slot is already taken the function returns 1, if it is not taken it is claimed and 0 is returned.  mca_mark_as_unused  Name mca_mark_as_unused — release an MCA device  Synopsis  void mca_mark_as_unused  int slot ;  254   Chapter 10. Hardware Interfaces  Arguments  slot  slot to claim  Description Release the slot for other drives to use.  mca_get_adapter_name  Name mca_get_adapter_name — get the adapter description  char * mca_get_adapter_name  int slot ;  Synopsis  Arguments  slot  slot to query  255   Description Return the adapter description if set. If it has not been set or the slot is out range then return NULL.  Chapter 10. Hardware Interfaces  mca_isadapter  Name mca_isadapter — check if the slot holds an adapter  Synopsis  int mca_isadapter  int slot ;  Arguments  slot  slot to query  Description Returns zero if the slot does not hold an adapter, non zero if it does.  256   mca_isenabled  Chapter 10. Hardware Interfaces  Name mca_isenabled — check if the slot holds an adapter  Synopsis  int mca_isenabled  int slot ;  Arguments  slot  slot to query  Description Returns a non zero value if the slot holds an enabled adapter and zero for any other case.  257   10.4.2. MCA Bus DMA  mca_enable_dma  Chapter 10. Hardware Interfaces  Name mca_enable_dma — channel to enable DMA on  void mca_enable_dma  unsigned int dmanr ;  Synopsis  Arguments  dmanr  DMA channel  Description Enable the MCA bus DMA on a channel. This can be called from IRQ context.  mca_disable_dma  Name mca_disable_dma — channel to disable DMA on  258   Chapter 10. Hardware Interfaces  void mca_disable_dma  unsigned int dmanr ;  Synopsis  Arguments  dmanr  DMA channel  Description Enable the MCA bus DMA on a channel. This can be called from IRQ context.  mca_set_dma_addr  Name mca_set_dma_addr — load a 24bit DMA address  Synopsis  void mca_set_dma_addr  unsigned int dmanr, unsigned int a ;  259   Chapter 10. Hardware Interfaces  Arguments  dmanr  a  DMA channel  24bit bus address  Synopsis  Arguments  dmanr  DMA channel  Description Load the address register in the DMA controller. This has a 24bit limitation  16Mb .  mca_get_dma_addr  Name mca_get_dma_addr — load a 24bit DMA address  unsigned int mca_get_dma_addr  unsigned int dmanr ;  260   Description Read the address register in the DMA controller. This has a 24bit limitation  16Mb . The return is a bus address.  Chapter 10. Hardware Interfaces  mca_set_dma_count  Name mca_set_dma_count — load a 16bit transfer count  void mca_set_dma_count  unsigned int dmanr, unsigned int count ;  Synopsis  Arguments  dmanr  DMA channel  count  count  Description Set the DMA count for this channel. This can be up to 64Kbytes. Setting a count of zero will not do what you expect.  261   mca_get_dma_residue  Chapter 10. Hardware Interfaces  Name mca_get_dma_residue — get the remaining bytes to transfer  unsigned int mca_get_dma_residue  unsigned int dmanr ;  Synopsis  Arguments  dmanr  DMA channel  Description This function returns the number of bytes left to transfer on this DMA channel.  mca_set_dma_io  Name mca_set_dma_io — set the port for an I O transfer  262   Chapter 10. Hardware Interfaces  void mca_set_dma_io  unsigned int dmanr, unsigned int io_addr ;  Synopsis  Arguments  dmanr  DMA channel  io_addr  an I O port number  Description Unlike the ISA bus DMA controllers the DMA on MCA bus can transfer with an I O port target.  mca_set_dma_mode  Name mca_set_dma_mode — set the DMA mode  Synopsis  void mca_set_dma_mode  unsigned int dmanr, unsigned int mode ;  263   Chapter 10. Hardware Interfaces  Arguments  dmanr  mode  DMA channel  mode to set  Description The DMA controller supports several modes. The mode values you can  set are  MCA_DMA_MODE_READ when reading from the DMA device.  MCA_DMA_MODE_WRITE to writing to the DMA device.  MCA_DMA_MODE_IO to do DMA to or from an I O port.  MCA_DMA_MODE_16 to do 16bit transfers.  264   Chapter 11. The Device File System  devfs_register  Name devfs_register — Register a device entry.  Synopsis  devfs_handle_t devfs_register  devfs_handle_t dir, const char * name, unsigned int flags, unsigned int major, unsigned int minor, umode_t mode, void * ops, void * info ;  The handle to the parent devfs directory entry. If this is NULL the new name is relative to the root of the devfs.  Arguments  dir  name  flags  major  minor  The name of the entry.  A set of bitwise-ORed ﬂags  DEVFS_FL_* .  The major number. Not needed for regular ﬁles.  The minor number. Not needed for regular ﬁles.  265   Chapter 11. The Device File System  The default ﬁle mode.  mode  ops  info  The &ﬁle_operations or &block_device_operations structure. This must not be externally deallocated.  An arbitrary pointer which will be written to the private_data ﬁeld of the &ﬁle structure passed to the device driver. You can set this to whatever you like, and change it once the ﬁle is opened  the next ﬁle opened will not see this change .  Description Returns a handle which may later be used in a call to devfs_unregister. On failure NULL is returned.  devfs_unregister  Name devfs_unregister — Unregister a device entry.  Synopsis  void devfs_unregister  devfs_handle_t de ;  266   Chapter 11. The Device File System  Arguments  de  A handle previously created by devfs_register or returned from devfs_find_handle. If this is NULL the routine does nothing.  devfs_mk_symlink  Name devfs_mk_symlink —  Synopsis  int devfs_mk_symlink  devfs_handle_t dir, const char * name, unsigned int flags, const char * link, devfs_handle_t * handle, void * info ;  The handle to the parent devfs directory entry. If this is NULL the new name is relative to the root of the devfs.  Arguments  dir  name  flags  The name of the entry.  A set of bitwise-ORed ﬂags  DEVFS_FL_* .  267   Chapter 11. The Device File System  The destination name.  link  handle  info  The handle to the symlink entry is written here. This may be NULL.  An arbitrary pointer which will be associated with the entry.  Description Returns 0 on success, else a negative error code is returned.  devfs_mk_dir  Name devfs_mk_dir — Create a directory in the devfs namespace.  devfs_handle_t devfs_mk_dir  devfs_handle_t dir, const char * name, void * info ;  Synopsis  Arguments  dir  The handle to the parent devfs directory entry. If this is NULL the new name is relative to the root of the devfs.  268   Chapter 11. The Device File System  name  info  The name of the entry.  An arbitrary pointer which will be associated with the entry.  Description Use of this function is optional. The devfs_register function will automatically create intermediate directories as needed. This function is provided for efﬁciency reasons, as it provides a handle to a directory. Returns a handle which may later be used in a call to devfs_unregister. On failure NULL is returned.  devfs_ﬁnd_handle  Name devfs_find_handle — Find the handle of a devfs entry.  devfs_handle_t devfs_find_handle  devfs_handle_t dir, const char * name, unsigned int major, unsigned int minor, char type, int traverse_symlinks ;  Synopsis  Arguments  dir  The handle to the parent devfs directory entry. If this is NULL the name is relative  269   Chapter 11. The Device File System  to the root of the devfs.  The name of the entry.  name  major  minor  type  The major number. This is used if name is NULL.  The minor number. This is used if name is NULL.  The type of special ﬁle to search for. This may be either DEVFS_SPECIAL_CHR or DEVFS_SPECIAL_BLK.  traverse_symlinks  If TRUE then symlink entries in the devfs namespace are traversed. Symlinks pointing out of the devfs namespace will cause a failure. Symlink traversal consumes stack space.  Description Returns a handle which may later be used in a call to devfs_unregister, devfs_get_flags, or devfs_set_flags. On failure NULL is returned.  devfs_get_ﬂags  Name devfs_get_flags — Get the ﬂags for a devfs entry.  270   Synopsis  Chapter 11. The Device File System  int devfs_get_flags  devfs_handle_t de, unsigned int * flags ;  Arguments  de  flags  The handle to the device entry.  The ﬂags are written here.  Description Returns 0 on success, else a negative error code.  devfs_get_maj_min  Name devfs_get_maj_min — Get the major and minor numbers for a devfs entry.  Synopsis  int devfs_get_maj_min  devfs_handle_t de, unsigned int * major, unsigned int * minor ;  271   Chapter 11. The Device File System  Arguments  de  major  minor  The handle to the device entry.  The major number is written here. This may be NULL.  The minor number is written here. This may be NULL.  Description Returns 0 on success, else a negative error code.  devfs_get_handle_from_inode  Name devfs_get_handle_from_inode — Get the devfs handle for a VFS inode.  Synopsis  devfs_handle_t devfs_get_handle_from_inode  struct inode * inode ;  272   Chapter 11. The Device File System  Arguments  inode  The VFS inode.  Description Returns the devfs handle on success, else NULL.  devfs_generate_path  Name devfs_generate_path — Generate a pathname for an entry, relative to the devfs root.  int devfs_generate_path  devfs_handle_t de, char * path, int buflen ;  Synopsis  Arguments  de  The devfs entry.  273   Chapter 11. The Device File System  The buffer to write the pathname to. The pathname and ’\0’ terminator will be written at the end of the buffer.  path  buflen  The length of the buffer.  Description Returns the offset in the buffer where the pathname starts on success, else a negative error code.  devfs_get_ops  Name devfs_get_ops — Get the device operations for a devfs entry.  Synopsis  void * devfs_get_ops  devfs_handle_t de ;  Arguments  de  The handle to the device entry.  274   Description Returns a pointer to the device operations on success, else NULL.  Chapter 11. The Device File System  devfs_set_ﬁle_size  Name devfs_set_file_size — Set the ﬁle size for a devfs regular ﬁle.  Synopsis  int devfs_set_file_size  devfs_handle_t de, unsigned long size ;  Arguments  de  size  The new ﬁle size.  The handle to the device entry.  Description Returns 0 on success, else a negative error code.  275   devfs_get_info  Chapter 11. The Device File System  Name devfs_get_info — Get the info pointer written to private_data of de upon open.  Synopsis  void * devfs_get_info  devfs_handle_t de ;  Arguments  de  The handle to the device entry.  Description Returns the info pointer.  devfs_set_info  Name devfs_set_info — Set the info pointer written to private_data upon open.  276   Synopsis  Chapter 11. The Device File System  int devfs_set_info  devfs_handle_t de, void * info ;  Arguments  de  info  pointer to the data  The handle to the device entry.  Description Returns 0 on success, else a negative error code.  devfs_get_parent  Name devfs_get_parent — Get the parent device entry.  Synopsis  devfs_handle_t devfs_get_parent  devfs_handle_t de ;  277   Chapter 11. The Device File System  Arguments  de  The handle to the device entry.  Description Returns the parent device entry if it exists, else NULL.  devfs_get_ﬁrst_child  Name devfs_get_first_child — Get the ﬁrst leaf node in a directory.  Synopsis  devfs_handle_t devfs_get_first_child  devfs_handle_t de ;  Arguments  de  The handle to the device entry.  Description Returns the leaf node device entry if it exists, else NULL.  278   Chapter 11. The Device File System  devfs_get_next_sibling  Name devfs_get_next_sibling — Get the next sibling leaf node. for a device entry.  Synopsis  devfs_handle_t devfs_get_next_sibling  devfs_handle_t de ;  Arguments  de  The handle to the device entry.  Description Returns the leaf node device entry if it exists, else NULL.  devfs_auto_unregister  Name devfs_auto_unregister — Conﬁgure a devfs entry to be automatically  279   Chapter 11. The Device File System  void devfs_auto_unregister  devfs_handle_t master, devfs_handle_t slave ;  unregistered.  Synopsis  Arguments  master  slave  The master devfs entry. Only one slave may be registered.  The devfs entry which will be automatically unregistered when the master entry is unregistered. It is illegal to call devfs_unregister on this entry.  devfs_get_unregister_slave  Name devfs_get_unregister_slave — Get the slave entry which will be automatically unregistered.  Synopsis  devfs_handle_t devfs_get_unregister_slave  devfs_handle_t master ;  280   Chapter 11. The Device File System  Arguments  master  The master devfs entry.  Description Returns the slave which will be unregistered when master is unregistered.  devfs_get_name  Name devfs_get_name — Get the name for a device entry in its parent directory.  Synopsis  const char * devfs_get_name  devfs_handle_t de, unsigned int * namelen ;  Arguments  de  namelen  The handle to the device entry.  The length of the name is written here. This may be NULL.  281   Description Returns the name on success, else NULL.  Chapter 11. The Device File System  devfs_register_chrdev  Name devfs_register_chrdev — Optionally register a conventional character driver.  Synopsis  int devfs_register_chrdev  unsigned int major, const char * name, struct file_operations * fops ;  Arguments  major  name  fops  The major number for the driver.  The name of the driver  as seen in  proc devices .  The &ﬁle_operations structure pointer.  282   Chapter 11. The Device File System  Description This function will register a character driver provided the “devfs=only” option was not provided at boot time. Returns 0 on success, else a negative error code on failure.  devfs_register_blkdev  Name devfs_register_blkdev — Optionally register a conventional block driver.  Synopsis  int devfs_register_blkdev  unsigned int major, const char * name, struct block_device_operations * bdops ;  Arguments  major  name  bdops  The major number for the driver.  The name of the driver  as seen in  proc devices .  The &block_device_operations structure pointer.  283   Chapter 11. The Device File System  Description This function will register a block driver provided the “devfs=only” option was not provided at boot time. Returns 0 on success, else a negative error code on failure.  devfs_unregister_chrdev  Name devfs_unregister_chrdev — Optionally unregister a conventional character driver.  Synopsis  int devfs_unregister_chrdev  unsigned int major, const char * name ;  Arguments  major  name  The major number for the driver.  The name of the driver  as seen in  proc devices .  Description This function will unregister a character driver provided the “devfs=only” option was not provided at boot time. Returns 0 on success, else a negative error code on failure.  284   Chapter 11. The Device File System  devfs_unregister_blkdev  Name devfs_unregister_blkdev — Optionally unregister a conventional block driver.  Synopsis  int devfs_unregister_blkdev  unsigned int major, const char * name ;  Arguments  major  name  The major number for the driver.  The name of the driver  as seen in  proc devices .  Description This function will unregister a block driver provided the “devfs=only” option was not provided at boot time. Returns 0 on success, else a negative error code on failure.  285   Chapter 12. Power Management  pm_register  Name pm_register — register a device with power management  struct pm_dev * pm_register  pm_dev_t type, unsigned long id, pm_callback callback ;  Synopsis  Arguments  type  id  device type  device ID  callback  callback function  Description Add a device to the list of devices that wish to be notiﬁed about power management events. A &pm_dev structure is returned on success, on failure the return is NULL.  The callback function will be called in process context and it may sleep.  286   Chapter 12. Power Management  pm_unregister  Name pm_unregister — unregister a device with power management  Synopsis  void pm_unregister  struct pm_dev * dev ;  Arguments  dev  device to unregister  Description Remove a device from the power management notiﬁcation lists. The dev passed must be a handle previously returned by pm_register.  287   pm_unregister_all  Chapter 12. Power Management  Name pm_unregister_all — unregister all devices with matching callback  Synopsis  void pm_unregister_all  pm_callback callback ;  Arguments  callback  callback function pointer  Description Unregister every device that would call the callback passed. This is primarily meant as a helper function for loadable modules. It enables a module to give up all its managed devices without keeping its own private list.  pm_send  Name pm_send — send request to a single device  288   Synopsis  Chapter 12. Power Management  int pm_send  struct pm_dev * dev, pm_request_t rqst, void * data ;  Arguments  device to send to  dev  rqst  data  power management request  data for the callback  Description Issue a power management request to a given device. The PM_SUSPEND and PM_RESUME events are handled specially. The data ﬁeld must hold the intended next state. No call is made if the state matches.  BUGS what stops two power management requests occuring in parallel and conﬂicting.  WARNING Calling pm_send directly is not generally recommended, in paticular there is no locking against the pm_dev going away. The caller must maintain all needed locking or have ’inside knowledge’ on the safety. Also remember that this function is not locked against pm_unregister. This means that you must handle SMP races on callback execution and unload yourself.  289   Chapter 12. Power Management  pm_send_all  Name pm_send_all — send request to all managed devices  Synopsis  int pm_send_all  pm_request_t rqst, void * data ;  Arguments  rqst  data  power management request  data for the callback  Description Issue a power management request to a all devices. The PM_SUSPEND events are handled specially. Any device is permitted to fail a suspend by returning a non zero  error  value from its callback function. If any device vetoes a suspend request then all other devices that have suspended during the processing of this request are restored to their previous state.  290   Chapter 12. Power Management  WARNING This function takes the pm_devs_lock. The lock is not dropped until the callbacks have completed. This prevents races against pm locking functions, races against module unload pm_unregister code. It does mean however that you must not issue pm_ functions within the callback or you will deadlock and users will hate you.  Zero is returned on success. If a suspend fails then the status from the device that vetoes the suspend is returned.  BUGS what stops two power management requests occuring in parallel and conﬂicting.  pm_ﬁnd  Name pm_find — ﬁnd a device  Synopsis  Arguments  type  type of device  struct pm_dev * pm_find  pm_dev_t type, struct pm_dev * from ;  291   from  where to start looking  Chapter 12. Power Management  Description Scan the power management list for devices of a speciﬁc type. The return value for a matching device may be passed to further calls to this function to ﬁnd further matches. A NULL indicates the end of the list.  To search from the beginning pass NULL as the from value.  The caller MUST hold the pm_devs_lock lock when calling this function. The instant that the lock is dropped all pointers returned may become invalid.  292   Chapter 13. Block Devices  blk_cleanup_queue  Name blk_cleanup_queue — release a request_queue_t when it is no longer needed  Synopsis  void blk_cleanup_queue  request_queue_t * q ;  Arguments  q  the request queue to be released  Description blk_cleanup_queue is the pair to blk_init_queue. It should be called when a request queue is being released; typically when a block device is being de-registered. Currently, its primary task it to free all the &struct request structures that were allocated to the queue.  Caveat Hopefully the low level driver will have ﬁnished any outstanding requests ﬁrst...  293   blk_queue_headactive  Chapter 13. Block Devices  Name blk_queue_headactive — indicate whether head of request queue may be active  Synopsis  void blk_queue_headactive  request_queue_t * q, int active ;  Arguments  q  active  The queue which this applies to.  A ﬂag indication where the head of the queue is active.  Description The driver for a block device may choose to leave the currently active request on the request queue, removing it only when it has completed. The queue handling routines assume this by default for safety reasons and will not involve the head of the request queue in any merging or reordering of requests when the queue is unplugged  and thus may be working on this particular request .  If a driver removes requests from the queue before processing them, then it may indicate that it does so, there by allowing the head of the queue to be involved in merging and reordering. This is done be calling blk_queue_headactive with an active ﬂag of 0.  If a driver processes several requests at once, it must remove them  or at least all but one of them  from the request queue.  294   When a queue is plugged the head will be assumed to be inactive.  Chapter 13. Block Devices  blk_queue_make_request  Name blk_queue_make_request — deﬁne an alternate make_request function for a device  Synopsis  void blk_queue_make_request  request_queue_t * q, make_request_fn * mfn ;  Arguments  q  mfn  the request queue for the device to be affected  the alternate make_request function  Description The normal way for &struct buffer_heads to be passed to a device driver is for them to be collected into requests on a request queue, and then to allow the device driver to select requests off that queue when it is ready. This works well for many block devices. However some block devices  typically virtual devices such as md or lvm  do not beneﬁt from the processing on the request queue, and are served best by having the  295   requests passed directly to them. This can be achieved by providing a function to blk_queue_make_request.  Chapter 13. Block Devices  Caveat The driver that does this *must* be able to deal appropriately with buffers in “highmemory”, either by calling bh_kmap to get a kernel mapping, to by calling create_bounce to create a buffer in normal memory.  blk_init_queue  Name blk_init_queue — prepare a request queue for use with a block device  void blk_init_queue  request_queue_t * q, request_fn_proc * rfn ;  Synopsis  Arguments  q  rfn  The &request_queue_t to be initialised  The function to be called to process requests that have been placed on the queue.  296   Chapter 13. Block Devices  Description If a block device wishes to use the standard request handling procedures, which sorts requests and coalesces adjacent requests, then it must call blk_init_queue. The function rfn will be called when there are requests on the queue that need to be processed. If the device supports plugging, then rfn may not be called immediately when requests are available on the queue, but may be called at some time later instead. Plugged queues are generally unplugged when a buffer belonging to one of the requests on the queue is needed, or due to memory pressure.  rfn is not required, or even expected, to remove all requests off the queue, but only as many as it can handle at a time. If it does leave requests on the queue, it is responsible for arranging that the requests get dealt with eventually.  A global spin lock $io_request_lock must be held while manipulating the requests on the request queue.  The request on the head of the queue is by default assumed to be potentially active, and it is not considered for re-ordering or merging whenever the given queue is unplugged. This behaviour can be changed with blk_queue_headactive.  Note blk_init_queue must be paired with a blk_cleanup_queue call when the block device is deactivated  such as at module unload .  generic_make_request  Name generic_make_request —  Synopsis  void generic_make_request  int rw, struct buffer_head * bh ;  297   Chapter 13. Block Devices  Arguments  rw  bh  READ, WRITE, or READA - what sort of I O is desired.  The buffer head describing the location in memory and on the device.  Description generic_make_request is used to make I O requests of block devices. It is passed a &struct buffer_head and a &rw value. The READ and WRITE options are  hopefully  obvious in meaning. The READA value means that a read is required, but that the driver is free to fail the request if, for example, it cannot get needed resources immediately.  generic_make_request does not return any status. The success failure status of the request, along with notiﬁcation of completion, is delivered asynchronously through the bh->b_end_io function described  one day  else where.  The caller of generic_make_request must make sure that b_page, b_addr, b_size are set to describe the memory buffer, that b_rdev and b_rsector are set to describe the device address, and the b_end_io and optionally b_private are set to describe how completion notiﬁcation should be signaled. BH_Mapped should also be set  to conﬁrm that b_dev and b_blocknr are valid .  generic_make_request and the drivers it calls may use b_reqnext, and may change b_rdev and b_rsector. So the values of these ﬁelds should NOT be depended on after the call to generic_make_request. Because of this, the caller should record the device address information in b_dev and b_blocknr.  Apart from those ﬁelds mentioned above, no other ﬁelds, and in particular, no other ﬂags, are changed by generic_make_request or any lower level drivers.  298   submit_bh  Chapter 13. Block Devices  Name submit_bh —  Synopsis  Arguments  rw  bh  void submit_bh  int rw, struct buffer_head * bh ;  whether to READ or WRITE, or maybe to READA  read ahead   The &struct buffer_head which describes the I O  Description submit_bh is very similar in purpose to generic_make_request, and uses that function to do most of the work.  The extra functionality provided by submit_bh is to determine b_rsector from b_blocknr and b_size, and to set b_rdev from b_dev. This is is appropriate for IO requests that come from the buffer cache and page cache which  currently  always use aligned blocks.  299   ll_rw_block  Chapter 13. Block Devices  Name ll_rw_block — level access to block devices  void ll_rw_block  int rw, int nr, struct buffer_head * * bhs ;  Synopsis  Arguments  rw  nr  bhs  whether to READ or WRITE or maybe READA  readahead   number of &struct buffer_heads in the array  array of pointers to &struct buffer_head  Description ll_rw_block takes an array of pointers to &struct buffer_heads, and requests an I O operation on them, either a READ or a WRITE. The third READA option is described in the documentation for generic_make_request which ll_rw_block calls.  This function provides extra functionality that is not in generic_make_request that is relevant to buffers in the buffer cache or page cache. In particular it drops any buffer that it cannot get a lock on  with the BH_Lock state bit , any buffer that appears to be clean when doing a write request, and any buffer that appears to be up-to-date when doing read request. Further it marks as clean buffers that are processed for writing  the buffer cache wont assume that they are actually clean until the buffer gets unlocked .  300   ll_rw_block sets b_end_io to simple completion handler that marks the buffer up-to-date  if approriate , unlocks the buffer and wakes any waiters. As client that needs a more interesting completion routine should call submit_bh  or generic_make_request  directly.  Chapter 13. Block Devices  Caveat All of the buffers must be for the same device, and must also be  end_that_request_ﬁrst  Name end_that_request_first — end I O on one buffer.  Synopsis  int end_that_request_first  struct request * req, int uptodate, char * name ;  Arguments  req  uptodate  0 for I O error  the request being processed  301   name  the name printed for an I O error  Chapter 13. Block Devices  Description Ends I O on the ﬁrst buffer attached to req, and sets it up for the next buffer_head  if any  in the cluster.  Return 0 - we are done with this request, call end_that_request_last 1 - still buffers pending for this request  Caveat Drivers implementing their own end_request handling must call blk_finished_io appropriately.  302   Chapter 14. Miscellaneous Devices  misc_register  Name misc_register — register a miscellaneous device  int misc_register  struct miscdevice * misc ;  Synopsis  Arguments  misc  device structure  Description Register a miscellaneous device with the kernel. If the minor number is set to MISC_DYNAMIC_MINOR a minor number is assigned and placed in the minor ﬁeld of the structure. For other cases the minor number requested is used.  The structure passed is linked into the kernel and may not be destroyed until it has been unregistered.  A zero is returned on success and a negative errno code for failure.  303   misc_deregister  Chapter 14. Miscellaneous Devices  Name misc_deregister — unregister a miscellaneous device  Synopsis  int misc_deregister  struct miscdevice * misc ;  Arguments  misc  device to unregister  Description Unregister a miscellaneous device that was previously successfully registered with misc_register. Success is indicated by a zero return, a negative errno code indicates an error.  304   Chapter 15. Video4Linux  video_unregister_device  Name video_unregister_device — unregister a video4linux device  void video_unregister_device  struct video_device * vfd ;  Synopsis  Arguments  vfd  the device to unregister  Description This unregisters the passed device and deassigns the minor number. Future open calls will be met with errors.  305   Chapter 16. Sound Devices  register_sound_special  Name register_sound_special — register a special sound node  Synopsis  int register_sound_special  struct file_operations * fops, int unit ;  Arguments  fops  unit  File operations for the driver  Unit number to allocate  Description Allocate a special sound device by minor number from the sound subsystem. The allocated number is returned on succes. On failure a negative error code is returned.  306   register_sound_mixer  Chapter 16. Sound Devices  Name register_sound_mixer — register a mixer device  Synopsis  int register_sound_mixer  struct file_operations * fops, int dev ;  Arguments  fops  dev  File operations for the driver  Unit number to allocate  Description Allocate a mixer device. Unit is the number of the mixer requested. Pass -1 to request the next free mixer unit. On success the allocated number is returned, on failure a negative error code is returned.  307   register_sound_midi  Chapter 16. Sound Devices  Name register_sound_midi — register a midi device  Synopsis  int register_sound_midi  struct file_operations * fops, int dev ;  Arguments  fops  dev  File operations for the driver  Unit number to allocate  Description Allocate a midi device. Unit is the number of the midi device requested. Pass -1 to request the next free midi unit. On success the allocated number is returned, on failure a negative error code is returned.  308   register_sound_dsp  Chapter 16. Sound Devices  Name register_sound_dsp — register a DSP device  Synopsis  int register_sound_dsp  struct file_operations * fops, int dev ;  Arguments  fops  dev  File operations for the driver  Unit number to allocate  Description Allocate a DSP device. Unit is the number of the DSP requested. Pass -1 to request the next free DSP unit. On success the allocated number is returned, on failure a negative error code is returned.  This function allocates both the audio and dsp device entries together and will always allocate them as a matching pair - eg dsp3 audio3  309   register_sound_synth  Chapter 16. Sound Devices  Name register_sound_synth — register a synth device  Synopsis  int register_sound_synth  struct file_operations * fops, int dev ;  Arguments  fops  dev  File operations for the driver  Unit number to allocate  Description Allocate a synth device. Unit is the number of the synth device requested. Pass -1 to request the next free synth unit. On success the allocated number is returned, on failure a negative error code is returned.  310   unregister_sound_special  Chapter 16. Sound Devices  Name unregister_sound_special — unregister a special sound device  Synopsis  void unregister_sound_special  int unit ;  Arguments  unit  unit number to allocate  Description Release a sound device that was allocated with register_sound_special. The unit passed is the return value from the register function.  unregister_sound_mixer  Name unregister_sound_mixer — unregister a mixer  311   Synopsis  void unregister_sound_mixer  int unit ;  Chapter 16. Sound Devices  Arguments  unit  unit number to allocate  Description Release a sound device that was allocated with register_sound_mixer. The unit passed is the return value from the register function.  unregister_sound_midi  Name unregister_sound_midi — unregister a midi device  Synopsis  void unregister_sound_midi  int unit ;  312   Chapter 16. Sound Devices  Arguments  unit  unit number to allocate  Description Release a sound device that was allocated with register_sound_midi. The unit passed is the return value from the register function.  unregister_sound_dsp  Name unregister_sound_dsp — unregister a DSP device  Synopsis  void unregister_sound_dsp  int unit ;  Arguments  unit  unit number to allocate  313   Chapter 16. Sound Devices  Description Release a sound device that was allocated with register_sound_dsp. The unit passed is the return value from the register function.  Both of the allocated units are released together automatically.  unregister_sound_synth  Name unregister_sound_synth — unregister a synth device  Synopsis  void unregister_sound_synth  int unit ;  Arguments  unit  unit number to allocate  Description Release a sound device that was allocated with register_sound_synth. The unit passed is the return value from the register function.  314   Chapter 17. USB Devices  usb_register  Name usb_register — register a USB driver  Synopsis  int usb_register  struct usb_driver * new_driver ;  Arguments  new_driver  USB operations for the driver  Description Registers a USB driver with the USB core. The list of unattached interfaces will be rescanned whenever a new driver is added, allowing the new driver to attach to any recognized devices. Returns a negative error code on failure and 0 on success.  315   usb_scan_devices  Chapter 17. USB Devices  Name usb_scan_devices — scans all unclaimed USB interfaces  Synopsis  void usb_scan_devices   void ;  Arguments  void  no arguments  Description  Goes through all unclaimed USB interfaces, and offers them to all registered USB drivers through the ’probe’ function. This will automatically be called after usb_register is called. It is called by some of the USB subsystems after one of their subdrivers are registered.  usb_deregister  Name usb_deregister — unregister a USB driver  316   Chapter 17. USB Devices  void usb_deregister  struct usb_driver * driver ;  Synopsis  Arguments  driver  USB operations of the driver to unregister  Description Unlinks the speciﬁed driver from the internal USB driver list.  usb_alloc_bus  Name usb_alloc_bus — creates a new USB host controller structure  Synopsis  struct usb_bus * usb_alloc_bus  struct usb_operations * op ;  317   Chapter 17. USB Devices  Arguments  op  pointer to a struct usb_operations that this bus structure should use  Description Creates a USB host controller bus structure with the speciﬁed usb_operations and initializes all the necessary internal objects.  For use only by USB Host Controller Drivers.   If no memory is available, NULL is returned.  The caller should call usb_free_bus when it is ﬁnished with the structure.  usb_free_bus  Name usb_free_bus — frees the memory used by a bus structure  Synopsis  void usb_free_bus  struct usb_bus * bus ;  Arguments  bus  pointer to the bus to free  318   Description  For use only by USB Host Controller Drivers.   Chapter 17. USB Devices  usb_register_bus  Name usb_register_bus — registers the USB host controller with the usb core  Synopsis  void usb_register_bus  struct usb_bus * bus ;  Arguments  bus  pointer to the bus to register  Description  For use only by USB Host Controller Drivers.   319   usb_deregister_bus  Chapter 17. USB Devices  Name usb_deregister_bus — deregisters the USB host controller  Synopsis  void usb_deregister_bus  struct usb_bus * bus ;  Arguments  bus  pointer to the bus to deregister  Description  For use only by USB Host Controller Drivers.   usb_match_id  Name usb_match_id — ﬁnd ﬁrst usb_device_id matching device or interface  320   Synopsis  Chapter 17. USB Devices  const struct usb_device_id * usb_match_id  struct usb_device * dev, struct usb_interface * interface, const struct usb_device_id * id ;  the device whose descriptors are considered when matching  Arguments  dev  id  interface  the interface of interest  array of usb_device_id structures, terminated by zero entry  Description usb_match_id searches an array of usb_device_id’s and returns the ﬁrst one matching the device or interface, or null. This is used when binding  or rebinding  a driver to an interface. Most USB device drivers will use this indirectly, through the usb core, but some layered driver frameworks use it directly. These device tables are exported with MODULE_DEVICE_TABLE, through modutils and “modules.usbmap”, to support the driver loading functionality of USB hotplugging.  What Matches  The “match_ﬂags” element in a usb_device_id controls which members are used. If the corresponding bit is set, the value in the device_id must match its corresponding member in the device or interface descriptor, or else the device_id does not match.  “driver_info” is normally used only by device drivers, but you can create a wildcard “matches anything” usb_device_id as a driver’s “modules.usbmap” entry if you provide  321   an id with only a nonzero “driver_info” ﬁeld. If you do this, the USB device driver’s probe routine should use additional intelligence to decide whether to bind to the speciﬁed interface.  Chapter 17. USB Devices  What Makes Good usb_device_id Tables  The match algorithm is very simple, so that intelligence in driver selection must come from smart driver id records. Unless you have good reasons to use another selection policy, provide match elements only in related groups, and order match speciﬁers from speciﬁc to general. Use the macros provided for that purpose if you can.  The most speciﬁc match speciﬁers use device descriptor data. These are commonly used with product-speciﬁc matches; the USB_DEVICE macro lets you provide vendor and product IDs, and you can also match against ranges of product revisions. These are widely used for devices with application or vendor speciﬁc bDeviceClass values.  Matches based on device class subclass protocol speciﬁcations are slightly more general; use the USB_DEVICE_INFO macro, or its siblings. These are used with single-function devices where bDeviceClass doesn’t specify that each interface has its own class.  Matches based on interface class subclass protocol are the most general; they let drivers bind to any interface on a multiple-function device. Use the USB_INTERFACE_INFO macro, or its siblings, to match class-per-interface style devices  as recorded in bDeviceClass .  Within those groups, remember that not all combinations are meaningful. For example, don’t give a product version range without vendor and product IDs; or specify a protocol without its associated class and subclass.  usb_alloc_urb  Name usb_alloc_urb — creates a new urb for a USB driver to use  322   Synopsis  urb_t * usb_alloc_urb  int iso_packets ;  Chapter 17. USB Devices  Arguments  iso_packets  number of iso packets for this urb  Description Creates an urb for the USB driver to use and returns a pointer to it. If no memory is available, NULL is returned.  If the driver want to use this urb for interrupt, control, or bulk endpoints, pass ’0’ as the number of iso packets.  The driver should call usb_free_urb when it is ﬁnished with the urb.  usb_free_urb  Name usb_free_urb — frees the memory used by a urb  Synopsis  void usb_free_urb  urb_t* urb ;  323   Chapter 17. USB Devices  Arguments  urb  pointer to the urb to free  Description If an urb is created with a call to usb_create_urb it should be cleaned up with a call to usb_free_urb when the driver is ﬁnished with it.  usb_control_msg  Name usb_control_msg — Builds a control urb, sends it off and waits for completion  int usb_control_msg  struct usb_device * dev, unsigned int pipe, __u8 request, __u8 requesttype, __u16 value, __u16 index, void * data, __u16 size, int timeout ;  Synopsis  Arguments  dev  pointer to the usb device to send the message to  324   Chapter 17. USB Devices  endpoint “pipe” to send the message to  USB message request value  requesttype  USB message request type value  USB message value  USB message index value  pointer to the data to send  length in bytes of the data to send  pipe  request  value  index  data  size  timeout  time to wait for the message to complete before timing out  if 0 the wait is forever   Description This function sends a simple control message to a speciﬁed endpoint and waits for the message to complete, or timeout.  If successful, it returns 0, othwise a negative error number.  Don’t use this function from within an interrupt context, like a bottom half handler. If you need a asyncronous message, or need to send a message from within interrupt context, use usb_submit_urb  325   usb_bulk_msg  Chapter 17. USB Devices  Name usb_bulk_msg — Builds a bulk urb, sends it off and waits for completion  int usb_bulk_msg  struct usb_device * usb_dev, unsigned int pipe, void * data, int len, int * actual_length, int timeout ;  Synopsis  Arguments  usb_dev  pointer to the usb device to send the message to  pipe  data  len  endpoint “pipe” to send the message to  pointer to the data to send  length in bytes of the data to send  actual_length  timeout  pointer to a location to put the actual length transferred in bytes  time to wait for the message to complete before timing out  if 0 the wait is forever   326   Chapter 17. USB Devices  Description This function sends a simple bulk message to a speciﬁed endpoint and waits for the message to complete, or timeout.  If successful, it returns 0, othwise a negative error number. The number of actual bytes transferred will be plaed in the actual_timeout paramater.  Don’t use this function from within an interrupt context, like a bottom half handler. If you need a asyncronous message, or need to send a message from within interrupt context, use usb_submit_urb  327   Chapter 18. 16x50 UART Driver  register_serial  Name register_serial — conﬁgure a 16x50 serial port at runtime  int register_serial  struct serial_struct * req ;  Synopsis  Arguments  req  request structure  Description Conﬁgure the serial port speciﬁed by the request. If the port exists and is in use an error is returned. If the port is not currently in the table it is added.  The port is then probed and if neccessary the IRQ is autodetected If this fails an error is returned.  On success the port is ready to use and the line number is returned.  328   unregister_serial  Chapter 18. 16x50 UART Driver  Name unregister_serial — deconﬁgure a 16x50 serial port  Synopsis  void unregister_serial  int line ;  Arguments  line  line to deconﬁgure  Description The port speciﬁed is deconﬁgured and its resources are freed. Any user of the port is disconnected as if carrier was dropped. Line is the port number returned by register_serial.  329   Chapter 19. Z85230 Support Library  z8530_interrupt  Name z8530_interrupt — Handle an interrupt from a Z8530  void z8530_interrupt  int irq, void * dev_id, struct pt_regs * regs ;  Synopsis  Arguments  irq  dev_id  Interrupt number  regs  unused  The Z8530 device that is interrupting.  Description A Z85[2]30 device has stuck its hand in the air for attention. We scan both the channels on the chip for events and then call the channel speciﬁc call backs for each channel that has events. We have to use callback functions because the two channels can be in different modes.  330   Chapter 19. Z85230 Support Library  z8530_sync_open  Name z8530_sync_open — Open a Z8530 channel for PIO  Synopsis  int z8530_sync_open  struct net_device * dev, struct z8530_channel * c ;  Arguments  dev  c  The network interface we are using  The Z8530 channel to open in synchronous PIO mode  Description Switch a Z8530 into synchronous mode without DMA assist. We raise the RTS DTR and commence network operation.  331   z8530_sync_close  Chapter 19. Z85230 Support Library  Name z8530_sync_close — Close a PIO Z8530 channel  Synopsis  int z8530_sync_close  struct net_device * dev, struct z8530_channel * c ;  Arguments  dev  c  Network device to close  Z8530 channel to disassociate and move to idle  Description Close down a Z8530 interface and switch its interrupt handlers to discard future events.  z8530_sync_dma_open  Name z8530_sync_dma_open — Open a Z8530 for DMA I O  332   Synopsis  Chapter 19. Z85230 Support Library  int z8530_sync_dma_open  struct net_device * dev, struct z8530_channel * c ;  Arguments  dev  c  The network device to attach  The Z8530 channel to conﬁgure in sync DMA mode.  Description Set up a Z85x30 device for synchronous DMA in both directions. Two ISA DMA channels must be available for this to work. We assume ISA DMA driven I O and PC limits on access.  z8530_sync_dma_close  Name z8530_sync_dma_close — Close down DMA I O  Synopsis  int z8530_sync_dma_close  struct net_device * dev, struct z8530_channel * c ;  333   Chapter 19. Z85230 Support Library  Arguments  dev  c  Network device to detach  Z8530 channel to move into discard mode  Description Shut down a DMA mode synchronous interface. Halt the DMA, and free the buffers.  z8530_sync_txdma_open  Name z8530_sync_txdma_open — Open a Z8530 for TX driven DMA  Synopsis  int z8530_sync_txdma_open  struct net_device * dev, struct z8530_channel * c ;  334   Chapter 19. Z85230 Support Library  Arguments  dev  c  The network device to attach  The Z8530 channel to conﬁgure in sync DMA mode.  Description Set up a Z85x30 device for synchronous DMA tranmission. One ISA DMA channel must be available for this to work. The receive side is run in PIO mode, but then it has the bigger FIFO.  z8530_sync_txdma_close  Name z8530_sync_txdma_close — Close down a TX driven DMA channel  Synopsis  int z8530_sync_txdma_close  struct net_device * dev, struct z8530_channel * c ;  335   Chapter 19. Z85230 Support Library  Arguments  dev  c  Network device to detach  Z8530 channel to move into discard mode  Description Shut down a DMA PIO split mode synchronous interface. Halt the DMA, and free the buffers.  z8530_describe  Name z8530_describe — Uniformly describe a Z8530 port  Synopsis  void z8530_describe  struct z8530_dev * dev, char * mapping, unsigned long io ;  Arguments  dev  Z8530 device to describe  336   Chapter 19. Z85230 Support Library  string holding mapping type  eg “I O” or “Mem”   mapping  io  the port value in question  Description Describe a Z8530 in a standard format. We must pass the I O as the port offset isnt predictable. The main reason for this function is to try and get a common format of report.  z8530_init  Name z8530_init — Initialise a Z8530 device  Synopsis  int z8530_init  struct z8530_dev * dev ;  Arguments  dev  Z8530 device to initialise.  337   Chapter 19. Z85230 Support Library  Description Conﬁgure up a Z8530 Z85C30 or Z85230 chip. We check the device is present, identify the type and then program it to hopefully keep quite and behave. This matters a lot, a Z8530 in the wrong state will sometimes get into stupid modes generating 10Khz interrupt streams and the like.  We set the interrupt handler up to discard any events, in case we get them during reset or setp.  Return 0 for success, or a negative value indicating the problem in errno form.  z8530_shutdown  Name z8530_shutdown — Shutdown a Z8530 device  Synopsis  int z8530_shutdown  struct z8530_dev * dev ;  Arguments  dev  The Z8530 chip to shutdown  Description We set the interrupt handlers to silence any interrupts. We then reset the chip and wait 100uS to be sure the reset completed. Just in case the caller then tries to do stuff.  338   Chapter 19. Z85230 Support Library  z8530_channel_load  Name z8530_channel_load — Load channel data  Synopsis  int z8530_channel_load  struct z8530_channel * c, u8 * rtable ;  Arguments  c  rtable  Z8530 channel to conﬁgure  table of register, value pairs  FIXME ioctl to allow user uploaded tables  Load a Z8530 channel up from the system data. We use +16 to indicate the “prime” registers. The value 255 terminates the table.  339   z8530_null_rx  Chapter 19. Z85230 Support Library  void z8530_null_rx  struct z8530_channel * c, struct sk_buff * skb ;  Name z8530_null_rx — Discard a packet  Synopsis  Arguments  c  skb  The buffer  The channel the packet arrived on  Description We point the receive handler at this function when idle. Instead of syncppp processing the frames we get to throw them away.  340   z8530_queue_xmit  Chapter 19. Z85230 Support Library  int z8530_queue_xmit  struct z8530_channel * c, struct sk_buff * skb ;  Name z8530_queue_xmit — Queue a packet  Synopsis  Arguments  c  skb  The channel to use  The packet to kick down the channel  Description Queue a packet for transmission. Because we have rather hard to hit interrupt latencies for the Z85230 per packet even in DMA mode we do the ﬂip to DMA buffer if needed here not in the IRQ.  341   z8530_get_stats  Chapter 19. Z85230 Support Library  Name z8530_get_stats — Get network statistics  Synopsis  struct net_device_stats * z8530_get_stats  struct z8530_channel * c ;  Arguments  c  The channel to use  Description Get the statistics block. We keep the statistics in software as the chip doesn’t do it for us.  342   Chapter 20. Frame Buffer Library  The frame buffer drivers depend heavily on four data structures. These structures are declared in include linux fb.h. They are fb_info, fb_var_screeninfo, fb_ﬁx_screeninfo and fb_monospecs. The last three can be made available to and from userland.  fb_info deﬁnes the current state of a particular video card. Inside fb_info, there exists a fb_ops structure which is a collection of needed functions to make fbdev and fbcon work. fb_info is only visible to the kernel.  fb_var_screeninfo is used to describe the features of a video card that are user deﬁned. With fb_var_screeninfo, things such as depth and the resolution may be deﬁned.  The next structure is fb_ﬁx_screeninfo. This deﬁnes the properties of a card that are created when a mode is set and can’t be changed otherwise. A good example of this is the start of the frame buffer memory. This "locks" the address of the frame buffer memory, so that it cannot be changed or moved.  The last structure is fb_monospecs. In the old API, there was little importance for fb_monospecs. This allowed for forbidden things such as setting a mode of 800x600 on a ﬁx frequency monitor. With the new API, fb_monospecs prevents such things, and if used correctly, can prevent a monitor from being cooked. fb_monospecs will not be useful until kernels 2.5.x.  20.1. Frame Buffer Memory  register_framebuffer  Name register_framebuffer — registers a frame buffer device  Synopsis  int register_framebuffer  struct fb_info * fb_info ;  343   Chapter 20. Frame Buffer Library  Arguments  fb_info  frame buffer info structure  Description Registers a frame buffer device fb_info.  Returns negative errno on error, or zero for success.  unregister_framebuffer  Name unregister_framebuffer — releases a frame buffer device  Synopsis  int unregister_framebuffer  struct fb_info * fb_info ;  Arguments  fb_info  frame buffer info structure  344   Chapter 20. Frame Buffer Library  Description Unregisters a frame buffer device fb_info.  Returns negative errno on error, or zero for success.  20.2. Frame Buffer Console  fbcon_redraw_clear  Name fbcon_redraw_clear — clear area of the screen  Synopsis  stucture pointing to current active virtual console  Arguments  conp  p  sy  display structure  starting Y coordinate  void fbcon_redraw_clear  struct vc_data * conp, struct display * p, int sy, int sx, int height, int width ;  345   Chapter 20. Frame Buffer Library  sx  height  width  starting X coordinate  height of area to clear  width of area to clear  Synopsis  Arguments  p  display structure  Description Clears a speciﬁed area of the screen. All dimensions are in pixels.  fbcon_redraw_bmove  Name fbcon_redraw_bmove — copy area of screen to another area  void fbcon_redraw_bmove  struct display * p, int sy, int sx, int dy, int dx, int h, int w ;  346   Chapter 20. Frame Buffer Library  sy  sx  dy  dx  h  w  origin Y coordinate  origin X coordinate  destination Y coordinate  destination X coordinate  height of area to copy  width of area to copy  Description Copies an area of the screen to another area of the same screen. All dimensions are in pixels.  Note that this function cannot be used together with ypan or ywrap.  347   20.3. Frame Buffer Colormap  Chapter 20. Frame Buffer Library  fb_alloc_cmap  Name fb_alloc_cmap — allocate a colormap  Synopsis  int fb_alloc_cmap  struct fb_cmap * cmap, int len, int transp ;  frame buffer colormap structure  Arguments  cmap  len  transp  length of cmap  boolean, 1 if there is transparency, 0 otherwise  Description Allocates memory for a colormap cmap. len is the number of entries in the palette.  Returns -1 errno on error, or zero on success.  348   fb_copy_cmap  Chapter 20. Frame Buffer Library  void fb_copy_cmap  struct fb_cmap * from, struct fb_cmap * to, int fsfromto ;  Name fb_copy_cmap — copy a colormap  Synopsis  Arguments  from  to  frame buffer colormap structure  frame buffer colormap structure  fsfromto  determine copy method  Description Copy contents of colormap from from to to.  0 memcpy function  349   Chapter 20. Frame Buffer Library  1 copy_from_user function to copy from userspace  2 copy_to_user function to copy to userspace  fb_get_cmap  Name fb_get_cmap — get a colormap  Synopsis  int fb_get_cmap  struct fb_cmap * cmap, int kspc, int  *getcolreg   u_int, u_int *, u_int *, u_int *, u_int *, struct fb_info * , struct fb_info * info ;  Arguments  cmap  kspc  frame buffer colormap  boolean, 0 copy local, 1 put_user function  350   Chapter 20. Frame Buffer Library  pointer to a function to get a color register  getcolreg  info  frame buffer info structure  Description Get a colormap cmap for a screen of device info.  Returns negative errno on error, or zero on success.  fb_set_cmap  Name fb_set_cmap — set the colormap  Synopsis  Arguments  cmap  frame buffer colormap structure  int fb_set_cmap  struct fb_cmap * cmap, int kspc, int  *setcolreg   u_int, u_int, u_int, u_int, u_int, struct fb_info * , struct fb_info * info ;  351   Chapter 20. Frame Buffer Library  boolean, 0 copy local, 1 get_user function  kspc  info  setcolreg  frame buffer info structure  Description Sets the colormap cmap for a screen of device info.  Returns negative errno on error, or zero on success.  fb_default_cmap  Name fb_default_cmap — get default colormap  Synopsis  struct fb_cmap * fb_default_cmap  int len ;  Arguments  len  size of palette for a depth  352   Description Gets the default colormap for a speciﬁc screen depth. len is the size of the palette for a particular screen depth.  Chapter 20. Frame Buffer Library  Returns pointer to a frame buffer colormap structure.  fb_invert_cmaps  Name fb_invert_cmaps — invert all defaults colormaps  Synopsis  void fb_invert_cmaps   void ;  Arguments  void  no arguments  Description  Invert all default colormaps.  353   20.4. Frame Buffer Generic Functions  Chapter 20. Frame Buffer Library  fbgen_get_ﬁx  Name fbgen_get_fix — get ﬁxed part of display  Synopsis  int fbgen_get_fix  struct fb_fix_screeninfo * fix, int con, struct fb_info * info ;  Arguments  fix  con  info  fb_ﬁx_screeninfo structure  virtual console number  frame buffer info structure  Description Get the ﬁxed information part of the display and place it into fix for virtual console con on device info.  Returns negative errno on error, or zero on success.  354   Chapter 20. Frame Buffer Library  fbgen_get_var  Name fbgen_get_var — get user deﬁned part of display  Synopsis  int fbgen_get_var  struct fb_var_screeninfo * var, int con, struct fb_info * info ;  Arguments  var  con  info  fb_var_screeninfo structure  virtual console number  frame buffer info structure  Description Get the user deﬁned part of the display and place it into var for virtual console con on device info.  Returns negative errno on error, or zero for success.  355   fbgen_set_var  Chapter 20. Frame Buffer Library  Name fbgen_set_var — set the user deﬁned part of display  Synopsis  int fbgen_set_var  struct fb_var_screeninfo * var, int con, struct fb_info * info ;  fb_var_screeninfo user deﬁned part of the display  Arguments  var  con  info  virtual console number  frame buffer info structure  Description Set the user deﬁned part of the display as dictated by var for virtual console con on device info.  Returns negative errno on error, or zero for success.  356   fbgen_get_cmap  Chapter 20. Frame Buffer Library  Name fbgen_get_cmap — get the colormap  Synopsis  int fbgen_get_cmap  struct fb_cmap * cmap, int kspc, int con, struct fb_info * info ;  frame buffer colormap structure  boolean, 0 copy local, 1 put_user function  Arguments  cmap  kspc  con  info  virtual console number  frame buffer info structure  Description Gets the colormap for virtual console con and places it into cmap for device info.  Returns negative errno on error, or zero for success.  357   fbgen_set_cmap  Chapter 20. Frame Buffer Library  Name fbgen_set_cmap — set the colormap  Synopsis  int fbgen_set_cmap  struct fb_cmap * cmap, int kspc, int con, struct fb_info * info ;  frame buffer colormap structure  boolean, 0 copy local, 1 get_user function  Arguments  cmap  kspc  con  info  virtual console number  frame buffer info structure  Description Sets the colormap cmap for virtual console con on device info.  Returns negative errno on error, or zero for success.  358   fbgen_pan_display  Chapter 20. Frame Buffer Library  Name fbgen_pan_display — pan or wrap the display  Synopsis  int fbgen_pan_display  struct fb_var_screeninfo * var, int con, struct fb_info * info ;  frame buffer user deﬁned part of display  Arguments  var  con  info  virtual console number  frame buffer info structure  Description Pan or wrap virtual console con for device info.  This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP ﬂag in var.  Returns negative errno on error, or zero for success.  359   fbgen_do_set_var  Chapter 20. Frame Buffer Library  Name fbgen_do_set_var — change the video mode  Synopsis  int fbgen_do_set_var  struct fb_var_screeninfo * var, int isactive, struct fb_info_gen * info ;  Arguments  var  isactive  info  frame buffer user deﬁned part of display  boolean, 0 inactive, 1 active  generic frame buffer info structure  Description Change the video mode settings for device info. If isactive is non-zero, the changes will be activated immediately.  Return negative errno on error, or zero for success.  360   fbgen_set_disp  Chapter 20. Frame Buffer Library  Name fbgen_set_disp — set generic display  Synopsis  void fbgen_set_disp  int con, struct fb_info_gen * info ;  Arguments  con  info  virtual console number  generic frame buffer info structure  Description Sets a display on virtual console con for device info.  fbgen_install_cmap  Name fbgen_install_cmap — install the current colormap  361   Synopsis  Chapter 20. Frame Buffer Library  void fbgen_install_cmap  int con, struct fb_info_gen * info ;  Arguments  con  info  virtual console number  generic frame buffer info structure  Description Installs the current colormap for virtual console con on device info.  fbgen_update_var  Name fbgen_update_var — update user deﬁned part of display  Synopsis  int fbgen_update_var  int con, struct fb_info * info ;  362   Chapter 20. Frame Buffer Library  Arguments  con  info  virtual console number  frame buffer info structure  Description Updates the user deﬁned part of the display  ’var’ structure  on virtual console con for device info. This function is called by fbcon.c.  Returns negative errno on error, or zero for success.  fbgen_switch  Name fbgen_switch — switch to a different virtual console.  Synopsis  int fbgen_switch  int con, struct fb_info * info ;  Arguments  con  virtual console number  363   Chapter 20. Frame Buffer Library  info  frame buffer info structure  Description Switch to virtuall console con on device info.  Returns zero.  fbgen_blank  Name fbgen_blank — blank the screen  Synopsis  Arguments  blank  info  boolean, 0 unblank, 1 blank  frame buffer info structure  void fbgen_blank  int blank, struct fb_info * info ;  364   Description Blank the screen on device info.  Chapter 20. Frame Buffer Library  20.5. Frame Buffer Video Mode Database  fb_ﬁnd_mode  Name fb_find_mode — ﬁnds a valid video mode  Synopsis  int __init fb_find_mode  struct fb_var_screeninfo * var, struct fb_info * info, const char * mode_option, const struct fb_videomode * db, unsigned int dbsize, const struct fb_videomode * default_mode, unsigned int default_bpp ;  Arguments  var  info  frame buffer user deﬁned part of display  frame buffer info structure  365   Chapter 20. Frame Buffer Library  mode_option  string video mode to ﬁnd  db  video mode database  dbsize  size of db  default_mode  default_bpp  default video mode to fall back to  default color depth in bits per pixel  Description Finds a suitable video mode, starting with the speciﬁed mode in mode_option with fallback to default_mode. If default_mode fails, all modes in the video mode database will be tried.  Valid mode speciﬁers for mode_option:   x [- ][@ ] or  [- ][@ ]  with  ,  ,   and   decimal numbers and   a string.  NOTE The passed struct var is _not_ cleared! This allows you to supply values for e.g. the grayscale and accel_ﬂags ﬁelds.  Returns zero for failure, 1 if using speciﬁed mode_option, 2 if using speciﬁed mode_option with an ignored refresh rate, 3 if default mode is used, 4 if fall back to any valid mode.  366   __fb_try_mode  Chapter 20. Frame Buffer Library  Name __fb_try_mode — test a video mode  Synopsis  int __fb_try_mode  struct fb_var_screeninfo * var, struct fb_info * info, const struct fb_videomode * mode, unsigned int bpp ;  Arguments  var  info  mode  bpp  frame buffer user deﬁned part of display  frame buffer info structure  frame buffer video mode structure  color depth in bits per pixel  Description Tries a video mode to test it’s validity for device info.  Returns 1 on success.  367   20.6. Frame Buffer Macintosh Video Mode Database  Chapter 20. Frame Buffer Library  console_getmode  Name console_getmode — get current mode  Synopsis  int console_getmode  struct vc_mode * mode ;  Arguments  mode  virtual console mode structure  Description Populates mode with the current mode held in the global display_info structure.  Note, this function is only for XPMAC compatibility.  Returns zero.  368   console_setmode  Chapter 20. Frame Buffer Library  Name console_setmode — sets current console mode  Synopsis  int console_setmode  struct vc_mode * mode, int doit ;  Arguments  mode  doit  virtual console mode structure  boolean, 0 test mode, 1 test and activate mode  Description Sets mode for all virtual consoles if doit is non-zero, otherwise, test a mode for validity.  Note, this function is only for XPMAC compatibility.  Returns negative errno on error, or zero for success.  369   console_setcmap  Chapter 20. Frame Buffer Library  Name console_setcmap — sets palette color map for console  Synopsis  int console_setcmap  int n_entries, unsigned char * red, unsigned char * green, unsigned char * blue ;  Arguments  n_entries  number of entries in the palette  max 16   red  green  blue  value for red component of palette  value for green component of palette  value for blue component of palette  Description Sets global palette_cmap structure and activates the palette on the current console.  Note, this function is only for XPMAC compatibility.  Returns negative errno on error, or zero for success.  370   Chapter 20. Frame Buffer Library  console_powermode  Name console_powermode — sets monitor power mode  Synopsis  int console_powermode  int mode ;  Arguments  mode  power state to set  Description Sets power state as dictated by mode.  Note that this function is only for XPMAC compatibility and doesn’t do much.  Returns 0 for VC_POWERMODE_INQUIRY, -EINVAL for VESA power settings, or -ENIXIO on failure.  371   mac_vmode_to_var  Chapter 20. Frame Buffer Library  Name mac_vmode_to_var — converts vmode cmode pair to var structure  Synopsis  int mac_vmode_to_var  int vmode, int cmode, struct fb_var_screeninfo * var ;  Arguments  vmode  cmode  var  MacOS video mode  MacOS color mode  frame buffer video mode structure  Description Converts a MacOS vmode cmode pair to a frame buffer video mode structure.  Returns negative errno on error, or zero for success.  372   mac_var_to_vmode  Chapter 20. Frame Buffer Library  Name mac_var_to_vmode — convert var structure to MacOS vmode cmode pair  Synopsis  int mac_var_to_vmode  const struct fb_var_screeninfo * var, int * vmode, int * cmode ;  frame buffer video mode structure  Arguments  var  vmode  cmode  MacOS video mode  MacOS color mode  Description Converts a frame buffer video mode structure to a MacOS vmode cmode pair.  Returns negative errno on error, or zero for success.  373   mac_map_monitor_sense  Chapter 20. Frame Buffer Library  Name mac_map_monitor_sense — Convert monitor sense to vmode  Synopsis  int mac_map_monitor_sense  int sense ;  Arguments  sense  Macintosh monitor sense number  Description Converts a Macintosh monitor sense number to a MacOS vmode number.  Returns MacOS vmode video mode number.  mac_ﬁnd_mode  Name mac_find_mode — ﬁnd a video mode  374   Synopsis  Chapter 20. Frame Buffer Library  int __init mac_find_mode  struct fb_var_screeninfo * var, struct fb_info * info, const char * mode_option, unsigned int default_bpp ;  Arguments  var  info  frame buffer user deﬁned part of display  frame buffer info structure  mode_option  default_bpp  video mode name  see mac_modedb[]   default color depth in bits per pixel  Description Finds a suitable video mode. Tries to set mode speciﬁed by mode_option. If the name of the wanted mode begins with ’mac’, the Mac video mode database will be used, otherwise it will fall back to the standard video mode database.  Note Function marked as __init and can only be used during system boot.  Returns error code from fb_ﬁnd_mode  see fb_ﬁnd_mode function .  375   Chapter 20. Frame Buffer Library  20.7. Frame Buffer Fonts  fbcon_ﬁnd_font  Name fbcon_find_font — ﬁnd a font  Synopsis  struct fbcon_font_desc * fbcon_find_font  char * name ;  Arguments  name  string name of a font  Description Find a speciﬁed font with string name name.  Returns NULL if no font found, or a pointer to the speciﬁed font.  376   fbcon_get_default_font  Chapter 20. Frame Buffer Library  Name fbcon_get_default_font — get default font  Synopsis  struct fbcon_font_desc * fbcon_get_default_font  int xres, int yres ;  Arguments  xres  yres  screen size of X  screen size of Y  Description Get the default font for a speciﬁed screen size. Dimensions are in pixels.  Returns NULL if no font is found, or a pointer to the chosen font.  377

@highlight

High Quality Content by WIKIPEDIA articles! The Linux Kernel API is an application programming interface providing a uniform method for device drivers and other low-level software written for the Linux kernel to access system resources and services. An application programming interface (API) is an interface implemented by a software program which enables it to interact with other software. It facilitates interaction between different software programs similar to the way the user interface facilitates interaction between humans and computers. An API is implemented by applications, libraries, and operating systems to determine their vocabularies and calling conventions, and is used to access their services. It may include specifications for routines, data structures, object classes, and protocols used to communicate between the consumer and the implementer of the API.